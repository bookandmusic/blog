{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/person.jpg","path":"img/person.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"2037e45859cc41aae608d7a75ca5b2796f2f7ee0","modified":1611280923962},{"_id":"source/about/index.md","hash":"12f3c2e302abf4336bcf5ecb2049f5e1b34b038b","modified":1611299322696},{"_id":"source/categories/index.md","hash":"15e6817da83784dffea92421f64370d0392e7e92","modified":1606832628407},{"_id":"source/tags/index.md","hash":"cdbfa764404071f2c78a25f01d50920cd108b95b","modified":1606832628407},{"_id":"source/_posts/.DS_Store","hash":"f4142fc359f401c5ee88630ac5796f239088b7a2","modified":1607557846887},{"_id":"source/_posts/DRF-JWT浅析.md","hash":"8f9ca65a760f4c1beed700db01d9645d0f3e4d8c","modified":1611545414367},{"_id":"source/_posts/DRF-序列化与反序列化.md","hash":"c4f58c497bd36c31699f8ecc5f58e6d86fef7cce","modified":1611584159996},{"_id":"source/_posts/Django-2-视图.md","hash":"12c8992a7f05dcb3f9f124dc0a539f19c78b3f36","modified":1611413178431},{"_id":"source/_posts/DRF-数据分页.md","hash":"b636c89d1fba43e1837dae7c85917f7eff355d5d","modified":1611413259325},{"_id":"source/_posts/DRF-后端跨域.md","hash":"6e4fca0dfbb26f3aa465ca9c9033fa8849b6fc76","modified":1611413254356},{"_id":"source/_posts/DRF-JWT认证、权限、限流.md","hash":"41dc18d12fef443df1262adae0efab6a7e059081","modified":1611560798089},{"_id":"source/_posts/Django-1-项目流程.md","hash":"50278089bddfc73319d08c2821d52fe5ccfe6843","modified":1611413167728},{"_id":"source/_posts/Django-4-路由.md","hash":"7689709518868881c0bf52649001313d46cb43a3","modified":1611413193070},{"_id":"source/_posts/Django-6-ORM操作.md","hash":"7ed39d41e6d820782d225268292f66ec640d5eff","modified":1611413206942},{"_id":"source/_posts/Django-3-模板.md","hash":"f6c87028c0ddef4108eb1464554fafe85370723e","modified":1611413183039},{"_id":"source/_posts/Django-5-ORM模型类.md","hash":"95d6cb5e56855ac59f67abbb8549c898e1e9bebb","modified":1611413200391},{"_id":"source/_posts/Django-中间件.md","hash":"ec9f38c46253adcea353a28cc555f36f69d096a9","modified":1611212583632},{"_id":"source/_posts/Django-缓存.md","hash":"10447774dcfb74ffc7b0cf37ae3e80a68e7cff83","modified":1611415274050},{"_id":"source/_posts/Django-图片上传.md","hash":"fef608b1b60541218b33b4f3b50809dea697293b","modified":1611413127202},{"_id":"source/_posts/Django-用户认证系统.md","hash":"62a7cc2566a3de560217b59af96f10a406f1f812","modified":1611413140441},{"_id":"source/_posts/Django-邮件发送.md","hash":"cd3b330a0eae5cea2cd976e174e77841cc6f0564","modified":1607043838633},{"_id":"source/_posts/Vue-vue-router.md","hash":"619985c898c006f064d7defcce625bf5472b9f9b","modified":1607218437200},{"_id":"source/_posts/Vue引入本地资源.md","hash":"de36eefbc1e26f904fdd2e7f1169c75ea0e67fa4","modified":1609077234685},{"_id":"source/_posts/books.md","hash":"385011ed3978ab748e74426b001b2feaef29b27c","modified":1606832628398},{"_id":"source/_posts/Django-数据分页.md","hash":"60c317e6f86a8b6c60b24d9b6f7d9f3c3e8d5686","modified":1611413115906},{"_id":"source/_posts/Js-ES6语法.md","hash":"30b8e1792bcd9032210916190f550e8cdf16c369","modified":1606832628397},{"_id":"source/_posts/Flask易错点.md","hash":"227f49cee9aad9a1bf7332a33673cb53499cd816","modified":1611415058058},{"_id":"source/_posts/python函数-递归函数.md","hash":"cac07943daeb870e4a33c409fdb6d7f6f0e4006e","modified":1611413998063},{"_id":"source/_posts/python函数-内置函数.md","hash":"9d56f6aafb2e7603845f82e361caeeca90941977","modified":1611413982865},{"_id":"source/_posts/Vue-事件绑定以及事件修饰符.md","hash":"5c08bd65e7f127e996328de1dff8c048ba291003","modified":1606832628398},{"_id":"source/_posts/python函数-高阶函数.md","hash":"d8bd69282f1256b24ba6ddb66ee4cd267f0b0901","modified":1611413988267},{"_id":"source/_posts/python函数-匿名函数.md","hash":"0ab13b8008f795f59c126161483533af395dddbe","modified":1611414070937},{"_id":"source/_posts/python函数-装饰器.md","hash":"c21f1ca131cdfc1fcdaaf7525466336bf242ef63","modified":1611414325869},{"_id":"source/_posts/python函数-变量解析.md","hash":"378133d1c05001daef458b3b76faf6452e751fe0","modified":1611413914829},{"_id":"source/_posts/python模块-Json模块.md","hash":"4438347e846460ae27397acf06ff8ee4a9755d2f","modified":1611414466298},{"_id":"source/_posts/python模块-time-timeit-模块.md","hash":"531984cb2bd61c4794872372f1682a091834a03a","modified":1611414445827},{"_id":"source/_posts/python面向对象-基础.md","hash":"c5b1601d57472b2065359399b3de8a773984b070","modified":1611414650465},{"_id":"source/_posts/python面向对象-魔法方法.md","hash":"5860cff19fd4a5e29ae8fd9992e8c9313c28979d","modified":1611414390660},{"_id":"source/_posts/python高级-内存管理.md","hash":"a8ae600243972050e5f78184b46c3d4a8ca92156","modified":1611413606346},{"_id":"source/_posts/python高级-正则匹配.md","hash":"7a83692545332c64add0620b9f5613ce2abd528c","modified":1611413900342},{"_id":"source/_posts/vue-Axios(一)Axios在vue中的使用教程.md","hash":"0de9636b01579262d96f176270fe1b6220c6cd7f","modified":1606832628401},{"_id":"source/_posts/vue-Axios(三)GET和POST提交数据.md","hash":"70b80ebe4586a1875a4c5d07499925b1d5ee3723","modified":1606832628401},{"_id":"source/_posts/vue-Axios(二)API说明.md","hash":"ba32904a25bd1026965543ef6c9ea1c61acb5dac","modified":1606832628401},{"_id":"source/_posts/vue-Axios(四)跨域请求.md","hash":"42d6139b92ef4e67a9c294965990c23d143da6bc","modified":1606832628402},{"_id":"source/_posts/python高级-进程、线程、协程.md","hash":"5b82c21854e761c727191a7b594af5943d5addee","modified":1611413616563},{"_id":"source/_posts/vue 组件间通信六种方式（完整版） .md","hash":"68c5b055c4df73b50266c66bb8aa6b704543210c","modified":1611212729359},{"_id":"source/_posts/python高级-异常.md","hash":"2de5d742fdb3279ef93f2264a482da443f4f1339","modified":1611413657047},{"_id":"source/_posts/web-RESTful 规范的 API 接口设计.md","hash":"6f18751beda5bf662c37582056359d9221541e01","modified":1611414590792},{"_id":"source/_posts/web-HTTP 协议之 http 状态码详解.md","hash":"e034856d41d1447032ecec6d23967f6cad133106","modified":1611415020051},{"_id":"source/_posts/工具-Git操作.md","hash":"19fd1b028567eaf2beb7c46c710bf13bc0826c52","modified":1611543413338},{"_id":"source/_posts/工具-Nodejs环境配置.md","hash":"9b6c02bf5ba5b8b5cbab33d715fbd4123f206aac","modified":1611543408650},{"_id":"source/_posts/web-xss 攻击和 csrf 攻击.md","hash":"36c7c804643990e943241e352678ec20223316be","modified":1611414581913},{"_id":"source/_posts/工具-Python环境配置.md","hash":"238e3b6fe61f62cda4a597f57675e73733aa2582","modified":1611543421120},{"_id":"source/_posts/工具-win10 pyhton2和3共存.md","hash":"515176650990308c75860b4d418c81471c78504e","modified":1611414803340},{"_id":"source/_posts/数据库-MySQL主键约束和唯一性约束的区别.md","hash":"ae4bd0f6bd6f6af184633596565a2f62e6704d11","modified":1606832628403},{"_id":"source/_posts/工具-好用的 CLI 工具.md","hash":"cf9d2afeca810786cb9e2fcf21492821d6ef5118","modified":1611212766521},{"_id":"source/_posts/数据库-Mysql中varbinary、binary、char、varchar异同.md","hash":"12f0744518884a2733b6bb8ea404545fba803b10","modified":1611414910661},{"_id":"source/_posts/教程-Hexo博客配置教程.md","hash":"bd28e63c1ac0a1291d1d48f45c8b34ab96947ca4","modified":1611543514495},{"_id":"source/_posts/教程-GitBook教程.md","hash":"29e3ba19bf3c8de39eec02db22a94391557806bc","modified":1611543441330},{"_id":"source/_posts/数据库-Mysql常见错误.md","hash":"f59ad9ba0b1fd6318fa8c12c3ddbb097129cead9","modified":1611414864567},{"_id":"source/_posts/数据库-Mysql操作.md","hash":"08375538a12a3254dff7a0e85eaad3e58f496e91","modified":1611414855519},{"_id":"source/_posts/数据库-Redis命令.md","hash":"29ae9d9b25dc54e4bb49e1abd16bb7bdc36ccc18","modified":1611212790231},{"_id":"source/_posts/生活-笑话-一.md","hash":"4feb9aa4e066d93f9e8aded4cd9cac90338b126a","modified":1611212797030},{"_id":"source/_posts/生活-小故事.md","hash":"55ef7c9b3535f8e07172c5d431464bdf0cc0a579","modified":1611543521198},{"_id":"source/_posts/数据库-Mysql中的Decimal类型说明.md","hash":"422709a14dc2558ebd1972d41d02323c4b1d9271","modified":1611414891502},{"_id":"source/_posts/算法-时间复杂度-01_O 标记法与常见时间复杂度.md","hash":"e7f43046c837f105561e69178c35eab3f701fcbd","modified":1611543543565},{"_id":"source/_posts/算法-时间复杂度-02_常见函数的时间复杂度.md","hash":"2cfd6011df79bbd678224c53ac00edd6feb55446","modified":1611543548661},{"_id":"source/_posts/系统-Mac-清除office最近文件.md","hash":"4e974a70c5907ed5594f204499f6e0b046fd60ce","modified":1611543583568},{"_id":"source/_posts/算法-排序.md","hash":"0ae733c7099616b3dedd95f10fbe1d0966402541","modified":1611543538432},{"_id":"source/_posts/系统-win10设置开机自启.md","hash":"04d831d1979f58b50504cf1cd4426cc051cc09b7","modified":1611212816696},{"_id":"source/_posts/网络通信-02_简单介绍 HTTP 协议结构.md","hash":"c2131450e5343255939ac3dfa738edceae5f6d28","modified":1611212823065},{"_id":"source/_posts/系统-deepin OS 安装NVIDIA驱动.md","hash":"484c5ae0fbd2b57ca9a3ee1d003eb4db891be337","modified":1611543576558},{"_id":"source/_posts/网络通信-03_HTTP 报文内的 HTTP 信息.md","hash":"cae131820462c1b7ec40e0471dc20232b908a925","modified":1611212826185},{"_id":"source/_posts/网络通信-01_了解 Web 及网络基础.md","hash":"bcbc4f1f98a6c7e24677d66ec0ab70991f8b9a1c","modified":1611543568708},{"_id":"source/_posts/网络通信-多种方式实现并发 Web Server.md","hash":"845099213be4306a763d8f32cf5eb750b31a592d","modified":1611543553221},{"_id":"source/_posts/网络通信-Simple Web Server.md","hash":"9a72a10320366a946f3bf24ebd9a5c6812f57038","modified":1611543562853},{"_id":"source/_posts/网络通信-长连接与短连接.md","hash":"b05d5cd07353517fb3d9bf7df004952cd99c7123","modified":1611543558061},{"_id":"source/_posts/数据库-MySQL笔记.md","hash":"afd89f113e4c05331395950c9b8f999eb4c62d4a","modified":1611414859985},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608644830000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1608644830000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1608644830000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1608644830000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1608644830000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1608644830000},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1608644830000},{"_id":"themes/fluid/README.md","hash":"ea55d234aeae3eb9e232f729f8411810d65c6f49","modified":1608644830000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1608644830000},{"_id":"themes/fluid/_config.yml","hash":"81ca7eb1f42681e166e06931187447980ce6a10a","modified":1611299709797},{"_id":"themes/fluid/package.json","hash":"cf487407f4b485517e2387b51ae683077efda7e0","modified":1608644830000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1608644830000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1608644830000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1608644830000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1608644830000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1608644830000},{"_id":"themes/fluid/layout/about.ejs","hash":"e3e2de8b0dc63ece51c324bb7942f240cdbfc7bf","modified":1608644830000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1608644830000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":1608644830000},{"_id":"themes/fluid/layout/index.ejs","hash":"5233a459d30b605fd7d098b93603ec864a3da667","modified":1608644830000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1608644830000},{"_id":"themes/fluid/layout/layout.ejs","hash":"b2c89363eebd1578ca6eb426744cbef504643c7e","modified":1608644830000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1608644830000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1608644830000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1608644830000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1608644830000},{"_id":"themes/fluid/layout/post.ejs","hash":"550a834106c45ee156ff7c14ce5227eb1f96d311","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1608644830000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1608644830000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1608644830000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"bccd7961fa146dd5f0d70f77e7ab94e9f58d5bd3","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"382bd3ee27bc6d90776fc9171a487ff208bc4caa","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"dd71c9065bcf305188a03ae023cacaad67ec124e","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"ab70ddfcf7b14c7000130d1a2b54c75dde106d66","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1608644830000},{"_id":"themes/fluid/scripts/events/index.js","hash":"eb5335379affabd4cc98b56a971df5b82cb2ba86","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"2818548389e73197326e754e656657c4dee0e424","modified":1608644830000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1608644830000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"fd567dccd9ea8c158a5dae6847dd99e272c3f43c","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1608644830000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1608644830000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1608644830000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"569642bb89610c3c0f1827b1b6dff90571ec4879","modified":1608644830000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1608644830000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1608644830000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1608644830000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1608644830000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1608644830000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1608644830000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1608644830000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1608644830000},{"_id":"themes/fluid/source/js/boot.js","hash":"8b4a0a4fa13121d9c8154a7a2fc7d0a9c8f528f9","modified":1608644830000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1608644830000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1608644830000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1608644830000},{"_id":"themes/fluid/source/js/events.js","hash":"0e998c64d8b03fe6914b3f8fa6990b220ab353bd","modified":1608644830000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1608644830000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"4701f49b3dc62939adff5cc11f6d21963df7f135","modified":1608644830000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1608644830000},{"_id":"themes/fluid/source/js/plugins.js","hash":"dc1d8485c251a9dc2a1d1f6ffa65c8e7572b8fc9","modified":1608644830000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1608644830000},{"_id":"themes/fluid/source/js/utils.js","hash":"3086cede8d6d96ac5f4b5236b06271599a1ebbcb","modified":1608644830000},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1608644830000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1608644830000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1608644830000},{"_id":"themes/fluid/source/img/favicon.ico","hash":"ef74c9c84b1916d311e333799b35df4a26461b8a","modified":1611299520338},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1608644830000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"1b42e725454f3ae8d3bff086afcc294ca2fdeb72","modified":1608644830000},{"_id":"themes/fluid/source/img/person.jpg","hash":"8b12c49828ab9aa696037cedded900e3a183bead","modified":1611388757732},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"335b52bfa1cdd671cec1c4d745216d8404b2df45","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"3cd99f13535e444fff65c97a1f60e838aeaadba6","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"593649f7e3f86779649e078b69f6fdc584648d72","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"eefda20a23a199ed0e268da7d2f81f35483aa8bf","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"71239ad210d24ad10a01c339590a797062153e8a","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"d7d689156a8d2a6b00b306bd30628fa961449135","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"899664e8eea0e77ffcff436a24198ee2da750d11","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"1c7d62572ef1722797c367d6cc62f8d0c5f29111","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"d6f4ecb8a965ad86295f211081e7bb6c00af7737","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"1e9ed2dde3050b5a650d0e45b9f712a6279f8f0c","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7657fa63ebff9edf789c59c59ca1426c677fbbc1","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"6a3dbbf8c53215ff09090df8a0e04b455f1ff879","modified":1608644830000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"0f179d3fe50dac444b027ed6bbe449ecea3c4f72","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1608644830000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1608644830000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1608644830000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1608644830000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"ea4b3dae4a71dda4eddeeec1bbf7021e13fb26d4","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1608644830000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"012a47c843da989b3216423e11109d11f9cfc826","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4304bab8ad087911cbf5025a41014fbb67f20b5a","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"69b7d1c5771fcd77764582d6735a2b6046483c6c","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"ad41fe6e38a61856018021a8a9865f9fa1122bfc","modified":1608644830000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1608644830000},{"_id":"public/atom.xml","hash":"e299791fae90f83fb68a1b6ee0ff51348f2582f7","modified":1611584265587},{"_id":"public/search.xml","hash":"2e03e43c5f8a8c16eb321a8c9bebda59b787c7c9","modified":1611584265587},{"_id":"public/local-search.xml","hash":"78bd24cf387d921d36d92b4d6b9ca5cf599e62e1","modified":1611584265587},{"_id":"public/about/index.html","hash":"c203f59cef414b94772f84a3f3ddbbc70ec560c4","modified":1611584265587},{"_id":"public/2021/01/23/django-6-orm-cao-zuo/index.html","hash":"87c04b3ba809d58ea627ffa07ccecfe877e9e3fa","modified":1611584265587},{"_id":"public/2021/01/23/django-2-shi-tu/index.html","hash":"ec4d04c03ffe9098ae0a0ba90b5565f2ea1455be","modified":1611584265587},{"_id":"public/2020/12/09/django-3-mo-ban/index.html","hash":"cbd915fa4773b3cd4929f01c1cb3555fca1e09a7","modified":1611584265587},{"_id":"public/2020/08/16/wang-luo-tong-xin-chang-lian-jie-yu-duan-lian-jie/index.html","hash":"0679ca0b01058c9aa7a12d1d912003137313f04b","modified":1611584265587},{"_id":"public/2020/05/23/shu-ju-ku-redis-ming-ling/index.html","hash":"7ff3c3c43192d4f20fc1826c36c45c881ec70042","modified":1611584265587},{"_id":"public/2020/05/23/xi-tong-mac-qing-chu-office-zui-jin-wen-jian/index.html","hash":"7b403f58e69e04d1f3d5e377ce198b5a3be65204","modified":1611584265587},{"_id":"public/2020/02/26/shu-ju-ku-mysql-zhu-jian-yue-shu-he-wei-yi-xing-yue-shu-de-qu-bie/index.html","hash":"aecec22686fac1b4af46da0b278fc51909175bec","modified":1611584265587},{"_id":"public/2019/05/25/xi-tong-win10-she-zhi-kai-ji-zi-qi/index.html","hash":"75369ffc895ce275651a2e1a03cd1599e5e467a7","modified":1611584265587},{"_id":"public/2019/05/12/books/index.html","hash":"7d9ce0e5b84e2dd1a69a05be31eaedb1c5f1deb6","modified":1611584265587},{"_id":"public/2019/03/23/sheng-huo-xiao-hua-yi/index.html","hash":"b81a75d5d4586fe98400fdfe1c6552870cb67871","modified":1611584265587},{"_id":"public/2019/03/22/python-gao-ji-yi-chang/index.html","hash":"aa169c54fb6190a91361dcefd42b8f5efa552ab5","modified":1611584265587},{"_id":"public/2019/03/22/python-mian-xiang-dui-xiang-mo-fa-fang-fa/index.html","hash":"92b752e26a0112ae3430fcbc8d100aadd1d0c153","modified":1611584265587},{"_id":"public/archives/index.html","hash":"96e0a55b59d9dcc289a80c56279704993ac126c7","modified":1611584265587},{"_id":"public/archives/page/2/index.html","hash":"4514f7a31164977d8aff3a7b7ac3a302c600340c","modified":1611584265587},{"_id":"public/archives/page/3/index.html","hash":"c906a8478de5dc3b079474f37e3e81837d56029f","modified":1611584265587},{"_id":"public/archives/page/4/index.html","hash":"159b966d9c5d484fd714e760a60cf02aea223367","modified":1611584265587},{"_id":"public/archives/page/5/index.html","hash":"13bb889f2ed636e671fafec3360c5d3bec4645ca","modified":1611584265587},{"_id":"public/archives/page/6/index.html","hash":"94eec03e16f8bbc08a19ad8c8f8d19ebeff303e2","modified":1611584265587},{"_id":"public/archives/page/7/index.html","hash":"5833aa493d65aa144f65e35bc4cc318bee00ce29","modified":1611584265587},{"_id":"public/archives/2019/index.html","hash":"6ece261d031457b636d4267b5b9fbcf71104d18c","modified":1611584265587},{"_id":"public/archives/2019/page/2/index.html","hash":"dde5b8317eba268d31e5d18cbb6c0621544d0cce","modified":1611584265587},{"_id":"public/archives/2019/page/3/index.html","hash":"7a455ed3aa38f4b6ec9e19fa9b7c3d4eac79b678","modified":1611584265587},{"_id":"public/archives/2019/03/index.html","hash":"adf632d26ffb43060604f515c5e715cb64c01eab","modified":1611584265587},{"_id":"public/archives/2019/05/index.html","hash":"f31b16c7846e2585f112a1e26d7502a558ec1a97","modified":1611584265587},{"_id":"public/archives/2019/05/page/2/index.html","hash":"fccc2eb21a02118f0fd12500cc310ca2ae36747b","modified":1611584265587},{"_id":"public/archives/2019/06/index.html","hash":"a1151e9371eb3550ffe0a7d016d5bd43b619cca0","modified":1611584265587},{"_id":"public/archives/2019/11/index.html","hash":"acb9ab9bc88258be5565b48eb934c4e4bfd6767c","modified":1611584265587},{"_id":"public/archives/2019/12/index.html","hash":"e9eee38e6cdcd3ee3d4a1faec16fbda14ad4b28f","modified":1611584265587},{"_id":"public/archives/2020/index.html","hash":"7ef21c945e17575178956ab589bdb9b4c1e17304","modified":1611584265587},{"_id":"public/archives/2020/page/2/index.html","hash":"6152d9af6a77ac2182d838f9364e2bf04496640b","modified":1611584265587},{"_id":"public/archives/2020/page/3/index.html","hash":"da2650978ca1cfa1d45b43d4520f2fc2dd38776c","modified":1611584265587},{"_id":"public/archives/2020/page/4/index.html","hash":"459b6b7ceed0c5b55941ea7782afbfebd99390b8","modified":1611584265587},{"_id":"public/archives/2020/02/index.html","hash":"ab87bb893a14ccbb6f2257dee2df800c5385f201","modified":1611584265587},{"_id":"public/archives/2020/03/index.html","hash":"57b92a75be58431b19fa92205a23337f1917205f","modified":1611584265587},{"_id":"public/archives/2020/04/index.html","hash":"a3ec7e3a07c8a850b6dbbe0ccdea81a6093a851e","modified":1611584265587},{"_id":"public/archives/2020/05/index.html","hash":"2a7603e6d4ec0dacafd6ce21e397d223d1300eaf","modified":1611584265587},{"_id":"public/archives/2020/06/index.html","hash":"df6d8bde75b88922ded47775f012e60cc0fa00b4","modified":1611584265587},{"_id":"public/archives/2020/07/index.html","hash":"6b3d49a75ebc10d1c372e023b41ffebb97b7b278","modified":1611584265587},{"_id":"public/archives/2020/08/index.html","hash":"782a37fa6bc459107c2046a32bd135f8298c6fb7","modified":1611584265587},{"_id":"public/archives/2020/09/index.html","hash":"be8aeec7c22e0a4a08f3edb191bc03423e8d677a","modified":1611584265587},{"_id":"public/archives/2020/10/index.html","hash":"7c872162fca8491af25677eb5a32be5471635956","modified":1611584265587},{"_id":"public/archives/2020/11/index.html","hash":"e6dbe8ab83f662f94fe28da95b768e7cebd1baee","modified":1611584265587},{"_id":"public/archives/2020/12/index.html","hash":"95dac9256247a9b603aa2cfb710220b791dbb5ba","modified":1611584265587},{"_id":"public/archives/2021/index.html","hash":"4a198f6fc57fdcf245ff57c9831cdd182e9be01a","modified":1611584265587},{"_id":"public/archives/2021/01/index.html","hash":"4a198f6fc57fdcf245ff57c9831cdd182e9be01a","modified":1611584265587},{"_id":"public/categories/技术/index.html","hash":"5c80dbff2e165ebdc2b5a5c7111ba252724eadba","modified":1611584265587},{"_id":"public/categories/技术/page/2/index.html","hash":"8b66744b3c8b42c6870c6b09b68cd9438d44d7b9","modified":1611584265587},{"_id":"public/categories/技术/page/3/index.html","hash":"383271f8f567f99923b9bcdb569a136ed16f6204","modified":1611584265587},{"_id":"public/categories/技术/page/4/index.html","hash":"ff7502e5a132d51527b0f7965b5f1c063d6df635","modified":1611584265587},{"_id":"public/categories/技术/page/5/index.html","hash":"23e17239d3aedfce54702cb42f5489f1b969f689","modified":1611584265587},{"_id":"public/categories/技术/python/index.html","hash":"584704796f1ff6877f9e25bd008e456082d711ed","modified":1611584265587},{"_id":"public/categories/技术/python/page/2/index.html","hash":"6ce9a269ff33e7049462c1443e91661034f689d4","modified":1611584265587},{"_id":"public/categories/技术/python/page/3/index.html","hash":"a75e608a747dcc87affff70e0b4b0cfcb3e25524","modified":1611584265587},{"_id":"public/categories/技术/python/Django/index.html","hash":"002a3de20272e39c86f5c32e3425dc10b224128f","modified":1611584265587},{"_id":"public/categories/技术/python/DRF/index.html","hash":"f4d0d0d1cb86e97cb21f337ce06ef1448820e74b","modified":1611584265587},{"_id":"public/categories/技术/python/Flask/index.html","hash":"e8bd30148e1839a3c7669339af96ebe45e016625","modified":1611584265587},{"_id":"public/categories/技术/JS/index.html","hash":"0d504e2a43dd4adb85dd24863180549a075f662e","modified":1611584265587},{"_id":"public/categories/技术/vue/index.html","hash":"74cf53ba3f94ec43e4a4c4f02e64b804b02d9bff","modified":1611584265587},{"_id":"public/categories/Ebook/index.html","hash":"d43020d6948ed1f2a34c49591b56068aafbed5ba","modified":1611584265587},{"_id":"public/categories/技术/python/基础/index.html","hash":"010fb1ac290ba8f622e06971c72ef281627714c1","modified":1611584265587},{"_id":"public/categories/技术/python/模块/index.html","hash":"930a91536c3ca2121b04748761865f794c886e00","modified":1611584265587},{"_id":"public/categories/技术/python/系统/index.html","hash":"e10cd20309e3f09afacf0020e4586e676b9bd2a9","modified":1611584265587},{"_id":"public/categories/技术/python/web/index.html","hash":"16bd6a846cb9a70d8f7f8ebc9d447ad20c9531e2","modified":1611584265587},{"_id":"public/categories/工具/index.html","hash":"dd359624ffa3ee905cadd5c022bdf122f317b879","modified":1611584265587},{"_id":"public/categories/系统/index.html","hash":"588eb021f0b5053a7f989b53bfd8c9eefc1c0b20","modified":1611584265587},{"_id":"public/categories/教程/index.html","hash":"dd9571a22ba8c46417fc006561485c1c9d1fbcaf","modified":1611584265587},{"_id":"public/categories/技术/数据库/index.html","hash":"181f74cf510d6b2dc1b20b8ec6fdaccab9d7167b","modified":1611584265587},{"_id":"public/categories/生活/index.html","hash":"417da4603bba8235f9ecd9b2897b9344d5e7d612","modified":1611584265587},{"_id":"public/categories/技术/算法/index.html","hash":"b6df090446e46b2c1c44ac458a36165ed948183c","modified":1611584265587},{"_id":"public/categories/技术/网络通信/index.html","hash":"8ff9f43ef3ae0805eea770ba3ef4fd2e229418ca","modified":1611584265587},{"_id":"public/categories/工具/Git/index.html","hash":"cb47c1d94b0768afe5cf8b499d06cc6d1fb0a44c","modified":1611584265587},{"_id":"public/categories/工具/NodeJs/index.html","hash":"df6f07960606aa1dc7c36a40e8c34bc72e42e392","modified":1611584265587},{"_id":"public/categories/工具/python/index.html","hash":"9326e544aa0524b2344420d06d64aa90fe61516e","modified":1611584265587},{"_id":"public/categories/系统/Mac/index.html","hash":"a8f4659b07ca182a8b6a0de76b836e98dfe2de1f","modified":1611584265587},{"_id":"public/categories/技术/数据库/mysql/index.html","hash":"7310fef9c79ff5d0c4662e93b965b3de0be1f628","modified":1611584265587},{"_id":"public/categories/技术/数据库/redis/index.html","hash":"34b5bf4a204fa0b7755fc8003d02e2e3b8fc4b1d","modified":1611584265587},{"_id":"public/categories/生活/感悟/index.html","hash":"f988bc25992eef75fa0c15e136c3c22c8d17413c","modified":1611584265587},{"_id":"public/categories/生活/笑话/index.html","hash":"1702fcd60887796e9d867327c3f4173166fec79b","modified":1611584265587},{"_id":"public/categories/技术/算法/排序/index.html","hash":"4d3c663ea39f73a920780e94d9aaae1385929b14","modified":1611584265587},{"_id":"public/categories/技术/算法/时间复杂度/index.html","hash":"1a6e36f33a206db875ede8ab61a2901f0a2b4d83","modified":1611584265587},{"_id":"public/categories/系统/linux/index.html","hash":"1f90af9939eb6e33ab6a0f9eb0ac2b62c6d2e78e","modified":1611584265587},{"_id":"public/categories/系统/Windows/index.html","hash":"76f74c4f33d58c4dcbd6037a12c27747552b1ad3","modified":1611584265587},{"_id":"public/categories/技术/网络通信/TCP/index.html","hash":"15577bcfee2e7d0565b24299ad6146ed8edc733c","modified":1611584265587},{"_id":"public/page/7/index.html","hash":"dfc3e92d244256ae800c46955b604cc23f1ddedf","modified":1611584265587},{"_id":"public/tags/JWT/index.html","hash":"5ed53091315067562f5eb0eb5aa2ab45902b580c","modified":1611584265587},{"_id":"public/tags/跨域/index.html","hash":"14b194f5362035b5ef95d13a881b7d82a2bf96e0","modified":1611584265587},{"_id":"public/tags/分页/index.html","hash":"1ad11522c71680828d6cf281c5e9abe58bc3f516","modified":1611584265587},{"_id":"public/tags/序列化/index.html","hash":"6ac6a2eeae1fb3777632f17f4b5e032b71fbccb1","modified":1611584265587},{"_id":"public/tags/反序列化/index.html","hash":"ab3caa97313f0beabd4266d9ff4f474a9047d6ae","modified":1611584265587},{"_id":"public/tags/入门教程/index.html","hash":"9ef8d7e79120107508355f70c050ef148d7681b5","modified":1611584265587},{"_id":"public/tags/视图/index.html","hash":"90ec1c255b86e408f646e150284e183b776b6d14","modified":1611584265587},{"_id":"public/tags/模板/index.html","hash":"dc50a74124fdaec7d9652b57de0c491292a7f0e4","modified":1611584265587},{"_id":"public/tags/namespace/index.html","hash":"ed79d25b425b98460d2ff913c504b84251675576","modified":1611584265587},{"_id":"public/tags/app-name/index.html","hash":"a2fb7e5ddcf7913ae1ca15d604ed137dea1bc6f1","modified":1611584265587},{"_id":"public/tags/reverse/index.html","hash":"81fb174d4f82310770edb711f29da23d11e04f2d","modified":1611584265587},{"_id":"public/tags/路由/index.html","hash":"3dabedb5150c4b910ef5bbbe227c5c3159f11b70","modified":1611584265587},{"_id":"public/tags/ORM操作/index.html","hash":"23b952d2e75472aabeafa9a0b7ecd6df2251ffb3","modified":1611584265587},{"_id":"public/tags/中间件/index.html","hash":"d3bc8167b856f47f5c1fb492ed13ccd55223aa28","modified":1611584265587},{"_id":"public/tags/图片上传/index.html","hash":"04d20ac6634607c496c60679446bf4d8c8b3a66c","modified":1611584265587},{"_id":"public/tags/auth/index.html","hash":"1cc05e518f29f3184b0ef55f50491fad1e8ff637","modified":1611584265587},{"_id":"public/tags/缓存/index.html","hash":"2f7dd6cae61fc11227410daa6b69f7784c986bd8","modified":1611584265587},{"_id":"public/tags/邮件/index.html","hash":"b72b681bc0f0d897220399f77db188e4e744f76a","modified":1611584265587},{"_id":"public/tags/itsdangerous/index.html","hash":"7f63c7ecbd5a34f2b89214d3ef0348ec8229f13e","modified":1611584265587},{"_id":"public/tags/临时身份令牌/index.html","hash":"d3838f26302ac3d1a29c800d9424eb6f236509bc","modified":1611584265587},{"_id":"public/tags/易错点/index.html","hash":"97c83e39b0a20b724bf085d5ac0c29c945d9f021","modified":1611584265587},{"_id":"public/tags/JS/index.html","hash":"8b11f96b621044486fc53b83cd3438bb1e9f7ddf","modified":1611584265587},{"_id":"public/tags/ES6/index.html","hash":"36a19e3a66f7db9cd8aec2a25354369c5c8b7f03","modified":1611584265587},{"_id":"public/tags/var/index.html","hash":"9816cc69fcfa0a3de6a1e69ae4386037cd21a355","modified":1611584265587},{"_id":"public/tags/let/index.html","hash":"6445121669746a4396e07f14b8f8d71bf85d4bef","modified":1611584265587},{"_id":"public/tags/const/index.html","hash":"614d236a00795dea7311e3229520b162856a16fa","modified":1611584265587},{"_id":"public/tags/箭头函数/index.html","hash":"dd07fd905d1c3897e48753a39bb0660a563217c4","modified":1611584265587},{"_id":"public/tags/vue/index.html","hash":"23d5905aac8234fc04adbd7e33f2e5c0712bfe6f","modified":1611584265587},{"_id":"public/tags/vue-router/index.html","hash":"fc05a4c68a503013231c9ff6bd2c8a719c163884","modified":1611584265587},{"_id":"public/tags/v-on/index.html","hash":"e4e5aeb890828e99cc3a356d6f046ba5762234bc","modified":1611584265587},{"_id":"public/tags/Js事件/index.html","hash":"3a4e5d664932584d9bd9d7a0898ea5e143e3a1c0","modified":1611584265587},{"_id":"public/tags/事件修饰符/index.html","hash":"c517aaa74f2fed930c34ae36c9e90f4f503f2cf8","modified":1611584265587},{"_id":"public/tags/事件绑定/index.html","hash":"26e529c2316c4f2b8f2f1467aae74a8f683a6335","modified":1611584265587},{"_id":"public/tags/图片/index.html","hash":"a77365f84bd34a13f262f8c763b0b3adbcdf6728","modified":1611584265587},{"_id":"public/tags/样式/index.html","hash":"486c68281adf21fdcdfca50e13efcb7a81ca330a","modified":1611584265587},{"_id":"public/tags/Ebook/index.html","hash":"5f5f11a9a4a95b72870757b0b4164d9f1aa369b8","modified":1611584265587},{"_id":"public/tags/内置函数/index.html","hash":"fc5b94be5e808ea84d4d829b9adc94d3ec37eff4","modified":1611584265587},{"_id":"public/tags/lambda/index.html","hash":"ca7c3db5a4fc129ea5fb5aae6efb1910c43980c7","modified":1611584265587},{"_id":"public/tags/匿名函数/index.html","hash":"f84eadfcfebf4c492babcac3ff3737077da42738","modified":1611584265587},{"_id":"public/tags/LEGB/index.html","hash":"5551f4f8f43c36a3a317e65b5fb5e1abfabc7c57","modified":1611584265587},{"_id":"public/tags/作用域/index.html","hash":"72f18a1e2009c488a3ccf46fcf6a22b3c6d02238","modified":1611584265587},{"_id":"public/tags/global/index.html","hash":"d8b7055b720c0ff1066462f24db83bddfb086ba4","modified":1611584265587},{"_id":"public/tags/nonlocal/index.html","hash":"5a425f56258a32b89d4a98f70c12575e93c896c2","modified":1611584265587},{"_id":"public/tags/闭包/index.html","hash":"a5abf901388b14be1f1babd3c38c1db8f4f50760","modified":1611584265587},{"_id":"public/tags/装饰器/index.html","hash":"63b4292ffd70aba7afd178498722e810888f288b","modified":1611584265587},{"_id":"public/tags/递归函数/index.html","hash":"ee8504effa1473e9b9d57aecb8188103a3a5a3ea","modified":1611584265587},{"_id":"public/tags/高阶函数/index.html","hash":"8c501a6ddf7cb6273df813e9f5ab11bc046676b3","modified":1611584265587},{"_id":"public/tags/sorted/index.html","hash":"19fbc8112e84ac0c2fe6d72ea8264038691d612b","modified":1611584265587},{"_id":"public/tags/map/index.html","hash":"5009248c28e2b1d21f99a17a946b9791773d504c","modified":1611584265587},{"_id":"public/tags/reduce/index.html","hash":"48c8732722a92a2b087b7429171e5554a86206c0","modified":1611584265587},{"_id":"public/tags/filter/index.html","hash":"a40b3c46782e2b55cd937fab16099b4da449d7e8","modified":1611584265587},{"_id":"public/tags/Json/index.html","hash":"7ab82851b8656b8be9836f01d610ea29c40ba71a","modified":1611584265587},{"_id":"public/tags/时间模块/index.html","hash":"61e53676dafcce4e95c5ddac25c252e4b4680993","modified":1611584265587},{"_id":"public/tags/魔法方法/index.html","hash":"b1fb18d71c5ecf65d94e8fcb9ff4da84e2a8c49d","modified":1611584265587},{"_id":"public/tags/引用计数/index.html","hash":"8218d59c1290b72828a557241f20444828afb858","modified":1611584265587},{"_id":"public/tags/分代回收/index.html","hash":"7d62ff7e726fcbed3798b842d4056f10199d4bc1","modified":1611584265587},{"_id":"public/tags/标记清除/index.html","hash":"9d2b0141db5e1bbb554111a676cdc1f14dc0e7ca","modified":1611584265587},{"_id":"public/tags/异常/index.html","hash":"a774c4571d12959bcac4f6b61de36cf30a9b2da3","modified":1611584265587},{"_id":"public/tags/正则表达式/index.html","hash":"e81b88954a0098b0da4fa966773253bd99cc1b0c","modified":1611584265587},{"_id":"public/tags/axios/index.html","hash":"9191190bdd5e5143c3f54b8f5c9a065c25c1dbc4","modified":1611584265587},{"_id":"public/tags/vue-axios/index.html","hash":"a854beebdd23e80b1dcd2cfd972cd814b42517f1","modified":1611584265587},{"_id":"public/tags/局部axios/index.html","hash":"05ac9813f7f4539729502d47ca6acaf4c93ad2ab","modified":1611584265587},{"_id":"public/tags/全局axios/index.html","hash":"afcc1d321135b5fb07f23952dcf77828bc49fda6","modified":1611584265587},{"_id":"public/tags/GET/index.html","hash":"d6552eba106bffba5914ba587d730737f97edd44","modified":1611584265587},{"_id":"public/tags/POST/index.html","hash":"6550935e432f3a78d2d03e1879de592606a6d484","modified":1611584265587},{"_id":"public/tags/API/index.html","hash":"b951dc23c5963008ce7050a0130ab216992054d4","modified":1611584265587},{"_id":"public/tags/状态码/index.html","hash":"ef06ad7af9fee859db4d1765628ef3b345b6ff33","modified":1611584265587},{"_id":"public/tags/HTTP/index.html","hash":"0a8a02fe0a6144235b1f5c61c69efc9d0df40326","modified":1611584265587},{"_id":"public/tags/RESTful/index.html","hash":"baaaa05a2bffb75a3afc71d4ea4e375dbb9f3624","modified":1611584265587},{"_id":"public/tags/CSRF/index.html","hash":"c8903c396f70ba2f945884d4feba42dbc7a5ffb9","modified":1611584265587},{"_id":"public/tags/Git/index.html","hash":"757deb9cadbce521e0fd27fe5781708d74d1c33a","modified":1611584265587},{"_id":"public/tags/密钥/index.html","hash":"7f22a9dd60709c3926a15d0c17a192f6fda302b0","modified":1611584265587},{"_id":"public/tags/远程仓库关联/index.html","hash":"6c93b8777b62b8d68c24083924b08fe04ec9d884","modified":1611584265587},{"_id":"public/tags/NodeJs/index.html","hash":"89e7936906de28560f97d9477cbbca3f5e0d2416","modified":1611584265587},{"_id":"public/tags/npm/index.html","hash":"a57c975b261626a771e90fac9f703b4cc380c108","modified":1611584265587},{"_id":"public/tags/nvm/index.html","hash":"f3ed5c3fad17cb322642c0e6bc9bbbea7637bca1","modified":1611584265587},{"_id":"public/tags/yarn/index.html","hash":"639dd9232b4e3ea42166f5e614f2467921cc1c09","modified":1611584265587},{"_id":"public/tags/virtualenv/index.html","hash":"f6dfe22fbc1e5fc0be44e77ae12b038fd48cefaf","modified":1611584265587},{"_id":"public/tags/pipenv/index.html","hash":"890728e329cdd92e893e2e545795e4b8bdf1f126","modified":1611584265587},{"_id":"public/tags/conda/index.html","hash":"f8b5ffd99accb7ced4b86cd858c0470e79c3707d","modified":1611584265587},{"_id":"public/tags/虚拟环境/index.html","hash":"4d1953a42797b748460502101d12dc8fbaa4948b","modified":1611584265587},{"_id":"public/tags/pip/index.html","hash":"51318a46a3a7a5f9845760a16fb46998412b88f9","modified":1611584265587},{"_id":"public/tags/Windows/index.html","hash":"573ce034fbeb452a8046618a9c52628840671c56","modified":1611584265587},{"_id":"public/tags/CLI/index.html","hash":"1aaa5242e89ca300b8f31704c76c8a182ed6f84d","modified":1611584265587},{"_id":"public/tags/终端工具/index.html","hash":"64856f5bb1a83a16664f813cc33291bb69914a54","modified":1611584265587},{"_id":"public/tags/GitBook/index.html","hash":"8316ca13920493b1008f3019ab3d1dbcdaa75a17","modified":1611584265587},{"_id":"public/tags/Hexo/index.html","hash":"e1dce730550b1aae1e5400bc358372923d317738","modified":1611584265587},{"_id":"public/tags/主键约束/index.html","hash":"989d0ea1a67a9b585c7f8c986334e3b19c744d3a","modified":1611584265587},{"_id":"public/tags/唯一约束/index.html","hash":"e8b7fd420616aaed5f253177e4aa372824a6e7fb","modified":1611584265587},{"_id":"public/tags/float/index.html","hash":"a2dea578b295629eeeafc449d6357bcd81fd5be2","modified":1611584265587},{"_id":"public/tags/decimal/index.html","hash":"06098de621441bcfe19ce0925cd8823858ef2b60","modified":1611584265587},{"_id":"public/tags/varbinary/index.html","hash":"9c5c64908212203505dec8649d2c2002558eb76b","modified":1611584265587},{"_id":"public/tags/binary/index.html","hash":"f428c45a5aa9c388714ee2bc36ff0fe6ea3fd9b1","modified":1611584265587},{"_id":"public/tags/char/index.html","hash":"101e39b6400a1594434c3a9fa7336bb750b68db5","modified":1611584265587},{"_id":"public/tags/varchar/index.html","hash":"f860cd4cff0ac2853b3736c90f55d34eace3dac7","modified":1611584265587},{"_id":"public/tags/错误说明/index.html","hash":"fe245a040283160d925adf447f834d32936b2403","modified":1611584265587},{"_id":"public/tags/用户管理/index.html","hash":"947fac85b10e6bb21a8e57a9b26c50f79dd3a43e","modified":1611584265587},{"_id":"public/tags/mysql软件操作/index.html","hash":"86e125e2da94539bed2db82ea81ecbe5ff577fd7","modified":1611584265587},{"_id":"public/tags/redis命令/index.html","hash":"68a2e38ef92a20cc759a7d8d0b6cfbb10e537c67","modified":1611584265587},{"_id":"public/tags/感悟/index.html","hash":"0761baf02817ae8c43b5449baecce88fe73786ad","modified":1611584265587},{"_id":"public/tags/笑话/index.html","hash":"949baa2095e094b946428c4a562927a99463cb8b","modified":1611584265587},{"_id":"public/tags/排序/index.html","hash":"d6823e140e574afdda016a308df6deb2e71b2bc1","modified":1611584265587},{"_id":"public/tags/时间复杂度/index.html","hash":"fd50e7a8f1ecd0006b40ec4e7f3c07650357ab7e","modified":1611584265587},{"_id":"public/tags/office/index.html","hash":"e03eaed156908e4604649e637e5861cd8fec806b","modified":1611584265587},{"_id":"public/tags/deepin/index.html","hash":"17e51032c5ccb46b8420335bb32139c94e617e55","modified":1611584265587},{"_id":"public/tags/nvidia/index.html","hash":"608c36edc672f9fb3488ad53490d14f7263e1bcd","modified":1611584265587},{"_id":"public/tags/开机自启/index.html","hash":"8640a668e722ae78dac1ed5515e0b73cd84eb750","modified":1611584265587},{"_id":"public/tags/TCP/index.html","hash":"c9e96af98c23e03eb485f6563d9e6e94014c76df","modified":1611584265587},{"_id":"public/tags/WEB-Server/index.html","hash":"c1760e6a0bb97afd1c245c547687c1f9f2425608","modified":1611584265587},{"_id":"public/tags/短连接/index.html","hash":"fed4fad8a19520836867aa0a677014a235e4ad29","modified":1611584265587},{"_id":"public/tags/长连接/index.html","hash":"093bfa9c4afdefdd78bf2ee61902c3ff484c0164","modified":1611584265587},{"_id":"public/tags/权限/index.html","hash":"29861e7d37756ad21aa5a0b9c46497abdbe86ee4","modified":1611584265587},{"_id":"public/tags/认证/index.html","hash":"f5707c7de3f51c4518f1cfd0605c24f9e79dd7fc","modified":1611584265587},{"_id":"public/tags/限流/index.html","hash":"edc34e4683f8e301d1532bd3010bfb9c33bb3ff4","modified":1611584265587},{"_id":"public/tags/面向对象/index.html","hash":"aed10e2ac340d43835318c60d53bf6bd79931048","modified":1611584265587},{"_id":"public/tags/Vue/index.html","hash":"6fc1a8d9768fdba5f8ec896092e037b7243f1c2f","modified":1611584265587},{"_id":"public/tags/组件/index.html","hash":"63884c63996c15494120df8418961bf7d7717c34","modified":1611584265587},{"_id":"public/tags/高并发/index.html","hash":"9e649e0c6a030c1209478040e75f9a894a818c43","modified":1611584265587},{"_id":"public/tags/django/index.html","hash":"8a5492c83465e9553287ec58967cdf2aba47750e","modified":1611584265587},{"_id":"public/tags/ORM模型类/index.html","hash":"2719dad7083f81824eefbfd035e21a7fbb596d90","modified":1611584265587},{"_id":"public/tags/线程/index.html","hash":"cb162e4f404012f338c7d33394a0e1503913a4de","modified":1611584265587},{"_id":"public/tags/进程/index.html","hash":"c313ea5e9705ae75440fe25e9624778df9bf0d21","modified":1611584265587},{"_id":"public/tags/协程/index.html","hash":"1c80af04baf7b2d513732dbe15ea796d1e3067f4","modified":1611584265587},{"_id":"public/tags/多任务/index.html","hash":"05ff566da505984ccb8e7bf20065f086ecef27e7","modified":1611584265587},{"_id":"public/tags/SQL语句/index.html","hash":"9ab6c6bb6cf2b6abfc2a9b5bec88cbd5ebdd51af","modified":1611584265587},{"_id":"public/404.html","hash":"0be31262ead1e85b0aa1b19a9457d8ed936aa440","modified":1611584265587},{"_id":"public/links/index.html","hash":"a7d7c26d939bad1dc253805b4dd346c568350900","modified":1611584265587},{"_id":"public/categories/index.html","hash":"aed9313fa6d2f992c2d4131994f2a228d886fd13","modified":1611584265587},{"_id":"public/tags/index.html","hash":"e32b50df513aa1b32dead16d05e1c3d560d5f1da","modified":1611584265587},{"_id":"public/2020/12/27/gong-ju-hao-yong-de-cli-gong-ju/index.html","hash":"56cc71ba146a5e1283882f923a632eab2ae75b45","modified":1611584265587},{"_id":"public/2020/12/10/django-zhong-jian-jian/index.html","hash":"5b35f4be7bffeed0250a12baf40de3fbf91cbdb1","modified":1611584265587},{"_id":"public/2020/12/27/vue-zu-jian-jian-tong-xin-liu-chong-fang-shi-wan-zheng-ban/index.html","hash":"561bc1f36ea7aac950008b6e15b3d87cd1b72229","modified":1611584265587},{"_id":"public/2020/12/03/django-you-jian-fa-song/index.html","hash":"d3abc1740576ae6b04d1ba08cc9ac4842b33fc4e","modified":1611584265587},{"_id":"public/2020/12/01/django-huan-cun/index.html","hash":"720a3ec4808667ba64c86fbd72a5b1297feb5a9c","modified":1611584265587},{"_id":"public/2020/11/30/django-shu-ju-fen-ye/index.html","hash":"f56c1db199911d9745b5453e64b53eb7e7ad663b","modified":1611584265587},{"_id":"public/2020/10/24/drf-jwt-qian-xi/index.html","hash":"dfb47d90c81ead5559f6c4a64af77ebefa8b0e2f","modified":1611584265587},{"_id":"public/2020/10/23/vue-yin-ru-ben-di-zi-yuan/index.html","hash":"e0ac86bba9b0ea2596d73eb6b0cef68d0782a837","modified":1611584265587},{"_id":"public/2020/09/03/xi-tong-deepin-os-an-zhuang-nvidia-qu-dong/index.html","hash":"6b28b8589467143906a26c5015a3fcc724334eff","modified":1611584265587},{"_id":"public/2020/08/16/wang-luo-tong-xin-duo-chong-fang-shi-shi-xian-bing-fa-web-server/index.html","hash":"8830e957e23d65c8f77c64a5a8a3fb757e9e196c","modified":1611584265587},{"_id":"public/2020/08/16/wang-luo-tong-xin-simple-web-server/index.html","hash":"b71e5ab33aeb9b544acaf16774c7b554ff91c203","modified":1611584265587},{"_id":"public/2020/08/14/web-restful-gui-fan-de-api-jie-kou-she-ji/index.html","hash":"f49e6de6607b289573042daf15eb74c7b8f56b4d","modified":1611584265587},{"_id":"public/2020/07/30/python-gao-ji-nei-cun-guan-li/index.html","hash":"ac7a9188257df08ac6722c1ac321858acf26f898","modified":1611584265587},{"_id":"public/2020/07/08/drf-xu-lie-hua-yu-fan-xu-lie-hua/index.html","hash":"995094625fd69fd2a6750a1cea442c9671deb7fc","modified":1611584265587},{"_id":"public/2020/06/06/python-han-shu-di-gui-han-shu/index.html","hash":"e3f93f4ab6207e24a69832d4e5515dd09a9cc3fa","modified":1611584265587},{"_id":"public/2020/06/06/python-han-shu-ni-ming-han-shu/index.html","hash":"38d3cb5352ab5b353cd6329ce8d446312773209b","modified":1611584265587},{"_id":"public/2020/06/06/python-han-shu-gao-jie-han-shu/index.html","hash":"ccab7d7d87bb43df876f9a8448d1a88d260545ef","modified":1611584265587},{"_id":"public/2020/06/06/python-han-shu-bian-liang-jie-xi/index.html","hash":"bb0aaec0bab317dbb000dcca19e6f7584c1576ba","modified":1611584265587},{"_id":"public/2020/05/24/web-xss-gong-ji-he-csrf-gong-ji/index.html","hash":"28c4d9e5213b7437874da32050951856c5408303","modified":1611584265587},{"_id":"public/2020/05/24/django-5-orm-mo-xing-lei/index.html","hash":"6ad16cad32beb4535a2a3ed46c36002da82da9f2","modified":1611584265587},{"_id":"public/2020/05/24/web-http-xie-yi-zhi-http-zhuang-tai-ma-xiang-jie/index.html","hash":"5a642beb78a598195d53dfcd775ef364789989d2","modified":1611584265587},{"_id":"public/2020/04/21/shu-ju-ku-mysql-chang-jian-cuo-wu/index.html","hash":"f7cda936776c95759c89622097db4682834c26d9","modified":1611584265587},{"_id":"public/2020/05/16/vue-shi-jian-bang-ding-yi-ji-shi-jian-xiu-shi-fu/index.html","hash":"348503bd963dee5d1d7ea673762d9f8f3317edf1","modified":1611584265587},{"_id":"public/2020/04/12/js-es6-yu-fa/index.html","hash":"27e15b1637b0753a31222f1d8fd85adcd6296ec8","modified":1611584265587},{"_id":"public/2020/04/11/gong-ju-python-huan-jing-pei-zhi/index.html","hash":"7b5802852d8a4a2e156b6473459df30c39a5ecf3","modified":1611584265587},{"_id":"public/2020/04/14/vue-vue-router/index.html","hash":"a2e2a4e645bba91009d796abc7820df7afcbfb71","modified":1611584265587},{"_id":"public/2020/03/17/drf-hou-duan-kua-yu/index.html","hash":"0dd2886e53cb84e61bfef6f4277dd7da13015562","modified":1611584265587},{"_id":"public/2020/03/16/drf-shu-ju-fen-ye/index.html","hash":"7d06fff19f92f5f386aed34f8a0157be0b983569","modified":1611584265587},{"_id":"public/2020/03/16/django-tu-pian-shang-chuan/index.html","hash":"afbfa599c46ca563f9264b1145c820c695524f32","modified":1611584265587},{"_id":"public/2020/03/15/drf-jwt-ren-zheng-quan-xian-xian-liu/index.html","hash":"422fe48a147023ddc692321122e22904acc7ea1a","modified":1611584265587},{"_id":"public/2020/03/10/django-yong-hu-ren-zheng-xi-tong/index.html","hash":"ffb4205bbdd0f7321520de9d95fe076d2c3d5f7c","modified":1611584265587},{"_id":"public/2020/03/03/vue-axios-si-kua-yu-qing-qiu/index.html","hash":"88e6230a351e8762864c11655cd4e28091e59076","modified":1611584265587},{"_id":"public/2020/03/03/vue-axios-yi-axios-zai-vue-zhong-de-shi-yong-jiao-cheng/index.html","hash":"b85276a4054add426215bba9750e37432eeca9f1","modified":1611584265587},{"_id":"public/2020/03/03/vue-axios-san-get-he-post-ti-jiao-shu-ju/index.html","hash":"ea6d35323be1d719bb3ce4f8190bccb18aef54df","modified":1611584265587},{"_id":"public/2020/03/03/vue-axios-er-api-shuo-ming/index.html","hash":"b060f1cc9775225cab05d3f9e2818a41d4fa50b0","modified":1611584265587},{"_id":"public/2019/12/12/shu-ju-ku-mysql-cao-zuo/index.html","hash":"0b428393a45ebb3b6a1c9807a204d68e1cd113df","modified":1611584265587},{"_id":"public/2019/11/25/python-mo-kuai-json-mo-kuai/index.html","hash":"6011af7678add8f96806789e6a53eb2dd386b20d","modified":1611584265587},{"_id":"public/2019/11/04/python-mian-xiang-dui-xiang-ji-chu/index.html","hash":"144bf1aefc8842a332f62bcbdc39e29a246ffc0e","modified":1611584265587},{"_id":"public/2019/06/01/shu-ju-ku-mysql-zhong-varbinary-binary-char-varchar-yi-tong/index.html","hash":"7f42793a943758ffafa1582a3c424d1e05bb9637","modified":1611584265587},{"_id":"public/2019/06/01/shu-ju-ku-mysql-zhong-de-decimal-lei-xing-shuo-ming/index.html","hash":"8c1a9dc915b5e9dfac2f94e5981654b5f85e69d2","modified":1611584265587},{"_id":"public/2019/05/27/shu-ju-ku-mysql-bi-ji/index.html","hash":"1f32786813a2418cf06641726e8ba58be25e451c","modified":1611584265587},{"_id":"public/2019/05/25/django-4-lu-you/index.html","hash":"8ece73f82eedb19f58d9a732fb5e2aeb45e6a29c","modified":1611584265587},{"_id":"public/2019/05/25/suan-fa-shi-jian-fu-za-du-02-chang-jian-han-shu-de-shi-jian-fu-za-du/index.html","hash":"2ef16e0fc587f2f10a32697e3a5ab3b037fe2044","modified":1611584265587},{"_id":"public/2019/05/25/suan-fa-shi-jian-fu-za-du-01-o-biao-ji-fa-yu-chang-jian-shi-jian-fu-za-du/index.html","hash":"f625842e4d9dd82505b8dcbf61154d831893ae56","modified":1611584265587},{"_id":"public/2019/05/25/python-han-shu-nei-zhi-han-shu/index.html","hash":"ca58d4f2dbacef1f319a93788a3309fe01242978","modified":1611584265587},{"_id":"public/2019/05/25/gong-ju-win10-pyhton2-he-3-gong-cun/index.html","hash":"616a43475a1002dc6069ff0f37fb9d56132f0ba4","modified":1611584265587},{"_id":"public/2019/05/23/python-gao-ji-zheng-ze-pi-pei/index.html","hash":"591139bd28678a519ea44a16db52afff333fdfe7","modified":1611584265587},{"_id":"public/2019/05/17/python-gao-ji-jin-cheng-xian-cheng-xie-cheng/index.html","hash":"075a8c585defedc7900ba89d16c40ee40991e8b9","modified":1611584265587},{"_id":"public/2019/05/09/wang-luo-tong-xin-03-http-bao-wen-nei-de-http-xin-xi/index.html","hash":"ca7891295e1d176ef01d887b5b75e651b2023fe2","modified":1611584265587},{"_id":"public/2019/05/09/wang-luo-tong-xin-02-jian-dan-jie-shao-http-xie-yi-jie-gou/index.html","hash":"4f2201f85be83eec771183b3ff29ceed176d34fb","modified":1611584265587},{"_id":"public/2019/05/09/suan-fa-pai-xu/index.html","hash":"fafb987535917d0d5cb9b4f675ea88ceb9102072","modified":1611584265587},{"_id":"public/2019/05/09/wang-luo-tong-xin-01-liao-jie-web-ji-wang-luo-ji-chu/index.html","hash":"467b6766c2becf12ca2ac0ea2f0b3c4eb8df3bea","modified":1611584265587},{"_id":"public/2019/05/03/python-mo-kuai-time-timeit-mo-kuai/index.html","hash":"18df80934ffeaa0628357c374d9089dc6b9ad001","modified":1611584265587},{"_id":"public/2019/05/02/python-han-shu-zhuang-shi-qi/index.html","hash":"c8a149531e4a99daeb2efe0fcf16bc8789c16eea","modified":1611584265587},{"_id":"public/2019/03/31/gong-ju-git-cao-zuo/index.html","hash":"8d1f0b38a406cdb466ecaa5b6a126d76d90c58fe","modified":1611584265587},{"_id":"public/2019/03/31/jiao-cheng-gitbook-jiao-cheng/index.html","hash":"5644b4263fc3c4630612bc6fb9511e754a51b4de","modified":1611584265587},{"_id":"public/2019/03/31/gong-ju-nodejs-huan-jing-pei-zhi/index.html","hash":"e2c7a73c9cc1e9cf3bab8092e99ad799d629d28c","modified":1611584265587},{"_id":"public/2019/03/23/sheng-huo-xiao-gu-shi/index.html","hash":"e60c39cb65f8292dbf9dbd7106dd3fae49018da6","modified":1611584265587},{"_id":"public/2019/03/23/jiao-cheng-hexo-bo-ke-pei-zhi-jiao-cheng/index.html","hash":"d129dd57e89ca4908a35e4446ea19170199837c7","modified":1611584265587},{"_id":"public/2019/03/22/flask-yi-cuo-dian/index.html","hash":"e769528e779bd6f5209ef7cd01e468b5bd780950","modified":1611584265587},{"_id":"public/2019/03/22/django-1-xiang-mu-liu-cheng/index.html","hash":"f9b934b4ae8b4e3519ce46b24deaf3170b70ef78","modified":1611584265587},{"_id":"public/index.html","hash":"dd4ab6219b03e3d7726e0e44280a663b1567bd64","modified":1611584265587},{"_id":"public/page/2/index.html","hash":"e91bb17051ba5508fe5bea56368535d0bdb35e76","modified":1611584265587},{"_id":"public/page/3/index.html","hash":"34f39b59036338c6ecfd680eee6275c8617be5e3","modified":1611584265587},{"_id":"public/page/4/index.html","hash":"97a2f709c0a0bb0aac76987d951ee9a9f934b10d","modified":1611584265587},{"_id":"public/page/5/index.html","hash":"add769b95569b3c62440ca3dbc8284127a4a7a31","modified":1611584265587},{"_id":"public/page/6/index.html","hash":"c2cf405f48b3ddb20fd3376d482a5d326203eed1","modified":1611584265587},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1611584265587},{"_id":"public/img/favicon.ico","hash":"ef74c9c84b1916d311e333799b35df4a26461b8a","modified":1611584265587},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1611584265587},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1611584265587},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1611584265587},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1611584265587},{"_id":"public/img/person.jpg","hash":"8b12c49828ab9aa696037cedded900e3a183bead","modified":1611584265587},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1611584265587},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1611584265587},{"_id":"public/js/boot.js","hash":"8b4a0a4fa13121d9c8154a7a2fc7d0a9c8f528f9","modified":1611584265587},{"_id":"public/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1611584265587},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1611584265587},{"_id":"public/js/events.js","hash":"0e998c64d8b03fe6914b3f8fa6990b220ab353bd","modified":1611584265587},{"_id":"public/js/plugins.js","hash":"dc1d8485c251a9dc2a1d1f6ffa65c8e7572b8fc9","modified":1611584265587},{"_id":"public/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1611584265587},{"_id":"public/js/leancloud.js","hash":"4701f49b3dc62939adff5cc11f6d21963df7f135","modified":1611584265587},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1611584265587},{"_id":"public/js/utils.js","hash":"3086cede8d6d96ac5f4b5236b06271599a1ebbcb","modified":1611584265587},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1611584265587},{"_id":"public/css/main.css","hash":"1a24778fbe89e884b62bd2f5fb5c8ba737d4f213","modified":1611584265587}],"Category":[{"name":"技术","_id":"ckkcnnubb0004jjlna8d7h8lp"},{"name":"python","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnubm000kjjln3sy7b5jv"},{"name":"Django","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuce001pjjlnecf86d93"},{"name":"DRF","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnucg001tjjlnbon2dn3f"},{"name":"Flask","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuda003fjjln1kyo299y"},{"name":"JS","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudg003ujjlne76vh9q5"},{"name":"vue","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudl0040jjln9mgweylb"},{"name":"Ebook","_id":"ckkcnnudx004xjjlngnqibr9q"},{"name":"基础","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnue20054jjln3ng9e85a"},{"name":"模块","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnued006fjjln4ncj13om"},{"name":"系统","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuef006sjjlnfsfgc95h"},{"name":"web","parent":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuel007tjjlnalqa96jw"},{"name":"工具","_id":"ckkcnnueo0086jjln8lv4ev6h"},{"name":"系统","_id":"ckkcnnuer008sjjlnao693yap"},{"name":"教程","_id":"ckkcnnues008wjjln8ktrgrc5"},{"name":"数据库","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuet0094jjln5h4ghspq"},{"name":"生活","_id":"ckkcnnuey00a1jjln4etv3t1r"},{"name":"算法","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuez00a8jjlnb6c04sgx"},{"name":"网络通信","parent":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuf300arjjln1n4d69ng"},{"name":"Git","parent":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnuf600b6jjln1a3ndj5z"},{"name":"NodeJs","parent":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnuf700b8jjlnhbxjhotq"},{"name":"python","parent":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnuf700bejjlnex6b1hms"},{"name":"Mac","parent":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufa00bnjjlngmt21x5z"},{"name":"mysql","parent":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufb00bujjln4ktk06qn"},{"name":"redis","parent":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufg00cijjln6mwacfeg"},{"name":"感悟","parent":"ckkcnnuey00a1jjln4etv3t1r","_id":"ckkcnnufh00cpjjlncr2a6wxx"},{"name":"笑话","parent":"ckkcnnuey00a1jjln4etv3t1r","_id":"ckkcnnufj00cujjln31y8ekx7"},{"name":"排序","parent":"ckkcnnuez00a8jjlnb6c04sgx","_id":"ckkcnnufk00cyjjlnh2dmfwrz"},{"name":"时间复杂度","parent":"ckkcnnuez00a8jjlnb6c04sgx","_id":"ckkcnnufl00d2jjln85up9rn1"},{"name":"linux","parent":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufo00dijjln8xmnhbhq"},{"name":"Windows","parent":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufp00dmjjlng2hnape2"},{"name":"TCP","parent":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufq00dsjjlnbh80bit5"}],"Data":[],"Page":[{"title":"关于我","date":"2019-03-15T16:08:23.000Z","type":"about","layout":"about","_content":"\n![Me](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190503001321-067a64f3c5b7416d8d1f7ae7a79042eb%20.gif)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-03-16 00:08:23\ntype: \"about\"\nlayout: \"about\"\n---\n\n![Me](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190503001321-067a64f3c5b7416d8d1f7ae7a79042eb%20.gif)\n","updated":"2021-01-22T07:08:42.696Z","path":"about/index.html","comments":1,"_id":"ckkcnnuax0000jjln9024a1xv","content":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190503001321-067a64f3c5b7416d8d1f7ae7a79042eb%20.gif\" alt=\"Me\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190503001321-067a64f3c5b7416d8d1f7ae7a79042eb%20.gif\" alt=\"Me\"></p>\n"},{"title":"分类","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-12-01T14:23:48.407Z","path":"categories/index.html","comments":1,"_id":"ckkcnnub90002jjlnd1b79nfn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-10-14T15:44:37.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-10-14 23:44:37\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-12-01T14:23:48.407Z","path":"tags/index.html","comments":1,"_id":"ckkcnnubd0006jjln91kmbdr5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JWT浅析","date":"2020-10-24T12:38:26.000Z","_content":"\n JWT起源\n-------\n\n> Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（[(RFC 7519](https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519)). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。\n\n说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。\n\n### 传统的 session 认证\n\n我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了, 这就是传统的基于 session 认证。\n\n但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.\n\n#### 基于 session 认证所显露的问题\n\n**Session**: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。\n\n**扩展性**: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上, 这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。\n\n**CSRF**: 因为是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。\n\n### 基于 token 的鉴权机制\n\n基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。\n\n流程上是这样的：\n\n*   用户使用用户名密码来请求服务器\n*   服务器进行验证用户的信息\n*   服务器通过验证发送给用户一个 token\n*   客户端存储 token，并在每次请求时附送上这个 token 值\n*   服务端验证 token 值，并返回数据\n\n这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持`CORS(跨来源资源共享)`策略，一般我们在服务端这么做就可以了`Access-Control-Allow-Origin: *`。\n\n那么我们现在回到 JWT 的主题上。\n\nJWT 构成\n---------\n\nJWT 是由三段信息构成的，将这三段信息文本用`.`链接一起就构成了 Jwt 字符串。就像这样:\n\n```python\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n第一部分我们称它为头部（header), 第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).\n\n### header（头信息）\n\njwt 的头部承载两部分信息：\n\n*   令牌类型（即：JWT）\n*   散列算法（HMAC、RSASSA、RSASSA-PSS等）\n\n完整的头部就像下面这样的 JSON：\n\n```python\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.\n\n```python\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n### Payload（有效载荷）\n\n载荷就是存放有效信息的地方，其中包含claims。claims是关于实体（常用的是用户信息）和其他数据的声明，claims有三种类型：\n\n- **Registered claims（注册的声明）：** 这些是一组预定义的claims，非强制性的，但是推荐使用， iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；\n- **Public claims（公共的声明）:** 自定义claims，注意不要和JWT注册表中属性冲突，[这里可以查看JWT标准注册表](https://www.iana.org/assignments/jwt/jwt.xhtml)\n- **Private claims（私有的声明）:** 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。\n\n#### 标准中注册的声明\n\n> **建议但不强制使用**\n\n*   **iss**: jwt 签发者\n*   **sub**: jwt 所面向的用户\n*   **aud**: 接收 jwt 的一方\n*   **exp**: jwt 的过期时间，这个过期时间必须要大于签发时间，注意，这个值是秒数，而不是毫秒数。\n*   **nbf**: 定义在什么时间之前，该 jwt 都是不可用的.\n*   **iat**: jwt 的签发时间\n*   **jti**: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。\n*   **name**：用户全名\n\n#### 公共的声明\n\n公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密。\n\n#### 私有的声明 \n\n私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。\n\n> 在官网有详细的属性说明，尽量使用里面提到的 *Registered Claim Names*，这样可以提高阅读性\n\n自定义一个 payload:\n\n```python\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n然后将其进行 base64 加密，得到 Jwt 的第二部分。\n\n```python\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n### signature\n\njwt 的第三部分是一个签证信息，这个签证信息由三部分组成：\n\n*   header (base64 后的)\n*   payload (base64 后的)\n*   secret\n\n这个签名的计算跟第一部分中的 alg 属性有关，假如是 HS256，那么服务端需要保存一个私钥，比如 secret 。然后，把第一部分和第二部分生成的两个字符串用 `.` 连接之后，用 HS256 进行加盐`secret`加密，然后就构成了 jwt 的第三部分。\n\n```python\nTJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n将这三部分用`.`连接成一个完整的字符串, 构成了最终的 jwt:\n\n```python\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n> **注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。**\n\n总结\n--\n\n### 优点\n\n*   因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 JAVA,JavaScript,NodeJS,Python 等很多语言都可以使用。\n*   因为有了 payload 部分，所以 JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息。\n*   便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的。\n*   它不需要在服务端保存会话信息, 所以它易于应用的扩展。\n\n### 安全相关\n\n*   不应该在 jwt 的 payload 部分存放敏感信息，因为该部分是客户端可解密的部分。\n*   保护好 secret 私钥，该私钥非常重要。\n*   如果可以，请使用 https 协议","source":"_posts/DRF-JWT浅析.md","raw":"---\ntitle: JWT浅析\ndate: 2020-10-24 20:38:26\ncategories:\n  - 技术\n  - python\n  - DRF\ntags:\n  - JWT\n---\n\n JWT起源\n-------\n\n> Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（[(RFC 7519](https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519)). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。\n\n说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。\n\n### 传统的 session 认证\n\n我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了, 这就是传统的基于 session 认证。\n\n但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.\n\n#### 基于 session 认证所显露的问题\n\n**Session**: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。\n\n**扩展性**: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上, 这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。\n\n**CSRF**: 因为是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。\n\n### 基于 token 的鉴权机制\n\n基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。\n\n流程上是这样的：\n\n*   用户使用用户名密码来请求服务器\n*   服务器进行验证用户的信息\n*   服务器通过验证发送给用户一个 token\n*   客户端存储 token，并在每次请求时附送上这个 token 值\n*   服务端验证 token 值，并返回数据\n\n这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持`CORS(跨来源资源共享)`策略，一般我们在服务端这么做就可以了`Access-Control-Allow-Origin: *`。\n\n那么我们现在回到 JWT 的主题上。\n\nJWT 构成\n---------\n\nJWT 是由三段信息构成的，将这三段信息文本用`.`链接一起就构成了 Jwt 字符串。就像这样:\n\n```python\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n第一部分我们称它为头部（header), 第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).\n\n### header（头信息）\n\njwt 的头部承载两部分信息：\n\n*   令牌类型（即：JWT）\n*   散列算法（HMAC、RSASSA、RSASSA-PSS等）\n\n完整的头部就像下面这样的 JSON：\n\n```python\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.\n\n```python\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n### Payload（有效载荷）\n\n载荷就是存放有效信息的地方，其中包含claims。claims是关于实体（常用的是用户信息）和其他数据的声明，claims有三种类型：\n\n- **Registered claims（注册的声明）：** 这些是一组预定义的claims，非强制性的，但是推荐使用， iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；\n- **Public claims（公共的声明）:** 自定义claims，注意不要和JWT注册表中属性冲突，[这里可以查看JWT标准注册表](https://www.iana.org/assignments/jwt/jwt.xhtml)\n- **Private claims（私有的声明）:** 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。\n\n#### 标准中注册的声明\n\n> **建议但不强制使用**\n\n*   **iss**: jwt 签发者\n*   **sub**: jwt 所面向的用户\n*   **aud**: 接收 jwt 的一方\n*   **exp**: jwt 的过期时间，这个过期时间必须要大于签发时间，注意，这个值是秒数，而不是毫秒数。\n*   **nbf**: 定义在什么时间之前，该 jwt 都是不可用的.\n*   **iat**: jwt 的签发时间\n*   **jti**: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。\n*   **name**：用户全名\n\n#### 公共的声明\n\n公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密。\n\n#### 私有的声明 \n\n私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。\n\n> 在官网有详细的属性说明，尽量使用里面提到的 *Registered Claim Names*，这样可以提高阅读性\n\n自定义一个 payload:\n\n```python\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n然后将其进行 base64 加密，得到 Jwt 的第二部分。\n\n```python\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n### signature\n\njwt 的第三部分是一个签证信息，这个签证信息由三部分组成：\n\n*   header (base64 后的)\n*   payload (base64 后的)\n*   secret\n\n这个签名的计算跟第一部分中的 alg 属性有关，假如是 HS256，那么服务端需要保存一个私钥，比如 secret 。然后，把第一部分和第二部分生成的两个字符串用 `.` 连接之后，用 HS256 进行加盐`secret`加密，然后就构成了 jwt 的第三部分。\n\n```python\nTJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n将这三部分用`.`连接成一个完整的字符串, 构成了最终的 jwt:\n\n```python\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n> **注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。**\n\n总结\n--\n\n### 优点\n\n*   因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 JAVA,JavaScript,NodeJS,Python 等很多语言都可以使用。\n*   因为有了 payload 部分，所以 JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息。\n*   便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的。\n*   它不需要在服务端保存会话信息, 所以它易于应用的扩展。\n\n### 安全相关\n\n*   不应该在 jwt 的 payload 部分存放敏感信息，因为该部分是客户端可解密的部分。\n*   保护好 secret 私钥，该私钥非常重要。\n*   如果可以，请使用 https 协议","slug":"DRF-JWT浅析","published":1,"updated":"2021-01-25T03:30:14.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnub10001jjlner6mfr5o","content":"<h2 id=\"JWT起源\"><a href=\"#JWT起源\" class=\"headerlink\" title=\" JWT起源\"></a> JWT起源</h2><blockquote>\n<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（<a href=\"https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519\">(RFC 7519</a>). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。</p>\n</blockquote>\n<p>说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。</p>\n<h3 id=\"传统的-session-认证\"><a href=\"#传统的-session-认证\" class=\"headerlink\" title=\"传统的 session 认证\"></a>传统的 session 认证</h3><p>我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了, 这就是传统的基于 session 认证。</p>\n<p>但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.</p>\n<h4 id=\"基于-session-认证所显露的问题\"><a href=\"#基于-session-认证所显露的问题\" class=\"headerlink\" title=\"基于 session 认证所显露的问题\"></a>基于 session 认证所显露的问题</h4><p><strong>Session</strong>: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</p>\n<p><strong>扩展性</strong>: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上, 这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</p>\n<p><strong>CSRF</strong>: 因为是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p>\n<h3 id=\"基于-token-的鉴权机制\"><a href=\"#基于-token-的鉴权机制\" class=\"headerlink\" title=\"基于 token 的鉴权机制\"></a>基于 token 的鉴权机制</h3><p>基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p>\n<p>流程上是这样的：</p>\n<ul>\n<li>用户使用用户名密码来请求服务器</li>\n<li>服务器进行验证用户的信息</li>\n<li>服务器通过验证发送给用户一个 token</li>\n<li>客户端存储 token，并在每次请求时附送上这个 token 值</li>\n<li>服务端验证 token 值，并返回数据</li>\n</ul>\n<p>这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<code>CORS(跨来源资源共享)</code>策略，一般我们在服务端这么做就可以了<code>Access-Control-Allow-Origin: *</code>。</p>\n<p>那么我们现在回到 JWT 的主题上。</p>\n<h2 id=\"JWT-构成\"><a href=\"#JWT-构成\" class=\"headerlink\" title=\"JWT 构成\"></a>JWT 构成</h2><p>JWT 是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了 Jwt 字符串。就像这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></div></td></tr></table></figure>\n<p>第一部分我们称它为头部（header), 第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>\n<h3 id=\"header（头信息）\"><a href=\"#header（头信息）\" class=\"headerlink\" title=\"header（头信息）\"></a>header（头信息）</h3><p>jwt 的头部承载两部分信息：</p>\n<ul>\n<li>令牌类型（即：JWT）</li>\n<li>散列算法（HMAC、RSASSA、RSASSA-PSS等）</li>\n</ul>\n<p>完整的头部就像下面这样的 JSON：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&#123;<br>  <span class=\"hljs-string\">&#x27;typ&#x27;</span>: <span class=\"hljs-string\">&#x27;JWT&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;alg&#x27;</span>: <span class=\"hljs-string\">&#x27;HS256&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>然后将头部进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"Payload（有效载荷）\"><a href=\"#Payload（有效载荷）\" class=\"headerlink\" title=\"Payload（有效载荷）\"></a>Payload（有效载荷）</h3><p>载荷就是存放有效信息的地方，其中包含claims。claims是关于实体（常用的是用户信息）和其他数据的声明，claims有三种类型：</p>\n<ul>\n<li><strong>Registered claims（注册的声明）：</strong> 这些是一组预定义的claims，非强制性的，但是推荐使用， iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；</li>\n<li><strong>Public claims（公共的声明）:</strong> 自定义claims，注意不要和JWT注册表中属性冲突，<a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">这里可以查看JWT标准注册表</a></li>\n<li><strong>Private claims（私有的声明）:</strong> 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。</li>\n</ul>\n<h4 id=\"标准中注册的声明\"><a href=\"#标准中注册的声明\" class=\"headerlink\" title=\"标准中注册的声明\"></a>标准中注册的声明</h4><blockquote>\n<p><strong>建议但不强制使用</strong></p>\n</blockquote>\n<ul>\n<li><strong>iss</strong>: jwt 签发者</li>\n<li><strong>sub</strong>: jwt 所面向的用户</li>\n<li><strong>aud</strong>: 接收 jwt 的一方</li>\n<li><strong>exp</strong>: jwt 的过期时间，这个过期时间必须要大于签发时间，注意，这个值是秒数，而不是毫秒数。</li>\n<li><strong>nbf</strong>: 定义在什么时间之前，该 jwt 都是不可用的.</li>\n<li><strong>iat</strong>: jwt 的签发时间</li>\n<li><strong>jti</strong>: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</li>\n<li><strong>name</strong>：用户全名</li>\n</ul>\n<h4 id=\"公共的声明\"><a href=\"#公共的声明\" class=\"headerlink\" title=\"公共的声明\"></a>公共的声明</h4><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<h4 id=\"私有的声明\"><a href=\"#私有的声明\" class=\"headerlink\" title=\"私有的声明\"></a>私有的声明</h4><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<blockquote>\n<p>在官网有详细的属性说明，尽量使用里面提到的 <em>Registered Claim Names</em>，这样可以提高阅读性</p>\n</blockquote>\n<p>自定义一个 payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&#123;<br>  <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;1234567890&quot;</span>,<br>  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>  <span class=\"hljs-string\">&quot;admin&quot;</span>: true<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>然后将其进行 base64 加密，得到 Jwt 的第二部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h3><p>jwt 的第三部分是一个签证信息，这个签证信息由三部分组成：</p>\n<ul>\n<li>header (base64 后的)</li>\n<li>payload (base64 后的)</li>\n<li>secret</li>\n</ul>\n<p>这个签名的计算跟第一部分中的 alg 属性有关，假如是 HS256，那么服务端需要保存一个私钥，比如 secret 。然后，把第一部分和第二部分生成的两个字符串用 <code>.</code> 连接之后，用 HS256 进行加盐<code>secret</code>加密，然后就构成了 jwt 的第三部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></div></td></tr></table></figure>\n<p>将这三部分用<code>.</code>连接成一个完整的字符串, 构成了最终的 jwt:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。</strong></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 JAVA,JavaScript,NodeJS,Python 等很多语言都可以使用。</li>\n<li>因为有了 payload 部分，所以 JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li>\n<li>便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的。</li>\n<li>它不需要在服务端保存会话信息, 所以它易于应用的扩展。</li>\n</ul>\n<h3 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h3><ul>\n<li>不应该在 jwt 的 payload 部分存放敏感信息，因为该部分是客户端可解密的部分。</li>\n<li>保护好 secret 私钥，该私钥非常重要。</li>\n<li>如果可以，请使用 https 协议</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JWT起源\"><a href=\"#JWT起源\" class=\"headerlink\" title=\" JWT起源\"></a> JWT起源</h2><blockquote>\n<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（<a href=\"https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519\">(RFC 7519</a>). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。</p>\n</blockquote>\n<p>说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。</p>\n<h3 id=\"传统的-session-认证\"><a href=\"#传统的-session-认证\" class=\"headerlink\" title=\"传统的 session 认证\"></a>传统的 session 认证</h3><p>我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了, 这就是传统的基于 session 认证。</p>\n<p>但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.</p>\n<h4 id=\"基于-session-认证所显露的问题\"><a href=\"#基于-session-认证所显露的问题\" class=\"headerlink\" title=\"基于 session 认证所显露的问题\"></a>基于 session 认证所显露的问题</h4><p><strong>Session</strong>: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</p>\n<p><strong>扩展性</strong>: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上, 这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</p>\n<p><strong>CSRF</strong>: 因为是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p>\n<h3 id=\"基于-token-的鉴权机制\"><a href=\"#基于-token-的鉴权机制\" class=\"headerlink\" title=\"基于 token 的鉴权机制\"></a>基于 token 的鉴权机制</h3><p>基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p>\n<p>流程上是这样的：</p>\n<ul>\n<li>用户使用用户名密码来请求服务器</li>\n<li>服务器进行验证用户的信息</li>\n<li>服务器通过验证发送给用户一个 token</li>\n<li>客户端存储 token，并在每次请求时附送上这个 token 值</li>\n<li>服务端验证 token 值，并返回数据</li>\n</ul>\n<p>这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<code>CORS(跨来源资源共享)</code>策略，一般我们在服务端这么做就可以了<code>Access-Control-Allow-Origin: *</code>。</p>\n<p>那么我们现在回到 JWT 的主题上。</p>\n<h2 id=\"JWT-构成\"><a href=\"#JWT-构成\" class=\"headerlink\" title=\"JWT 构成\"></a>JWT 构成</h2><p>JWT 是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了 Jwt 字符串。就像这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></td></tr></table></figure>\n<p>第一部分我们称它为头部（header), 第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>\n<h3 id=\"header（头信息）\"><a href=\"#header（头信息）\" class=\"headerlink\" title=\"header（头信息）\"></a>header（头信息）</h3><p>jwt 的头部承载两部分信息：</p>\n<ul>\n<li>令牌类型（即：JWT）</li>\n<li>散列算法（HMAC、RSASSA、RSASSA-PSS等）</li>\n</ul>\n<p>完整的头部就像下面这样的 JSON：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&#123;<br>  <span class=\"hljs-string\">&#x27;typ&#x27;</span>: <span class=\"hljs-string\">&#x27;JWT&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;alg&#x27;</span>: <span class=\"hljs-string\">&#x27;HS256&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将头部进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9<br></code></pre></td></tr></table></figure>\n<h3 id=\"Payload（有效载荷）\"><a href=\"#Payload（有效载荷）\" class=\"headerlink\" title=\"Payload（有效载荷）\"></a>Payload（有效载荷）</h3><p>载荷就是存放有效信息的地方，其中包含claims。claims是关于实体（常用的是用户信息）和其他数据的声明，claims有三种类型：</p>\n<ul>\n<li><strong>Registered claims（注册的声明）：</strong> 这些是一组预定义的claims，非强制性的，但是推荐使用， iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；</li>\n<li><strong>Public claims（公共的声明）:</strong> 自定义claims，注意不要和JWT注册表中属性冲突，<a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">这里可以查看JWT标准注册表</a></li>\n<li><strong>Private claims（私有的声明）:</strong> 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。</li>\n</ul>\n<h4 id=\"标准中注册的声明\"><a href=\"#标准中注册的声明\" class=\"headerlink\" title=\"标准中注册的声明\"></a>标准中注册的声明</h4><blockquote>\n<p><strong>建议但不强制使用</strong></p>\n</blockquote>\n<ul>\n<li><strong>iss</strong>: jwt 签发者</li>\n<li><strong>sub</strong>: jwt 所面向的用户</li>\n<li><strong>aud</strong>: 接收 jwt 的一方</li>\n<li><strong>exp</strong>: jwt 的过期时间，这个过期时间必须要大于签发时间，注意，这个值是秒数，而不是毫秒数。</li>\n<li><strong>nbf</strong>: 定义在什么时间之前，该 jwt 都是不可用的.</li>\n<li><strong>iat</strong>: jwt 的签发时间</li>\n<li><strong>jti</strong>: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</li>\n<li><strong>name</strong>：用户全名</li>\n</ul>\n<h4 id=\"公共的声明\"><a href=\"#公共的声明\" class=\"headerlink\" title=\"公共的声明\"></a>公共的声明</h4><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<h4 id=\"私有的声明\"><a href=\"#私有的声明\" class=\"headerlink\" title=\"私有的声明\"></a>私有的声明</h4><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<blockquote>\n<p>在官网有详细的属性说明，尽量使用里面提到的 <em>Registered Claim Names</em>，这样可以提高阅读性</p>\n</blockquote>\n<p>自定义一个 payload:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&#123;<br>  <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;1234567890&quot;</span>,<br>  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;John Doe&quot;</span>,<br>  <span class=\"hljs-string\">&quot;admin&quot;</span>: true<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将其进行 base64 加密，得到 Jwt 的第二部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9<br></code></pre></td></tr></table></figure>\n<h3 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h3><p>jwt 的第三部分是一个签证信息，这个签证信息由三部分组成：</p>\n<ul>\n<li>header (base64 后的)</li>\n<li>payload (base64 后的)</li>\n<li>secret</li>\n</ul>\n<p>这个签名的计算跟第一部分中的 alg 属性有关，假如是 HS256，那么服务端需要保存一个私钥，比如 secret 。然后，把第一部分和第二部分生成的两个字符串用 <code>.</code> 连接之后，用 HS256 进行加盐<code>secret</code>加密，然后就构成了 jwt 的第三部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></td></tr></table></figure>\n<p>将这三部分用<code>.</code>连接成一个完整的字符串, 构成了最终的 jwt:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。</strong></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 JAVA,JavaScript,NodeJS,Python 等很多语言都可以使用。</li>\n<li>因为有了 payload 部分，所以 JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li>\n<li>便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的。</li>\n<li>它不需要在服务端保存会话信息, 所以它易于应用的扩展。</li>\n</ul>\n<h3 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h3><ul>\n<li>不应该在 jwt 的 payload 部分存放敏感信息，因为该部分是客户端可解密的部分。</li>\n<li>保护好 secret 私钥，该私钥非常重要。</li>\n<li>如果可以，请使用 https 协议</li>\n</ul>\n"},{"title":"DRF-后端跨域","date":"2020-03-17T10:19:28.000Z","_content":"\n前后端分离开发时，经常会遇到一个问题，那就是`跨域问题`,因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行ajax访问的时候浏览器就会报跨域相关的错误。\n\n原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。\n\n为了解决这个问题，在前端和后台配置均可，此时，以后台django配置为例\n\n## 1. 安装插件\n\n```bash\npip install django-cors-headers\n```\n\n## 2. 注册应用\n\n```python\nINSTALLED_APPS = [\n    ...\n    'corsheaders',\n    ...\n]\n```\n\n## 3. 中间件设置\n\n```python\nMIDDLEWARE = [\n    ...\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',  # 注意，位置有限制\n    'django.middleware.common.CommonMiddleware',\n    ...\n]\n```\n\n## 4. 配置跨域参数\n\n```python\nCORS_ORIGIN_ALLOW_ALL = True  # 允许所有host访问\n# 添加白名单\nCORS_ORIGIN_WHITELIST = (\n    '127.0.0.1:8080',\n    'localhost:8080',\n)\n# 以上配置二选一即可\n\nCORS_ALLOW_CREDENTIALS = True  # 允许携带cookie,不需要可以不设置\n```\n","source":"_posts/DRF-后端跨域.md","raw":"---\ntitle: DRF-后端跨域\ndate: 2020-03-17 18:19:28\ncategories:\n  - 技术\n  - python\n  - DRF\ntags:\n  - 跨域\n---\n\n前后端分离开发时，经常会遇到一个问题，那就是`跨域问题`,因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行ajax访问的时候浏览器就会报跨域相关的错误。\n\n原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。\n\n为了解决这个问题，在前端和后台配置均可，此时，以后台django配置为例\n\n## 1. 安装插件\n\n```bash\npip install django-cors-headers\n```\n\n## 2. 注册应用\n\n```python\nINSTALLED_APPS = [\n    ...\n    'corsheaders',\n    ...\n]\n```\n\n## 3. 中间件设置\n\n```python\nMIDDLEWARE = [\n    ...\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',  # 注意，位置有限制\n    'django.middleware.common.CommonMiddleware',\n    ...\n]\n```\n\n## 4. 配置跨域参数\n\n```python\nCORS_ORIGIN_ALLOW_ALL = True  # 允许所有host访问\n# 添加白名单\nCORS_ORIGIN_WHITELIST = (\n    '127.0.0.1:8080',\n    'localhost:8080',\n)\n# 以上配置二选一即可\n\nCORS_ALLOW_CREDENTIALS = True  # 允许携带cookie,不需要可以不设置\n```\n","slug":"DRF-后端跨域","published":1,"updated":"2021-01-23T14:47:34.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnub90003jjln9mmx7dz4","content":"<p>前后端分离开发时，经常会遇到一个问题，那就是<code>跨域问题</code>,因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行ajax访问的时候浏览器就会报跨域相关的错误。</p>\n<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>\n<p>为了解决这个问题，在前端和后台配置均可，此时，以后台django配置为例</p>\n<h2 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1. 安装插件\"></a>1. 安装插件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install django-cors-headers<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"2-注册应用\"><a href=\"#2-注册应用\" class=\"headerlink\" title=\"2. 注册应用\"></a>2. 注册应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    ...<br>    <span class=\"hljs-string\">&#x27;corsheaders&#x27;</span>,<br>    ...<br>]<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"3-中间件设置\"><a href=\"#3-中间件设置\" class=\"headerlink\" title=\"3. 中间件设置\"></a>3. 中间件设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>    ...<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 注意，位置有限制</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    ...<br>]<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"4-配置跨域参数\"><a href=\"#4-配置跨域参数\" class=\"headerlink\" title=\"4. 配置跨域参数\"></a>4. 配置跨域参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CORS_ORIGIN_ALLOW_ALL = <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># 允许所有host访问</span><br><span class=\"hljs-comment\"># 添加白名单</span><br>CORS_ORIGIN_WHITELIST = (<br>    <span class=\"hljs-string\">&#x27;127.0.0.1:8080&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;localhost:8080&#x27;</span>,<br>)<br><span class=\"hljs-comment\"># 以上配置二选一即可</span><br><br>CORS_ALLOW_CREDENTIALS = <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># 允许携带cookie,不需要可以不设置</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>前后端分离开发时，经常会遇到一个问题，那就是<code>跨域问题</code>,因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行ajax访问的时候浏览器就会报跨域相关的错误。</p>\n<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>\n<p>为了解决这个问题，在前端和后台配置均可，此时，以后台django配置为例</p>\n<h2 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1. 安装插件\"></a>1. 安装插件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install django-cors-headers<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-注册应用\"><a href=\"#2-注册应用\" class=\"headerlink\" title=\"2. 注册应用\"></a>2. 注册应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    ...<br>    <span class=\"hljs-string\">&#x27;corsheaders&#x27;</span>,<br>    ...<br>]<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-中间件设置\"><a href=\"#3-中间件设置\" class=\"headerlink\" title=\"3. 中间件设置\"></a>3. 中间件设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>    ...<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 注意，位置有限制</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    ...<br>]<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-配置跨域参数\"><a href=\"#4-配置跨域参数\" class=\"headerlink\" title=\"4. 配置跨域参数\"></a>4. 配置跨域参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CORS_ORIGIN_ALLOW_ALL = <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># 允许所有host访问</span><br><span class=\"hljs-comment\"># 添加白名单</span><br>CORS_ORIGIN_WHITELIST = (<br>    <span class=\"hljs-string\">&#x27;127.0.0.1:8080&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;localhost:8080&#x27;</span>,<br>)<br><span class=\"hljs-comment\"># 以上配置二选一即可</span><br><br>CORS_ALLOW_CREDENTIALS = <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># 允许携带cookie,不需要可以不设置</span><br></code></pre></td></tr></table></figure>"},{"title":"DRF-数据分页","date":"2020-03-16T12:23:36.000Z","_content":"\n> 当需要展示的数据过多时，就需要将全部数据分批显示，这就需要用到 **分页** 功能\n\n## Django内置分页\n\n在DRF提供的API视图中，并不支持 `pagination_class` 分页属性，因此，需要分页，只能使用django内置的分页器 `Paginator` 。\n\nPaginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是**一个列表、元组、以及查询结果集 QuerySet**。第二个参数**需要传入一个整数，表示每页显示数据条数**。具体用法如下：\n\n### 导入分页模块\n\n```python\nfrom django.core.paginator import Paginator\n```\n\n### 获取queryset对象\n\n```python\ngoods_list = Goods.objects.all().order_by('id')\n```\n\n### 实例化分页类对象\n\n```python\npaginator = Paginator(goods_list, 2)\n```\n\n#### Paginator类对象的属性\n\n| 序号 | 属性名     | 说明                 |\n| ---- | ---------- | -------------------- |\n| 1    | num_pages  | 返回分页之后的总页数 |\n| 2    | page_range | 返回分页后的页码列表 |\n| 3    | count      | 需要分页的总记录数   |\n\n#### Paginator类对象的方法\n\n| 序号 | 方法名                 | 说明                           |\n| ---- | ---------------------- | ------------------------------ |\n| 1    | get_page(self, number) | 返回第number页的page类实例对象 |\n\n#### Page实例对象的属性\n\n| 序号 | 属性名      | 说明                          |\n| ---- | ----------- | ----------------------------- |\n| 1    | number      | 返回当前页的页码              |\n| 2    | object_list | 返回当前页的数据查询集        |\n| 3    | paginator   | 返回对应的**Paginator**类对象 |\n\n#### page实例对象的方法\n\n| 序号 | 方法名               | 说明                   |\n| ---- | -------------------- | ---------------------- |\n| 1    | has_previous         | 判断当前页是否有前一页 |\n| 2    | has_next             | 判断当前页是否有下一页 |\n| 3    | previous_page_number | 返回前一页的页码       |\n| 4    | next_page_number     | 返回下一页的页码       |\n\n### 分页功能实现\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom school.serializers import *\n\n\nclass StudentsAPIView(APIView):\n    def get(self, request):\n        page_number = request.GET.get('page', 1)  # 获取客户端发送的页码，默认为1\n        page_size = request.GET.get('page_size', 2)  # 获取客户端发送的每页数量，默认为1\n        try:\n            page_number = int(page_number)  # 处理页码， 过滤无效的数据\n        except:\n            page_number = 1\n\n        goods_set = Student.objects.all().order_by('id')\n\n        paginator = Paginator(goods_set, page_size)  # 得到分页器对象\n        page = paginator.get_page(page_number)  # 得到当前页码对象\n\n        ser = StudentSerializer(page.object_list, many=True)\n\n        return Response(ser.data)\n```\n\n\n\n## DRF 分页\n\n>   REST框架包括对可定制的分页样式的支持。\n\n### 分页类\n\n#### PageNumberPagination：\n\n可以进行直接的页码处理，返回某一页分页数据\n\n```python\nhttp://127.0.0.1:8000/user/?page=2\n# page：当前的页码\n```\n\n> 除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式\n\n```python\nfrom rest_framework.pagination import PageNumberPagination\n\n\nclass class PagerPagination(PageNumberPagination):\n    max_page_size = 3  # 每页最大数目\n    page_size = 1  # 默认每页数目\n    page_query_param = 'page'  # 页码关键字名， 默认为\"page\"\n    page_size_query_param = 'size'  # 每页数目关键字名, ，默认为None\n```\n\n#### LimitOffsetPagination\n\n可以通过连接可选的参数进行分页单页数量大小的控制，分页数据偏移的选择\n\n```python\nhttp://127.0.0.1:8000/path/?limit=2&offset=2\n# limit：每页的数据大小\n# offset：从某一个数据位置开始偏移\n```\n\n> 除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式\n\n```python\nfrom rest_framework.pagination import LimitOffsetPagination\n\nclass LimitPagination(LimitOffsetPagination):\n    max_limit = 2  # 最大limit限制，默认None\n    default_limit = 1  # 默认限制，和page_size作用一样\n    limit_query_param = 'limit'  # 参数名，默认limit\n    offset_query_param = 'offset'  # 参数名，默认offset\n```\n\n\n\n#### 自定义分页类\n\n>   可以继承父类，并重写响应对象\n\n```python\nfrom collections import OrderedDict\nfrom rest_framework.pagination import PageNumberPagination\nfrom rest_framework.response import Response\nfrom rest_framework.utils.urls import replace_query_param\n\n\nclass Pagination(PageNumberPagination):\n    def get_num_pages_link(self):\n        url = self.request.build_absolute_uri()\n        num_pages = self.page.paginator.num_pages\n        return [replace_query_param(url, self.page_query_param, page) for page in range(1, num_pages + 1)]\n\n    def get_paginated_response(self, data):\n        return Response(OrderedDict([\n            ('count', self.page.paginator.count),\n            ('num_pages', self.page.paginator.num_pages),  # 分页的总页码\n            ('next', self.get_next_link()),\n            ('previous', self.get_previous_link()),\n            ('pages', self.get_num_pages_link()),  # 所有分页的链接\n            ('results', data)\n        ]))\n\n```\n\n### 分页应用\n\n#### 全局分页\n\n> **注意**：需要修改Django的全局配置文件 `settings.py`\n\n分页样式可以使用`DEFAULT_PAGINATION_CLASS`和`PAGE_SIZE`设置键进行全局设置。\n\n例如，要使用内置的限制/偏移分页，可以执行以下操作：\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS':\n        'rest_framework.pagination.LimitOffsetPagination',  # 指明分页类\n        # 'rest_framework.pagination.PageNumberPagination',\n        # 'utils.pagination.Pagination', # 自定义分页类\n    \n    'PAGE_SIZE': 2  # 每页数目\n}\n```\n\n请注意，您需要同时设置分页类和应使用的页面大小。\n\n#### 局部分页\n\n您还可以使用`pagination_class`属性在单个视图上设置分页类。配置完了，如果不想用，那么就直接在视图类下使用如下属性关闭全局分页功能\n\n```python\nfrom rest_framework.generics import ListCreateAPIView\nfrom .serializer import BookSerializer\nfrom .models import BookModel\n\nclass BookListView(ListCreateAPIView):\n    serializer_class = BookSerializer\n    queryset = BookModel.objects.all()\n    pagination_class = None  # 指定分页类，为None，即当前视图不分页\n```\n\n\n\n\n","source":"_posts/DRF-数据分页.md","raw":"---\ntitle: DRF-数据分页\ndate: 2020-03-16 20:23:36\ncategories:\n  - 技术\n  - python\n  - DRF\ntags:\n  - 分页\n\n---\n\n> 当需要展示的数据过多时，就需要将全部数据分批显示，这就需要用到 **分页** 功能\n\n## Django内置分页\n\n在DRF提供的API视图中，并不支持 `pagination_class` 分页属性，因此，需要分页，只能使用django内置的分页器 `Paginator` 。\n\nPaginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是**一个列表、元组、以及查询结果集 QuerySet**。第二个参数**需要传入一个整数，表示每页显示数据条数**。具体用法如下：\n\n### 导入分页模块\n\n```python\nfrom django.core.paginator import Paginator\n```\n\n### 获取queryset对象\n\n```python\ngoods_list = Goods.objects.all().order_by('id')\n```\n\n### 实例化分页类对象\n\n```python\npaginator = Paginator(goods_list, 2)\n```\n\n#### Paginator类对象的属性\n\n| 序号 | 属性名     | 说明                 |\n| ---- | ---------- | -------------------- |\n| 1    | num_pages  | 返回分页之后的总页数 |\n| 2    | page_range | 返回分页后的页码列表 |\n| 3    | count      | 需要分页的总记录数   |\n\n#### Paginator类对象的方法\n\n| 序号 | 方法名                 | 说明                           |\n| ---- | ---------------------- | ------------------------------ |\n| 1    | get_page(self, number) | 返回第number页的page类实例对象 |\n\n#### Page实例对象的属性\n\n| 序号 | 属性名      | 说明                          |\n| ---- | ----------- | ----------------------------- |\n| 1    | number      | 返回当前页的页码              |\n| 2    | object_list | 返回当前页的数据查询集        |\n| 3    | paginator   | 返回对应的**Paginator**类对象 |\n\n#### page实例对象的方法\n\n| 序号 | 方法名               | 说明                   |\n| ---- | -------------------- | ---------------------- |\n| 1    | has_previous         | 判断当前页是否有前一页 |\n| 2    | has_next             | 判断当前页是否有下一页 |\n| 3    | previous_page_number | 返回前一页的页码       |\n| 4    | next_page_number     | 返回下一页的页码       |\n\n### 分页功能实现\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom school.serializers import *\n\n\nclass StudentsAPIView(APIView):\n    def get(self, request):\n        page_number = request.GET.get('page', 1)  # 获取客户端发送的页码，默认为1\n        page_size = request.GET.get('page_size', 2)  # 获取客户端发送的每页数量，默认为1\n        try:\n            page_number = int(page_number)  # 处理页码， 过滤无效的数据\n        except:\n            page_number = 1\n\n        goods_set = Student.objects.all().order_by('id')\n\n        paginator = Paginator(goods_set, page_size)  # 得到分页器对象\n        page = paginator.get_page(page_number)  # 得到当前页码对象\n\n        ser = StudentSerializer(page.object_list, many=True)\n\n        return Response(ser.data)\n```\n\n\n\n## DRF 分页\n\n>   REST框架包括对可定制的分页样式的支持。\n\n### 分页类\n\n#### PageNumberPagination：\n\n可以进行直接的页码处理，返回某一页分页数据\n\n```python\nhttp://127.0.0.1:8000/user/?page=2\n# page：当前的页码\n```\n\n> 除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式\n\n```python\nfrom rest_framework.pagination import PageNumberPagination\n\n\nclass class PagerPagination(PageNumberPagination):\n    max_page_size = 3  # 每页最大数目\n    page_size = 1  # 默认每页数目\n    page_query_param = 'page'  # 页码关键字名， 默认为\"page\"\n    page_size_query_param = 'size'  # 每页数目关键字名, ，默认为None\n```\n\n#### LimitOffsetPagination\n\n可以通过连接可选的参数进行分页单页数量大小的控制，分页数据偏移的选择\n\n```python\nhttp://127.0.0.1:8000/path/?limit=2&offset=2\n# limit：每页的数据大小\n# offset：从某一个数据位置开始偏移\n```\n\n> 除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式\n\n```python\nfrom rest_framework.pagination import LimitOffsetPagination\n\nclass LimitPagination(LimitOffsetPagination):\n    max_limit = 2  # 最大limit限制，默认None\n    default_limit = 1  # 默认限制，和page_size作用一样\n    limit_query_param = 'limit'  # 参数名，默认limit\n    offset_query_param = 'offset'  # 参数名，默认offset\n```\n\n\n\n#### 自定义分页类\n\n>   可以继承父类，并重写响应对象\n\n```python\nfrom collections import OrderedDict\nfrom rest_framework.pagination import PageNumberPagination\nfrom rest_framework.response import Response\nfrom rest_framework.utils.urls import replace_query_param\n\n\nclass Pagination(PageNumberPagination):\n    def get_num_pages_link(self):\n        url = self.request.build_absolute_uri()\n        num_pages = self.page.paginator.num_pages\n        return [replace_query_param(url, self.page_query_param, page) for page in range(1, num_pages + 1)]\n\n    def get_paginated_response(self, data):\n        return Response(OrderedDict([\n            ('count', self.page.paginator.count),\n            ('num_pages', self.page.paginator.num_pages),  # 分页的总页码\n            ('next', self.get_next_link()),\n            ('previous', self.get_previous_link()),\n            ('pages', self.get_num_pages_link()),  # 所有分页的链接\n            ('results', data)\n        ]))\n\n```\n\n### 分页应用\n\n#### 全局分页\n\n> **注意**：需要修改Django的全局配置文件 `settings.py`\n\n分页样式可以使用`DEFAULT_PAGINATION_CLASS`和`PAGE_SIZE`设置键进行全局设置。\n\n例如，要使用内置的限制/偏移分页，可以执行以下操作：\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS':\n        'rest_framework.pagination.LimitOffsetPagination',  # 指明分页类\n        # 'rest_framework.pagination.PageNumberPagination',\n        # 'utils.pagination.Pagination', # 自定义分页类\n    \n    'PAGE_SIZE': 2  # 每页数目\n}\n```\n\n请注意，您需要同时设置分页类和应使用的页面大小。\n\n#### 局部分页\n\n您还可以使用`pagination_class`属性在单个视图上设置分页类。配置完了，如果不想用，那么就直接在视图类下使用如下属性关闭全局分页功能\n\n```python\nfrom rest_framework.generics import ListCreateAPIView\nfrom .serializer import BookSerializer\nfrom .models import BookModel\n\nclass BookListView(ListCreateAPIView):\n    serializer_class = BookSerializer\n    queryset = BookModel.objects.all()\n    pagination_class = None  # 指定分页类，为None，即当前视图不分页\n```\n\n\n\n\n","slug":"DRF-数据分页","published":1,"updated":"2021-01-23T14:47:39.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubd0007jjln3vm0bxo8","content":"<blockquote>\n<p>当需要展示的数据过多时，就需要将全部数据分批显示，这就需要用到 <strong>分页</strong> 功能</p>\n</blockquote>\n<h2 id=\"Django内置分页\"><a href=\"#Django内置分页\" class=\"headerlink\" title=\"Django内置分页\"></a>Django内置分页</h2><p>在DRF提供的API视图中，并不支持 <code>pagination_class</code> 分页属性，因此，需要分页，只能使用django内置的分页器 <code>Paginator</code> 。</p>\n<p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>\n<h3 id=\"导入分页模块\"><a href=\"#导入分页模块\" class=\"headerlink\" title=\"导入分页模块\"></a>导入分页模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.paginator <span class=\"hljs-keyword\">import</span> Paginator<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"获取queryset对象\"><a href=\"#获取queryset对象\" class=\"headerlink\" title=\"获取queryset对象\"></a>获取queryset对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"实例化分页类对象\"><a href=\"#实例化分页类对象\" class=\"headerlink\" title=\"实例化分页类对象\"></a>实例化分页类对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">paginator = Paginator(goods_list, <span class=\"hljs-number\">2</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"Paginator类对象的属性\"><a href=\"#Paginator类对象的属性\" class=\"headerlink\" title=\"Paginator类对象的属性\"></a>Paginator类对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>num_pages</td>\n<td>返回分页之后的总页数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>page_range</td>\n<td>返回分页后的页码列表</td>\n</tr>\n<tr>\n<td>3</td>\n<td>count</td>\n<td>需要分页的总记录数</td>\n</tr>\n</tbody></table>\n<h4 id=\"Paginator类对象的方法\"><a href=\"#Paginator类对象的方法\" class=\"headerlink\" title=\"Paginator类对象的方法\"></a>Paginator类对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>get_page(self, number)</td>\n<td>返回第number页的page类实例对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"Page实例对象的属性\"><a href=\"#Page实例对象的属性\" class=\"headerlink\" title=\"Page实例对象的属性\"></a>Page实例对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>number</td>\n<td>返回当前页的页码</td>\n</tr>\n<tr>\n<td>2</td>\n<td>object_list</td>\n<td>返回当前页的数据查询集</td>\n</tr>\n<tr>\n<td>3</td>\n<td>paginator</td>\n<td>返回对应的<strong>Paginator</strong>类对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"page实例对象的方法\"><a href=\"#page实例对象的方法\" class=\"headerlink\" title=\"page实例对象的方法\"></a>page实例对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>has_previous</td>\n<td>判断当前页是否有前一页</td>\n</tr>\n<tr>\n<td>2</td>\n<td>has_next</td>\n<td>判断当前页是否有下一页</td>\n</tr>\n<tr>\n<td>3</td>\n<td>previous_page_number</td>\n<td>返回前一页的页码</td>\n</tr>\n<tr>\n<td>4</td>\n<td>next_page_number</td>\n<td>返回下一页的页码</td>\n</tr>\n</tbody></table>\n<h3 id=\"分页功能实现\"><a href=\"#分页功能实现\" class=\"headerlink\" title=\"分页功能实现\"></a>分页功能实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.response <span class=\"hljs-keyword\">import</span> Response<br><span class=\"hljs-keyword\">from</span> rest_framework.views <span class=\"hljs-keyword\">import</span> APIView<br><span class=\"hljs-keyword\">from</span> school.serializers <span class=\"hljs-keyword\">import</span> *<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentsAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        page_number = request.GET.get(<span class=\"hljs-string\">&#x27;page&#x27;</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 获取客户端发送的页码，默认为1</span><br>        page_size = request.GET.get(<span class=\"hljs-string\">&#x27;page_size&#x27;</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 获取客户端发送的每页数量，默认为1</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            page_number = <span class=\"hljs-built_in\">int</span>(page_number)  <span class=\"hljs-comment\"># 处理页码， 过滤无效的数据</span><br>        <span class=\"hljs-keyword\">except</span>:<br>            page_number = <span class=\"hljs-number\">1</span><br><br>        goods_set = Student.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br><br>        paginator = Paginator(goods_set, page_size)  <span class=\"hljs-comment\"># 得到分页器对象</span><br>        page = paginator.get_page(page_number)  <span class=\"hljs-comment\"># 得到当前页码对象</span><br><br>        ser = StudentSerializer(page.object_list, many=<span class=\"hljs-literal\">True</span>)<br><br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br></code></pre></div></td></tr></table></figure>\n\n\n<h2 id=\"DRF-分页\"><a href=\"#DRF-分页\" class=\"headerlink\" title=\"DRF 分页\"></a>DRF 分页</h2><blockquote>\n<p>  REST框架包括对可定制的分页样式的支持。</p>\n</blockquote>\n<h3 id=\"分页类\"><a href=\"#分页类\" class=\"headerlink\" title=\"分页类\"></a>分页类</h3><h4 id=\"PageNumberPagination：\"><a href=\"#PageNumberPagination：\" class=\"headerlink\" title=\"PageNumberPagination：\"></a>PageNumberPagination：</h4><p>可以进行直接的页码处理，返回某一页分页数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">http://127.0.0.1:8000/user/?page=2<br><span class=\"hljs-comment\"># page：当前的页码</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> PageNumberPagination<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">class</span> <span class=\"hljs-title\">PagerPagination</span>(<span class=\"hljs-params\">PageNumberPagination</span>):</span><br>    max_page_size = <span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 每页最大数目</span><br>    page_size = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 默认每页数目</span><br>    page_query_param = <span class=\"hljs-string\">&#x27;page&#x27;</span>  <span class=\"hljs-comment\"># 页码关键字名， 默认为&quot;page&quot;</span><br>    page_size_query_param = <span class=\"hljs-string\">&#x27;size&#x27;</span>  <span class=\"hljs-comment\"># 每页数目关键字名, ，默认为None</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"LimitOffsetPagination\"><a href=\"#LimitOffsetPagination\" class=\"headerlink\" title=\"LimitOffsetPagination\"></a>LimitOffsetPagination</h4><p>可以通过连接可选的参数进行分页单页数量大小的控制，分页数据偏移的选择</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">http://127.0.0.1:8000/path/?limit=2&amp;offset=2<br><span class=\"hljs-comment\"># limit：每页的数据大小</span><br><span class=\"hljs-comment\"># offset：从某一个数据位置开始偏移</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> LimitOffsetPagination<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LimitPagination</span>(<span class=\"hljs-params\">LimitOffsetPagination</span>):</span><br>    max_limit = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># 最大limit限制，默认None</span><br>    default_limit = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 默认限制，和page_size作用一样</span><br>    limit_query_param = <span class=\"hljs-string\">&#x27;limit&#x27;</span>  <span class=\"hljs-comment\"># 参数名，默认limit</span><br>    offset_query_param = <span class=\"hljs-string\">&#x27;offset&#x27;</span>  <span class=\"hljs-comment\"># 参数名，默认offset</span><br></code></pre></div></td></tr></table></figure>\n\n\n<h4 id=\"自定义分页类\"><a href=\"#自定义分页类\" class=\"headerlink\" title=\"自定义分页类\"></a>自定义分页类</h4><blockquote>\n<p>  可以继承父类，并重写响应对象</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> OrderedDict<br><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> PageNumberPagination<br><span class=\"hljs-keyword\">from</span> rest_framework.response <span class=\"hljs-keyword\">import</span> Response<br><span class=\"hljs-keyword\">from</span> rest_framework.utils.urls <span class=\"hljs-keyword\">import</span> replace_query_param<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Pagination</span>(<span class=\"hljs-params\">PageNumberPagination</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_num_pages_link</span>(<span class=\"hljs-params\">self</span>):</span><br>        url = self.request.build_absolute_uri()<br>        num_pages = self.page.paginator.num_pages<br>        <span class=\"hljs-keyword\">return</span> [replace_query_param(url, self.page_query_param, page) <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, num_pages + <span class=\"hljs-number\">1</span>)]<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_paginated_response</span>(<span class=\"hljs-params\">self, data</span>):</span><br>        <span class=\"hljs-keyword\">return</span> Response(OrderedDict([<br>            (<span class=\"hljs-string\">&#x27;count&#x27;</span>, self.page.paginator.count),<br>            (<span class=\"hljs-string\">&#x27;num_pages&#x27;</span>, self.page.paginator.num_pages),  <span class=\"hljs-comment\"># 分页的总页码</span><br>            (<span class=\"hljs-string\">&#x27;next&#x27;</span>, self.get_next_link()),<br>            (<span class=\"hljs-string\">&#x27;previous&#x27;</span>, self.get_previous_link()),<br>            (<span class=\"hljs-string\">&#x27;pages&#x27;</span>, self.get_num_pages_link()),  <span class=\"hljs-comment\"># 所有分页的链接</span><br>            (<span class=\"hljs-string\">&#x27;results&#x27;</span>, data)<br>        ]))<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"分页应用\"><a href=\"#分页应用\" class=\"headerlink\" title=\"分页应用\"></a>分页应用</h3><h4 id=\"全局分页\"><a href=\"#全局分页\" class=\"headerlink\" title=\"全局分页\"></a>全局分页</h4><blockquote>\n<p><strong>注意</strong>：需要修改Django的全局配置文件 <code>settings.py</code></p>\n</blockquote>\n<p>分页样式可以使用<code>DEFAULT_PAGINATION_CLASS</code>和<code>PAGE_SIZE</code>设置键进行全局设置。</p>\n<p>例如，要使用内置的限制/偏移分页，可以执行以下操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:<br>        <span class=\"hljs-string\">&#x27;rest_framework.pagination.LimitOffsetPagination&#x27;</span>,  <span class=\"hljs-comment\"># 指明分页类</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span><br>        <span class=\"hljs-comment\"># &#x27;utils.pagination.Pagination&#x27;, # 自定义分页类</span><br>    <br>    <span class=\"hljs-string\">&#x27;PAGE_SIZE&#x27;</span>: <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># 每页数目</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>请注意，您需要同时设置分页类和应使用的页面大小。</p>\n<h4 id=\"局部分页\"><a href=\"#局部分页\" class=\"headerlink\" title=\"局部分页\"></a>局部分页</h4><p>您还可以使用<code>pagination_class</code>属性在单个视图上设置分页类。配置完了，如果不想用，那么就直接在视图类下使用如下属性关闭全局分页功能</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> ListCreateAPIView<br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> BookSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> BookModel<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookListView</span>(<span class=\"hljs-params\">ListCreateAPIView</span>):</span><br>    serializer_class = BookSerializer<br>    queryset = BookModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    pagination_class = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># 指定分页类，为None，即当前视图不分页</span><br></code></pre></div></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当需要展示的数据过多时，就需要将全部数据分批显示，这就需要用到 <strong>分页</strong> 功能</p>\n</blockquote>\n<h2 id=\"Django内置分页\"><a href=\"#Django内置分页\" class=\"headerlink\" title=\"Django内置分页\"></a>Django内置分页</h2><p>在DRF提供的API视图中，并不支持 <code>pagination_class</code> 分页属性，因此，需要分页，只能使用django内置的分页器 <code>Paginator</code> 。</p>\n<p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>\n<h3 id=\"导入分页模块\"><a href=\"#导入分页模块\" class=\"headerlink\" title=\"导入分页模块\"></a>导入分页模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.paginator <span class=\"hljs-keyword\">import</span> Paginator<br></code></pre></td></tr></table></figure>\n<h3 id=\"获取queryset对象\"><a href=\"#获取queryset对象\" class=\"headerlink\" title=\"获取queryset对象\"></a>获取queryset对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"实例化分页类对象\"><a href=\"#实例化分页类对象\" class=\"headerlink\" title=\"实例化分页类对象\"></a>实例化分页类对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">paginator = Paginator(goods_list, <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"Paginator类对象的属性\"><a href=\"#Paginator类对象的属性\" class=\"headerlink\" title=\"Paginator类对象的属性\"></a>Paginator类对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>num_pages</td>\n<td>返回分页之后的总页数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>page_range</td>\n<td>返回分页后的页码列表</td>\n</tr>\n<tr>\n<td>3</td>\n<td>count</td>\n<td>需要分页的总记录数</td>\n</tr>\n</tbody></table>\n<h4 id=\"Paginator类对象的方法\"><a href=\"#Paginator类对象的方法\" class=\"headerlink\" title=\"Paginator类对象的方法\"></a>Paginator类对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>get_page(self, number)</td>\n<td>返回第number页的page类实例对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"Page实例对象的属性\"><a href=\"#Page实例对象的属性\" class=\"headerlink\" title=\"Page实例对象的属性\"></a>Page实例对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>number</td>\n<td>返回当前页的页码</td>\n</tr>\n<tr>\n<td>2</td>\n<td>object_list</td>\n<td>返回当前页的数据查询集</td>\n</tr>\n<tr>\n<td>3</td>\n<td>paginator</td>\n<td>返回对应的<strong>Paginator</strong>类对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"page实例对象的方法\"><a href=\"#page实例对象的方法\" class=\"headerlink\" title=\"page实例对象的方法\"></a>page实例对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>has_previous</td>\n<td>判断当前页是否有前一页</td>\n</tr>\n<tr>\n<td>2</td>\n<td>has_next</td>\n<td>判断当前页是否有下一页</td>\n</tr>\n<tr>\n<td>3</td>\n<td>previous_page_number</td>\n<td>返回前一页的页码</td>\n</tr>\n<tr>\n<td>4</td>\n<td>next_page_number</td>\n<td>返回下一页的页码</td>\n</tr>\n</tbody></table>\n<h3 id=\"分页功能实现\"><a href=\"#分页功能实现\" class=\"headerlink\" title=\"分页功能实现\"></a>分页功能实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.response <span class=\"hljs-keyword\">import</span> Response<br><span class=\"hljs-keyword\">from</span> rest_framework.views <span class=\"hljs-keyword\">import</span> APIView<br><span class=\"hljs-keyword\">from</span> school.serializers <span class=\"hljs-keyword\">import</span> *<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentsAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        page_number = request.GET.get(<span class=\"hljs-string\">&#x27;page&#x27;</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 获取客户端发送的页码，默认为1</span><br>        page_size = request.GET.get(<span class=\"hljs-string\">&#x27;page_size&#x27;</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 获取客户端发送的每页数量，默认为1</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            page_number = <span class=\"hljs-built_in\">int</span>(page_number)  <span class=\"hljs-comment\"># 处理页码， 过滤无效的数据</span><br>        <span class=\"hljs-keyword\">except</span>:<br>            page_number = <span class=\"hljs-number\">1</span><br><br>        goods_set = Student.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br><br>        paginator = Paginator(goods_set, page_size)  <span class=\"hljs-comment\"># 得到分页器对象</span><br>        page = paginator.get_page(page_number)  <span class=\"hljs-comment\"># 得到当前页码对象</span><br><br>        ser = StudentSerializer(page.object_list, many=<span class=\"hljs-literal\">True</span>)<br><br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"DRF-分页\"><a href=\"#DRF-分页\" class=\"headerlink\" title=\"DRF 分页\"></a>DRF 分页</h2><blockquote>\n<p>  REST框架包括对可定制的分页样式的支持。</p>\n</blockquote>\n<h3 id=\"分页类\"><a href=\"#分页类\" class=\"headerlink\" title=\"分页类\"></a>分页类</h3><h4 id=\"PageNumberPagination：\"><a href=\"#PageNumberPagination：\" class=\"headerlink\" title=\"PageNumberPagination：\"></a>PageNumberPagination：</h4><p>可以进行直接的页码处理，返回某一页分页数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">http://127.0.0.1:8000/user/?page=2<br><span class=\"hljs-comment\"># page：当前的页码</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> PageNumberPagination<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">class</span> <span class=\"hljs-title\">PagerPagination</span>(<span class=\"hljs-params\">PageNumberPagination</span>):</span><br>    max_page_size = <span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># 每页最大数目</span><br>    page_size = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 默认每页数目</span><br>    page_query_param = <span class=\"hljs-string\">&#x27;page&#x27;</span>  <span class=\"hljs-comment\"># 页码关键字名， 默认为&quot;page&quot;</span><br>    page_size_query_param = <span class=\"hljs-string\">&#x27;size&#x27;</span>  <span class=\"hljs-comment\"># 每页数目关键字名, ，默认为None</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"LimitOffsetPagination\"><a href=\"#LimitOffsetPagination\" class=\"headerlink\" title=\"LimitOffsetPagination\"></a>LimitOffsetPagination</h4><p>可以通过连接可选的参数进行分页单页数量大小的控制，分页数据偏移的选择</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">http://127.0.0.1:8000/path/?limit=2&amp;offset=2<br><span class=\"hljs-comment\"># limit：每页的数据大小</span><br><span class=\"hljs-comment\"># offset：从某一个数据位置开始偏移</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> LimitOffsetPagination<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LimitPagination</span>(<span class=\"hljs-params\">LimitOffsetPagination</span>):</span><br>    max_limit = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># 最大limit限制，默认None</span><br>    default_limit = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 默认限制，和page_size作用一样</span><br>    limit_query_param = <span class=\"hljs-string\">&#x27;limit&#x27;</span>  <span class=\"hljs-comment\"># 参数名，默认limit</span><br>    offset_query_param = <span class=\"hljs-string\">&#x27;offset&#x27;</span>  <span class=\"hljs-comment\"># 参数名，默认offset</span><br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"自定义分页类\"><a href=\"#自定义分页类\" class=\"headerlink\" title=\"自定义分页类\"></a>自定义分页类</h4><blockquote>\n<p>  可以继承父类，并重写响应对象</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> OrderedDict<br><span class=\"hljs-keyword\">from</span> rest_framework.pagination <span class=\"hljs-keyword\">import</span> PageNumberPagination<br><span class=\"hljs-keyword\">from</span> rest_framework.response <span class=\"hljs-keyword\">import</span> Response<br><span class=\"hljs-keyword\">from</span> rest_framework.utils.urls <span class=\"hljs-keyword\">import</span> replace_query_param<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Pagination</span>(<span class=\"hljs-params\">PageNumberPagination</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_num_pages_link</span>(<span class=\"hljs-params\">self</span>):</span><br>        url = self.request.build_absolute_uri()<br>        num_pages = self.page.paginator.num_pages<br>        <span class=\"hljs-keyword\">return</span> [replace_query_param(url, self.page_query_param, page) <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, num_pages + <span class=\"hljs-number\">1</span>)]<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_paginated_response</span>(<span class=\"hljs-params\">self, data</span>):</span><br>        <span class=\"hljs-keyword\">return</span> Response(OrderedDict([<br>            (<span class=\"hljs-string\">&#x27;count&#x27;</span>, self.page.paginator.count),<br>            (<span class=\"hljs-string\">&#x27;num_pages&#x27;</span>, self.page.paginator.num_pages),  <span class=\"hljs-comment\"># 分页的总页码</span><br>            (<span class=\"hljs-string\">&#x27;next&#x27;</span>, self.get_next_link()),<br>            (<span class=\"hljs-string\">&#x27;previous&#x27;</span>, self.get_previous_link()),<br>            (<span class=\"hljs-string\">&#x27;pages&#x27;</span>, self.get_num_pages_link()),  <span class=\"hljs-comment\"># 所有分页的链接</span><br>            (<span class=\"hljs-string\">&#x27;results&#x27;</span>, data)<br>        ]))<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"分页应用\"><a href=\"#分页应用\" class=\"headerlink\" title=\"分页应用\"></a>分页应用</h3><h4 id=\"全局分页\"><a href=\"#全局分页\" class=\"headerlink\" title=\"全局分页\"></a>全局分页</h4><blockquote>\n<p><strong>注意</strong>：需要修改Django的全局配置文件 <code>settings.py</code></p>\n</blockquote>\n<p>分页样式可以使用<code>DEFAULT_PAGINATION_CLASS</code>和<code>PAGE_SIZE</code>设置键进行全局设置。</p>\n<p>例如，要使用内置的限制/偏移分页，可以执行以下操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:<br>        <span class=\"hljs-string\">&#x27;rest_framework.pagination.LimitOffsetPagination&#x27;</span>,  <span class=\"hljs-comment\"># 指明分页类</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span><br>        <span class=\"hljs-comment\"># &#x27;utils.pagination.Pagination&#x27;, # 自定义分页类</span><br>    <br>    <span class=\"hljs-string\">&#x27;PAGE_SIZE&#x27;</span>: <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># 每页数目</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>请注意，您需要同时设置分页类和应使用的页面大小。</p>\n<h4 id=\"局部分页\"><a href=\"#局部分页\" class=\"headerlink\" title=\"局部分页\"></a>局部分页</h4><p>您还可以使用<code>pagination_class</code>属性在单个视图上设置分页类。配置完了，如果不想用，那么就直接在视图类下使用如下属性关闭全局分页功能</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> ListCreateAPIView<br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> BookSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> BookModel<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookListView</span>(<span class=\"hljs-params\">ListCreateAPIView</span>):</span><br>    serializer_class = BookSerializer<br>    queryset = BookModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    pagination_class = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># 指定分页类，为None，即当前视图不分页</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"DRF-序列化与反序列化","date":"2020-07-08T02:26:57.000Z","_content":"\nDRF内置的序列化类，可以对整个模型类进行序列化与反序列化，简化了繁杂的工作。\n\n## 内置字段序列化\n\n### 模型类\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\nclass Authors(models.Model):\n    name = models.CharField(max_length=10, verbose_name='姓名')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        db_table = 'db_authors'\n        verbose_name = '作者'\n        verbose_name_plural = '作者'\n\n\nclass Books(models.Model):\n    title = models.CharField(max_length=10, verbose_name='标题')\n    price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='单价')\n    publish = models.CharField(max_length=20, verbose_name='出版社')\n    author = models.ForeignKey(Authors, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        db_table = 'db_books'\n        verbose_name = '图书'\n        verbose_name_plural = '图书'\n\n```\n\n### 序列化类\n\n#### 字段默认方式序列化\n\n>   全部字段都采用 `ModelSerializer`的默认方式实现**序列化**与**反序列化**，外键对应的序列化值是外键id\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\n\n\nclass AuthorsSerializer(ModelSerializer):\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\n        \nclass BooksSerializer(ModelSerializer):\n   \n    class Meta:\n        model = Books\n        fields = '__all__'\n        \n```\n\n#### 字段指定方式序列化\n\n>   对模型类的外键关联字段通过 其他方式，实现**序列化**，其他字段仍然使用 默认方式实现序列化\n\n##### 外键字段内置方式序列化\n\n**图书类序列化**\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass BooksSerializer(ModelSerializer):\n    # author = serializers.PrimaryKeyRelatedField(read_only=True)  # 内置关联字段，默认序列化方式，关联对象的主键\n    \n    # author = serializers.StringRelatedField(read_only=True)  # 内置关联字段，此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）\n    \n    # author = serializers.HyperlinkedRelatedField(view_name='authors-detail', read_only=True)  # 内置关联字段，此字段被序列化为关联对象的路由地址\n\n    # author = serializers.SlugRelatedField(read_only=True, slug_field='id')  # 内置关联字段，指定关联对象的字段\n    \n    # author = serializers.CharField(source='author.name', read_only=True)  # 指定关联对象的字段\n    \n    author = AuthorsSerializer()  # 将关联对象所有字段全部序列化\n    class Meta:\n        model = Books\n        fields = '__all__'\n```\n\n**作者类序列化**\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass AuthorsSerializer(ModelSerializer):\n    # books_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True)\n    # books_set = serializers.StringRelatedField(read_only=True, many=True)\n    # books_set = serializers.HyperlinkedRelatedField(view_name='books-detail', read_only=True, many=True)\n    # books_set = BookSerializer(read_only=True, many=True)\n    # books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\n```\n\n#####  外键字段自定义方式序列化\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass BookRelateField(serializers.RelatedField):\n    def to_representation(self, value):\n        return 'Author: {}'.format(value)\n\n\nclass AuthorsSerializer(ModelSerializer):\n    books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\nclass AuthorRelateField(serializers.RelatedField):\n    def to_representation(self, value):\n        return 'Author: {} {}'.format(value.id, value.name)\n\n\nclass BooksSerializer(ModelSerializer):\n    author = AuthorRelateField(read_only=True) # 自定义关联字段\n    \n    class Meta:\n        model = Books\n        fields = '__all__'\n       \n```\n\n以上序列化方式，任选其一均可，但是注意，此时只能保证**序列化成功**，不能保证反序列化\n\n## 自定义字段序列化\n\n> 通过上面的例子可以看出：将外键字段通过其他方式序列化，可以得到不通类型的数据；但是大多数情况，不能实现反序列化。因此，可以在序列化时，不修改外键字段，而是自己构建新字段。最大好处, 在于将序列化字段与反序列化字段分离，互不影响。\n\n### 修改模型类\n\n需要在模型类中用`@property`来实现，可插拔\n\n#### 模型类\n\n```python\nclass Books(models.Model):\n    title = models.CharField(max_length=10, verbose_name='标题')\n    price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='单价')\n    publish = models.CharField(max_length=20, verbose_name='出版社')\n    author = models.ForeignKey(Authors, on_delete=models.CASCADE)\n\n    @property  # 插拔字段 - 默认为read_only(不需要考虑反序列化)，且不能修改\n    def author_name(self):\n        return self.author.name\n\n    @property\n    def author_info(self):\n        from .serializers import AuthorsSerializer\n        return AuthorsSerializer(self.author).data\n\n    def __str__(self):\n        return self.title\n\n```\n\n#### 序列化类\n\n```python\nclass BooksSerializer(ModelSerializer):\n\n    class Meta:\n        model = Books\n        fields = ('id', 'title', 'price', 'author', 'author_name', 'author_info')\n\n        extra_kwargs = {\n            'author': {\n                'write_only': True\n            }\n        }\n\n```\n\n### 修改序列化类\n\n> 模型类不变，只在序列化器中添加序列化字段\n\n#### 序列化类\n\n```python\nclass BooksSerializer(ModelSerializer):\n    author_url = serializers.HyperlinkedIdentityField(view_name='authors-detail', read_only=True)  # 内置序列化方式，关联对象的路由地址\n    \n    author_name = serializers.SerializerMethodField()\n    # author_name 字段在数据库中不能存在，下面写方法的时候前面加 get_  就可以，这样就得到我们需要的数据了。\n\n    @staticmethod\n    def get_author_name(obj):\n        \"\"\"\n        固定写法,obj代表Books实例对象,模型类配置了反向引用author代表作者对象\n        \"\"\"\n        return obj.author.id\n\n    class Meta:\n        model = Books\n        fields = ('id', 'title', 'price', 'author', 'author_name', 'author_url')\n\n        extra_kwargs = {\n            'author': {\n                'write_only': True\n            }\n        }\n\n```\n\n","source":"_posts/DRF-序列化与反序列化.md","raw":"---\ntitle: DRF-序列化与反序列化\ndate: 2020-07-08 10:26:57\ncategories:\n  - 技术\n  - python\n  - DRF\ntags:\n  - 序列化\n  - 反序列化\n---\n\nDRF内置的序列化类，可以对整个模型类进行序列化与反序列化，简化了繁杂的工作。\n\n## 内置字段序列化\n\n### 模型类\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\nclass Authors(models.Model):\n    name = models.CharField(max_length=10, verbose_name='姓名')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        db_table = 'db_authors'\n        verbose_name = '作者'\n        verbose_name_plural = '作者'\n\n\nclass Books(models.Model):\n    title = models.CharField(max_length=10, verbose_name='标题')\n    price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='单价')\n    publish = models.CharField(max_length=20, verbose_name='出版社')\n    author = models.ForeignKey(Authors, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        db_table = 'db_books'\n        verbose_name = '图书'\n        verbose_name_plural = '图书'\n\n```\n\n### 序列化类\n\n#### 字段默认方式序列化\n\n>   全部字段都采用 `ModelSerializer`的默认方式实现**序列化**与**反序列化**，外键对应的序列化值是外键id\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\n\n\nclass AuthorsSerializer(ModelSerializer):\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\n        \nclass BooksSerializer(ModelSerializer):\n   \n    class Meta:\n        model = Books\n        fields = '__all__'\n        \n```\n\n#### 字段指定方式序列化\n\n>   对模型类的外键关联字段通过 其他方式，实现**序列化**，其他字段仍然使用 默认方式实现序列化\n\n##### 外键字段内置方式序列化\n\n**图书类序列化**\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass BooksSerializer(ModelSerializer):\n    # author = serializers.PrimaryKeyRelatedField(read_only=True)  # 内置关联字段，默认序列化方式，关联对象的主键\n    \n    # author = serializers.StringRelatedField(read_only=True)  # 内置关联字段，此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）\n    \n    # author = serializers.HyperlinkedRelatedField(view_name='authors-detail', read_only=True)  # 内置关联字段，此字段被序列化为关联对象的路由地址\n\n    # author = serializers.SlugRelatedField(read_only=True, slug_field='id')  # 内置关联字段，指定关联对象的字段\n    \n    # author = serializers.CharField(source='author.name', read_only=True)  # 指定关联对象的字段\n    \n    author = AuthorsSerializer()  # 将关联对象所有字段全部序列化\n    class Meta:\n        model = Books\n        fields = '__all__'\n```\n\n**作者类序列化**\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass AuthorsSerializer(ModelSerializer):\n    # books_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True)\n    # books_set = serializers.StringRelatedField(read_only=True, many=True)\n    # books_set = serializers.HyperlinkedRelatedField(view_name='books-detail', read_only=True, many=True)\n    # books_set = BookSerializer(read_only=True, many=True)\n    # books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\n```\n\n#####  外键字段自定义方式序列化\n\n```python\nfrom rest_framework.serializers import ModelSerializer\nfrom .models import Books, Authors\nfrom rest_framework import serializers\n\n\nclass BookRelateField(serializers.RelatedField):\n    def to_representation(self, value):\n        return 'Author: {}'.format(value)\n\n\nclass AuthorsSerializer(ModelSerializer):\n    books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段\n\n    class Meta:\n        model = Authors\n        fields = '__all__'\n\nclass AuthorRelateField(serializers.RelatedField):\n    def to_representation(self, value):\n        return 'Author: {} {}'.format(value.id, value.name)\n\n\nclass BooksSerializer(ModelSerializer):\n    author = AuthorRelateField(read_only=True) # 自定义关联字段\n    \n    class Meta:\n        model = Books\n        fields = '__all__'\n       \n```\n\n以上序列化方式，任选其一均可，但是注意，此时只能保证**序列化成功**，不能保证反序列化\n\n## 自定义字段序列化\n\n> 通过上面的例子可以看出：将外键字段通过其他方式序列化，可以得到不通类型的数据；但是大多数情况，不能实现反序列化。因此，可以在序列化时，不修改外键字段，而是自己构建新字段。最大好处, 在于将序列化字段与反序列化字段分离，互不影响。\n\n### 修改模型类\n\n需要在模型类中用`@property`来实现，可插拔\n\n#### 模型类\n\n```python\nclass Books(models.Model):\n    title = models.CharField(max_length=10, verbose_name='标题')\n    price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='单价')\n    publish = models.CharField(max_length=20, verbose_name='出版社')\n    author = models.ForeignKey(Authors, on_delete=models.CASCADE)\n\n    @property  # 插拔字段 - 默认为read_only(不需要考虑反序列化)，且不能修改\n    def author_name(self):\n        return self.author.name\n\n    @property\n    def author_info(self):\n        from .serializers import AuthorsSerializer\n        return AuthorsSerializer(self.author).data\n\n    def __str__(self):\n        return self.title\n\n```\n\n#### 序列化类\n\n```python\nclass BooksSerializer(ModelSerializer):\n\n    class Meta:\n        model = Books\n        fields = ('id', 'title', 'price', 'author', 'author_name', 'author_info')\n\n        extra_kwargs = {\n            'author': {\n                'write_only': True\n            }\n        }\n\n```\n\n### 修改序列化类\n\n> 模型类不变，只在序列化器中添加序列化字段\n\n#### 序列化类\n\n```python\nclass BooksSerializer(ModelSerializer):\n    author_url = serializers.HyperlinkedIdentityField(view_name='authors-detail', read_only=True)  # 内置序列化方式，关联对象的路由地址\n    \n    author_name = serializers.SerializerMethodField()\n    # author_name 字段在数据库中不能存在，下面写方法的时候前面加 get_  就可以，这样就得到我们需要的数据了。\n\n    @staticmethod\n    def get_author_name(obj):\n        \"\"\"\n        固定写法,obj代表Books实例对象,模型类配置了反向引用author代表作者对象\n        \"\"\"\n        return obj.author.id\n\n    class Meta:\n        model = Books\n        fields = ('id', 'title', 'price', 'author', 'author_name', 'author_url')\n\n        extra_kwargs = {\n            'author': {\n                'write_only': True\n            }\n        }\n\n```\n\n","slug":"DRF-序列化与反序列化","published":1,"updated":"2021-01-25T14:15:59.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnube0008jjln31ds08u1","content":"<p>DRF内置的序列化类，可以对整个模型类进行序列化与反序列化，简化了繁杂的工作。</p>\n<h2 id=\"内置字段序列化\"><a href=\"#内置字段序列化\" class=\"headerlink\" title=\"内置字段序列化\"></a>内置字段序列化</h2><h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Authors</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;姓名&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;db_authors&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;作者&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;作者&#x27;</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Books</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;标题&#x27;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&#x27;单价&#x27;</span>)<br>    publish = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&#x27;出版社&#x27;</span>)<br>    author = models.ForeignKey(Authors, on_delete=models.CASCADE)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;db_books&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;图书&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;图书&#x27;</span><br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"序列化类\"><a href=\"#序列化类\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h3><h4 id=\"字段默认方式序列化\"><a href=\"#字段默认方式序列化\" class=\"headerlink\" title=\"字段默认方式序列化\"></a>字段默认方式序列化</h4><blockquote>\n<p>  全部字段都采用 <code>ModelSerializer</code>的默认方式实现<strong>序列化</strong>与<strong>反序列化</strong>，外键对应的序列化值是外键id</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>   <br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br>        <br></code></pre></div></td></tr></table></figure>\n<h4 id=\"字段指定方式序列化\"><a href=\"#字段指定方式序列化\" class=\"headerlink\" title=\"字段指定方式序列化\"></a>字段指定方式序列化</h4><blockquote>\n<p>  对模型类的外键关联字段通过 其他方式，实现<strong>序列化</strong>，其他字段仍然使用 默认方式实现序列化</p>\n</blockquote>\n<h5 id=\"外键字段内置方式序列化\"><a href=\"#外键字段内置方式序列化\" class=\"headerlink\" title=\"外键字段内置方式序列化\"></a>外键字段内置方式序列化</h5><p><strong>图书类序列化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    <span class=\"hljs-comment\"># author = serializers.PrimaryKeyRelatedField(read_only=True)  # 内置关联字段，默认序列化方式，关联对象的主键</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.StringRelatedField(read_only=True)  # 内置关联字段，此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.HyperlinkedRelatedField(view_name=&#x27;authors-detail&#x27;, read_only=True)  # 内置关联字段，此字段被序列化为关联对象的路由地址</span><br><br>    <span class=\"hljs-comment\"># author = serializers.SlugRelatedField(read_only=True, slug_field=&#x27;id&#x27;)  # 内置关联字段，指定关联对象的字段</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.CharField(source=&#x27;author.name&#x27;, read_only=True)  # 指定关联对象的字段</span><br>    <br>    author = AuthorsSerializer()  <span class=\"hljs-comment\"># 将关联对象所有字段全部序列化</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p><strong>作者类序列化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    <span class=\"hljs-comment\"># books_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = serializers.StringRelatedField(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = serializers.HyperlinkedRelatedField(view_name=&#x27;books-detail&#x27;, read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = BookSerializer(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br></code></pre></div></td></tr></table></figure>\n<h5 id=\"外键字段自定义方式序列化\"><a href=\"#外键字段自定义方式序列化\" class=\"headerlink\" title=\"外键字段自定义方式序列化\"></a>外键字段自定义方式序列化</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookRelateField</span>(<span class=\"hljs-params\">serializers.RelatedField</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_representation</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Author: &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(value)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    books_set = BookRelateField(read_only=<span class=\"hljs-literal\">True</span>, many=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># 自定义关联字段</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorRelateField</span>(<span class=\"hljs-params\">serializers.RelatedField</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_representation</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Author: &#123;&#125; &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(value.<span class=\"hljs-built_in\">id</span>, value.name)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    author = AuthorRelateField(read_only=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-comment\"># 自定义关联字段</span><br>    <br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br>       <br></code></pre></div></td></tr></table></figure>\n<p>以上序列化方式，任选其一均可，但是注意，此时只能保证<strong>序列化成功</strong>，不能保证反序列化</p>\n<h2 id=\"自定义字段序列化\"><a href=\"#自定义字段序列化\" class=\"headerlink\" title=\"自定义字段序列化\"></a>自定义字段序列化</h2><blockquote>\n<p>通过上面的例子可以看出：将外键字段通过其他方式序列化，可以得到不通类型的数据；但是大多数情况，不能实现反序列化。因此，可以在序列化时，不修改外键字段，而是自己构建新字段。最大好处, 在于将序列化字段与反序列化字段分离，互不影响。</p>\n</blockquote>\n<h3 id=\"修改模型类\"><a href=\"#修改模型类\" class=\"headerlink\" title=\"修改模型类\"></a>修改模型类</h3><p>需要在模型类中用<code>@property</code>来实现，可插拔</p>\n<h4 id=\"模型类-1\"><a href=\"#模型类-1\" class=\"headerlink\" title=\"模型类\"></a>模型类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Books</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;标题&#x27;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&#x27;单价&#x27;</span>)<br>    publish = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&#x27;出版社&#x27;</span>)<br>    author = models.ForeignKey(Authors, on_delete=models.CASCADE)<br><br><span class=\"hljs-meta\">    @property  </span><span class=\"hljs-comment\"># 插拔字段 - 默认为read_only(不需要考虑反序列化)，且不能修改</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author_name</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.author.name<br><br><span class=\"hljs-meta\">    @property</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author_info</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">from</span> .serializers <span class=\"hljs-keyword\">import</span> AuthorsSerializer<br>        <span class=\"hljs-keyword\">return</span> AuthorsSerializer(self.author).data<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title<br><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"序列化类-1\"><a href=\"#序列化类-1\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;price&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;author_name&#x27;</span>, <span class=\"hljs-string\">&#x27;author_info&#x27;</span>)<br><br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;author&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"修改序列化类\"><a href=\"#修改序列化类\" class=\"headerlink\" title=\"修改序列化类\"></a>修改序列化类</h3><blockquote>\n<p>模型类不变，只在序列化器中添加序列化字段</p>\n</blockquote>\n<h4 id=\"序列化类-2\"><a href=\"#序列化类-2\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    author_url = serializers.HyperlinkedIdentityField(view_name=<span class=\"hljs-string\">&#x27;authors-detail&#x27;</span>, read_only=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># 内置序列化方式，关联对象的路由地址</span><br>    <br>    author_name = serializers.SerializerMethodField()<br>    <span class=\"hljs-comment\"># author_name 字段在数据库中不能存在，下面写方法的时候前面加 get_  就可以，这样就得到我们需要的数据了。</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_author_name</span>(<span class=\"hljs-params\">obj</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        固定写法,obj代表Books实例对象,模型类配置了反向引用author代表作者对象</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">return</span> obj.author.<span class=\"hljs-built_in\">id</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;price&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;author_name&#x27;</span>, <span class=\"hljs-string\">&#x27;author_url&#x27;</span>)<br><br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;author&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>DRF内置的序列化类，可以对整个模型类进行序列化与反序列化，简化了繁杂的工作。</p>\n<h2 id=\"内置字段序列化\"><a href=\"#内置字段序列化\" class=\"headerlink\" title=\"内置字段序列化\"></a>内置字段序列化</h2><h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Authors</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;姓名&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;db_authors&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;作者&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;作者&#x27;</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Books</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;标题&#x27;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&#x27;单价&#x27;</span>)<br>    publish = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&#x27;出版社&#x27;</span>)<br>    author = models.ForeignKey(Authors, on_delete=models.CASCADE)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;db_books&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;图书&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;图书&#x27;</span><br><br></code></pre></td></tr></table></figure>\n<h3 id=\"序列化类\"><a href=\"#序列化类\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h3><h4 id=\"字段默认方式序列化\"><a href=\"#字段默认方式序列化\" class=\"headerlink\" title=\"字段默认方式序列化\"></a>字段默认方式序列化</h4><blockquote>\n<p>  全部字段都采用 <code>ModelSerializer</code>的默认方式实现<strong>序列化</strong>与<strong>反序列化</strong>，外键对应的序列化值是外键id</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>   <br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br>        <br></code></pre></td></tr></table></figure>\n<h4 id=\"字段指定方式序列化\"><a href=\"#字段指定方式序列化\" class=\"headerlink\" title=\"字段指定方式序列化\"></a>字段指定方式序列化</h4><blockquote>\n<p>  对模型类的外键关联字段通过 其他方式，实现<strong>序列化</strong>，其他字段仍然使用 默认方式实现序列化</p>\n</blockquote>\n<h5 id=\"外键字段内置方式序列化\"><a href=\"#外键字段内置方式序列化\" class=\"headerlink\" title=\"外键字段内置方式序列化\"></a>外键字段内置方式序列化</h5><p><strong>图书类序列化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    <span class=\"hljs-comment\"># author = serializers.PrimaryKeyRelatedField(read_only=True)  # 内置关联字段，默认序列化方式，关联对象的主键</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.StringRelatedField(read_only=True)  # 内置关联字段，此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.HyperlinkedRelatedField(view_name=&#x27;authors-detail&#x27;, read_only=True)  # 内置关联字段，此字段被序列化为关联对象的路由地址</span><br><br>    <span class=\"hljs-comment\"># author = serializers.SlugRelatedField(read_only=True, slug_field=&#x27;id&#x27;)  # 内置关联字段，指定关联对象的字段</span><br>    <br>    <span class=\"hljs-comment\"># author = serializers.CharField(source=&#x27;author.name&#x27;, read_only=True)  # 指定关联对象的字段</span><br>    <br>    author = AuthorsSerializer()  <span class=\"hljs-comment\"># 将关联对象所有字段全部序列化</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br></code></pre></td></tr></table></figure>\n<p><strong>作者类序列化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    <span class=\"hljs-comment\"># books_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = serializers.StringRelatedField(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = serializers.HyperlinkedRelatedField(view_name=&#x27;books-detail&#x27;, read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = BookSerializer(read_only=True, many=True)</span><br>    <span class=\"hljs-comment\"># books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br></code></pre></td></tr></table></figure>\n<h5 id=\"外键字段自定义方式序列化\"><a href=\"#外键字段自定义方式序列化\" class=\"headerlink\" title=\"外键字段自定义方式序列化\"></a>外键字段自定义方式序列化</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.serializers <span class=\"hljs-keyword\">import</span> ModelSerializer<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> Books, Authors<br><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookRelateField</span>(<span class=\"hljs-params\">serializers.RelatedField</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_representation</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Author: &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(value)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorsSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    books_set = BookRelateField(read_only=<span class=\"hljs-literal\">True</span>, many=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># 自定义关联字段</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Authors<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthorRelateField</span>(<span class=\"hljs-params\">serializers.RelatedField</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_representation</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Author: &#123;&#125; &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(value.<span class=\"hljs-built_in\">id</span>, value.name)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    author = AuthorRelateField(read_only=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-comment\"># 自定义关联字段</span><br>    <br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = <span class=\"hljs-string\">&#x27;__all__&#x27;</span><br>       <br></code></pre></td></tr></table></figure>\n<p>以上序列化方式，任选其一均可，但是注意，此时只能保证<strong>序列化成功</strong>，不能保证反序列化</p>\n<h2 id=\"自定义字段序列化\"><a href=\"#自定义字段序列化\" class=\"headerlink\" title=\"自定义字段序列化\"></a>自定义字段序列化</h2><blockquote>\n<p>通过上面的例子可以看出：将外键字段通过其他方式序列化，可以得到不通类型的数据；但是大多数情况，不能实现反序列化。因此，可以在序列化时，不修改外键字段，而是自己构建新字段。最大好处, 在于将序列化字段与反序列化字段分离，互不影响。</p>\n</blockquote>\n<h3 id=\"修改模型类\"><a href=\"#修改模型类\" class=\"headerlink\" title=\"修改模型类\"></a>修改模型类</h3><p>需要在模型类中用<code>@property</code>来实现，可插拔</p>\n<h4 id=\"模型类-1\"><a href=\"#模型类-1\" class=\"headerlink\" title=\"模型类\"></a>模型类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Books</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">10</span>, verbose_name=<span class=\"hljs-string\">&#x27;标题&#x27;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&#x27;单价&#x27;</span>)<br>    publish = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&#x27;出版社&#x27;</span>)<br>    author = models.ForeignKey(Authors, on_delete=models.CASCADE)<br><br><span class=\"hljs-meta\">    @property  </span><span class=\"hljs-comment\"># 插拔字段 - 默认为read_only(不需要考虑反序列化)，且不能修改</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author_name</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.author.name<br><br><span class=\"hljs-meta\">    @property</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author_info</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">from</span> .serializers <span class=\"hljs-keyword\">import</span> AuthorsSerializer<br>        <span class=\"hljs-keyword\">return</span> AuthorsSerializer(self.author).data<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"序列化类-1\"><a href=\"#序列化类-1\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;price&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;author_name&#x27;</span>, <span class=\"hljs-string\">&#x27;author_info&#x27;</span>)<br><br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;author&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"修改序列化类\"><a href=\"#修改序列化类\" class=\"headerlink\" title=\"修改序列化类\"></a>修改序列化类</h3><blockquote>\n<p>模型类不变，只在序列化器中添加序列化字段</p>\n</blockquote>\n<h4 id=\"序列化类-2\"><a href=\"#序列化类-2\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BooksSerializer</span>(<span class=\"hljs-params\">ModelSerializer</span>):</span><br>    author_url = serializers.HyperlinkedIdentityField(view_name=<span class=\"hljs-string\">&#x27;authors-detail&#x27;</span>, read_only=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># 内置序列化方式，关联对象的路由地址</span><br>    <br>    author_name = serializers.SerializerMethodField()<br>    <span class=\"hljs-comment\"># author_name 字段在数据库中不能存在，下面写方法的时候前面加 get_  就可以，这样就得到我们需要的数据了。</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_author_name</span>(<span class=\"hljs-params\">obj</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        固定写法,obj代表Books实例对象,模型类配置了反向引用author代表作者对象</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">return</span> obj.author.<span class=\"hljs-built_in\">id</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = Books<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;price&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;author_name&#x27;</span>, <span class=\"hljs-string\">&#x27;author_url&#x27;</span>)<br><br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;author&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"Django基础(一)-项目流程","date":"2019-03-22T14:45:46.000Z","_content":"\n## 基本流程\n\n使用命令`django-admin startproject djangodemo`,创建Django项目\n\n```python\n|-- djangodemo\n|    |-- __init__.py  # 说明booktest是一个python包。\n|    |-- settings.py # 项目的配置文件。\n|    |-- urls.py  # 进行url路由的配置。\n|    |-- wsgi.py  # web服务器和Django交互的入口。\n|\n|-- manage.py  # 项目的管理文件。\n\n```\n\n使用命令`python manage.py startapp books`, 创建DjangoApp\n\n```python\n|- books\n    |- __init__.py  # 说明目录是一个Python模块。\n    |- models.py  # 写和数据库项目的内容, 设计模型类。\n    |- views.py  # 接收请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数。\n    |- tests.py  # 写测试代码的文件。\n    |- admin.py  # 网站后台管理相关的文件。\n```\n\n## 项目配置\n\n> 修改项目根目下的`settings.py`文件\n\n### 注册App\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'books', # 应用名\n  ]\n```\n\n### 配置数据库\n\n```python\nDATABASES = {\n      'default': {\n          # 'ENGINE': 'django.db.backends.sqlite3',\n          # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\n          'ENGINE': 'django.db.backends.mysql',\n          'NAME': 'djangodemo',  # 使用的数据库名字，数据库必须手动创建\n          'USER': 'root',  # 连接mysql的用户名\n          'PASSWORD': 'mysql',  # 用户名对应的密码\n          'HOST': 'localhost',  # 指定mysql数据库所在电脑的IP\n          'PORT': 3306,  # mysql服务器的端口号\n      }\n  }\n```\n\n> **注意:**  mysql数据库**链接驱动**，django2.x之后，官方建议使用 `mysqlclient`,若非要使用 `pymysql`，还需要如下配置\n\n在与`settings.py`同级的`__init__.py`文件中添加:\n\n```python\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n### 配置模板目录\n\n```python\n# 在项目根目录下, 新建模板目录 templates\nTEMPLATES = [\n  {\n      'BACKEND': 'django.template.backends.django.DjangoTemplates',\n      'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n      'APP_DIRS': True,\n      'OPTIONS': {\n          'context_processors': [\n              'django.template.context_processors.debug',\n              'django.template.context_processors.request',\n              'django.contrib.auth.context_processors.auth',\n              'django.contrib.messages.context_processors.messages',\n          ],\n      },\n  },\n]\n```\n\n### 配置静态资源\n\n```python\n# 静态资源展示的url前缀\nSTATIC_URL = '/static/'\n# 静态资源存放的目录，需要先创建static目录\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n```\n\n### 本地化配置\n\n```python\nLANGUAGE_CODE = 'zh-hans'\n\nTIME_ZONE = 'Asia/Shanghai'\n\nUSE_TZ = True # 设置为True， 数据库存储默认使用UTC时区，设置为False， 使用本地时区\n```\n\n### 配置HOST地址\n\n```python\nALLOWED_HOSTS = [\"*\"] # 允许客户端通过服务器的任何ip(本地ip和网络ip)访问服务器\n```\n\n## 创建后台超级管理员\n\n- 进入manage.py目录下，使用命令`python manage.py createsuperuser`来进行创建\n\n- 接下来输入用户名称 : `Username(leave bkank to use 'administrator'): root`\n\n- 然后是输入邮箱（QQemail等都可以）: `Email address：xxxx@xxx.com`\n\n- 输入密码（输入密码时不会显示出来，并且长度必须超过八位才行）: `Password：********`\n\n- 确认密码 : `Password(again)：********`\n\n- 当两次密码输入相同且超过八位的时候，就会提示创建超级用户成功 : `Superuser created successfully`\n\n## 数据模型\n\n### 创建模型类\n\n在应用`books`目录下的`models.py`文件中创建模型类\n\n```python\nfrom django.db import models\n\n# Create your models here.\nclass BookInfo(models.Model):\n    title = models.CharField(max_length=20)\n    pub_date = models.DateField()\n    read = models.IntegerField(default=0)\n    comment = models.IntegerField(default=0)\n    # 删除标记\n    isDelete = models.BooleanField(default=False)\n\n    class Meta:\n        db_table = 'tb_books'  # 指定表名\n        verbose_name = '图书'  # 后台显示表名\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.title  # 查询对象时，显示信息\n\nclass HeroInfo(models.Model):\n    name = models.CharField(max_length=20)\n    gender = models.BooleanField(default=False)\n    comment = models.CharField(max_length=200)\n    book = models.ForeignKey('BookInfo', on_delete=models.CASCADE)\n    isDelete = models.BooleanField(default=False)\n\t\t\n    class Meta:\n        db_table = 'tb_heros'  # 指定表名\n        verbose_name = '英雄'  # 后台显示表名\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.name  # 查询对象时，显示信息\n```\n\n### 模型类生成表\n\n- 生成迁移文件`python manage.py makemigrations`\n\n- 迁移文件生成表`python manage.py migrate`,生成表名的默认格式：应用名_模型类名小写,可以指定表名\n\n### Admin后台管理\n\n在应用book下的admin.py中注册模型类。\n\n告诉djang框架根据注册的模型类来生成对应表管理页面。\n\n```python\nfrom book.models import BookInfo\nfrom book.models import HeroInfo\n\n# 后台管理相关文件\n# Register your models here.\nclass BookInfoAdmin(admin.ModelAdmin):\n    \"\"\"图书模型管理类\"\"\"\n    list_display = ['id', 'book_title', 'book_pub_date']\n\nclass HeroInfoAdmin(admin.ModelAdmin):\n    list_display = ['id', 'hero_name', 'hero_sex', 'hero_comment', 'hero_book']\n\n# 注册模型类\nadmin.site.register(BookInfo, BookInfoAdmin)\nadmin.site.register(HeroInfo, HeroInfoAdmin)\n```\n\n## 模板\n\n在 `templates`目录下 创建  `hero_list.html`, 展示所有 英雄信息\n\n```python\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>英雄列表</title>\n</head>\n<body>\n<table>\n    {% for hero in heroes %}   # 类似python的for循环和if判断\n        {% if not hero.isDelete %}\n            <tr>\n                <td>{{ hero.id }}</td>\n                <td>{{ hero.name }}</td>\n                <td>{{ hero.gender }}</td>\n                <td>{{ hero.comment }}</td>\n                <td>{{ hero.book }}</td>\n            </tr>\n        {% endif %}\n    {% endfor %}\n</table>\n</body>\n</html>\n```\n\n## 视图\n\n在 `books` APP目录下的 `views.py`中创建自己的 视图函数\n\n```python\nfrom django.shortcuts import render\nfrom books.models import *\n\ndef hero_list_view(request):\n    heros = HeroInfo.objects.all()  # 利用模型类查询全部数据\n    return render(request, 'hero_list.html', context={'heros': heros})  # 利用render函数渲染模板\n```\n\n## 路由\n\n在 项目同名目录的 `urls.py`中配置路由\n\n```python\nfrom django.urls import path\nfrom book.views import *\n\n\nurlpatterns = [\n    path('heroes/', hero_list_view)\n]\n```\n\n## 项目启动\n\n- 只能通过本地ip访问 : `python manage.py runserver` \n\n  浏览器输入`127.0.0.1:8000`访问服务器\n\n- 可以通过网络ip访问 : `python manage.py runserver 0.0.0.0:8000`\n\n  浏览器输入`网络ip:8000`访问服务器，同时需要搭配 `settings.py`中的配置参数使用\n","source":"_posts/Django-1-项目流程.md","raw":"---\ntitle: Django基础(一)-项目流程\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 入门教程\ndate: 2019-03-22 22:45:46\n---\n\n## 基本流程\n\n使用命令`django-admin startproject djangodemo`,创建Django项目\n\n```python\n|-- djangodemo\n|    |-- __init__.py  # 说明booktest是一个python包。\n|    |-- settings.py # 项目的配置文件。\n|    |-- urls.py  # 进行url路由的配置。\n|    |-- wsgi.py  # web服务器和Django交互的入口。\n|\n|-- manage.py  # 项目的管理文件。\n\n```\n\n使用命令`python manage.py startapp books`, 创建DjangoApp\n\n```python\n|- books\n    |- __init__.py  # 说明目录是一个Python模块。\n    |- models.py  # 写和数据库项目的内容, 设计模型类。\n    |- views.py  # 接收请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数。\n    |- tests.py  # 写测试代码的文件。\n    |- admin.py  # 网站后台管理相关的文件。\n```\n\n## 项目配置\n\n> 修改项目根目下的`settings.py`文件\n\n### 注册App\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'books', # 应用名\n  ]\n```\n\n### 配置数据库\n\n```python\nDATABASES = {\n      'default': {\n          # 'ENGINE': 'django.db.backends.sqlite3',\n          # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\n          'ENGINE': 'django.db.backends.mysql',\n          'NAME': 'djangodemo',  # 使用的数据库名字，数据库必须手动创建\n          'USER': 'root',  # 连接mysql的用户名\n          'PASSWORD': 'mysql',  # 用户名对应的密码\n          'HOST': 'localhost',  # 指定mysql数据库所在电脑的IP\n          'PORT': 3306,  # mysql服务器的端口号\n      }\n  }\n```\n\n> **注意:**  mysql数据库**链接驱动**，django2.x之后，官方建议使用 `mysqlclient`,若非要使用 `pymysql`，还需要如下配置\n\n在与`settings.py`同级的`__init__.py`文件中添加:\n\n```python\nimport pymysql\npymysql.install_as_MySQLdb()\n```\n\n### 配置模板目录\n\n```python\n# 在项目根目录下, 新建模板目录 templates\nTEMPLATES = [\n  {\n      'BACKEND': 'django.template.backends.django.DjangoTemplates',\n      'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n      'APP_DIRS': True,\n      'OPTIONS': {\n          'context_processors': [\n              'django.template.context_processors.debug',\n              'django.template.context_processors.request',\n              'django.contrib.auth.context_processors.auth',\n              'django.contrib.messages.context_processors.messages',\n          ],\n      },\n  },\n]\n```\n\n### 配置静态资源\n\n```python\n# 静态资源展示的url前缀\nSTATIC_URL = '/static/'\n# 静态资源存放的目录，需要先创建static目录\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n```\n\n### 本地化配置\n\n```python\nLANGUAGE_CODE = 'zh-hans'\n\nTIME_ZONE = 'Asia/Shanghai'\n\nUSE_TZ = True # 设置为True， 数据库存储默认使用UTC时区，设置为False， 使用本地时区\n```\n\n### 配置HOST地址\n\n```python\nALLOWED_HOSTS = [\"*\"] # 允许客户端通过服务器的任何ip(本地ip和网络ip)访问服务器\n```\n\n## 创建后台超级管理员\n\n- 进入manage.py目录下，使用命令`python manage.py createsuperuser`来进行创建\n\n- 接下来输入用户名称 : `Username(leave bkank to use 'administrator'): root`\n\n- 然后是输入邮箱（QQemail等都可以）: `Email address：xxxx@xxx.com`\n\n- 输入密码（输入密码时不会显示出来，并且长度必须超过八位才行）: `Password：********`\n\n- 确认密码 : `Password(again)：********`\n\n- 当两次密码输入相同且超过八位的时候，就会提示创建超级用户成功 : `Superuser created successfully`\n\n## 数据模型\n\n### 创建模型类\n\n在应用`books`目录下的`models.py`文件中创建模型类\n\n```python\nfrom django.db import models\n\n# Create your models here.\nclass BookInfo(models.Model):\n    title = models.CharField(max_length=20)\n    pub_date = models.DateField()\n    read = models.IntegerField(default=0)\n    comment = models.IntegerField(default=0)\n    # 删除标记\n    isDelete = models.BooleanField(default=False)\n\n    class Meta:\n        db_table = 'tb_books'  # 指定表名\n        verbose_name = '图书'  # 后台显示表名\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.title  # 查询对象时，显示信息\n\nclass HeroInfo(models.Model):\n    name = models.CharField(max_length=20)\n    gender = models.BooleanField(default=False)\n    comment = models.CharField(max_length=200)\n    book = models.ForeignKey('BookInfo', on_delete=models.CASCADE)\n    isDelete = models.BooleanField(default=False)\n\t\t\n    class Meta:\n        db_table = 'tb_heros'  # 指定表名\n        verbose_name = '英雄'  # 后台显示表名\n        verbose_name_plural = verbose_name\n\n    def __str__(self):\n        return self.name  # 查询对象时，显示信息\n```\n\n### 模型类生成表\n\n- 生成迁移文件`python manage.py makemigrations`\n\n- 迁移文件生成表`python manage.py migrate`,生成表名的默认格式：应用名_模型类名小写,可以指定表名\n\n### Admin后台管理\n\n在应用book下的admin.py中注册模型类。\n\n告诉djang框架根据注册的模型类来生成对应表管理页面。\n\n```python\nfrom book.models import BookInfo\nfrom book.models import HeroInfo\n\n# 后台管理相关文件\n# Register your models here.\nclass BookInfoAdmin(admin.ModelAdmin):\n    \"\"\"图书模型管理类\"\"\"\n    list_display = ['id', 'book_title', 'book_pub_date']\n\nclass HeroInfoAdmin(admin.ModelAdmin):\n    list_display = ['id', 'hero_name', 'hero_sex', 'hero_comment', 'hero_book']\n\n# 注册模型类\nadmin.site.register(BookInfo, BookInfoAdmin)\nadmin.site.register(HeroInfo, HeroInfoAdmin)\n```\n\n## 模板\n\n在 `templates`目录下 创建  `hero_list.html`, 展示所有 英雄信息\n\n```python\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>英雄列表</title>\n</head>\n<body>\n<table>\n    {% for hero in heroes %}   # 类似python的for循环和if判断\n        {% if not hero.isDelete %}\n            <tr>\n                <td>{{ hero.id }}</td>\n                <td>{{ hero.name }}</td>\n                <td>{{ hero.gender }}</td>\n                <td>{{ hero.comment }}</td>\n                <td>{{ hero.book }}</td>\n            </tr>\n        {% endif %}\n    {% endfor %}\n</table>\n</body>\n</html>\n```\n\n## 视图\n\n在 `books` APP目录下的 `views.py`中创建自己的 视图函数\n\n```python\nfrom django.shortcuts import render\nfrom books.models import *\n\ndef hero_list_view(request):\n    heros = HeroInfo.objects.all()  # 利用模型类查询全部数据\n    return render(request, 'hero_list.html', context={'heros': heros})  # 利用render函数渲染模板\n```\n\n## 路由\n\n在 项目同名目录的 `urls.py`中配置路由\n\n```python\nfrom django.urls import path\nfrom book.views import *\n\n\nurlpatterns = [\n    path('heroes/', hero_list_view)\n]\n```\n\n## 项目启动\n\n- 只能通过本地ip访问 : `python manage.py runserver` \n\n  浏览器输入`127.0.0.1:8000`访问服务器\n\n- 可以通过网络ip访问 : `python manage.py runserver 0.0.0.0:8000`\n\n  浏览器输入`网络ip:8000`访问服务器，同时需要搭配 `settings.py`中的配置参数使用\n","slug":"Django-1-项目流程","published":1,"updated":"2021-01-23T14:46:07.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubf0009jjln5r3h7u7r","content":"<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>使用命令<code>django-admin startproject djangodemo</code>,创建Django项目</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">|-- djangodemo<br>|    |-- __init__.py  <span class=\"hljs-comment\"># 说明booktest是一个python包。</span><br>|    |-- settings.py <span class=\"hljs-comment\"># 项目的配置文件。</span><br>|    |-- urls.py  <span class=\"hljs-comment\"># 进行url路由的配置。</span><br>|    |-- wsgi.py  <span class=\"hljs-comment\"># web服务器和Django交互的入口。</span><br>|<br>|-- manage.py  <span class=\"hljs-comment\"># 项目的管理文件。</span><br><br></code></pre></div></td></tr></table></figure>\n<p>使用命令<code>python manage.py startapp books</code>, 创建DjangoApp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">|- books<br>    |- __init__.py  <span class=\"hljs-comment\"># 说明目录是一个Python模块。</span><br>    |- models.py  <span class=\"hljs-comment\"># 写和数据库项目的内容, 设计模型类。</span><br>    |- views.py  <span class=\"hljs-comment\"># 接收请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数。</span><br>    |- tests.py  <span class=\"hljs-comment\"># 写测试代码的文件。</span><br>    |- admin.py  <span class=\"hljs-comment\"># 网站后台管理相关的文件。</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h2><blockquote>\n<p>修改项目根目下的<code>settings.py</code>文件</p>\n</blockquote>\n<h3 id=\"注册App\"><a href=\"#注册App\" class=\"headerlink\" title=\"注册App\"></a>注册App</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;books&#x27;</span>, <span class=\"hljs-comment\"># 应用名</span><br>  ]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>      <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>          <span class=\"hljs-comment\"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br>          <span class=\"hljs-comment\"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span><br><br>          <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>,<br>          <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;djangodemo&#x27;</span>,  <span class=\"hljs-comment\"># 使用的数据库名字，数据库必须手动创建</span><br>          <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,  <span class=\"hljs-comment\"># 连接mysql的用户名</span><br>          <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;mysql&#x27;</span>,  <span class=\"hljs-comment\"># 用户名对应的密码</span><br>          <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>,  <span class=\"hljs-comment\"># 指定mysql数据库所在电脑的IP</span><br>          <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span>,  <span class=\"hljs-comment\"># mysql服务器的端口号</span><br>      &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><strong>注意:</strong>  mysql数据库<strong>链接驱动</strong>，django2.x之后，官方建议使用 <code>mysqlclient</code>,若非要使用 <code>pymysql</code>，还需要如下配置</p>\n</blockquote>\n<p>在与<code>settings.py</code>同级的<code>__init__.py</code>文件中添加:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br>pymysql.install_as_MySQLdb()<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"配置模板目录\"><a href=\"#配置模板目录\" class=\"headerlink\" title=\"配置模板目录\"></a>配置模板目录</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 在项目根目录下, 新建模板目录 templates</span><br>TEMPLATES = [<br>  &#123;<br>      <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>      <span class=\"hljs-string\">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class=\"hljs-string\">&quot;templates&quot;</span>)],<br>      <span class=\"hljs-string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>      <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>          <span class=\"hljs-string\">&#x27;context_processors&#x27;</span>: [<br>              <span class=\"hljs-string\">&#x27;django.template.context_processors.debug&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.template.context_processors.request&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>          ],<br>      &#125;,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"配置静态资源\"><a href=\"#配置静态资源\" class=\"headerlink\" title=\"配置静态资源\"></a>配置静态资源</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 静态资源展示的url前缀</span><br>STATIC_URL = <span class=\"hljs-string\">&#x27;/static/&#x27;</span><br><span class=\"hljs-comment\"># 静态资源存放的目录，需要先创建static目录</span><br>STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;static&#x27;</span>)]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"本地化配置\"><a href=\"#本地化配置\" class=\"headerlink\" title=\"本地化配置\"></a>本地化配置</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">LANGUAGE_CODE = <span class=\"hljs-string\">&#x27;zh-hans&#x27;</span><br><br>TIME_ZONE = <span class=\"hljs-string\">&#x27;Asia/Shanghai&#x27;</span><br><br>USE_TZ = <span class=\"hljs-literal\">True</span> <span class=\"hljs-comment\"># 设置为True， 数据库存储默认使用UTC时区，设置为False， 使用本地时区</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"配置HOST地址\"><a href=\"#配置HOST地址\" class=\"headerlink\" title=\"配置HOST地址\"></a>配置HOST地址</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">ALLOWED_HOSTS = [<span class=\"hljs-string\">&quot;*&quot;</span>] <span class=\"hljs-comment\"># 允许客户端通过服务器的任何ip(本地ip和网络ip)访问服务器</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"创建后台超级管理员\"><a href=\"#创建后台超级管理员\" class=\"headerlink\" title=\"创建后台超级管理员\"></a>创建后台超级管理员</h2><ul>\n<li><p>进入manage.py目录下，使用命令<code>python manage.py createsuperuser</code>来进行创建</p>\n</li>\n<li><p>接下来输入用户名称 : <code>Username(leave bkank to use &#39;administrator&#39;): root</code></p>\n</li>\n<li><p>然后是输入邮箱（QQemail等都可以）: <code>Email address：xxxx@xxx.com</code></p>\n</li>\n<li><p>输入密码（输入密码时不会显示出来，并且长度必须超过八位才行）: <code>Password：********</code></p>\n</li>\n<li><p>确认密码 : <code>Password(again)：********</code></p>\n</li>\n<li><p>当两次密码输入相同且超过八位的时候，就会提示创建超级用户成功 : <code>Superuser created successfully</code></p>\n</li>\n</ul>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><h3 id=\"创建模型类\"><a href=\"#创建模型类\" class=\"headerlink\" title=\"创建模型类\"></a>创建模型类</h3><p>在应用<code>books</code>目录下的<code>models.py</code>文件中创建模型类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">20</span>)<br>    pub_date = models.DateField()<br>    read = models.IntegerField(default=<span class=\"hljs-number\">0</span>)<br>    comment = models.IntegerField(default=<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-comment\"># 删除标记</span><br>    isDelete = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_books&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;图书&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title  <span class=\"hljs-comment\"># 查询对象时，显示信息</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeroInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">20</span>)<br>    gender = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br>    comment = models.CharField(max_length=<span class=\"hljs-number\">200</span>)<br>    book = models.ForeignKey(<span class=\"hljs-string\">&#x27;BookInfo&#x27;</span>, on_delete=models.CASCADE)<br>    isDelete = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br>\t\t<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_heros&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;英雄&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name  <span class=\"hljs-comment\"># 查询对象时，显示信息</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"模型类生成表\"><a href=\"#模型类生成表\" class=\"headerlink\" title=\"模型类生成表\"></a>模型类生成表</h3><ul>\n<li><p>生成迁移文件<code>python manage.py makemigrations</code></p>\n</li>\n<li><p>迁移文件生成表<code>python manage.py migrate</code>,生成表名的默认格式：应用名_模型类名小写,可以指定表名</p>\n</li>\n</ul>\n<h3 id=\"Admin后台管理\"><a href=\"#Admin后台管理\" class=\"headerlink\" title=\"Admin后台管理\"></a>Admin后台管理</h3><p>在应用book下的admin.py中注册模型类。</p>\n<p>告诉djang框架根据注册的模型类来生成对应表管理页面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> book.models <span class=\"hljs-keyword\">import</span> BookInfo<br><span class=\"hljs-keyword\">from</span> book.models <span class=\"hljs-keyword\">import</span> HeroInfo<br><br><span class=\"hljs-comment\"># 后台管理相关文件</span><br><span class=\"hljs-comment\"># Register your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookInfoAdmin</span>(<span class=\"hljs-params\">admin.ModelAdmin</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;图书模型管理类&quot;&quot;&quot;</span><br>    list_display = [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;book_title&#x27;</span>, <span class=\"hljs-string\">&#x27;book_pub_date&#x27;</span>]<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeroInfoAdmin</span>(<span class=\"hljs-params\">admin.ModelAdmin</span>):</span><br>    list_display = [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_name&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_sex&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_comment&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_book&#x27;</span>]<br><br><span class=\"hljs-comment\"># 注册模型类</span><br>admin.site.register(BookInfo, BookInfoAdmin)<br>admin.site.register(HeroInfo, HeroInfoAdmin)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>在 <code>templates</code>目录下 创建  <code>hero_list.html</code>, 展示所有 英雄信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class=\"hljs-string\">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;英雄列表&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;table&gt;<br>    &#123;% <span class=\"hljs-keyword\">for</span> hero <span class=\"hljs-keyword\">in</span> heroes %&#125;   <span class=\"hljs-comment\"># 类似python的for循环和if判断</span><br>        &#123;% <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> hero.isDelete %&#125;<br>            &lt;tr&gt;<br>                &lt;td&gt;&#123;&#123; hero.id &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.name &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.gender &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.comment &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.book &#125;&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &#123;% endif %&#125;<br>    &#123;% endfor %&#125;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>在 <code>books</code> APP目录下的 <code>views.py</code>中创建自己的 视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">from</span> books.models <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hero_list_view</span>(<span class=\"hljs-params\">request</span>):</span><br>    heros = HeroInfo.objects.<span class=\"hljs-built_in\">all</span>()  <span class=\"hljs-comment\"># 利用模型类查询全部数据</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;hero_list.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;heros&#x27;</span>: heros&#125;)  <span class=\"hljs-comment\"># 利用render函数渲染模板</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>在 项目同名目录的 <code>urls.py</code>中配置路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> book.views <span class=\"hljs-keyword\">import</span> *<br><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;heroes/&#x27;</span>, hero_list_view)<br>]<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h2><ul>\n<li><p>只能通过本地ip访问 : <code>python manage.py runserver</code> </p>\n<p>浏览器输入<code>127.0.0.1:8000</code>访问服务器</p>\n</li>\n<li><p>可以通过网络ip访问 : <code>python manage.py runserver 0.0.0.0:8000</code></p>\n<p>浏览器输入<code>网络ip:8000</code>访问服务器，同时需要搭配 <code>settings.py</code>中的配置参数使用</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>使用命令<code>django-admin startproject djangodemo</code>,创建Django项目</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">|-- djangodemo<br>|    |-- __init__.py  <span class=\"hljs-comment\"># 说明booktest是一个python包。</span><br>|    |-- settings.py <span class=\"hljs-comment\"># 项目的配置文件。</span><br>|    |-- urls.py  <span class=\"hljs-comment\"># 进行url路由的配置。</span><br>|    |-- wsgi.py  <span class=\"hljs-comment\"># web服务器和Django交互的入口。</span><br>|<br>|-- manage.py  <span class=\"hljs-comment\"># 项目的管理文件。</span><br><br></code></pre></td></tr></table></figure>\n<p>使用命令<code>python manage.py startapp books</code>, 创建DjangoApp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">|- books<br>    |- __init__.py  <span class=\"hljs-comment\"># 说明目录是一个Python模块。</span><br>    |- models.py  <span class=\"hljs-comment\"># 写和数据库项目的内容, 设计模型类。</span><br>    |- views.py  <span class=\"hljs-comment\"># 接收请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数。</span><br>    |- tests.py  <span class=\"hljs-comment\"># 写测试代码的文件。</span><br>    |- admin.py  <span class=\"hljs-comment\"># 网站后台管理相关的文件。</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h2><blockquote>\n<p>修改项目根目下的<code>settings.py</code>文件</p>\n</blockquote>\n<h3 id=\"注册App\"><a href=\"#注册App\" class=\"headerlink\" title=\"注册App\"></a>注册App</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;books&#x27;</span>, <span class=\"hljs-comment\"># 应用名</span><br>  ]<br></code></pre></td></tr></table></figure>\n<h3 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>      <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>          <span class=\"hljs-comment\"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br>          <span class=\"hljs-comment\"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span><br><br>          <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>,<br>          <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;djangodemo&#x27;</span>,  <span class=\"hljs-comment\"># 使用的数据库名字，数据库必须手动创建</span><br>          <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,  <span class=\"hljs-comment\"># 连接mysql的用户名</span><br>          <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;mysql&#x27;</span>,  <span class=\"hljs-comment\"># 用户名对应的密码</span><br>          <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>,  <span class=\"hljs-comment\"># 指定mysql数据库所在电脑的IP</span><br>          <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span>,  <span class=\"hljs-comment\"># mysql服务器的端口号</span><br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意:</strong>  mysql数据库<strong>链接驱动</strong>，django2.x之后，官方建议使用 <code>mysqlclient</code>,若非要使用 <code>pymysql</code>，还需要如下配置</p>\n</blockquote>\n<p>在与<code>settings.py</code>同级的<code>__init__.py</code>文件中添加:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure>\n<h3 id=\"配置模板目录\"><a href=\"#配置模板目录\" class=\"headerlink\" title=\"配置模板目录\"></a>配置模板目录</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 在项目根目录下, 新建模板目录 templates</span><br>TEMPLATES = [<br>  &#123;<br>      <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>      <span class=\"hljs-string\">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class=\"hljs-string\">&quot;templates&quot;</span>)],<br>      <span class=\"hljs-string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>      <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>          <span class=\"hljs-string\">&#x27;context_processors&#x27;</span>: [<br>              <span class=\"hljs-string\">&#x27;django.template.context_processors.debug&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.template.context_processors.request&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>              <span class=\"hljs-string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>          ],<br>      &#125;,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure>\n<h3 id=\"配置静态资源\"><a href=\"#配置静态资源\" class=\"headerlink\" title=\"配置静态资源\"></a>配置静态资源</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 静态资源展示的url前缀</span><br>STATIC_URL = <span class=\"hljs-string\">&#x27;/static/&#x27;</span><br><span class=\"hljs-comment\"># 静态资源存放的目录，需要先创建static目录</span><br>STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;static&#x27;</span>)]<br></code></pre></td></tr></table></figure>\n<h3 id=\"本地化配置\"><a href=\"#本地化配置\" class=\"headerlink\" title=\"本地化配置\"></a>本地化配置</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">LANGUAGE_CODE = <span class=\"hljs-string\">&#x27;zh-hans&#x27;</span><br><br>TIME_ZONE = <span class=\"hljs-string\">&#x27;Asia/Shanghai&#x27;</span><br><br>USE_TZ = <span class=\"hljs-literal\">True</span> <span class=\"hljs-comment\"># 设置为True， 数据库存储默认使用UTC时区，设置为False， 使用本地时区</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"配置HOST地址\"><a href=\"#配置HOST地址\" class=\"headerlink\" title=\"配置HOST地址\"></a>配置HOST地址</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ALLOWED_HOSTS = [<span class=\"hljs-string\">&quot;*&quot;</span>] <span class=\"hljs-comment\"># 允许客户端通过服务器的任何ip(本地ip和网络ip)访问服务器</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"创建后台超级管理员\"><a href=\"#创建后台超级管理员\" class=\"headerlink\" title=\"创建后台超级管理员\"></a>创建后台超级管理员</h2><ul>\n<li><p>进入manage.py目录下，使用命令<code>python manage.py createsuperuser</code>来进行创建</p>\n</li>\n<li><p>接下来输入用户名称 : <code>Username(leave bkank to use &#39;administrator&#39;): root</code></p>\n</li>\n<li><p>然后是输入邮箱（QQemail等都可以）: <code>Email address：xxxx@xxx.com</code></p>\n</li>\n<li><p>输入密码（输入密码时不会显示出来，并且长度必须超过八位才行）: <code>Password：********</code></p>\n</li>\n<li><p>确认密码 : <code>Password(again)：********</code></p>\n</li>\n<li><p>当两次密码输入相同且超过八位的时候，就会提示创建超级用户成功 : <code>Superuser created successfully</code></p>\n</li>\n</ul>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><h3 id=\"创建模型类\"><a href=\"#创建模型类\" class=\"headerlink\" title=\"创建模型类\"></a>创建模型类</h3><p>在应用<code>books</code>目录下的<code>models.py</code>文件中创建模型类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">20</span>)<br>    pub_date = models.DateField()<br>    read = models.IntegerField(default=<span class=\"hljs-number\">0</span>)<br>    comment = models.IntegerField(default=<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-comment\"># 删除标记</span><br>    isDelete = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_books&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;图书&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.title  <span class=\"hljs-comment\"># 查询对象时，显示信息</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeroInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">20</span>)<br>    gender = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br>    comment = models.CharField(max_length=<span class=\"hljs-number\">200</span>)<br>    book = models.ForeignKey(<span class=\"hljs-string\">&#x27;BookInfo&#x27;</span>, on_delete=models.CASCADE)<br>    isDelete = models.BooleanField(default=<span class=\"hljs-literal\">False</span>)<br>\t\t<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_heros&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;英雄&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name  <span class=\"hljs-comment\"># 查询对象时，显示信息</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"模型类生成表\"><a href=\"#模型类生成表\" class=\"headerlink\" title=\"模型类生成表\"></a>模型类生成表</h3><ul>\n<li><p>生成迁移文件<code>python manage.py makemigrations</code></p>\n</li>\n<li><p>迁移文件生成表<code>python manage.py migrate</code>,生成表名的默认格式：应用名_模型类名小写,可以指定表名</p>\n</li>\n</ul>\n<h3 id=\"Admin后台管理\"><a href=\"#Admin后台管理\" class=\"headerlink\" title=\"Admin后台管理\"></a>Admin后台管理</h3><p>在应用book下的admin.py中注册模型类。</p>\n<p>告诉djang框架根据注册的模型类来生成对应表管理页面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> book.models <span class=\"hljs-keyword\">import</span> BookInfo<br><span class=\"hljs-keyword\">from</span> book.models <span class=\"hljs-keyword\">import</span> HeroInfo<br><br><span class=\"hljs-comment\"># 后台管理相关文件</span><br><span class=\"hljs-comment\"># Register your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BookInfoAdmin</span>(<span class=\"hljs-params\">admin.ModelAdmin</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;图书模型管理类&quot;&quot;&quot;</span><br>    list_display = [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;book_title&#x27;</span>, <span class=\"hljs-string\">&#x27;book_pub_date&#x27;</span>]<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeroInfoAdmin</span>(<span class=\"hljs-params\">admin.ModelAdmin</span>):</span><br>    list_display = [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_name&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_sex&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_comment&#x27;</span>, <span class=\"hljs-string\">&#x27;hero_book&#x27;</span>]<br><br><span class=\"hljs-comment\"># 注册模型类</span><br>admin.site.register(BookInfo, BookInfoAdmin)<br>admin.site.register(HeroInfo, HeroInfoAdmin)<br></code></pre></td></tr></table></figure>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>在 <code>templates</code>目录下 创建  <code>hero_list.html</code>, 展示所有 英雄信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class=\"hljs-string\">&quot;zh&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;英雄列表&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;table&gt;<br>    &#123;% <span class=\"hljs-keyword\">for</span> hero <span class=\"hljs-keyword\">in</span> heroes %&#125;   <span class=\"hljs-comment\"># 类似python的for循环和if判断</span><br>        &#123;% <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> hero.isDelete %&#125;<br>            &lt;tr&gt;<br>                &lt;td&gt;&#123;&#123; hero.id &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.name &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.gender &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.comment &#125;&#125;&lt;/td&gt;<br>                &lt;td&gt;&#123;&#123; hero.book &#125;&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &#123;% endif %&#125;<br>    &#123;% endfor %&#125;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>在 <code>books</code> APP目录下的 <code>views.py</code>中创建自己的 视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">from</span> books.models <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hero_list_view</span>(<span class=\"hljs-params\">request</span>):</span><br>    heros = HeroInfo.objects.<span class=\"hljs-built_in\">all</span>()  <span class=\"hljs-comment\"># 利用模型类查询全部数据</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;hero_list.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;heros&#x27;</span>: heros&#125;)  <span class=\"hljs-comment\"># 利用render函数渲染模板</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>在 项目同名目录的 <code>urls.py</code>中配置路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> book.views <span class=\"hljs-keyword\">import</span> *<br><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;heroes/&#x27;</span>, hero_list_view)<br>]<br></code></pre></td></tr></table></figure>\n<h2 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h2><ul>\n<li><p>只能通过本地ip访问 : <code>python manage.py runserver</code> </p>\n<p>浏览器输入<code>127.0.0.1:8000</code>访问服务器</p>\n</li>\n<li><p>可以通过网络ip访问 : <code>python manage.py runserver 0.0.0.0:8000</code></p>\n<p>浏览器输入<code>网络ip:8000</code>访问服务器，同时需要搭配 <code>settings.py</code>中的配置参数使用</p>\n</li>\n</ul>\n"},{"title":"Django基础(二)-视图","date":"2021-01-23T14:31:00.000Z","_content":"","source":"_posts/Django-2-视图.md","raw":"---\ntitle: Django基础(二)-视图\ndate: 2021-01-23 22:31:00\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 视图\n---\n","slug":"Django-2-视图","published":1,"updated":"2021-01-23T14:46:18.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubi000djjln8cuihjnp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Django基础(三)-模板","date":"2020-12-09T09:27:02.000Z","_content":"","source":"_posts/Django-3-模板.md","raw":"---\ntitle: Django基础(三)-模板\ndate: 2020-12-09 17:27:02\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 模板\n---\n","slug":"Django-3-模板","published":1,"updated":"2021-01-23T14:46:23.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubj000ejjln1aqaagbn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Django基础(四)-路由","date":"2019-05-25T14:45:46.000Z","_content":"> Django2.0 新增了在 urls.py 中 `app_name` 来指定 namespace。我们之前通过 `reverse` 函数来反向获取 url\n\n## reverse 语法\n\n```python\nreverse(\"<namespace>:<url-name>\", kwargs={\"<kwarg>\": \"<val>\"})\n```\n\n## 流程\n\n### 路由定义\n\n在项目的总路由中，可以通过指定namespace来确定应用\n\n```python\nurlpatterns = [\n    path(r'users/', include(('users.urls', 'userss')))\n]\n```\n\n更进一步,把 namespace 定义到被 include 的  子路由`users/urls.py` 中去使用 app_name 定义名称空间\n\n```python\nfrom django.urls import re_path, path\nfrom users.views import RegisterView, LoginView, DetailView, IndexView\n\napp_name = 'users'\n\nurlpatterns = [\n  path('detail/<int:uid>/', DetailView.as_view(), name=\"detail\"),\n  path(\"\", IndexView, name=\"index\")\n]\n```\n\n### 反向解析\n\n现在我们仍然可以用 reverse 函数和模板中的 url 获取 URL\n\n```python\nreverse(\"users:index\")\nreverse(\"users:detail\", kwargs={\"uid\": 2020})\n{% url \"users:index\" %}\n{% url \"users:detail\" uid=2020 %}\n```\n\n","source":"_posts/Django-4-路由.md","raw":"---\ntitle: Django基础(四)-路由\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - namespace\n  - app_name\n  - reverse\n  - 路由\ndate: 2019-05-25 22:45:46\n---\n> Django2.0 新增了在 urls.py 中 `app_name` 来指定 namespace。我们之前通过 `reverse` 函数来反向获取 url\n\n## reverse 语法\n\n```python\nreverse(\"<namespace>:<url-name>\", kwargs={\"<kwarg>\": \"<val>\"})\n```\n\n## 流程\n\n### 路由定义\n\n在项目的总路由中，可以通过指定namespace来确定应用\n\n```python\nurlpatterns = [\n    path(r'users/', include(('users.urls', 'userss')))\n]\n```\n\n更进一步,把 namespace 定义到被 include 的  子路由`users/urls.py` 中去使用 app_name 定义名称空间\n\n```python\nfrom django.urls import re_path, path\nfrom users.views import RegisterView, LoginView, DetailView, IndexView\n\napp_name = 'users'\n\nurlpatterns = [\n  path('detail/<int:uid>/', DetailView.as_view(), name=\"detail\"),\n  path(\"\", IndexView, name=\"index\")\n]\n```\n\n### 反向解析\n\n现在我们仍然可以用 reverse 函数和模板中的 url 获取 URL\n\n```python\nreverse(\"users:index\")\nreverse(\"users:detail\", kwargs={\"uid\": 2020})\n{% url \"users:index\" %}\n{% url \"users:detail\" uid=2020 %}\n```\n\n","slug":"Django-4-路由","published":1,"updated":"2021-01-23T14:46:33.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubk000hjjln07yn3h2z","content":"<blockquote>\n<p>Django2.0 新增了在 urls.py 中 <code>app_name</code> 来指定 namespace。我们之前通过 <code>reverse</code> 函数来反向获取 url</p>\n</blockquote>\n<h2 id=\"reverse-语法\"><a href=\"#reverse-语法\" class=\"headerlink\" title=\"reverse 语法\"></a>reverse 语法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">reverse(<span class=\"hljs-string\">&quot;&lt;namespace&gt;:&lt;url-name&gt;&quot;</span>, kwargs=&#123;<span class=\"hljs-string\">&quot;&lt;kwarg&gt;&quot;</span>: <span class=\"hljs-string\">&quot;&lt;val&gt;&quot;</span>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"路由定义\"><a href=\"#路由定义\" class=\"headerlink\" title=\"路由定义\"></a>路由定义</h3><p>在项目的总路由中，可以通过指定namespace来确定应用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">urlpatterns = [<br>    path(<span class=\"hljs-string\">r&#x27;users/&#x27;</span>, include((<span class=\"hljs-string\">&#x27;users.urls&#x27;</span>, <span class=\"hljs-string\">&#x27;userss&#x27;</span>)))<br>]<br></code></pre></div></td></tr></table></figure>\n<p>更进一步,把 namespace 定义到被 include 的  子路由<code>users/urls.py</code> 中去使用 app_name 定义名称空间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> re_path, path<br><span class=\"hljs-keyword\">from</span> users.views <span class=\"hljs-keyword\">import</span> RegisterView, LoginView, DetailView, IndexView<br><br>app_name = <span class=\"hljs-string\">&#x27;users&#x27;</span><br><br>urlpatterns = [<br>  path(<span class=\"hljs-string\">&#x27;detail/&lt;int:uid&gt;/&#x27;</span>, DetailView.as_view(), name=<span class=\"hljs-string\">&quot;detail&quot;</span>),<br>  path(<span class=\"hljs-string\">&quot;&quot;</span>, IndexView, name=<span class=\"hljs-string\">&quot;index&quot;</span>)<br>]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"反向解析\"><a href=\"#反向解析\" class=\"headerlink\" title=\"反向解析\"></a>反向解析</h3><p>现在我们仍然可以用 reverse 函数和模板中的 url 获取 URL</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">reverse(<span class=\"hljs-string\">&quot;users:index&quot;</span>)<br>reverse(<span class=\"hljs-string\">&quot;users:detail&quot;</span>, kwargs=&#123;<span class=\"hljs-string\">&quot;uid&quot;</span>: <span class=\"hljs-number\">2020</span>&#125;)<br>&#123;% url <span class=\"hljs-string\">&quot;users:index&quot;</span> %&#125;<br>&#123;% url <span class=\"hljs-string\">&quot;users:detail&quot;</span> uid=<span class=\"hljs-number\">2020</span> %&#125;<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Django2.0 新增了在 urls.py 中 <code>app_name</code> 来指定 namespace。我们之前通过 <code>reverse</code> 函数来反向获取 url</p>\n</blockquote>\n<h2 id=\"reverse-语法\"><a href=\"#reverse-语法\" class=\"headerlink\" title=\"reverse 语法\"></a>reverse 语法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">reverse(<span class=\"hljs-string\">&quot;&lt;namespace&gt;:&lt;url-name&gt;&quot;</span>, kwargs=&#123;<span class=\"hljs-string\">&quot;&lt;kwarg&gt;&quot;</span>: <span class=\"hljs-string\">&quot;&lt;val&gt;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"路由定义\"><a href=\"#路由定义\" class=\"headerlink\" title=\"路由定义\"></a>路由定义</h3><p>在项目的总路由中，可以通过指定namespace来确定应用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">urlpatterns = [<br>    path(<span class=\"hljs-string\">r&#x27;users/&#x27;</span>, include((<span class=\"hljs-string\">&#x27;users.urls&#x27;</span>, <span class=\"hljs-string\">&#x27;userss&#x27;</span>)))<br>]<br></code></pre></td></tr></table></figure>\n<p>更进一步,把 namespace 定义到被 include 的  子路由<code>users/urls.py</code> 中去使用 app_name 定义名称空间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> re_path, path<br><span class=\"hljs-keyword\">from</span> users.views <span class=\"hljs-keyword\">import</span> RegisterView, LoginView, DetailView, IndexView<br><br>app_name = <span class=\"hljs-string\">&#x27;users&#x27;</span><br><br>urlpatterns = [<br>  path(<span class=\"hljs-string\">&#x27;detail/&lt;int:uid&gt;/&#x27;</span>, DetailView.as_view(), name=<span class=\"hljs-string\">&quot;detail&quot;</span>),<br>  path(<span class=\"hljs-string\">&quot;&quot;</span>, IndexView, name=<span class=\"hljs-string\">&quot;index&quot;</span>)<br>]<br></code></pre></td></tr></table></figure>\n<h3 id=\"反向解析\"><a href=\"#反向解析\" class=\"headerlink\" title=\"反向解析\"></a>反向解析</h3><p>现在我们仍然可以用 reverse 函数和模板中的 url 获取 URL</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">reverse(<span class=\"hljs-string\">&quot;users:index&quot;</span>)<br>reverse(<span class=\"hljs-string\">&quot;users:detail&quot;</span>, kwargs=&#123;<span class=\"hljs-string\">&quot;uid&quot;</span>: <span class=\"hljs-number\">2020</span>&#125;)<br>&#123;% url <span class=\"hljs-string\">&quot;users:index&quot;</span> %&#125;<br>&#123;% url <span class=\"hljs-string\">&quot;users:detail&quot;</span> uid=<span class=\"hljs-number\">2020</span> %&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"Django基础(六)-ORM操作","date":"2021-01-23T14:37:39.000Z","_content":"","source":"_posts/Django-6-ORM操作.md","raw":"---\ntitle: Django基础(六)-ORM操作\ndate: 2021-01-23 22:37:39\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - ORM操作\n---\n","slug":"Django-6-ORM操作","published":1,"updated":"2021-01-23T14:46:46.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubl000jjjlnhkwlevry","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Django-中间件","date":"2020-12-09T23:50:31.000Z","_content":"\n# 1 中间件介绍\n\nDjango中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。\n\n中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性。\n\n我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。\n\n> 因为改变的是全局，所以需要谨慎实用，用不好会影响到性能\n\n# 2 中间件作用\n\n如果你想修改请求，例如被传送到*view*中的**`HttpRequest`**对象。 或者你想修改*view*返回的**`HttpResponse`**对象，这些都可以通过中间件来实现。\n\n可能你还想在*view*执行之前做一些操作，这种情况就可以用 `middleware`来实现。\n\n***Django*默认的中间件**：（在*django*项目的*settings*模块中，有一个 `MIDDLEWARE_CLASSES` 变量，其中每一个元素就是一个中间件，如下图）\n\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    # 为request/response提供了几种xss脚本过滤的安全改进，无它不安全\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # 开启session会话支持，无它无session\n    'django.middleware.common.CommonMiddleware',\n    # 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，\n    # 如果APPEND_SLASH设为True，并且初始URL 没有以斜线结尾以及在URLconf 中没找到对应定义，这时形成一个斜线结尾的新URL；\n    # 如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的ur\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # 开启基于Cookie和会话的消息支持，无它无message\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    # 对点击劫持的保护\n]\n\n```\n\n![中间件示意图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/中间件示意图.png)\n\n# 3 自定义中间件\n\n## 3.1 创建中间件\n\n创建中间件有两种方式：\n\n### 3.1.1 闭包函数构建\n\n- 定义一个中间件闭包函数，然后返回一个可以被调用的中间件。\n\n- 中间件闭包函数需要接收一个可以调用的`get_response`对象。\n\n- 返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个`request`对象参数，返回一个`response`对象。\n\n```python\ndef my_middleware(get_response):\n    print('init 被调用')\n\n    def middleware(request):\n        print('before request 被调用')\n        response = get_response(request)\n        print('after response 被调用')\n        return response\n\n    return middleware\n\n```\n\n### 3.1.2 类构建\n\n需要继承 `django.utils.deprecation.MiddlewareMixin`这个类\n\n可以重写的5个方法:\n\n```python\n1、process_request(self,request)\n\n2、process_view(self, request, callback, callback_args, callback_kwargs)\n\n3、process_template_response(self,request,response)\n\n4、process_exception(self, request, exception)\n\n5、process_response(self, request, response)\n```\n\n以上方法的返回值可以是`None`或一个`HttpResponse`对象，如果是`None`，则继续按照*django*定义的规则向后继续执行，如果是`HttpResponse`对象，则直接将该对象返回给用户。\n\n```python\nclass SimMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        print('init=====')\n        self.get_response = get_response\n\n    def process_request(self, request):\n        \"\"\"\n        处理请求前: 在每个请求上，request对象产生之后，url匹配之前调用,返回None或HttpResponse对象\n        \"\"\"\n        print('before request=====', request)\n\n    def process_view(self, request, view_func, *view_args, **view_kwargs):\n        \"\"\"\n        :param view_func: Django即将使用的视图函数,它是实际的函数对象，而不是函数的名称作为字符串\n        :param view_args: 将传递给视图的位置参数的列表\n        :param view_kwargs: 将传递给视图的关键字参数的字典;\n                            view_args和view_kwargs都不包含第一个视图参数（request）\n        \"\"\"\n        # 处理视图前：在每个请求上，url匹配之后，视图函数调用之前调用，返回None或HttpResponse对象\n        print('before view=======')\n\n    def process_template_response(self, request, response):\n        # 在视图函数执行完后立即执行的, 执行 该 函数有一个前提条件，那就是视图函数返回的对象要有一个 render() 方法\n        # （或者表明该对象是一个 TemplateResponse 对象或等价方法）\n        print(\"render template=======\")\n        return response\n\n    def process_exception(self, request, exception):\n        # 这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象\n        print(\"raise exception=======\")\n        return HttpResponse(exception)\n\n    def process_response(self, request, response):\n        # 处理响应后：视图函数调用之后，所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象\n        print('after response=======', response)\n        return response\n```\n\n## 3.2 注册中间件\n\n在*django*项目的*settings*模块中，在 `MIDDLEWARE_CLASSES` 变量中添加自定义中间件\n\n```python\nMIDDLEWARE = [\n  \t...\n\t\t'book.middleware.my_middleware',  # book为应用名,middleware为文件名\n    'book.middleware.SimMiddleware'\n]\n```\n\n## 3.3 中间件效果\n\n> 首先是 项目启动时，中间件的初始化\n\n```\ninit=====\ninit 被调用\n```\n\n### 3.3.1 正常视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        return HttpResponse(\"hello Django\")\n```\n\n> 当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求会依次穿过所有中间件的`process_request`方法,最后到达`views`的函数中，`views`函数处理后，在依次穿过所有中间件的`process_response`方法,最后返回给请求者。\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nafter response======= <HttpResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:29:59] \"GET / HTTP/1.1\" 200 12\n```\n\n### 3.3.2 错误视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        3/0\n        return HttpResponse(\"hello Django\")\n```\n\n> 此时，视图发生异常， 会执行中间件的 `process_exception`方法，而在该方法中，将异常信息作为响应返回，因此，页面显示`\"division by zero\"`\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nraise exception=======\nafter response======= <HttpResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:34:15] \"GET / HTTP/1.1\" 200 16\n```\n\n### 3.3.3 模板视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        return TemplateResponse(request, 'index.html')\n```\n\n> 注意: 只有返回的对象是`TemplateResponse` 对象或等价方法时，才执行中间件的 `process_template_response`方法，直接调用`render`方法无效。\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nrender template=======\nafter response======= <TemplateResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:49:05] \"GET / HTTP/1.1\" 200 149\n```\n\n> `TemplateResponse` **VS** `render`\n>\n> `TemplateResponse`将模板的渲染延迟到视图完成之后。这允许任何模板响应中间件在响应上运行，并有可能在呈现模板之前更改模板或上下文数据。模板响应中间件运行后，将渲染模板，并在将响应返回给客户端之前对渲染的内容运行常规响应中间件。\n>\n> `render()`立即呈现模板，并返回`HttpResponse`。","source":"_posts/Django-中间件.md","raw":"---\ntitle: Django-中间件\ndate: 2020-12-10 07:50:31\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 中间件\n---\n\n# 1 中间件介绍\n\nDjango中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。\n\n中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性。\n\n我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。\n\n> 因为改变的是全局，所以需要谨慎实用，用不好会影响到性能\n\n# 2 中间件作用\n\n如果你想修改请求，例如被传送到*view*中的**`HttpRequest`**对象。 或者你想修改*view*返回的**`HttpResponse`**对象，这些都可以通过中间件来实现。\n\n可能你还想在*view*执行之前做一些操作，这种情况就可以用 `middleware`来实现。\n\n***Django*默认的中间件**：（在*django*项目的*settings*模块中，有一个 `MIDDLEWARE_CLASSES` 变量，其中每一个元素就是一个中间件，如下图）\n\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    # 为request/response提供了几种xss脚本过滤的安全改进，无它不安全\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # 开启session会话支持，无它无session\n    'django.middleware.common.CommonMiddleware',\n    # 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，\n    # 如果APPEND_SLASH设为True，并且初始URL 没有以斜线结尾以及在URLconf 中没找到对应定义，这时形成一个斜线结尾的新URL；\n    # 如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的ur\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # 开启基于Cookie和会话的消息支持，无它无message\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    # 对点击劫持的保护\n]\n\n```\n\n![中间件示意图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/中间件示意图.png)\n\n# 3 自定义中间件\n\n## 3.1 创建中间件\n\n创建中间件有两种方式：\n\n### 3.1.1 闭包函数构建\n\n- 定义一个中间件闭包函数，然后返回一个可以被调用的中间件。\n\n- 中间件闭包函数需要接收一个可以调用的`get_response`对象。\n\n- 返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个`request`对象参数，返回一个`response`对象。\n\n```python\ndef my_middleware(get_response):\n    print('init 被调用')\n\n    def middleware(request):\n        print('before request 被调用')\n        response = get_response(request)\n        print('after response 被调用')\n        return response\n\n    return middleware\n\n```\n\n### 3.1.2 类构建\n\n需要继承 `django.utils.deprecation.MiddlewareMixin`这个类\n\n可以重写的5个方法:\n\n```python\n1、process_request(self,request)\n\n2、process_view(self, request, callback, callback_args, callback_kwargs)\n\n3、process_template_response(self,request,response)\n\n4、process_exception(self, request, exception)\n\n5、process_response(self, request, response)\n```\n\n以上方法的返回值可以是`None`或一个`HttpResponse`对象，如果是`None`，则继续按照*django*定义的规则向后继续执行，如果是`HttpResponse`对象，则直接将该对象返回给用户。\n\n```python\nclass SimMiddleware(MiddlewareMixin):\n    def __init__(self, get_response):\n        print('init=====')\n        self.get_response = get_response\n\n    def process_request(self, request):\n        \"\"\"\n        处理请求前: 在每个请求上，request对象产生之后，url匹配之前调用,返回None或HttpResponse对象\n        \"\"\"\n        print('before request=====', request)\n\n    def process_view(self, request, view_func, *view_args, **view_kwargs):\n        \"\"\"\n        :param view_func: Django即将使用的视图函数,它是实际的函数对象，而不是函数的名称作为字符串\n        :param view_args: 将传递给视图的位置参数的列表\n        :param view_kwargs: 将传递给视图的关键字参数的字典;\n                            view_args和view_kwargs都不包含第一个视图参数（request）\n        \"\"\"\n        # 处理视图前：在每个请求上，url匹配之后，视图函数调用之前调用，返回None或HttpResponse对象\n        print('before view=======')\n\n    def process_template_response(self, request, response):\n        # 在视图函数执行完后立即执行的, 执行 该 函数有一个前提条件，那就是视图函数返回的对象要有一个 render() 方法\n        # （或者表明该对象是一个 TemplateResponse 对象或等价方法）\n        print(\"render template=======\")\n        return response\n\n    def process_exception(self, request, exception):\n        # 这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象\n        print(\"raise exception=======\")\n        return HttpResponse(exception)\n\n    def process_response(self, request, response):\n        # 处理响应后：视图函数调用之后，所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象\n        print('after response=======', response)\n        return response\n```\n\n## 3.2 注册中间件\n\n在*django*项目的*settings*模块中，在 `MIDDLEWARE_CLASSES` 变量中添加自定义中间件\n\n```python\nMIDDLEWARE = [\n  \t...\n\t\t'book.middleware.my_middleware',  # book为应用名,middleware为文件名\n    'book.middleware.SimMiddleware'\n]\n```\n\n## 3.3 中间件效果\n\n> 首先是 项目启动时，中间件的初始化\n\n```\ninit=====\ninit 被调用\n```\n\n### 3.3.1 正常视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        return HttpResponse(\"hello Django\")\n```\n\n> 当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求会依次穿过所有中间件的`process_request`方法,最后到达`views`的函数中，`views`函数处理后，在依次穿过所有中间件的`process_response`方法,最后返回给请求者。\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nafter response======= <HttpResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:29:59] \"GET / HTTP/1.1\" 200 12\n```\n\n### 3.3.2 错误视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        3/0\n        return HttpResponse(\"hello Django\")\n```\n\n> 此时，视图发生异常， 会执行中间件的 `process_exception`方法，而在该方法中，将异常信息作为响应返回，因此，页面显示`\"division by zero\"`\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nraise exception=======\nafter response======= <HttpResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:34:15] \"GET / HTTP/1.1\" 200 16\n```\n\n### 3.3.3 模板视图\n\n```python\nclass Index(View):\n\n    def get(self, request):\n        print(\"Index============\")\n        return TemplateResponse(request, 'index.html')\n```\n\n> 注意: 只有返回的对象是`TemplateResponse` 对象或等价方法时，才执行中间件的 `process_template_response`方法，直接调用`render`方法无效。\n\n```python\nbefore request 被调用\nbefore request===== <WSGIRequest: GET '/'>\nbefore view=======\nIndex============\nrender template=======\nafter response======= <TemplateResponse status_code=200, \"text/html; charset=utf-8\">\nafter response 被调用\n[21/Sep/2020 14:49:05] \"GET / HTTP/1.1\" 200 149\n```\n\n> `TemplateResponse` **VS** `render`\n>\n> `TemplateResponse`将模板的渲染延迟到视图完成之后。这允许任何模板响应中间件在响应上运行，并有可能在呈现模板之前更改模板或上下文数据。模板响应中间件运行后，将渲染模板，并在将响应返回给客户端之前对渲染的内容运行常规响应中间件。\n>\n> `render()`立即呈现模板，并返回`HttpResponse`。","slug":"Django-中间件","published":1,"updated":"2021-01-21T07:03:03.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubo000mjjln3ctz5uce","content":"<h1 id=\"1-中间件介绍\"><a href=\"#1-中间件介绍\" class=\"headerlink\" title=\"1 中间件介绍\"></a>1 中间件介绍</h1><p>Django中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。</p>\n<p>中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性。</p>\n<p>我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。</p>\n<blockquote>\n<p>因为改变的是全局，所以需要谨慎实用，用不好会影响到性能</p>\n</blockquote>\n<h1 id=\"2-中间件作用\"><a href=\"#2-中间件作用\" class=\"headerlink\" title=\"2 中间件作用\"></a>2 中间件作用</h1><p>如果你想修改请求，例如被传送到<em>view</em>中的<strong><code>HttpRequest</code></strong>对象。 或者你想修改<em>view</em>返回的<strong><code>HttpResponse</code></strong>对象，这些都可以通过中间件来实现。</p>\n<p>可能你还想在<em>view</em>执行之前做一些操作，这种情况就可以用 <code>middleware</code>来实现。</p>\n<p><strong><em>Django</em>默认的中间件</strong>：（在<em>django</em>项目的<em>settings</em>模块中，有一个 <code>MIDDLEWARE_CLASSES</code> 变量，其中每一个元素就是一个中间件，如下图）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>    <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 为request/response提供了几种xss脚本过滤的安全改进，无它不安全</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 开启session会话支持，无它无session</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，</span><br>    <span class=\"hljs-comment\"># 如果APPEND_SLASH设为True，并且初始URL 没有以斜线结尾以及在URLconf 中没找到对应定义，这时形成一个斜线结尾的新URL；</span><br>    <span class=\"hljs-comment\"># 如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的ur</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 开启基于Cookie和会话的消息支持，无它无message</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 对点击劫持的保护</span><br>]<br><br></code></pre></div></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"中间件示意图\"></p>\n<h1 id=\"3-自定义中间件\"><a href=\"#3-自定义中间件\" class=\"headerlink\" title=\"3 自定义中间件\"></a>3 自定义中间件</h1><h2 id=\"3-1-创建中间件\"><a href=\"#3-1-创建中间件\" class=\"headerlink\" title=\"3.1 创建中间件\"></a>3.1 创建中间件</h2><p>创建中间件有两种方式：</p>\n<h3 id=\"3-1-1-闭包函数构建\"><a href=\"#3-1-1-闭包函数构建\" class=\"headerlink\" title=\"3.1.1 闭包函数构建\"></a>3.1.1 闭包函数构建</h3><ul>\n<li><p>定义一个中间件闭包函数，然后返回一个可以被调用的中间件。</p>\n</li>\n<li><p>中间件闭包函数需要接收一个可以调用的<code>get_response</code>对象。</p>\n</li>\n<li><p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个<code>request</code>对象参数，返回一个<code>response</code>对象。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">my_middleware</span>(<span class=\"hljs-params\">get_response</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;init 被调用&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">middleware</span>(<span class=\"hljs-params\">request</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;before request 被调用&#x27;</span>)<br>        response = get_response(request)<br>        print(<span class=\"hljs-string\">&#x27;after response 被调用&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br><br>    <span class=\"hljs-keyword\">return</span> middleware<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-1-2-类构建\"><a href=\"#3-1-2-类构建\" class=\"headerlink\" title=\"3.1.2 类构建\"></a>3.1.2 类构建</h3><p>需要继承 <code>django.utils.deprecation.MiddlewareMixin</code>这个类</p>\n<p>可以重写的5个方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>、process_request(self,request)<br><br><span class=\"hljs-number\">2</span>、process_view(self, request, callback, callback_args, callback_kwargs)<br><br><span class=\"hljs-number\">3</span>、process_template_response(self,request,response)<br><br><span class=\"hljs-number\">4</span>、process_exception(self, request, exception)<br><br><span class=\"hljs-number\">5</span>、process_response(self, request, response)<br></code></pre></div></td></tr></table></figure>\n<p>以上方法的返回值可以是<code>None</code>或一个<code>HttpResponse</code>对象，如果是<code>None</code>，则继续按照<em>django</em>定义的规则向后继续执行，如果是<code>HttpResponse</code>对象，则直接将该对象返回给用户。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimMiddleware</span>(<span class=\"hljs-params\">MiddlewareMixin</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, get_response</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;init=====&#x27;</span>)<br>        self.get_response = get_response<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_request</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        处理请求前: 在每个请求上，request对象产生之后，url匹配之前调用,返回None或HttpResponse对象</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        print(<span class=\"hljs-string\">&#x27;before request=====&#x27;</span>, request)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_view</span>(<span class=\"hljs-params\">self, request, view_func, *view_args, **view_kwargs</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        :param view_func: Django即将使用的视图函数,它是实际的函数对象，而不是函数的名称作为字符串</span><br><span class=\"hljs-string\">        :param view_args: 将传递给视图的位置参数的列表</span><br><span class=\"hljs-string\">        :param view_kwargs: 将传递给视图的关键字参数的字典;</span><br><span class=\"hljs-string\">                            view_args和view_kwargs都不包含第一个视图参数（request）</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-comment\"># 处理视图前：在每个请求上，url匹配之后，视图函数调用之前调用，返回None或HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&#x27;before view=======&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_template_response</span>(<span class=\"hljs-params\">self, request, response</span>):</span><br>        <span class=\"hljs-comment\"># 在视图函数执行完后立即执行的, 执行 该 函数有一个前提条件，那就是视图函数返回的对象要有一个 render() 方法</span><br>        <span class=\"hljs-comment\"># （或者表明该对象是一个 TemplateResponse 对象或等价方法）</span><br>        print(<span class=\"hljs-string\">&quot;render template=======&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_exception</span>(<span class=\"hljs-params\">self, request, exception</span>):</span><br>        <span class=\"hljs-comment\"># 这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&quot;raise exception=======&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(exception)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_response</span>(<span class=\"hljs-params\">self, request, response</span>):</span><br>        <span class=\"hljs-comment\"># 处理响应后：视图函数调用之后，所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&#x27;after response=======&#x27;</span>, response)<br>        <span class=\"hljs-keyword\">return</span> response<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"3-2-注册中间件\"><a href=\"#3-2-注册中间件\" class=\"headerlink\" title=\"3.2 注册中间件\"></a>3.2 注册中间件</h2><p>在<em>django</em>项目的<em>settings</em>模块中，在 <code>MIDDLEWARE_CLASSES</code> 变量中添加自定义中间件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>  \t...<br>\t\t<span class=\"hljs-string\">&#x27;book.middleware.my_middleware&#x27;</span>,  <span class=\"hljs-comment\"># book为应用名,middleware为文件名</span><br>    <span class=\"hljs-string\">&#x27;book.middleware.SimMiddleware&#x27;</span><br>]<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"3-3-中间件效果\"><a href=\"#3-3-中间件效果\" class=\"headerlink\" title=\"3.3 中间件效果\"></a>3.3 中间件效果</h2><blockquote>\n<p>首先是 项目启动时，中间件的初始化</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">init</span>=====<br><span class=\"hljs-keyword\">init</span> 被调用<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-3-1-正常视图\"><a href=\"#3-3-1-正常视图\" class=\"headerlink\" title=\"3.3.1 正常视图\"></a>3.3.1 正常视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;hello Django&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求会依次穿过所有中间件的<code>process_request</code>方法,最后到达<code>views</code>的函数中，<code>views</code>函数处理后，在依次穿过所有中间件的<code>process_response</code>方法,最后返回给请求者。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br>after response======= &lt;HttpResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">29</span>:<span class=\"hljs-number\">59</span>] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">12</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-3-2-错误视图\"><a href=\"#3-3-2-错误视图\" class=\"headerlink\" title=\"3.3.2 错误视图\"></a>3.3.2 错误视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;hello Django&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>此时，视图发生异常， 会执行中间件的 <code>process_exception</code>方法，而在该方法中，将异常信息作为响应返回，因此，页面显示<code>&quot;division by zero&quot;</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br><span class=\"hljs-keyword\">raise</span> exception=======<br>after response======= &lt;HttpResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">15</span>] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">16</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-3-3-模板视图\"><a href=\"#3-3-3-模板视图\" class=\"headerlink\" title=\"3.3.3 模板视图\"></a>3.3.3 模板视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> TemplateResponse(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意: 只有返回的对象是<code>TemplateResponse</code> 对象或等价方法时，才执行中间件的 <code>process_template_response</code>方法，直接调用<code>render</code>方法无效。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br>render template=======<br>after response======= &lt;TemplateResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">49</span>:05] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">149</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><code>TemplateResponse</code> <strong>VS</strong> <code>render</code></p>\n<p><code>TemplateResponse</code>将模板的渲染延迟到视图完成之后。这允许任何模板响应中间件在响应上运行，并有可能在呈现模板之前更改模板或上下文数据。模板响应中间件运行后，将渲染模板，并在将响应返回给客户端之前对渲染的内容运行常规响应中间件。</p>\n<p><code>render()</code>立即呈现模板，并返回<code>HttpResponse</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-中间件介绍\"><a href=\"#1-中间件介绍\" class=\"headerlink\" title=\"1 中间件介绍\"></a>1 中间件介绍</h1><p>Django中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。</p>\n<p>中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性。</p>\n<p>我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。</p>\n<blockquote>\n<p>因为改变的是全局，所以需要谨慎实用，用不好会影响到性能</p>\n</blockquote>\n<h1 id=\"2-中间件作用\"><a href=\"#2-中间件作用\" class=\"headerlink\" title=\"2 中间件作用\"></a>2 中间件作用</h1><p>如果你想修改请求，例如被传送到<em>view</em>中的<strong><code>HttpRequest</code></strong>对象。 或者你想修改<em>view</em>返回的<strong><code>HttpResponse</code></strong>对象，这些都可以通过中间件来实现。</p>\n<p>可能你还想在<em>view</em>执行之前做一些操作，这种情况就可以用 <code>middleware</code>来实现。</p>\n<p><strong><em>Django</em>默认的中间件</strong>：（在<em>django</em>项目的<em>settings</em>模块中，有一个 <code>MIDDLEWARE_CLASSES</code> 变量，其中每一个元素就是一个中间件，如下图）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>    <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 为request/response提供了几种xss脚本过滤的安全改进，无它不安全</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 开启session会话支持，无它无session</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，</span><br>    <span class=\"hljs-comment\"># 如果APPEND_SLASH设为True，并且初始URL 没有以斜线结尾以及在URLconf 中没找到对应定义，这时形成一个斜线结尾的新URL；</span><br>    <span class=\"hljs-comment\"># 如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的ur</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 开启基于Cookie和会话的消息支持，无它无message</span><br>    <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># 对点击劫持的保护</span><br>]<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"中间件示意图\"></p>\n<h1 id=\"3-自定义中间件\"><a href=\"#3-自定义中间件\" class=\"headerlink\" title=\"3 自定义中间件\"></a>3 自定义中间件</h1><h2 id=\"3-1-创建中间件\"><a href=\"#3-1-创建中间件\" class=\"headerlink\" title=\"3.1 创建中间件\"></a>3.1 创建中间件</h2><p>创建中间件有两种方式：</p>\n<h3 id=\"3-1-1-闭包函数构建\"><a href=\"#3-1-1-闭包函数构建\" class=\"headerlink\" title=\"3.1.1 闭包函数构建\"></a>3.1.1 闭包函数构建</h3><ul>\n<li><p>定义一个中间件闭包函数，然后返回一个可以被调用的中间件。</p>\n</li>\n<li><p>中间件闭包函数需要接收一个可以调用的<code>get_response</code>对象。</p>\n</li>\n<li><p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个<code>request</code>对象参数，返回一个<code>response</code>对象。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">my_middleware</span>(<span class=\"hljs-params\">get_response</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;init 被调用&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">middleware</span>(<span class=\"hljs-params\">request</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;before request 被调用&#x27;</span>)<br>        response = get_response(request)<br>        print(<span class=\"hljs-string\">&#x27;after response 被调用&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br><br>    <span class=\"hljs-keyword\">return</span> middleware<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-类构建\"><a href=\"#3-1-2-类构建\" class=\"headerlink\" title=\"3.1.2 类构建\"></a>3.1.2 类构建</h3><p>需要继承 <code>django.utils.deprecation.MiddlewareMixin</code>这个类</p>\n<p>可以重写的5个方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1</span>、process_request(self,request)<br><br><span class=\"hljs-number\">2</span>、process_view(self, request, callback, callback_args, callback_kwargs)<br><br><span class=\"hljs-number\">3</span>、process_template_response(self,request,response)<br><br><span class=\"hljs-number\">4</span>、process_exception(self, request, exception)<br><br><span class=\"hljs-number\">5</span>、process_response(self, request, response)<br></code></pre></td></tr></table></figure>\n<p>以上方法的返回值可以是<code>None</code>或一个<code>HttpResponse</code>对象，如果是<code>None</code>，则继续按照<em>django</em>定义的规则向后继续执行，如果是<code>HttpResponse</code>对象，则直接将该对象返回给用户。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimMiddleware</span>(<span class=\"hljs-params\">MiddlewareMixin</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, get_response</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;init=====&#x27;</span>)<br>        self.get_response = get_response<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_request</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        处理请求前: 在每个请求上，request对象产生之后，url匹配之前调用,返回None或HttpResponse对象</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        print(<span class=\"hljs-string\">&#x27;before request=====&#x27;</span>, request)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_view</span>(<span class=\"hljs-params\">self, request, view_func, *view_args, **view_kwargs</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        :param view_func: Django即将使用的视图函数,它是实际的函数对象，而不是函数的名称作为字符串</span><br><span class=\"hljs-string\">        :param view_args: 将传递给视图的位置参数的列表</span><br><span class=\"hljs-string\">        :param view_kwargs: 将传递给视图的关键字参数的字典;</span><br><span class=\"hljs-string\">                            view_args和view_kwargs都不包含第一个视图参数（request）</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-comment\"># 处理视图前：在每个请求上，url匹配之后，视图函数调用之前调用，返回None或HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&#x27;before view=======&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_template_response</span>(<span class=\"hljs-params\">self, request, response</span>):</span><br>        <span class=\"hljs-comment\"># 在视图函数执行完后立即执行的, 执行 该 函数有一个前提条件，那就是视图函数返回的对象要有一个 render() 方法</span><br>        <span class=\"hljs-comment\"># （或者表明该对象是一个 TemplateResponse 对象或等价方法）</span><br>        print(<span class=\"hljs-string\">&quot;render template=======&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_exception</span>(<span class=\"hljs-params\">self, request, exception</span>):</span><br>        <span class=\"hljs-comment\"># 这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&quot;raise exception=======&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(exception)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_response</span>(<span class=\"hljs-params\">self, request, response</span>):</span><br>        <span class=\"hljs-comment\"># 处理响应后：视图函数调用之后，所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象</span><br>        print(<span class=\"hljs-string\">&#x27;after response=======&#x27;</span>, response)<br>        <span class=\"hljs-keyword\">return</span> response<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-2-注册中间件\"><a href=\"#3-2-注册中间件\" class=\"headerlink\" title=\"3.2 注册中间件\"></a>3.2 注册中间件</h2><p>在<em>django</em>项目的<em>settings</em>模块中，在 <code>MIDDLEWARE_CLASSES</code> 变量中添加自定义中间件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br>  \t...<br>\t\t<span class=\"hljs-string\">&#x27;book.middleware.my_middleware&#x27;</span>,  <span class=\"hljs-comment\"># book为应用名,middleware为文件名</span><br>    <span class=\"hljs-string\">&#x27;book.middleware.SimMiddleware&#x27;</span><br>]<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-3-中间件效果\"><a href=\"#3-3-中间件效果\" class=\"headerlink\" title=\"3.3 中间件效果\"></a>3.3 中间件效果</h2><blockquote>\n<p>首先是 项目启动时，中间件的初始化</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">init</span>=====<br><span class=\"hljs-keyword\">init</span> 被调用<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-3-1-正常视图\"><a href=\"#3-3-1-正常视图\" class=\"headerlink\" title=\"3.3.1 正常视图\"></a>3.3.1 正常视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;hello Django&quot;</span>)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求会依次穿过所有中间件的<code>process_request</code>方法,最后到达<code>views</code>的函数中，<code>views</code>函数处理后，在依次穿过所有中间件的<code>process_response</code>方法,最后返回给请求者。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br>after response======= &lt;HttpResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">29</span>:<span class=\"hljs-number\">59</span>] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">12</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-错误视图\"><a href=\"#3-3-2-错误视图\" class=\"headerlink\" title=\"3.3.2 错误视图\"></a>3.3.2 错误视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;hello Django&quot;</span>)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>此时，视图发生异常， 会执行中间件的 <code>process_exception</code>方法，而在该方法中，将异常信息作为响应返回，因此，页面显示<code>&quot;division by zero&quot;</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br><span class=\"hljs-keyword\">raise</span> exception=======<br>after response======= &lt;HttpResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">34</span>:<span class=\"hljs-number\">15</span>] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">16</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-模板视图\"><a href=\"#3-3-3-模板视图\" class=\"headerlink\" title=\"3.3.3 模板视图\"></a>3.3.3 模板视图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Index</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Index============&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> TemplateResponse(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 只有返回的对象是<code>TemplateResponse</code> 对象或等价方法时，才执行中间件的 <code>process_template_response</code>方法，直接调用<code>render</code>方法无效。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">before request 被调用<br>before request===== &lt;WSGIRequest: GET <span class=\"hljs-string\">&#x27;/&#x27;</span>&gt;<br>before view=======<br>Index============<br>render template=======<br>after response======= &lt;TemplateResponse status_code=<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>after response 被调用<br>[<span class=\"hljs-number\">21</span>/Sep/<span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">49</span>:05] <span class=\"hljs-string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">149</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>TemplateResponse</code> <strong>VS</strong> <code>render</code></p>\n<p><code>TemplateResponse</code>将模板的渲染延迟到视图完成之后。这允许任何模板响应中间件在响应上运行，并有可能在呈现模板之前更改模板或上下文数据。模板响应中间件运行后，将渲染模板，并在将响应返回给客户端之前对渲染的内容运行常规响应中间件。</p>\n<p><code>render()</code>立即呈现模板，并返回<code>HttpResponse</code>。</p>\n</blockquote>\n"},{"title":"Django-图片上传","date":"2020-03-16T12:23:16.000Z","_content":"\n## 图片上传\n\nstatic 和 media 都是存放文件的地方，但是又有区别，以下是两个文件夹的区别和用法\n\n### static\n\n#### 定义\n\nstatic 是静态文件，主要存的是 CSS, JavaScript, 网站 logo 等不变的文件。\n\n#### 配置\n\n配置 `settings.py`\n\n```python\nSTATIC_URL = '/static/'  # 静态文件别名（相对路径） 和 绝对路径\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'app01/static'),\n]\n# STATIC_ROOT 配置部署的时候才用\n```\n\n#### 使用\n\n在项目中将模板层用到的静态文件都放入该文件夹中\n\n### media\n\n#### 定义\n\nmedia 主要用来保存用户上传的文件，例如图片等\n\n#### 配置\n\n配置 `settings.py`\n\n```python\nMEDIA_URL = \"/media/\"   # 媒体文件别名(相对路径) 和 绝对路径\nMEDIA_ROOT = [\n    os.path.join(BASE_DIR, 'app01/media')\n]\n```\n\n配置路由\n\n- 在子应用正常配置路由\n\n    ```python\n    from django.urls import path\n    from app01.views import *\n    app_name = 'goods'\n    \n    urlpatterns = [\n        path('goods/', GoodsCreateView.as_view(), name='create'),\n        path('', IndexView.as_view(), name='index'),\n    ]\n    ```\n\n- 在项目的主路由中对图片上传的路径信息进行配置\n\n    ```python\n    from django.conf.urls.static import static\n    from django.contrib import admin\n    from django.urls import path, include\n    from django01 import settings\n    \n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('', include('app01.urls')),\n    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    # 对外展示图片的地址信息\n    ```\n\n\n\n### 模型类\n\n- 定义包含图片字段的模型类\n  \n  ```python\n  class Goods(models.Model):\n      name = models.CharField(max_length=20, verbose_name=\"名称\")\n      price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name=\"单价\")\n      nums = models.IntegerField(verbose_name=\"数量\")\n      img = models.ImageField(upload_to='img', verbose_name=\"图片\")\n  \n      class Meta:\n          db_table = \"tb_goods\"\n          verbose_name = \"商品\"\n          verbose_name_plural = verbose_name\n  \n      def __str__(self):\n          return self.name\n  ```\n\n\n### 模板\n\n#### 添加页面\n\n```html\n<form action=\"{% url 'goods:create' %}\" method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    名称:<input type=\"text\" name=\"name\"> <br>\n    价格:<input type=\"text\" name=\"price\"> <br>\n    数量:<input type=\"text\" name=\"nums\"> <br>\n    图片:<input type=\"file\" name=\"img\"> <br>\n\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n#### 展示页面\n\n```html\n<table>\n    {% for good in goods %}\n        <tr>\n            <td>{{ good.id }}</td>\n            <td>{{ good.name }}</td>\n            <td>{{ good.price }}</td>\n            <td>{{ good.nums }}</td>\n            <td>\n                <img src=\"/media/{{ good.img }}\" alt=\"\" style=\"width: 300px;height: 200px\">\n            </td>\n        </tr>\n    {% endfor %}\n</table>\n```\n\n### 视图\n\n#### 添加商品\n\n```python\nfrom django.shortcuts import render, redirect\nfrom django.views import View\nfrom app01.models import Goods\n\n\n# Create your views here.\nclass GoodsCreateView(View):\n    def get(self, request):\n        return render(request, 'goods.html')\n\n    def post(self, request):\n        name = request.POST.get('name')\n        price = request.POST.get('price')\n        nums = request.POST.get('nums')\n        img = request.FILES.get('img')\n\n        if not all([name, price, nums, img]):\n            return redirect('goods:create')\n\n        try:\n            Goods.objects.create(name=name, price=price, nums=nums, img=img)\n        except Exception as e:\n            print(e)\n            return redirect('goods:create')\n        return redirect('goods:index')\n```\n\n#### 展示商品\n\n```python\nclass IndexView(View):\n    def get(self, request):\n        goods = Goods.objects.all()\n\n        return render(request, 'index.html', context={'goods': goods})\n```\n\n","source":"_posts/Django-图片上传.md","raw":"---\ntitle: Django-图片上传\ndate: 2020-03-16 20:23:16\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 图片上传\n  - 模板\n---\n\n## 图片上传\n\nstatic 和 media 都是存放文件的地方，但是又有区别，以下是两个文件夹的区别和用法\n\n### static\n\n#### 定义\n\nstatic 是静态文件，主要存的是 CSS, JavaScript, 网站 logo 等不变的文件。\n\n#### 配置\n\n配置 `settings.py`\n\n```python\nSTATIC_URL = '/static/'  # 静态文件别名（相对路径） 和 绝对路径\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'app01/static'),\n]\n# STATIC_ROOT 配置部署的时候才用\n```\n\n#### 使用\n\n在项目中将模板层用到的静态文件都放入该文件夹中\n\n### media\n\n#### 定义\n\nmedia 主要用来保存用户上传的文件，例如图片等\n\n#### 配置\n\n配置 `settings.py`\n\n```python\nMEDIA_URL = \"/media/\"   # 媒体文件别名(相对路径) 和 绝对路径\nMEDIA_ROOT = [\n    os.path.join(BASE_DIR, 'app01/media')\n]\n```\n\n配置路由\n\n- 在子应用正常配置路由\n\n    ```python\n    from django.urls import path\n    from app01.views import *\n    app_name = 'goods'\n    \n    urlpatterns = [\n        path('goods/', GoodsCreateView.as_view(), name='create'),\n        path('', IndexView.as_view(), name='index'),\n    ]\n    ```\n\n- 在项目的主路由中对图片上传的路径信息进行配置\n\n    ```python\n    from django.conf.urls.static import static\n    from django.contrib import admin\n    from django.urls import path, include\n    from django01 import settings\n    \n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('', include('app01.urls')),\n    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    # 对外展示图片的地址信息\n    ```\n\n\n\n### 模型类\n\n- 定义包含图片字段的模型类\n  \n  ```python\n  class Goods(models.Model):\n      name = models.CharField(max_length=20, verbose_name=\"名称\")\n      price = models.DecimalField(max_digits=7, decimal_places=2, verbose_name=\"单价\")\n      nums = models.IntegerField(verbose_name=\"数量\")\n      img = models.ImageField(upload_to='img', verbose_name=\"图片\")\n  \n      class Meta:\n          db_table = \"tb_goods\"\n          verbose_name = \"商品\"\n          verbose_name_plural = verbose_name\n  \n      def __str__(self):\n          return self.name\n  ```\n\n\n### 模板\n\n#### 添加页面\n\n```html\n<form action=\"{% url 'goods:create' %}\" method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    名称:<input type=\"text\" name=\"name\"> <br>\n    价格:<input type=\"text\" name=\"price\"> <br>\n    数量:<input type=\"text\" name=\"nums\"> <br>\n    图片:<input type=\"file\" name=\"img\"> <br>\n\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n#### 展示页面\n\n```html\n<table>\n    {% for good in goods %}\n        <tr>\n            <td>{{ good.id }}</td>\n            <td>{{ good.name }}</td>\n            <td>{{ good.price }}</td>\n            <td>{{ good.nums }}</td>\n            <td>\n                <img src=\"/media/{{ good.img }}\" alt=\"\" style=\"width: 300px;height: 200px\">\n            </td>\n        </tr>\n    {% endfor %}\n</table>\n```\n\n### 视图\n\n#### 添加商品\n\n```python\nfrom django.shortcuts import render, redirect\nfrom django.views import View\nfrom app01.models import Goods\n\n\n# Create your views here.\nclass GoodsCreateView(View):\n    def get(self, request):\n        return render(request, 'goods.html')\n\n    def post(self, request):\n        name = request.POST.get('name')\n        price = request.POST.get('price')\n        nums = request.POST.get('nums')\n        img = request.FILES.get('img')\n\n        if not all([name, price, nums, img]):\n            return redirect('goods:create')\n\n        try:\n            Goods.objects.create(name=name, price=price, nums=nums, img=img)\n        except Exception as e:\n            print(e)\n            return redirect('goods:create')\n        return redirect('goods:index')\n```\n\n#### 展示商品\n\n```python\nclass IndexView(View):\n    def get(self, request):\n        goods = Goods.objects.all()\n\n        return render(request, 'index.html', context={'goods': goods})\n```\n\n","slug":"Django-图片上传","published":1,"updated":"2021-01-23T14:45:27.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubq000ojjlnbsnjeysq","content":"<h2 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h2><p>static 和 media 都是存放文件的地方，但是又有区别，以下是两个文件夹的区别和用法</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>static 是静态文件，主要存的是 CSS, JavaScript, 网站 logo 等不变的文件。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>配置 <code>settings.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">STATIC_URL = <span class=\"hljs-string\">&#x27;/static/&#x27;</span>  <span class=\"hljs-comment\"># 静态文件别名（相对路径） 和 绝对路径</span><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;app01/static&#x27;</span>),<br>]<br><span class=\"hljs-comment\"># STATIC_ROOT 配置部署的时候才用</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>在项目中将模板层用到的静态文件都放入该文件夹中</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"media\"></a>media</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>media 主要用来保存用户上传的文件，例如图片等</p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>配置 <code>settings.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">MEDIA_URL = <span class=\"hljs-string\">&quot;/media/&quot;</span>   <span class=\"hljs-comment\"># 媒体文件别名(相对路径) 和 绝对路径</span><br>MEDIA_ROOT = [<br>    os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;app01/media&#x27;</span>)<br>]<br></code></pre></div></td></tr></table></figure>\n<p>配置路由</p>\n<ul>\n<li><p>在子应用正常配置路由</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> app01.views <span class=\"hljs-keyword\">import</span> *<br>app_name = <span class=\"hljs-string\">&#x27;goods&#x27;</span><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;goods/&#x27;</span>, GoodsCreateView.as_view(), name=<span class=\"hljs-string\">&#x27;create&#x27;</span>),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&#x27;index&#x27;</span>),<br>]<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在项目的主路由中对图片上传的路径信息进行配置</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.conf.urls.static <span class=\"hljs-keyword\">import</span> static<br><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path, include<br><span class=\"hljs-keyword\">from</span> django01 <span class=\"hljs-keyword\">import</span> settings<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, include(<span class=\"hljs-string\">&#x27;app01.urls&#x27;</span>)),<br>] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)<br><span class=\"hljs-comment\"># 对外展示图片的地址信息</span><br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><ul>\n<li><p>定义包含图片字段的模型类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Goods</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&quot;名称&quot;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&quot;单价&quot;</span>)<br>    nums = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;数量&quot;</span>)<br>    img = models.ImageField(upload_to=<span class=\"hljs-string\">&#x27;img&#x27;</span>, verbose_name=<span class=\"hljs-string\">&quot;图片&quot;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&quot;tb_goods&quot;</span><br>        verbose_name = <span class=\"hljs-string\">&quot;商品&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><h4 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:create&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    名称:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    价格:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;price&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    数量:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;nums&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    图片:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示页面\"><a href=\"#展示页面\" class=\"headerlink\" title=\"展示页面\"></a>展示页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    &#123;% for good in goods %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 300px;height: 200px&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><h4 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, redirect<br><span class=\"hljs-keyword\">from</span> django.views <span class=\"hljs-keyword\">import</span> View<br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Goods<br><br><br><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GoodsCreateView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;goods.html&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        name = request.POST.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>)<br>        price = request.POST.get(<span class=\"hljs-string\">&#x27;price&#x27;</span>)<br>        nums = request.POST.get(<span class=\"hljs-string\">&#x27;nums&#x27;</span>)<br>        img = request.FILES.get(<span class=\"hljs-string\">&#x27;img&#x27;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([name, price, nums, img]):<br>            <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:create&#x27;</span>)<br><br>        <span class=\"hljs-keyword\">try</span>:<br>            Goods.objects.create(name=name, price=price, nums=nums, img=img)<br>        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>            print(e)<br>            <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:create&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:index&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示商品\"><a href=\"#展示商品\" class=\"headerlink\" title=\"展示商品\"></a>展示商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        goods = Goods.objects.<span class=\"hljs-built_in\">all</span>()<br><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;goods&#x27;</span>: goods&#125;)<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h2><p>static 和 media 都是存放文件的地方，但是又有区别，以下是两个文件夹的区别和用法</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>static 是静态文件，主要存的是 CSS, JavaScript, 网站 logo 等不变的文件。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>配置 <code>settings.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">STATIC_URL = <span class=\"hljs-string\">&#x27;/static/&#x27;</span>  <span class=\"hljs-comment\"># 静态文件别名（相对路径） 和 绝对路径</span><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;app01/static&#x27;</span>),<br>]<br><span class=\"hljs-comment\"># STATIC_ROOT 配置部署的时候才用</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>在项目中将模板层用到的静态文件都放入该文件夹中</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"media\"></a>media</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>media 主要用来保存用户上传的文件，例如图片等</p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>配置 <code>settings.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">MEDIA_URL = <span class=\"hljs-string\">&quot;/media/&quot;</span>   <span class=\"hljs-comment\"># 媒体文件别名(相对路径) 和 绝对路径</span><br>MEDIA_ROOT = [<br>    os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;app01/media&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure>\n<p>配置路由</p>\n<ul>\n<li><p>在子应用正常配置路由</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> app01.views <span class=\"hljs-keyword\">import</span> *<br>app_name = <span class=\"hljs-string\">&#x27;goods&#x27;</span><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;goods/&#x27;</span>, GoodsCreateView.as_view(), name=<span class=\"hljs-string\">&#x27;create&#x27;</span>),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&#x27;index&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure></li>\n<li><p>在项目的主路由中对图片上传的路径信息进行配置</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.conf.urls.static <span class=\"hljs-keyword\">import</span> static<br><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path, include<br><span class=\"hljs-keyword\">from</span> django01 <span class=\"hljs-keyword\">import</span> settings<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, include(<span class=\"hljs-string\">&#x27;app01.urls&#x27;</span>)),<br>] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)<br><span class=\"hljs-comment\"># 对外展示图片的地址信息</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><ul>\n<li><p>定义包含图片字段的模型类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Goods</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">20</span>, verbose_name=<span class=\"hljs-string\">&quot;名称&quot;</span>)<br>    price = models.DecimalField(max_digits=<span class=\"hljs-number\">7</span>, decimal_places=<span class=\"hljs-number\">2</span>, verbose_name=<span class=\"hljs-string\">&quot;单价&quot;</span>)<br>    nums = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;数量&quot;</span>)<br>    img = models.ImageField(upload_to=<span class=\"hljs-string\">&#x27;img&#x27;</span>, verbose_name=<span class=\"hljs-string\">&quot;图片&quot;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&quot;tb_goods&quot;</span><br>        verbose_name = <span class=\"hljs-string\">&quot;商品&quot;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.name<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><h4 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:create&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">&quot;multipart/form-data&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    名称:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    价格:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;price&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    数量:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;nums&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    图片:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"展示页面\"><a href=\"#展示页面\" class=\"headerlink\" title=\"展示页面\"></a>展示页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    &#123;% for good in goods %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 300px;height: 200px&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><h4 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, redirect<br><span class=\"hljs-keyword\">from</span> django.views <span class=\"hljs-keyword\">import</span> View<br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Goods<br><br><br><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GoodsCreateView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;goods.html&#x27;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        name = request.POST.get(<span class=\"hljs-string\">&#x27;name&#x27;</span>)<br>        price = request.POST.get(<span class=\"hljs-string\">&#x27;price&#x27;</span>)<br>        nums = request.POST.get(<span class=\"hljs-string\">&#x27;nums&#x27;</span>)<br>        img = request.FILES.get(<span class=\"hljs-string\">&#x27;img&#x27;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([name, price, nums, img]):<br>            <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:create&#x27;</span>)<br><br>        <span class=\"hljs-keyword\">try</span>:<br>            Goods.objects.create(name=name, price=price, nums=nums, img=img)<br>        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>            print(e)<br>            <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:create&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&#x27;goods:index&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"展示商品\"><a href=\"#展示商品\" class=\"headerlink\" title=\"展示商品\"></a>展示商品</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        goods = Goods.objects.<span class=\"hljs-built_in\">all</span>()<br><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;goods&#x27;</span>: goods&#125;)<br></code></pre></td></tr></table></figure>\n"},{"title":"Django-数据分页","date":"2020-11-30T13:45:42.000Z","_content":"\n当页面因需要展示的数据条目过多，导致无法在一个页面全部显示。这时，页面经常会采用分页形式进行展示，然后每页显示 20 或者 50 等条数据。分页经常在网站上随处可见，\n\n分页的实现不仅提高了用户体验，还是减轻数据库读取数据的压力。Django 自带名为 Paginator 的分页工具， 方便我们实现分页功能。本文就讲解如何使用 Paginator 实现分页功能。\n\n# Paginator\n\nPaginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是**一个列表、元组、以及查询结果集 QuerySet**。第二个参数**需要传入一个整数，表示每页显示数据条数**。具体用法如下：\n\n### 导入分页模块\n\n```python\nfrom django.core.paginator import Paginator\n```\n\n### 获取queryset对象\n\n```python\ngoods_list = Goods.objects.all().order_by('id')\n```\n\n### 实例化分页类对象\n\n```python\npaginator = Paginator(goods_list, 2)\n```\n\n#### Paginator类对象的属性\n\n| 序号 | 属性名     | 说明                 |\n| ---- | ---------- | -------------------- |\n| 1    | num_pages  | 返回分页之后的总页数 |\n| 2    | page_range | 返回分页后的页码列表 |\n\n#### Paginator类对象的方法\n\n| 序号 | 方法名                 | 说明                           |\n| ---- | ---------------------- | ------------------------------ |\n| 1    | get_page(self, number) | 返回第number页的page类实例对象 |\n\n#### Page实例对象的属性\n\n| 序号 | 属性名      | 说明                          |\n| ---- | ----------- | ----------------------------- |\n| 1    | number      | 返回当前页的页码              |\n| 2    | object_list | 返回当前页的数据查询集        |\n| 3    | paginator   | 返回对应的**Paginator**类对象 |\n\n#### page实例对象的方法\n\n| 序号 | 方法名               | 说明                   |\n| ---- | -------------------- | ---------------------- |\n| 1    | has_previous         | 判断当前页是否有前一页 |\n| 2    | has_next             | 判断当前页是否有下一页 |\n| 3    | previous_page_number | 返回前一页的页码       |\n| 4    | next_page_number     | 返回下一页的页码       |\n\n## 分页功能实现\n\n### views函数\n\n```python\nclass IndexView(View):\n    def get(self, request):\n        page_number = request.GET.get('page', 1)  # 获取客户端发送的页码，默认为1\n        page_size = request.GET.get('page_size', 2)  # 获取客户端发送的每页数量，默认为1\n        try:\n            page_number = int(page_number)  # 处理页码， 过滤无效的数据\n        except:\n            page_number = 1\n\n        goods_list = Goods.objects.all().order_by('id')\n\n        paginator = Paginator(goods_list, page_size)  # 得到分页器对象\n        page = paginator.get_page(page_number)  # 得到当前页码对象\n\n        # 获取页码列表\n        index = page.number - 1  # 当前页码对应的索引\n        max_index = paginator.num_pages - 1  # 最大索引\n        # 为了得到显示7个页码的列表，从当前索引向前数3个，向后数3个，加上本身，即7个页码\n        start_index = index - 3 if index >= 3 else 0\n        end_index = index + 3 if index <= max_index - 3 else max_index\n        # 最后处理过的页码列表\n        page_range = paginator.page_range[start_index:end_index + 1]\n        return render(request, 'index.html', context={'goods': page, 'page_range': page_range})\n\n```\n\n### 模板实现\n\n```html\n<!-- 引入bootstrap样式文件 -->\n<link rel=\"stylesheet\" href=\"{% static 'css/bootstrap.min.css' %}\">\n\n<!--数据遍历展示-->\n<table class=\"table\">\n    <thead class=\"thead-light\">\n    <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">名称</th>\n        <th scope=\"col\">单价</th>\n        <th scope=\"col\">数量</th>\n        <th scope=\"col\">图片</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for good in goods.object_list %}\n        <tr>\n            <th>{{ good.id }}</th>\n            <td>{{ good.name }}</td>\n            <td>{{ good.price }}</td>\n            <td>{{ good.nums }}</td>\n            <td>\n                <img src=\"/media/{{ good.img }}\" alt=\"\" style=\"width: 100px;height: 130px\">\n            </td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n\n<!--底部分页按钮-->\n<nav aria-label=\"Page navigation example\" style=\"margin: 0 auto\">\n    <ul class=\"pagination\">\n        <li class=\"page-item\">\n            {% if goods.has_previous %}\n                <a href=\"{% url 'goods:index' %}?page={{ goods.previous_page_number }}\" class=\"page-link\"\n                   aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">&laquo;</span>\n                </a>\n            {% else %}\n                <a href=\"#\" class=\"page-link\" aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">&laquo;</span>\n                </a>\n            {% endif %}\n        </li>\n\n        {% for page in page_range %}\n            <li class=\"page-item\">\n                {% ifequal page goods.number %}\n                    <a href=\"#\" class=\"page-link\">{{ page }}</a>\n                {% else %}\n                    <a href=\"{% url 'goods:index' %}?page={{ page }}\" class=\"page-link\">{{ page }}</a>\n                {% endifequal %}\n            </li>\n        {% endfor %}\n\n        <li class=\"page-item\">\n            {% if goods.has_next %}\n                <a href=\"{% url 'goods:index' %}?page={{ goods.next_page_number }}\" class=\"page-link\" aria-label=\"Next\">\n                    <span aria-hidden=\"true\">&raquo;</span>\n                </a>\n            {% else %}\n                <a href=\"#\" class=\"page-link\" aria-label=\"Next\">\n                    <span aria-hidden=\"true\">&raquo;</span>\n                </a>\n            {% endif %}\n        </li>\n    </ul>\n</nav>\n```\n\n#### 路由配置\n\n```python\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),  # /?page=1&page_size=2\n]\n```\n\n","source":"_posts/Django-数据分页.md","raw":"---\ntitle: Django-数据分页\ndate: 2020-11-30 21:45:42\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 分页\n  - 模板\n---\n\n当页面因需要展示的数据条目过多，导致无法在一个页面全部显示。这时，页面经常会采用分页形式进行展示，然后每页显示 20 或者 50 等条数据。分页经常在网站上随处可见，\n\n分页的实现不仅提高了用户体验，还是减轻数据库读取数据的压力。Django 自带名为 Paginator 的分页工具， 方便我们实现分页功能。本文就讲解如何使用 Paginator 实现分页功能。\n\n# Paginator\n\nPaginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是**一个列表、元组、以及查询结果集 QuerySet**。第二个参数**需要传入一个整数，表示每页显示数据条数**。具体用法如下：\n\n### 导入分页模块\n\n```python\nfrom django.core.paginator import Paginator\n```\n\n### 获取queryset对象\n\n```python\ngoods_list = Goods.objects.all().order_by('id')\n```\n\n### 实例化分页类对象\n\n```python\npaginator = Paginator(goods_list, 2)\n```\n\n#### Paginator类对象的属性\n\n| 序号 | 属性名     | 说明                 |\n| ---- | ---------- | -------------------- |\n| 1    | num_pages  | 返回分页之后的总页数 |\n| 2    | page_range | 返回分页后的页码列表 |\n\n#### Paginator类对象的方法\n\n| 序号 | 方法名                 | 说明                           |\n| ---- | ---------------------- | ------------------------------ |\n| 1    | get_page(self, number) | 返回第number页的page类实例对象 |\n\n#### Page实例对象的属性\n\n| 序号 | 属性名      | 说明                          |\n| ---- | ----------- | ----------------------------- |\n| 1    | number      | 返回当前页的页码              |\n| 2    | object_list | 返回当前页的数据查询集        |\n| 3    | paginator   | 返回对应的**Paginator**类对象 |\n\n#### page实例对象的方法\n\n| 序号 | 方法名               | 说明                   |\n| ---- | -------------------- | ---------------------- |\n| 1    | has_previous         | 判断当前页是否有前一页 |\n| 2    | has_next             | 判断当前页是否有下一页 |\n| 3    | previous_page_number | 返回前一页的页码       |\n| 4    | next_page_number     | 返回下一页的页码       |\n\n## 分页功能实现\n\n### views函数\n\n```python\nclass IndexView(View):\n    def get(self, request):\n        page_number = request.GET.get('page', 1)  # 获取客户端发送的页码，默认为1\n        page_size = request.GET.get('page_size', 2)  # 获取客户端发送的每页数量，默认为1\n        try:\n            page_number = int(page_number)  # 处理页码， 过滤无效的数据\n        except:\n            page_number = 1\n\n        goods_list = Goods.objects.all().order_by('id')\n\n        paginator = Paginator(goods_list, page_size)  # 得到分页器对象\n        page = paginator.get_page(page_number)  # 得到当前页码对象\n\n        # 获取页码列表\n        index = page.number - 1  # 当前页码对应的索引\n        max_index = paginator.num_pages - 1  # 最大索引\n        # 为了得到显示7个页码的列表，从当前索引向前数3个，向后数3个，加上本身，即7个页码\n        start_index = index - 3 if index >= 3 else 0\n        end_index = index + 3 if index <= max_index - 3 else max_index\n        # 最后处理过的页码列表\n        page_range = paginator.page_range[start_index:end_index + 1]\n        return render(request, 'index.html', context={'goods': page, 'page_range': page_range})\n\n```\n\n### 模板实现\n\n```html\n<!-- 引入bootstrap样式文件 -->\n<link rel=\"stylesheet\" href=\"{% static 'css/bootstrap.min.css' %}\">\n\n<!--数据遍历展示-->\n<table class=\"table\">\n    <thead class=\"thead-light\">\n    <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">名称</th>\n        <th scope=\"col\">单价</th>\n        <th scope=\"col\">数量</th>\n        <th scope=\"col\">图片</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for good in goods.object_list %}\n        <tr>\n            <th>{{ good.id }}</th>\n            <td>{{ good.name }}</td>\n            <td>{{ good.price }}</td>\n            <td>{{ good.nums }}</td>\n            <td>\n                <img src=\"/media/{{ good.img }}\" alt=\"\" style=\"width: 100px;height: 130px\">\n            </td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n\n<!--底部分页按钮-->\n<nav aria-label=\"Page navigation example\" style=\"margin: 0 auto\">\n    <ul class=\"pagination\">\n        <li class=\"page-item\">\n            {% if goods.has_previous %}\n                <a href=\"{% url 'goods:index' %}?page={{ goods.previous_page_number }}\" class=\"page-link\"\n                   aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">&laquo;</span>\n                </a>\n            {% else %}\n                <a href=\"#\" class=\"page-link\" aria-label=\"Previous\">\n                    <span aria-hidden=\"true\">&laquo;</span>\n                </a>\n            {% endif %}\n        </li>\n\n        {% for page in page_range %}\n            <li class=\"page-item\">\n                {% ifequal page goods.number %}\n                    <a href=\"#\" class=\"page-link\">{{ page }}</a>\n                {% else %}\n                    <a href=\"{% url 'goods:index' %}?page={{ page }}\" class=\"page-link\">{{ page }}</a>\n                {% endifequal %}\n            </li>\n        {% endfor %}\n\n        <li class=\"page-item\">\n            {% if goods.has_next %}\n                <a href=\"{% url 'goods:index' %}?page={{ goods.next_page_number }}\" class=\"page-link\" aria-label=\"Next\">\n                    <span aria-hidden=\"true\">&raquo;</span>\n                </a>\n            {% else %}\n                <a href=\"#\" class=\"page-link\" aria-label=\"Next\">\n                    <span aria-hidden=\"true\">&raquo;</span>\n                </a>\n            {% endif %}\n        </li>\n    </ul>\n</nav>\n```\n\n#### 路由配置\n\n```python\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),  # /?page=1&page_size=2\n]\n```\n\n","slug":"Django-数据分页","published":1,"updated":"2021-01-23T14:45:15.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubs000rjjlnd80363eq","content":"<p>当页面因需要展示的数据条目过多，导致无法在一个页面全部显示。这时，页面经常会采用分页形式进行展示，然后每页显示 20 或者 50 等条数据。分页经常在网站上随处可见，</p>\n<p>分页的实现不仅提高了用户体验，还是减轻数据库读取数据的压力。Django 自带名为 Paginator 的分页工具， 方便我们实现分页功能。本文就讲解如何使用 Paginator 实现分页功能。</p>\n<h1 id=\"Paginator\"><a href=\"#Paginator\" class=\"headerlink\" title=\"Paginator\"></a>Paginator</h1><p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>\n<h3 id=\"导入分页模块\"><a href=\"#导入分页模块\" class=\"headerlink\" title=\"导入分页模块\"></a>导入分页模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.paginator <span class=\"hljs-keyword\">import</span> Paginator<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"获取queryset对象\"><a href=\"#获取queryset对象\" class=\"headerlink\" title=\"获取queryset对象\"></a>获取queryset对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"实例化分页类对象\"><a href=\"#实例化分页类对象\" class=\"headerlink\" title=\"实例化分页类对象\"></a>实例化分页类对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">paginator = Paginator(goods_list, <span class=\"hljs-number\">2</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"Paginator类对象的属性\"><a href=\"#Paginator类对象的属性\" class=\"headerlink\" title=\"Paginator类对象的属性\"></a>Paginator类对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>num_pages</td>\n<td>返回分页之后的总页数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>page_range</td>\n<td>返回分页后的页码列表</td>\n</tr>\n</tbody></table>\n<h4 id=\"Paginator类对象的方法\"><a href=\"#Paginator类对象的方法\" class=\"headerlink\" title=\"Paginator类对象的方法\"></a>Paginator类对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>get_page(self, number)</td>\n<td>返回第number页的page类实例对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"Page实例对象的属性\"><a href=\"#Page实例对象的属性\" class=\"headerlink\" title=\"Page实例对象的属性\"></a>Page实例对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>number</td>\n<td>返回当前页的页码</td>\n</tr>\n<tr>\n<td>2</td>\n<td>object_list</td>\n<td>返回当前页的数据查询集</td>\n</tr>\n<tr>\n<td>3</td>\n<td>paginator</td>\n<td>返回对应的<strong>Paginator</strong>类对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"page实例对象的方法\"><a href=\"#page实例对象的方法\" class=\"headerlink\" title=\"page实例对象的方法\"></a>page实例对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>has_previous</td>\n<td>判断当前页是否有前一页</td>\n</tr>\n<tr>\n<td>2</td>\n<td>has_next</td>\n<td>判断当前页是否有下一页</td>\n</tr>\n<tr>\n<td>3</td>\n<td>previous_page_number</td>\n<td>返回前一页的页码</td>\n</tr>\n<tr>\n<td>4</td>\n<td>next_page_number</td>\n<td>返回下一页的页码</td>\n</tr>\n</tbody></table>\n<h2 id=\"分页功能实现\"><a href=\"#分页功能实现\" class=\"headerlink\" title=\"分页功能实现\"></a>分页功能实现</h2><h3 id=\"views函数\"><a href=\"#views函数\" class=\"headerlink\" title=\"views函数\"></a>views函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        page_number = request.GET.get(<span class=\"hljs-string\">&#x27;page&#x27;</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 获取客户端发送的页码，默认为1</span><br>        page_size = request.GET.get(<span class=\"hljs-string\">&#x27;page_size&#x27;</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 获取客户端发送的每页数量，默认为1</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            page_number = <span class=\"hljs-built_in\">int</span>(page_number)  <span class=\"hljs-comment\"># 处理页码， 过滤无效的数据</span><br>        <span class=\"hljs-keyword\">except</span>:<br>            page_number = <span class=\"hljs-number\">1</span><br><br>        goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br><br>        paginator = Paginator(goods_list, page_size)  <span class=\"hljs-comment\"># 得到分页器对象</span><br>        page = paginator.get_page(page_number)  <span class=\"hljs-comment\"># 得到当前页码对象</span><br><br>        <span class=\"hljs-comment\"># 获取页码列表</span><br>        index = page.number - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 当前页码对应的索引</span><br>        max_index = paginator.num_pages - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 最大索引</span><br>        <span class=\"hljs-comment\"># 为了得到显示7个页码的列表，从当前索引向前数3个，向后数3个，加上本身，即7个页码</span><br>        start_index = index - <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">if</span> index &gt;= <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span><br>        end_index = index + <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">if</span> index &lt;= max_index - <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">else</span> max_index<br>        <span class=\"hljs-comment\"># 最后处理过的页码列表</span><br>        page_range = paginator.page_range[start_index:end_index + <span class=\"hljs-number\">1</span>]<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;goods&#x27;</span>: page, <span class=\"hljs-string\">&#x27;page_range&#x27;</span>: page_range&#125;)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"模板实现\"><a href=\"#模板实现\" class=\"headerlink\" title=\"模板实现\"></a>模板实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 引入bootstrap样式文件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--数据遍历展示--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;thead-light&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>#<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>单价<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>数量<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>图片<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    &#123;% for good in goods.object_list %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 100px;height: 130px&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--底部分页按钮--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Page navigation example&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin: 0 auto&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;pagination&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>            &#123;% if goods.has_previous %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.previous_page_number &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span></span><br><span class=\"hljs-tag\">                   <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Previous&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;laquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Previous&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;laquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% endif %&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><br>        &#123;% for page in page_range %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>                &#123;% ifequal page goods.number %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                &#123;% else %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; page &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                &#123;% endifequal %&#125;<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>            &#123;% if goods.has_next %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.next_page_number &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Next&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;raquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Next&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;raquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% endif %&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&#x27;index&#x27;</span>),  <span class=\"hljs-comment\"># /?page=1&amp;page_size=2</span><br>]<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>当页面因需要展示的数据条目过多，导致无法在一个页面全部显示。这时，页面经常会采用分页形式进行展示，然后每页显示 20 或者 50 等条数据。分页经常在网站上随处可见，</p>\n<p>分页的实现不仅提高了用户体验，还是减轻数据库读取数据的压力。Django 自带名为 Paginator 的分页工具， 方便我们实现分页功能。本文就讲解如何使用 Paginator 实现分页功能。</p>\n<h1 id=\"Paginator\"><a href=\"#Paginator\" class=\"headerlink\" title=\"Paginator\"></a>Paginator</h1><p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>\n<h3 id=\"导入分页模块\"><a href=\"#导入分页模块\" class=\"headerlink\" title=\"导入分页模块\"></a>导入分页模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.paginator <span class=\"hljs-keyword\">import</span> Paginator<br></code></pre></td></tr></table></figure>\n<h3 id=\"获取queryset对象\"><a href=\"#获取queryset对象\" class=\"headerlink\" title=\"获取queryset对象\"></a>获取queryset对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"实例化分页类对象\"><a href=\"#实例化分页类对象\" class=\"headerlink\" title=\"实例化分页类对象\"></a>实例化分页类对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">paginator = Paginator(goods_list, <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"Paginator类对象的属性\"><a href=\"#Paginator类对象的属性\" class=\"headerlink\" title=\"Paginator类对象的属性\"></a>Paginator类对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>num_pages</td>\n<td>返回分页之后的总页数</td>\n</tr>\n<tr>\n<td>2</td>\n<td>page_range</td>\n<td>返回分页后的页码列表</td>\n</tr>\n</tbody></table>\n<h4 id=\"Paginator类对象的方法\"><a href=\"#Paginator类对象的方法\" class=\"headerlink\" title=\"Paginator类对象的方法\"></a>Paginator类对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>get_page(self, number)</td>\n<td>返回第number页的page类实例对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"Page实例对象的属性\"><a href=\"#Page实例对象的属性\" class=\"headerlink\" title=\"Page实例对象的属性\"></a>Page实例对象的属性</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>number</td>\n<td>返回当前页的页码</td>\n</tr>\n<tr>\n<td>2</td>\n<td>object_list</td>\n<td>返回当前页的数据查询集</td>\n</tr>\n<tr>\n<td>3</td>\n<td>paginator</td>\n<td>返回对应的<strong>Paginator</strong>类对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"page实例对象的方法\"><a href=\"#page实例对象的方法\" class=\"headerlink\" title=\"page实例对象的方法\"></a>page实例对象的方法</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>has_previous</td>\n<td>判断当前页是否有前一页</td>\n</tr>\n<tr>\n<td>2</td>\n<td>has_next</td>\n<td>判断当前页是否有下一页</td>\n</tr>\n<tr>\n<td>3</td>\n<td>previous_page_number</td>\n<td>返回前一页的页码</td>\n</tr>\n<tr>\n<td>4</td>\n<td>next_page_number</td>\n<td>返回下一页的页码</td>\n</tr>\n</tbody></table>\n<h2 id=\"分页功能实现\"><a href=\"#分页功能实现\" class=\"headerlink\" title=\"分页功能实现\"></a>分页功能实现</h2><h3 id=\"views函数\"><a href=\"#views函数\" class=\"headerlink\" title=\"views函数\"></a>views函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        page_number = request.GET.get(<span class=\"hljs-string\">&#x27;page&#x27;</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 获取客户端发送的页码，默认为1</span><br>        page_size = request.GET.get(<span class=\"hljs-string\">&#x27;page_size&#x27;</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 获取客户端发送的每页数量，默认为1</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            page_number = <span class=\"hljs-built_in\">int</span>(page_number)  <span class=\"hljs-comment\"># 处理页码， 过滤无效的数据</span><br>        <span class=\"hljs-keyword\">except</span>:<br>            page_number = <span class=\"hljs-number\">1</span><br><br>        goods_list = Goods.objects.<span class=\"hljs-built_in\">all</span>().order_by(<span class=\"hljs-string\">&#x27;id&#x27;</span>)<br><br>        paginator = Paginator(goods_list, page_size)  <span class=\"hljs-comment\"># 得到分页器对象</span><br>        page = paginator.get_page(page_number)  <span class=\"hljs-comment\"># 得到当前页码对象</span><br><br>        <span class=\"hljs-comment\"># 获取页码列表</span><br>        index = page.number - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 当前页码对应的索引</span><br>        max_index = paginator.num_pages - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 最大索引</span><br>        <span class=\"hljs-comment\"># 为了得到显示7个页码的列表，从当前索引向前数3个，向后数3个，加上本身，即7个页码</span><br>        start_index = index - <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">if</span> index &gt;= <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span><br>        end_index = index + <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">if</span> index &lt;= max_index - <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">else</span> max_index<br>        <span class=\"hljs-comment\"># 最后处理过的页码列表</span><br>        page_range = paginator.page_range[start_index:end_index + <span class=\"hljs-number\">1</span>]<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>, context=&#123;<span class=\"hljs-string\">&#x27;goods&#x27;</span>: page, <span class=\"hljs-string\">&#x27;page_range&#x27;</span>: page_range&#125;)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"模板实现\"><a href=\"#模板实现\" class=\"headerlink\" title=\"模板实现\"></a>模板实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 引入bootstrap样式文件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--数据遍历展示--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;thead-light&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>#<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>单价<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>数量<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>图片<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    &#123;% for good in goods.object_list %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 100px;height: 130px&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--底部分页按钮--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Page navigation example&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin: 0 auto&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;pagination&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>            &#123;% if goods.has_previous %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.previous_page_number &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span></span><br><span class=\"hljs-tag\">                   <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Previous&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;laquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Previous&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;laquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% endif %&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><br>        &#123;% for page in page_range %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>                &#123;% ifequal page goods.number %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                &#123;% else %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; page &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                &#123;% endifequal %&#125;<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-item&quot;</span>&gt;</span><br>            &#123;% if goods.has_next %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.next_page_number &#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Next&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;raquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-link&quot;</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Next&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-symbol\">&amp;raquo;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            &#123;% endif %&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&#x27;index&#x27;</span>),  <span class=\"hljs-comment\"># /?page=1&amp;page_size=2</span><br>]<br></code></pre></td></tr></table></figure>\n"},{"title":"Django-用户认证","date":"2020-03-10T13:34:46.000Z","_content":"## 项目框架\n\n1. 项目结构\n\n    ```bash\n    .\n    ├── users\n    │    ├── __init__.py\n    │    ├── admin.py\n    │    ├── apps.py\n    │    ├── migrations\n    │    │   └── __init__.py\n    │    ├── models.py\n    │    ├── tests.py\n    │    ├── urls.py\n    │    └── views.py\n    ├── db.sqlite3\n    ├── manage.py\n    ├── django_demo\n    │    ├── __init__.py\n    │    ├── settings.py\n    │    ├── urls.py\n    │    └── wsgi.py\n    └── templates\n        ├── base.html\n        ├── index.html\n        ├── login.html\n        ├── register.html\n        └── user.html\n\n    ```\n\n## 准备工作\n\n### 创建项目\n\n通过终端命令,创建项目\n\n```bash\ndjango_admin startproject django_demo\n```\n\n### 生成应用\n\n通过终端命令,生成users应用\n\n```bash\n# 此时在项目文件夹之下执行命令\npython manage.py startapp users\n```\n\n### 修改配置信息\n\n在`settings.py`修改配置\n\n```python\n# 注册app\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'users.apps.UsersConfig' # 注册users应用\n]\n\n# 配置模板路径\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\n\n### 创建模板\n\n在项目根路径下,创建`templates`,在目录下创建`base.html`文件,以便后面复用\n\n```html\n{% block nav %}\n    <p>\n        <a href=\"{% url 'users:index' %}\">Index</a>\n\n        {% if user.is_authenticated %}\n            Hello, <a href=\"{% url 'users:user' %}\">{{ user.username }} </a> .\n            <a href=\"{% url 'users:logout' %}\">log out</a>\n        {% else %}\n            <a href=\"{% url 'users:register' %}\">register</a>\n            <a href=\"{% url 'users:login' %}\">log in</a>\n        {% endif %}\n    </p>\n{% endblock %}\n\n{% block err %}\n    {% if account_msg %}\n        <p>{{account_msg}}. Please try again.</p>\n    {% endif %}\n\n{% endblock %}\n\n{% block body %}\n\n{% endblock %}\n```\n\n### 指定用户模型类\n\n1. 在`users/models.py`中创建模型类\n\n    ```python\n    from django.db import models\n    from django.contrib.auth.models import AbstractUser\n    \n    # Create your models here.\n    class UserProfile(AbstractUser):\n        phone = models.CharField(max_length=11, unique=True, verbose_name=\"手机号\")\n    \n        class Meta:\n            db_table = 'tb_users'  # 指定表名\n            verbose_name = '用户'  # 后台显示表名\n            verbose_name_plural = verbose_name\n    \n        def __str__(self):\n            return self.username\n    ```\n\n2. 在`settings.py`文件中,指定本项目用户模型类\n    Django用户模型类是通过全局配置项 AUTH_USER_MODEL 决定的\n\n    ```python\n    # 配置规则：AUTH_USER_MODEL = '应用名.模型类名'\n    AUTH_USER_MODEL = 'users.UserProfile'\n    ```\n\n3. 通过终端命令,生成迁移文件和迁移表\n\n    ```bash\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n\n## 逻辑实现\n\n### 实现注册逻辑\n\n#### 定义视图\n\n```python\nfrom django.contrib.auth.hashers import make_password\nfrom django.contrib.auth import login\n\nfrom django.views import View\nfrom django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponseForbidden\nfrom .models import UserProfile\n  \nclass RegisterView(View):\n\n  def get(self, request):\n      return render(request, 'register.html')\n\n  def post(self, request):\n      username = request.POST.get(\"username\")\n      password = request.POST.get(\"password\")\n      password2 = request.POST.get(\"password2\")\n      phone = request.POST.get(\"phone\")\n\n      if not all([username, password, password2, phone]):\n          return JsonResponse(\"缺少必要参数\")\n\n      if password != password2:\n          return HttpResponseForbidden(\"密码不一致\")\n\n      # 此时 手动加密密码\n      # hash_password = make_password(password)\n      # try:\n      #   user = UserProfile(username=username, password=hash_password, phone=phone)\n      #   user.save()\n      # except Exception as e:\n      #     return HttpResponseForbidden(\"创建失败\")\n\n      try:\n          # Django认证系统用户模型类提供的 create_user() 方法创建新的用户。\n          # create_user() 方法中封装了 set_password() 方法加密密码\n          user = UserProfile.objects.create_user(username=username, password=password, phone=phone)\n      except Exception as e:\n          return HttpResponseForbidden(\"创建失败\")\n\n      # 状态保持\n      login(request, user)\n\n      return JsonResponse({\"msg\": \"ok\", \"code\": 200})\n```\n\n#### 实现模板\n\n```html\n{% extends \"base.html\" %}\n\n{% block body %}\n    <form action=\"{% url 'users:register' %}\" method=\"post\">\n        用户名:<input type=\"text\" name=\"username\">\n        密码:<input type=\"password\" name=\"password\">\n        确认密码:<input type=\"password\" name=\"password2\">\n        手机号: <input type=\"phone\" name=\"phone\">\n        <input type=\"submit\" value=\"提交\">\n    </form>\n{% endblock %}\n```\n\n### 实现登录逻辑\n\n#### 定义视图\n\n```python\nclass LoginView(View):\n    def get(self, request):\n\n        # 判断用户是否登录(属性) user.is_authenticated\n        if request.user.is_authenticated:\n            return redirect(reverse('users:index'))\n\n        return render(request, \"login.html\")\n\n    def post(self, request):\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n        remembered = request.POST.get(\"remembered\")\n\n        if not all([username, password]):\n            # return JsonResponse({\"account_msg\": \"缺少必要参数\", \"code\": 403})\n            return render(request, 'login.html', {'account_msg': '缺少必要参数', \"code\": 403})\n\n        # 校验用户信息，成功返回user对象，否则为None\n        user = authenticate(username=username, password=password)\n\n        if user is None:\n            return render(request, 'login.html', {'account_msg': '用户名或密码错误', \"code\": 403})\n\n        # 实现状态保持\n        login(request, user)\n\n        # 设置状态保持的周期\n        if remembered != 'on':\n            # 没有记住用户：浏览器会话结束就过期\n            request.session.set_expiry(0)\n        else:\n            # 记住用户：None表示两周后过期\n            request.session.set_expiry(None)\n\n        # 响应登录结果\n        return redirect(reverse('users:index'))\n```\n\n#### 实现模板\n\n```html\n{% extends \"base.html\" %}\n\n{% block body %}\n\n\n    <form method=\"post\" action=\"{% url 'users:login' %}\">\n        {% csrf_token %}\n        用户名:<input type=\"text\" name=\"username\">\n        密码:<input type=\"password\" name=\"password\">\n        <button name=\"submit\">login</button>\n        <input type=\"hidden\" name=\"next\" value=\"{% url 'users:index' %}\"/>\n    </form>\n\n{% endblock %}\n```\n\n### 注销\n\n#### 定义视图\n\n```python\nclass LogoutView(View):\n\n    def get(self, request):\n        \"\"\"实现退出登录逻辑\"\"\"\n        # 清理session\n        logout(request)\n\n        # 退出登录，重定向到首页\n        response = redirect(reverse('users:index'))\n\n        # 退出登录时清除cookie中的username\n        response.delete_cookie('username')\n        return response\n```\n\n### 用户信息\n\n#### 定义视图\n\n```python\nclass UserView(View):\n\n    def get(self, requset):\n        # 如果用户没有登陆就访问本应登陆才能访问的页面时会直接跳转到登陆页面\n        if requset.user.is_authenticated:\n            return render(requset, 'user.html')\n        else:\n            return redirect(reverse('users:login'))\n\n    def post(self, request):\n        old_password = request.POST.get(\"old_password\")\n        new_password = request.POST.get(\"new_password\")\n        conf_password = request.POST.get(\"conf_password\")\n\n        if not all([old_password, new_password, conf_password]):\n            return render(request, 'user.html', {'account_msg': '缺少必要参数', \"code\": 403})\n\n        if new_password != conf_password:\n            return render(request, 'user.html', {'account_msg': '密码不一致', \"code\": 403})\n\n        # 校验密码  check_password()\n        if not request.user.check_password(old_password):\n            return render(request, 'user.html', {'account_msg': '密码不正确', \"code\": 403})\n\n        user = request.user\n\n        # 修改密码\n        user.set_password(new_password)\n        # user.password = make_password(new_password)\n\n        # 保存修改\n        user.save()\n\n        # 状态保持\n        login(request, user)\n\n        return redirect(reverse('users:index'))\n\n```\n\n#### 实现模板\n\n```html\n{% extends 'base.html' %}\n\n{% block body %}\n\n    <form action=\"{% url 'users:user' %}\" method=\"post\">\n        旧密码: <input type=\"password\" name=\"old_password\">\n        新密码: <input type=\"password\" name=\"new_password\">\n        确认密码: <input type=\"password\" name=\"conf_password\">\n        <button name=\"submit\">确认修改</button>\n        <input type=\"hidden\" name=\"next\" value=\"{% url 'users:index' %}\"/>\n    </form>\n\n{% endblock %}\n```\n\n### 首页\n\n#### 定义视图\n\n```python\nclass IndexView(View):\n\ndef get(self, request):\n    return render(request, 'index.html')\n```\n\n#### 实现模板\n\n```html\n{% extends 'base.html' %}\n\n{% block body %}\n    <h1>欢迎来到首页</h1>\n{% endblock %}\n```\n\n## 配置路由\n\n`django_demo\\urls.py`中配置总路由\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path,include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('users/', include(\"users.urls\",\"users\"))\n]\n```\n\n`users\\urls.py`中配置子路由\n\n```python\nfrom django.urls import path\nfrom .views import RegisterView, LoginView, IndexView, LogoutView, UserView\n\napp_name = \"users\"\n\nurlpatterns = [\n    path('register/', RegisterView.as_view(), name=\"register\"),\n    path('login/', LoginView.as_view(), name=\"login\"),\n    path('logout/', LogoutView.as_view(), name=\"logout\"),\n    path(\"user/\", UserView.as_view(), name='user'),\n    path('', IndexView.as_view(), name=\"index\")\n]\n```","source":"_posts/Django-用户认证系统.md","raw":"---\ntitle: Django-用户认证\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - auth\n  - 模板\ndate: 2020-03-10 21:34:46\n---\n## 项目框架\n\n1. 项目结构\n\n    ```bash\n    .\n    ├── users\n    │    ├── __init__.py\n    │    ├── admin.py\n    │    ├── apps.py\n    │    ├── migrations\n    │    │   └── __init__.py\n    │    ├── models.py\n    │    ├── tests.py\n    │    ├── urls.py\n    │    └── views.py\n    ├── db.sqlite3\n    ├── manage.py\n    ├── django_demo\n    │    ├── __init__.py\n    │    ├── settings.py\n    │    ├── urls.py\n    │    └── wsgi.py\n    └── templates\n        ├── base.html\n        ├── index.html\n        ├── login.html\n        ├── register.html\n        └── user.html\n\n    ```\n\n## 准备工作\n\n### 创建项目\n\n通过终端命令,创建项目\n\n```bash\ndjango_admin startproject django_demo\n```\n\n### 生成应用\n\n通过终端命令,生成users应用\n\n```bash\n# 此时在项目文件夹之下执行命令\npython manage.py startapp users\n```\n\n### 修改配置信息\n\n在`settings.py`修改配置\n\n```python\n# 注册app\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'users.apps.UsersConfig' # 注册users应用\n]\n\n# 配置模板路径\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\n\n### 创建模板\n\n在项目根路径下,创建`templates`,在目录下创建`base.html`文件,以便后面复用\n\n```html\n{% block nav %}\n    <p>\n        <a href=\"{% url 'users:index' %}\">Index</a>\n\n        {% if user.is_authenticated %}\n            Hello, <a href=\"{% url 'users:user' %}\">{{ user.username }} </a> .\n            <a href=\"{% url 'users:logout' %}\">log out</a>\n        {% else %}\n            <a href=\"{% url 'users:register' %}\">register</a>\n            <a href=\"{% url 'users:login' %}\">log in</a>\n        {% endif %}\n    </p>\n{% endblock %}\n\n{% block err %}\n    {% if account_msg %}\n        <p>{{account_msg}}. Please try again.</p>\n    {% endif %}\n\n{% endblock %}\n\n{% block body %}\n\n{% endblock %}\n```\n\n### 指定用户模型类\n\n1. 在`users/models.py`中创建模型类\n\n    ```python\n    from django.db import models\n    from django.contrib.auth.models import AbstractUser\n    \n    # Create your models here.\n    class UserProfile(AbstractUser):\n        phone = models.CharField(max_length=11, unique=True, verbose_name=\"手机号\")\n    \n        class Meta:\n            db_table = 'tb_users'  # 指定表名\n            verbose_name = '用户'  # 后台显示表名\n            verbose_name_plural = verbose_name\n    \n        def __str__(self):\n            return self.username\n    ```\n\n2. 在`settings.py`文件中,指定本项目用户模型类\n    Django用户模型类是通过全局配置项 AUTH_USER_MODEL 决定的\n\n    ```python\n    # 配置规则：AUTH_USER_MODEL = '应用名.模型类名'\n    AUTH_USER_MODEL = 'users.UserProfile'\n    ```\n\n3. 通过终端命令,生成迁移文件和迁移表\n\n    ```bash\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n\n## 逻辑实现\n\n### 实现注册逻辑\n\n#### 定义视图\n\n```python\nfrom django.contrib.auth.hashers import make_password\nfrom django.contrib.auth import login\n\nfrom django.views import View\nfrom django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponseForbidden\nfrom .models import UserProfile\n  \nclass RegisterView(View):\n\n  def get(self, request):\n      return render(request, 'register.html')\n\n  def post(self, request):\n      username = request.POST.get(\"username\")\n      password = request.POST.get(\"password\")\n      password2 = request.POST.get(\"password2\")\n      phone = request.POST.get(\"phone\")\n\n      if not all([username, password, password2, phone]):\n          return JsonResponse(\"缺少必要参数\")\n\n      if password != password2:\n          return HttpResponseForbidden(\"密码不一致\")\n\n      # 此时 手动加密密码\n      # hash_password = make_password(password)\n      # try:\n      #   user = UserProfile(username=username, password=hash_password, phone=phone)\n      #   user.save()\n      # except Exception as e:\n      #     return HttpResponseForbidden(\"创建失败\")\n\n      try:\n          # Django认证系统用户模型类提供的 create_user() 方法创建新的用户。\n          # create_user() 方法中封装了 set_password() 方法加密密码\n          user = UserProfile.objects.create_user(username=username, password=password, phone=phone)\n      except Exception as e:\n          return HttpResponseForbidden(\"创建失败\")\n\n      # 状态保持\n      login(request, user)\n\n      return JsonResponse({\"msg\": \"ok\", \"code\": 200})\n```\n\n#### 实现模板\n\n```html\n{% extends \"base.html\" %}\n\n{% block body %}\n    <form action=\"{% url 'users:register' %}\" method=\"post\">\n        用户名:<input type=\"text\" name=\"username\">\n        密码:<input type=\"password\" name=\"password\">\n        确认密码:<input type=\"password\" name=\"password2\">\n        手机号: <input type=\"phone\" name=\"phone\">\n        <input type=\"submit\" value=\"提交\">\n    </form>\n{% endblock %}\n```\n\n### 实现登录逻辑\n\n#### 定义视图\n\n```python\nclass LoginView(View):\n    def get(self, request):\n\n        # 判断用户是否登录(属性) user.is_authenticated\n        if request.user.is_authenticated:\n            return redirect(reverse('users:index'))\n\n        return render(request, \"login.html\")\n\n    def post(self, request):\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n        remembered = request.POST.get(\"remembered\")\n\n        if not all([username, password]):\n            # return JsonResponse({\"account_msg\": \"缺少必要参数\", \"code\": 403})\n            return render(request, 'login.html', {'account_msg': '缺少必要参数', \"code\": 403})\n\n        # 校验用户信息，成功返回user对象，否则为None\n        user = authenticate(username=username, password=password)\n\n        if user is None:\n            return render(request, 'login.html', {'account_msg': '用户名或密码错误', \"code\": 403})\n\n        # 实现状态保持\n        login(request, user)\n\n        # 设置状态保持的周期\n        if remembered != 'on':\n            # 没有记住用户：浏览器会话结束就过期\n            request.session.set_expiry(0)\n        else:\n            # 记住用户：None表示两周后过期\n            request.session.set_expiry(None)\n\n        # 响应登录结果\n        return redirect(reverse('users:index'))\n```\n\n#### 实现模板\n\n```html\n{% extends \"base.html\" %}\n\n{% block body %}\n\n\n    <form method=\"post\" action=\"{% url 'users:login' %}\">\n        {% csrf_token %}\n        用户名:<input type=\"text\" name=\"username\">\n        密码:<input type=\"password\" name=\"password\">\n        <button name=\"submit\">login</button>\n        <input type=\"hidden\" name=\"next\" value=\"{% url 'users:index' %}\"/>\n    </form>\n\n{% endblock %}\n```\n\n### 注销\n\n#### 定义视图\n\n```python\nclass LogoutView(View):\n\n    def get(self, request):\n        \"\"\"实现退出登录逻辑\"\"\"\n        # 清理session\n        logout(request)\n\n        # 退出登录，重定向到首页\n        response = redirect(reverse('users:index'))\n\n        # 退出登录时清除cookie中的username\n        response.delete_cookie('username')\n        return response\n```\n\n### 用户信息\n\n#### 定义视图\n\n```python\nclass UserView(View):\n\n    def get(self, requset):\n        # 如果用户没有登陆就访问本应登陆才能访问的页面时会直接跳转到登陆页面\n        if requset.user.is_authenticated:\n            return render(requset, 'user.html')\n        else:\n            return redirect(reverse('users:login'))\n\n    def post(self, request):\n        old_password = request.POST.get(\"old_password\")\n        new_password = request.POST.get(\"new_password\")\n        conf_password = request.POST.get(\"conf_password\")\n\n        if not all([old_password, new_password, conf_password]):\n            return render(request, 'user.html', {'account_msg': '缺少必要参数', \"code\": 403})\n\n        if new_password != conf_password:\n            return render(request, 'user.html', {'account_msg': '密码不一致', \"code\": 403})\n\n        # 校验密码  check_password()\n        if not request.user.check_password(old_password):\n            return render(request, 'user.html', {'account_msg': '密码不正确', \"code\": 403})\n\n        user = request.user\n\n        # 修改密码\n        user.set_password(new_password)\n        # user.password = make_password(new_password)\n\n        # 保存修改\n        user.save()\n\n        # 状态保持\n        login(request, user)\n\n        return redirect(reverse('users:index'))\n\n```\n\n#### 实现模板\n\n```html\n{% extends 'base.html' %}\n\n{% block body %}\n\n    <form action=\"{% url 'users:user' %}\" method=\"post\">\n        旧密码: <input type=\"password\" name=\"old_password\">\n        新密码: <input type=\"password\" name=\"new_password\">\n        确认密码: <input type=\"password\" name=\"conf_password\">\n        <button name=\"submit\">确认修改</button>\n        <input type=\"hidden\" name=\"next\" value=\"{% url 'users:index' %}\"/>\n    </form>\n\n{% endblock %}\n```\n\n### 首页\n\n#### 定义视图\n\n```python\nclass IndexView(View):\n\ndef get(self, request):\n    return render(request, 'index.html')\n```\n\n#### 实现模板\n\n```html\n{% extends 'base.html' %}\n\n{% block body %}\n    <h1>欢迎来到首页</h1>\n{% endblock %}\n```\n\n## 配置路由\n\n`django_demo\\urls.py`中配置总路由\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path,include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('users/', include(\"users.urls\",\"users\"))\n]\n```\n\n`users\\urls.py`中配置子路由\n\n```python\nfrom django.urls import path\nfrom .views import RegisterView, LoginView, IndexView, LogoutView, UserView\n\napp_name = \"users\"\n\nurlpatterns = [\n    path('register/', RegisterView.as_view(), name=\"register\"),\n    path('login/', LoginView.as_view(), name=\"login\"),\n    path('logout/', LogoutView.as_view(), name=\"logout\"),\n    path(\"user/\", UserView.as_view(), name='user'),\n    path('', IndexView.as_view(), name=\"index\")\n]\n```","slug":"Django-用户认证系统","published":1,"updated":"2021-01-23T14:45:40.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubt000sjjlng6a1d7bd","content":"<h2 id=\"项目框架\"><a href=\"#项目框架\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h2><ol>\n<li><p>项目结构</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">.<br>├── users<br>│    ├── __init__.py<br>│    ├── admin.py<br>│    ├── apps.py<br>│    ├── migrations<br>│    │   └── __init__.py<br>│    ├── models.py<br>│    ├── tests.py<br>│    ├── urls.py<br>│    └── views.py<br>├── db.sqlite3<br>├── manage.py<br>├── django_demo<br>│    ├── __init__.py<br>│    ├── settings.py<br>│    ├── urls.py<br>│    └── wsgi.py<br>└── templates<br>    ├── base.html<br>    ├── index.html<br>    ├── login.html<br>    ├── register.html<br>    └── user.html<br><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2></li>\n</ol>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>通过终端命令,创建项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">django_admin startproject django_demo<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"生成应用\"><a href=\"#生成应用\" class=\"headerlink\" title=\"生成应用\"></a>生成应用</h3><p>通过终端命令,生成users应用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 此时在项目文件夹之下执行命令</span><br>python manage.py startapp users<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"修改配置信息\"><a href=\"#修改配置信息\" class=\"headerlink\" title=\"修改配置信息\"></a>修改配置信息</h3><p>在<code>settings.py</code>修改配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 注册app</span><br>INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;users.apps.UsersConfig&#x27;</span> <span class=\"hljs-comment\"># 注册users应用</span><br>]<br><br><span class=\"hljs-comment\"># 配置模板路径</span><br>TEMPLATES = [<br>    &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class=\"hljs-string\">&quot;templates&quot;</span>)],<br>        <span class=\"hljs-string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;context_processors&#x27;</span>: [<br>                <span class=\"hljs-string\">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"创建模板\"><a href=\"#创建模板\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h3><p>在项目根路径下,创建<code>templates</code>,在目录下创建<code>base.html</code>文件,以便后面复用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">&#123;% block nav %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>&gt;</span>Index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br>        &#123;% if user.is_authenticated %&#125;<br>            Hello, <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span>&gt;</span>&#123;&#123; user.username &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> .<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:logout&#x27; %&#125;&quot;</span>&gt;</span>log out<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:register&#x27; %&#125;&quot;</span>&gt;</span>register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:login&#x27; %&#125;&quot;</span>&gt;</span>log in<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        &#123;% endif %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>&#123;% endblock %&#125;<br><br>&#123;% block err %&#125;<br>    &#123;% if account_msg %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;account_msg&#125;&#125;. Please try again.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    &#123;% endif %&#125;<br><br>&#123;% endblock %&#125;<br><br>&#123;% block body %&#125;<br><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"指定用户模型类\"><a href=\"#指定用户模型类\" class=\"headerlink\" title=\"指定用户模型类\"></a>指定用户模型类</h3><ol>\n<li><p>在<code>users/models.py</code>中创建模型类</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.models <span class=\"hljs-keyword\">import</span> AbstractUser<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserProfile</span>(<span class=\"hljs-params\">AbstractUser</span>):</span><br>    phone = models.CharField(max_length=<span class=\"hljs-number\">11</span>, unique=<span class=\"hljs-literal\">True</span>, verbose_name=<span class=\"hljs-string\">&quot;手机号&quot;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_users&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;用户&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.username<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在<code>settings.py</code>文件中,指定本项目用户模型类<br> Django用户模型类是通过全局配置项 AUTH_USER_MODEL 决定的</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 配置规则：AUTH_USER_MODEL = &#x27;应用名.模型类名&#x27;</span><br>AUTH_USER_MODEL = <span class=\"hljs-string\">&#x27;users.UserProfile&#x27;</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>通过终端命令,生成迁移文件和迁移表</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"逻辑实现\"><a href=\"#逻辑实现\" class=\"headerlink\" title=\"逻辑实现\"></a>逻辑实现</h2></li>\n</ol>\n<h3 id=\"实现注册逻辑\"><a href=\"#实现注册逻辑\" class=\"headerlink\" title=\"实现注册逻辑\"></a>实现注册逻辑</h3><h4 id=\"定义视图\"><a href=\"#定义视图\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib.auth.hashers <span class=\"hljs-keyword\">import</span> make_password<br><span class=\"hljs-keyword\">from</span> django.contrib.auth <span class=\"hljs-keyword\">import</span> login<br><br><span class=\"hljs-keyword\">from</span> django.views <span class=\"hljs-keyword\">import</span> View<br><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">from</span> django.http <span class=\"hljs-keyword\">import</span> JsonResponse, HttpResponseForbidden<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserProfile<br>  <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RegisterView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>      <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;register.html&#x27;</span>)<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>      username = request.POST.get(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>      password = request.POST.get(<span class=\"hljs-string\">&quot;password&quot;</span>)<br>      password2 = request.POST.get(<span class=\"hljs-string\">&quot;password2&quot;</span>)<br>      phone = request.POST.get(<span class=\"hljs-string\">&quot;phone&quot;</span>)<br><br>      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([username, password, password2, phone]):<br>          <span class=\"hljs-keyword\">return</span> JsonResponse(<span class=\"hljs-string\">&quot;缺少必要参数&quot;</span>)<br><br>      <span class=\"hljs-keyword\">if</span> password != password2:<br>          <span class=\"hljs-keyword\">return</span> HttpResponseForbidden(<span class=\"hljs-string\">&quot;密码不一致&quot;</span>)<br><br>      <span class=\"hljs-comment\"># 此时 手动加密密码</span><br>      <span class=\"hljs-comment\"># hash_password = make_password(password)</span><br>      <span class=\"hljs-comment\"># try:</span><br>      <span class=\"hljs-comment\">#   user = UserProfile(username=username, password=hash_password, phone=phone)</span><br>      <span class=\"hljs-comment\">#   user.save()</span><br>      <span class=\"hljs-comment\"># except Exception as e:</span><br>      <span class=\"hljs-comment\">#     return HttpResponseForbidden(&quot;创建失败&quot;)</span><br><br>      <span class=\"hljs-keyword\">try</span>:<br>          <span class=\"hljs-comment\"># Django认证系统用户模型类提供的 create_user() 方法创建新的用户。</span><br>          <span class=\"hljs-comment\"># create_user() 方法中封装了 set_password() 方法加密密码</span><br>          user = UserProfile.objects.create_user(username=username, password=password, phone=phone)<br>      <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>          <span class=\"hljs-keyword\">return</span> HttpResponseForbidden(<span class=\"hljs-string\">&quot;创建失败&quot;</span>)<br><br>      <span class=\"hljs-comment\"># 状态保持</span><br>      login(request, user)<br><br>      <span class=\"hljs-keyword\">return</span> JsonResponse(&#123;<span class=\"hljs-string\">&quot;msg&quot;</span>: <span class=\"hljs-string\">&quot;ok&quot;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">200</span>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实现模板\"><a href=\"#实现模板\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">&#123;% extends &quot;base.html&quot; %&#125;<br><br>&#123;% block body %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:register&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>        用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>        密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>        确认密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password2&quot;</span>&gt;</span><br>        手机号: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;phone&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;phone&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"实现登录逻辑\"><a href=\"#实现登录逻辑\" class=\"headerlink\" title=\"实现登录逻辑\"></a>实现登录逻辑</h3><h4 id=\"定义视图-1\"><a href=\"#定义视图-1\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br><br>        <span class=\"hljs-comment\"># 判断用户是否登录(属性) user.is_authenticated</span><br>        <span class=\"hljs-keyword\">if</span> request.user.is_authenticated:<br>            <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        username = request.POST.get(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>        password = request.POST.get(<span class=\"hljs-string\">&quot;password&quot;</span>)<br>        remembered = request.POST.get(<span class=\"hljs-string\">&quot;remembered&quot;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([username, password]):<br>            <span class=\"hljs-comment\"># return JsonResponse(&#123;&quot;account_msg&quot;: &quot;缺少必要参数&quot;, &quot;code&quot;: 403&#125;)</span><br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;login.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;缺少必要参数&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 校验用户信息，成功返回user对象，否则为None</span><br>        user = authenticate(username=username, password=password)<br><br>        <span class=\"hljs-keyword\">if</span> user <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;login.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;用户名或密码错误&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 实现状态保持</span><br>        login(request, user)<br><br>        <span class=\"hljs-comment\"># 设置状态保持的周期</span><br>        <span class=\"hljs-keyword\">if</span> remembered != <span class=\"hljs-string\">&#x27;on&#x27;</span>:<br>            <span class=\"hljs-comment\"># 没有记住用户：浏览器会话结束就过期</span><br>            request.session.set_expiry(<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-comment\"># 记住用户：None表示两周后过期</span><br>            request.session.set_expiry(<span class=\"hljs-literal\">None</span>)<br><br>        <span class=\"hljs-comment\"># 响应登录结果</span><br>        <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实现模板-1\"><a href=\"#实现模板-1\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">&#123;% extends &quot;base.html&quot; %&#125;<br><br>&#123;% block body %&#125;<br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:login&#x27; %&#125;&quot;</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br>        用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>        密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;next&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"注销\"><a href=\"#注销\" class=\"headerlink\" title=\"注销\"></a>注销</h3><h4 id=\"定义视图-2\"><a href=\"#定义视图-2\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LogoutView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;实现退出登录逻辑&quot;&quot;&quot;</span><br>        <span class=\"hljs-comment\"># 清理session</span><br>        logout(request)<br><br>        <span class=\"hljs-comment\"># 退出登录，重定向到首页</span><br>        response = redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br>        <span class=\"hljs-comment\"># 退出登录时清除cookie中的username</span><br>        response.delete_cookie(<span class=\"hljs-string\">&#x27;username&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><h4 id=\"定义视图-3\"><a href=\"#定义视图-3\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, requset</span>):</span><br>        <span class=\"hljs-comment\"># 如果用户没有登陆就访问本应登陆才能访问的页面时会直接跳转到登陆页面</span><br>        <span class=\"hljs-keyword\">if</span> requset.user.is_authenticated:<br>            <span class=\"hljs-keyword\">return</span> render(requset, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:login&#x27;</span>))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        old_password = request.POST.get(<span class=\"hljs-string\">&quot;old_password&quot;</span>)<br>        new_password = request.POST.get(<span class=\"hljs-string\">&quot;new_password&quot;</span>)<br>        conf_password = request.POST.get(<span class=\"hljs-string\">&quot;conf_password&quot;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([old_password, new_password, conf_password]):<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;缺少必要参数&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-keyword\">if</span> new_password != conf_password:<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;密码不一致&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 校验密码  check_password()</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> request.user.check_password(old_password):<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;密码不正确&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        user = request.user<br><br>        <span class=\"hljs-comment\"># 修改密码</span><br>        user.set_password(new_password)<br>        <span class=\"hljs-comment\"># user.password = make_password(new_password)</span><br><br>        <span class=\"hljs-comment\"># 保存修改</span><br>        user.save()<br><br>        <span class=\"hljs-comment\"># 状态保持</span><br>        login(request, user)<br><br>        <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实现模板-2\"><a href=\"#实现模板-2\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">&#123;% extends &#x27;base.html&#x27; %&#125;<br><br>&#123;% block body %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>        旧密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;old_password&quot;</span>&gt;</span><br>        新密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;new_password&quot;</span>&gt;</span><br>        确认密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;conf_password&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>确认修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;next&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><h4 id=\"定义视图-4\"><a href=\"#定义视图-4\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实现模板-3\"><a href=\"#实现模板-3\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">&#123;% extends &#x27;base.html&#x27; %&#125;<br><br>&#123;% block body %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>欢迎来到首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p><code>django_demo\\urls.py</code>中配置总路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path,include<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class=\"hljs-string\">&#x27;users/&#x27;</span>, include(<span class=\"hljs-string\">&quot;users.urls&quot;</span>,<span class=\"hljs-string\">&quot;users&quot;</span>))<br>]<br></code></pre></div></td></tr></table></figure>\n<p><code>users\\urls.py</code>中配置子路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> .views <span class=\"hljs-keyword\">import</span> RegisterView, LoginView, IndexView, LogoutView, UserView<br><br>app_name = <span class=\"hljs-string\">&quot;users&quot;</span><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;register/&#x27;</span>, RegisterView.as_view(), name=<span class=\"hljs-string\">&quot;register&quot;</span>),<br>    path(<span class=\"hljs-string\">&#x27;login/&#x27;</span>, LoginView.as_view(), name=<span class=\"hljs-string\">&quot;login&quot;</span>),<br>    path(<span class=\"hljs-string\">&#x27;logout/&#x27;</span>, LogoutView.as_view(), name=<span class=\"hljs-string\">&quot;logout&quot;</span>),<br>    path(<span class=\"hljs-string\">&quot;user/&quot;</span>, UserView.as_view(), name=<span class=\"hljs-string\">&#x27;user&#x27;</span>),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&quot;index&quot;</span>)<br>]<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目框架\"><a href=\"#项目框架\" class=\"headerlink\" title=\"项目框架\"></a>项目框架</h2><ol>\n<li><p>项目结构</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">.<br>├── users<br>│    ├── __init__.py<br>│    ├── admin.py<br>│    ├── apps.py<br>│    ├── migrations<br>│    │   └── __init__.py<br>│    ├── models.py<br>│    ├── tests.py<br>│    ├── urls.py<br>│    └── views.py<br>├── db.sqlite3<br>├── manage.py<br>├── django_demo<br>│    ├── __init__.py<br>│    ├── settings.py<br>│    ├── urls.py<br>│    └── wsgi.py<br>└── templates<br>    ├── base.html<br>    ├── index.html<br>    ├── login.html<br>    ├── register.html<br>    └── user.html<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2></li>\n</ol>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>通过终端命令,创建项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">django_admin startproject django_demo<br></code></pre></td></tr></table></figure>\n<h3 id=\"生成应用\"><a href=\"#生成应用\" class=\"headerlink\" title=\"生成应用\"></a>生成应用</h3><p>通过终端命令,生成users应用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 此时在项目文件夹之下执行命令</span><br>python manage.py startapp users<br></code></pre></td></tr></table></figure>\n<h3 id=\"修改配置信息\"><a href=\"#修改配置信息\" class=\"headerlink\" title=\"修改配置信息\"></a>修改配置信息</h3><p>在<code>settings.py</code>修改配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 注册app</span><br>INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;users.apps.UsersConfig&#x27;</span> <span class=\"hljs-comment\"># 注册users应用</span><br>]<br><br><span class=\"hljs-comment\"># 配置模板路径</span><br>TEMPLATES = [<br>    &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class=\"hljs-string\">&quot;templates&quot;</span>)],<br>        <span class=\"hljs-string\">&#x27;APP_DIRS&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;context_processors&#x27;</span>: [<br>                <span class=\"hljs-string\">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class=\"hljs-string\">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建模板\"><a href=\"#创建模板\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h3><p>在项目根路径下,创建<code>templates</code>,在目录下创建<code>base.html</code>文件,以便后面复用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% block nav %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>&gt;</span>Index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br>        &#123;% if user.is_authenticated %&#125;<br>            Hello, <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span>&gt;</span>&#123;&#123; user.username &#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> .<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:logout&#x27; %&#125;&quot;</span>&gt;</span>log out<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:register&#x27; %&#125;&quot;</span>&gt;</span>register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:login&#x27; %&#125;&quot;</span>&gt;</span>log in<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        &#123;% endif %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>&#123;% endblock %&#125;<br><br>&#123;% block err %&#125;<br>    &#123;% if account_msg %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;account_msg&#125;&#125;. Please try again.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    &#123;% endif %&#125;<br><br>&#123;% endblock %&#125;<br><br>&#123;% block body %&#125;<br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"指定用户模型类\"><a href=\"#指定用户模型类\" class=\"headerlink\" title=\"指定用户模型类\"></a>指定用户模型类</h3><ol>\n<li><p>在<code>users/models.py</code>中创建模型类</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.models <span class=\"hljs-keyword\">import</span> AbstractUser<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserProfile</span>(<span class=\"hljs-params\">AbstractUser</span>):</span><br>    phone = models.CharField(max_length=<span class=\"hljs-number\">11</span>, unique=<span class=\"hljs-literal\">True</span>, verbose_name=<span class=\"hljs-string\">&quot;手机号&quot;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        db_table = <span class=\"hljs-string\">&#x27;tb_users&#x27;</span>  <span class=\"hljs-comment\"># 指定表名</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;用户&#x27;</span>  <span class=\"hljs-comment\"># 后台显示表名</span><br>        verbose_name_plural = verbose_name<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.username<br></code></pre></td></tr></table></figure></li>\n<li><p>在<code>settings.py</code>文件中,指定本项目用户模型类<br> Django用户模型类是通过全局配置项 AUTH_USER_MODEL 决定的</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 配置规则：AUTH_USER_MODEL = &#x27;应用名.模型类名&#x27;</span><br>AUTH_USER_MODEL = <span class=\"hljs-string\">&#x27;users.UserProfile&#x27;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>通过终端命令,生成迁移文件和迁移表</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure>\n<h2 id=\"逻辑实现\"><a href=\"#逻辑实现\" class=\"headerlink\" title=\"逻辑实现\"></a>逻辑实现</h2></li>\n</ol>\n<h3 id=\"实现注册逻辑\"><a href=\"#实现注册逻辑\" class=\"headerlink\" title=\"实现注册逻辑\"></a>实现注册逻辑</h3><h4 id=\"定义视图\"><a href=\"#定义视图\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib.auth.hashers <span class=\"hljs-keyword\">import</span> make_password<br><span class=\"hljs-keyword\">from</span> django.contrib.auth <span class=\"hljs-keyword\">import</span> login<br><br><span class=\"hljs-keyword\">from</span> django.views <span class=\"hljs-keyword\">import</span> View<br><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">from</span> django.http <span class=\"hljs-keyword\">import</span> JsonResponse, HttpResponseForbidden<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserProfile<br>  <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RegisterView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>      <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;register.html&#x27;</span>)<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>      username = request.POST.get(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>      password = request.POST.get(<span class=\"hljs-string\">&quot;password&quot;</span>)<br>      password2 = request.POST.get(<span class=\"hljs-string\">&quot;password2&quot;</span>)<br>      phone = request.POST.get(<span class=\"hljs-string\">&quot;phone&quot;</span>)<br><br>      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([username, password, password2, phone]):<br>          <span class=\"hljs-keyword\">return</span> JsonResponse(<span class=\"hljs-string\">&quot;缺少必要参数&quot;</span>)<br><br>      <span class=\"hljs-keyword\">if</span> password != password2:<br>          <span class=\"hljs-keyword\">return</span> HttpResponseForbidden(<span class=\"hljs-string\">&quot;密码不一致&quot;</span>)<br><br>      <span class=\"hljs-comment\"># 此时 手动加密密码</span><br>      <span class=\"hljs-comment\"># hash_password = make_password(password)</span><br>      <span class=\"hljs-comment\"># try:</span><br>      <span class=\"hljs-comment\">#   user = UserProfile(username=username, password=hash_password, phone=phone)</span><br>      <span class=\"hljs-comment\">#   user.save()</span><br>      <span class=\"hljs-comment\"># except Exception as e:</span><br>      <span class=\"hljs-comment\">#     return HttpResponseForbidden(&quot;创建失败&quot;)</span><br><br>      <span class=\"hljs-keyword\">try</span>:<br>          <span class=\"hljs-comment\"># Django认证系统用户模型类提供的 create_user() 方法创建新的用户。</span><br>          <span class=\"hljs-comment\"># create_user() 方法中封装了 set_password() 方法加密密码</span><br>          user = UserProfile.objects.create_user(username=username, password=password, phone=phone)<br>      <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>          <span class=\"hljs-keyword\">return</span> HttpResponseForbidden(<span class=\"hljs-string\">&quot;创建失败&quot;</span>)<br><br>      <span class=\"hljs-comment\"># 状态保持</span><br>      login(request, user)<br><br>      <span class=\"hljs-keyword\">return</span> JsonResponse(&#123;<span class=\"hljs-string\">&quot;msg&quot;</span>: <span class=\"hljs-string\">&quot;ok&quot;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">200</span>&#125;)<br></code></pre></td></tr></table></figure>\n<h4 id=\"实现模板\"><a href=\"#实现模板\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;base.html&quot; %&#125;<br><br>&#123;% block body %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:register&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>        用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>        密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>        确认密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password2&quot;</span>&gt;</span><br>        手机号: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;phone&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;phone&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"实现登录逻辑\"><a href=\"#实现登录逻辑\" class=\"headerlink\" title=\"实现登录逻辑\"></a>实现登录逻辑</h3><h4 id=\"定义视图-1\"><a href=\"#定义视图-1\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginView</span>(<span class=\"hljs-params\">View</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br><br>        <span class=\"hljs-comment\"># 判断用户是否登录(属性) user.is_authenticated</span><br>        <span class=\"hljs-keyword\">if</span> request.user.is_authenticated:<br>            <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        username = request.POST.get(<span class=\"hljs-string\">&quot;username&quot;</span>)<br>        password = request.POST.get(<span class=\"hljs-string\">&quot;password&quot;</span>)<br>        remembered = request.POST.get(<span class=\"hljs-string\">&quot;remembered&quot;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([username, password]):<br>            <span class=\"hljs-comment\"># return JsonResponse(&#123;&quot;account_msg&quot;: &quot;缺少必要参数&quot;, &quot;code&quot;: 403&#125;)</span><br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;login.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;缺少必要参数&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 校验用户信息，成功返回user对象，否则为None</span><br>        user = authenticate(username=username, password=password)<br><br>        <span class=\"hljs-keyword\">if</span> user <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;login.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;用户名或密码错误&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 实现状态保持</span><br>        login(request, user)<br><br>        <span class=\"hljs-comment\"># 设置状态保持的周期</span><br>        <span class=\"hljs-keyword\">if</span> remembered != <span class=\"hljs-string\">&#x27;on&#x27;</span>:<br>            <span class=\"hljs-comment\"># 没有记住用户：浏览器会话结束就过期</span><br>            request.session.set_expiry(<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-comment\"># 记住用户：None表示两周后过期</span><br>            request.session.set_expiry(<span class=\"hljs-literal\">None</span>)<br><br>        <span class=\"hljs-comment\"># 响应登录结果</span><br>        <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br></code></pre></td></tr></table></figure>\n<h4 id=\"实现模板-1\"><a href=\"#实现模板-1\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;base.html&quot; %&#125;<br><br>&#123;% block body %&#125;<br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:login&#x27; %&#125;&quot;</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br>        用户名:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>        密码:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;next&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"注销\"><a href=\"#注销\" class=\"headerlink\" title=\"注销\"></a>注销</h3><h4 id=\"定义视图-2\"><a href=\"#定义视图-2\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LogoutView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;实现退出登录逻辑&quot;&quot;&quot;</span><br>        <span class=\"hljs-comment\"># 清理session</span><br>        logout(request)<br><br>        <span class=\"hljs-comment\"># 退出登录，重定向到首页</span><br>        response = redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br>        <span class=\"hljs-comment\"># 退出登录时清除cookie中的username</span><br>        response.delete_cookie(<span class=\"hljs-string\">&#x27;username&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> response<br></code></pre></td></tr></table></figure>\n<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><h4 id=\"定义视图-3\"><a href=\"#定义视图-3\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">View</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, requset</span>):</span><br>        <span class=\"hljs-comment\"># 如果用户没有登陆就访问本应登陆才能访问的页面时会直接跳转到登陆页面</span><br>        <span class=\"hljs-keyword\">if</span> requset.user.is_authenticated:<br>            <span class=\"hljs-keyword\">return</span> render(requset, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:login&#x27;</span>))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        old_password = request.POST.get(<span class=\"hljs-string\">&quot;old_password&quot;</span>)<br>        new_password = request.POST.get(<span class=\"hljs-string\">&quot;new_password&quot;</span>)<br>        conf_password = request.POST.get(<span class=\"hljs-string\">&quot;conf_password&quot;</span>)<br><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>([old_password, new_password, conf_password]):<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;缺少必要参数&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-keyword\">if</span> new_password != conf_password:<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;密码不一致&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        <span class=\"hljs-comment\"># 校验密码  check_password()</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> request.user.check_password(old_password):<br>            <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;user.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;account_msg&#x27;</span>: <span class=\"hljs-string\">&#x27;密码不正确&#x27;</span>, <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">403</span>&#125;)<br><br>        user = request.user<br><br>        <span class=\"hljs-comment\"># 修改密码</span><br>        user.set_password(new_password)<br>        <span class=\"hljs-comment\"># user.password = make_password(new_password)</span><br><br>        <span class=\"hljs-comment\"># 保存修改</span><br>        user.save()<br><br>        <span class=\"hljs-comment\"># 状态保持</span><br>        login(request, user)<br><br>        <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;users:index&#x27;</span>))<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"实现模板-2\"><a href=\"#实现模板-2\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &#x27;base.html&#x27; %&#125;<br><br>&#123;% block body %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span><br>        旧密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;old_password&quot;</span>&gt;</span><br>        新密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;new_password&quot;</span>&gt;</span><br>        确认密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;conf_password&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>确认修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;next&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><h4 id=\"定义视图-4\"><a href=\"#定义视图-4\" class=\"headerlink\" title=\"定义视图\"></a>定义视图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexView</span>(<span class=\"hljs-params\">View</span>):</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;index.html&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"实现模板-3\"><a href=\"#实现模板-3\" class=\"headerlink\" title=\"实现模板\"></a>实现模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &#x27;base.html&#x27; %&#125;<br><br>&#123;% block body %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>欢迎来到首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p><code>django_demo\\urls.py</code>中配置总路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path,include<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class=\"hljs-string\">&#x27;users/&#x27;</span>, include(<span class=\"hljs-string\">&quot;users.urls&quot;</span>,<span class=\"hljs-string\">&quot;users&quot;</span>))<br>]<br></code></pre></td></tr></table></figure>\n<p><code>users\\urls.py</code>中配置子路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> .views <span class=\"hljs-keyword\">import</span> RegisterView, LoginView, IndexView, LogoutView, UserView<br><br>app_name = <span class=\"hljs-string\">&quot;users&quot;</span><br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;register/&#x27;</span>, RegisterView.as_view(), name=<span class=\"hljs-string\">&quot;register&quot;</span>),<br>    path(<span class=\"hljs-string\">&#x27;login/&#x27;</span>, LoginView.as_view(), name=<span class=\"hljs-string\">&quot;login&quot;</span>),<br>    path(<span class=\"hljs-string\">&#x27;logout/&#x27;</span>, LogoutView.as_view(), name=<span class=\"hljs-string\">&quot;logout&quot;</span>),<br>    path(<span class=\"hljs-string\">&quot;user/&quot;</span>, UserView.as_view(), name=<span class=\"hljs-string\">&#x27;user&#x27;</span>),<br>    path(<span class=\"hljs-string\">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class=\"hljs-string\">&quot;index&quot;</span>)<br>]<br></code></pre></td></tr></table></figure>"},{"title":"Django-缓存","date":"2020-12-01T13:49:38.000Z","_content":"\n## 缓存简介\n\n在动态网站中,用户所有的请求,服务器都会去数据库中进行相应的增,删,查,改,渲染模板,执行业务逻辑,最后生成用户看到的页面.\n\n当一个网站的用户访问量很大的时候,每一次的的后台操作,都会消耗很多的服务端资源,所以必须使用**缓存**来减轻后端服务器的压力.\n\n缓存是将一些常用的数据保存到**内存**或者**memcache**中,在一定的时间内有人来访问这些数据时,则不再去执行数据库及渲染等操作,而是直接从内存或memcache的缓存中去取得数据,然后返回给用户。\n\n## Django缓存\n\n### 缓存方式\n\n>   Django提供了6种缓存方式\n\n-   开发调试缓存\n-   内存缓存\n-   文件缓存\n-   数据库缓存\n-   Memcache缓存(使用`python-memcached`模块)\n-   Memcache缓存(使用`pylibmc`模块)\n\n经常使用的有**文件缓存**和**Mencache**缓存, 而选用不同的缓存方式，实际就是需要缓存的数据保存的位置不同。只需要修改django项目的配置文件`settings.py`，即可实现不同缓存方式的切换。\n\n\n\n#### 开发调试\n\n>   此模式为开发调试使用,实际上不执行任何操作\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',  # 缓存后台使用的引擎\n        'TIMEOUT': 300,  # 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        },\n    }\n}\n```\n\n#### 内存缓存\n\n>   将缓存内容保存至内存区域中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # 指定缓存使用的引擎\n        'LOCATION': 'unique-snowflake',  # 写在内存中的变量的唯一值 \n        'TIMEOUT': 300,  # 缓存超时时间(默认为300秒,None表示永不过期)\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n#### 文件缓存\n\n>   把缓存数据存储在文件中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',  # 指定缓存使用的引擎\n        'LOCATION': '/var/tmp/django_cache',  # 指定缓存的路径\n        'TIMEOUT': 300,  # 缓存超时时间(默认为300秒,None表示永不过期)\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n#### 数据库缓存\n\n>   把缓存数据存储在数据库中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 指定缓存使用的引擎\n        'LOCATION': 'cache_table',  # 数据库表    \n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n注意,创建缓存的数据库表使用的语句:\n\n```python\npython manage.py createcachetable\n```\n\n#### Memcached缓存\n\nMemcached是Django原生支持的缓存系统.要使用Memcached,需要下载Memcached的支持库`python-memcached`或`pylibmc`.\n\n>   使用`python-memcached`模块连接memcache\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',  # 指定缓存使用的引擎\n        'LOCATION': '192.168.10.100:11211',  # 指定Memcache缓存服务器的IP地址和端口\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n>   使用`pylibmc`模块连接memcache\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',  # 指定缓存使用的引擎\n        'LOCATION': '192.168.10.100:11211',  # 指定本机的11211端口为Memcache缓存服务器\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        },\n    }\n}\n\n```\n\nMemcached是基于内存的缓存,数据存储在内存中.所以如果服务器死机的话,数据就会丢失,所以Memcached一般与其他缓存配合使用\n\n### 缓存应用\n\n> 在使用缓存之前，必选先选择一种缓存方式，按照上面的配置信息在 `settings.py`中实现对应配置。\n\n#### 全站使用缓存\n\n> 如果想要对整个项目的**所有**`GET`和`HEAD`方法的正常返回结果进行缓存，可以通过**中间件**实现\n\n- 用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用`FetchFromCacheMiddleware`获取内容并返回给用户\n- 当返回给用户之前，判断缓存中是否已经存在，如果不存在，则`UpdateCacheMiddleware`会将缓存保存至Django的缓存之中，以实现全站缓存\n- 请求来了，是从上到下入走中间件；响应的时候是从下到上走中间件。因此，获取页面放在最后，保存页面放最前面\n\n```python\nMIDDLEWARE = [\n 'django.middleware.cache.UpdateCacheMiddleware',  # 响应HttpResponse中设置几个headers\n 'django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n 'django.middleware.cache.FetchFromCacheMiddleware',  # 用来缓存通过GET和HEAD方法获取的状态码为200的响应\n]\n \nCACHE__MIDDLEWARE_SECONDS=15  # 设定超时时间为15秒\n```\n\n此时在中间件中已经设置过缓存，因此其余代码不变，视图中正常执行逻辑，即可实现全站缓存。\n\n```python\nfrom django.http.response import HttpResponse\nimport time\n\ndef index(request):\n    print('视图函数被调用')\n    result = 0\n    for i in range(10):\n        result += i\n        time.sleep(0.5)\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n\n\n#### 单独视图\n\n>   如果不想对所有的查询结果缓存，而只是为**单个视图**函数添加缓存，就可以使用**装饰器**实现\n\n```python\nfrom django.views.decorators.cache import cache_page\nfrom django.http.response import HttpResponse\nimport time\n\n@cache_page(10)  # 缓存10秒\ndef index(request):\n    print('视图函数被调用')\n    result = 0\n    for i in range(10):\n        result += i\n        time.sleep(0.5)\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n因为缓存的原因,不停的刷新浏览器时会发现：第一次请求页面时，会等待5秒，计算完全部数据数据， 才可以返回结果；在下一次请求时，利用缓存结果，可以很快得到响应数据；直到10秒之后，缓存过期，重新进行该过程。\n\n#### 模板缓存\n\n> 如果并不想对页面的其余部分做任何处理，只是相对页面的**一部分** 进行缓存， 就可以使用 **模板缓存** 实现\n\n如果想对缓存进行更多的控制，可以使用 `cache`模板标签来缓存模板的一个片段。\n\n`views`视图函数\n\n```python\nfrom django.shortcuts import render\nimport time\n\ndef index(request):\n    print('视图函数被调用')\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return render(request, 'page.html', {'ctime': ctime})\n```\n\n 前端网页\n\n```python\n{% load cache %}  # 放在缓存片段的上面\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模板缓存</title>\n</head>\n<body>\n<p>这里是未缓存的时间:{{ ctime }}</p>\n\n# 将按给定的时间缓存包含块中的内容。 \n# 它最少需要两个参数：缓存时间（以秒为单位）；给缓存片段起的名称,该名称将被视为是字符串，而不是变量\n# 设定超时时间为10秒, 给缓存模板片段起名为 \"time\"\n{% cache 10 time %}  \n    <p>这里是缓存的时间:{{ ctime }}</p>\n{% endcache %}\n</body>\n</html>\n```\n\n刷新浏览器可以看到,第一个时间实时变化,后面一个时间每10秒钟变化一次\n\n#### 手动缓存\n\n> 如果不想为一个方法（页面）进行缓存，只想缓存**某个字段**的话，可以 **手动缓存**\n\n```python\nfrom django.core.cache import cache\nfrom django.http.response import HttpResponse\nimport time\n\n\ndef index(request):\n    print('视图函数被调用')\n    result = cache.get('result')\n    if not result:\n        result = 0\n        for i in range(10):\n            result += i\n            time.sleep(0.5)\n        cache.set('result', result, 10)\n\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n## Redis缓存\n\n[参考](https://www.cnblogs.com/believepd/p/10275384.html#二、redis缓存)","source":"_posts/Django-缓存.md","raw":"---\ntitle: Django-缓存\ndate: 2020-12-01 21:49:38\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 缓存\n---\n\n## 缓存简介\n\n在动态网站中,用户所有的请求,服务器都会去数据库中进行相应的增,删,查,改,渲染模板,执行业务逻辑,最后生成用户看到的页面.\n\n当一个网站的用户访问量很大的时候,每一次的的后台操作,都会消耗很多的服务端资源,所以必须使用**缓存**来减轻后端服务器的压力.\n\n缓存是将一些常用的数据保存到**内存**或者**memcache**中,在一定的时间内有人来访问这些数据时,则不再去执行数据库及渲染等操作,而是直接从内存或memcache的缓存中去取得数据,然后返回给用户。\n\n## Django缓存\n\n### 缓存方式\n\n>   Django提供了6种缓存方式\n\n-   开发调试缓存\n-   内存缓存\n-   文件缓存\n-   数据库缓存\n-   Memcache缓存(使用`python-memcached`模块)\n-   Memcache缓存(使用`pylibmc`模块)\n\n经常使用的有**文件缓存**和**Mencache**缓存, 而选用不同的缓存方式，实际就是需要缓存的数据保存的位置不同。只需要修改django项目的配置文件`settings.py`，即可实现不同缓存方式的切换。\n\n\n\n#### 开发调试\n\n>   此模式为开发调试使用,实际上不执行任何操作\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',  # 缓存后台使用的引擎\n        'TIMEOUT': 300,  # 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        },\n    }\n}\n```\n\n#### 内存缓存\n\n>   将缓存内容保存至内存区域中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # 指定缓存使用的引擎\n        'LOCATION': 'unique-snowflake',  # 写在内存中的变量的唯一值 \n        'TIMEOUT': 300,  # 缓存超时时间(默认为300秒,None表示永不过期)\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n#### 文件缓存\n\n>   把缓存数据存储在文件中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',  # 指定缓存使用的引擎\n        'LOCATION': '/var/tmp/django_cache',  # 指定缓存的路径\n        'TIMEOUT': 300,  # 缓存超时时间(默认为300秒,None表示永不过期)\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n#### 数据库缓存\n\n>   把缓存数据存储在数据库中\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 指定缓存使用的引擎\n        'LOCATION': 'cache_table',  # 数据库表    \n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n注意,创建缓存的数据库表使用的语句:\n\n```python\npython manage.py createcachetable\n```\n\n#### Memcached缓存\n\nMemcached是Django原生支持的缓存系统.要使用Memcached,需要下载Memcached的支持库`python-memcached`或`pylibmc`.\n\n>   使用`python-memcached`模块连接memcache\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',  # 指定缓存使用的引擎\n        'LOCATION': '192.168.10.100:11211',  # 指定Memcache缓存服务器的IP地址和端口\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        }\n    }\n}\n```\n\n>   使用`pylibmc`模块连接memcache\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',  # 指定缓存使用的引擎\n        'LOCATION': '192.168.10.100:11211',  # 指定本机的11211端口为Memcache缓存服务器\n        'OPTIONS': {\n            'MAX_ENTRIES': 300,  # 最大缓存记录的数量（默认300）\n            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）\n        },\n    }\n}\n\n```\n\nMemcached是基于内存的缓存,数据存储在内存中.所以如果服务器死机的话,数据就会丢失,所以Memcached一般与其他缓存配合使用\n\n### 缓存应用\n\n> 在使用缓存之前，必选先选择一种缓存方式，按照上面的配置信息在 `settings.py`中实现对应配置。\n\n#### 全站使用缓存\n\n> 如果想要对整个项目的**所有**`GET`和`HEAD`方法的正常返回结果进行缓存，可以通过**中间件**实现\n\n- 用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用`FetchFromCacheMiddleware`获取内容并返回给用户\n- 当返回给用户之前，判断缓存中是否已经存在，如果不存在，则`UpdateCacheMiddleware`会将缓存保存至Django的缓存之中，以实现全站缓存\n- 请求来了，是从上到下入走中间件；响应的时候是从下到上走中间件。因此，获取页面放在最后，保存页面放最前面\n\n```python\nMIDDLEWARE = [\n 'django.middleware.cache.UpdateCacheMiddleware',  # 响应HttpResponse中设置几个headers\n 'django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n 'django.middleware.cache.FetchFromCacheMiddleware',  # 用来缓存通过GET和HEAD方法获取的状态码为200的响应\n]\n \nCACHE__MIDDLEWARE_SECONDS=15  # 设定超时时间为15秒\n```\n\n此时在中间件中已经设置过缓存，因此其余代码不变，视图中正常执行逻辑，即可实现全站缓存。\n\n```python\nfrom django.http.response import HttpResponse\nimport time\n\ndef index(request):\n    print('视图函数被调用')\n    result = 0\n    for i in range(10):\n        result += i\n        time.sleep(0.5)\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n\n\n#### 单独视图\n\n>   如果不想对所有的查询结果缓存，而只是为**单个视图**函数添加缓存，就可以使用**装饰器**实现\n\n```python\nfrom django.views.decorators.cache import cache_page\nfrom django.http.response import HttpResponse\nimport time\n\n@cache_page(10)  # 缓存10秒\ndef index(request):\n    print('视图函数被调用')\n    result = 0\n    for i in range(10):\n        result += i\n        time.sleep(0.5)\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n因为缓存的原因,不停的刷新浏览器时会发现：第一次请求页面时，会等待5秒，计算完全部数据数据， 才可以返回结果；在下一次请求时，利用缓存结果，可以很快得到响应数据；直到10秒之后，缓存过期，重新进行该过程。\n\n#### 模板缓存\n\n> 如果并不想对页面的其余部分做任何处理，只是相对页面的**一部分** 进行缓存， 就可以使用 **模板缓存** 实现\n\n如果想对缓存进行更多的控制，可以使用 `cache`模板标签来缓存模板的一个片段。\n\n`views`视图函数\n\n```python\nfrom django.shortcuts import render\nimport time\n\ndef index(request):\n    print('视图函数被调用')\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return render(request, 'page.html', {'ctime': ctime})\n```\n\n 前端网页\n\n```python\n{% load cache %}  # 放在缓存片段的上面\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模板缓存</title>\n</head>\n<body>\n<p>这里是未缓存的时间:{{ ctime }}</p>\n\n# 将按给定的时间缓存包含块中的内容。 \n# 它最少需要两个参数：缓存时间（以秒为单位）；给缓存片段起的名称,该名称将被视为是字符串，而不是变量\n# 设定超时时间为10秒, 给缓存模板片段起名为 \"time\"\n{% cache 10 time %}  \n    <p>这里是缓存的时间:{{ ctime }}</p>\n{% endcache %}\n</body>\n</html>\n```\n\n刷新浏览器可以看到,第一个时间实时变化,后面一个时间每10秒钟变化一次\n\n#### 手动缓存\n\n> 如果不想为一个方法（页面）进行缓存，只想缓存**某个字段**的话，可以 **手动缓存**\n\n```python\nfrom django.core.cache import cache\nfrom django.http.response import HttpResponse\nimport time\n\n\ndef index(request):\n    print('视图函数被调用')\n    result = cache.get('result')\n    if not result:\n        result = 0\n        for i in range(10):\n            result += i\n            time.sleep(0.5)\n        cache.set('result', result, 10)\n\n    ctime = time.strftime('%H:%M:%S', time.localtime())\n    return HttpResponse(\"时间{}的结果是:{}\".format(ctime, result))\n```\n\n## Redis缓存\n\n[参考](https://www.cnblogs.com/believepd/p/10275384.html#二、redis缓存)","slug":"Django-缓存","published":1,"updated":"2021-01-23T15:21:14.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubu000ujjlnffvf4g6x","content":"<h2 id=\"缓存简介\"><a href=\"#缓存简介\" class=\"headerlink\" title=\"缓存简介\"></a>缓存简介</h2><p>在动态网站中,用户所有的请求,服务器都会去数据库中进行相应的增,删,查,改,渲染模板,执行业务逻辑,最后生成用户看到的页面.</p>\n<p>当一个网站的用户访问量很大的时候,每一次的的后台操作,都会消耗很多的服务端资源,所以必须使用<strong>缓存</strong>来减轻后端服务器的压力.</p>\n<p>缓存是将一些常用的数据保存到<strong>内存</strong>或者<strong>memcache</strong>中,在一定的时间内有人来访问这些数据时,则不再去执行数据库及渲染等操作,而是直接从内存或memcache的缓存中去取得数据,然后返回给用户。</p>\n<h2 id=\"Django缓存\"><a href=\"#Django缓存\" class=\"headerlink\" title=\"Django缓存\"></a>Django缓存</h2><h3 id=\"缓存方式\"><a href=\"#缓存方式\" class=\"headerlink\" title=\"缓存方式\"></a>缓存方式</h3><blockquote>\n<p>  Django提供了6种缓存方式</p>\n</blockquote>\n<ul>\n<li>开发调试缓存</li>\n<li>内存缓存</li>\n<li>文件缓存</li>\n<li>数据库缓存</li>\n<li>Memcache缓存(使用<code>python-memcached</code>模块)</li>\n<li>Memcache缓存(使用<code>pylibmc</code>模块)</li>\n</ul>\n<p>经常使用的有<strong>文件缓存</strong>和<strong>Mencache</strong>缓存, 而选用不同的缓存方式，实际就是需要缓存的数据保存的位置不同。只需要修改django项目的配置文件<code>settings.py</code>，即可实现不同缓存方式的切换。</p>\n<h4 id=\"开发调试\"><a href=\"#开发调试\" class=\"headerlink\" title=\"开发调试\"></a>开发调试</h4><blockquote>\n<p>  此模式为开发调试使用,实际上不执行任何操作</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.dummy.DummyCache&#x27;</span>,  <span class=\"hljs-comment\"># 缓存后台使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"内存缓存\"><a href=\"#内存缓存\" class=\"headerlink\" title=\"内存缓存\"></a>内存缓存</h4><blockquote>\n<p>  将缓存内容保存至内存区域中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.locmem.LocMemCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;unique-snowflake&#x27;</span>,  <span class=\"hljs-comment\"># 写在内存中的变量的唯一值 </span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间(默认为300秒,None表示永不过期)</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"文件缓存\"><a href=\"#文件缓存\" class=\"headerlink\" title=\"文件缓存\"></a>文件缓存</h4><blockquote>\n<p>  把缓存数据存储在文件中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.filebased.FileBasedCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;/var/tmp/django_cache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存的路径</span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间(默认为300秒,None表示永不过期)</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"数据库缓存\"><a href=\"#数据库缓存\" class=\"headerlink\" title=\"数据库缓存\"></a>数据库缓存</h4><blockquote>\n<p>  把缓存数据存储在数据库中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.db.DatabaseCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;cache_table&#x27;</span>,  <span class=\"hljs-comment\"># 数据库表    </span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>注意,创建缓存的数据库表使用的语句:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">python manage.py createcachetable<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"Memcached缓存\"><a href=\"#Memcached缓存\" class=\"headerlink\" title=\"Memcached缓存\"></a>Memcached缓存</h4><p>Memcached是Django原生支持的缓存系统.要使用Memcached,需要下载Memcached的支持库<code>python-memcached</code>或<code>pylibmc</code>.</p>\n<blockquote>\n<p>  使用<code>python-memcached</code>模块连接memcache</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;192.168.10.100:11211&#x27;</span>,  <span class=\"hljs-comment\"># 指定Memcache缓存服务器的IP地址和端口</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>  使用<code>pylibmc</code>模块连接memcache</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;192.168.10.100:11211&#x27;</span>,  <span class=\"hljs-comment\"># 指定本机的11211端口为Memcache缓存服务器</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;,<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n<p>Memcached是基于内存的缓存,数据存储在内存中.所以如果服务器死机的话,数据就会丢失,所以Memcached一般与其他缓存配合使用</p>\n<h3 id=\"缓存应用\"><a href=\"#缓存应用\" class=\"headerlink\" title=\"缓存应用\"></a>缓存应用</h3><blockquote>\n<p>在使用缓存之前，必选先选择一种缓存方式，按照上面的配置信息在 <code>settings.py</code>中实现对应配置。</p>\n</blockquote>\n<h4 id=\"全站使用缓存\"><a href=\"#全站使用缓存\" class=\"headerlink\" title=\"全站使用缓存\"></a>全站使用缓存</h4><blockquote>\n<p>如果想要对整个项目的<strong>所有</strong><code>GET</code>和<code>HEAD</code>方法的正常返回结果进行缓存，可以通过<strong>中间件</strong>实现</p>\n</blockquote>\n<ul>\n<li>用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用<code>FetchFromCacheMiddleware</code>获取内容并返回给用户</li>\n<li>当返回给用户之前，判断缓存中是否已经存在，如果不存在，则<code>UpdateCacheMiddleware</code>会将缓存保存至Django的缓存之中，以实现全站缓存</li>\n<li>请求来了，是从上到下入走中间件；响应的时候是从下到上走中间件。因此，获取页面放在最后，保存页面放最前面</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br> <span class=\"hljs-string\">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 响应HttpResponse中设置几个headers</span><br> <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 用来缓存通过GET和HEAD方法获取的状态码为200的响应</span><br>]<br> <br>CACHE__MIDDLEWARE_SECONDS=<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 设定超时时间为15秒</span><br></code></pre></div></td></tr></table></figure>\n<p>此时在中间件中已经设置过缓存，因此其余代码不变，视图中正常执行逻辑，即可实现全站缓存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        result += i<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></div></td></tr></table></figure>\n\n\n<h4 id=\"单独视图\"><a href=\"#单独视图\" class=\"headerlink\" title=\"单独视图\"></a>单独视图</h4><blockquote>\n<p>  如果不想对所有的查询结果缓存，而只是为<strong>单个视图</strong>函数添加缓存，就可以使用<strong>装饰器</strong>实现</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.views.decorators.cache <span class=\"hljs-keyword\">import</span> cache_page<br><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-meta\">@cache_page(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>)  </span><span class=\"hljs-comment\"># 缓存10秒</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        result += i<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></div></td></tr></table></figure>\n<p>因为缓存的原因,不停的刷新浏览器时会发现：第一次请求页面时，会等待5秒，计算完全部数据数据， 才可以返回结果；在下一次请求时，利用缓存结果，可以很快得到响应数据；直到10秒之后，缓存过期，重新进行该过程。</p>\n<h4 id=\"模板缓存\"><a href=\"#模板缓存\" class=\"headerlink\" title=\"模板缓存\"></a>模板缓存</h4><blockquote>\n<p>如果并不想对页面的其余部分做任何处理，只是相对页面的<strong>一部分</strong> 进行缓存， 就可以使用 <strong>模板缓存</strong> 实现</p>\n</blockquote>\n<p>如果想对缓存进行更多的控制，可以使用 <code>cache</code>模板标签来缓存模板的一个片段。</p>\n<p><code>views</code>视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;page.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;ctime&#x27;</span>: ctime&#125;)<br></code></pre></div></td></tr></table></figure>\n<p> 前端网页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&#123;% load cache %&#125;  <span class=\"hljs-comment\"># 放在缓存片段的上面</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;模板缓存&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;这里是未缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;<br><br><span class=\"hljs-comment\"># 将按给定的时间缓存包含块中的内容。 </span><br><span class=\"hljs-comment\"># 它最少需要两个参数：缓存时间（以秒为单位）；给缓存片段起的名称,该名称将被视为是字符串，而不是变量</span><br><span class=\"hljs-comment\"># 设定超时时间为10秒, 给缓存模板片段起名为 &quot;time&quot;</span><br>&#123;% cache <span class=\"hljs-number\">10</span> time %&#125;  <br>    &lt;p&gt;这里是缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;<br>&#123;% endcache %&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure>\n<p>刷新浏览器可以看到,第一个时间实时变化,后面一个时间每10秒钟变化一次</p>\n<h4 id=\"手动缓存\"><a href=\"#手动缓存\" class=\"headerlink\" title=\"手动缓存\"></a>手动缓存</h4><blockquote>\n<p>如果不想为一个方法（页面）进行缓存，只想缓存<strong>某个字段</strong>的话，可以 <strong>手动缓存</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.cache <span class=\"hljs-keyword\">import</span> cache<br><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = cache.get(<span class=\"hljs-string\">&#x27;result&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> result:<br>        result = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>            result += i<br>            time.sleep(<span class=\"hljs-number\">0.5</span>)<br>        cache.<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-string\">&#x27;result&#x27;</span>, result, <span class=\"hljs-number\">10</span>)<br><br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"Redis缓存\"><a href=\"#Redis缓存\" class=\"headerlink\" title=\"Redis缓存\"></a>Redis缓存</h2><p><a href=\"https://www.cnblogs.com/believepd/p/10275384.html#二、redis缓存\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"缓存简介\"><a href=\"#缓存简介\" class=\"headerlink\" title=\"缓存简介\"></a>缓存简介</h2><p>在动态网站中,用户所有的请求,服务器都会去数据库中进行相应的增,删,查,改,渲染模板,执行业务逻辑,最后生成用户看到的页面.</p>\n<p>当一个网站的用户访问量很大的时候,每一次的的后台操作,都会消耗很多的服务端资源,所以必须使用<strong>缓存</strong>来减轻后端服务器的压力.</p>\n<p>缓存是将一些常用的数据保存到<strong>内存</strong>或者<strong>memcache</strong>中,在一定的时间内有人来访问这些数据时,则不再去执行数据库及渲染等操作,而是直接从内存或memcache的缓存中去取得数据,然后返回给用户。</p>\n<h2 id=\"Django缓存\"><a href=\"#Django缓存\" class=\"headerlink\" title=\"Django缓存\"></a>Django缓存</h2><h3 id=\"缓存方式\"><a href=\"#缓存方式\" class=\"headerlink\" title=\"缓存方式\"></a>缓存方式</h3><blockquote>\n<p>  Django提供了6种缓存方式</p>\n</blockquote>\n<ul>\n<li>开发调试缓存</li>\n<li>内存缓存</li>\n<li>文件缓存</li>\n<li>数据库缓存</li>\n<li>Memcache缓存(使用<code>python-memcached</code>模块)</li>\n<li>Memcache缓存(使用<code>pylibmc</code>模块)</li>\n</ul>\n<p>经常使用的有<strong>文件缓存</strong>和<strong>Mencache</strong>缓存, 而选用不同的缓存方式，实际就是需要缓存的数据保存的位置不同。只需要修改django项目的配置文件<code>settings.py</code>，即可实现不同缓存方式的切换。</p>\n<h4 id=\"开发调试\"><a href=\"#开发调试\" class=\"headerlink\" title=\"开发调试\"></a>开发调试</h4><blockquote>\n<p>  此模式为开发调试使用,实际上不执行任何操作</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.dummy.DummyCache&#x27;</span>,  <span class=\"hljs-comment\"># 缓存后台使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"内存缓存\"><a href=\"#内存缓存\" class=\"headerlink\" title=\"内存缓存\"></a>内存缓存</h4><blockquote>\n<p>  将缓存内容保存至内存区域中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.locmem.LocMemCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;unique-snowflake&#x27;</span>,  <span class=\"hljs-comment\"># 写在内存中的变量的唯一值 </span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间(默认为300秒,None表示永不过期)</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"文件缓存\"><a href=\"#文件缓存\" class=\"headerlink\" title=\"文件缓存\"></a>文件缓存</h4><blockquote>\n<p>  把缓存数据存储在文件中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.filebased.FileBasedCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;/var/tmp/django_cache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存的路径</span><br>        <span class=\"hljs-string\">&#x27;TIMEOUT&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 缓存超时时间(默认为300秒,None表示永不过期)</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"数据库缓存\"><a href=\"#数据库缓存\" class=\"headerlink\" title=\"数据库缓存\"></a>数据库缓存</h4><blockquote>\n<p>  把缓存数据存储在数据库中</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.db.DatabaseCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;cache_table&#x27;</span>,  <span class=\"hljs-comment\"># 数据库表    </span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>注意,创建缓存的数据库表使用的语句:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">python manage.py createcachetable<br></code></pre></td></tr></table></figure>\n<h4 id=\"Memcached缓存\"><a href=\"#Memcached缓存\" class=\"headerlink\" title=\"Memcached缓存\"></a>Memcached缓存</h4><p>Memcached是Django原生支持的缓存系统.要使用Memcached,需要下载Memcached的支持库<code>python-memcached</code>或<code>pylibmc</code>.</p>\n<blockquote>\n<p>  使用<code>python-memcached</code>模块连接memcache</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;192.168.10.100:11211&#x27;</span>,  <span class=\"hljs-comment\"># 指定Memcache缓存服务器的IP地址和端口</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>  使用<code>pylibmc</code>模块连接memcache</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">CACHES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;BACKEND&#x27;</span>: <span class=\"hljs-string\">&#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;</span>,  <span class=\"hljs-comment\"># 指定缓存使用的引擎</span><br>        <span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>: <span class=\"hljs-string\">&#x27;192.168.10.100:11211&#x27;</span>,  <span class=\"hljs-comment\"># 指定本机的11211端口为Memcache缓存服务器</span><br>        <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class=\"hljs-string\">&#x27;MAX_ENTRIES&#x27;</span>: <span class=\"hljs-number\">300</span>,  <span class=\"hljs-comment\"># 最大缓存记录的数量（默认300）</span><br>            <span class=\"hljs-string\">&#x27;CULL_FREQUENCY&#x27;</span>: <span class=\"hljs-number\">3</span>,  <span class=\"hljs-comment\"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br>        &#125;,<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>Memcached是基于内存的缓存,数据存储在内存中.所以如果服务器死机的话,数据就会丢失,所以Memcached一般与其他缓存配合使用</p>\n<h3 id=\"缓存应用\"><a href=\"#缓存应用\" class=\"headerlink\" title=\"缓存应用\"></a>缓存应用</h3><blockquote>\n<p>在使用缓存之前，必选先选择一种缓存方式，按照上面的配置信息在 <code>settings.py</code>中实现对应配置。</p>\n</blockquote>\n<h4 id=\"全站使用缓存\"><a href=\"#全站使用缓存\" class=\"headerlink\" title=\"全站使用缓存\"></a>全站使用缓存</h4><blockquote>\n<p>如果想要对整个项目的<strong>所有</strong><code>GET</code>和<code>HEAD</code>方法的正常返回结果进行缓存，可以通过<strong>中间件</strong>实现</p>\n</blockquote>\n<ul>\n<li>用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用<code>FetchFromCacheMiddleware</code>获取内容并返回给用户</li>\n<li>当返回给用户之前，判断缓存中是否已经存在，如果不存在，则<code>UpdateCacheMiddleware</code>会将缓存保存至Django的缓存之中，以实现全站缓存</li>\n<li>请求来了，是从上到下入走中间件；响应的时候是从下到上走中间件。因此，获取页面放在最后，保存页面放最前面</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">MIDDLEWARE = [<br> <span class=\"hljs-string\">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 响应HttpResponse中设置几个headers</span><br> <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br> <span class=\"hljs-string\">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,  <span class=\"hljs-comment\"># 用来缓存通过GET和HEAD方法获取的状态码为200的响应</span><br>]<br> <br>CACHE__MIDDLEWARE_SECONDS=<span class=\"hljs-number\">15</span>  <span class=\"hljs-comment\"># 设定超时时间为15秒</span><br></code></pre></td></tr></table></figure>\n<p>此时在中间件中已经设置过缓存，因此其余代码不变，视图中正常执行逻辑，即可实现全站缓存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        result += i<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"单独视图\"><a href=\"#单独视图\" class=\"headerlink\" title=\"单独视图\"></a>单独视图</h4><blockquote>\n<p>  如果不想对所有的查询结果缓存，而只是为<strong>单个视图</strong>函数添加缓存，就可以使用<strong>装饰器</strong>实现</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.views.decorators.cache <span class=\"hljs-keyword\">import</span> cache_page<br><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-meta\">@cache_page(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>)  </span><span class=\"hljs-comment\"># 缓存10秒</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        result += i<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></td></tr></table></figure>\n<p>因为缓存的原因,不停的刷新浏览器时会发现：第一次请求页面时，会等待5秒，计算完全部数据数据， 才可以返回结果；在下一次请求时，利用缓存结果，可以很快得到响应数据；直到10秒之后，缓存过期，重新进行该过程。</p>\n<h4 id=\"模板缓存\"><a href=\"#模板缓存\" class=\"headerlink\" title=\"模板缓存\"></a>模板缓存</h4><blockquote>\n<p>如果并不想对页面的其余部分做任何处理，只是相对页面的<strong>一部分</strong> 进行缓存， 就可以使用 <strong>模板缓存</strong> 实现</p>\n</blockquote>\n<p>如果想对缓存进行更多的控制，可以使用 <code>cache</code>模板标签来缓存模板的一个片段。</p>\n<p><code>views</code>视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&#x27;page.html&#x27;</span>, &#123;<span class=\"hljs-string\">&#x27;ctime&#x27;</span>: ctime&#125;)<br></code></pre></td></tr></table></figure>\n<p> 前端网页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&#123;% load cache %&#125;  <span class=\"hljs-comment\"># 放在缓存片段的上面</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;模板缓存&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;这里是未缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;<br><br><span class=\"hljs-comment\"># 将按给定的时间缓存包含块中的内容。 </span><br><span class=\"hljs-comment\"># 它最少需要两个参数：缓存时间（以秒为单位）；给缓存片段起的名称,该名称将被视为是字符串，而不是变量</span><br><span class=\"hljs-comment\"># 设定超时时间为10秒, 给缓存模板片段起名为 &quot;time&quot;</span><br>&#123;% cache <span class=\"hljs-number\">10</span> time %&#125;  <br>    &lt;p&gt;这里是缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;<br>&#123;% endcache %&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n<p>刷新浏览器可以看到,第一个时间实时变化,后面一个时间每10秒钟变化一次</p>\n<h4 id=\"手动缓存\"><a href=\"#手动缓存\" class=\"headerlink\" title=\"手动缓存\"></a>手动缓存</h4><blockquote>\n<p>如果不想为一个方法（页面）进行缓存，只想缓存<strong>某个字段</strong>的话，可以 <strong>手动缓存</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.cache <span class=\"hljs-keyword\">import</span> cache<br><span class=\"hljs-keyword\">from</span> django.http.response <span class=\"hljs-keyword\">import</span> HttpResponse<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>(<span class=\"hljs-params\">request</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;视图函数被调用&#x27;</span>)<br>    result = cache.get(<span class=\"hljs-string\">&#x27;result&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> result:<br>        result = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>            result += i<br>            time.sleep(<span class=\"hljs-number\">0.5</span>)<br>        cache.<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-string\">&#x27;result&#x27;</span>, result, <span class=\"hljs-number\">10</span>)<br><br>    ctime = time.strftime(<span class=\"hljs-string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime())<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(ctime, result))<br></code></pre></td></tr></table></figure>\n<h2 id=\"Redis缓存\"><a href=\"#Redis缓存\" class=\"headerlink\" title=\"Redis缓存\"></a>Redis缓存</h2><p><a href=\"https://www.cnblogs.com/believepd/p/10275384.html#二、redis缓存\">参考</a></p>\n"},{"title":"Django-邮件发送","date":"2020-12-03T14:07:31.000Z","_content":"\n我们常常会用到一些发送邮件的功能，比如：有人注册网站之后，需要向其邮箱中发送激活链接，只有点击激活链接，激活账户之后，才允许登录。\n\n## 配置相关参数\n\n在 settings.py 的最后面加上类似这些\n\n```python\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = False   # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)\nEMAIL_USE_SSL = True    # 是否使用SSL加密，qq企业邮箱要求使用\nEMAIL_HOST = 'smtp.163.com'   # 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱\nEMAIL_PORT = 465     # 发件箱的SMTP服务器端口\nEMAIL_HOST_USER = 'xxxxx@xmdaren.com'    # 发送邮件的邮箱地址\nEMAIL_HOST_PASSWORD = '*********'         # 发送邮件的邮箱密码(这里使用的是授权码)\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # 默认的发送方\n```\n\nDEFAULT_FROM_EMAIL 还可以写成这样：\n\n```python\nDEFAULT_FROM_EMAIL = 'mac <mac@163.com>'\n```\n\n这样别人收到的邮件中就会有你设定的名称。\n\n下面是一些常用的邮箱：\n\n[163 邮箱](http://help.163.com/09/1223/14/5R7P3QI100753VB8.html)   [126 邮箱](http://www.126.com/help/client_04.htm)  [QQ 邮箱](https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=166&&id=28)\n\n其它邮箱参数可以登陆邮箱寻找帮助信息，也可以尝试在搜索引擎中搜索：\"SMTP 邮箱名称\"，比如：\"163 SMTP\" 进行查找。\n\n## 发送邮件\n\n 发送普通邮件可以使用`django.core.mail`模块下的`send_mail`函数进行\n\n```python\nsend_mail(subject, message, from_email, recipient_list, fail_silently=False, html_message=None)\n# 将邮件发送至recipient_list中的每一个收件人\n'''\nsubject: 发送邮件标题\nmessage: 发送邮件正文\nfrom_email: 发件人邮箱地址\nrecipient_list: 一个字符串列表，每一个数据为接收者的邮箱地址\nhtml_message: 如果指定该值，则发送的内容类型为text/html为一个html邮件内容\n'''\n```\n\n\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\n\n\ndef send_regiser_active_email(to_email, username, token):\n    '''发送激活邮件'''\n    active_url = \"{}/user/active/{}\".format(settings.HOST_URL, token)\n    subject = \"xxx欢迎信息\"\n    message = '邮件正文'\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = '<h1>{}, 欢迎您成为xxx注册会员</h1>请点击下面链接激活您的账户<br/><a href=\"{}\">{}</a>'.format(username, active_url,\n                                                                                            active_url)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    \n```\n\n## itsdangerous\n\n有时您只想将一些数据发送到不受信任的环境。但是如何安全地做到这一点？诀窍就是签名。只要知道一个密钥，您就可以对数据进行加密签名并将其移交给其他人。当您取回数据时，可以轻松确保没有人篡改数据。使用itsdangerous可以实现此种方案。\n\n```python\nfrom itsdangerous import TimedJSONWebSignatureSerializer as TJSS\n\nsalt='abcdefg' # 这里就是配置加密的规则\n\nserializer=TJSS(salt,expires_in=3600) # 过期时间一小时\nuser_info = {'user_id':1}\n# 加密阶段\nres = serializer.dumps(user_info)  # 得到加密后的数据，会返回一个字节类型的数据\ntoken = res.decode() # 解码为str\nprint(token)\n# 得到的数据如下，就是包含数据和盐值的token了，只有在知道盐值的时候才能被解密出来\n#eyJhbGciOiJIUzUxMiIsImlhdCI6MTU2MjY0Nzg4NCwiZXhwIjoxNTYyNjUxNDg0fQ.eyJjb25maXJtIjo1fQ.93DtXu9vHQDW0lr7saJhDBt-dcBxNNh_IMTR-JhWnrT-ujQ9SwevSUyW0p2txLS-gtyRHPlH1eD9INksIWilkA\n\n# 解密阶段\nres=serializer.loads(token)\nprint(res)\n# 返回的数据如下：\n# {'user_id':1}\n```\n\n> 当token被修改时，解密时，会抛出 `itsdangerous.Badsignature`\n>\n> 当token过期时, 解密时，会抛出 `itsdangerous.SignatureExpired: Signature expired`\n\n## 邮件激活\n\n注册成功，发送激活链接\n\n```python\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n    \n    \n# 加密用户信息，生成token\ninfo = {'confirm': user.id}\nserializer = Serializer(settings.SECRET_KEY, 3600)\ntoken = serializer.dumps(info).decode()\n\n# 发送邮件\nsend_regiser_active_email(email, username, token)\n\n```\n\n用户点击激活链接，进行账户激活\n\n```python\n# 进行解密， 获取要激活的用户信息\nserializer = Serializer(settings.SECRET_KEY, 3600)\ntry:\n    # 获取用户id\n    info = serializer.loads(token)  # 在路由匹配中，获取token\nexcept (SignatureExpired, BadSignature) as error:\n    return redirect(reverse(\"user:activeemail\"))  # 激活失败，重写跳转到邮箱激活页面\n\nelse:\n    user_id = info.get(\"confirm\")\n    # 获取用户信息\n    user = User.objects.get(id=user_id)\n    user.is_active = 1\n    user.save()\n\n    # 跳转到登录界面\n    return redirect(reverse('user:login'))  # 激活成功，跳转到登录页面      \n```\n\n","source":"_posts/Django-邮件发送.md","raw":"---\ntitle: Django-邮件发送\ndate: 2020-12-03 22:07:31\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - 邮件\n  - itsdangerous\n  - 临时身份令牌\n---\n\n我们常常会用到一些发送邮件的功能，比如：有人注册网站之后，需要向其邮箱中发送激活链接，只有点击激活链接，激活账户之后，才允许登录。\n\n## 配置相关参数\n\n在 settings.py 的最后面加上类似这些\n\n```python\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_USE_TLS = False   # 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)\nEMAIL_USE_SSL = True    # 是否使用SSL加密，qq企业邮箱要求使用\nEMAIL_HOST = 'smtp.163.com'   # 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱\nEMAIL_PORT = 465     # 发件箱的SMTP服务器端口\nEMAIL_HOST_USER = 'xxxxx@xmdaren.com'    # 发送邮件的邮箱地址\nEMAIL_HOST_PASSWORD = '*********'         # 发送邮件的邮箱密码(这里使用的是授权码)\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # 默认的发送方\n```\n\nDEFAULT_FROM_EMAIL 还可以写成这样：\n\n```python\nDEFAULT_FROM_EMAIL = 'mac <mac@163.com>'\n```\n\n这样别人收到的邮件中就会有你设定的名称。\n\n下面是一些常用的邮箱：\n\n[163 邮箱](http://help.163.com/09/1223/14/5R7P3QI100753VB8.html)   [126 邮箱](http://www.126.com/help/client_04.htm)  [QQ 邮箱](https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=166&&id=28)\n\n其它邮箱参数可以登陆邮箱寻找帮助信息，也可以尝试在搜索引擎中搜索：\"SMTP 邮箱名称\"，比如：\"163 SMTP\" 进行查找。\n\n## 发送邮件\n\n 发送普通邮件可以使用`django.core.mail`模块下的`send_mail`函数进行\n\n```python\nsend_mail(subject, message, from_email, recipient_list, fail_silently=False, html_message=None)\n# 将邮件发送至recipient_list中的每一个收件人\n'''\nsubject: 发送邮件标题\nmessage: 发送邮件正文\nfrom_email: 发件人邮箱地址\nrecipient_list: 一个字符串列表，每一个数据为接收者的邮箱地址\nhtml_message: 如果指定该值，则发送的内容类型为text/html为一个html邮件内容\n'''\n```\n\n\n\n```python\nfrom django.conf import settings\nfrom django.core.mail import send_mail\n\n\ndef send_regiser_active_email(to_email, username, token):\n    '''发送激活邮件'''\n    active_url = \"{}/user/active/{}\".format(settings.HOST_URL, token)\n    subject = \"xxx欢迎信息\"\n    message = '邮件正文'\n    sender = settings.DEFAULT_FROM_EMAIL\n    receiver = [to_email]\n    html_message = '<h1>{}, 欢迎您成为xxx注册会员</h1>请点击下面链接激活您的账户<br/><a href=\"{}\">{}</a>'.format(username, active_url,\n                                                                                            active_url)\n    send_mail(subject, message, sender, receiver, html_message=html_message)\n    \n```\n\n## itsdangerous\n\n有时您只想将一些数据发送到不受信任的环境。但是如何安全地做到这一点？诀窍就是签名。只要知道一个密钥，您就可以对数据进行加密签名并将其移交给其他人。当您取回数据时，可以轻松确保没有人篡改数据。使用itsdangerous可以实现此种方案。\n\n```python\nfrom itsdangerous import TimedJSONWebSignatureSerializer as TJSS\n\nsalt='abcdefg' # 这里就是配置加密的规则\n\nserializer=TJSS(salt,expires_in=3600) # 过期时间一小时\nuser_info = {'user_id':1}\n# 加密阶段\nres = serializer.dumps(user_info)  # 得到加密后的数据，会返回一个字节类型的数据\ntoken = res.decode() # 解码为str\nprint(token)\n# 得到的数据如下，就是包含数据和盐值的token了，只有在知道盐值的时候才能被解密出来\n#eyJhbGciOiJIUzUxMiIsImlhdCI6MTU2MjY0Nzg4NCwiZXhwIjoxNTYyNjUxNDg0fQ.eyJjb25maXJtIjo1fQ.93DtXu9vHQDW0lr7saJhDBt-dcBxNNh_IMTR-JhWnrT-ujQ9SwevSUyW0p2txLS-gtyRHPlH1eD9INksIWilkA\n\n# 解密阶段\nres=serializer.loads(token)\nprint(res)\n# 返回的数据如下：\n# {'user_id':1}\n```\n\n> 当token被修改时，解密时，会抛出 `itsdangerous.Badsignature`\n>\n> 当token过期时, 解密时，会抛出 `itsdangerous.SignatureExpired: Signature expired`\n\n## 邮件激活\n\n注册成功，发送激活链接\n\n```python\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n    \n    \n# 加密用户信息，生成token\ninfo = {'confirm': user.id}\nserializer = Serializer(settings.SECRET_KEY, 3600)\ntoken = serializer.dumps(info).decode()\n\n# 发送邮件\nsend_regiser_active_email(email, username, token)\n\n```\n\n用户点击激活链接，进行账户激活\n\n```python\n# 进行解密， 获取要激活的用户信息\nserializer = Serializer(settings.SECRET_KEY, 3600)\ntry:\n    # 获取用户id\n    info = serializer.loads(token)  # 在路由匹配中，获取token\nexcept (SignatureExpired, BadSignature) as error:\n    return redirect(reverse(\"user:activeemail\"))  # 激活失败，重写跳转到邮箱激活页面\n\nelse:\n    user_id = info.get(\"confirm\")\n    # 获取用户信息\n    user = User.objects.get(id=user_id)\n    user.is_active = 1\n    user.save()\n\n    # 跳转到登录界面\n    return redirect(reverse('user:login'))  # 激活成功，跳转到登录页面      \n```\n\n","slug":"Django-邮件发送","published":1,"updated":"2020-12-04T01:03:58.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubv000xjjlngt287qps","content":"<p>我们常常会用到一些发送邮件的功能，比如：有人注册网站之后，需要向其邮箱中发送激活链接，只有点击激活链接，激活账户之后，才允许登录。</p>\n<h2 id=\"配置相关参数\"><a href=\"#配置相关参数\" class=\"headerlink\" title=\"配置相关参数\"></a>配置相关参数</h2><p>在 settings.py 的最后面加上类似这些</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">EMAIL_BACKEND = <span class=\"hljs-string\">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br>EMAIL_USE_TLS = <span class=\"hljs-literal\">False</span>   <span class=\"hljs-comment\"># 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)</span><br>EMAIL_USE_SSL = <span class=\"hljs-literal\">True</span>    <span class=\"hljs-comment\"># 是否使用SSL加密，qq企业邮箱要求使用</span><br>EMAIL_HOST = <span class=\"hljs-string\">&#x27;smtp.163.com&#x27;</span>   <span class=\"hljs-comment\"># 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱</span><br>EMAIL_PORT = <span class=\"hljs-number\">465</span>     <span class=\"hljs-comment\"># 发件箱的SMTP服务器端口</span><br>EMAIL_HOST_USER = <span class=\"hljs-string\">&#x27;xxxxx@xmdaren.com&#x27;</span>    <span class=\"hljs-comment\"># 发送邮件的邮箱地址</span><br>EMAIL_HOST_PASSWORD = <span class=\"hljs-string\">&#x27;*********&#x27;</span>         <span class=\"hljs-comment\"># 发送邮件的邮箱密码(这里使用的是授权码)</span><br>DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  <span class=\"hljs-comment\"># 默认的发送方</span><br></code></pre></div></td></tr></table></figure>\n<p>DEFAULT_FROM_EMAIL 还可以写成这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">DEFAULT_FROM_EMAIL = <span class=\"hljs-string\">&#x27;mac &lt;mac@163.com&gt;&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p>这样别人收到的邮件中就会有你设定的名称。</p>\n<p>下面是一些常用的邮箱：</p>\n<p><a href=\"http://help.163.com/09/1223/14/5R7P3QI100753VB8.html\">163 邮箱</a>   <a href=\"http://www.126.com/help/client_04.htm\">126 邮箱</a>  <a href=\"https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=166&&id=28\">QQ 邮箱</a></p>\n<p>其它邮箱参数可以登陆邮箱寻找帮助信息，也可以尝试在搜索引擎中搜索：”SMTP 邮箱名称”，比如：”163 SMTP” 进行查找。</p>\n<h2 id=\"发送邮件\"><a href=\"#发送邮件\" class=\"headerlink\" title=\"发送邮件\"></a>发送邮件</h2><p> 发送普通邮件可以使用<code>django.core.mail</code>模块下的<code>send_mail</code>函数进行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">send_mail(subject, message, from_email, recipient_list, fail_silently=<span class=\"hljs-literal\">False</span>, html_message=<span class=\"hljs-literal\">None</span>)<br><span class=\"hljs-comment\"># 将邮件发送至recipient_list中的每一个收件人</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">subject: 发送邮件标题</span><br><span class=\"hljs-string\">message: 发送邮件正文</span><br><span class=\"hljs-string\">from_email: 发件人邮箱地址</span><br><span class=\"hljs-string\">recipient_list: 一个字符串列表，每一个数据为接收者的邮箱地址</span><br><span class=\"hljs-string\">html_message: 如果指定该值，则发送的内容类型为text/html为一个html邮件内容</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.conf <span class=\"hljs-keyword\">import</span> settings<br><span class=\"hljs-keyword\">from</span> django.core.mail <span class=\"hljs-keyword\">import</span> send_mail<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_regiser_active_email</span>(<span class=\"hljs-params\">to_email, username, token</span>):</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;发送激活邮件&#x27;&#x27;&#x27;</span><br>    active_url = <span class=\"hljs-string\">&quot;&#123;&#125;/user/active/&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(settings.HOST_URL, token)<br>    subject = <span class=\"hljs-string\">&quot;xxx欢迎信息&quot;</span><br>    message = <span class=\"hljs-string\">&#x27;邮件正文&#x27;</span><br>    sender = settings.DEFAULT_FROM_EMAIL<br>    receiver = [to_email]<br>    html_message = <span class=\"hljs-string\">&#x27;&lt;h1&gt;&#123;&#125;, 欢迎您成为xxx注册会员&lt;/h1&gt;请点击下面链接激活您的账户&lt;br/&gt;&lt;a href=&quot;&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(username, active_url,<br>                                                                                            active_url)<br>    send_mail(subject, message, sender, receiver, html_message=html_message)<br>    <br></code></pre></div></td></tr></table></figure>\n<h2 id=\"itsdangerous\"><a href=\"#itsdangerous\" class=\"headerlink\" title=\"itsdangerous\"></a>itsdangerous</h2><p>有时您只想将一些数据发送到不受信任的环境。但是如何安全地做到这一点？诀窍就是签名。只要知道一个密钥，您就可以对数据进行加密签名并将其移交给其他人。当您取回数据时，可以轻松确保没有人篡改数据。使用itsdangerous可以实现此种方案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> TimedJSONWebSignatureSerializer <span class=\"hljs-keyword\">as</span> TJSS<br><br>salt=<span class=\"hljs-string\">&#x27;abcdefg&#x27;</span> <span class=\"hljs-comment\"># 这里就是配置加密的规则</span><br><br>serializer=TJSS(salt,expires_in=<span class=\"hljs-number\">3600</span>) <span class=\"hljs-comment\"># 过期时间一小时</span><br>user_info = &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>:<span class=\"hljs-number\">1</span>&#125;<br><span class=\"hljs-comment\"># 加密阶段</span><br>res = serializer.dumps(user_info)  <span class=\"hljs-comment\"># 得到加密后的数据，会返回一个字节类型的数据</span><br>token = res.decode() <span class=\"hljs-comment\"># 解码为str</span><br>print(token)<br><span class=\"hljs-comment\"># 得到的数据如下，就是包含数据和盐值的token了，只有在知道盐值的时候才能被解密出来</span><br><span class=\"hljs-comment\">#eyJhbGciOiJIUzUxMiIsImlhdCI6MTU2MjY0Nzg4NCwiZXhwIjoxNTYyNjUxNDg0fQ.eyJjb25maXJtIjo1fQ.93DtXu9vHQDW0lr7saJhDBt-dcBxNNh_IMTR-JhWnrT-ujQ9SwevSUyW0p2txLS-gtyRHPlH1eD9INksIWilkA</span><br><br><span class=\"hljs-comment\"># 解密阶段</span><br>res=serializer.loads(token)<br>print(res)<br><span class=\"hljs-comment\"># 返回的数据如下：</span><br><span class=\"hljs-comment\"># &#123;&#x27;user_id&#x27;:1&#125;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>当token被修改时，解密时，会抛出 <code>itsdangerous.Badsignature</code></p>\n<p>当token过期时, 解密时，会抛出 <code>itsdangerous.SignatureExpired: Signature expired</code></p>\n</blockquote>\n<h2 id=\"邮件激活\"><a href=\"#邮件激活\" class=\"headerlink\" title=\"邮件激活\"></a>邮件激活</h2><p>注册成功，发送激活链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> TimedJSONWebSignatureSerializer <span class=\"hljs-keyword\">as</span> Serializer<br>    <br>    <br><span class=\"hljs-comment\"># 加密用户信息，生成token</span><br>info = &#123;<span class=\"hljs-string\">&#x27;confirm&#x27;</span>: user.<span class=\"hljs-built_in\">id</span>&#125;<br>serializer = Serializer(settings.SECRET_KEY, <span class=\"hljs-number\">3600</span>)<br>token = serializer.dumps(info).decode()<br><br><span class=\"hljs-comment\"># 发送邮件</span><br>send_regiser_active_email(email, username, token)<br><br></code></pre></div></td></tr></table></figure>\n<p>用户点击激活链接，进行账户激活</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 进行解密， 获取要激活的用户信息</span><br>serializer = Serializer(settings.SECRET_KEY, <span class=\"hljs-number\">3600</span>)<br><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-comment\"># 获取用户id</span><br>    info = serializer.loads(token)  <span class=\"hljs-comment\"># 在路由匹配中，获取token</span><br><span class=\"hljs-keyword\">except</span> (SignatureExpired, BadSignature) <span class=\"hljs-keyword\">as</span> error:<br>    <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&quot;user:activeemail&quot;</span>))  <span class=\"hljs-comment\"># 激活失败，重写跳转到邮箱激活页面</span><br><br><span class=\"hljs-keyword\">else</span>:<br>    user_id = info.get(<span class=\"hljs-string\">&quot;confirm&quot;</span>)<br>    <span class=\"hljs-comment\"># 获取用户信息</span><br>    user = User.objects.get(<span class=\"hljs-built_in\">id</span>=user_id)<br>    user.is_active = <span class=\"hljs-number\">1</span><br>    user.save()<br><br>    <span class=\"hljs-comment\"># 跳转到登录界面</span><br>    <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;user:login&#x27;</span>))  <span class=\"hljs-comment\"># 激活成功，跳转到登录页面      </span><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>我们常常会用到一些发送邮件的功能，比如：有人注册网站之后，需要向其邮箱中发送激活链接，只有点击激活链接，激活账户之后，才允许登录。</p>\n<h2 id=\"配置相关参数\"><a href=\"#配置相关参数\" class=\"headerlink\" title=\"配置相关参数\"></a>配置相关参数</h2><p>在 settings.py 的最后面加上类似这些</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">EMAIL_BACKEND = <span class=\"hljs-string\">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br>EMAIL_USE_TLS = <span class=\"hljs-literal\">False</span>   <span class=\"hljs-comment\"># 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)</span><br>EMAIL_USE_SSL = <span class=\"hljs-literal\">True</span>    <span class=\"hljs-comment\"># 是否使用SSL加密，qq企业邮箱要求使用</span><br>EMAIL_HOST = <span class=\"hljs-string\">&#x27;smtp.163.com&#x27;</span>   <span class=\"hljs-comment\"># 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱</span><br>EMAIL_PORT = <span class=\"hljs-number\">465</span>     <span class=\"hljs-comment\"># 发件箱的SMTP服务器端口</span><br>EMAIL_HOST_USER = <span class=\"hljs-string\">&#x27;xxxxx@xmdaren.com&#x27;</span>    <span class=\"hljs-comment\"># 发送邮件的邮箱地址</span><br>EMAIL_HOST_PASSWORD = <span class=\"hljs-string\">&#x27;*********&#x27;</span>         <span class=\"hljs-comment\"># 发送邮件的邮箱密码(这里使用的是授权码)</span><br>DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  <span class=\"hljs-comment\"># 默认的发送方</span><br></code></pre></td></tr></table></figure>\n<p>DEFAULT_FROM_EMAIL 还可以写成这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DEFAULT_FROM_EMAIL = <span class=\"hljs-string\">&#x27;mac &lt;mac@163.com&gt;&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>这样别人收到的邮件中就会有你设定的名称。</p>\n<p>下面是一些常用的邮箱：</p>\n<p><a href=\"http://help.163.com/09/1223/14/5R7P3QI100753VB8.html\">163 邮箱</a>   <a href=\"http://www.126.com/help/client_04.htm\">126 邮箱</a>  <a href=\"https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=166&&id=28\">QQ 邮箱</a></p>\n<p>其它邮箱参数可以登陆邮箱寻找帮助信息，也可以尝试在搜索引擎中搜索：”SMTP 邮箱名称”，比如：”163 SMTP” 进行查找。</p>\n<h2 id=\"发送邮件\"><a href=\"#发送邮件\" class=\"headerlink\" title=\"发送邮件\"></a>发送邮件</h2><p> 发送普通邮件可以使用<code>django.core.mail</code>模块下的<code>send_mail</code>函数进行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">send_mail(subject, message, from_email, recipient_list, fail_silently=<span class=\"hljs-literal\">False</span>, html_message=<span class=\"hljs-literal\">None</span>)<br><span class=\"hljs-comment\"># 将邮件发送至recipient_list中的每一个收件人</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">subject: 发送邮件标题</span><br><span class=\"hljs-string\">message: 发送邮件正文</span><br><span class=\"hljs-string\">from_email: 发件人邮箱地址</span><br><span class=\"hljs-string\">recipient_list: 一个字符串列表，每一个数据为接收者的邮箱地址</span><br><span class=\"hljs-string\">html_message: 如果指定该值，则发送的内容类型为text/html为一个html邮件内容</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.conf <span class=\"hljs-keyword\">import</span> settings<br><span class=\"hljs-keyword\">from</span> django.core.mail <span class=\"hljs-keyword\">import</span> send_mail<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_regiser_active_email</span>(<span class=\"hljs-params\">to_email, username, token</span>):</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;发送激活邮件&#x27;&#x27;&#x27;</span><br>    active_url = <span class=\"hljs-string\">&quot;&#123;&#125;/user/active/&#123;&#125;&quot;</span>.<span class=\"hljs-built_in\">format</span>(settings.HOST_URL, token)<br>    subject = <span class=\"hljs-string\">&quot;xxx欢迎信息&quot;</span><br>    message = <span class=\"hljs-string\">&#x27;邮件正文&#x27;</span><br>    sender = settings.DEFAULT_FROM_EMAIL<br>    receiver = [to_email]<br>    html_message = <span class=\"hljs-string\">&#x27;&lt;h1&gt;&#123;&#125;, 欢迎您成为xxx注册会员&lt;/h1&gt;请点击下面链接激活您的账户&lt;br/&gt;&lt;a href=&quot;&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(username, active_url,<br>                                                                                            active_url)<br>    send_mail(subject, message, sender, receiver, html_message=html_message)<br>    <br></code></pre></td></tr></table></figure>\n<h2 id=\"itsdangerous\"><a href=\"#itsdangerous\" class=\"headerlink\" title=\"itsdangerous\"></a>itsdangerous</h2><p>有时您只想将一些数据发送到不受信任的环境。但是如何安全地做到这一点？诀窍就是签名。只要知道一个密钥，您就可以对数据进行加密签名并将其移交给其他人。当您取回数据时，可以轻松确保没有人篡改数据。使用itsdangerous可以实现此种方案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> TimedJSONWebSignatureSerializer <span class=\"hljs-keyword\">as</span> TJSS<br><br>salt=<span class=\"hljs-string\">&#x27;abcdefg&#x27;</span> <span class=\"hljs-comment\"># 这里就是配置加密的规则</span><br><br>serializer=TJSS(salt,expires_in=<span class=\"hljs-number\">3600</span>) <span class=\"hljs-comment\"># 过期时间一小时</span><br>user_info = &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>:<span class=\"hljs-number\">1</span>&#125;<br><span class=\"hljs-comment\"># 加密阶段</span><br>res = serializer.dumps(user_info)  <span class=\"hljs-comment\"># 得到加密后的数据，会返回一个字节类型的数据</span><br>token = res.decode() <span class=\"hljs-comment\"># 解码为str</span><br>print(token)<br><span class=\"hljs-comment\"># 得到的数据如下，就是包含数据和盐值的token了，只有在知道盐值的时候才能被解密出来</span><br><span class=\"hljs-comment\">#eyJhbGciOiJIUzUxMiIsImlhdCI6MTU2MjY0Nzg4NCwiZXhwIjoxNTYyNjUxNDg0fQ.eyJjb25maXJtIjo1fQ.93DtXu9vHQDW0lr7saJhDBt-dcBxNNh_IMTR-JhWnrT-ujQ9SwevSUyW0p2txLS-gtyRHPlH1eD9INksIWilkA</span><br><br><span class=\"hljs-comment\"># 解密阶段</span><br>res=serializer.loads(token)<br>print(res)<br><span class=\"hljs-comment\"># 返回的数据如下：</span><br><span class=\"hljs-comment\"># &#123;&#x27;user_id&#x27;:1&#125;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当token被修改时，解密时，会抛出 <code>itsdangerous.Badsignature</code></p>\n<p>当token过期时, 解密时，会抛出 <code>itsdangerous.SignatureExpired: Signature expired</code></p>\n</blockquote>\n<h2 id=\"邮件激活\"><a href=\"#邮件激活\" class=\"headerlink\" title=\"邮件激活\"></a>邮件激活</h2><p>注册成功，发送激活链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> itsdangerous <span class=\"hljs-keyword\">import</span> TimedJSONWebSignatureSerializer <span class=\"hljs-keyword\">as</span> Serializer<br>    <br>    <br><span class=\"hljs-comment\"># 加密用户信息，生成token</span><br>info = &#123;<span class=\"hljs-string\">&#x27;confirm&#x27;</span>: user.<span class=\"hljs-built_in\">id</span>&#125;<br>serializer = Serializer(settings.SECRET_KEY, <span class=\"hljs-number\">3600</span>)<br>token = serializer.dumps(info).decode()<br><br><span class=\"hljs-comment\"># 发送邮件</span><br>send_regiser_active_email(email, username, token)<br><br></code></pre></td></tr></table></figure>\n<p>用户点击激活链接，进行账户激活</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 进行解密， 获取要激活的用户信息</span><br>serializer = Serializer(settings.SECRET_KEY, <span class=\"hljs-number\">3600</span>)<br><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-comment\"># 获取用户id</span><br>    info = serializer.loads(token)  <span class=\"hljs-comment\"># 在路由匹配中，获取token</span><br><span class=\"hljs-keyword\">except</span> (SignatureExpired, BadSignature) <span class=\"hljs-keyword\">as</span> error:<br>    <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&quot;user:activeemail&quot;</span>))  <span class=\"hljs-comment\"># 激活失败，重写跳转到邮箱激活页面</span><br><br><span class=\"hljs-keyword\">else</span>:<br>    user_id = info.get(<span class=\"hljs-string\">&quot;confirm&quot;</span>)<br>    <span class=\"hljs-comment\"># 获取用户信息</span><br>    user = User.objects.get(<span class=\"hljs-built_in\">id</span>=user_id)<br>    user.is_active = <span class=\"hljs-number\">1</span><br>    user.save()<br><br>    <span class=\"hljs-comment\"># 跳转到登录界面</span><br>    <span class=\"hljs-keyword\">return</span> redirect(reverse(<span class=\"hljs-string\">&#x27;user:login&#x27;</span>))  <span class=\"hljs-comment\"># 激活成功，跳转到登录页面      </span><br></code></pre></td></tr></table></figure>\n"},{"title":"Flask易错点","date":"2019-03-22T14:58:58.000Z","_content":"#### 1 with上下文管理器\n\n常用：\n\n```python\nwith open(\"file_name\",\"wb\") as f:\n\tf.write(\"hello flask\")\n```\n\n自定义：\n\n```python\nclass Foo(gbiect):\n\tdef __enter__(self):\n\t\t\"\"\"进入with语句的时候被with调用\"\"\"\n\t\tprint(\"enter called\")\n\tdef __exit_(self, exc_type, exc_val, exc_tb):\n\t\t\"\"\"离开with语句的时候被with调用\"\"\"\n        print(\"exit called\")\n        print(\"exc_type:%s\" % exc_type)\n        print(\"exc_val:9%s\" % exc_val)\n\t\tprint(\"exc_tb:%s\"%exc_tb)\n\t\t\nwith Foo() as foo:\n    print(\"helto python\")\n    a=1/0\n    print(\"hello end\")\n```\n\n运行结果：\n\n> ```bash\n> enter called \n> Traceback (most recent call last): \n> hello python \n> \tFile\"/Users/delron/Desktop/code/03 with. py\", line 39, in <module>\n> exit called\n>      a=1/0\n> ZeroDivisionError: integer division or modulo by zero \n> exc_type:<type ' exceptions. ZeroDivisionError'>\n> exc_val: integer division or modulo by zero \n> exc_tb:<traceback object at 0x1097bc440>\n> \n> Process finished with exit code 1\n> ```\n\n#### 2 json模块\n\ndumps  —> 可以将字典转换为字符串\n\n```python\nimport json\ndata = {\"name\": \"python\", \"age\": 18}\njson_str = json.dumps(data)\nprint(type(json_str), json_str)\n```\n\n运行结果：\n\n```python\nstr      {\"age\": 18, \"name\": \"python\"}\n```\n\nloads ——> 将字符串转换为字典\n\n```python\nimport json\na = '{\"city\": \"sz\", \"country\": \"china\"}'\nb = json.loads(a)\nprint(type(b), b)\n```\n\n运行结果：\n\n```python\ndict      {\"city\": \"sz\", \"country\": \"china\"}\n```\n\n#### 3 xss攻击\n\n当前段传送过来的数据默认进行转义，否则，则会默认执行前端传送的数据，则称为xss攻击\n\n#### 4 flask 和mysql\n\n**Linux：**\n\n*flask使用mysql数据库需要：*\n\n1. **pymysql**\n2. **sqlalchemy**\n3. **flask_sqlalchemy**\n\n**windows：**\n\n***Flask利用pymysql出现Warning：1366的解决办法***\n\n*flask使用mysql数据库需要：*\n\n1. **mysql-connector-python**\n\n2. **sqlalchemy**\n\n3. **flask_sqlalchemy**\n\n   ```python\n   SQLALCHEMY_DATABASE_URI = \"mysql+mysqlconnector://root:mysql@localhost/ihome01\"\n   ```\n\n#### 5 装饰器\n\n```python\n@app.route(\"/\")\ndef index():\n   \treturn \"index page\"\n```\n\n```python\ndef index():\n   \treturn \"index page\"\napp.route(\"/)(index)\n```\n\n装饰器不仅仅是定义时可以用，还可以在定义完再使用\n\n#### 6 自定义正则转换器及蓝图\n\n```python\nfrom werkzeug.routing import BaseConverter\n\n# 定义正则转换器\nclass ReConverter(BaseConverter):\n\n    def __init__(self, url_map, regex):\n        # 调用父类初始化方法\n        super(ReConverter, self).__init__(url_map)\n        # 重新赋值\n        self.regex = regex\n```\n\n```python\n  # 添加自定义的转换器\n    app.url_map.converters[\"re\"] = ReConverter\n```\n\n\n\n```python\nfrom flask import Blueprint, current_app\n\nhtml = Blueprint(\"web_html\", __name__)\n\n@html.route(\"/<re(r'.*'):file_name>\")\ndef web_html(file_name):\n\n    if not file_name:\n        file_name = \"index.html\"\n\n    if file_name != \"favicon.ico\":\n        file_name = \"html/\" + file_name\n\n    return current_app.send_static_file(file_name)\n```\n\n```python\n# 注册蓝图\napp.register_blueprint(html)\n```\n\n#### 7 登录装饰器\n\n```python\n# 定义验证登录状态的装饰器\ndef login_required(view_func):\n    # wraps函数的作用是将wrapper内层函数的属性设置为被装饰函数view_func的属性\n    @functools.wraps(view_func)\n    def wrapper(*args, **kwargs):\n        # 判断用户登录状态\n        user_id = session.get(\"user_id\")\n\n        # 如果用户是登录状态，则执行登录状态\n        if user_id is not None:\n            # 将user_id保存到g对象中，在视图函数中，可以通过g对象获取保存数据\n            g.user_id = user_id\n            return view_func(*args, **kwargs)\n        # 如果未登录，则返回未登录信息\n        else:\n            return jsonify(errno=RET.SESSIONERR, errmsg=\"用户未登录\")\n    return wrapper\n```\n\n#### 8 视图函数 \n\n1. 路由匹配不能出现相同的地址，即同一地址，不能出现两个视图函数\n2. 路由匹配不能出现不同的函数，即不同的地址，不能出现相同的函数名\n\n#### 9 参数获取\n\n1. 直接从request中获取json数据，并将其转换为字典\n\n   ```python\n   house_data = request.get_json()\n   ```\n\n2. 从request中获取文件\n\n   ```python\n   image_file = request.files.get(\"house_image\")\n   ```\n\n3. 从request中的form表单中获取键值对\n\n   ```python\n   house_id = request.form.get(\"house_id\")\n   ```\n\n#### 10 数据库操作\n\n​\t在同一视图函数中，可以对对象多次修改，只提交一次即可\n\n```python\ndb.session.add(house_image)\ndb.session.add(house)\n\ntry:\n    db.session.commit()\nexcept Exception as e:\n    current_app.logger.error(e)\n    db.session.rollback()\n```\n\n","source":"_posts/Flask易错点.md","raw":"---\ntitle: Flask易错点\ncategories:\n  - 技术\n  - python\n  - Flask\ntags:\n  - 易错点\ndate: 2019-03-22 22:58:58\n---\n#### 1 with上下文管理器\n\n常用：\n\n```python\nwith open(\"file_name\",\"wb\") as f:\n\tf.write(\"hello flask\")\n```\n\n自定义：\n\n```python\nclass Foo(gbiect):\n\tdef __enter__(self):\n\t\t\"\"\"进入with语句的时候被with调用\"\"\"\n\t\tprint(\"enter called\")\n\tdef __exit_(self, exc_type, exc_val, exc_tb):\n\t\t\"\"\"离开with语句的时候被with调用\"\"\"\n        print(\"exit called\")\n        print(\"exc_type:%s\" % exc_type)\n        print(\"exc_val:9%s\" % exc_val)\n\t\tprint(\"exc_tb:%s\"%exc_tb)\n\t\t\nwith Foo() as foo:\n    print(\"helto python\")\n    a=1/0\n    print(\"hello end\")\n```\n\n运行结果：\n\n> ```bash\n> enter called \n> Traceback (most recent call last): \n> hello python \n> \tFile\"/Users/delron/Desktop/code/03 with. py\", line 39, in <module>\n> exit called\n>      a=1/0\n> ZeroDivisionError: integer division or modulo by zero \n> exc_type:<type ' exceptions. ZeroDivisionError'>\n> exc_val: integer division or modulo by zero \n> exc_tb:<traceback object at 0x1097bc440>\n> \n> Process finished with exit code 1\n> ```\n\n#### 2 json模块\n\ndumps  —> 可以将字典转换为字符串\n\n```python\nimport json\ndata = {\"name\": \"python\", \"age\": 18}\njson_str = json.dumps(data)\nprint(type(json_str), json_str)\n```\n\n运行结果：\n\n```python\nstr      {\"age\": 18, \"name\": \"python\"}\n```\n\nloads ——> 将字符串转换为字典\n\n```python\nimport json\na = '{\"city\": \"sz\", \"country\": \"china\"}'\nb = json.loads(a)\nprint(type(b), b)\n```\n\n运行结果：\n\n```python\ndict      {\"city\": \"sz\", \"country\": \"china\"}\n```\n\n#### 3 xss攻击\n\n当前段传送过来的数据默认进行转义，否则，则会默认执行前端传送的数据，则称为xss攻击\n\n#### 4 flask 和mysql\n\n**Linux：**\n\n*flask使用mysql数据库需要：*\n\n1. **pymysql**\n2. **sqlalchemy**\n3. **flask_sqlalchemy**\n\n**windows：**\n\n***Flask利用pymysql出现Warning：1366的解决办法***\n\n*flask使用mysql数据库需要：*\n\n1. **mysql-connector-python**\n\n2. **sqlalchemy**\n\n3. **flask_sqlalchemy**\n\n   ```python\n   SQLALCHEMY_DATABASE_URI = \"mysql+mysqlconnector://root:mysql@localhost/ihome01\"\n   ```\n\n#### 5 装饰器\n\n```python\n@app.route(\"/\")\ndef index():\n   \treturn \"index page\"\n```\n\n```python\ndef index():\n   \treturn \"index page\"\napp.route(\"/)(index)\n```\n\n装饰器不仅仅是定义时可以用，还可以在定义完再使用\n\n#### 6 自定义正则转换器及蓝图\n\n```python\nfrom werkzeug.routing import BaseConverter\n\n# 定义正则转换器\nclass ReConverter(BaseConverter):\n\n    def __init__(self, url_map, regex):\n        # 调用父类初始化方法\n        super(ReConverter, self).__init__(url_map)\n        # 重新赋值\n        self.regex = regex\n```\n\n```python\n  # 添加自定义的转换器\n    app.url_map.converters[\"re\"] = ReConverter\n```\n\n\n\n```python\nfrom flask import Blueprint, current_app\n\nhtml = Blueprint(\"web_html\", __name__)\n\n@html.route(\"/<re(r'.*'):file_name>\")\ndef web_html(file_name):\n\n    if not file_name:\n        file_name = \"index.html\"\n\n    if file_name != \"favicon.ico\":\n        file_name = \"html/\" + file_name\n\n    return current_app.send_static_file(file_name)\n```\n\n```python\n# 注册蓝图\napp.register_blueprint(html)\n```\n\n#### 7 登录装饰器\n\n```python\n# 定义验证登录状态的装饰器\ndef login_required(view_func):\n    # wraps函数的作用是将wrapper内层函数的属性设置为被装饰函数view_func的属性\n    @functools.wraps(view_func)\n    def wrapper(*args, **kwargs):\n        # 判断用户登录状态\n        user_id = session.get(\"user_id\")\n\n        # 如果用户是登录状态，则执行登录状态\n        if user_id is not None:\n            # 将user_id保存到g对象中，在视图函数中，可以通过g对象获取保存数据\n            g.user_id = user_id\n            return view_func(*args, **kwargs)\n        # 如果未登录，则返回未登录信息\n        else:\n            return jsonify(errno=RET.SESSIONERR, errmsg=\"用户未登录\")\n    return wrapper\n```\n\n#### 8 视图函数 \n\n1. 路由匹配不能出现相同的地址，即同一地址，不能出现两个视图函数\n2. 路由匹配不能出现不同的函数，即不同的地址，不能出现相同的函数名\n\n#### 9 参数获取\n\n1. 直接从request中获取json数据，并将其转换为字典\n\n   ```python\n   house_data = request.get_json()\n   ```\n\n2. 从request中获取文件\n\n   ```python\n   image_file = request.files.get(\"house_image\")\n   ```\n\n3. 从request中的form表单中获取键值对\n\n   ```python\n   house_id = request.form.get(\"house_id\")\n   ```\n\n#### 10 数据库操作\n\n​\t在同一视图函数中，可以对对象多次修改，只提交一次即可\n\n```python\ndb.session.add(house_image)\ndb.session.add(house)\n\ntry:\n    db.session.commit()\nexcept Exception as e:\n    current_app.logger.error(e)\n    db.session.rollback()\n```\n\n","slug":"Flask易错点","published":1,"updated":"2021-01-23T15:17:38.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnubx0010jjln0qd08iu4","content":"<h4 id=\"1-with上下文管理器\"><a href=\"#1-with上下文管理器\" class=\"headerlink\" title=\"1 with上下文管理器\"></a>1 with上下文管理器</h4><p>常用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;file_name&quot;</span>,<span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\tf.write(<span class=\"hljs-string\">&quot;hello flask&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<p>自定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">gbiect</span>):</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__enter__</span>(<span class=\"hljs-params\">self</span>):</span><br>\t\t<span class=\"hljs-string\">&quot;&quot;&quot;进入with语句的时候被with调用&quot;&quot;&quot;</span><br>\t\tprint(<span class=\"hljs-string\">&quot;enter called&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__exit_</span>(<span class=\"hljs-params\">self, exc_type, exc_val, exc_tb</span>):</span><br>\t\t<span class=\"hljs-string\">&quot;&quot;&quot;离开with语句的时候被with调用&quot;&quot;&quot;</span><br>        print(<span class=\"hljs-string\">&quot;exit called&quot;</span>)<br>        print(<span class=\"hljs-string\">&quot;exc_type:%s&quot;</span> % exc_type)<br>        print(<span class=\"hljs-string\">&quot;exc_val:9%s&quot;</span> % exc_val)<br>\t\tprint(<span class=\"hljs-string\">&quot;exc_tb:%s&quot;</span>%exc_tb)<br>\t\t<br><span class=\"hljs-keyword\">with</span> Foo() <span class=\"hljs-keyword\">as</span> foo:<br>    print(<span class=\"hljs-string\">&quot;helto python&quot;</span>)<br>    a=<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">0</span><br>    print(<span class=\"hljs-string\">&quot;hello end&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">enter called <br>Traceback (most recent call last): <br>hello python <br>\tFile<span class=\"hljs-string\">&quot;/Users/delron/Desktop/code/03 with. py&quot;</span>, line 39, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br><span class=\"hljs-built_in\">exit</span> called<br>     a=1/0<br>ZeroDivisionError: <span class=\"hljs-built_in\">integer</span> division or modulo by zero <br>exc_type:&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">&#x27; exceptions. ZeroDivisionError&#x27;</span>&gt;<br>exc_val: <span class=\"hljs-built_in\">integer</span> division or modulo by zero <br>exc_tb:&lt;traceback object at 0x1097bc440&gt;<br><br>Process finished with <span class=\"hljs-built_in\">exit</span> code 1<br></code></pre></div></td></tr></table></figure>\n</blockquote>\n<h4 id=\"2-json模块\"><a href=\"#2-json模块\" class=\"headerlink\" title=\"2 json模块\"></a>2 json模块</h4><p>dumps  —&gt; 可以将字典转换为字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>data = &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>&#125;<br>json_str = json.dumps(data)<br>print(<span class=\"hljs-built_in\">type</span>(json_str), json_str)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">str</span>      &#123;<span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>loads ——&gt; 将字符串转换为字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>a = <span class=\"hljs-string\">&#x27;&#123;&quot;city&quot;: &quot;sz&quot;, &quot;country&quot;: &quot;china&quot;&#125;&#x27;</span><br>b = json.loads(a)<br>print(<span class=\"hljs-built_in\">type</span>(b), b)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">dict</span>      &#123;<span class=\"hljs-string\">&quot;city&quot;</span>: <span class=\"hljs-string\">&quot;sz&quot;</span>, <span class=\"hljs-string\">&quot;country&quot;</span>: <span class=\"hljs-string\">&quot;china&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"3-xss攻击\"><a href=\"#3-xss攻击\" class=\"headerlink\" title=\"3 xss攻击\"></a>3 xss攻击</h4><p>当前段传送过来的数据默认进行转义，否则，则会默认执行前端传送的数据，则称为xss攻击</p>\n<h4 id=\"4-flask-和mysql\"><a href=\"#4-flask-和mysql\" class=\"headerlink\" title=\"4 flask 和mysql\"></a>4 flask 和mysql</h4><p><strong>Linux：</strong></p>\n<p><em>flask使用mysql数据库需要：</em></p>\n<ol>\n<li><strong>pymysql</strong></li>\n<li><strong>sqlalchemy</strong></li>\n<li><strong>flask_sqlalchemy</strong></li>\n</ol>\n<p><strong>windows：</strong></p>\n<p><strong><em>Flask利用pymysql出现Warning：1366的解决办法</em></strong></p>\n<p><em>flask使用mysql数据库需要：</em></p>\n<ol>\n<li><p><strong>mysql-connector-python</strong></p>\n</li>\n<li><p><strong>sqlalchemy</strong></p>\n</li>\n<li><p><strong>flask_sqlalchemy</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">SQLALCHEMY_DATABASE_URI = <span class=\"hljs-string\">&quot;mysql+mysqlconnector://root:mysql@localhost/ihome01&quot;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"5-装饰器\"><a href=\"#5-装饰器\" class=\"headerlink\" title=\"5 装饰器\"></a>5 装饰器</h4></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/&quot;</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>():</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;index page&quot;</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>():</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;index page&quot;</span><br>app.route(<span class=\"hljs-string\">&quot;/)(index)</span><br></code></pre></div></td></tr></table></figure>\n<p>装饰器不仅仅是定义时可以用，还可以在定义完再使用</p>\n<h4 id=\"6-自定义正则转换器及蓝图\"><a href=\"#6-自定义正则转换器及蓝图\" class=\"headerlink\" title=\"6 自定义正则转换器及蓝图\"></a>6 自定义正则转换器及蓝图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> werkzeug.routing <span class=\"hljs-keyword\">import</span> BaseConverter<br><br><span class=\"hljs-comment\"># 定义正则转换器</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReConverter</span>(<span class=\"hljs-params\">BaseConverter</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, url_map, regex</span>):</span><br>        <span class=\"hljs-comment\"># 调用父类初始化方法</span><br>        <span class=\"hljs-built_in\">super</span>(ReConverter, self).__init__(url_map)<br>        <span class=\"hljs-comment\"># 重新赋值</span><br>        self.regex = regex<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 添加自定义的转换器</span><br>  app.url_map.converters[<span class=\"hljs-string\">&quot;re&quot;</span>] = ReConverter<br></code></pre></div></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Blueprint, current_app<br><br>html = Blueprint(<span class=\"hljs-string\">&quot;web_html&quot;</span>, __name__)<br><br><span class=\"hljs-meta\">@html.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/&lt;re(r&#x27;.*&#x27;):file_name&gt;&quot;</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">web_html</span>(<span class=\"hljs-params\">file_name</span>):</span><br><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> file_name:<br>        file_name = <span class=\"hljs-string\">&quot;index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">if</span> file_name != <span class=\"hljs-string\">&quot;favicon.ico&quot;</span>:<br>        file_name = <span class=\"hljs-string\">&quot;html/&quot;</span> + file_name<br><br>    <span class=\"hljs-keyword\">return</span> current_app.send_static_file(file_name)<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 注册蓝图</span><br>app.register_blueprint(html)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"7-登录装饰器\"><a href=\"#7-登录装饰器\" class=\"headerlink\" title=\"7 登录装饰器\"></a>7 登录装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义验证登录状态的装饰器</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">login_required</span>(<span class=\"hljs-params\">view_func</span>):</span><br>    <span class=\"hljs-comment\"># wraps函数的作用是将wrapper内层函数的属性设置为被装饰函数view_func的属性</span><br><span class=\"hljs-meta\">    @functools.wraps(<span class=\"hljs-params\">view_func</span>)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>        <span class=\"hljs-comment\"># 判断用户登录状态</span><br>        user_id = session.get(<span class=\"hljs-string\">&quot;user_id&quot;</span>)<br><br>        <span class=\"hljs-comment\"># 如果用户是登录状态，则执行登录状态</span><br>        <span class=\"hljs-keyword\">if</span> user_id <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-comment\"># 将user_id保存到g对象中，在视图函数中，可以通过g对象获取保存数据</span><br>            g.user_id = user_id<br>            <span class=\"hljs-keyword\">return</span> view_func(*args, **kwargs)<br>        <span class=\"hljs-comment\"># 如果未登录，则返回未登录信息</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> jsonify(errno=RET.SESSIONERR, errmsg=<span class=\"hljs-string\">&quot;用户未登录&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> wrapper<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"8-视图函数\"><a href=\"#8-视图函数\" class=\"headerlink\" title=\"8 视图函数\"></a>8 视图函数</h4><ol>\n<li>路由匹配不能出现相同的地址，即同一地址，不能出现两个视图函数</li>\n<li>路由匹配不能出现不同的函数，即不同的地址，不能出现相同的函数名</li>\n</ol>\n<h4 id=\"9-参数获取\"><a href=\"#9-参数获取\" class=\"headerlink\" title=\"9 参数获取\"></a>9 参数获取</h4><ol>\n<li><p>直接从request中获取json数据，并将其转换为字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">house_data = request.get_json()<br></code></pre></div></td></tr></table></figure></li>\n<li><p>从request中获取文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">image_file = request.files.get(<span class=\"hljs-string\">&quot;house_image&quot;</span>)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>从request中的form表单中获取键值对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">house_id = request.form.get(<span class=\"hljs-string\">&quot;house_id&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"10-数据库操作\"><a href=\"#10-数据库操作\" class=\"headerlink\" title=\"10 数据库操作\"></a>10 数据库操作</h4></li>\n</ol>\n<p>​    在同一视图函数中，可以对对象多次修改，只提交一次即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">db.session.add(house_image)<br>db.session.add(house)<br><br><span class=\"hljs-keyword\">try</span>:<br>    db.session.commit()<br><span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>    current_app.logger.error(e)<br>    db.session.rollback()<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-with上下文管理器\"><a href=\"#1-with上下文管理器\" class=\"headerlink\" title=\"1 with上下文管理器\"></a>1 with上下文管理器</h4><p>常用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;file_name&quot;</span>,<span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\tf.write(<span class=\"hljs-string\">&quot;hello flask&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>自定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">gbiect</span>):</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__enter__</span>(<span class=\"hljs-params\">self</span>):</span><br>\t\t<span class=\"hljs-string\">&quot;&quot;&quot;进入with语句的时候被with调用&quot;&quot;&quot;</span><br>\t\tprint(<span class=\"hljs-string\">&quot;enter called&quot;</span>)<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__exit_</span>(<span class=\"hljs-params\">self, exc_type, exc_val, exc_tb</span>):</span><br>\t\t<span class=\"hljs-string\">&quot;&quot;&quot;离开with语句的时候被with调用&quot;&quot;&quot;</span><br>        print(<span class=\"hljs-string\">&quot;exit called&quot;</span>)<br>        print(<span class=\"hljs-string\">&quot;exc_type:%s&quot;</span> % exc_type)<br>        print(<span class=\"hljs-string\">&quot;exc_val:9%s&quot;</span> % exc_val)<br>\t\tprint(<span class=\"hljs-string\">&quot;exc_tb:%s&quot;</span>%exc_tb)<br>\t\t<br><span class=\"hljs-keyword\">with</span> Foo() <span class=\"hljs-keyword\">as</span> foo:<br>    print(<span class=\"hljs-string\">&quot;helto python&quot;</span>)<br>    a=<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">0</span><br>    print(<span class=\"hljs-string\">&quot;hello end&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">enter called <br>Traceback (most recent call last): <br>hello python <br>\tFile<span class=\"hljs-string\">&quot;/Users/delron/Desktop/code/03 with. py&quot;</span>, line 39, <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br><span class=\"hljs-built_in\">exit</span> called<br>     a=1/0<br>ZeroDivisionError: <span class=\"hljs-built_in\">integer</span> division or modulo by zero <br>exc_type:&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">&#x27; exceptions. ZeroDivisionError&#x27;</span>&gt;<br>exc_val: <span class=\"hljs-built_in\">integer</span> division or modulo by zero <br>exc_tb:&lt;traceback object at 0x1097bc440&gt;<br><br>Process finished with <span class=\"hljs-built_in\">exit</span> code 1<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"2-json模块\"><a href=\"#2-json模块\" class=\"headerlink\" title=\"2 json模块\"></a>2 json模块</h4><p>dumps  —&gt; 可以将字典转换为字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>data = &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>&#125;<br>json_str = json.dumps(data)<br>print(<span class=\"hljs-built_in\">type</span>(json_str), json_str)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">str</span>      &#123;<span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n<p>loads ——&gt; 将字符串转换为字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>a = <span class=\"hljs-string\">&#x27;&#123;&quot;city&quot;: &quot;sz&quot;, &quot;country&quot;: &quot;china&quot;&#125;&#x27;</span><br>b = json.loads(a)<br>print(<span class=\"hljs-built_in\">type</span>(b), b)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">dict</span>      &#123;<span class=\"hljs-string\">&quot;city&quot;</span>: <span class=\"hljs-string\">&quot;sz&quot;</span>, <span class=\"hljs-string\">&quot;country&quot;</span>: <span class=\"hljs-string\">&quot;china&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-xss攻击\"><a href=\"#3-xss攻击\" class=\"headerlink\" title=\"3 xss攻击\"></a>3 xss攻击</h4><p>当前段传送过来的数据默认进行转义，否则，则会默认执行前端传送的数据，则称为xss攻击</p>\n<h4 id=\"4-flask-和mysql\"><a href=\"#4-flask-和mysql\" class=\"headerlink\" title=\"4 flask 和mysql\"></a>4 flask 和mysql</h4><p><strong>Linux：</strong></p>\n<p><em>flask使用mysql数据库需要：</em></p>\n<ol>\n<li><strong>pymysql</strong></li>\n<li><strong>sqlalchemy</strong></li>\n<li><strong>flask_sqlalchemy</strong></li>\n</ol>\n<p><strong>windows：</strong></p>\n<p><strong><em>Flask利用pymysql出现Warning：1366的解决办法</em></strong></p>\n<p><em>flask使用mysql数据库需要：</em></p>\n<ol>\n<li><p><strong>mysql-connector-python</strong></p>\n</li>\n<li><p><strong>sqlalchemy</strong></p>\n</li>\n<li><p><strong>flask_sqlalchemy</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">SQLALCHEMY_DATABASE_URI = <span class=\"hljs-string\">&quot;mysql+mysqlconnector://root:mysql@localhost/ihome01&quot;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"5-装饰器\"><a href=\"#5-装饰器\" class=\"headerlink\" title=\"5 装饰器\"></a>5 装饰器</h4></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/&quot;</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>():</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;index page&quot;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span>():</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;index page&quot;</span><br>app.route(<span class=\"hljs-string\">&quot;/)(index)</span><br></code></pre></td></tr></table></figure>\n<p>装饰器不仅仅是定义时可以用，还可以在定义完再使用</p>\n<h4 id=\"6-自定义正则转换器及蓝图\"><a href=\"#6-自定义正则转换器及蓝图\" class=\"headerlink\" title=\"6 自定义正则转换器及蓝图\"></a>6 自定义正则转换器及蓝图</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> werkzeug.routing <span class=\"hljs-keyword\">import</span> BaseConverter<br><br><span class=\"hljs-comment\"># 定义正则转换器</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ReConverter</span>(<span class=\"hljs-params\">BaseConverter</span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, url_map, regex</span>):</span><br>        <span class=\"hljs-comment\"># 调用父类初始化方法</span><br>        <span class=\"hljs-built_in\">super</span>(ReConverter, self).__init__(url_map)<br>        <span class=\"hljs-comment\"># 重新赋值</span><br>        self.regex = regex<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 添加自定义的转换器</span><br>  app.url_map.converters[<span class=\"hljs-string\">&quot;re&quot;</span>] = ReConverter<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Blueprint, current_app<br><br>html = Blueprint(<span class=\"hljs-string\">&quot;web_html&quot;</span>, __name__)<br><br><span class=\"hljs-meta\">@html.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/&lt;re(r&#x27;.*&#x27;):file_name&gt;&quot;</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">web_html</span>(<span class=\"hljs-params\">file_name</span>):</span><br><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> file_name:<br>        file_name = <span class=\"hljs-string\">&quot;index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">if</span> file_name != <span class=\"hljs-string\">&quot;favicon.ico&quot;</span>:<br>        file_name = <span class=\"hljs-string\">&quot;html/&quot;</span> + file_name<br><br>    <span class=\"hljs-keyword\">return</span> current_app.send_static_file(file_name)<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 注册蓝图</span><br>app.register_blueprint(html)<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-登录装饰器\"><a href=\"#7-登录装饰器\" class=\"headerlink\" title=\"7 登录装饰器\"></a>7 登录装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义验证登录状态的装饰器</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">login_required</span>(<span class=\"hljs-params\">view_func</span>):</span><br>    <span class=\"hljs-comment\"># wraps函数的作用是将wrapper内层函数的属性设置为被装饰函数view_func的属性</span><br><span class=\"hljs-meta\">    @functools.wraps(<span class=\"hljs-params\">view_func</span>)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>        <span class=\"hljs-comment\"># 判断用户登录状态</span><br>        user_id = session.get(<span class=\"hljs-string\">&quot;user_id&quot;</span>)<br><br>        <span class=\"hljs-comment\"># 如果用户是登录状态，则执行登录状态</span><br>        <span class=\"hljs-keyword\">if</span> user_id <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-comment\"># 将user_id保存到g对象中，在视图函数中，可以通过g对象获取保存数据</span><br>            g.user_id = user_id<br>            <span class=\"hljs-keyword\">return</span> view_func(*args, **kwargs)<br>        <span class=\"hljs-comment\"># 如果未登录，则返回未登录信息</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> jsonify(errno=RET.SESSIONERR, errmsg=<span class=\"hljs-string\">&quot;用户未登录&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> wrapper<br></code></pre></td></tr></table></figure>\n<h4 id=\"8-视图函数\"><a href=\"#8-视图函数\" class=\"headerlink\" title=\"8 视图函数\"></a>8 视图函数</h4><ol>\n<li>路由匹配不能出现相同的地址，即同一地址，不能出现两个视图函数</li>\n<li>路由匹配不能出现不同的函数，即不同的地址，不能出现相同的函数名</li>\n</ol>\n<h4 id=\"9-参数获取\"><a href=\"#9-参数获取\" class=\"headerlink\" title=\"9 参数获取\"></a>9 参数获取</h4><ol>\n<li><p>直接从request中获取json数据，并将其转换为字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">house_data = request.get_json()<br></code></pre></td></tr></table></figure></li>\n<li><p>从request中获取文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">image_file = request.files.get(<span class=\"hljs-string\">&quot;house_image&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>从request中的form表单中获取键值对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">house_id = request.form.get(<span class=\"hljs-string\">&quot;house_id&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"10-数据库操作\"><a href=\"#10-数据库操作\" class=\"headerlink\" title=\"10 数据库操作\"></a>10 数据库操作</h4></li>\n</ol>\n<p>​    在同一视图函数中，可以对对象多次修改，只提交一次即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">db.session.add(house_image)<br>db.session.add(house)<br><br><span class=\"hljs-keyword\">try</span>:<br>    db.session.commit()<br><span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>    current_app.logger.error(e)<br>    db.session.rollback()<br></code></pre></td></tr></table></figure>\n"},{"title":"ES6语法","date":"2020-04-12T15:13:05.000Z","_content":"\n## 变量声明\n\n### 1. `let`\n\n- `let`作用域只局限于当前代码块\n\n     ```javascript\n     {\n        var a = 10\n        let b = 20\n     }\n\n     console.log(a)  // 输出 10\n     console.log(b)  // 报错 b is not defined\n     ```\n\n- 使用`let`声明的变量作用域不会提前\n\n     ```javascript\n     console.log(a)  // 输出 undefined\n     console.log(b)  // 报错 Cannot access 'b' before initialization\n\n     var a = 10\n     let b = 20\n     ```\n\n- 在相同的作用域下不能声明相同的变量\n\n     ```javascript\n           {\n          let a = 10\n      }\n      let a = 20\n     ```\n\n     ```javascript\n      var a = 10\n      let a = 20  // 报错 Identifier 'a' has already been declared\n     ```\n\n### 2. const\n\n- 声明一个只读的常量。一旦声明，常量的值就不能改变\n\n- `const`只声明，不赋值，就会报错，这意味着`const`一旦声明常量，就必须立即初始化\n\n- `const`作用域与`let`相同，只在所在的块级作用域内有效\n\n- `const`声明的常量不支持提升，和`let`一样，只能在声明后使用\n\n- `const`声明的常量，也与`let`一样， 不可重复声明\n\n- `const`实际保证的并不是常量的值不变，而是常量指向的内存地址不得改变\n  \n  - 对于简单的数据类型(数字、字符串、布尔值),值就保存在常量指向的地址，因此等同常量\n\n  - 对于复合类型的数据(数组、对象)，常量指向的内存地址保存的只是一个指针，const只能保证指针是固定的，但是指针指向的数据结构是不是可变的，并不能保证\n\n    ```javascript\n    const a = 5\n    // a = 10 // 报错 Assignment to constant variable\n\n    const obj = {}\n    obj.a = 20 // 可执行\n    console.log(obj) // 可执行 {a: 20}\n    // obj = {} // 报错\n\n    const arry = []\n    arry.push(1) // 可执行\n    arry.length = 0 // 可执行\n    // arry = [] // 报错 Assignment to constant variable\n    ```\n\n### 3. 实例演示\n\n- 使用var声明循环变量，会导致全局共用一个变量\n\n  ```html\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n\n  <script>\n      var btns = document.querySelectorAll('button')\n      for (var i = 0; i < btns.length; i++) {\n          btns[i].onclick = function () {\n              console.log(`这是第${i}个按钮`)\n          }\n      }\n      // 此时点击任何按钮，输出都是\"这是第5个按钮\"\n\n      for (let j = 0; j < btns.length; j++) {\n          btns[j].onclick = function () {\n              console.log(`这是第${j}个按钮`)\n          }\n      }\n      // 把循环中的var改为let,则为正确的结果，即输出对应的按钮序号\n  </script>\n  ```\n\n- 下面的例子也是for循环中全局共用同一变量的弊端\n\n    ```javascript\n    for(var i=1;i<10;i++){\n        setTimeout(()=>{\n            console.log(i) // 输出 10个9\n        }, 100)\n    }\n    console.log(i) // 9\n\n    for(let j=1;j<10;j++){\n        setTimeout(()=>{\n            console.log(j) // 输出 0-9\n        }, 100)\n    }\n    console.log(j) // 报错 j is not defined\n    ```\n\n    > 解释\n\n- var是全局作用域，有变量提升的作用，所以在for中定义一个变量，全局可以使用，循环中的每一次给变量i赋值都是给全局变量i赋值。\n\n- let是块级作用域,只能在代码块中起作用，在js中一个{}中的语句我们也称为叫一个代码块，每次循环会产生一个代码块，每个代码块中的都是一个新的变量j\n\n### 4. 小结\n\n> `let`、`const`使用场景\n\n- `const`一般用在需要一个模块时使用或者定义一些全局常量时使用\n- `let`限制了变量的作用域，保证变量不会影响全局变量，所以尽量将`var`改为`let`\n\n## 箭头函数\n\n### 1. 箭头函数\n\nES6标准新增了一种新的函数：Arrow Function（箭头函数）。\n\n为什么叫Arrow Function？因为它的定义用的就是一个箭头\n\n```javascript\nx => x * x\n```\n\n上面的箭头函数相当于：\n\n```javascript\nfunction (x) {\n    return x * x;\n}\n```\n\n箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式。一种像上面的，只包含一个表达式，连`{ ... }`和`return`都省略掉了。还有一种可以包含多条语句，这时候就不能省略`{ ... }`和`return`：\n\n```javascript\nx => {\n    if (x > 0) {\n        return x * x;\n    }\n    else {\n        return - x * x;\n    }\n}\n```\n\n如果参数不是一个，就需要用括号()括起来：\n\n```javascript\n// 两个参数:\n(x, y) => x * x + y * y\n\n// 无参数:\n() => 3.14\n\n// 可变参数:\n(x, y, ...rest) => {\n    var i, sum = x + y;\n    for (i=0; i<rest.length; i++) {\n        sum += rest[i];\n    }\n    return sum;\n}\n```\n\n如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n\n```javascript\n// SyntaxError:\nx => { foo: x }\n```\n\n因为和函数体的{ ... }有语法冲突，所以要改为：\n\n```javascript\n// ok:\nx => ({ foo: x })\n```\n\n### 2. 箭头函数与匿名函数异同\n\n箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别:\n\n箭头函数的提出，主要是为了解决多层函数嵌套中this指代混乱的问题；箭头函数内部的this是词法作用域，由上下文确定。\n\n- 使用普通函数嵌套会产生this指代混乱的问题\n\n    ```javascript\n    var person = {\n        age: 18,\n        getBirth: function () {\n            var bth = function () {\n              // 多层嵌套函数中，this优先寻找父级作用域对象，不存在，即指向全局window对象\n                return new Date().getFullYear() - this.age  // this.age   undefined\n            }\n            return bth()\n        }\n    }\n    console.log(person.getBirth()) // NaN\n    ```\n\n- 使用箭头函数即可解决问题\n\n    ```javascript\n    var person = {\n        age: 18,\n        getBirth: function () {\n            var bth = ()=>{\n              // 在箭头函数中 this会寻找父级作用域的对象，找到为止\n                return new Date().getFullYear() - this.age  // this.age  18\n            }\n            return bth()\n        }\n    }\n    console.log(person.getBirth()) // 2002\n    ```\n\n### 3. 箭头函数不适用的场景\n\n1. 作为对象的属性\n\n    ```javascript\n    var obj = {\n        a: () => {\n            console.log(this); // window\n        }\n    };\n    ```\n\n    作为对象的属性时，this的指向则不再是对象本身了，这就造成了意想不到的结果\n\n2. 不可以作为构造函数来使用\n\n    ```javascript\n    var Person = (name) => { // Uncaught TypeError: Person is not a constructor\n        this.name = name;\n    }\n\n    var person = new Person('Jack');\n    ```\n\n    这个特性很容易测试，如果上一条明白的话也很容易理解： 箭头函数压根就没有this，当然不能作为构造函数（如果明白构造函数new的过程的话，插一句： new的过程其实就是创建一个对象，将this指向该对象，然后执行代码初始化这个对象，最后返回）\n3. 不可以作为原型方法\n\n    同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误\n\n    ```javascript\n    function Cat(name) {\n        this.name = name;\n    }\n\n    Cat.prototype.sayCatName = () => {\n        console.log(this === window); // => true\n        return this.name;\n    };\n\n    const cat = new Cat('Mew');\n    cat.sayCatName(); // => undefined\n    ```\n\n    使用传统的函数表达式就能解决问题：\n\n    ```javascript\n    function Cat(name) {\n        this.name = name;\n    }\n\n    Cat.prototype.sayCatName = function () {\n        console.log(this === cat); // => true\n        return this.name;\n    };\n\n    const cat = new Cat('Mew');\n    cat.sayCatName(); // => 'Mew'\n    ```\n\n    sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。\n\n4. 不绑定arguments（如果有要使用arguments的时候可以使用rest参数代替）\n\n    ```javascript\n    var foo = (val) => {\n        console.log(arguments); // Uncaught ReferenceError: arguments is not defined\n    };\n    foo();\n    ```\n\n    这个特性也很好测试，但是实在要使用`arguments`对象要怎么办呢？我们可以使用es6的另一个新特性rest参数，完美替代\n\n    ```javascript\n    var foo = (...args) => {\n        console.log(args); // [1, 2, 3]\n    };\n    foo(1, 2, 3);\n    ```\n\n## JS对象嵌套函数\n\n在 `js` 的语法规则中，如果一个对象内存在方法，则该方法 `this` 指向当前对象。\n如下所示：\n\n```js\nlet obj = {\n    age: 10,\n    getAge: function () { \n        console.log(this.age)\n    }\n}\nobj.getAge();// 10\n```\n\n若方法中再次包含函数方法，则该嵌套函数指向全局。不能获取到本对象中的属性。 \n如下所示：\n\n```js\nlet obj = {\n    age: 10,\n    getAge: function () { \n        setTimeout(function(){ alert(this.age)}, 1000)\n    }\n}\nobj.getAge();// undefined\n```\n\n可以通过如下几种办法来解决此问题：  \n（1）定义变量，保存对象 `this`\n\n```js\ngetAge: function () { \n\t\tlet self = this;\n        setTimeout(function(){ alert(self.age)}, 1000)\n    }\n```\n\n(2) 通过箭头函数的方式 \n\n由于箭头函数具有默认指向父级调用对象 obj 的特点，因此也可以解决本问题\n\n```js\ngetAge: function () { \n\t\tsetTimeout(() => { alert(this.age)}, 1000)\n}\n```\n\n## 解构赋值\n\n### 什么是解构赋值？\n\n解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量。这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰。\n\n通常来说，你很可能这样访问数组中的前三个元素：\n\n```js\nvar first = someArray[0];\nvar second = someArray[1];\nvar third = someArray[2];\n```\n\n如果使用解构赋值的特性，将会使等效的代码变得更加简洁并且可读性更高：\n\n```js\nvar [first, second, third] = someArray;\n```\n\n`SpiderMonkey`（Firefox 的 JavaScript 引擎）已经支持解构的大部分功能，但是仍不健全。你可以通过 [bug 694100](https://bugzilla.mozilla.org/show_bug.cgi?id=694100) 跟踪解构和其它 ES6 特性在 `SpiderMonkey` 中的支持情况。\n\n### 数组与迭代器的解构\n\n以上是数组解构赋值的一个简单示例，其语法的一般形式为：\n\n```js\n[ variable1, variable2, ..., variableN ] = array;\n```\n\n这将为 variable1 到 variableN 的变量赋予数组中相应元素项的值。如果你想在赋值的同时声明变量，可在赋值语句前加入`var`、`let`或`const`关键字，例如：\n\n```js\nvar [ variable1, variable2, ..., variableN ] = array;\nlet [ variable1, variable2, ..., variableN ] = array;\nconst [ variable1, variable2, ..., variableN ] = array;\n```\n\n事实上，用`变量`来描述并不恰当，因为你可以对任意深度的嵌套数组进行解构：\n\n```js\nvar [foo, [[bar], baz]] = [1, [[2], 3]];\nconsole.log(foo);  // 1\nconsole.log(bar);  // 2\nconsole.log(baz);  // 3\n```\n\n此外，你可以在对应位留空来跳过被解构数组中的某些元素：\n\n```js\nvar [,,third] = [\"foo\", \"bar\", \"baz\"];\nconsole.log(third);  // \"baz\"\n```\n\n而且你还可以通过 “[不定参数](http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults)” 模式捕获数组中的所有尾随元素：\n\n```js\nvar [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail); // [2, 3, 4]\n```\n\n当访问空数组或越界访问数组时，对其解构与对其索引的行为一致，最终得到的结果都是：`undefined`。\n\n```js\nconsole.log([][0]);   // undefined\nvar [missing] = [];\nconsole.log(missing); // undefined\n```\n\n请注意，数组解构赋值的模式同样适用于任意迭代器：\n\n```js\nfunction* fibs() {\n      var a = 0;\n      var b = 1;\n      while (true) {\n        yield a;\n        [a, b] = [b, a + b];\n      }\n}\nvar [first, second, third, fourth, fifth, sixth] = fibs();\nconsole.log(sixth);  // 5\n```\n\n### 对象的解构\n\n通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量。\n\n```js\nvar robotA = { name: \"Bender\" };\nvar robotB = { name: \"Flexo\" };\nvar { name: nameA } = robotA;\nvar { name: nameB } = robotB;\n\nconsole.log(nameA);  // \"Bender\"\nconsole.log(nameB);  // \"Flexo\"\n```\n\n当属性名与变量名一致时，可以通过一种实用的句法简写：\n\n```js\nvar { foo, bar } = { foo: \"lorem\", bar: \"ipsum\" };\n\nconsole.log(foo);  // \"lorem\"\nconsole.log(bar);  // \"ipsum\"\n```\n\n与数组解构一样，你可以随意嵌套并进一步组合对象解构：\n\n```js\nvar complicatedObj = {\n  arrayProp: [\n    \"Zapp\",\n    { second: \"Brannigan\" }\n  ]\n};\nvar { arrayProp: [first, { second }] } = complicatedObj;\nconsole.log(first);\n// \"Zapp\"\nconsole.log(second);\n// \"Brannigan\"\n```\n\n当你解构一个未定义的属性时，得到的值为`undefined`：\n\n```js\nvar { missing } = {};\nconsole.log(missing);\n// undefined\n```\n\n请注意，当你解构对象并赋值给变量时，如果你已经声明或不打算声明这些变量（亦即赋值语句前没有`let`、`const`或`var`关键字），你应该注意这样一个潜在的语法错误：\n\n```js\n{ blowUp } = { blowUp: 10 };\n// Syntax error 语法错误\n```\n\n为什么会出错？这是因为 JavaScript 语法通知解析引擎将任何以 {开始的语句解析为一个块语句（例如，`{console}`是一个合法块语句）。解决方案是将整个表达式用一对小括号包裹：\n\n```js\n({ safe } = {});\n// No errors 没有语法错误\n```\n\n### 解构值不是对象、数组或迭代器\n\n当你尝试解构`null`或`undefined`时，你会得到一个类型错误：\n\n```js\nvar {blowUp} = null;\n// TypeError: null has no properties（null没有属性）\n```\n\n然而，你可以解构其它原始类型，例如：`布尔值`、`数值`、`字符串`，但是你将得到`undefined`：\n\n```js\nvar {wtf} = NaN;\nconsole.log(wtf);\n// undefined\n```\n\n你可能对此感到意外，但经过进一步审查你就会发现，原因其实非常简单。当使用对象赋值模式时，被解构的值[需要被强制转换为对象](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible)。大多数类型都可以被转换为对象，但`null`和`undefined`却无法进行转换。当使用数组赋值模式时，被解构的值一定要[包含一个迭代器](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-getiterator)。\n\n### 默认值\n\n当你要解构的属性未定义时你可以提供一个默认值：\n\n```js\nvar [missing = true] = [];\nconsole.log(missing);\n// true\nvar { message: msg = \"Something went wrong\" } = {};\nconsole.log(msg);\n// \"Something went wrong\"\nvar { x = 3 } = {};\nconsole.log(x);\n// 3\n```","source":"_posts/Js-ES6语法.md","raw":"---\ntitle: ES6语法\ndate: 2020-04-12 23:13:05\ncategories:\n- 技术\n- JS\ntags:\n- JS\n- ES6\n- var\n- let\n- const\n- 箭头函数\n---\n\n## 变量声明\n\n### 1. `let`\n\n- `let`作用域只局限于当前代码块\n\n     ```javascript\n     {\n        var a = 10\n        let b = 20\n     }\n\n     console.log(a)  // 输出 10\n     console.log(b)  // 报错 b is not defined\n     ```\n\n- 使用`let`声明的变量作用域不会提前\n\n     ```javascript\n     console.log(a)  // 输出 undefined\n     console.log(b)  // 报错 Cannot access 'b' before initialization\n\n     var a = 10\n     let b = 20\n     ```\n\n- 在相同的作用域下不能声明相同的变量\n\n     ```javascript\n           {\n          let a = 10\n      }\n      let a = 20\n     ```\n\n     ```javascript\n      var a = 10\n      let a = 20  // 报错 Identifier 'a' has already been declared\n     ```\n\n### 2. const\n\n- 声明一个只读的常量。一旦声明，常量的值就不能改变\n\n- `const`只声明，不赋值，就会报错，这意味着`const`一旦声明常量，就必须立即初始化\n\n- `const`作用域与`let`相同，只在所在的块级作用域内有效\n\n- `const`声明的常量不支持提升，和`let`一样，只能在声明后使用\n\n- `const`声明的常量，也与`let`一样， 不可重复声明\n\n- `const`实际保证的并不是常量的值不变，而是常量指向的内存地址不得改变\n  \n  - 对于简单的数据类型(数字、字符串、布尔值),值就保存在常量指向的地址，因此等同常量\n\n  - 对于复合类型的数据(数组、对象)，常量指向的内存地址保存的只是一个指针，const只能保证指针是固定的，但是指针指向的数据结构是不是可变的，并不能保证\n\n    ```javascript\n    const a = 5\n    // a = 10 // 报错 Assignment to constant variable\n\n    const obj = {}\n    obj.a = 20 // 可执行\n    console.log(obj) // 可执行 {a: 20}\n    // obj = {} // 报错\n\n    const arry = []\n    arry.push(1) // 可执行\n    arry.length = 0 // 可执行\n    // arry = [] // 报错 Assignment to constant variable\n    ```\n\n### 3. 实例演示\n\n- 使用var声明循环变量，会导致全局共用一个变量\n\n  ```html\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n  <button>按钮</button>\n\n  <script>\n      var btns = document.querySelectorAll('button')\n      for (var i = 0; i < btns.length; i++) {\n          btns[i].onclick = function () {\n              console.log(`这是第${i}个按钮`)\n          }\n      }\n      // 此时点击任何按钮，输出都是\"这是第5个按钮\"\n\n      for (let j = 0; j < btns.length; j++) {\n          btns[j].onclick = function () {\n              console.log(`这是第${j}个按钮`)\n          }\n      }\n      // 把循环中的var改为let,则为正确的结果，即输出对应的按钮序号\n  </script>\n  ```\n\n- 下面的例子也是for循环中全局共用同一变量的弊端\n\n    ```javascript\n    for(var i=1;i<10;i++){\n        setTimeout(()=>{\n            console.log(i) // 输出 10个9\n        }, 100)\n    }\n    console.log(i) // 9\n\n    for(let j=1;j<10;j++){\n        setTimeout(()=>{\n            console.log(j) // 输出 0-9\n        }, 100)\n    }\n    console.log(j) // 报错 j is not defined\n    ```\n\n    > 解释\n\n- var是全局作用域，有变量提升的作用，所以在for中定义一个变量，全局可以使用，循环中的每一次给变量i赋值都是给全局变量i赋值。\n\n- let是块级作用域,只能在代码块中起作用，在js中一个{}中的语句我们也称为叫一个代码块，每次循环会产生一个代码块，每个代码块中的都是一个新的变量j\n\n### 4. 小结\n\n> `let`、`const`使用场景\n\n- `const`一般用在需要一个模块时使用或者定义一些全局常量时使用\n- `let`限制了变量的作用域，保证变量不会影响全局变量，所以尽量将`var`改为`let`\n\n## 箭头函数\n\n### 1. 箭头函数\n\nES6标准新增了一种新的函数：Arrow Function（箭头函数）。\n\n为什么叫Arrow Function？因为它的定义用的就是一个箭头\n\n```javascript\nx => x * x\n```\n\n上面的箭头函数相当于：\n\n```javascript\nfunction (x) {\n    return x * x;\n}\n```\n\n箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式。一种像上面的，只包含一个表达式，连`{ ... }`和`return`都省略掉了。还有一种可以包含多条语句，这时候就不能省略`{ ... }`和`return`：\n\n```javascript\nx => {\n    if (x > 0) {\n        return x * x;\n    }\n    else {\n        return - x * x;\n    }\n}\n```\n\n如果参数不是一个，就需要用括号()括起来：\n\n```javascript\n// 两个参数:\n(x, y) => x * x + y * y\n\n// 无参数:\n() => 3.14\n\n// 可变参数:\n(x, y, ...rest) => {\n    var i, sum = x + y;\n    for (i=0; i<rest.length; i++) {\n        sum += rest[i];\n    }\n    return sum;\n}\n```\n\n如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n\n```javascript\n// SyntaxError:\nx => { foo: x }\n```\n\n因为和函数体的{ ... }有语法冲突，所以要改为：\n\n```javascript\n// ok:\nx => ({ foo: x })\n```\n\n### 2. 箭头函数与匿名函数异同\n\n箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别:\n\n箭头函数的提出，主要是为了解决多层函数嵌套中this指代混乱的问题；箭头函数内部的this是词法作用域，由上下文确定。\n\n- 使用普通函数嵌套会产生this指代混乱的问题\n\n    ```javascript\n    var person = {\n        age: 18,\n        getBirth: function () {\n            var bth = function () {\n              // 多层嵌套函数中，this优先寻找父级作用域对象，不存在，即指向全局window对象\n                return new Date().getFullYear() - this.age  // this.age   undefined\n            }\n            return bth()\n        }\n    }\n    console.log(person.getBirth()) // NaN\n    ```\n\n- 使用箭头函数即可解决问题\n\n    ```javascript\n    var person = {\n        age: 18,\n        getBirth: function () {\n            var bth = ()=>{\n              // 在箭头函数中 this会寻找父级作用域的对象，找到为止\n                return new Date().getFullYear() - this.age  // this.age  18\n            }\n            return bth()\n        }\n    }\n    console.log(person.getBirth()) // 2002\n    ```\n\n### 3. 箭头函数不适用的场景\n\n1. 作为对象的属性\n\n    ```javascript\n    var obj = {\n        a: () => {\n            console.log(this); // window\n        }\n    };\n    ```\n\n    作为对象的属性时，this的指向则不再是对象本身了，这就造成了意想不到的结果\n\n2. 不可以作为构造函数来使用\n\n    ```javascript\n    var Person = (name) => { // Uncaught TypeError: Person is not a constructor\n        this.name = name;\n    }\n\n    var person = new Person('Jack');\n    ```\n\n    这个特性很容易测试，如果上一条明白的话也很容易理解： 箭头函数压根就没有this，当然不能作为构造函数（如果明白构造函数new的过程的话，插一句： new的过程其实就是创建一个对象，将this指向该对象，然后执行代码初始化这个对象，最后返回）\n3. 不可以作为原型方法\n\n    同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误\n\n    ```javascript\n    function Cat(name) {\n        this.name = name;\n    }\n\n    Cat.prototype.sayCatName = () => {\n        console.log(this === window); // => true\n        return this.name;\n    };\n\n    const cat = new Cat('Mew');\n    cat.sayCatName(); // => undefined\n    ```\n\n    使用传统的函数表达式就能解决问题：\n\n    ```javascript\n    function Cat(name) {\n        this.name = name;\n    }\n\n    Cat.prototype.sayCatName = function () {\n        console.log(this === cat); // => true\n        return this.name;\n    };\n\n    const cat = new Cat('Mew');\n    cat.sayCatName(); // => 'Mew'\n    ```\n\n    sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。\n\n4. 不绑定arguments（如果有要使用arguments的时候可以使用rest参数代替）\n\n    ```javascript\n    var foo = (val) => {\n        console.log(arguments); // Uncaught ReferenceError: arguments is not defined\n    };\n    foo();\n    ```\n\n    这个特性也很好测试，但是实在要使用`arguments`对象要怎么办呢？我们可以使用es6的另一个新特性rest参数，完美替代\n\n    ```javascript\n    var foo = (...args) => {\n        console.log(args); // [1, 2, 3]\n    };\n    foo(1, 2, 3);\n    ```\n\n## JS对象嵌套函数\n\n在 `js` 的语法规则中，如果一个对象内存在方法，则该方法 `this` 指向当前对象。\n如下所示：\n\n```js\nlet obj = {\n    age: 10,\n    getAge: function () { \n        console.log(this.age)\n    }\n}\nobj.getAge();// 10\n```\n\n若方法中再次包含函数方法，则该嵌套函数指向全局。不能获取到本对象中的属性。 \n如下所示：\n\n```js\nlet obj = {\n    age: 10,\n    getAge: function () { \n        setTimeout(function(){ alert(this.age)}, 1000)\n    }\n}\nobj.getAge();// undefined\n```\n\n可以通过如下几种办法来解决此问题：  \n（1）定义变量，保存对象 `this`\n\n```js\ngetAge: function () { \n\t\tlet self = this;\n        setTimeout(function(){ alert(self.age)}, 1000)\n    }\n```\n\n(2) 通过箭头函数的方式 \n\n由于箭头函数具有默认指向父级调用对象 obj 的特点，因此也可以解决本问题\n\n```js\ngetAge: function () { \n\t\tsetTimeout(() => { alert(this.age)}, 1000)\n}\n```\n\n## 解构赋值\n\n### 什么是解构赋值？\n\n解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量。这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰。\n\n通常来说，你很可能这样访问数组中的前三个元素：\n\n```js\nvar first = someArray[0];\nvar second = someArray[1];\nvar third = someArray[2];\n```\n\n如果使用解构赋值的特性，将会使等效的代码变得更加简洁并且可读性更高：\n\n```js\nvar [first, second, third] = someArray;\n```\n\n`SpiderMonkey`（Firefox 的 JavaScript 引擎）已经支持解构的大部分功能，但是仍不健全。你可以通过 [bug 694100](https://bugzilla.mozilla.org/show_bug.cgi?id=694100) 跟踪解构和其它 ES6 特性在 `SpiderMonkey` 中的支持情况。\n\n### 数组与迭代器的解构\n\n以上是数组解构赋值的一个简单示例，其语法的一般形式为：\n\n```js\n[ variable1, variable2, ..., variableN ] = array;\n```\n\n这将为 variable1 到 variableN 的变量赋予数组中相应元素项的值。如果你想在赋值的同时声明变量，可在赋值语句前加入`var`、`let`或`const`关键字，例如：\n\n```js\nvar [ variable1, variable2, ..., variableN ] = array;\nlet [ variable1, variable2, ..., variableN ] = array;\nconst [ variable1, variable2, ..., variableN ] = array;\n```\n\n事实上，用`变量`来描述并不恰当，因为你可以对任意深度的嵌套数组进行解构：\n\n```js\nvar [foo, [[bar], baz]] = [1, [[2], 3]];\nconsole.log(foo);  // 1\nconsole.log(bar);  // 2\nconsole.log(baz);  // 3\n```\n\n此外，你可以在对应位留空来跳过被解构数组中的某些元素：\n\n```js\nvar [,,third] = [\"foo\", \"bar\", \"baz\"];\nconsole.log(third);  // \"baz\"\n```\n\n而且你还可以通过 “[不定参数](http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults)” 模式捕获数组中的所有尾随元素：\n\n```js\nvar [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail); // [2, 3, 4]\n```\n\n当访问空数组或越界访问数组时，对其解构与对其索引的行为一致，最终得到的结果都是：`undefined`。\n\n```js\nconsole.log([][0]);   // undefined\nvar [missing] = [];\nconsole.log(missing); // undefined\n```\n\n请注意，数组解构赋值的模式同样适用于任意迭代器：\n\n```js\nfunction* fibs() {\n      var a = 0;\n      var b = 1;\n      while (true) {\n        yield a;\n        [a, b] = [b, a + b];\n      }\n}\nvar [first, second, third, fourth, fifth, sixth] = fibs();\nconsole.log(sixth);  // 5\n```\n\n### 对象的解构\n\n通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量。\n\n```js\nvar robotA = { name: \"Bender\" };\nvar robotB = { name: \"Flexo\" };\nvar { name: nameA } = robotA;\nvar { name: nameB } = robotB;\n\nconsole.log(nameA);  // \"Bender\"\nconsole.log(nameB);  // \"Flexo\"\n```\n\n当属性名与变量名一致时，可以通过一种实用的句法简写：\n\n```js\nvar { foo, bar } = { foo: \"lorem\", bar: \"ipsum\" };\n\nconsole.log(foo);  // \"lorem\"\nconsole.log(bar);  // \"ipsum\"\n```\n\n与数组解构一样，你可以随意嵌套并进一步组合对象解构：\n\n```js\nvar complicatedObj = {\n  arrayProp: [\n    \"Zapp\",\n    { second: \"Brannigan\" }\n  ]\n};\nvar { arrayProp: [first, { second }] } = complicatedObj;\nconsole.log(first);\n// \"Zapp\"\nconsole.log(second);\n// \"Brannigan\"\n```\n\n当你解构一个未定义的属性时，得到的值为`undefined`：\n\n```js\nvar { missing } = {};\nconsole.log(missing);\n// undefined\n```\n\n请注意，当你解构对象并赋值给变量时，如果你已经声明或不打算声明这些变量（亦即赋值语句前没有`let`、`const`或`var`关键字），你应该注意这样一个潜在的语法错误：\n\n```js\n{ blowUp } = { blowUp: 10 };\n// Syntax error 语法错误\n```\n\n为什么会出错？这是因为 JavaScript 语法通知解析引擎将任何以 {开始的语句解析为一个块语句（例如，`{console}`是一个合法块语句）。解决方案是将整个表达式用一对小括号包裹：\n\n```js\n({ safe } = {});\n// No errors 没有语法错误\n```\n\n### 解构值不是对象、数组或迭代器\n\n当你尝试解构`null`或`undefined`时，你会得到一个类型错误：\n\n```js\nvar {blowUp} = null;\n// TypeError: null has no properties（null没有属性）\n```\n\n然而，你可以解构其它原始类型，例如：`布尔值`、`数值`、`字符串`，但是你将得到`undefined`：\n\n```js\nvar {wtf} = NaN;\nconsole.log(wtf);\n// undefined\n```\n\n你可能对此感到意外，但经过进一步审查你就会发现，原因其实非常简单。当使用对象赋值模式时，被解构的值[需要被强制转换为对象](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible)。大多数类型都可以被转换为对象，但`null`和`undefined`却无法进行转换。当使用数组赋值模式时，被解构的值一定要[包含一个迭代器](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-getiterator)。\n\n### 默认值\n\n当你要解构的属性未定义时你可以提供一个默认值：\n\n```js\nvar [missing = true] = [];\nconsole.log(missing);\n// true\nvar { message: msg = \"Something went wrong\" } = {};\nconsole.log(msg);\n// \"Something went wrong\"\nvar { x = 3 } = {};\nconsole.log(x);\n// 3\n```","slug":"Js-ES6语法","published":1,"updated":"2020-12-01T14:23:48.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuby0012jjln89dp6t6t","content":"<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1. let\"></a>1. <code>let</code></h3><ul>\n<li><p><code>let</code>作用域只局限于当前代码块</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">&#123;<br>   <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br>   <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">20</span><br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// 输出 10</span><br><span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// 报错 b is not defined</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>使用<code>let</code>声明的变量作用域不会提前</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// 输出 undefined</span><br><span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// 报错 Cannot access &#x27;b&#x27; before initialization</span><br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">20</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>在相同的作用域下不能声明相同的变量</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">     &#123;<br>    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">20</span><br></code></pre></div></td></tr></table></figure>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">20</span>  <span class=\"hljs-comment\">// 报错 Identifier &#x27;a&#x27; has already been declared</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2. const\"></a>2. const</h3></li>\n<li><p>声明一个只读的常量。一旦声明，常量的值就不能改变</p>\n</li>\n<li><p><code>const</code>只声明，不赋值，就会报错，这意味着<code>const</code>一旦声明常量，就必须立即初始化</p>\n</li>\n<li><p><code>const</code>作用域与<code>let</code>相同，只在所在的块级作用域内有效</p>\n</li>\n<li><p><code>const</code>声明的常量不支持提升，和<code>let</code>一样，只能在声明后使用</p>\n</li>\n<li><p><code>const</code>声明的常量，也与<code>let</code>一样， 不可重复声明</p>\n</li>\n<li><p><code>const</code>实际保证的并不是常量的值不变，而是常量指向的内存地址不得改变</p>\n<ul>\n<li><p>对于简单的数据类型(数字、字符串、布尔值),值就保存在常量指向的地址，因此等同常量</p>\n</li>\n<li><p>对于复合类型的数据(数组、对象)，常量指向的内存地址保存的只是一个指针，const只能保证指针是固定的，但是指针指向的数据结构是不是可变的，并不能保证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">5</span><br><span class=\"hljs-comment\">// a = 10 // 报错 Assignment to constant variable</span><br><br><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;<br>obj.a = <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">// 可执行</span><br><span class=\"hljs-built_in\">console</span>.log(obj) <span class=\"hljs-comment\">// 可执行 &#123;a: 20&#125;</span><br><span class=\"hljs-comment\">// obj = &#123;&#125; // 报错</span><br><br><span class=\"hljs-keyword\">const</span> arry = []<br>arry.push(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 可执行</span><br>arry.length = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// 可执行</span><br><span class=\"hljs-comment\">// arry = [] // 报错 Assignment to constant variable</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-实例演示\"><a href=\"#3-实例演示\" class=\"headerlink\" title=\"3. 实例演示\"></a>3. 实例演示</h3></li>\n</ul>\n</li>\n<li><p>使用var声明循环变量，会导致全局共用一个变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> btns = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;button&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class=\"javascript\">        btns[i].onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是第<span class=\"hljs-subst\">$&#123;i&#125;</span>个按钮`</span>)</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 此时点击任何按钮，输出都是&quot;这是第5个按钮&quot;</span></span><br><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; btns.length; j++) &#123;</span><br><span class=\"javascript\">        btns[j].onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是第<span class=\"hljs-subst\">$&#123;j&#125;</span>个按钮`</span>)</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 把循环中的var改为let,则为正确的结果，即输出对应的按钮序号</span></span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>下面的例子也是for循环中全局共用同一变量的弊端</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-number\">10</span>;i++)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(i) <span class=\"hljs-comment\">// 输出 10个9</span><br>    &#125;, <span class=\"hljs-number\">100</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(i) <span class=\"hljs-comment\">// 9</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;<span class=\"hljs-number\">10</span>;j++)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(j) <span class=\"hljs-comment\">// 输出 0-9</span><br>    &#125;, <span class=\"hljs-number\">100</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(j) <span class=\"hljs-comment\">// 报错 j is not defined</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>解释</p>\n</blockquote>\n</li>\n<li><p>var是全局作用域，有变量提升的作用，所以在for中定义一个变量，全局可以使用，循环中的每一次给变量i赋值都是给全局变量i赋值。</p>\n</li>\n<li><p>let是块级作用域,只能在代码块中起作用，在js中一个{}中的语句我们也称为叫一个代码块，每次循环会产生一个代码块，每个代码块中的都是一个新的变量j</p>\n</li>\n</ul>\n<h3 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h3><blockquote>\n<p><code>let</code>、<code>const</code>使用场景</p>\n</blockquote>\n<ul>\n<li><code>const</code>一般用在需要一个模块时使用或者定义一些全局常量时使用</li>\n<li><code>let</code>限制了变量的作用域，保证变量不会影响全局变量，所以尽量将<code>var</code>改为<code>let</code></li>\n</ul>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"1-箭头函数\"><a href=\"#1-箭头函数\" class=\"headerlink\" title=\"1. 箭头函数\"></a>1. 箭头函数</h3><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p>\n<p>为什么叫Arrow Function？因为它的定义用的就是一个箭头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">x =&gt; x * x<br></code></pre></div></td></tr></table></figure>\n<p>上面的箭头函数相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x * x;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式。一种像上面的，只包含一个表达式，连<code>&#123; ... &#125;</code>和<code>return</code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略<code>&#123; ... &#125;</code>和<code>return</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">x =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> x * x;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> - x * x;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>如果参数不是一个，就需要用括号()括起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 两个参数:</span><br>(x, y) =&gt; x * x + y * y<br><br><span class=\"hljs-comment\">// 无参数:</span><br>() =&gt; <span class=\"hljs-number\">3.14</span><br><br><span class=\"hljs-comment\">// 可变参数:</span><br>(x, y, ...rest) =&gt; &#123;<br>    <span class=\"hljs-keyword\">var</span> i, sum = x + y;<br>    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;rest.length; i++) &#123;<br>        sum += rest[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// SyntaxError:</span><br>x =&gt; &#123; <span class=\"hljs-attr\">foo</span>: x &#125;<br></code></pre></div></td></tr></table></figure>\n<p>因为和函数体的{ … }有语法冲突，所以要改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ok:</span><br>x =&gt; (&#123; <span class=\"hljs-attr\">foo</span>: x &#125;)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-箭头函数与匿名函数异同\"><a href=\"#2-箭头函数与匿名函数异同\" class=\"headerlink\" title=\"2. 箭头函数与匿名函数异同\"></a>2. 箭头函数与匿名函数异同</h3><p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别:</p>\n<p>箭头函数的提出，主要是为了解决多层函数嵌套中this指代混乱的问题；箭头函数内部的this是词法作用域，由上下文确定。</p>\n<ul>\n<li><p>使用普通函数嵌套会产生this指代混乱的问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    age: <span class=\"hljs-number\">18</span>,<br>    getBirth: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> bth = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>          <span class=\"hljs-comment\">// 多层嵌套函数中，this优先寻找父级作用域对象，不存在，即指向全局window对象</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-built_in\">this</span>.age  <span class=\"hljs-comment\">// this.age   undefined</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bth()<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(person.getBirth()) <span class=\"hljs-comment\">// NaN</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>使用箭头函数即可解决问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    age: <span class=\"hljs-number\">18</span>,<br>    getBirth: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> bth = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>          <span class=\"hljs-comment\">// 在箭头函数中 this会寻找父级作用域的对象，找到为止</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-built_in\">this</span>.age  <span class=\"hljs-comment\">// this.age  18</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bth()<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(person.getBirth()) <span class=\"hljs-comment\">// 2002</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-箭头函数不适用的场景\"><a href=\"#3-箭头函数不适用的场景\" class=\"headerlink\" title=\"3. 箭头函数不适用的场景\"></a>3. 箭头函数不适用的场景</h3></li>\n</ul>\n<ol>\n<li><p>作为对象的属性</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<br>    a: <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">// window</span><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<p> 作为对象的属性时，this的指向则不再是对象本身了，这就造成了意想不到的结果</p>\n</li>\n<li><p>不可以作为构造函数来使用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> Person = <span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// Uncaught TypeError: Person is not a constructor</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>);<br></code></pre></div></td></tr></table></figure>\n<p> 这个特性很容易测试，如果上一条明白的话也很容易理解： 箭头函数压根就没有this，当然不能作为构造函数（如果明白构造函数new的过程的话，插一句： new的过程其实就是创建一个对象，将this指向该对象，然后执行代码初始化这个对象，最后返回）</p>\n</li>\n<li><p>不可以作为原型方法</p>\n<p> 同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br>Cat.prototype.sayCatName = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span> === <span class=\"hljs-built_in\">window</span>); <span class=\"hljs-comment\">// =&gt; true</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&#x27;Mew&#x27;</span>);<br>cat.sayCatName(); <span class=\"hljs-comment\">// =&gt; undefined</span><br></code></pre></div></td></tr></table></figure>\n<p> 使用传统的函数表达式就能解决问题：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br>Cat.prototype.sayCatName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span> === cat); <span class=\"hljs-comment\">// =&gt; true</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&#x27;Mew&#x27;</span>);<br>cat.sayCatName(); <span class=\"hljs-comment\">// =&gt; &#x27;Mew&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p> sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。</p>\n</li>\n<li><p>不绑定arguments（如果有要使用arguments的时候可以使用rest参数代替）</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">// Uncaught ReferenceError: arguments is not defined</span><br>&#125;;<br>foo();<br></code></pre></div></td></tr></table></figure>\n<p> 这个特性也很好测试，但是实在要使用<code>arguments</code>对象要怎么办呢？我们可以使用es6的另一个新特性rest参数，完美替代</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(args); <span class=\"hljs-comment\">// [1, 2, 3]</span><br>&#125;;<br>foo(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"JS对象嵌套函数\"><a href=\"#JS对象嵌套函数\" class=\"headerlink\" title=\"JS对象嵌套函数\"></a>JS对象嵌套函数</h2></li>\n</ol>\n<p>在 <code>js</code> 的语法规则中，如果一个对象内存在方法，则该方法 <code>this</code> 指向当前对象。<br>如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    age: <span class=\"hljs-number\">10</span>,<br>    getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.age)<br>    &#125;<br>&#125;<br>obj.getAge();<span class=\"hljs-comment\">// 10</span><br></code></pre></div></td></tr></table></figure>\n<p>若方法中再次包含函数方法，则该嵌套函数指向全局。不能获取到本对象中的属性。<br>如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    age: <span class=\"hljs-number\">10</span>,<br>    getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123; alert(<span class=\"hljs-built_in\">this</span>.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;<br>&#125;<br>obj.getAge();<span class=\"hljs-comment\">// undefined</span><br></code></pre></div></td></tr></table></figure>\n<p>可以通过如下几种办法来解决此问题：<br>（1）定义变量，保存对象 <code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>\t\t<span class=\"hljs-keyword\">let</span> self = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123; alert(self.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n<p>(2) 通过箭头函数的方式 </p>\n<p>由于箭头函数具有默认指向父级调用对象 obj 的特点，因此也可以解决本问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>\t\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; alert(<span class=\"hljs-built_in\">this</span>.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"什么是解构赋值？\"><a href=\"#什么是解构赋值？\" class=\"headerlink\" title=\"什么是解构赋值？\"></a>什么是解构赋值？</h3><p>解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量。这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰。</p>\n<p>通常来说，你很可能这样访问数组中的前三个元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> first = someArray[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> second = someArray[<span class=\"hljs-number\">1</span>];<br><span class=\"hljs-keyword\">var</span> third = someArray[<span class=\"hljs-number\">2</span>];<br></code></pre></div></td></tr></table></figure>\n<p>如果使用解构赋值的特性，将会使等效的代码变得更加简洁并且可读性更高：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [first, second, third] = someArray;<br></code></pre></div></td></tr></table></figure>\n<p><code>SpiderMonkey</code>（Firefox 的 JavaScript 引擎）已经支持解构的大部分功能，但是仍不健全。你可以通过 <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=694100\">bug 694100</a> 跟踪解构和其它 ES6 特性在 <code>SpiderMonkey</code> 中的支持情况。</p>\n<h3 id=\"数组与迭代器的解构\"><a href=\"#数组与迭代器的解构\" class=\"headerlink\" title=\"数组与迭代器的解构\"></a>数组与迭代器的解构</h3><p>以上是数组解构赋值的一个简单示例，其语法的一般形式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">[ variable1, variable2, ..., variableN ] = array;<br></code></pre></div></td></tr></table></figure>\n<p>这将为 variable1 到 variableN 的变量赋予数组中相应元素项的值。如果你想在赋值的同时声明变量，可在赋值语句前加入<code>var</code>、<code>let</code>或<code>const</code>关键字，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [ variable1, variable2, ..., variableN ] = array;<br><span class=\"hljs-keyword\">let</span> [ variable1, variable2, ..., variableN ] = array;<br><span class=\"hljs-keyword\">const</span> [ variable1, variable2, ..., variableN ] = array;<br></code></pre></div></td></tr></table></figure>\n<p>事实上，用<code>变量</code>来描述并不恰当，因为你可以对任意深度的嵌套数组进行解构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [foo, [[bar], baz]] = [<span class=\"hljs-number\">1</span>, [[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>]];<br><span class=\"hljs-built_in\">console</span>.log(foo);  <span class=\"hljs-comment\">// 1</span><br><span class=\"hljs-built_in\">console</span>.log(bar);  <span class=\"hljs-comment\">// 2</span><br><span class=\"hljs-built_in\">console</span>.log(baz);  <span class=\"hljs-comment\">// 3</span><br></code></pre></div></td></tr></table></figure>\n<p>此外，你可以在对应位留空来跳过被解构数组中的某些元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [,,third] = [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-string\">&quot;baz&quot;</span>];<br><span class=\"hljs-built_in\">console</span>.log(third);  <span class=\"hljs-comment\">// &quot;baz&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>而且你还可以通过 “<a href=\"http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults\">不定参数</a>” 模式捕获数组中的所有尾随元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [head, ...tail] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];<br><span class=\"hljs-built_in\">console</span>.log(tail); <span class=\"hljs-comment\">// [2, 3, 4]</span><br></code></pre></div></td></tr></table></figure>\n<p>当访问空数组或越界访问数组时，对其解构与对其索引的行为一致，最终得到的结果都是：<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log([][<span class=\"hljs-number\">0</span>]);   <span class=\"hljs-comment\">// undefined</span><br><span class=\"hljs-keyword\">var</span> [missing] = [];<br><span class=\"hljs-built_in\">console</span>.log(missing); <span class=\"hljs-comment\">// undefined</span><br></code></pre></div></td></tr></table></figure>\n<p>请注意，数组解构赋值的模式同样适用于任意迭代器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibs</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">0</span>;<br>      <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">yield</span> a;<br>        [a, b] = [b, a + b];<br>      &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> [first, second, third, fourth, fifth, sixth] = fibs();<br><span class=\"hljs-built_in\">console</span>.log(sixth);  <span class=\"hljs-comment\">// 5</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3><p>通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> robotA = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Bender&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> robotB = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Flexo&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">name</span>: nameA &#125; = robotA;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">name</span>: nameB &#125; = robotB;<br><br><span class=\"hljs-built_in\">console</span>.log(nameA);  <span class=\"hljs-comment\">// &quot;Bender&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(nameB);  <span class=\"hljs-comment\">// &quot;Flexo&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>当属性名与变量名一致时，可以通过一种实用的句法简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123; foo, bar &#125; = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;lorem&quot;</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;ipsum&quot;</span> &#125;;<br><br><span class=\"hljs-built_in\">console</span>.log(foo);  <span class=\"hljs-comment\">// &quot;lorem&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(bar);  <span class=\"hljs-comment\">// &quot;ipsum&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>与数组解构一样，你可以随意嵌套并进一步组合对象解构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> complicatedObj = &#123;<br>  arrayProp: [<br>    <span class=\"hljs-string\">&quot;Zapp&quot;</span>,<br>    &#123; <span class=\"hljs-attr\">second</span>: <span class=\"hljs-string\">&quot;Brannigan&quot;</span> &#125;<br>  ]<br>&#125;;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">arrayProp</span>: [first, &#123; second &#125;] &#125; = complicatedObj;<br><span class=\"hljs-built_in\">console</span>.log(first);<br><span class=\"hljs-comment\">// &quot;Zapp&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(second);<br><span class=\"hljs-comment\">// &quot;Brannigan&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>当你解构一个未定义的属性时，得到的值为<code>undefined</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123; missing &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(missing);<br><span class=\"hljs-comment\">// undefined</span><br></code></pre></div></td></tr></table></figure>\n<p>请注意，当你解构对象并赋值给变量时，如果你已经声明或不打算声明这些变量（亦即赋值语句前没有<code>let</code>、<code>const</code>或<code>var</code>关键字），你应该注意这样一个潜在的语法错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&#123; blowUp &#125; = &#123; <span class=\"hljs-attr\">blowUp</span>: <span class=\"hljs-number\">10</span> &#125;;<br><span class=\"hljs-comment\">// Syntax error 语法错误</span><br></code></pre></div></td></tr></table></figure>\n<p>为什么会出错？这是因为 JavaScript 语法通知解析引擎将任何以 {开始的语句解析为一个块语句（例如，<code>&#123;console&#125;</code>是一个合法块语句）。解决方案是将整个表达式用一对小括号包裹：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">(&#123; safe &#125; = &#123;&#125;);<br><span class=\"hljs-comment\">// No errors 没有语法错误</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"解构值不是对象、数组或迭代器\"><a href=\"#解构值不是对象、数组或迭代器\" class=\"headerlink\" title=\"解构值不是对象、数组或迭代器\"></a>解构值不是对象、数组或迭代器</h3><p>当你尝试解构<code>null</code>或<code>undefined</code>时，你会得到一个类型错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123;blowUp&#125; = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-comment\">// TypeError: null has no properties（null没有属性）</span><br></code></pre></div></td></tr></table></figure>\n<p>然而，你可以解构其它原始类型，例如：<code>布尔值</code>、<code>数值</code>、<code>字符串</code>，但是你将得到<code>undefined</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123;wtf&#125; = <span class=\"hljs-literal\">NaN</span>;<br><span class=\"hljs-built_in\">console</span>.log(wtf);<br><span class=\"hljs-comment\">// undefined</span><br></code></pre></div></td></tr></table></figure>\n<p>你可能对此感到意外，但经过进一步审查你就会发现，原因其实非常简单。当使用对象赋值模式时，被解构的值<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible\">需要被强制转换为对象</a>。大多数类型都可以被转换为对象，但<code>null</code>和<code>undefined</code>却无法进行转换。当使用数组赋值模式时，被解构的值一定要<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-getiterator\">包含一个迭代器</a>。</p>\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><p>当你要解构的属性未定义时你可以提供一个默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [missing = <span class=\"hljs-literal\">true</span>] = [];<br><span class=\"hljs-built_in\">console</span>.log(missing);<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">message</span>: msg = <span class=\"hljs-string\">&quot;Something went wrong&quot;</span> &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(msg);<br><span class=\"hljs-comment\">// &quot;Something went wrong&quot;</span><br><span class=\"hljs-keyword\">var</span> &#123; x = <span class=\"hljs-number\">3</span> &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(x);<br><span class=\"hljs-comment\">// 3</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><h3 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1. let\"></a>1. <code>let</code></h3><ul>\n<li><p><code>let</code>作用域只局限于当前代码块</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>   <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br>   <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">20</span><br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// 输出 10</span><br><span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// 报错 b is not defined</span><br></code></pre></td></tr></table></figure></li>\n<li><p>使用<code>let</code>声明的变量作用域不会提前</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// 输出 undefined</span><br><span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// 报错 Cannot access &#x27;b&#x27; before initialization</span><br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">20</span><br></code></pre></td></tr></table></figure></li>\n<li><p>在相同的作用域下不能声明相同的变量</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">     &#123;<br>    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">20</span><br></code></pre></td></tr></table></figure>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">20</span>  <span class=\"hljs-comment\">// 报错 Identifier &#x27;a&#x27; has already been declared</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2. const\"></a>2. const</h3></li>\n<li><p>声明一个只读的常量。一旦声明，常量的值就不能改变</p>\n</li>\n<li><p><code>const</code>只声明，不赋值，就会报错，这意味着<code>const</code>一旦声明常量，就必须立即初始化</p>\n</li>\n<li><p><code>const</code>作用域与<code>let</code>相同，只在所在的块级作用域内有效</p>\n</li>\n<li><p><code>const</code>声明的常量不支持提升，和<code>let</code>一样，只能在声明后使用</p>\n</li>\n<li><p><code>const</code>声明的常量，也与<code>let</code>一样， 不可重复声明</p>\n</li>\n<li><p><code>const</code>实际保证的并不是常量的值不变，而是常量指向的内存地址不得改变</p>\n<ul>\n<li><p>对于简单的数据类型(数字、字符串、布尔值),值就保存在常量指向的地址，因此等同常量</p>\n</li>\n<li><p>对于复合类型的数据(数组、对象)，常量指向的内存地址保存的只是一个指针，const只能保证指针是固定的，但是指针指向的数据结构是不是可变的，并不能保证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">5</span><br><span class=\"hljs-comment\">// a = 10 // 报错 Assignment to constant variable</span><br><br><span class=\"hljs-keyword\">const</span> obj = &#123;&#125;<br>obj.a = <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">// 可执行</span><br><span class=\"hljs-built_in\">console</span>.log(obj) <span class=\"hljs-comment\">// 可执行 &#123;a: 20&#125;</span><br><span class=\"hljs-comment\">// obj = &#123;&#125; // 报错</span><br><br><span class=\"hljs-keyword\">const</span> arry = []<br>arry.push(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 可执行</span><br>arry.length = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// 可执行</span><br><span class=\"hljs-comment\">// arry = [] // 报错 Assignment to constant variable</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-实例演示\"><a href=\"#3-实例演示\" class=\"headerlink\" title=\"3. 实例演示\"></a>3. 实例演示</h3></li>\n</ul>\n</li>\n<li><p>使用var声明循环变量，会导致全局共用一个变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> btns = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;button&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class=\"javascript\">        btns[i].onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是第<span class=\"hljs-subst\">$&#123;i&#125;</span>个按钮`</span>)</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 此时点击任何按钮，输出都是&quot;这是第5个按钮&quot;</span></span><br><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; btns.length; j++) &#123;</span><br><span class=\"javascript\">        btns[j].onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是第<span class=\"hljs-subst\">$&#123;j&#125;</span>个按钮`</span>)</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 把循环中的var改为let,则为正确的结果，即输出对应的按钮序号</span></span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>下面的例子也是for循环中全局共用同一变量的弊端</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-number\">10</span>;i++)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(i) <span class=\"hljs-comment\">// 输出 10个9</span><br>    &#125;, <span class=\"hljs-number\">100</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(i) <span class=\"hljs-comment\">// 9</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;<span class=\"hljs-number\">10</span>;j++)&#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(j) <span class=\"hljs-comment\">// 输出 0-9</span><br>    &#125;, <span class=\"hljs-number\">100</span>)<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(j) <span class=\"hljs-comment\">// 报错 j is not defined</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>解释</p>\n</blockquote>\n</li>\n<li><p>var是全局作用域，有变量提升的作用，所以在for中定义一个变量，全局可以使用，循环中的每一次给变量i赋值都是给全局变量i赋值。</p>\n</li>\n<li><p>let是块级作用域,只能在代码块中起作用，在js中一个{}中的语句我们也称为叫一个代码块，每次循环会产生一个代码块，每个代码块中的都是一个新的变量j</p>\n</li>\n</ul>\n<h3 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4. 小结\"></a>4. 小结</h3><blockquote>\n<p><code>let</code>、<code>const</code>使用场景</p>\n</blockquote>\n<ul>\n<li><code>const</code>一般用在需要一个模块时使用或者定义一些全局常量时使用</li>\n<li><code>let</code>限制了变量的作用域，保证变量不会影响全局变量，所以尽量将<code>var</code>改为<code>let</code></li>\n</ul>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"1-箭头函数\"><a href=\"#1-箭头函数\" class=\"headerlink\" title=\"1. 箭头函数\"></a>1. 箭头函数</h3><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p>\n<p>为什么叫Arrow Function？因为它的定义用的就是一个箭头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">x =&gt; x * x<br></code></pre></td></tr></table></figure>\n<p>上面的箭头函数相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x * x;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式。一种像上面的，只包含一个表达式，连<code>&#123; ... &#125;</code>和<code>return</code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略<code>&#123; ... &#125;</code>和<code>return</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">x =&gt; &#123;<br>    <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> x * x;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> - x * x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果参数不是一个，就需要用括号()括起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 两个参数:</span><br>(x, y) =&gt; x * x + y * y<br><br><span class=\"hljs-comment\">// 无参数:</span><br>() =&gt; <span class=\"hljs-number\">3.14</span><br><br><span class=\"hljs-comment\">// 可变参数:</span><br>(x, y, ...rest) =&gt; &#123;<br>    <span class=\"hljs-keyword\">var</span> i, sum = x + y;<br>    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;rest.length; i++) &#123;<br>        sum += rest[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// SyntaxError:</span><br>x =&gt; &#123; <span class=\"hljs-attr\">foo</span>: x &#125;<br></code></pre></td></tr></table></figure>\n<p>因为和函数体的{ … }有语法冲突，所以要改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ok:</span><br>x =&gt; (&#123; <span class=\"hljs-attr\">foo</span>: x &#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-箭头函数与匿名函数异同\"><a href=\"#2-箭头函数与匿名函数异同\" class=\"headerlink\" title=\"2. 箭头函数与匿名函数异同\"></a>2. 箭头函数与匿名函数异同</h3><p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别:</p>\n<p>箭头函数的提出，主要是为了解决多层函数嵌套中this指代混乱的问题；箭头函数内部的this是词法作用域，由上下文确定。</p>\n<ul>\n<li><p>使用普通函数嵌套会产生this指代混乱的问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    age: <span class=\"hljs-number\">18</span>,<br>    getBirth: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> bth = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>          <span class=\"hljs-comment\">// 多层嵌套函数中，this优先寻找父级作用域对象，不存在，即指向全局window对象</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-built_in\">this</span>.age  <span class=\"hljs-comment\">// this.age   undefined</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bth()<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(person.getBirth()) <span class=\"hljs-comment\">// NaN</span><br></code></pre></td></tr></table></figure></li>\n<li><p>使用箭头函数即可解决问题</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    age: <span class=\"hljs-number\">18</span>,<br>    getBirth: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> bth = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>          <span class=\"hljs-comment\">// 在箭头函数中 this会寻找父级作用域的对象，找到为止</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-built_in\">this</span>.age  <span class=\"hljs-comment\">// this.age  18</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bth()<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(person.getBirth()) <span class=\"hljs-comment\">// 2002</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-箭头函数不适用的场景\"><a href=\"#3-箭头函数不适用的场景\" class=\"headerlink\" title=\"3. 箭头函数不适用的场景\"></a>3. 箭头函数不适用的场景</h3></li>\n</ul>\n<ol>\n<li><p>作为对象的属性</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<br>    a: <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">// window</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p> 作为对象的属性时，this的指向则不再是对象本身了，这就造成了意想不到的结果</p>\n</li>\n<li><p>不可以作为构造函数来使用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> Person = <span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// Uncaught TypeError: Person is not a constructor</span><br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;Jack&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<p> 这个特性很容易测试，如果上一条明白的话也很容易理解： 箭头函数压根就没有this，当然不能作为构造函数（如果明白构造函数new的过程的话，插一句： new的过程其实就是创建一个对象，将this指向该对象，然后执行代码初始化这个对象，最后返回）</p>\n</li>\n<li><p>不可以作为原型方法</p>\n<p> 同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br>Cat.prototype.sayCatName = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span> === <span class=\"hljs-built_in\">window</span>); <span class=\"hljs-comment\">// =&gt; true</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&#x27;Mew&#x27;</span>);<br>cat.sayCatName(); <span class=\"hljs-comment\">// =&gt; undefined</span><br></code></pre></td></tr></table></figure>\n<p> 使用传统的函数表达式就能解决问题：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>&#125;<br><br>Cat.prototype.sayCatName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span> === cat); <span class=\"hljs-comment\">// =&gt; true</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat(<span class=\"hljs-string\">&#x27;Mew&#x27;</span>);<br>cat.sayCatName(); <span class=\"hljs-comment\">// =&gt; &#x27;Mew&#x27;</span><br></code></pre></td></tr></table></figure>\n<p> sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。</p>\n</li>\n<li><p>不绑定arguments（如果有要使用arguments的时候可以使用rest参数代替）</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">// Uncaught ReferenceError: arguments is not defined</span><br>&#125;;<br>foo();<br></code></pre></td></tr></table></figure>\n<p> 这个特性也很好测试，但是实在要使用<code>arguments</code>对象要怎么办呢？我们可以使用es6的另一个新特性rest参数，完美替代</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(args); <span class=\"hljs-comment\">// [1, 2, 3]</span><br>&#125;;<br>foo(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"JS对象嵌套函数\"><a href=\"#JS对象嵌套函数\" class=\"headerlink\" title=\"JS对象嵌套函数\"></a>JS对象嵌套函数</h2></li>\n</ol>\n<p>在 <code>js</code> 的语法规则中，如果一个对象内存在方法，则该方法 <code>this</code> 指向当前对象。<br>如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    age: <span class=\"hljs-number\">10</span>,<br>    getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.age)<br>    &#125;<br>&#125;<br>obj.getAge();<span class=\"hljs-comment\">// 10</span><br></code></pre></td></tr></table></figure>\n<p>若方法中再次包含函数方法，则该嵌套函数指向全局。不能获取到本对象中的属性。<br>如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    age: <span class=\"hljs-number\">10</span>,<br>    getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123; alert(<span class=\"hljs-built_in\">this</span>.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;<br>&#125;<br>obj.getAge();<span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>可以通过如下几种办法来解决此问题：<br>（1）定义变量，保存对象 <code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>\t\t<span class=\"hljs-keyword\">let</span> self = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123; alert(self.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>(2) 通过箭头函数的方式 </p>\n<p>由于箭头函数具有默认指向父级调用对象 obj 的特点，因此也可以解决本问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">getAge: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <br>\t\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123; alert(<span class=\"hljs-built_in\">this</span>.age)&#125;, <span class=\"hljs-number\">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><h3 id=\"什么是解构赋值？\"><a href=\"#什么是解构赋值？\" class=\"headerlink\" title=\"什么是解构赋值？\"></a>什么是解构赋值？</h3><p>解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量。这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰。</p>\n<p>通常来说，你很可能这样访问数组中的前三个元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> first = someArray[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> second = someArray[<span class=\"hljs-number\">1</span>];<br><span class=\"hljs-keyword\">var</span> third = someArray[<span class=\"hljs-number\">2</span>];<br></code></pre></td></tr></table></figure>\n<p>如果使用解构赋值的特性，将会使等效的代码变得更加简洁并且可读性更高：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [first, second, third] = someArray;<br></code></pre></td></tr></table></figure>\n<p><code>SpiderMonkey</code>（Firefox 的 JavaScript 引擎）已经支持解构的大部分功能，但是仍不健全。你可以通过 <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=694100\">bug 694100</a> 跟踪解构和其它 ES6 特性在 <code>SpiderMonkey</code> 中的支持情况。</p>\n<h3 id=\"数组与迭代器的解构\"><a href=\"#数组与迭代器的解构\" class=\"headerlink\" title=\"数组与迭代器的解构\"></a>数组与迭代器的解构</h3><p>以上是数组解构赋值的一个简单示例，其语法的一般形式为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[ variable1, variable2, ..., variableN ] = array;<br></code></pre></td></tr></table></figure>\n<p>这将为 variable1 到 variableN 的变量赋予数组中相应元素项的值。如果你想在赋值的同时声明变量，可在赋值语句前加入<code>var</code>、<code>let</code>或<code>const</code>关键字，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [ variable1, variable2, ..., variableN ] = array;<br><span class=\"hljs-keyword\">let</span> [ variable1, variable2, ..., variableN ] = array;<br><span class=\"hljs-keyword\">const</span> [ variable1, variable2, ..., variableN ] = array;<br></code></pre></td></tr></table></figure>\n<p>事实上，用<code>变量</code>来描述并不恰当，因为你可以对任意深度的嵌套数组进行解构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [foo, [[bar], baz]] = [<span class=\"hljs-number\">1</span>, [[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>]];<br><span class=\"hljs-built_in\">console</span>.log(foo);  <span class=\"hljs-comment\">// 1</span><br><span class=\"hljs-built_in\">console</span>.log(bar);  <span class=\"hljs-comment\">// 2</span><br><span class=\"hljs-built_in\">console</span>.log(baz);  <span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>\n<p>此外，你可以在对应位留空来跳过被解构数组中的某些元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [,,third] = [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-string\">&quot;baz&quot;</span>];<br><span class=\"hljs-built_in\">console</span>.log(third);  <span class=\"hljs-comment\">// &quot;baz&quot;</span><br></code></pre></td></tr></table></figure>\n<p>而且你还可以通过 “<a href=\"http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults\">不定参数</a>” 模式捕获数组中的所有尾随元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [head, ...tail] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];<br><span class=\"hljs-built_in\">console</span>.log(tail); <span class=\"hljs-comment\">// [2, 3, 4]</span><br></code></pre></td></tr></table></figure>\n<p>当访问空数组或越界访问数组时，对其解构与对其索引的行为一致，最终得到的结果都是：<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log([][<span class=\"hljs-number\">0</span>]);   <span class=\"hljs-comment\">// undefined</span><br><span class=\"hljs-keyword\">var</span> [missing] = [];<br><span class=\"hljs-built_in\">console</span>.log(missing); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>请注意，数组解构赋值的模式同样适用于任意迭代器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibs</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">0</span>;<br>      <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">yield</span> a;<br>        [a, b] = [b, a + b];<br>      &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> [first, second, third, fourth, fifth, sixth] = fibs();<br><span class=\"hljs-built_in\">console</span>.log(sixth);  <span class=\"hljs-comment\">// 5</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3><p>通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> robotA = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Bender&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> robotB = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Flexo&quot;</span> &#125;;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">name</span>: nameA &#125; = robotA;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">name</span>: nameB &#125; = robotB;<br><br><span class=\"hljs-built_in\">console</span>.log(nameA);  <span class=\"hljs-comment\">// &quot;Bender&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(nameB);  <span class=\"hljs-comment\">// &quot;Flexo&quot;</span><br></code></pre></td></tr></table></figure>\n<p>当属性名与变量名一致时，可以通过一种实用的句法简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123; foo, bar &#125; = &#123; <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;lorem&quot;</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;ipsum&quot;</span> &#125;;<br><br><span class=\"hljs-built_in\">console</span>.log(foo);  <span class=\"hljs-comment\">// &quot;lorem&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(bar);  <span class=\"hljs-comment\">// &quot;ipsum&quot;</span><br></code></pre></td></tr></table></figure>\n<p>与数组解构一样，你可以随意嵌套并进一步组合对象解构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> complicatedObj = &#123;<br>  arrayProp: [<br>    <span class=\"hljs-string\">&quot;Zapp&quot;</span>,<br>    &#123; <span class=\"hljs-attr\">second</span>: <span class=\"hljs-string\">&quot;Brannigan&quot;</span> &#125;<br>  ]<br>&#125;;<br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">arrayProp</span>: [first, &#123; second &#125;] &#125; = complicatedObj;<br><span class=\"hljs-built_in\">console</span>.log(first);<br><span class=\"hljs-comment\">// &quot;Zapp&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(second);<br><span class=\"hljs-comment\">// &quot;Brannigan&quot;</span><br></code></pre></td></tr></table></figure>\n<p>当你解构一个未定义的属性时，得到的值为<code>undefined</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123; missing &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(missing);<br><span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>请注意，当你解构对象并赋值给变量时，如果你已经声明或不打算声明这些变量（亦即赋值语句前没有<code>let</code>、<code>const</code>或<code>var</code>关键字），你应该注意这样一个潜在的语法错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; blowUp &#125; = &#123; <span class=\"hljs-attr\">blowUp</span>: <span class=\"hljs-number\">10</span> &#125;;<br><span class=\"hljs-comment\">// Syntax error 语法错误</span><br></code></pre></td></tr></table></figure>\n<p>为什么会出错？这是因为 JavaScript 语法通知解析引擎将任何以 {开始的语句解析为一个块语句（例如，<code>&#123;console&#125;</code>是一个合法块语句）。解决方案是将整个表达式用一对小括号包裹：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">(&#123; safe &#125; = &#123;&#125;);<br><span class=\"hljs-comment\">// No errors 没有语法错误</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"解构值不是对象、数组或迭代器\"><a href=\"#解构值不是对象、数组或迭代器\" class=\"headerlink\" title=\"解构值不是对象、数组或迭代器\"></a>解构值不是对象、数组或迭代器</h3><p>当你尝试解构<code>null</code>或<code>undefined</code>时，你会得到一个类型错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123;blowUp&#125; = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-comment\">// TypeError: null has no properties（null没有属性）</span><br></code></pre></td></tr></table></figure>\n<p>然而，你可以解构其它原始类型，例如：<code>布尔值</code>、<code>数值</code>、<code>字符串</code>，但是你将得到<code>undefined</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> &#123;wtf&#125; = <span class=\"hljs-literal\">NaN</span>;<br><span class=\"hljs-built_in\">console</span>.log(wtf);<br><span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n<p>你可能对此感到意外，但经过进一步审查你就会发现，原因其实非常简单。当使用对象赋值模式时，被解构的值<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible\">需要被强制转换为对象</a>。大多数类型都可以被转换为对象，但<code>null</code>和<code>undefined</code>却无法进行转换。当使用数组赋值模式时，被解构的值一定要<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-getiterator\">包含一个迭代器</a>。</p>\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><p>当你要解构的属性未定义时你可以提供一个默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> [missing = <span class=\"hljs-literal\">true</span>] = [];<br><span class=\"hljs-built_in\">console</span>.log(missing);<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-keyword\">var</span> &#123; <span class=\"hljs-attr\">message</span>: msg = <span class=\"hljs-string\">&quot;Something went wrong&quot;</span> &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(msg);<br><span class=\"hljs-comment\">// &quot;Something went wrong&quot;</span><br><span class=\"hljs-keyword\">var</span> &#123; x = <span class=\"hljs-number\">3</span> &#125; = &#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(x);<br><span class=\"hljs-comment\">// 3</span><br></code></pre></td></tr></table></figure>"},{"title":"vue-router","date":"2020-04-14T13:44:51.000Z","_content":"\nVue.js官方提供了一套专用的路由工具库 Vue Router,其使用和配置都非常简单。\n\n## 安装路由\n\n可以使用npm包的方式来安装路由\n\n```bash\ncnpm install vue-router --save\n```\n\n> 其实通过Vue-cli脚手架快速搭建项目时，命令行会询问是否安装路由功能，从而并不需要额外安装路由功能\n\n通过Vue-cli脚手架搭建的项目，在`src/router`文件夹内部有`index.js`文件，打开index.js文件会看到以下引用。\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n```\n\n在入口文件`src/main.js`中导入`src/router/index.js`文件，即可使用路由配置的信息\n\n```javascript\nimport router from './router'\n//等效于\n//import router from './router/index.js'\n```\n\n## 建立路由模块\n\n先建立一个路由器模块,主要用来配置和绑定相关信息。\n\n在`src/router/index.js`文件中使用`new Router`命令创建一个路由,一个路由是一个对象。\n\n一条路由的实现需要三部分:`name` 、`path`和`component`。`name`是命名,`path`是路径,`component`是组件\n\n```javascript\n// src/router/index.js\n\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\n// 把对应的组件或页面引入进来\nimport Login from '@/pages/login' // @指src根路径\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/', // 这里默认是跳转到HelloWorld 组件， 后期会改为项目首页\n      name: 'HelloWorld',\n      component: HelloWorld\n    },\n    {\n      path:'/login',\n      name: 'Login',\n      component: Login  // 后续如果还有页面要跳转，就按照这样的格式继续书写\n    }\n  ]\n})\n```\n\n> 导入`HelloWorld`组件的时候，实际上导入的是`src/components/HelloWorld.vue`.因为在`Webpack`中配置了，所以可以省略vue后缀。`*.vue`文件是Vue的单文件组件格式，可以同时包括模板定义、样式定义和组件模块定义。\n\n## 启动路由器\n\n1. 在`main.js`入口文件中启用该路由器。\n   \n    `main.js`作为入口文件，使用`import`可以把所有要用到的包都导入到这里，然后在Vue项目中去运用它们。\n   \n    创建和挂载根实例，通过`router`配置参数注入路由，从而让整个应用都有路由功能\n   \n   ```javascript\n    // src/main.js\n   \n    import Vue from 'vue'\n    import App from './App'\n    import router from './router'\n   \n    new Vue({\n    el: '#app',\n    router,\n    components: { App },\n    template: '<App/>'\n    })\n   ```\n   \n   > 浅析 导包方式\n   \n    这个不是vue的规定而是node加载模块的方式,当require('./router')(import会被转为require),node是这样的寻找目标的:\n   \n   1. 首先寻找目录下有没有router.js或者router.node,如果有就导入\n   \n   2. 如果没有看是否有router目录,如果没有就require失败,抛出异常\"Cannot find module './router'\"\n   \n   3. 如果有router目录会在其下寻找package.json文件,如果有则按照package的配置来导入\n   \n   4. 如果没有package.json,看是否有index.js或者index.node,如果有就导入没有就失败\n      \n       详细见node文档：[https://nodejs.org/api/modules.html#modules_folders_as_module](https://nodejs.org/api/modules.html#modules_folders_as_module)\n\n2. 配置之后，路由匹配到的组件将会渲染到`App.vue`的`＜router-view></router-view>`\n   \n   ```javascript\n    // src/App.vue\n   \n    <template>\n    <div id=\"app\">\n        <router-view/>\n    </div>\n    </template>\n   ```\n\n3. 最后App.vue 会渲染到`index.html`\n   \n   ```html\n    <body>\n    <div id=”app”></div>\n    </body>\n   ```\n   \n    这样就会把渲染出来的页面挂载到id为app的div里了\n\n## 路由重定向\n\n1. 项目应用通常都会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路径发生跳转。重定向也是通过`routes`配置来完成的\n   \n   ```javascript\n    routes: [\n        {\n        path: '/index',\n        name: 'index',\n        component: HelloWorld\n        },\n   \n        // 从\"/\"重定向到\"/index\"\n        {\n        path:\"/\",\n        redirect:'/index'\n        },\n   \n        // 重定向的目标也可以是一个命名的路由\n        {\n        path:\"/p1\",\n        redirect: { name:\"index\" }\n        },\n   \n        // 重定向的目标甚至可以是一个方法，动态返回重定向目标\n        {\n        path:\"/p2\",\n        redirect:to=>{\n            // 方法接收 \"目标路由\" 作为参数\n            // return 重定向的 \"字符串路径／路径对象\"\n   \n            // return '/index'\n            return {name: 'index'}\n        }\n        }\n    ]\n   ```\n\n## `<router-link>`\n\n1. `<router-link＞`组件支持用户在具有路由功能的应用中单击导航。\n   \n    通过`to`属性可以指定目标地址,默认渲染成带有正确链接的`＜a＞`标签,通过配置`tag`属性可以生成别的标签。\n   \n    另外,当目标路由成功激活时,链接元素会自动设置一个表示激活的`css`类名。\n   \n   ```html\n    <!-- 直接给to指定属性值, 不提倡使用，尽量使用属性绑定 -->\n    <router-link to='/goods'>商品</router-link>\n   \n    <!-- 使用v-bind 绑定 JS表达式-->\n    <router-link :to=\"'/goods'\">商品</router-link>\n   \n    <!-- 绑定data中的变量path -->\n    <router-link :to='path'>商品</router-link>\n   \n    <!-- 绑定对象，自定义网址，携带查询参数 ==> /goods?id=1 -->\n    <router-link :to=\"{'path':'/goods', , query:{'id':1}}}\">商品</router-link>\n   \n    <!-- 绑定 对象，命名路由，携带params参数 ==> /goods/1 -->\n    <router-link :to=\"{name:'goods', params:{'id':1}}\">商品</router-link>\n   ```\n\n## 路由对象属性\n\n> `route`和`router`区别:`vue-router`中经常会操作的两个对象`router`和`route`两个\n\n1. `route`是一个跳转的路由对象，每一个路由都会有一个`route`对象，是一个局部的对象，可以获取对应的`name`,`path`,`params`,`query`等\n   \n    下面列出了常用的路由信息对象属性\n   \n   - `$route.path`: 字符串，对应当前路由的路径，总是解析为绝对路径,如`\"/goods\"`\n   - `$route.params`: 一个`key/value`对象, 包含了动态片段和全匹配片段，如果没有路由参数，就为空对象。\n   - `$route.query`: 一个`key/value`对象, 表示URL查询参数。例如: 对于路径`/goods?cate_id=1`,则有`$route.query.cate_id == 1`；如果没有查询参数,则为空对象\n   - `$route.hash`: 当前路由的`hash`值(不带#)，如果没有`hash`值，则为空字符串。\n   - `$route.ful1Path`: 完成解析后的URL，包含查询参数和hash的完整路径。\n   - `$route.matched`: 一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是`routes`配置数组中的对象副本(还有一些在children数组)。\n\n2. `router`是`VueRouter`的一个对象，通过`Vue.use(VueRouter)`和`VueRouter`构造函数得到一个`router`的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。\n   \n    下面列出了常用的路由信息对象方法\n   \n   - `router.push(location)`: 要导航到不同的URL，则使用`router.push`方法。该方法会向`history`栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL。\n     \n     ```javascript\n       router.push('/goods') // 字符串\n       router.push({path: '/goods'}) // 对象\n     \n       // 自定义网址，携带查询参数\n       router.push({ path: \"/goods\", query: { id: 1 } }) // -> /goods?id=1\n     \n       // 命名路由，携带params参数\n       router.push({ name: \"goods\", params: { id: 1 } }) // -> /goods/1\n     ```\n     \n       由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式了。\n     \n     > 当单击`＜router-link＞`时，会在内部调用`router.push(...)`方法，所以说单击`＜router-link:to＝\"...\">`等同于调用`router.push(...)`。\n     \n     ```javascript\n       // 当跳转之前，两种方式可以携带params参数\n       // <router-link :to=\"{name:'goods', params:{'id':1}}\">商品</router-link>\n       // router.push({ name: \"goods\", params: { id: 1 } })\n     \n       // 对应的路由配置有两种方式:\n       // 1. 将参数获取直接体现在网址上\n       routes: [\n           {\n           path: '/goods/:id',\n           name: 'goods',\n           component: goods\n           }\n       ]\n       // 此时会导致之前的params参数拼接在网址上， 为\"/goods/1\"，刷新不丢失数据\n     \n       // 2. 不在网址上体现\n       routes: [\n           {\n           path: '/goods',\n           name: 'goods',\n           component: goods\n           }\n       ]\n       // 此时会导致之前的参数不能表现出来，网址仍为\"/goods\"，刷新之后，参数丢失\n     \n       // 但是不管怎么配置路由，参数获取方式相同\n     ```\n   \n   - `router.replace(location)`: `router.replace`与`router.push`很像，唯一的不同是它不会向`history`栈添加新记录，而是跟它的方法名一样只替换掉当前的history 记录。`router.replace(...)`等价于`＜router-link :to＝\"...\" replace＞`\n   \n   - `router.go(n)`: 参数是一个整数，表示在`history`记录中向前进多少步或向后退多少步\n     \n     ```javascript\n       // 在浏览器记录中前进一步，等同于history.forward()\n       router.go(1)\n       // 后退一步，等同于history.back()\n       router.go(-1)\n       // 前进三步\n       router.go(3)\n       // 如果history记录不够，就会失败\n       router.go(-100)\n       router.go(100)\n     ```\n","source":"_posts/Vue-vue-router.md","raw":"---\ntitle: vue-router\ndate: 2020-04-14 21:44:51\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - vue-router\n    - 路由\n---\n\nVue.js官方提供了一套专用的路由工具库 Vue Router,其使用和配置都非常简单。\n\n## 安装路由\n\n可以使用npm包的方式来安装路由\n\n```bash\ncnpm install vue-router --save\n```\n\n> 其实通过Vue-cli脚手架快速搭建项目时，命令行会询问是否安装路由功能，从而并不需要额外安装路由功能\n\n通过Vue-cli脚手架搭建的项目，在`src/router`文件夹内部有`index.js`文件，打开index.js文件会看到以下引用。\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nVue.use(Router)\n```\n\n在入口文件`src/main.js`中导入`src/router/index.js`文件，即可使用路由配置的信息\n\n```javascript\nimport router from './router'\n//等效于\n//import router from './router/index.js'\n```\n\n## 建立路由模块\n\n先建立一个路由器模块,主要用来配置和绑定相关信息。\n\n在`src/router/index.js`文件中使用`new Router`命令创建一个路由,一个路由是一个对象。\n\n一条路由的实现需要三部分:`name` 、`path`和`component`。`name`是命名,`path`是路径,`component`是组件\n\n```javascript\n// src/router/index.js\n\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\n// 把对应的组件或页面引入进来\nimport Login from '@/pages/login' // @指src根路径\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/', // 这里默认是跳转到HelloWorld 组件， 后期会改为项目首页\n      name: 'HelloWorld',\n      component: HelloWorld\n    },\n    {\n      path:'/login',\n      name: 'Login',\n      component: Login  // 后续如果还有页面要跳转，就按照这样的格式继续书写\n    }\n  ]\n})\n```\n\n> 导入`HelloWorld`组件的时候，实际上导入的是`src/components/HelloWorld.vue`.因为在`Webpack`中配置了，所以可以省略vue后缀。`*.vue`文件是Vue的单文件组件格式，可以同时包括模板定义、样式定义和组件模块定义。\n\n## 启动路由器\n\n1. 在`main.js`入口文件中启用该路由器。\n   \n    `main.js`作为入口文件，使用`import`可以把所有要用到的包都导入到这里，然后在Vue项目中去运用它们。\n   \n    创建和挂载根实例，通过`router`配置参数注入路由，从而让整个应用都有路由功能\n   \n   ```javascript\n    // src/main.js\n   \n    import Vue from 'vue'\n    import App from './App'\n    import router from './router'\n   \n    new Vue({\n    el: '#app',\n    router,\n    components: { App },\n    template: '<App/>'\n    })\n   ```\n   \n   > 浅析 导包方式\n   \n    这个不是vue的规定而是node加载模块的方式,当require('./router')(import会被转为require),node是这样的寻找目标的:\n   \n   1. 首先寻找目录下有没有router.js或者router.node,如果有就导入\n   \n   2. 如果没有看是否有router目录,如果没有就require失败,抛出异常\"Cannot find module './router'\"\n   \n   3. 如果有router目录会在其下寻找package.json文件,如果有则按照package的配置来导入\n   \n   4. 如果没有package.json,看是否有index.js或者index.node,如果有就导入没有就失败\n      \n       详细见node文档：[https://nodejs.org/api/modules.html#modules_folders_as_module](https://nodejs.org/api/modules.html#modules_folders_as_module)\n\n2. 配置之后，路由匹配到的组件将会渲染到`App.vue`的`＜router-view></router-view>`\n   \n   ```javascript\n    // src/App.vue\n   \n    <template>\n    <div id=\"app\">\n        <router-view/>\n    </div>\n    </template>\n   ```\n\n3. 最后App.vue 会渲染到`index.html`\n   \n   ```html\n    <body>\n    <div id=”app”></div>\n    </body>\n   ```\n   \n    这样就会把渲染出来的页面挂载到id为app的div里了\n\n## 路由重定向\n\n1. 项目应用通常都会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路径发生跳转。重定向也是通过`routes`配置来完成的\n   \n   ```javascript\n    routes: [\n        {\n        path: '/index',\n        name: 'index',\n        component: HelloWorld\n        },\n   \n        // 从\"/\"重定向到\"/index\"\n        {\n        path:\"/\",\n        redirect:'/index'\n        },\n   \n        // 重定向的目标也可以是一个命名的路由\n        {\n        path:\"/p1\",\n        redirect: { name:\"index\" }\n        },\n   \n        // 重定向的目标甚至可以是一个方法，动态返回重定向目标\n        {\n        path:\"/p2\",\n        redirect:to=>{\n            // 方法接收 \"目标路由\" 作为参数\n            // return 重定向的 \"字符串路径／路径对象\"\n   \n            // return '/index'\n            return {name: 'index'}\n        }\n        }\n    ]\n   ```\n\n## `<router-link>`\n\n1. `<router-link＞`组件支持用户在具有路由功能的应用中单击导航。\n   \n    通过`to`属性可以指定目标地址,默认渲染成带有正确链接的`＜a＞`标签,通过配置`tag`属性可以生成别的标签。\n   \n    另外,当目标路由成功激活时,链接元素会自动设置一个表示激活的`css`类名。\n   \n   ```html\n    <!-- 直接给to指定属性值, 不提倡使用，尽量使用属性绑定 -->\n    <router-link to='/goods'>商品</router-link>\n   \n    <!-- 使用v-bind 绑定 JS表达式-->\n    <router-link :to=\"'/goods'\">商品</router-link>\n   \n    <!-- 绑定data中的变量path -->\n    <router-link :to='path'>商品</router-link>\n   \n    <!-- 绑定对象，自定义网址，携带查询参数 ==> /goods?id=1 -->\n    <router-link :to=\"{'path':'/goods', , query:{'id':1}}}\">商品</router-link>\n   \n    <!-- 绑定 对象，命名路由，携带params参数 ==> /goods/1 -->\n    <router-link :to=\"{name:'goods', params:{'id':1}}\">商品</router-link>\n   ```\n\n## 路由对象属性\n\n> `route`和`router`区别:`vue-router`中经常会操作的两个对象`router`和`route`两个\n\n1. `route`是一个跳转的路由对象，每一个路由都会有一个`route`对象，是一个局部的对象，可以获取对应的`name`,`path`,`params`,`query`等\n   \n    下面列出了常用的路由信息对象属性\n   \n   - `$route.path`: 字符串，对应当前路由的路径，总是解析为绝对路径,如`\"/goods\"`\n   - `$route.params`: 一个`key/value`对象, 包含了动态片段和全匹配片段，如果没有路由参数，就为空对象。\n   - `$route.query`: 一个`key/value`对象, 表示URL查询参数。例如: 对于路径`/goods?cate_id=1`,则有`$route.query.cate_id == 1`；如果没有查询参数,则为空对象\n   - `$route.hash`: 当前路由的`hash`值(不带#)，如果没有`hash`值，则为空字符串。\n   - `$route.ful1Path`: 完成解析后的URL，包含查询参数和hash的完整路径。\n   - `$route.matched`: 一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是`routes`配置数组中的对象副本(还有一些在children数组)。\n\n2. `router`是`VueRouter`的一个对象，通过`Vue.use(VueRouter)`和`VueRouter`构造函数得到一个`router`的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。\n   \n    下面列出了常用的路由信息对象方法\n   \n   - `router.push(location)`: 要导航到不同的URL，则使用`router.push`方法。该方法会向`history`栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL。\n     \n     ```javascript\n       router.push('/goods') // 字符串\n       router.push({path: '/goods'}) // 对象\n     \n       // 自定义网址，携带查询参数\n       router.push({ path: \"/goods\", query: { id: 1 } }) // -> /goods?id=1\n     \n       // 命名路由，携带params参数\n       router.push({ name: \"goods\", params: { id: 1 } }) // -> /goods/1\n     ```\n     \n       由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式了。\n     \n     > 当单击`＜router-link＞`时，会在内部调用`router.push(...)`方法，所以说单击`＜router-link:to＝\"...\">`等同于调用`router.push(...)`。\n     \n     ```javascript\n       // 当跳转之前，两种方式可以携带params参数\n       // <router-link :to=\"{name:'goods', params:{'id':1}}\">商品</router-link>\n       // router.push({ name: \"goods\", params: { id: 1 } })\n     \n       // 对应的路由配置有两种方式:\n       // 1. 将参数获取直接体现在网址上\n       routes: [\n           {\n           path: '/goods/:id',\n           name: 'goods',\n           component: goods\n           }\n       ]\n       // 此时会导致之前的params参数拼接在网址上， 为\"/goods/1\"，刷新不丢失数据\n     \n       // 2. 不在网址上体现\n       routes: [\n           {\n           path: '/goods',\n           name: 'goods',\n           component: goods\n           }\n       ]\n       // 此时会导致之前的参数不能表现出来，网址仍为\"/goods\"，刷新之后，参数丢失\n     \n       // 但是不管怎么配置路由，参数获取方式相同\n     ```\n   \n   - `router.replace(location)`: `router.replace`与`router.push`很像，唯一的不同是它不会向`history`栈添加新记录，而是跟它的方法名一样只替换掉当前的history 记录。`router.replace(...)`等价于`＜router-link :to＝\"...\" replace＞`\n   \n   - `router.go(n)`: 参数是一个整数，表示在`history`记录中向前进多少步或向后退多少步\n     \n     ```javascript\n       // 在浏览器记录中前进一步，等同于history.forward()\n       router.go(1)\n       // 后退一步，等同于history.back()\n       router.go(-1)\n       // 前进三步\n       router.go(3)\n       // 如果history记录不够，就会失败\n       router.go(-100)\n       router.go(100)\n     ```\n","slug":"Vue-vue-router","published":1,"updated":"2020-12-06T01:33:57.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc20015jjln5xut5cab","content":"<p>Vue.js官方提供了一套专用的路由工具库 Vue Router,其使用和配置都非常简单。</p>\n<h2 id=\"安装路由\"><a href=\"#安装路由\" class=\"headerlink\" title=\"安装路由\"></a>安装路由</h2><p>可以使用npm包的方式来安装路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">cnpm install vue-router --save<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>其实通过Vue-cli脚手架快速搭建项目时，命令行会询问是否安装路由功能，从而并不需要额外安装路由功能</p>\n</blockquote>\n<p>通过Vue-cli脚手架搭建的项目，在<code>src/router</code>文件夹内部有<code>index.js</code>文件，打开index.js文件会看到以下引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><br>Vue.use(Router)<br></code></pre></div></td></tr></table></figure>\n<p>在入口文件<code>src/main.js</code>中导入<code>src/router/index.js</code>文件，即可使用路由配置的信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-comment\">//等效于</span><br><span class=\"hljs-comment\">//import router from &#x27;./router/index.js&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"建立路由模块\"><a href=\"#建立路由模块\" class=\"headerlink\" title=\"建立路由模块\"></a>建立路由模块</h2><p>先建立一个路由器模块,主要用来配置和绑定相关信息。</p>\n<p>在<code>src/router/index.js</code>文件中使用<code>new Router</code>命令创建一个路由,一个路由是一个对象。</p>\n<p>一条路由的实现需要三部分:<code>name</code> 、<code>path</code>和<code>component</code>。<code>name</code>是命名,<code>path</code>是路径,<code>component</code>是组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/router/index.js</span><br><br><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><span class=\"hljs-keyword\">import</span> HelloWorld <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/HelloWorld&#x27;</span><br><span class=\"hljs-comment\">// 把对应的组件或页面引入进来</span><br><span class=\"hljs-keyword\">import</span> Login <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/pages/login&#x27;</span> <span class=\"hljs-comment\">// @指src根路径</span><br><br>Vue.use(Router)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-comment\">// 这里默认是跳转到HelloWorld 组件， 后期会改为项目首页</span><br>      name: <span class=\"hljs-string\">&#x27;HelloWorld&#x27;</span>,<br>      component: HelloWorld<br>    &#125;,<br>    &#123;<br>      path:<span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,<br>      component: Login  <span class=\"hljs-comment\">// 后续如果还有页面要跳转，就按照这样的格式继续书写</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>导入<code>HelloWorld</code>组件的时候，实际上导入的是<code>src/components/HelloWorld.vue</code>.因为在<code>Webpack</code>中配置了，所以可以省略vue后缀。<code>*.vue</code>文件是Vue的单文件组件格式，可以同时包括模板定义、样式定义和组件模块定义。</p>\n</blockquote>\n<h2 id=\"启动路由器\"><a href=\"#启动路由器\" class=\"headerlink\" title=\"启动路由器\"></a>启动路由器</h2><ol>\n<li><p>在<code>main.js</code>入口文件中启用该路由器。</p>\n<p> <code>main.js</code>作为入口文件，使用<code>import</code>可以把所有要用到的包都导入到这里，然后在Vue项目中去运用它们。</p>\n<p> 创建和挂载根实例，通过<code>router</code>配置参数注入路由，从而让整个应用都有路由功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/main.js</span><br>   <br><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br>   <br><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>router,<br>components: &#123; App &#125;,<br>template: <span class=\"hljs-string\">&#x27;&lt;App/&gt;&#x27;</span><br>&#125;)<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>浅析 导包方式</p>\n</blockquote>\n<p> 这个不是vue的规定而是node加载模块的方式,当require(‘./router’)(import会被转为require),node是这样的寻找目标的:</p>\n<ol>\n<li><p>首先寻找目录下有没有router.js或者router.node,如果有就导入</p>\n</li>\n<li><p>如果没有看是否有router目录,如果没有就require失败,抛出异常”Cannot find module ‘./router’”</p>\n</li>\n<li><p>如果有router目录会在其下寻找package.json文件,如果有则按照package的配置来导入</p>\n</li>\n<li><p>如果没有package.json,看是否有index.js或者index.node,如果有就导入没有就失败</p>\n<p> 详细见node文档：<a href=\"https://nodejs.org/api/modules.html#modules_folders_as_module\">https://nodejs.org/api/modules.html#modules_folders_as_module</a></p>\n</li>\n</ol>\n</li>\n<li><p>配置之后，路由匹配到的组件将会渲染到<code>App.vue</code>的<code>＜router-view&gt;&lt;/router-view&gt;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/App.vue</span><br>   <br>&lt;template&gt;<br>&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;router-view/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>最后App.vue 会渲染到<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">”app”</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<p> 这样就会把渲染出来的页面挂载到id为app的div里了</p>\n</li>\n</ol>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><ol>\n<li><p>项目应用通常都会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路径发生跳转。重定向也是通过<code>routes</code>配置来完成的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/index&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;index&#x27;</span>,<br>    component: HelloWorld<br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 从&quot;/&quot;重定向到&quot;/index&quot;</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/&quot;</span>,<br>    redirect:<span class=\"hljs-string\">&#x27;/index&#x27;</span><br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 重定向的目标也可以是一个命名的路由</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/p1&quot;</span>,<br>    redirect: &#123; <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;index&quot;</span> &#125;<br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 重定向的目标甚至可以是一个方法，动态返回重定向目标</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/p2&quot;</span>,<br>    redirect:<span class=\"hljs-function\"><span class=\"hljs-params\">to</span>=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 方法接收 &quot;目标路由&quot; 作为参数</span><br>        <span class=\"hljs-comment\">// return 重定向的 &quot;字符串路径／路径对象&quot;</span><br>   <br>        <span class=\"hljs-comment\">// return &#x27;/index&#x27;</span><br>        <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;index&#x27;</span>&#125;<br>    &#125;<br>    &#125;<br>]<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"lt-router-link-gt\"><a href=\"#lt-router-link-gt\" class=\"headerlink\" title=\"&lt;router-link&gt;\"></a><code>&lt;router-link&gt;</code></h2></li>\n<li><p><code>&lt;router-link＞</code>组件支持用户在具有路由功能的应用中单击导航。</p>\n<p> 通过<code>to</code>属性可以指定目标地址,默认渲染成带有正确链接的<code>＜a＞</code>标签,通过配置<code>tag</code>属性可以生成别的标签。</p>\n<p> 另外,当目标路由成功激活时,链接元素会自动设置一个表示激活的<code>css</code>类名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 直接给to指定属性值, 不提倡使用，尽量使用属性绑定 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/goods&#x27;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 使用v-bind 绑定 JS表达式--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#x27;/goods&#x27;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定data中的变量path --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&#x27;path&#x27;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定对象，自定义网址，携带查询参数 ==&gt; /goods?id=1 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;&#x27;path&#x27;:&#x27;/goods&#x27;, , query:&#123;&#x27;id&#x27;:1&#125;&#125;&#125;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定 对象，命名路由，携带params参数 ==&gt; /goods/1 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"路由对象属性\"><a href=\"#路由对象属性\" class=\"headerlink\" title=\"路由对象属性\"></a>路由对象属性</h2></li>\n</ol>\n<blockquote>\n<p><code>route</code>和<code>router</code>区别:<code>vue-router</code>中经常会操作的两个对象<code>router</code>和<code>route</code>两个</p>\n</blockquote>\n<ol>\n<li><p><code>route</code>是一个跳转的路由对象，每一个路由都会有一个<code>route</code>对象，是一个局部的对象，可以获取对应的<code>name</code>,<code>path</code>,<code>params</code>,<code>query</code>等</p>\n<p> 下面列出了常用的路由信息对象属性</p>\n<ul>\n<li><code>$route.path</code>: 字符串，对应当前路由的路径，总是解析为绝对路径,如<code>&quot;/goods&quot;</code></li>\n<li><code>$route.params</code>: 一个<code>key/value</code>对象, 包含了动态片段和全匹配片段，如果没有路由参数，就为空对象。</li>\n<li><code>$route.query</code>: 一个<code>key/value</code>对象, 表示URL查询参数。例如: 对于路径<code>/goods?cate_id=1</code>,则有<code>$route.query.cate_id == 1</code>；如果没有查询参数,则为空对象</li>\n<li><code>$route.hash</code>: 当前路由的<code>hash</code>值(不带#)，如果没有<code>hash</code>值，则为空字符串。</li>\n<li><code>$route.ful1Path</code>: 完成解析后的URL，包含查询参数和hash的完整路径。</li>\n<li><code>$route.matched</code>: 一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是<code>routes</code>配置数组中的对象副本(还有一些在children数组)。</li>\n</ul>\n</li>\n<li><p><code>router</code>是<code>VueRouter</code>的一个对象，通过<code>Vue.use(VueRouter)</code>和<code>VueRouter</code>构造函数得到一个<code>router</code>的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p>\n<p> 下面列出了常用的路由信息对象方法</p>\n<ul>\n<li><p><code>router.push(location)</code>: 要导航到不同的URL，则使用<code>router.push</code>方法。该方法会向<code>history</code>栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">router.push(<span class=\"hljs-string\">&#x27;/goods&#x27;</span>) <span class=\"hljs-comment\">// 字符串</span><br>router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/goods&#x27;</span>&#125;) <span class=\"hljs-comment\">// 对象</span><br>     <br><span class=\"hljs-comment\">// 自定义网址，携带查询参数</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/goods&quot;</span>, <span class=\"hljs-attr\">query</span>: &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> &#125; &#125;) <span class=\"hljs-comment\">// -&gt; /goods?id=1</span><br>     <br><span class=\"hljs-comment\">// 命名路由，携带params参数</span><br>router.push(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;goods&quot;</span>, <span class=\"hljs-attr\">params</span>: &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> &#125; &#125;) <span class=\"hljs-comment\">// -&gt; /goods/1</span><br></code></pre></div></td></tr></table></figure>\n\n<p>  由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式了。</p>\n<blockquote>\n<p>当单击<code>＜router-link＞</code>时，会在内部调用<code>router.push(...)</code>方法，所以说单击<code>＜router-link:to＝&quot;...&quot;&gt;</code>等同于调用<code>router.push(...)</code>。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 当跳转之前，两种方式可以携带params参数</span><br><span class=\"hljs-comment\">// &lt;router-link :to=&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;&gt;商品&lt;/router-link&gt;</span><br><span class=\"hljs-comment\">// router.push(&#123; name: &quot;goods&quot;, params: &#123; id: 1 &#125; &#125;)</span><br>     <br><span class=\"hljs-comment\">// 对应的路由配置有两种方式:</span><br><span class=\"hljs-comment\">// 1. 将参数获取直接体现在网址上</span><br>routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/goods/:id&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;goods&#x27;</span>,<br>    component: goods<br>    &#125;<br>]<br><span class=\"hljs-comment\">// 此时会导致之前的params参数拼接在网址上， 为&quot;/goods/1&quot;，刷新不丢失数据</span><br>     <br><span class=\"hljs-comment\">// 2. 不在网址上体现</span><br>routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/goods&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;goods&#x27;</span>,<br>    component: goods<br>    &#125;<br>]<br><span class=\"hljs-comment\">// 此时会导致之前的参数不能表现出来，网址仍为&quot;/goods&quot;，刷新之后，参数丢失</span><br>     <br><span class=\"hljs-comment\">// 但是不管怎么配置路由，参数获取方式相同</span><br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p><code>router.replace(location)</code>: <code>router.replace</code>与<code>router.push</code>很像，唯一的不同是它不会向<code>history</code>栈添加新记录，而是跟它的方法名一样只替换掉当前的history 记录。<code>router.replace(...)</code>等价于<code>＜router-link :to＝&quot;...&quot; replace＞</code></p>\n</li>\n<li><p><code>router.go(n)</code>: 参数是一个整数，表示在<code>history</code>记录中向前进多少步或向后退多少步</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 在浏览器记录中前进一步，等同于history.forward()</span><br>router.go(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 后退一步，等同于history.back()</span><br>router.go(-<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 前进三步</span><br>router.go(<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-comment\">// 如果history记录不够，就会失败</span><br>router.go(-<span class=\"hljs-number\">100</span>)<br>router.go(<span class=\"hljs-number\">100</span>)<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue.js官方提供了一套专用的路由工具库 Vue Router,其使用和配置都非常简单。</p>\n<h2 id=\"安装路由\"><a href=\"#安装路由\" class=\"headerlink\" title=\"安装路由\"></a>安装路由</h2><p>可以使用npm包的方式来安装路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">cnpm install vue-router --save<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>其实通过Vue-cli脚手架快速搭建项目时，命令行会询问是否安装路由功能，从而并不需要额外安装路由功能</p>\n</blockquote>\n<p>通过Vue-cli脚手架搭建的项目，在<code>src/router</code>文件夹内部有<code>index.js</code>文件，打开index.js文件会看到以下引用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><br>Vue.use(Router)<br></code></pre></td></tr></table></figure>\n<p>在入口文件<code>src/main.js</code>中导入<code>src/router/index.js</code>文件，即可使用路由配置的信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-comment\">//等效于</span><br><span class=\"hljs-comment\">//import router from &#x27;./router/index.js&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"建立路由模块\"><a href=\"#建立路由模块\" class=\"headerlink\" title=\"建立路由模块\"></a>建立路由模块</h2><p>先建立一个路由器模块,主要用来配置和绑定相关信息。</p>\n<p>在<code>src/router/index.js</code>文件中使用<code>new Router</code>命令创建一个路由,一个路由是一个对象。</p>\n<p>一条路由的实现需要三部分:<code>name</code> 、<code>path</code>和<code>component</code>。<code>name</code>是命名,<code>path</code>是路径,<code>component</code>是组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/router/index.js</span><br><br><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><span class=\"hljs-keyword\">import</span> HelloWorld <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/HelloWorld&#x27;</span><br><span class=\"hljs-comment\">// 把对应的组件或页面引入进来</span><br><span class=\"hljs-keyword\">import</span> Login <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/pages/login&#x27;</span> <span class=\"hljs-comment\">// @指src根路径</span><br><br>Vue.use(Router)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-comment\">// 这里默认是跳转到HelloWorld 组件， 后期会改为项目首页</span><br>      name: <span class=\"hljs-string\">&#x27;HelloWorld&#x27;</span>,<br>      component: HelloWorld<br>    &#125;,<br>    &#123;<br>      path:<span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,<br>      component: Login  <span class=\"hljs-comment\">// 后续如果还有页面要跳转，就按照这样的格式继续书写</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>导入<code>HelloWorld</code>组件的时候，实际上导入的是<code>src/components/HelloWorld.vue</code>.因为在<code>Webpack</code>中配置了，所以可以省略vue后缀。<code>*.vue</code>文件是Vue的单文件组件格式，可以同时包括模板定义、样式定义和组件模块定义。</p>\n</blockquote>\n<h2 id=\"启动路由器\"><a href=\"#启动路由器\" class=\"headerlink\" title=\"启动路由器\"></a>启动路由器</h2><ol>\n<li><p>在<code>main.js</code>入口文件中启用该路由器。</p>\n<p> <code>main.js</code>作为入口文件，使用<code>import</code>可以把所有要用到的包都导入到这里，然后在Vue项目中去运用它们。</p>\n<p> 创建和挂载根实例，通过<code>router</code>配置参数注入路由，从而让整个应用都有路由功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/main.js</span><br>   <br><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br>   <br><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>router,<br>components: &#123; App &#125;,<br>template: <span class=\"hljs-string\">&#x27;&lt;App/&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>浅析 导包方式</p>\n</blockquote>\n<p> 这个不是vue的规定而是node加载模块的方式,当require(‘./router’)(import会被转为require),node是这样的寻找目标的:</p>\n<ol>\n<li><p>首先寻找目录下有没有router.js或者router.node,如果有就导入</p>\n</li>\n<li><p>如果没有看是否有router目录,如果没有就require失败,抛出异常”Cannot find module ‘./router’”</p>\n</li>\n<li><p>如果有router目录会在其下寻找package.json文件,如果有则按照package的配置来导入</p>\n</li>\n<li><p>如果没有package.json,看是否有index.js或者index.node,如果有就导入没有就失败</p>\n<p> 详细见node文档：<a href=\"https://nodejs.org/api/modules.html#modules_folders_as_module\">https://nodejs.org/api/modules.html#modules_folders_as_module</a></p>\n</li>\n</ol>\n</li>\n<li><p>配置之后，路由匹配到的组件将会渲染到<code>App.vue</code>的<code>＜router-view&gt;&lt;/router-view&gt;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// src/App.vue</span><br>   <br>&lt;template&gt;<br>&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;router-view/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>最后App.vue 会渲染到<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">”app”</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p> 这样就会把渲染出来的页面挂载到id为app的div里了</p>\n</li>\n</ol>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><ol>\n<li><p>项目应用通常都会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路径发生跳转。重定向也是通过<code>routes</code>配置来完成的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/index&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;index&#x27;</span>,<br>    component: HelloWorld<br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 从&quot;/&quot;重定向到&quot;/index&quot;</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/&quot;</span>,<br>    redirect:<span class=\"hljs-string\">&#x27;/index&#x27;</span><br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 重定向的目标也可以是一个命名的路由</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/p1&quot;</span>,<br>    redirect: &#123; <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;index&quot;</span> &#125;<br>    &#125;,<br>   <br>    <span class=\"hljs-comment\">// 重定向的目标甚至可以是一个方法，动态返回重定向目标</span><br>    &#123;<br>    path:<span class=\"hljs-string\">&quot;/p2&quot;</span>,<br>    redirect:<span class=\"hljs-function\"><span class=\"hljs-params\">to</span>=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 方法接收 &quot;目标路由&quot; 作为参数</span><br>        <span class=\"hljs-comment\">// return 重定向的 &quot;字符串路径／路径对象&quot;</span><br>   <br>        <span class=\"hljs-comment\">// return &#x27;/index&#x27;</span><br>        <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;index&#x27;</span>&#125;<br>    &#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure>\n<h2 id=\"lt-router-link-gt\"><a href=\"#lt-router-link-gt\" class=\"headerlink\" title=\"&lt;router-link&gt;\"></a><code>&lt;router-link&gt;</code></h2></li>\n<li><p><code>&lt;router-link＞</code>组件支持用户在具有路由功能的应用中单击导航。</p>\n<p> 通过<code>to</code>属性可以指定目标地址,默认渲染成带有正确链接的<code>＜a＞</code>标签,通过配置<code>tag</code>属性可以生成别的标签。</p>\n<p> 另外,当目标路由成功激活时,链接元素会自动设置一个表示激活的<code>css</code>类名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 直接给to指定属性值, 不提倡使用，尽量使用属性绑定 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/goods&#x27;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 使用v-bind 绑定 JS表达式--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#x27;/goods&#x27;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定data中的变量path --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&#x27;path&#x27;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定对象，自定义网址，携带查询参数 ==&gt; /goods?id=1 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;&#x27;path&#x27;:&#x27;/goods&#x27;, , query:&#123;&#x27;id&#x27;:1&#125;&#125;&#125;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>   <br><span class=\"hljs-comment\">&lt;!-- 绑定 对象，命名路由，携带params参数 ==&gt; /goods/1 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;</span>&gt;</span>商品<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"路由对象属性\"><a href=\"#路由对象属性\" class=\"headerlink\" title=\"路由对象属性\"></a>路由对象属性</h2></li>\n</ol>\n<blockquote>\n<p><code>route</code>和<code>router</code>区别:<code>vue-router</code>中经常会操作的两个对象<code>router</code>和<code>route</code>两个</p>\n</blockquote>\n<ol>\n<li><p><code>route</code>是一个跳转的路由对象，每一个路由都会有一个<code>route</code>对象，是一个局部的对象，可以获取对应的<code>name</code>,<code>path</code>,<code>params</code>,<code>query</code>等</p>\n<p> 下面列出了常用的路由信息对象属性</p>\n<ul>\n<li><code>$route.path</code>: 字符串，对应当前路由的路径，总是解析为绝对路径,如<code>&quot;/goods&quot;</code></li>\n<li><code>$route.params</code>: 一个<code>key/value</code>对象, 包含了动态片段和全匹配片段，如果没有路由参数，就为空对象。</li>\n<li><code>$route.query</code>: 一个<code>key/value</code>对象, 表示URL查询参数。例如: 对于路径<code>/goods?cate_id=1</code>,则有<code>$route.query.cate_id == 1</code>；如果没有查询参数,则为空对象</li>\n<li><code>$route.hash</code>: 当前路由的<code>hash</code>值(不带#)，如果没有<code>hash</code>值，则为空字符串。</li>\n<li><code>$route.ful1Path</code>: 完成解析后的URL，包含查询参数和hash的完整路径。</li>\n<li><code>$route.matched</code>: 一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是<code>routes</code>配置数组中的对象副本(还有一些在children数组)。</li>\n</ul>\n</li>\n<li><p><code>router</code>是<code>VueRouter</code>的一个对象，通过<code>Vue.use(VueRouter)</code>和<code>VueRouter</code>构造函数得到一个<code>router</code>的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p>\n<p> 下面列出了常用的路由信息对象方法</p>\n<ul>\n<li><p><code>router.push(location)</code>: 要导航到不同的URL，则使用<code>router.push</code>方法。该方法会向<code>history</code>栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">router.push(<span class=\"hljs-string\">&#x27;/goods&#x27;</span>) <span class=\"hljs-comment\">// 字符串</span><br>router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/goods&#x27;</span>&#125;) <span class=\"hljs-comment\">// 对象</span><br>     <br><span class=\"hljs-comment\">// 自定义网址，携带查询参数</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/goods&quot;</span>, <span class=\"hljs-attr\">query</span>: &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> &#125; &#125;) <span class=\"hljs-comment\">// -&gt; /goods?id=1</span><br>     <br><span class=\"hljs-comment\">// 命名路由，携带params参数</span><br>router.push(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;goods&quot;</span>, <span class=\"hljs-attr\">params</span>: &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> &#125; &#125;) <span class=\"hljs-comment\">// -&gt; /goods/1</span><br></code></pre></td></tr></table></figure>\n\n<p>  由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式了。</p>\n<blockquote>\n<p>当单击<code>＜router-link＞</code>时，会在内部调用<code>router.push(...)</code>方法，所以说单击<code>＜router-link:to＝&quot;...&quot;&gt;</code>等同于调用<code>router.push(...)</code>。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 当跳转之前，两种方式可以携带params参数</span><br><span class=\"hljs-comment\">// &lt;router-link :to=&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;&gt;商品&lt;/router-link&gt;</span><br><span class=\"hljs-comment\">// router.push(&#123; name: &quot;goods&quot;, params: &#123; id: 1 &#125; &#125;)</span><br>     <br><span class=\"hljs-comment\">// 对应的路由配置有两种方式:</span><br><span class=\"hljs-comment\">// 1. 将参数获取直接体现在网址上</span><br>routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/goods/:id&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;goods&#x27;</span>,<br>    component: goods<br>    &#125;<br>]<br><span class=\"hljs-comment\">// 此时会导致之前的params参数拼接在网址上， 为&quot;/goods/1&quot;，刷新不丢失数据</span><br>     <br><span class=\"hljs-comment\">// 2. 不在网址上体现</span><br>routes: [<br>    &#123;<br>    path: <span class=\"hljs-string\">&#x27;/goods&#x27;</span>,<br>    name: <span class=\"hljs-string\">&#x27;goods&#x27;</span>,<br>    component: goods<br>    &#125;<br>]<br><span class=\"hljs-comment\">// 此时会导致之前的参数不能表现出来，网址仍为&quot;/goods&quot;，刷新之后，参数丢失</span><br>     <br><span class=\"hljs-comment\">// 但是不管怎么配置路由，参数获取方式相同</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>router.replace(location)</code>: <code>router.replace</code>与<code>router.push</code>很像，唯一的不同是它不会向<code>history</code>栈添加新记录，而是跟它的方法名一样只替换掉当前的history 记录。<code>router.replace(...)</code>等价于<code>＜router-link :to＝&quot;...&quot; replace＞</code></p>\n</li>\n<li><p><code>router.go(n)</code>: 参数是一个整数，表示在<code>history</code>记录中向前进多少步或向后退多少步</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 在浏览器记录中前进一步，等同于history.forward()</span><br>router.go(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 后退一步，等同于history.back()</span><br>router.go(-<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 前进三步</span><br>router.go(<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-comment\">// 如果history记录不够，就会失败</span><br>router.go(-<span class=\"hljs-number\">100</span>)<br>router.go(<span class=\"hljs-number\">100</span>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Vue事件绑定以及事件修饰符","date":"2020-05-16T04:50:50.000Z","_content":"## 事件\n\n要理解事件绑定，就得先了解事件。\n\n浏览器是事件驱动型的，根据用户的行为触发不同的事件，根据事件执行相应的操作。我们较为熟悉的事件有三大类型：\n\n### 鼠标键盘事件\n\n鼠标键盘事件|事件介绍\n:---|:--\nonclick | 鼠标点击某个对象\nondbclick| 鼠标双击某个对象\nonmousedown | 某个鼠标按键被按下\nonmouseup | 某个鼠标按键被松开\nonmousemove | 鼠标被移动\nonmouseover | 鼠标被移到某元素之上\nonmouseout | 鼠标从某元素移开\nonkeypress | 某个键盘的键被按下或按住\nonkeydown | 某个键盘的键被按下\nonkeyup | 某个键盘的键被松开\n\n### 页面事件\n\n页面事件 | 事件介绍\n:---|:--\nonload | 某个页面或图像被完成加载\nonunload | 用户退出页面\nonresize | 窗口或框架被调整尺寸\t\nonerror | 当加载文档或图像时发生某个错误\nonabort | 图像加载被中断\n\n\n### 表单相关事件\n\n表单相关事件 | 事件介绍\n:---|:---\nonblur | 元素失去焦点\nonfocus | 元素获得焦点\nonchange | 用户改变域的内容\nonreset | 重置按钮被点击\nonsubmit | 提交按钮被点击\nonselect | 文本被选定\n\n\n> 需要注意的是事件处理程序中的变量`event`保留着事件对象的信息，包括比如`click`事件，事件属性里有点击位置相对于浏览器，以及页面的坐标信息，事件的类型（`click`）,触发事件的DOM节点信息等;可以将`evenet`作为参数传递，在函数内部获取具体的evenet对象信息。\n\n\n## 事件绑定\n\n- 在Vue.js中`v-on`指令用来监听`DOM`事件，并在触发事件时运行一些`JavaScript`代码;当然`v-on`也可以简写为`@`\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>事件绑定</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n    </head>\n\n    <body>\n\n        <div id='app'>\n            <button v-on:click='func'> 显示 </button>\n            <h1> {{msg}} </h1>\n        </div>\n\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        msg: '',\n                    }\n                },\n                methods: {\n                    func() {\n                        this.msg = '这是一个大大的H1'\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n## 事件修饰符\n\n> `Vue.js` 为 `v-on` 提供了事件修饰符来处理 `DOM` 事件细节;`Vue.js`通过由点(`.`)表示的指令后缀来调用修饰符。\n\n### 事件修饰符分类\n\nVue.js提供的事件修饰符主要针对两类情况:\n\n- 冒泡机制修饰符\n    - `.stop`\n    - `.capture`\n    - `.self`\n\n- 事件本身修饰符\n    - `.prevent`\n    - `.once`\n\n### 冒泡机制修饰符\n\n#### 事件冒泡\n\n`DOM`中，树状结构决定了子元素肯定在父元素里，所以点击子元素，就同时点击了子元素和父元素，以及父元素的父元素，以此类推，当然最终的根节点都是文档，以及`window`。\n\n试想，当一个子元素被点击的时候，不仅仅这个元素本身被点击了，因为这个元素也在其上一级父元素中(属于父级元素的地盘)，所以相当于其父元素也被点击了，以此类推，一层一层往外推，最终整个文档也是被点击了，如果每个层级的节点元素都绑定了`click`事件，那么每个节点的`click`事件函数都会被执行。举个形象的例子，一个村里的人被打了（`click`），首先就要按照村里的规矩处理，同时这个村属于某个乡镇，当然也是相当于这个乡镇的人被打了，那么也要按照这个乡镇的规矩处理，以此一层一层往上报。这个例子不准确的地方就是，现实中一个人因为一个事件只会被处理一次，不会因为同一件事情多次处理。\n\n#### 冒泡带来的烦恼\n\n当上层（以及上上层，直至`body`元素）父级有子元素同样的方法，但你子元素的事件后，所有父级元素的同名函数也会从下到上，由里往外，挨个执行，但是大多数情况下，我们只希望子当事元素事件执行，不希望层层执行，这就要想办法阻止这种冒泡的情况发生。比如我们点击`Child Span`的时候只显示 `Child Span`的内容。结合刚刚的例子就是，村里发生了打人事件，在村里解决了，就没必要一层一层往上报，在层层处理了。\n\n#### 事件修饰符\n\n在Vue.js中针对Js事件本身的冒泡机制提供一些事件修饰符以便使用\n\n- `.stop`: 阻止冒泡事件\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>冒泡机制</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n        <style>\n            #outer {\n                width: 400px;\n                height: 200px;\n                background-color: aqua;\n                position: absolute;\n            }\n\n            #inner {\n                width: 200px;\n                height: 100px;\n                background-color: darkcyan;\n                margin: 50px auto;\n            }\n\n            #btn {\n                width: 40px;\n                height: 30px;\n                background-color: gold;\n                margin: 35px 80px;\n            }\n        </style>\n    </head>\n\n    <body>\n        <div id='app'>\n            <div id=\"outer\" @click='outer'>\n                <div id=\"inner\" @click='inner'>\n                    <button id=\"btn\" @click.stop='btn'>按钮 </button>\n                </div>\n            </div>\n        </div>\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                methods: {\n                    inner() {\n                        console.log(\"inner触发了\")\n                    },\n                    outer() {\n                        console.log(\"outer触发了\")\n                    },\n                    btn() {\n                        console.log(\"btn触发了\")\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n    > 当点击按钮时，只会触发`button`本身的`click`事件,不会继续传递\n\n- `.self`:  只当事件在该元素本身（而不是子元素）触发时触发回调函数\n\n    ```html\n    <div id=\"outer\" @click='outer'>\n        <div id=\"inner\" @click.self='inner'>\n            <button id=\"btn\" @click='btn'>按钮 </button>\n        </div>\n    </div>\n    ```\n\n    > 当点击按钮时, 继续触发冒泡机制，因此`outter`盒子同样会触发对应的回调函数,但是`inner`盒子并不会触发回调函数，只有点击`inner`本身时，才会正常执行回调函数\n\n- `.capture`: 添加事件侦听器时使用事件捕获模式,即拥有该事件修饰符的元素会优先触发对应事件\n\n    ```html\n    <div id=\"outer\" @click.capture='outer'>\n        <div id=\"inner\" @click='inner'>\n            <button id=\"btn\" @click='btn'>按钮 </button>\n        </div>\n    </div>\n    ```\n\n    > 当点击按钮时, 继续触发冒泡机制，但是会优先触发`outer`的回调函数,其次，按照正常的冒泡顺序，由内向外\n\n### 事件本身修饰符\n\n- `.prevent`:阻止默认行为\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>VueDemo</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n        <style>\n            form {\n                width: 210px;\n                height: 300px;\n\n                position: relative;\n                margin: 0 auto;\n            }\n\n            .user {\n                width: 200px;\n                height: 20px;\n                display: block;\n                margin: 5px auto;\n            }\n\n            #btn {\n                width: 70px;\n                float: right;\n            }\n        </style>\n    </head>\n\n    <body>\n\n        <div id='app'>\n\n            <form action=\"/userinfo\" method=\"POST\" v-on:submit.prevent='onsubmit'>\n                <input type=\"text\" name=\"user\" class=\"user\" v-model='user.name' placeholder=\"请输入用户名。。。\">\n                <input type=\"password\" name=\"user\" class=\"user\" v-model='user.pwd' placeholder=\"请输入密码。。。\">\n\n                <input type=\"submit\" id=\"btn\" value=\"提交\">\n            </form>\n\n        </div>\n\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        user: {\n                            name: \"\",\n                            pwd: \"\"\n                        }\n                    }\n                },\n                methods: {\n                    onsubmit() {\n                        console.log(`表单信息:${this.user.name}和${this.user.pwd}提交`)\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n    > 表单本身的提交行为会进行页面跳转，现在使用`.prevent`修饰符之后，只执行绑定的方法，不跳转页面;类似的还有超链接等的默认行为都可以使用该修饰符阻止\n\n- `.once`: 事件只能触发一次\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>VueDemo</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n    </head>\n\n    <body>\n        <div id='app'>\n            <button @click.once='btn'> 你只能评论一次 </button>\n        </div>\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                methods: {\n                    btn() {\n                        alert(\"已评论\")\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n","source":"_posts/Vue-事件绑定以及事件修饰符.md","raw":"---\ntitle: Vue事件绑定以及事件修饰符\ndate: 2020-05-16 12:50:50\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - v-on\n    - Js事件\n    - 事件修饰符\n    - 事件绑定\n---\n## 事件\n\n要理解事件绑定，就得先了解事件。\n\n浏览器是事件驱动型的，根据用户的行为触发不同的事件，根据事件执行相应的操作。我们较为熟悉的事件有三大类型：\n\n### 鼠标键盘事件\n\n鼠标键盘事件|事件介绍\n:---|:--\nonclick | 鼠标点击某个对象\nondbclick| 鼠标双击某个对象\nonmousedown | 某个鼠标按键被按下\nonmouseup | 某个鼠标按键被松开\nonmousemove | 鼠标被移动\nonmouseover | 鼠标被移到某元素之上\nonmouseout | 鼠标从某元素移开\nonkeypress | 某个键盘的键被按下或按住\nonkeydown | 某个键盘的键被按下\nonkeyup | 某个键盘的键被松开\n\n### 页面事件\n\n页面事件 | 事件介绍\n:---|:--\nonload | 某个页面或图像被完成加载\nonunload | 用户退出页面\nonresize | 窗口或框架被调整尺寸\t\nonerror | 当加载文档或图像时发生某个错误\nonabort | 图像加载被中断\n\n\n### 表单相关事件\n\n表单相关事件 | 事件介绍\n:---|:---\nonblur | 元素失去焦点\nonfocus | 元素获得焦点\nonchange | 用户改变域的内容\nonreset | 重置按钮被点击\nonsubmit | 提交按钮被点击\nonselect | 文本被选定\n\n\n> 需要注意的是事件处理程序中的变量`event`保留着事件对象的信息，包括比如`click`事件，事件属性里有点击位置相对于浏览器，以及页面的坐标信息，事件的类型（`click`）,触发事件的DOM节点信息等;可以将`evenet`作为参数传递，在函数内部获取具体的evenet对象信息。\n\n\n## 事件绑定\n\n- 在Vue.js中`v-on`指令用来监听`DOM`事件，并在触发事件时运行一些`JavaScript`代码;当然`v-on`也可以简写为`@`\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>事件绑定</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n    </head>\n\n    <body>\n\n        <div id='app'>\n            <button v-on:click='func'> 显示 </button>\n            <h1> {{msg}} </h1>\n        </div>\n\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        msg: '',\n                    }\n                },\n                methods: {\n                    func() {\n                        this.msg = '这是一个大大的H1'\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n## 事件修饰符\n\n> `Vue.js` 为 `v-on` 提供了事件修饰符来处理 `DOM` 事件细节;`Vue.js`通过由点(`.`)表示的指令后缀来调用修饰符。\n\n### 事件修饰符分类\n\nVue.js提供的事件修饰符主要针对两类情况:\n\n- 冒泡机制修饰符\n    - `.stop`\n    - `.capture`\n    - `.self`\n\n- 事件本身修饰符\n    - `.prevent`\n    - `.once`\n\n### 冒泡机制修饰符\n\n#### 事件冒泡\n\n`DOM`中，树状结构决定了子元素肯定在父元素里，所以点击子元素，就同时点击了子元素和父元素，以及父元素的父元素，以此类推，当然最终的根节点都是文档，以及`window`。\n\n试想，当一个子元素被点击的时候，不仅仅这个元素本身被点击了，因为这个元素也在其上一级父元素中(属于父级元素的地盘)，所以相当于其父元素也被点击了，以此类推，一层一层往外推，最终整个文档也是被点击了，如果每个层级的节点元素都绑定了`click`事件，那么每个节点的`click`事件函数都会被执行。举个形象的例子，一个村里的人被打了（`click`），首先就要按照村里的规矩处理，同时这个村属于某个乡镇，当然也是相当于这个乡镇的人被打了，那么也要按照这个乡镇的规矩处理，以此一层一层往上报。这个例子不准确的地方就是，现实中一个人因为一个事件只会被处理一次，不会因为同一件事情多次处理。\n\n#### 冒泡带来的烦恼\n\n当上层（以及上上层，直至`body`元素）父级有子元素同样的方法，但你子元素的事件后，所有父级元素的同名函数也会从下到上，由里往外，挨个执行，但是大多数情况下，我们只希望子当事元素事件执行，不希望层层执行，这就要想办法阻止这种冒泡的情况发生。比如我们点击`Child Span`的时候只显示 `Child Span`的内容。结合刚刚的例子就是，村里发生了打人事件，在村里解决了，就没必要一层一层往上报，在层层处理了。\n\n#### 事件修饰符\n\n在Vue.js中针对Js事件本身的冒泡机制提供一些事件修饰符以便使用\n\n- `.stop`: 阻止冒泡事件\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>冒泡机制</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n        <style>\n            #outer {\n                width: 400px;\n                height: 200px;\n                background-color: aqua;\n                position: absolute;\n            }\n\n            #inner {\n                width: 200px;\n                height: 100px;\n                background-color: darkcyan;\n                margin: 50px auto;\n            }\n\n            #btn {\n                width: 40px;\n                height: 30px;\n                background-color: gold;\n                margin: 35px 80px;\n            }\n        </style>\n    </head>\n\n    <body>\n        <div id='app'>\n            <div id=\"outer\" @click='outer'>\n                <div id=\"inner\" @click='inner'>\n                    <button id=\"btn\" @click.stop='btn'>按钮 </button>\n                </div>\n            </div>\n        </div>\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                methods: {\n                    inner() {\n                        console.log(\"inner触发了\")\n                    },\n                    outer() {\n                        console.log(\"outer触发了\")\n                    },\n                    btn() {\n                        console.log(\"btn触发了\")\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n    > 当点击按钮时，只会触发`button`本身的`click`事件,不会继续传递\n\n- `.self`:  只当事件在该元素本身（而不是子元素）触发时触发回调函数\n\n    ```html\n    <div id=\"outer\" @click='outer'>\n        <div id=\"inner\" @click.self='inner'>\n            <button id=\"btn\" @click='btn'>按钮 </button>\n        </div>\n    </div>\n    ```\n\n    > 当点击按钮时, 继续触发冒泡机制，因此`outter`盒子同样会触发对应的回调函数,但是`inner`盒子并不会触发回调函数，只有点击`inner`本身时，才会正常执行回调函数\n\n- `.capture`: 添加事件侦听器时使用事件捕获模式,即拥有该事件修饰符的元素会优先触发对应事件\n\n    ```html\n    <div id=\"outer\" @click.capture='outer'>\n        <div id=\"inner\" @click='inner'>\n            <button id=\"btn\" @click='btn'>按钮 </button>\n        </div>\n    </div>\n    ```\n\n    > 当点击按钮时, 继续触发冒泡机制，但是会优先触发`outer`的回调函数,其次，按照正常的冒泡顺序，由内向外\n\n### 事件本身修饰符\n\n- `.prevent`:阻止默认行为\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>VueDemo</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n        <style>\n            form {\n                width: 210px;\n                height: 300px;\n\n                position: relative;\n                margin: 0 auto;\n            }\n\n            .user {\n                width: 200px;\n                height: 20px;\n                display: block;\n                margin: 5px auto;\n            }\n\n            #btn {\n                width: 70px;\n                float: right;\n            }\n        </style>\n    </head>\n\n    <body>\n\n        <div id='app'>\n\n            <form action=\"/userinfo\" method=\"POST\" v-on:submit.prevent='onsubmit'>\n                <input type=\"text\" name=\"user\" class=\"user\" v-model='user.name' placeholder=\"请输入用户名。。。\">\n                <input type=\"password\" name=\"user\" class=\"user\" v-model='user.pwd' placeholder=\"请输入密码。。。\">\n\n                <input type=\"submit\" id=\"btn\" value=\"提交\">\n            </form>\n\n        </div>\n\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        user: {\n                            name: \"\",\n                            pwd: \"\"\n                        }\n                    }\n                },\n                methods: {\n                    onsubmit() {\n                        console.log(`表单信息:${this.user.name}和${this.user.pwd}提交`)\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n\n    > 表单本身的提交行为会进行页面跳转，现在使用`.prevent`修饰符之后，只执行绑定的方法，不跳转页面;类似的还有超链接等的默认行为都可以使用该修饰符阻止\n\n- `.once`: 事件只能触发一次\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>VueDemo</title>\n        <script src='https://cdn.jsdelivr.net/npm/vue/dist/vue.js'></script>\n    </head>\n\n    <body>\n        <div id='app'>\n            <button @click.once='btn'> 你只能评论一次 </button>\n        </div>\n        <script>\n            var vm = new Vue({\n                el: '#app',\n                methods: {\n                    btn() {\n                        alert(\"已评论\")\n                    }\n                },\n            })\n        </script>\n    </body>\n\n    </html>\n    ```\n","slug":"Vue-事件绑定以及事件修饰符","published":1,"updated":"2020-12-01T14:23:48.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc30017jjln0gbf1pp0","content":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>要理解事件绑定，就得先了解事件。</p>\n<p>浏览器是事件驱动型的，根据用户的行为触发不同的事件，根据事件执行相应的操作。我们较为熟悉的事件有三大类型：</p>\n<h3 id=\"鼠标键盘事件\"><a href=\"#鼠标键盘事件\" class=\"headerlink\" title=\"鼠标键盘事件\"></a>鼠标键盘事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">鼠标键盘事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onclick</td>\n<td align=\"left\">鼠标点击某个对象</td>\n</tr>\n<tr>\n<td align=\"left\">ondbclick</td>\n<td align=\"left\">鼠标双击某个对象</td>\n</tr>\n<tr>\n<td align=\"left\">onmousedown</td>\n<td align=\"left\">某个鼠标按键被按下</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseup</td>\n<td align=\"left\">某个鼠标按键被松开</td>\n</tr>\n<tr>\n<td align=\"left\">onmousemove</td>\n<td align=\"left\">鼠标被移动</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseover</td>\n<td align=\"left\">鼠标被移到某元素之上</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseout</td>\n<td align=\"left\">鼠标从某元素移开</td>\n</tr>\n<tr>\n<td align=\"left\">onkeypress</td>\n<td align=\"left\">某个键盘的键被按下或按住</td>\n</tr>\n<tr>\n<td align=\"left\">onkeydown</td>\n<td align=\"left\">某个键盘的键被按下</td>\n</tr>\n<tr>\n<td align=\"left\">onkeyup</td>\n<td align=\"left\">某个键盘的键被松开</td>\n</tr>\n</tbody></table>\n<h3 id=\"页面事件\"><a href=\"#页面事件\" class=\"headerlink\" title=\"页面事件\"></a>页面事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">页面事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onload</td>\n<td align=\"left\">某个页面或图像被完成加载</td>\n</tr>\n<tr>\n<td align=\"left\">onunload</td>\n<td align=\"left\">用户退出页面</td>\n</tr>\n<tr>\n<td align=\"left\">onresize</td>\n<td align=\"left\">窗口或框架被调整尺寸</td>\n</tr>\n<tr>\n<td align=\"left\">onerror</td>\n<td align=\"left\">当加载文档或图像时发生某个错误</td>\n</tr>\n<tr>\n<td align=\"left\">onabort</td>\n<td align=\"left\">图像加载被中断</td>\n</tr>\n</tbody></table>\n<h3 id=\"表单相关事件\"><a href=\"#表单相关事件\" class=\"headerlink\" title=\"表单相关事件\"></a>表单相关事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">表单相关事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onblur</td>\n<td align=\"left\">元素失去焦点</td>\n</tr>\n<tr>\n<td align=\"left\">onfocus</td>\n<td align=\"left\">元素获得焦点</td>\n</tr>\n<tr>\n<td align=\"left\">onchange</td>\n<td align=\"left\">用户改变域的内容</td>\n</tr>\n<tr>\n<td align=\"left\">onreset</td>\n<td align=\"left\">重置按钮被点击</td>\n</tr>\n<tr>\n<td align=\"left\">onsubmit</td>\n<td align=\"left\">提交按钮被点击</td>\n</tr>\n<tr>\n<td align=\"left\">onselect</td>\n<td align=\"left\">文本被选定</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>需要注意的是事件处理程序中的变量<code>event</code>保留着事件对象的信息，包括比如<code>click</code>事件，事件属性里有点击位置相对于浏览器，以及页面的坐标信息，事件的类型（<code>click</code>）,触发事件的DOM节点信息等;可以将<code>evenet</code>作为参数传递，在函数内部获取具体的evenet对象信息。</p>\n</blockquote>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ul>\n<li><p>在Vue.js中<code>v-on</code>指令用来监听<code>DOM</code>事件，并在触发事件时运行一些<code>JavaScript</code>代码;当然<code>v-on</code>也可以简写为<code>@</code></p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>事件绑定<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&#x27;func&#x27;</span>&gt;</span> 显示 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span> &#123;&#123;msg&#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                    msg: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br>                &#125;<br>            &#125;,<br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-string\">&#x27;这是一个大大的H1&#x27;</span></span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2></li>\n</ul>\n<blockquote>\n<p><code>Vue.js</code> 为 <code>v-on</code> 提供了事件修饰符来处理 <code>DOM</code> 事件细节;<code>Vue.js</code>通过由点(<code>.</code>)表示的指令后缀来调用修饰符。</p>\n</blockquote>\n<h3 id=\"事件修饰符分类\"><a href=\"#事件修饰符分类\" class=\"headerlink\" title=\"事件修饰符分类\"></a>事件修饰符分类</h3><p>Vue.js提供的事件修饰符主要针对两类情况:</p>\n<ul>\n<li><p>冒泡机制修饰符</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n</ul>\n</li>\n<li><p>事件本身修饰符</p>\n<ul>\n<li><code>.prevent</code></li>\n<li><code>.once</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡机制修饰符\"><a href=\"#冒泡机制修饰符\" class=\"headerlink\" title=\"冒泡机制修饰符\"></a>冒泡机制修饰符</h3><h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><p><code>DOM</code>中，树状结构决定了子元素肯定在父元素里，所以点击子元素，就同时点击了子元素和父元素，以及父元素的父元素，以此类推，当然最终的根节点都是文档，以及<code>window</code>。</p>\n<p>试想，当一个子元素被点击的时候，不仅仅这个元素本身被点击了，因为这个元素也在其上一级父元素中(属于父级元素的地盘)，所以相当于其父元素也被点击了，以此类推，一层一层往外推，最终整个文档也是被点击了，如果每个层级的节点元素都绑定了<code>click</code>事件，那么每个节点的<code>click</code>事件函数都会被执行。举个形象的例子，一个村里的人被打了（<code>click</code>），首先就要按照村里的规矩处理，同时这个村属于某个乡镇，当然也是相当于这个乡镇的人被打了，那么也要按照这个乡镇的规矩处理，以此一层一层往上报。这个例子不准确的地方就是，现实中一个人因为一个事件只会被处理一次，不会因为同一件事情多次处理。</p>\n<h4 id=\"冒泡带来的烦恼\"><a href=\"#冒泡带来的烦恼\" class=\"headerlink\" title=\"冒泡带来的烦恼\"></a>冒泡带来的烦恼</h4><p>当上层（以及上上层，直至<code>body</code>元素）父级有子元素同样的方法，但你子元素的事件后，所有父级元素的同名函数也会从下到上，由里往外，挨个执行，但是大多数情况下，我们只希望子当事元素事件执行，不希望层层执行，这就要想办法阻止这种冒泡的情况发生。比如我们点击<code>Child Span</code>的时候只显示 <code>Child Span</code>的内容。结合刚刚的例子就是，村里发生了打人事件，在村里解决了，就没必要一层一层往上报，在层层处理了。</p>\n<h4 id=\"事件修饰符-1\"><a href=\"#事件修饰符-1\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><p>在Vue.js中针对Js事件本身的冒泡机制提供一些事件修饰符以便使用</p>\n<ul>\n<li><p><code>.stop</code>: 阻止冒泡事件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>冒泡机制<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">        <span class=\"hljs-selector-id\">#outer</span> &#123;</span><br>            width: 400px;<br>            height: 200px;<br>            background-color: aqua;<br>            position: absolute;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#inner</span> &#123;</span><br>            width: 200px;<br>            height: 100px;<br>            background-color: darkcyan;<br>            margin: 50px auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#btn</span> &#123;</span><br>            width: 40px;<br>            height: 30px;<br>            background-color: gold;<br>            margin: 35px 80px;<br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click.stop</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;inner触发了&quot;</span>)</span><br>                &#125;,<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;outer触发了&quot;</span>)</span><br>                &#125;,<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">btn</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;btn触发了&quot;</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时，只会触发<code>button</code>本身的<code>click</code>事件,不会继续传递</p>\n</blockquote>\n</li>\n<li><p><code>.self</code>:  只当事件在该元素本身（而不是子元素）触发时触发回调函数</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click.self</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时, 继续触发冒泡机制，因此<code>outter</code>盒子同样会触发对应的回调函数,但是<code>inner</code>盒子并不会触发回调函数，只有点击<code>inner</code>本身时，才会正常执行回调函数</p>\n</blockquote>\n</li>\n<li><p><code>.capture</code>: 添加事件侦听器时使用事件捕获模式,即拥有该事件修饰符的元素会优先触发对应事件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click.capture</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时, 继续触发冒泡机制，但是会优先触发<code>outer</code>的回调函数,其次，按照正常的冒泡顺序，由内向外</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"事件本身修饰符\"><a href=\"#事件本身修饰符\" class=\"headerlink\" title=\"事件本身修饰符\"></a>事件本身修饰符</h3><ul>\n<li><p><code>.prevent</code>:阻止默认行为</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>VueDemo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>        form &#123;<br>            width: 210px;<br>            height: 300px;<br><br>            position: relative;<br>            margin: 0 auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-class\">.user</span> &#123;</span><br>            width: 200px;<br>            height: 20px;<br>            display: block;<br>            margin: 5px auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#btn</span> &#123;</span><br>            width: 70px;<br>            float: right;<br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/userinfo&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>=<span class=\"hljs-string\">&#x27;onsubmit&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;user.name&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入用户名。。。&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;user.pwd&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入密码。。。&quot;</span>&gt;</span><br><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br>                    user: &#123;<br><span class=\"javascript\">                        name: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br><span class=\"javascript\">                        pwd: <span class=\"hljs-string\">&quot;&quot;</span></span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">onsubmit</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`表单信息:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.user.name&#125;</span>和<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.user.pwd&#125;</span>提交`</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>表单本身的提交行为会进行页面跳转，现在使用<code>.prevent</code>修饰符之后，只执行绑定的方法，不跳转页面;类似的还有超链接等的默认行为都可以使用该修饰符阻止</p>\n</blockquote>\n</li>\n<li><p><code>.once</code>: 事件只能触发一次</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>VueDemo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click.once</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span> 你只能评论一次 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">btn</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    alert(<span class=\"hljs-string\">&quot;已评论&quot;</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>要理解事件绑定，就得先了解事件。</p>\n<p>浏览器是事件驱动型的，根据用户的行为触发不同的事件，根据事件执行相应的操作。我们较为熟悉的事件有三大类型：</p>\n<h3 id=\"鼠标键盘事件\"><a href=\"#鼠标键盘事件\" class=\"headerlink\" title=\"鼠标键盘事件\"></a>鼠标键盘事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">鼠标键盘事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onclick</td>\n<td align=\"left\">鼠标点击某个对象</td>\n</tr>\n<tr>\n<td align=\"left\">ondbclick</td>\n<td align=\"left\">鼠标双击某个对象</td>\n</tr>\n<tr>\n<td align=\"left\">onmousedown</td>\n<td align=\"left\">某个鼠标按键被按下</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseup</td>\n<td align=\"left\">某个鼠标按键被松开</td>\n</tr>\n<tr>\n<td align=\"left\">onmousemove</td>\n<td align=\"left\">鼠标被移动</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseover</td>\n<td align=\"left\">鼠标被移到某元素之上</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseout</td>\n<td align=\"left\">鼠标从某元素移开</td>\n</tr>\n<tr>\n<td align=\"left\">onkeypress</td>\n<td align=\"left\">某个键盘的键被按下或按住</td>\n</tr>\n<tr>\n<td align=\"left\">onkeydown</td>\n<td align=\"left\">某个键盘的键被按下</td>\n</tr>\n<tr>\n<td align=\"left\">onkeyup</td>\n<td align=\"left\">某个键盘的键被松开</td>\n</tr>\n</tbody></table>\n<h3 id=\"页面事件\"><a href=\"#页面事件\" class=\"headerlink\" title=\"页面事件\"></a>页面事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">页面事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onload</td>\n<td align=\"left\">某个页面或图像被完成加载</td>\n</tr>\n<tr>\n<td align=\"left\">onunload</td>\n<td align=\"left\">用户退出页面</td>\n</tr>\n<tr>\n<td align=\"left\">onresize</td>\n<td align=\"left\">窗口或框架被调整尺寸</td>\n</tr>\n<tr>\n<td align=\"left\">onerror</td>\n<td align=\"left\">当加载文档或图像时发生某个错误</td>\n</tr>\n<tr>\n<td align=\"left\">onabort</td>\n<td align=\"left\">图像加载被中断</td>\n</tr>\n</tbody></table>\n<h3 id=\"表单相关事件\"><a href=\"#表单相关事件\" class=\"headerlink\" title=\"表单相关事件\"></a>表单相关事件</h3><table>\n<thead>\n<tr>\n<th align=\"left\">表单相关事件</th>\n<th align=\"left\">事件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onblur</td>\n<td align=\"left\">元素失去焦点</td>\n</tr>\n<tr>\n<td align=\"left\">onfocus</td>\n<td align=\"left\">元素获得焦点</td>\n</tr>\n<tr>\n<td align=\"left\">onchange</td>\n<td align=\"left\">用户改变域的内容</td>\n</tr>\n<tr>\n<td align=\"left\">onreset</td>\n<td align=\"left\">重置按钮被点击</td>\n</tr>\n<tr>\n<td align=\"left\">onsubmit</td>\n<td align=\"left\">提交按钮被点击</td>\n</tr>\n<tr>\n<td align=\"left\">onselect</td>\n<td align=\"left\">文本被选定</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>需要注意的是事件处理程序中的变量<code>event</code>保留着事件对象的信息，包括比如<code>click</code>事件，事件属性里有点击位置相对于浏览器，以及页面的坐标信息，事件的类型（<code>click</code>）,触发事件的DOM节点信息等;可以将<code>evenet</code>作为参数传递，在函数内部获取具体的evenet对象信息。</p>\n</blockquote>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ul>\n<li><p>在Vue.js中<code>v-on</code>指令用来监听<code>DOM</code>事件，并在触发事件时运行一些<code>JavaScript</code>代码;当然<code>v-on</code>也可以简写为<code>@</code></p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>事件绑定<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&#x27;func&#x27;</span>&gt;</span> 显示 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span> &#123;&#123;msg&#125;&#125; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                    msg: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br>                &#125;<br>            &#125;,<br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-string\">&#x27;这是一个大大的H1&#x27;</span></span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2></li>\n</ul>\n<blockquote>\n<p><code>Vue.js</code> 为 <code>v-on</code> 提供了事件修饰符来处理 <code>DOM</code> 事件细节;<code>Vue.js</code>通过由点(<code>.</code>)表示的指令后缀来调用修饰符。</p>\n</blockquote>\n<h3 id=\"事件修饰符分类\"><a href=\"#事件修饰符分类\" class=\"headerlink\" title=\"事件修饰符分类\"></a>事件修饰符分类</h3><p>Vue.js提供的事件修饰符主要针对两类情况:</p>\n<ul>\n<li><p>冒泡机制修饰符</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n</ul>\n</li>\n<li><p>事件本身修饰符</p>\n<ul>\n<li><code>.prevent</code></li>\n<li><code>.once</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡机制修饰符\"><a href=\"#冒泡机制修饰符\" class=\"headerlink\" title=\"冒泡机制修饰符\"></a>冒泡机制修饰符</h3><h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><p><code>DOM</code>中，树状结构决定了子元素肯定在父元素里，所以点击子元素，就同时点击了子元素和父元素，以及父元素的父元素，以此类推，当然最终的根节点都是文档，以及<code>window</code>。</p>\n<p>试想，当一个子元素被点击的时候，不仅仅这个元素本身被点击了，因为这个元素也在其上一级父元素中(属于父级元素的地盘)，所以相当于其父元素也被点击了，以此类推，一层一层往外推，最终整个文档也是被点击了，如果每个层级的节点元素都绑定了<code>click</code>事件，那么每个节点的<code>click</code>事件函数都会被执行。举个形象的例子，一个村里的人被打了（<code>click</code>），首先就要按照村里的规矩处理，同时这个村属于某个乡镇，当然也是相当于这个乡镇的人被打了，那么也要按照这个乡镇的规矩处理，以此一层一层往上报。这个例子不准确的地方就是，现实中一个人因为一个事件只会被处理一次，不会因为同一件事情多次处理。</p>\n<h4 id=\"冒泡带来的烦恼\"><a href=\"#冒泡带来的烦恼\" class=\"headerlink\" title=\"冒泡带来的烦恼\"></a>冒泡带来的烦恼</h4><p>当上层（以及上上层，直至<code>body</code>元素）父级有子元素同样的方法，但你子元素的事件后，所有父级元素的同名函数也会从下到上，由里往外，挨个执行，但是大多数情况下，我们只希望子当事元素事件执行，不希望层层执行，这就要想办法阻止这种冒泡的情况发生。比如我们点击<code>Child Span</code>的时候只显示 <code>Child Span</code>的内容。结合刚刚的例子就是，村里发生了打人事件，在村里解决了，就没必要一层一层往上报，在层层处理了。</p>\n<h4 id=\"事件修饰符-1\"><a href=\"#事件修饰符-1\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><p>在Vue.js中针对Js事件本身的冒泡机制提供一些事件修饰符以便使用</p>\n<ul>\n<li><p><code>.stop</code>: 阻止冒泡事件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>冒泡机制<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">        <span class=\"hljs-selector-id\">#outer</span> &#123;</span><br>            width: 400px;<br>            height: 200px;<br>            background-color: aqua;<br>            position: absolute;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#inner</span> &#123;</span><br>            width: 200px;<br>            height: 100px;<br>            background-color: darkcyan;<br>            margin: 50px auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#btn</span> &#123;</span><br>            width: 40px;<br>            height: 30px;<br>            background-color: gold;<br>            margin: 35px 80px;<br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click.stop</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;inner触发了&quot;</span>)</span><br>                &#125;,<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;outer触发了&quot;</span>)</span><br>                &#125;,<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">btn</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;btn触发了&quot;</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时，只会触发<code>button</code>本身的<code>click</code>事件,不会继续传递</p>\n</blockquote>\n</li>\n<li><p><code>.self</code>:  只当事件在该元素本身（而不是子元素）触发时触发回调函数</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click.self</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时, 继续触发冒泡机制，因此<code>outter</code>盒子同样会触发对应的回调函数,但是<code>inner</code>盒子并不会触发回调函数，只有点击<code>inner</code>本身时，才会正常执行回调函数</p>\n</blockquote>\n</li>\n<li><p><code>.capture</code>: 添加事件侦听器时使用事件捕获模式,即拥有该事件修饰符的元素会优先触发对应事件</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span> @<span class=\"hljs-attr\">click.capture</span>=<span class=\"hljs-string\">&#x27;outer&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;inner&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当点击按钮时, 继续触发冒泡机制，但是会优先触发<code>outer</code>的回调函数,其次，按照正常的冒泡顺序，由内向外</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"事件本身修饰符\"><a href=\"#事件本身修饰符\" class=\"headerlink\" title=\"事件本身修饰符\"></a>事件本身修饰符</h3><ul>\n<li><p><code>.prevent</code>:阻止默认行为</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>VueDemo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>        form &#123;<br>            width: 210px;<br>            height: 300px;<br><br>            position: relative;<br>            margin: 0 auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-class\">.user</span> &#123;</span><br>            width: 200px;<br>            height: 20px;<br>            display: block;<br>            margin: 5px auto;<br>        &#125;<br><br><span class=\"css\">        <span class=\"hljs-selector-id\">#btn</span> &#123;</span><br>            width: 70px;<br>            float: right;<br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/userinfo&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>=<span class=\"hljs-string\">&#x27;onsubmit&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;user.name&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入用户名。。。&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;user.pwd&#x27;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入密码。。。&quot;</span>&gt;</span><br><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br>                    user: &#123;<br><span class=\"javascript\">                        name: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br><span class=\"javascript\">                        pwd: <span class=\"hljs-string\">&quot;&quot;</span></span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">onsubmit</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`表单信息:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.user.name&#125;</span>和<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.user.pwd&#125;</span>提交`</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>表单本身的提交行为会进行页面跳转，现在使用<code>.prevent</code>修饰符之后，只执行绑定的方法，不跳转页面;类似的还有超链接等的默认行为都可以使用该修饰符阻止</p>\n</blockquote>\n</li>\n<li><p><code>.once</code>: 事件只能触发一次</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>VueDemo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click.once</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span> 你只能评论一次 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            methods: &#123;<br><span class=\"javascript\">                <span class=\"hljs-function\"><span class=\"hljs-title\">btn</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">                    alert(<span class=\"hljs-string\">&quot;已评论&quot;</span>)</span><br>                &#125;<br>            &#125;,<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Vue引入本地资源","date":"2020-10-23T14:28:48.000Z","_content":"\n简单介绍一下在Vue项目中引入本地资源的实现方式: <!--more-->\n\n## 引入本地图片\n\n### 使用 `@`引入：\n\n这是在组件内直接引用和普通的 html 方法一样，代码如下\n\n```html\n<img src=\"@/assets/test.png\" alt=\"test.png\">\n```\n\n### 使用 vue 的方法引入：\n\n这是典型的 vue 思想，使用数据来操纵 dom； 首先在组件内使用 import ... from 引入\n\n```js\nimport imgUrl from '../assets/test.png';\n```\n\n然后在 data 里面声明\n\n```js\ndata: function () {\n      return {\n                  imgSrc: imgUrl\n            }\n       }\n```\n\n最后绑定数据\n\n```js\n<img :src=\"imgSrc\" alt=\"imgSrc\">\n```\n\n## 引入样式文件\n\n在\b\b项目的 `src` 文件下，新建一个 `style` 文件夹，存放 `css` 文件。\n\n### 全局引入\n\n将外部的 css 文件放到 style 文件下，引入外部文件只需在 `main.js\b`文件中\n\n```js\nimport './style/reset.css'\n```\n\n### 局部引入\n\n```js\n<style scoped>\n  @import '../assets/iconfont/iconfont.css'; // 这个分号一定要写，要不会报错\n</style>\n```\n","source":"_posts/Vue引入本地资源.md","raw":"---\ntitle: Vue引入本地资源\ndate: 2020-10-23 22:28:48\ncategories:\n    - 技术\n    - vue\ntags:\n    - 图片\n    - 样式\n---\n\n简单介绍一下在Vue项目中引入本地资源的实现方式: <!--more-->\n\n## 引入本地图片\n\n### 使用 `@`引入：\n\n这是在组件内直接引用和普通的 html 方法一样，代码如下\n\n```html\n<img src=\"@/assets/test.png\" alt=\"test.png\">\n```\n\n### 使用 vue 的方法引入：\n\n这是典型的 vue 思想，使用数据来操纵 dom； 首先在组件内使用 import ... from 引入\n\n```js\nimport imgUrl from '../assets/test.png';\n```\n\n然后在 data 里面声明\n\n```js\ndata: function () {\n      return {\n                  imgSrc: imgUrl\n            }\n       }\n```\n\n最后绑定数据\n\n```js\n<img :src=\"imgSrc\" alt=\"imgSrc\">\n```\n\n## 引入样式文件\n\n在\b\b项目的 `src` 文件下，新建一个 `style` 文件夹，存放 `css` 文件。\n\n### 全局引入\n\n将外部的 css 文件放到 style 文件下，引入外部文件只需在 `main.js\b`文件中\n\n```js\nimport './style/reset.css'\n```\n\n### 局部引入\n\n```js\n<style scoped>\n  @import '../assets/iconfont/iconfont.css'; // 这个分号一定要写，要不会报错\n</style>\n```\n","slug":"Vue引入本地资源","published":1,"updated":"2020-12-27T13:53:54.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc4001ajjln405lgse0","content":"<p>简单介绍一下在Vue项目中引入本地资源的实现方式: <a id=\"more\"></a></p>\n<h2 id=\"引入本地图片\"><a href=\"#引入本地图片\" class=\"headerlink\" title=\"引入本地图片\"></a>引入本地图片</h2><h3 id=\"使用-引入：\"><a href=\"#使用-引入：\" class=\"headerlink\" title=\"使用 @引入：\"></a>使用 <code>@</code>引入：</h3><p>这是在组件内直接引用和普通的 html 方法一样，代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;@/assets/test.png&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;test.png&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"使用-vue-的方法引入：\"><a href=\"#使用-vue-的方法引入：\" class=\"headerlink\" title=\"使用 vue 的方法引入：\"></a>使用 vue 的方法引入：</h3><p>这是典型的 vue 思想，使用数据来操纵 dom； 首先在组件内使用 import … from 引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> imgUrl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../assets/test.png&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<p>然后在 data 里面声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>                  imgSrc: imgUrl<br>            &#125;<br>       &#125;<br></code></pre></div></td></tr></table></figure>\n<p>最后绑定数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;img :src=<span class=\"hljs-string\">&quot;imgSrc&quot;</span> alt=<span class=\"hljs-string\">&quot;imgSrc&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"引入样式文件\"><a href=\"#引入样式文件\" class=\"headerlink\" title=\"引入样式文件\"></a>引入样式文件</h2><p>在\b\b项目的 <code>src</code> 文件下，新建一个 <code>style</code> 文件夹，存放 <code>css</code> 文件。</p>\n<h3 id=\"全局引入\"><a href=\"#全局引入\" class=\"headerlink\" title=\"全局引入\"></a>全局引入</h3><p>将外部的 css 文件放到 style 文件下，引入外部文件只需在 <code>main.js\b</code>文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./style/reset.css&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"局部引入\"><a href=\"#局部引入\" class=\"headerlink\" title=\"局部引入\"></a>局部引入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;style scoped&gt;<br>  @<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;../assets/iconfont/iconfont.css&#x27;</span>; <span class=\"hljs-comment\">// 这个分号一定要写，要不会报错</span><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>简单介绍一下在Vue项目中引入本地资源的实现方式:","more":"</p>\n<h2 id=\"引入本地图片\"><a href=\"#引入本地图片\" class=\"headerlink\" title=\"引入本地图片\"></a>引入本地图片</h2><h3 id=\"使用-引入：\"><a href=\"#使用-引入：\" class=\"headerlink\" title=\"使用 @引入：\"></a>使用 <code>@</code>引入：</h3><p>这是在组件内直接引用和普通的 html 方法一样，代码如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;@/assets/test.png&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;test.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"使用-vue-的方法引入：\"><a href=\"#使用-vue-的方法引入：\" class=\"headerlink\" title=\"使用 vue 的方法引入：\"></a>使用 vue 的方法引入：</h3><p>这是典型的 vue 思想，使用数据来操纵 dom； 首先在组件内使用 import … from 引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> imgUrl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../assets/test.png&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>然后在 data 里面声明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>                  imgSrc: imgUrl<br>            &#125;<br>       &#125;<br></code></pre></td></tr></table></figure>\n<p>最后绑定数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;img :src=<span class=\"hljs-string\">&quot;imgSrc&quot;</span> alt=<span class=\"hljs-string\">&quot;imgSrc&quot;</span>&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"引入样式文件\"><a href=\"#引入样式文件\" class=\"headerlink\" title=\"引入样式文件\"></a>引入样式文件</h2><p>在\b\b项目的 <code>src</code> 文件下，新建一个 <code>style</code> 文件夹，存放 <code>css</code> 文件。</p>\n<h3 id=\"全局引入\"><a href=\"#全局引入\" class=\"headerlink\" title=\"全局引入\"></a>全局引入</h3><p>将外部的 css 文件放到 style 文件下，引入外部文件只需在 <code>main.js\b</code>文件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./style/reset.css&#x27;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"局部引入\"><a href=\"#局部引入\" class=\"headerlink\" title=\"局部引入\"></a>局部引入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;style scoped&gt;<br>  @<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;../assets/iconfont/iconfont.css&#x27;</span>; <span class=\"hljs-comment\">// 这个分号一定要写，要不会报错</span><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>"},{"title":"books","date":"2019-05-12T12:59:52.000Z","_content":"\n## 基础\n\n### 基础教程\n\n- [python基础](http://liushaofeng2018.gitee.io/python_fundamentals/)\n\n- [python高级](http://liushaofeng2018.gitee.io/python_advanced/)\n\n### 工具\n\n- [redis](http://liushaofeng2018.gitee.io/python-redis/)\n\n- [git](http://liushaofeng2018.gitee.io/python-git/)\n\n### web\n\n#### django\n\n- [django](http://liushaofeng2018.gitee.io/python-django/)\n\n- [django-rest-framework](http://liushaofeng2018.gitee.io/python-django-rest-framework/)\n\n- [Django项目:美多商城-前端](http://liushaofeng2018.gitee.io/pyhton-mido-front-end/)\n\n- [Django项目:美多商城-后台](http://liushaofeng2018.gitee.io/pyhton-mido-backstage/)\n\n### flask\n\n- [flask](http://liushaofeng2018.gitee.io/pyhton-flask/)\n\n- [flask项目：头条](http://liushaofeng2018.gitee.io/python-headline/)\n\n### 前端\n\n- [vue](http://liushaofeng2018.gitee.io/python-vue/)\n\n- [vue组件](http://liushaofeng2018.gitee.io/python-vue-component/)\n\n### 数据结构与算法\n\n- [用python解决数据结构与算法问题](http://liushaofeng2018.gitee.io/python-data-structure-cn/)\n\n### 人工智能\n\n- [推荐系统](http://liushaofeng2018.gitee.io/python-recommendation-system/)\n\n- [头条推荐系统](http://liushaofeng2018.gitee.io/python-headline-recommendation-system/)\n","source":"_posts/books.md","raw":"---\ntitle: books\ncategories:\n  - Ebook\ndate: 2019-05-12 20:59:52\ntags:\n  - Ebook\n---\n\n## 基础\n\n### 基础教程\n\n- [python基础](http://liushaofeng2018.gitee.io/python_fundamentals/)\n\n- [python高级](http://liushaofeng2018.gitee.io/python_advanced/)\n\n### 工具\n\n- [redis](http://liushaofeng2018.gitee.io/python-redis/)\n\n- [git](http://liushaofeng2018.gitee.io/python-git/)\n\n### web\n\n#### django\n\n- [django](http://liushaofeng2018.gitee.io/python-django/)\n\n- [django-rest-framework](http://liushaofeng2018.gitee.io/python-django-rest-framework/)\n\n- [Django项目:美多商城-前端](http://liushaofeng2018.gitee.io/pyhton-mido-front-end/)\n\n- [Django项目:美多商城-后台](http://liushaofeng2018.gitee.io/pyhton-mido-backstage/)\n\n### flask\n\n- [flask](http://liushaofeng2018.gitee.io/pyhton-flask/)\n\n- [flask项目：头条](http://liushaofeng2018.gitee.io/python-headline/)\n\n### 前端\n\n- [vue](http://liushaofeng2018.gitee.io/python-vue/)\n\n- [vue组件](http://liushaofeng2018.gitee.io/python-vue-component/)\n\n### 数据结构与算法\n\n- [用python解决数据结构与算法问题](http://liushaofeng2018.gitee.io/python-data-structure-cn/)\n\n### 人工智能\n\n- [推荐系统](http://liushaofeng2018.gitee.io/python-recommendation-system/)\n\n- [头条推荐系统](http://liushaofeng2018.gitee.io/python-headline-recommendation-system/)\n","slug":"books","published":1,"updated":"2020-12-01T14:23:48.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc6001cjjlngs6ch78a","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"基础教程\"><a href=\"#基础教程\" class=\"headerlink\" title=\"基础教程\"></a>基础教程</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python_fundamentals/\">python基础</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python_advanced/\">python高级</a></p>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-redis/\">redis</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-git/\">git</a></p>\n</li>\n</ul>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><h4 id=\"django\"><a href=\"#django\" class=\"headerlink\" title=\"django\"></a>django</h4><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-django/\">django</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-django-rest-framework/\">django-rest-framework</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-mido-front-end/\">Django项目:美多商城-前端</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-mido-backstage/\">Django项目:美多商城-后台</a></p>\n</li>\n</ul>\n<h3 id=\"flask\"><a href=\"#flask\" class=\"headerlink\" title=\"flask\"></a>flask</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-flask/\">flask</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-headline/\">flask项目：头条</a></p>\n</li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-vue/\">vue</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-vue-component/\">vue组件</a></p>\n</li>\n</ul>\n<h3 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h3><ul>\n<li><a href=\"http://liushaofeng2018.gitee.io/python-data-structure-cn/\">用python解决数据结构与算法问题</a></li>\n</ul>\n<h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-recommendation-system/\">推荐系统</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-headline-recommendation-system/\">头条推荐系统</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"基础教程\"><a href=\"#基础教程\" class=\"headerlink\" title=\"基础教程\"></a>基础教程</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python_fundamentals/\">python基础</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python_advanced/\">python高级</a></p>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-redis/\">redis</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-git/\">git</a></p>\n</li>\n</ul>\n<h3 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h3><h4 id=\"django\"><a href=\"#django\" class=\"headerlink\" title=\"django\"></a>django</h4><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-django/\">django</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-django-rest-framework/\">django-rest-framework</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-mido-front-end/\">Django项目:美多商城-前端</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-mido-backstage/\">Django项目:美多商城-后台</a></p>\n</li>\n</ul>\n<h3 id=\"flask\"><a href=\"#flask\" class=\"headerlink\" title=\"flask\"></a>flask</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/pyhton-flask/\">flask</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-headline/\">flask项目：头条</a></p>\n</li>\n</ul>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-vue/\">vue</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-vue-component/\">vue组件</a></p>\n</li>\n</ul>\n<h3 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h3><ul>\n<li><a href=\"http://liushaofeng2018.gitee.io/python-data-structure-cn/\">用python解决数据结构与算法问题</a></li>\n</ul>\n<h3 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h3><ul>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-recommendation-system/\">推荐系统</a></p>\n</li>\n<li><p><a href=\"http://liushaofeng2018.gitee.io/python-headline-recommendation-system/\">头条推荐系统</a></p>\n</li>\n</ul>\n"},{"title":"python内置函数","date":"2019-05-25T02:45:27.000Z","_content":"### python内置函数\n\n> Python 内置函数就是 python 标准库里（语言自身携带的）函数（公共函数）。\n\n那么，接下来就来谈一谈 python 里的内置函数\n\n#### 1、`abs()`    \n\n> 此函数返回数字的绝对值。\n\n```python\na = 5\nb = -10\nprint(abs(a))  #输出3\nprint(abs(b))  #输出5\n```\n\n#### 2、`all()`\n\n> 此函数用于判断给定的可迭代参数 `iterable` 中的所有元素是否都不为 `0`、都不为 `False` 或者 `iterable` 都 为空,如果是返回 `True`, 否则返回 `False`。\n\n```python\nprint(all(['a', 'b', 'c', 'd']))  # True\nprint(all(['a', 'b', '', 'd']))   # False\nprint(all([0, 1,2, 3]))          # False\nprint(all(('a', 'b', '', 'd')))   # False\nprint(all((0, 1,2, 3)))          # False\nprint(all([]))  # True\nprint(all(()))  # True\n```\n\n#### 3、`any()`     \n\n>函数用于判断给定的可迭代参数 `iterable` 是否全部为空对象,如果都为空、都为 0、或者都为 `false`，则返回 `False`,如果不都为空、不都为 `0`、不都为 `false`，则返回 `True`。\n\n```python\nprint(any(['a', 'b', 'c', 'd']))  # True\nprint(any(['a', 'b', '', 'd']))   # True\nprint(any([0, 1,2, 3]))          # True\nprint(any(('a', 'b', '', 'd')))   # True\nprint(any((0, 1,2, 3)))          # True\nprint(any([]))  # False\nprint(any(()))  # False\n```\n\n#### 4、`bin()`     \n\n> 返回一个整数 `int` 或者长整数 `long int` 的二进制表示。\n\n```python\nprint(bin(10))  #0b1010\nprint(bin(20))  #0b10100\n```\n\n#### 5、`bool()`    \n\n> 函数用于将给定参数转换为布尔类型，如果没有参数，返回 `False`。\n\n- 传入布尔类型时，按原值返回\n\n- 参数如果缺省，则返回 `False`\n\n- 传入字符串时，空字符串返回 `False`，否则返回 `True`\n\n- 传入数值时，0 值返回 `False`，否则返回 `True`\n\n- 传入元组、列表、字典等对象时，元素个数为空返回 `False`，否则返回 `True`.\n\n```python\nprint(bool())  #False\nprint(bool(True))  #True\nprint(bool(\"\"))  #False\nprint(bool(\"123\"))  #True\nprint(bool(0))  #False\nprint(bool(1))  #True\nprint(bool([])) #False  若元祖和字典为空时 也为False ，不为空 则为True\n```\n\n#### 6、`chr()`   \n\n> 用一个范围在 `range(256)`内的（就是 `0～255`）整数作参数，返回一个对应的字符。(**只能输入数字**)\n\n```python\nprint(chr(65))   #A\nprint(chr(97))   #a\nprint(chr(100))  #d\n```\n\n#### 7、`cmp(x,y)`    \n\n> 函数用于比较 2 个对象，如果` x <y `返回` -1`, 如果 `x == y` 返回 `0`, 如果 `x> y `返回 1。（`python3` 已经删除了）\n\n#### 8、`compile()`    \n\n>  函数将一个字符串编译为字节代码。语法：`compile(source, filename, mode[, flags[, dont_inherit]])`\n\n```python\nimport re\npattern=re.compile('[a-zA-Z]')\nresult=pattern.findall('as3SiOPdj#@23awe')\nprint(result)\n```\n\n#### 9、`complex(real,imag)`    \n\n> 函数用于创建一个值为 `real + imag * j` 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。\n\n```python\nprint(complex(1, 2))  #(1 + 2j)\nprint(complex(1))  #(1 + 0j)\nprint(complex(\"3\")) #(3+0j)\n```\n\n#### 10、`dict(**kwarg)`\n\n> 返回一个字典\n\n```python\n>>>dict()                        # 创建空字典\n{}\n>>> dict(a='a', b='b', t='t')     # 传入关键字\n{'a': 'a', 'b': 'b', 't': 't'}\n>>> dict(zip(['one', 'two', 'three'], [1, 2, 3]))   # 映射函数方式来构造字典\n{'three': 3, 'two': 2, 'one': 1} \n>>> dict([('one', 1), ('two', 2), ('three', 3)])    # 可迭代对象方式来构造字典\n{'three': 3, 'two': 2, 'one': 1}\n>>>\n```\n\n#### 11、`dir([object])   `  \n\n> 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；\n>\n> 带参数时，返回参数的属性、方法列表。\n>\n> 如果参数包含方法`__dir__()`，该方法将被调用。\n>\n> 如果参数不包含`__dir__()`，该方法将最大限度地收集参数信息。\n\n```python\n>>>dir()   #  获得当前模块的属性列表\n['__builtins__', '__doc__', '__name__', '__package__', 'arr', 'myslice']\n>>> dir([ ])    # 查看列表的方法\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n>>>\n```\n\n#### 12、`divmod(a, b)`    \n\n> 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组` (a // b, a % b)`。\n\n```python\n>>>divmod(7, 2)\n(3, 1)\n>>> divmod(8, 2)\n(4, 0)\n>>> divmod(1+2j,1+0.5j)\n((1+0j), 1.5j)\n```\n\n#### 13、`enumerate(sequence, [start=0]) `   \n\n> 函数用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在` for` 循环当中。\n\n```python\n>>>seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n>>> list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n>>> list(enumerate(seasons, start=1))       # 下标从 1 开始\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n```\n\n#### 14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。\n\n#### 15、execfile()    函数可以用来执行一个文件。\n\n#### 16、float()    函数用于将整数和字符串转换成浮点数。\n\n#### 17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\n\n#### 18、getattr()    函数用于返回一个对象属性值。\n\n#### 19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。\n\n#### 20、help()    函数用于查看函数或模块用途的详细说明。\n\n#### 21、hex()    函数用于将 10 进制整数转换成 16 进制整数。\n\n#### 22、id()    函数用于获取对象的内存地址。\n\n#### 23、input()    输入函数\n\n#### 24、int()    函数用于将一个字符串会数字转换为整型。\n\n#### 25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。\n\n　　 **isinstance() 与 type() 区别：**\n\n- type() 不会认为子类是一种父类类型，不考虑继承关系。\n- isinstance() 会认为子类是一种父类类型，考虑继承关系。\n\n- 如果要判断两个类型是否相同推荐使用 isinstance()。\n\n#### 26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。\n\n#### 27、list()    方法用于将元组转换为列表。\n\n#### 28、locals()    函数会以字典类型返回当前位置的全部局部变量。\n\n#### 29、long()    函数将数字或字符串转换为一个长整型。\n\n#### 30、max()    方法返回给定参数的最大值，参数可以为序列。\n\n#### 31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。\n\n#### 32、min()    方法返回给定参数的最小值，参数可以为序列。\n\n#### 33、oct()    函数将一个整数转换成 8 进制字符串。\n\n#### 34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。\n\n#### 35、ord()    函数与 chr() 函数相反，输入字符返回数字\n\n#### 36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z\n\n#### 37、print()    输出函数\n\n#### 38、range()    函数可创建一个整数列表，一般用在 for 循环中。\n\n#### 39、reload()    用于重新载入之前载入的模块。\n\n#### 40、everse()    函数用于反向列表中元素。\n\n#### 41、round()    方法返回浮点数 x 的四舍五入值。\n\n#### 42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\n\n#### 43、str()    函数将对象转化字符串\n\n#### 44、sum()    方法对系列进行求和计算。\n\n#### 45、tuple()   元组 tuple() 函数将列表转换为元组。\n\n#### 46、type()   返回对象类型。\n\n#### 47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。\n\n#### 48、vars()    函数返回对象 object 的属性和属性值的字典对象。\n\n#### 49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。\n\n#### 50、__import__()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 __import__() 来动态载入。","source":"_posts/python函数-内置函数.md","raw":"---\ntitle: python内置函数\ndate: 2019-05-25 10:45:27\ncategories:\n  - 技术\n  - python\n  - 基础\ntags:\n  - 内置函数\n---\n### python内置函数\n\n> Python 内置函数就是 python 标准库里（语言自身携带的）函数（公共函数）。\n\n那么，接下来就来谈一谈 python 里的内置函数\n\n#### 1、`abs()`    \n\n> 此函数返回数字的绝对值。\n\n```python\na = 5\nb = -10\nprint(abs(a))  #输出3\nprint(abs(b))  #输出5\n```\n\n#### 2、`all()`\n\n> 此函数用于判断给定的可迭代参数 `iterable` 中的所有元素是否都不为 `0`、都不为 `False` 或者 `iterable` 都 为空,如果是返回 `True`, 否则返回 `False`。\n\n```python\nprint(all(['a', 'b', 'c', 'd']))  # True\nprint(all(['a', 'b', '', 'd']))   # False\nprint(all([0, 1,2, 3]))          # False\nprint(all(('a', 'b', '', 'd')))   # False\nprint(all((0, 1,2, 3)))          # False\nprint(all([]))  # True\nprint(all(()))  # True\n```\n\n#### 3、`any()`     \n\n>函数用于判断给定的可迭代参数 `iterable` 是否全部为空对象,如果都为空、都为 0、或者都为 `false`，则返回 `False`,如果不都为空、不都为 `0`、不都为 `false`，则返回 `True`。\n\n```python\nprint(any(['a', 'b', 'c', 'd']))  # True\nprint(any(['a', 'b', '', 'd']))   # True\nprint(any([0, 1,2, 3]))          # True\nprint(any(('a', 'b', '', 'd')))   # True\nprint(any((0, 1,2, 3)))          # True\nprint(any([]))  # False\nprint(any(()))  # False\n```\n\n#### 4、`bin()`     \n\n> 返回一个整数 `int` 或者长整数 `long int` 的二进制表示。\n\n```python\nprint(bin(10))  #0b1010\nprint(bin(20))  #0b10100\n```\n\n#### 5、`bool()`    \n\n> 函数用于将给定参数转换为布尔类型，如果没有参数，返回 `False`。\n\n- 传入布尔类型时，按原值返回\n\n- 参数如果缺省，则返回 `False`\n\n- 传入字符串时，空字符串返回 `False`，否则返回 `True`\n\n- 传入数值时，0 值返回 `False`，否则返回 `True`\n\n- 传入元组、列表、字典等对象时，元素个数为空返回 `False`，否则返回 `True`.\n\n```python\nprint(bool())  #False\nprint(bool(True))  #True\nprint(bool(\"\"))  #False\nprint(bool(\"123\"))  #True\nprint(bool(0))  #False\nprint(bool(1))  #True\nprint(bool([])) #False  若元祖和字典为空时 也为False ，不为空 则为True\n```\n\n#### 6、`chr()`   \n\n> 用一个范围在 `range(256)`内的（就是 `0～255`）整数作参数，返回一个对应的字符。(**只能输入数字**)\n\n```python\nprint(chr(65))   #A\nprint(chr(97))   #a\nprint(chr(100))  #d\n```\n\n#### 7、`cmp(x,y)`    \n\n> 函数用于比较 2 个对象，如果` x <y `返回` -1`, 如果 `x == y` 返回 `0`, 如果 `x> y `返回 1。（`python3` 已经删除了）\n\n#### 8、`compile()`    \n\n>  函数将一个字符串编译为字节代码。语法：`compile(source, filename, mode[, flags[, dont_inherit]])`\n\n```python\nimport re\npattern=re.compile('[a-zA-Z]')\nresult=pattern.findall('as3SiOPdj#@23awe')\nprint(result)\n```\n\n#### 9、`complex(real,imag)`    \n\n> 函数用于创建一个值为 `real + imag * j` 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。\n\n```python\nprint(complex(1, 2))  #(1 + 2j)\nprint(complex(1))  #(1 + 0j)\nprint(complex(\"3\")) #(3+0j)\n```\n\n#### 10、`dict(**kwarg)`\n\n> 返回一个字典\n\n```python\n>>>dict()                        # 创建空字典\n{}\n>>> dict(a='a', b='b', t='t')     # 传入关键字\n{'a': 'a', 'b': 'b', 't': 't'}\n>>> dict(zip(['one', 'two', 'three'], [1, 2, 3]))   # 映射函数方式来构造字典\n{'three': 3, 'two': 2, 'one': 1} \n>>> dict([('one', 1), ('two', 2), ('three', 3)])    # 可迭代对象方式来构造字典\n{'three': 3, 'two': 2, 'one': 1}\n>>>\n```\n\n#### 11、`dir([object])   `  \n\n> 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；\n>\n> 带参数时，返回参数的属性、方法列表。\n>\n> 如果参数包含方法`__dir__()`，该方法将被调用。\n>\n> 如果参数不包含`__dir__()`，该方法将最大限度地收集参数信息。\n\n```python\n>>>dir()   #  获得当前模块的属性列表\n['__builtins__', '__doc__', '__name__', '__package__', 'arr', 'myslice']\n>>> dir([ ])    # 查看列表的方法\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n>>>\n```\n\n#### 12、`divmod(a, b)`    \n\n> 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组` (a // b, a % b)`。\n\n```python\n>>>divmod(7, 2)\n(3, 1)\n>>> divmod(8, 2)\n(4, 0)\n>>> divmod(1+2j,1+0.5j)\n((1+0j), 1.5j)\n```\n\n#### 13、`enumerate(sequence, [start=0]) `   \n\n> 函数用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在` for` 循环当中。\n\n```python\n>>>seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n>>> list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n>>> list(enumerate(seasons, start=1))       # 下标从 1 开始\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n```\n\n#### 14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。\n\n#### 15、execfile()    函数可以用来执行一个文件。\n\n#### 16、float()    函数用于将整数和字符串转换成浮点数。\n\n#### 17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\n\n#### 18、getattr()    函数用于返回一个对象属性值。\n\n#### 19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。\n\n#### 20、help()    函数用于查看函数或模块用途的详细说明。\n\n#### 21、hex()    函数用于将 10 进制整数转换成 16 进制整数。\n\n#### 22、id()    函数用于获取对象的内存地址。\n\n#### 23、input()    输入函数\n\n#### 24、int()    函数用于将一个字符串会数字转换为整型。\n\n#### 25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。\n\n　　 **isinstance() 与 type() 区别：**\n\n- type() 不会认为子类是一种父类类型，不考虑继承关系。\n- isinstance() 会认为子类是一种父类类型，考虑继承关系。\n\n- 如果要判断两个类型是否相同推荐使用 isinstance()。\n\n#### 26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。\n\n#### 27、list()    方法用于将元组转换为列表。\n\n#### 28、locals()    函数会以字典类型返回当前位置的全部局部变量。\n\n#### 29、long()    函数将数字或字符串转换为一个长整型。\n\n#### 30、max()    方法返回给定参数的最大值，参数可以为序列。\n\n#### 31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。\n\n#### 32、min()    方法返回给定参数的最小值，参数可以为序列。\n\n#### 33、oct()    函数将一个整数转换成 8 进制字符串。\n\n#### 34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。\n\n#### 35、ord()    函数与 chr() 函数相反，输入字符返回数字\n\n#### 36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z\n\n#### 37、print()    输出函数\n\n#### 38、range()    函数可创建一个整数列表，一般用在 for 循环中。\n\n#### 39、reload()    用于重新载入之前载入的模块。\n\n#### 40、everse()    函数用于反向列表中元素。\n\n#### 41、round()    方法返回浮点数 x 的四舍五入值。\n\n#### 42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\n\n#### 43、str()    函数将对象转化字符串\n\n#### 44、sum()    方法对系列进行求和计算。\n\n#### 45、tuple()   元组 tuple() 函数将列表转换为元组。\n\n#### 46、type()   返回对象类型。\n\n#### 47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。\n\n#### 48、vars()    函数返回对象 object 的属性和属性值的字典对象。\n\n#### 49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。\n\n#### 50、__import__()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 __import__() 来动态载入。","slug":"python函数-内置函数","published":1,"updated":"2021-01-23T14:59:42.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc7001fjjln3jrv8hf5","content":"<h3 id=\"python内置函数\"><a href=\"#python内置函数\" class=\"headerlink\" title=\"python内置函数\"></a>python内置函数</h3><blockquote>\n<p>Python 内置函数就是 python 标准库里（语言自身携带的）函数（公共函数）。</p>\n</blockquote>\n<p>那么，接下来就来谈一谈 python 里的内置函数</p>\n<h4 id=\"1、abs\"><a href=\"#1、abs\" class=\"headerlink\" title=\"1、abs()\"></a>1、<code>abs()</code></h4><blockquote>\n<p>此函数返回数字的绝对值。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">a = <span class=\"hljs-number\">5</span><br>b = -<span class=\"hljs-number\">10</span><br>print(<span class=\"hljs-built_in\">abs</span>(a))  <span class=\"hljs-comment\">#输出3</span><br>print(<span class=\"hljs-built_in\">abs</span>(b))  <span class=\"hljs-comment\">#输出5</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"2、all\"><a href=\"#2、all\" class=\"headerlink\" title=\"2、all()\"></a>2、<code>all()</code></h4><blockquote>\n<p>此函数用于判断给定的可迭代参数 <code>iterable</code> 中的所有元素是否都不为 <code>0</code>、都不为 <code>False</code> 或者 <code>iterable</code> 都 为空,如果是返回 <code>True</code>, 否则返回 <code>False</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))   <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))          <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>)))   <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)))          <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>([]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">all</span>(()))  <span class=\"hljs-comment\"># True</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"3、any\"><a href=\"#3、any\" class=\"headerlink\" title=\"3、any()\"></a>3、<code>any()</code></h4><blockquote>\n<p>函数用于判断给定的可迭代参数 <code>iterable</code> 是否全部为空对象,如果都为空、都为 0、或者都为 <code>false</code>，则返回 <code>False</code>,如果不都为空、不都为 <code>0</code>、不都为 <code>false</code>，则返回 <code>True</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))   <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))          <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>)))   <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)))          <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([]))  <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">any</span>(()))  <span class=\"hljs-comment\"># False</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"4、bin\"><a href=\"#4、bin\" class=\"headerlink\" title=\"4、bin()\"></a>4、<code>bin()</code></h4><blockquote>\n<p>返回一个整数 <code>int</code> 或者长整数 <code>long int</code> 的二进制表示。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-number\">10</span>))  <span class=\"hljs-comment\">#0b1010</span><br>print(<span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-number\">20</span>))  <span class=\"hljs-comment\">#0b10100</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"5、bool\"><a href=\"#5、bool\" class=\"headerlink\" title=\"5、bool()\"></a>5、<code>bool()</code></h4><blockquote>\n<p>函数用于将给定参数转换为布尔类型，如果没有参数，返回 <code>False</code>。</p>\n</blockquote>\n<ul>\n<li><p>传入布尔类型时，按原值返回</p>\n</li>\n<li><p>参数如果缺省，则返回 <code>False</code></p>\n</li>\n<li><p>传入字符串时，空字符串返回 <code>False</code>，否则返回 <code>True</code></p>\n</li>\n<li><p>传入数值时，0 值返回 <code>False</code>，否则返回 <code>True</code></p>\n</li>\n<li><p>传入元组、列表、字典等对象时，元素个数为空返回 <code>False</code>，否则返回 <code>True</code>.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">bool</span>())  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-literal\">True</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-string\">&quot;&quot;</span>))  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-string\">&quot;123&quot;</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-number\">0</span>))  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>([])) <span class=\"hljs-comment\">#False  若元祖和字典为空时 也为False ，不为空 则为True</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"6、chr\"><a href=\"#6、chr\" class=\"headerlink\" title=\"6、chr()\"></a>6、<code>chr()</code></h4><blockquote>\n<p>用一个范围在 <code>range(256)</code>内的（就是 <code>0～255</code>）整数作参数，返回一个对应的字符。(<strong>只能输入数字</strong>)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">65</span>))   <span class=\"hljs-comment\">#A</span><br>print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">97</span>))   <span class=\"hljs-comment\">#a</span><br>print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">100</span>))  <span class=\"hljs-comment\">#d</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"7、cmp-x-y\"><a href=\"#7、cmp-x-y\" class=\"headerlink\" title=\"7、cmp(x,y)\"></a>7、<code>cmp(x,y)</code></h4><blockquote>\n<p>函数用于比较 2 个对象，如果<code>x &lt;y</code>返回<code>-1</code>, 如果 <code>x == y</code> 返回 <code>0</code>, 如果 <code>x&gt; y</code>返回 1。（<code>python3</code> 已经删除了）</p>\n</blockquote>\n<h4 id=\"8、compile\"><a href=\"#8、compile\" class=\"headerlink\" title=\"8、compile()\"></a>8、<code>compile()</code></h4><blockquote>\n<p> 函数将一个字符串编译为字节代码。语法：<code>compile(source, filename, mode[, flags[, dont_inherit]])</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> re<br>pattern=re.<span class=\"hljs-built_in\">compile</span>(<span class=\"hljs-string\">&#x27;[a-zA-Z]&#x27;</span>)<br>result=pattern.findall(<span class=\"hljs-string\">&#x27;as3SiOPdj#@23awe&#x27;</span>)<br>print(result)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"9、complex-real-imag\"><a href=\"#9、complex-real-imag\" class=\"headerlink\" title=\"9、complex(real,imag)\"></a>9、<code>complex(real,imag)</code></h4><blockquote>\n<p>函数用于创建一个值为 <code>real + imag * j</code> 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>))  <span class=\"hljs-comment\">#(1 + 2j)</span><br>print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#(1 + 0j)</span><br>print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-string\">&quot;3&quot;</span>)) <span class=\"hljs-comment\">#(3+0j)</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"10、dict-kwarg\"><a href=\"#10、dict-kwarg\" class=\"headerlink\" title=\"10、dict(**kwarg)\"></a>10、<code>dict(**kwarg)</code></h4><blockquote>\n<p>返回一个字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">dict</span>()                        <span class=\"hljs-comment\"># 创建空字典</span><br>&#123;&#125;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>(a=<span class=\"hljs-string\">&#x27;a&#x27;</span>, b=<span class=\"hljs-string\">&#x27;b&#x27;</span>, t=<span class=\"hljs-string\">&#x27;t&#x27;</span>)     <span class=\"hljs-comment\"># 传入关键字</span><br>&#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>: <span class=\"hljs-string\">&#x27;t&#x27;</span>&#125;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>(<span class=\"hljs-built_in\">zip</span>([<span class=\"hljs-string\">&#x27;one&#x27;</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>, <span class=\"hljs-string\">&#x27;three&#x27;</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))   <span class=\"hljs-comment\"># 映射函数方式来构造字典</span><br>&#123;<span class=\"hljs-string\">&#x27;three&#x27;</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;one&#x27;</span>: <span class=\"hljs-number\">1</span>&#125; <br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>([(<span class=\"hljs-string\">&#x27;one&#x27;</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&#x27;two&#x27;</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-string\">&#x27;three&#x27;</span>, <span class=\"hljs-number\">3</span>)])    <span class=\"hljs-comment\"># 可迭代对象方式来构造字典</span><br>&#123;<span class=\"hljs-string\">&#x27;three&#x27;</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;one&#x27;</span>: <span class=\"hljs-number\">1</span>&#125;<br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"11、dir-object\"><a href=\"#11、dir-object\" class=\"headerlink\" title=\"11、dir([object])\"></a>11、<code>dir([object])</code></h4><blockquote>\n<p>函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；</p>\n<p>带参数时，返回参数的属性、方法列表。</p>\n<p>如果参数包含方法<code>__dir__()</code>，该方法将被调用。</p>\n<p>如果参数不包含<code>__dir__()</code>，该方法将最大限度地收集参数信息。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">dir</span>()   <span class=\"hljs-comment\">#  获得当前模块的属性列表</span><br>[<span class=\"hljs-string\">&#x27;__builtins__&#x27;</span>, <span class=\"hljs-string\">&#x27;__doc__&#x27;</span>, <span class=\"hljs-string\">&#x27;__name__&#x27;</span>, <span class=\"hljs-string\">&#x27;__package__&#x27;</span>, <span class=\"hljs-string\">&#x27;arr&#x27;</span>, <span class=\"hljs-string\">&#x27;myslice&#x27;</span>]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>([ ])    <span class=\"hljs-comment\"># 查看列表的方法</span><br>[<span class=\"hljs-string\">&#x27;__add__&#x27;</span>, <span class=\"hljs-string\">&#x27;__class__&#x27;</span>, <span class=\"hljs-string\">&#x27;__contains__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delattr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__doc__&#x27;</span>, <span class=\"hljs-string\">&#x27;__eq__&#x27;</span>, <span class=\"hljs-string\">&#x27;__format__&#x27;</span>, <span class=\"hljs-string\">&#x27;__ge__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getattribute__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__gt__&#x27;</span>, <span class=\"hljs-string\">&#x27;__hash__&#x27;</span>, <span class=\"hljs-string\">&#x27;__iadd__&#x27;</span>, <span class=\"hljs-string\">&#x27;__imul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__init__&#x27;</span>, <span class=\"hljs-string\">&#x27;__iter__&#x27;</span>, <span class=\"hljs-string\">&#x27;__le__&#x27;</span>, <span class=\"hljs-string\">&#x27;__len__&#x27;</span>, <span class=\"hljs-string\">&#x27;__lt__&#x27;</span>, <span class=\"hljs-string\">&#x27;__mul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__ne__&#x27;</span>, <span class=\"hljs-string\">&#x27;__new__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reduce__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reduce_ex__&#x27;</span>, <span class=\"hljs-string\">&#x27;__repr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reversed__&#x27;</span>, <span class=\"hljs-string\">&#x27;__rmul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setattr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__sizeof__&#x27;</span>, <span class=\"hljs-string\">&#x27;__str__&#x27;</span>, <span class=\"hljs-string\">&#x27;__subclasshook__&#x27;</span>, <span class=\"hljs-string\">&#x27;append&#x27;</span>, <span class=\"hljs-string\">&#x27;count&#x27;</span>, <span class=\"hljs-string\">&#x27;extend&#x27;</span>, <span class=\"hljs-string\">&#x27;index&#x27;</span>, <span class=\"hljs-string\">&#x27;insert&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;remove&#x27;</span>, <span class=\"hljs-string\">&#x27;reverse&#x27;</span>, <span class=\"hljs-string\">&#x27;sort&#x27;</span>]<br>&gt;&gt;&gt;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"12、divmod-a-b\"><a href=\"#12、divmod-a-b\" class=\"headerlink\" title=\"12、divmod(a, b)\"></a>12、<code>divmod(a, b)</code></h4><blockquote>\n<p>函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组<code>(a // b, a % b)</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>)<br>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>)<br>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2j</span>,<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">0.5j</span>)<br>((<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">0j</span>), <span class=\"hljs-number\">1.5j</span>)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"13、enumerate-sequence-start-0\"><a href=\"#13、enumerate-sequence-start-0\" class=\"headerlink\" title=\"13、enumerate(sequence, [start=0])\"></a>13、<code>enumerate(sequence, [start=0])</code></h4><blockquote>\n<p>函数用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在<code>for</code> 循环当中。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&gt;&gt;&gt;seasons = [<span class=\"hljs-string\">&#x27;Spring&#x27;</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">enumerate</span>(seasons))<br>[(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;Spring&#x27;</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>)]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">enumerate</span>(seasons, start=<span class=\"hljs-number\">1</span>))       <span class=\"hljs-comment\"># 下标从 1 开始</span><br>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Spring&#x27;</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>), (<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>)]<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"14、eval-函数用来执行一个字符串表达式，并返回表达式的值。\"><a href=\"#14、eval-函数用来执行一个字符串表达式，并返回表达式的值。\" class=\"headerlink\" title=\"14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。\"></a>14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。</h4><h4 id=\"15、execfile-函数可以用来执行一个文件。\"><a href=\"#15、execfile-函数可以用来执行一个文件。\" class=\"headerlink\" title=\"15、execfile()    函数可以用来执行一个文件。\"></a>15、execfile()    函数可以用来执行一个文件。</h4><h4 id=\"16、float-函数用于将整数和字符串转换成浮点数。\"><a href=\"#16、float-函数用于将整数和字符串转换成浮点数。\" class=\"headerlink\" title=\"16、float()    函数用于将整数和字符串转换成浮点数。\"></a>16、float()    函数用于将整数和字符串转换成浮点数。</h4><h4 id=\"17、frozenset-返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\"><a href=\"#17、frozenset-返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\" class=\"headerlink\" title=\"17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\"></a>17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</h4><h4 id=\"18、getattr-函数用于返回一个对象属性值。\"><a href=\"#18、getattr-函数用于返回一个对象属性值。\" class=\"headerlink\" title=\"18、getattr()    函数用于返回一个对象属性值。\"></a>18、getattr()    函数用于返回一个对象属性值。</h4><h4 id=\"19、hash-用于获取取一个对象（字符串或者数值等）的哈希值。\"><a href=\"#19、hash-用于获取取一个对象（字符串或者数值等）的哈希值。\" class=\"headerlink\" title=\"19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。\"></a>19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。</h4><h4 id=\"20、help-函数用于查看函数或模块用途的详细说明。\"><a href=\"#20、help-函数用于查看函数或模块用途的详细说明。\" class=\"headerlink\" title=\"20、help()    函数用于查看函数或模块用途的详细说明。\"></a>20、help()    函数用于查看函数或模块用途的详细说明。</h4><h4 id=\"21、hex-函数用于将-10-进制整数转换成-16-进制整数。\"><a href=\"#21、hex-函数用于将-10-进制整数转换成-16-进制整数。\" class=\"headerlink\" title=\"21、hex()    函数用于将 10 进制整数转换成 16 进制整数。\"></a>21、hex()    函数用于将 10 进制整数转换成 16 进制整数。</h4><h4 id=\"22、id-函数用于获取对象的内存地址。\"><a href=\"#22、id-函数用于获取对象的内存地址。\" class=\"headerlink\" title=\"22、id()    函数用于获取对象的内存地址。\"></a>22、id()    函数用于获取对象的内存地址。</h4><h4 id=\"23、input-输入函数\"><a href=\"#23、input-输入函数\" class=\"headerlink\" title=\"23、input()    输入函数\"></a>23、input()    输入函数</h4><h4 id=\"24、int-函数用于将一个字符串会数字转换为整型。\"><a href=\"#24、int-函数用于将一个字符串会数字转换为整型。\" class=\"headerlink\" title=\"24、int()    函数用于将一个字符串会数字转换为整型。\"></a>24、int()    函数用于将一个字符串会数字转换为整型。</h4><h4 id=\"25、isinstance-函数来判断一个对象是否是一个已知的类型，类似-type-。\"><a href=\"#25、isinstance-函数来判断一个对象是否是一个已知的类型，类似-type-。\" class=\"headerlink\" title=\"25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。\"></a>25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。</h4><p>　　 <strong>isinstance() 与 type() 区别：</strong></p>\n<ul>\n<li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p>\n</li>\n<li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p>\n</li>\n<li><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p>\n</li>\n</ul>\n<h4 id=\"26、len-方法返回对象（字符、列表、元组等）长度或项目个数。\"><a href=\"#26、len-方法返回对象（字符、列表、元组等）长度或项目个数。\" class=\"headerlink\" title=\"26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。\"></a>26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。</h4><h4 id=\"27、list-方法用于将元组转换为列表。\"><a href=\"#27、list-方法用于将元组转换为列表。\" class=\"headerlink\" title=\"27、list()    方法用于将元组转换为列表。\"></a>27、list()    方法用于将元组转换为列表。</h4><h4 id=\"28、locals-函数会以字典类型返回当前位置的全部局部变量。\"><a href=\"#28、locals-函数会以字典类型返回当前位置的全部局部变量。\" class=\"headerlink\" title=\"28、locals()    函数会以字典类型返回当前位置的全部局部变量。\"></a>28、locals()    函数会以字典类型返回当前位置的全部局部变量。</h4><h4 id=\"29、long-函数将数字或字符串转换为一个长整型。\"><a href=\"#29、long-函数将数字或字符串转换为一个长整型。\" class=\"headerlink\" title=\"29、long()    函数将数字或字符串转换为一个长整型。\"></a>29、long()    函数将数字或字符串转换为一个长整型。</h4><h4 id=\"30、max-方法返回给定参数的最大值，参数可以为序列。\"><a href=\"#30、max-方法返回给定参数的最大值，参数可以为序列。\" class=\"headerlink\" title=\"30、max()    方法返回给定参数的最大值，参数可以为序列。\"></a>30、max()    方法返回给定参数的最大值，参数可以为序列。</h4><h4 id=\"31、memoryview-函数返回给定参数的内存查看对象-Momory-view-。\"><a href=\"#31、memoryview-函数返回给定参数的内存查看对象-Momory-view-。\" class=\"headerlink\" title=\"31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。\"></a>31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。</h4><h4 id=\"32、min-方法返回给定参数的最小值，参数可以为序列。\"><a href=\"#32、min-方法返回给定参数的最小值，参数可以为序列。\" class=\"headerlink\" title=\"32、min()    方法返回给定参数的最小值，参数可以为序列。\"></a>32、min()    方法返回给定参数的最小值，参数可以为序列。</h4><h4 id=\"33、oct-函数将一个整数转换成-8-进制字符串。\"><a href=\"#33、oct-函数将一个整数转换成-8-进制字符串。\" class=\"headerlink\" title=\"33、oct()    函数将一个整数转换成 8 进制字符串。\"></a>33、oct()    函数将一个整数转换成 8 进制字符串。</h4><h4 id=\"34、open-函数用于打开一个文件，创建一个-file-对象，相关的方法才可以调用它进行读写。\"><a href=\"#34、open-函数用于打开一个文件，创建一个-file-对象，相关的方法才可以调用它进行读写。\" class=\"headerlink\" title=\"34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。\"></a>34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。</h4><h4 id=\"35、ord-函数与-chr-函数相反，输入字符返回数字\"><a href=\"#35、ord-函数与-chr-函数相反，输入字符返回数字\" class=\"headerlink\" title=\"35、ord()    函数与 chr() 函数相反，输入字符返回数字\"></a>35、ord()    函数与 chr() 函数相反，输入字符返回数字</h4><h4 id=\"36、pow-方法返回-xy（x-的-y-次方）-的值。函数是计算-x-的-y-次方，如果-z-在存在，则再对结果进行取模，其结果等效于-pow-x-y-z\"><a href=\"#36、pow-方法返回-xy（x-的-y-次方）-的值。函数是计算-x-的-y-次方，如果-z-在存在，则再对结果进行取模，其结果等效于-pow-x-y-z\" class=\"headerlink\" title=\"36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z\"></a>36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z</h4><h4 id=\"37、print-输出函数\"><a href=\"#37、print-输出函数\" class=\"headerlink\" title=\"37、print()    输出函数\"></a>37、print()    输出函数</h4><h4 id=\"38、range-函数可创建一个整数列表，一般用在-for-循环中。\"><a href=\"#38、range-函数可创建一个整数列表，一般用在-for-循环中。\" class=\"headerlink\" title=\"38、range()    函数可创建一个整数列表，一般用在 for 循环中。\"></a>38、range()    函数可创建一个整数列表，一般用在 for 循环中。</h4><h4 id=\"39、reload-用于重新载入之前载入的模块。\"><a href=\"#39、reload-用于重新载入之前载入的模块。\" class=\"headerlink\" title=\"39、reload()    用于重新载入之前载入的模块。\"></a>39、reload()    用于重新载入之前载入的模块。</h4><h4 id=\"40、everse-函数用于反向列表中元素。\"><a href=\"#40、everse-函数用于反向列表中元素。\" class=\"headerlink\" title=\"40、everse()    函数用于反向列表中元素。\"></a>40、everse()    函数用于反向列表中元素。</h4><h4 id=\"41、round-方法返回浮点数-x-的四舍五入值。\"><a href=\"#41、round-方法返回浮点数-x-的四舍五入值。\" class=\"headerlink\" title=\"41、round()    方法返回浮点数 x 的四舍五入值。\"></a>41、round()    方法返回浮点数 x 的四舍五入值。</h4><h4 id=\"42、set-函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\"><a href=\"#42、set-函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\" class=\"headerlink\" title=\"42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\"></a>42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</h4><h4 id=\"43、str-函数将对象转化字符串\"><a href=\"#43、str-函数将对象转化字符串\" class=\"headerlink\" title=\"43、str()    函数将对象转化字符串\"></a>43、str()    函数将对象转化字符串</h4><h4 id=\"44、sum-方法对系列进行求和计算。\"><a href=\"#44、sum-方法对系列进行求和计算。\" class=\"headerlink\" title=\"44、sum()    方法对系列进行求和计算。\"></a>44、sum()    方法对系列进行求和计算。</h4><h4 id=\"45、tuple-元组-tuple-函数将列表转换为元组。\"><a href=\"#45、tuple-元组-tuple-函数将列表转换为元组。\" class=\"headerlink\" title=\"45、tuple()   元组 tuple() 函数将列表转换为元组。\"></a>45、tuple()   元组 tuple() 函数将列表转换为元组。</h4><h4 id=\"46、type-返回对象类型。\"><a href=\"#46、type-返回对象类型。\" class=\"headerlink\" title=\"46、type()   返回对象类型。\"></a>46、type()   返回对象类型。</h4><h4 id=\"47、unichr-该函数和-chr-函数功能基本一样，-只不过是返回-unicode-的字符。\"><a href=\"#47、unichr-该函数和-chr-函数功能基本一样，-只不过是返回-unicode-的字符。\" class=\"headerlink\" title=\"47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。\"></a>47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。</h4><h4 id=\"48、vars-函数返回对象-object-的属性和属性值的字典对象。\"><a href=\"#48、vars-函数返回对象-object-的属性和属性值的字典对象。\" class=\"headerlink\" title=\"48、vars()    函数返回对象 object 的属性和属性值的字典对象。\"></a>48、vars()    函数返回对象 object 的属性和属性值的字典对象。</h4><h4 id=\"49、xrange-函数用法与-range-完全相同，所不同的是生成的不是一个数组，而是一个生成器。\"><a href=\"#49、xrange-函数用法与-range-完全相同，所不同的是生成的不是一个数组，而是一个生成器。\" class=\"headerlink\" title=\"49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。\"></a>49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。</h4><h4 id=\"50、import-函数用于动态加载类和函数-。如果一个模块经常变化就可以使用-import-来动态载入。\"><a href=\"#50、import-函数用于动态加载类和函数-。如果一个模块经常变化就可以使用-import-来动态载入。\" class=\"headerlink\" title=\"50、import()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 import() 来动态载入。\"></a>50、<strong>import</strong>()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 <strong>import</strong>() 来动态载入。</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"python内置函数\"><a href=\"#python内置函数\" class=\"headerlink\" title=\"python内置函数\"></a>python内置函数</h3><blockquote>\n<p>Python 内置函数就是 python 标准库里（语言自身携带的）函数（公共函数）。</p>\n</blockquote>\n<p>那么，接下来就来谈一谈 python 里的内置函数</p>\n<h4 id=\"1、abs\"><a href=\"#1、abs\" class=\"headerlink\" title=\"1、abs()\"></a>1、<code>abs()</code></h4><blockquote>\n<p>此函数返回数字的绝对值。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">a = <span class=\"hljs-number\">5</span><br>b = -<span class=\"hljs-number\">10</span><br>print(<span class=\"hljs-built_in\">abs</span>(a))  <span class=\"hljs-comment\">#输出3</span><br>print(<span class=\"hljs-built_in\">abs</span>(b))  <span class=\"hljs-comment\">#输出5</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2、all\"><a href=\"#2、all\" class=\"headerlink\" title=\"2、all()\"></a>2、<code>all()</code></h4><blockquote>\n<p>此函数用于判断给定的可迭代参数 <code>iterable</code> 中的所有元素是否都不为 <code>0</code>、都不为 <code>False</code> 或者 <code>iterable</code> 都 为空,如果是返回 <code>True</code>, 否则返回 <code>False</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))   <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))          <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>)))   <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)))          <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">all</span>([]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">all</span>(()))  <span class=\"hljs-comment\"># True</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"3、any\"><a href=\"#3、any\" class=\"headerlink\" title=\"3、any()\"></a>3、<code>any()</code></h4><blockquote>\n<p>函数用于判断给定的可迭代参数 <code>iterable</code> 是否全部为空对象,如果都为空、都为 0、或者都为 <code>false</code>，则返回 <code>False</code>,如果不都为空、不都为 <code>0</code>、不都为 <code>false</code>，则返回 <code>True</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))  <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]))   <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))          <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>)))   <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)))          <span class=\"hljs-comment\"># True</span><br>print(<span class=\"hljs-built_in\">any</span>([]))  <span class=\"hljs-comment\"># False</span><br>print(<span class=\"hljs-built_in\">any</span>(()))  <span class=\"hljs-comment\"># False</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"4、bin\"><a href=\"#4、bin\" class=\"headerlink\" title=\"4、bin()\"></a>4、<code>bin()</code></h4><blockquote>\n<p>返回一个整数 <code>int</code> 或者长整数 <code>long int</code> 的二进制表示。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-number\">10</span>))  <span class=\"hljs-comment\">#0b1010</span><br>print(<span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-number\">20</span>))  <span class=\"hljs-comment\">#0b10100</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"5、bool\"><a href=\"#5、bool\" class=\"headerlink\" title=\"5、bool()\"></a>5、<code>bool()</code></h4><blockquote>\n<p>函数用于将给定参数转换为布尔类型，如果没有参数，返回 <code>False</code>。</p>\n</blockquote>\n<ul>\n<li><p>传入布尔类型时，按原值返回</p>\n</li>\n<li><p>参数如果缺省，则返回 <code>False</code></p>\n</li>\n<li><p>传入字符串时，空字符串返回 <code>False</code>，否则返回 <code>True</code></p>\n</li>\n<li><p>传入数值时，0 值返回 <code>False</code>，否则返回 <code>True</code></p>\n</li>\n<li><p>传入元组、列表、字典等对象时，元素个数为空返回 <code>False</code>，否则返回 <code>True</code>.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">bool</span>())  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-literal\">True</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-string\">&quot;&quot;</span>))  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-string\">&quot;123&quot;</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-number\">0</span>))  <span class=\"hljs-comment\">#False</span><br>print(<span class=\"hljs-built_in\">bool</span>(<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#True</span><br>print(<span class=\"hljs-built_in\">bool</span>([])) <span class=\"hljs-comment\">#False  若元祖和字典为空时 也为False ，不为空 则为True</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"6、chr\"><a href=\"#6、chr\" class=\"headerlink\" title=\"6、chr()\"></a>6、<code>chr()</code></h4><blockquote>\n<p>用一个范围在 <code>range(256)</code>内的（就是 <code>0～255</code>）整数作参数，返回一个对应的字符。(<strong>只能输入数字</strong>)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">65</span>))   <span class=\"hljs-comment\">#A</span><br>print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">97</span>))   <span class=\"hljs-comment\">#a</span><br>print(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-number\">100</span>))  <span class=\"hljs-comment\">#d</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"7、cmp-x-y\"><a href=\"#7、cmp-x-y\" class=\"headerlink\" title=\"7、cmp(x,y)\"></a>7、<code>cmp(x,y)</code></h4><blockquote>\n<p>函数用于比较 2 个对象，如果<code>x &lt;y</code>返回<code>-1</code>, 如果 <code>x == y</code> 返回 <code>0</code>, 如果 <code>x&gt; y</code>返回 1。（<code>python3</code> 已经删除了）</p>\n</blockquote>\n<h4 id=\"8、compile\"><a href=\"#8、compile\" class=\"headerlink\" title=\"8、compile()\"></a>8、<code>compile()</code></h4><blockquote>\n<p> 函数将一个字符串编译为字节代码。语法：<code>compile(source, filename, mode[, flags[, dont_inherit]])</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> re<br>pattern=re.<span class=\"hljs-built_in\">compile</span>(<span class=\"hljs-string\">&#x27;[a-zA-Z]&#x27;</span>)<br>result=pattern.findall(<span class=\"hljs-string\">&#x27;as3SiOPdj#@23awe&#x27;</span>)<br>print(result)<br></code></pre></td></tr></table></figure>\n<h4 id=\"9、complex-real-imag\"><a href=\"#9、complex-real-imag\" class=\"headerlink\" title=\"9、complex(real,imag)\"></a>9、<code>complex(real,imag)</code></h4><blockquote>\n<p>函数用于创建一个值为 <code>real + imag * j</code> 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>))  <span class=\"hljs-comment\">#(1 + 2j)</span><br>print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#(1 + 0j)</span><br>print(<span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-string\">&quot;3&quot;</span>)) <span class=\"hljs-comment\">#(3+0j)</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"10、dict-kwarg\"><a href=\"#10、dict-kwarg\" class=\"headerlink\" title=\"10、dict(**kwarg)\"></a>10、<code>dict(**kwarg)</code></h4><blockquote>\n<p>返回一个字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">dict</span>()                        <span class=\"hljs-comment\"># 创建空字典</span><br>&#123;&#125;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>(a=<span class=\"hljs-string\">&#x27;a&#x27;</span>, b=<span class=\"hljs-string\">&#x27;b&#x27;</span>, t=<span class=\"hljs-string\">&#x27;t&#x27;</span>)     <span class=\"hljs-comment\"># 传入关键字</span><br>&#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>: <span class=\"hljs-string\">&#x27;t&#x27;</span>&#125;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>(<span class=\"hljs-built_in\">zip</span>([<span class=\"hljs-string\">&#x27;one&#x27;</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>, <span class=\"hljs-string\">&#x27;three&#x27;</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))   <span class=\"hljs-comment\"># 映射函数方式来构造字典</span><br>&#123;<span class=\"hljs-string\">&#x27;three&#x27;</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;one&#x27;</span>: <span class=\"hljs-number\">1</span>&#125; <br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dict</span>([(<span class=\"hljs-string\">&#x27;one&#x27;</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&#x27;two&#x27;</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-string\">&#x27;three&#x27;</span>, <span class=\"hljs-number\">3</span>)])    <span class=\"hljs-comment\"># 可迭代对象方式来构造字典</span><br>&#123;<span class=\"hljs-string\">&#x27;three&#x27;</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;two&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;one&#x27;</span>: <span class=\"hljs-number\">1</span>&#125;<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"11、dir-object\"><a href=\"#11、dir-object\" class=\"headerlink\" title=\"11、dir([object])\"></a>11、<code>dir([object])</code></h4><blockquote>\n<p>函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；</p>\n<p>带参数时，返回参数的属性、方法列表。</p>\n<p>如果参数包含方法<code>__dir__()</code>，该方法将被调用。</p>\n<p>如果参数不包含<code>__dir__()</code>，该方法将最大限度地收集参数信息。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">dir</span>()   <span class=\"hljs-comment\">#  获得当前模块的属性列表</span><br>[<span class=\"hljs-string\">&#x27;__builtins__&#x27;</span>, <span class=\"hljs-string\">&#x27;__doc__&#x27;</span>, <span class=\"hljs-string\">&#x27;__name__&#x27;</span>, <span class=\"hljs-string\">&#x27;__package__&#x27;</span>, <span class=\"hljs-string\">&#x27;arr&#x27;</span>, <span class=\"hljs-string\">&#x27;myslice&#x27;</span>]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>([ ])    <span class=\"hljs-comment\"># 查看列表的方法</span><br>[<span class=\"hljs-string\">&#x27;__add__&#x27;</span>, <span class=\"hljs-string\">&#x27;__class__&#x27;</span>, <span class=\"hljs-string\">&#x27;__contains__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delattr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__delslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__doc__&#x27;</span>, <span class=\"hljs-string\">&#x27;__eq__&#x27;</span>, <span class=\"hljs-string\">&#x27;__format__&#x27;</span>, <span class=\"hljs-string\">&#x27;__ge__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getattribute__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__getslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__gt__&#x27;</span>, <span class=\"hljs-string\">&#x27;__hash__&#x27;</span>, <span class=\"hljs-string\">&#x27;__iadd__&#x27;</span>, <span class=\"hljs-string\">&#x27;__imul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__init__&#x27;</span>, <span class=\"hljs-string\">&#x27;__iter__&#x27;</span>, <span class=\"hljs-string\">&#x27;__le__&#x27;</span>, <span class=\"hljs-string\">&#x27;__len__&#x27;</span>, <span class=\"hljs-string\">&#x27;__lt__&#x27;</span>, <span class=\"hljs-string\">&#x27;__mul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__ne__&#x27;</span>, <span class=\"hljs-string\">&#x27;__new__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reduce__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reduce_ex__&#x27;</span>, <span class=\"hljs-string\">&#x27;__repr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__reversed__&#x27;</span>, <span class=\"hljs-string\">&#x27;__rmul__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setattr__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setitem__&#x27;</span>, <span class=\"hljs-string\">&#x27;__setslice__&#x27;</span>, <span class=\"hljs-string\">&#x27;__sizeof__&#x27;</span>, <span class=\"hljs-string\">&#x27;__str__&#x27;</span>, <span class=\"hljs-string\">&#x27;__subclasshook__&#x27;</span>, <span class=\"hljs-string\">&#x27;append&#x27;</span>, <span class=\"hljs-string\">&#x27;count&#x27;</span>, <span class=\"hljs-string\">&#x27;extend&#x27;</span>, <span class=\"hljs-string\">&#x27;index&#x27;</span>, <span class=\"hljs-string\">&#x27;insert&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;remove&#x27;</span>, <span class=\"hljs-string\">&#x27;reverse&#x27;</span>, <span class=\"hljs-string\">&#x27;sort&#x27;</span>]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"12、divmod-a-b\"><a href=\"#12、divmod-a-b\" class=\"headerlink\" title=\"12、divmod(a, b)\"></a>12、<code>divmod(a, b)</code></h4><blockquote>\n<p>函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组<code>(a // b, a % b)</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&gt;&gt;&gt;<span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>)<br>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>)<br>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2j</span>,<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">0.5j</span>)<br>((<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">0j</span>), <span class=\"hljs-number\">1.5j</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"13、enumerate-sequence-start-0\"><a href=\"#13、enumerate-sequence-start-0\" class=\"headerlink\" title=\"13、enumerate(sequence, [start=0])\"></a>13、<code>enumerate(sequence, [start=0])</code></h4><blockquote>\n<p>函数用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在<code>for</code> 循环当中。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&gt;&gt;&gt;seasons = [<span class=\"hljs-string\">&#x27;Spring&#x27;</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">enumerate</span>(seasons))<br>[(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;Spring&#x27;</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>)]<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">enumerate</span>(seasons, start=<span class=\"hljs-number\">1</span>))       <span class=\"hljs-comment\"># 下标从 1 开始</span><br>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Spring&#x27;</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;Summer&#x27;</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;Fall&#x27;</span>), (<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;Winter&#x27;</span>)]<br></code></pre></td></tr></table></figure>\n<h4 id=\"14、eval-函数用来执行一个字符串表达式，并返回表达式的值。\"><a href=\"#14、eval-函数用来执行一个字符串表达式，并返回表达式的值。\" class=\"headerlink\" title=\"14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。\"></a>14、eval()    函数用来执行一个字符串表达式，并返回表达式的值。</h4><h4 id=\"15、execfile-函数可以用来执行一个文件。\"><a href=\"#15、execfile-函数可以用来执行一个文件。\" class=\"headerlink\" title=\"15、execfile()    函数可以用来执行一个文件。\"></a>15、execfile()    函数可以用来执行一个文件。</h4><h4 id=\"16、float-函数用于将整数和字符串转换成浮点数。\"><a href=\"#16、float-函数用于将整数和字符串转换成浮点数。\" class=\"headerlink\" title=\"16、float()    函数用于将整数和字符串转换成浮点数。\"></a>16、float()    函数用于将整数和字符串转换成浮点数。</h4><h4 id=\"17、frozenset-返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\"><a href=\"#17、frozenset-返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\" class=\"headerlink\" title=\"17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。\"></a>17、frozenset()    返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</h4><h4 id=\"18、getattr-函数用于返回一个对象属性值。\"><a href=\"#18、getattr-函数用于返回一个对象属性值。\" class=\"headerlink\" title=\"18、getattr()    函数用于返回一个对象属性值。\"></a>18、getattr()    函数用于返回一个对象属性值。</h4><h4 id=\"19、hash-用于获取取一个对象（字符串或者数值等）的哈希值。\"><a href=\"#19、hash-用于获取取一个对象（字符串或者数值等）的哈希值。\" class=\"headerlink\" title=\"19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。\"></a>19、hash()    用于获取取一个对象（字符串或者数值等）的哈希值。</h4><h4 id=\"20、help-函数用于查看函数或模块用途的详细说明。\"><a href=\"#20、help-函数用于查看函数或模块用途的详细说明。\" class=\"headerlink\" title=\"20、help()    函数用于查看函数或模块用途的详细说明。\"></a>20、help()    函数用于查看函数或模块用途的详细说明。</h4><h4 id=\"21、hex-函数用于将-10-进制整数转换成-16-进制整数。\"><a href=\"#21、hex-函数用于将-10-进制整数转换成-16-进制整数。\" class=\"headerlink\" title=\"21、hex()    函数用于将 10 进制整数转换成 16 进制整数。\"></a>21、hex()    函数用于将 10 进制整数转换成 16 进制整数。</h4><h4 id=\"22、id-函数用于获取对象的内存地址。\"><a href=\"#22、id-函数用于获取对象的内存地址。\" class=\"headerlink\" title=\"22、id()    函数用于获取对象的内存地址。\"></a>22、id()    函数用于获取对象的内存地址。</h4><h4 id=\"23、input-输入函数\"><a href=\"#23、input-输入函数\" class=\"headerlink\" title=\"23、input()    输入函数\"></a>23、input()    输入函数</h4><h4 id=\"24、int-函数用于将一个字符串会数字转换为整型。\"><a href=\"#24、int-函数用于将一个字符串会数字转换为整型。\" class=\"headerlink\" title=\"24、int()    函数用于将一个字符串会数字转换为整型。\"></a>24、int()    函数用于将一个字符串会数字转换为整型。</h4><h4 id=\"25、isinstance-函数来判断一个对象是否是一个已知的类型，类似-type-。\"><a href=\"#25、isinstance-函数来判断一个对象是否是一个已知的类型，类似-type-。\" class=\"headerlink\" title=\"25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。\"></a>25、isinstance()    函数来判断一个对象是否是一个已知的类型，类似 type()。</h4><p>　　 <strong>isinstance() 与 type() 区别：</strong></p>\n<ul>\n<li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p>\n</li>\n<li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p>\n</li>\n<li><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p>\n</li>\n</ul>\n<h4 id=\"26、len-方法返回对象（字符、列表、元组等）长度或项目个数。\"><a href=\"#26、len-方法返回对象（字符、列表、元组等）长度或项目个数。\" class=\"headerlink\" title=\"26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。\"></a>26、len()    方法返回对象（字符、列表、元组等）长度或项目个数。</h4><h4 id=\"27、list-方法用于将元组转换为列表。\"><a href=\"#27、list-方法用于将元组转换为列表。\" class=\"headerlink\" title=\"27、list()    方法用于将元组转换为列表。\"></a>27、list()    方法用于将元组转换为列表。</h4><h4 id=\"28、locals-函数会以字典类型返回当前位置的全部局部变量。\"><a href=\"#28、locals-函数会以字典类型返回当前位置的全部局部变量。\" class=\"headerlink\" title=\"28、locals()    函数会以字典类型返回当前位置的全部局部变量。\"></a>28、locals()    函数会以字典类型返回当前位置的全部局部变量。</h4><h4 id=\"29、long-函数将数字或字符串转换为一个长整型。\"><a href=\"#29、long-函数将数字或字符串转换为一个长整型。\" class=\"headerlink\" title=\"29、long()    函数将数字或字符串转换为一个长整型。\"></a>29、long()    函数将数字或字符串转换为一个长整型。</h4><h4 id=\"30、max-方法返回给定参数的最大值，参数可以为序列。\"><a href=\"#30、max-方法返回给定参数的最大值，参数可以为序列。\" class=\"headerlink\" title=\"30、max()    方法返回给定参数的最大值，参数可以为序列。\"></a>30、max()    方法返回给定参数的最大值，参数可以为序列。</h4><h4 id=\"31、memoryview-函数返回给定参数的内存查看对象-Momory-view-。\"><a href=\"#31、memoryview-函数返回给定参数的内存查看对象-Momory-view-。\" class=\"headerlink\" title=\"31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。\"></a>31、memoryview()    函数返回给定参数的内存查看对象 (Momory view)。</h4><h4 id=\"32、min-方法返回给定参数的最小值，参数可以为序列。\"><a href=\"#32、min-方法返回给定参数的最小值，参数可以为序列。\" class=\"headerlink\" title=\"32、min()    方法返回给定参数的最小值，参数可以为序列。\"></a>32、min()    方法返回给定参数的最小值，参数可以为序列。</h4><h4 id=\"33、oct-函数将一个整数转换成-8-进制字符串。\"><a href=\"#33、oct-函数将一个整数转换成-8-进制字符串。\" class=\"headerlink\" title=\"33、oct()    函数将一个整数转换成 8 进制字符串。\"></a>33、oct()    函数将一个整数转换成 8 进制字符串。</h4><h4 id=\"34、open-函数用于打开一个文件，创建一个-file-对象，相关的方法才可以调用它进行读写。\"><a href=\"#34、open-函数用于打开一个文件，创建一个-file-对象，相关的方法才可以调用它进行读写。\" class=\"headerlink\" title=\"34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。\"></a>34、open()    函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。</h4><h4 id=\"35、ord-函数与-chr-函数相反，输入字符返回数字\"><a href=\"#35、ord-函数与-chr-函数相反，输入字符返回数字\" class=\"headerlink\" title=\"35、ord()    函数与 chr() 函数相反，输入字符返回数字\"></a>35、ord()    函数与 chr() 函数相反，输入字符返回数字</h4><h4 id=\"36、pow-方法返回-xy（x-的-y-次方）-的值。函数是计算-x-的-y-次方，如果-z-在存在，则再对结果进行取模，其结果等效于-pow-x-y-z\"><a href=\"#36、pow-方法返回-xy（x-的-y-次方）-的值。函数是计算-x-的-y-次方，如果-z-在存在，则再对结果进行取模，其结果等效于-pow-x-y-z\" class=\"headerlink\" title=\"36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z\"></a>36、pow()    方法返回 xy（x 的 y 次方） 的值。函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z</h4><h4 id=\"37、print-输出函数\"><a href=\"#37、print-输出函数\" class=\"headerlink\" title=\"37、print()    输出函数\"></a>37、print()    输出函数</h4><h4 id=\"38、range-函数可创建一个整数列表，一般用在-for-循环中。\"><a href=\"#38、range-函数可创建一个整数列表，一般用在-for-循环中。\" class=\"headerlink\" title=\"38、range()    函数可创建一个整数列表，一般用在 for 循环中。\"></a>38、range()    函数可创建一个整数列表，一般用在 for 循环中。</h4><h4 id=\"39、reload-用于重新载入之前载入的模块。\"><a href=\"#39、reload-用于重新载入之前载入的模块。\" class=\"headerlink\" title=\"39、reload()    用于重新载入之前载入的模块。\"></a>39、reload()    用于重新载入之前载入的模块。</h4><h4 id=\"40、everse-函数用于反向列表中元素。\"><a href=\"#40、everse-函数用于反向列表中元素。\" class=\"headerlink\" title=\"40、everse()    函数用于反向列表中元素。\"></a>40、everse()    函数用于反向列表中元素。</h4><h4 id=\"41、round-方法返回浮点数-x-的四舍五入值。\"><a href=\"#41、round-方法返回浮点数-x-的四舍五入值。\" class=\"headerlink\" title=\"41、round()    方法返回浮点数 x 的四舍五入值。\"></a>41、round()    方法返回浮点数 x 的四舍五入值。</h4><h4 id=\"42、set-函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\"><a href=\"#42、set-函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\" class=\"headerlink\" title=\"42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\"></a>42、set()    函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</h4><h4 id=\"43、str-函数将对象转化字符串\"><a href=\"#43、str-函数将对象转化字符串\" class=\"headerlink\" title=\"43、str()    函数将对象转化字符串\"></a>43、str()    函数将对象转化字符串</h4><h4 id=\"44、sum-方法对系列进行求和计算。\"><a href=\"#44、sum-方法对系列进行求和计算。\" class=\"headerlink\" title=\"44、sum()    方法对系列进行求和计算。\"></a>44、sum()    方法对系列进行求和计算。</h4><h4 id=\"45、tuple-元组-tuple-函数将列表转换为元组。\"><a href=\"#45、tuple-元组-tuple-函数将列表转换为元组。\" class=\"headerlink\" title=\"45、tuple()   元组 tuple() 函数将列表转换为元组。\"></a>45、tuple()   元组 tuple() 函数将列表转换为元组。</h4><h4 id=\"46、type-返回对象类型。\"><a href=\"#46、type-返回对象类型。\" class=\"headerlink\" title=\"46、type()   返回对象类型。\"></a>46、type()   返回对象类型。</h4><h4 id=\"47、unichr-该函数和-chr-函数功能基本一样，-只不过是返回-unicode-的字符。\"><a href=\"#47、unichr-该函数和-chr-函数功能基本一样，-只不过是返回-unicode-的字符。\" class=\"headerlink\" title=\"47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。\"></a>47、unichr()    该函数和 chr() 函数功能基本一样， 只不过是返回 unicode 的字符。</h4><h4 id=\"48、vars-函数返回对象-object-的属性和属性值的字典对象。\"><a href=\"#48、vars-函数返回对象-object-的属性和属性值的字典对象。\" class=\"headerlink\" title=\"48、vars()    函数返回对象 object 的属性和属性值的字典对象。\"></a>48、vars()    函数返回对象 object 的属性和属性值的字典对象。</h4><h4 id=\"49、xrange-函数用法与-range-完全相同，所不同的是生成的不是一个数组，而是一个生成器。\"><a href=\"#49、xrange-函数用法与-range-完全相同，所不同的是生成的不是一个数组，而是一个生成器。\" class=\"headerlink\" title=\"49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。\"></a>49、xrange()    函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。</h4><h4 id=\"50、import-函数用于动态加载类和函数-。如果一个模块经常变化就可以使用-import-来动态载入。\"><a href=\"#50、import-函数用于动态加载类和函数-。如果一个模块经常变化就可以使用-import-来动态载入。\" class=\"headerlink\" title=\"50、import()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 import() 来动态载入。\"></a>50、<strong>import</strong>()    函数用于动态加载类和函数 。如果一个模块经常变化就可以使用 <strong>import</strong>() 来动态载入。</h4>"},{"title":"python匿名函数","date":"2020-06-06T03:14:42.000Z","_content":"\n## 语法\n\n匿名函数的另一个别称是`lambda表达式`\n\nlambda表达式的语法：\n\n```python\nlambda argument_list: expression\n```\n- `argument_list`是参数列表。它的结构与Python中函数(`function`)的参数列表是一样的。\n- `expression`是一个关于参数的表达式。表达式中出现的参数需要在`argument_list`中有定义，并且表达式只能是单行的。\n\n## 示例\n\n```python\n# lambda x: x*x\n# 这个lambda表达式实际等同于：\n# def f(x):\n#   return x*x\nIn [15]: f = lambda x: x * x\n\nIn [16]: f\nOut[16]: <function __main__.<lambda>(x)>\n\nIn [17]: f(5)\nOut[17]: 25\n    \nIn [24]: x2 = lambda *args: [x**2 for x in list(args)]\n\nIn [25]: x2(1, 2, 3, 4, 5, 6, 7)\nOut[25]: [1, 4, 9, 16, 25, 36, 49]\n```\n\n- 匿名函数作为参数\n\n  ```python\n  In [7]: s = [x for x in range(10)]\n  \n  In [8]: s\n  Out[8]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  In [9]: s.sort(key=lambda x : abs(x-5))\n  \n  In [10]: s\n  Out[10]: [5, 4, 6, 3, 7, 2, 8, 1, 9, 0]\n  ```\n\n  ```python\n  In [32]: stus = [\n  ...:     {\"name\": \"zhangsan\", \"age\": 18},\n  ...:     {\"name\": \"lisi\", \"age\": 19},\n  ...:     {\"name\": \"wangwu\", \"age\": 17}\n  ...: ]\n  \n  In [33]: stus.sort(key=lambda x : x[\"name\"])\n  \n  In [34]: stus\n  Out[34]:\n  [{'name': 'lisi', 'age': 19},\n   {'name': 'wangwu', 'age': 17},\n   {'name': 'zhangsan', 'age': 18}]\n  \n  In [35]: stus.sort(key=lambda x : x[\"age\"])\n  \n  In [36]: stus\n  Out[36]:\n  [{'name': 'wangwu', 'age': 17},\n   {'name': 'zhangsan', 'age': 18},\n   {'name': 'lisi', 'age': 19}]\n  ```\n","source":"_posts/python函数-匿名函数.md","raw":"---\ntitle: python匿名函数\ndate: 2020-06-06 11:14:42\ncategories:\n- 技术\n- python\n- 基础\ntags:\n- lambda\n- 匿名函数\n---\n\n## 语法\n\n匿名函数的另一个别称是`lambda表达式`\n\nlambda表达式的语法：\n\n```python\nlambda argument_list: expression\n```\n- `argument_list`是参数列表。它的结构与Python中函数(`function`)的参数列表是一样的。\n- `expression`是一个关于参数的表达式。表达式中出现的参数需要在`argument_list`中有定义，并且表达式只能是单行的。\n\n## 示例\n\n```python\n# lambda x: x*x\n# 这个lambda表达式实际等同于：\n# def f(x):\n#   return x*x\nIn [15]: f = lambda x: x * x\n\nIn [16]: f\nOut[16]: <function __main__.<lambda>(x)>\n\nIn [17]: f(5)\nOut[17]: 25\n    \nIn [24]: x2 = lambda *args: [x**2 for x in list(args)]\n\nIn [25]: x2(1, 2, 3, 4, 5, 6, 7)\nOut[25]: [1, 4, 9, 16, 25, 36, 49]\n```\n\n- 匿名函数作为参数\n\n  ```python\n  In [7]: s = [x for x in range(10)]\n  \n  In [8]: s\n  Out[8]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  In [9]: s.sort(key=lambda x : abs(x-5))\n  \n  In [10]: s\n  Out[10]: [5, 4, 6, 3, 7, 2, 8, 1, 9, 0]\n  ```\n\n  ```python\n  In [32]: stus = [\n  ...:     {\"name\": \"zhangsan\", \"age\": 18},\n  ...:     {\"name\": \"lisi\", \"age\": 19},\n  ...:     {\"name\": \"wangwu\", \"age\": 17}\n  ...: ]\n  \n  In [33]: stus.sort(key=lambda x : x[\"name\"])\n  \n  In [34]: stus\n  Out[34]:\n  [{'name': 'lisi', 'age': 19},\n   {'name': 'wangwu', 'age': 17},\n   {'name': 'zhangsan', 'age': 18}]\n  \n  In [35]: stus.sort(key=lambda x : x[\"age\"])\n  \n  In [36]: stus\n  Out[36]:\n  [{'name': 'wangwu', 'age': 17},\n   {'name': 'zhangsan', 'age': 18},\n   {'name': 'lisi', 'age': 19}]\n  ```\n","slug":"python函数-匿名函数","published":1,"updated":"2021-01-23T15:01:10.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuc8001gjjln6c3k4gao","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>匿名函数的另一个别称是<code>lambda表达式</code></p>\n<p>lambda表达式的语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">lambda</span> argument_list: expression<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><code>argument_list</code>是参数列表。它的结构与Python中函数(<code>function</code>)的参数列表是一样的。</li>\n<li><code>expression</code>是一个关于参数的表达式。表达式中出现的参数需要在<code>argument_list</code>中有定义，并且表达式只能是单行的。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># lambda x: x*x</span><br><span class=\"hljs-comment\"># 这个lambda表达式实际等同于：</span><br><span class=\"hljs-comment\"># def f(x):</span><br><span class=\"hljs-comment\">#   return x*x</span><br>In [<span class=\"hljs-number\">15</span>]: f = <span class=\"hljs-keyword\">lambda</span> x: x * x<br><br>In [<span class=\"hljs-number\">16</span>]: f<br>Out[<span class=\"hljs-number\">16</span>]: &lt;function __main__.&lt;<span class=\"hljs-keyword\">lambda</span>&gt;(x)&gt;<br><br>In [<span class=\"hljs-number\">17</span>]: f(<span class=\"hljs-number\">5</span>)<br>Out[<span class=\"hljs-number\">17</span>]: <span class=\"hljs-number\">25</span><br>    <br>In [<span class=\"hljs-number\">24</span>]: x2 = <span class=\"hljs-keyword\">lambda</span> *args: [x**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">list</span>(args)]<br><br>In [<span class=\"hljs-number\">25</span>]: x2(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>)<br>Out[<span class=\"hljs-number\">25</span>]: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">49</span>]<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p>匿名函数作为参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">7</span>]: s = [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>)]<br><br>In [<span class=\"hljs-number\">8</span>]: s<br>Out[<span class=\"hljs-number\">8</span>]: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]<br><br>In [<span class=\"hljs-number\">9</span>]: s.sort(key=<span class=\"hljs-keyword\">lambda</span> x : <span class=\"hljs-built_in\">abs</span>(x-<span class=\"hljs-number\">5</span>))<br><br>In [<span class=\"hljs-number\">10</span>]: s<br>Out[<span class=\"hljs-number\">10</span>]: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>]<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">32</span>]: stus = [<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>&#125;,<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;lisi&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">19</span>&#125;,<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;wangwu&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">17</span>&#125;<br>...: ]<br><br>In [<span class=\"hljs-number\">33</span>]: stus.sort(key=<span class=\"hljs-keyword\">lambda</span> x : x[<span class=\"hljs-string\">&quot;name&quot;</span>])<br><br>In [<span class=\"hljs-number\">34</span>]: stus<br>Out[<span class=\"hljs-number\">34</span>]:<br>[&#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">19</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;wangwu&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">17</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">18</span>&#125;]<br><br>In [<span class=\"hljs-number\">35</span>]: stus.sort(key=<span class=\"hljs-keyword\">lambda</span> x : x[<span class=\"hljs-string\">&quot;age&quot;</span>])<br><br>In [<span class=\"hljs-number\">36</span>]: stus<br>Out[<span class=\"hljs-number\">36</span>]:<br>[&#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;wangwu&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">17</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">18</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">19</span>&#125;]<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>匿名函数的另一个别称是<code>lambda表达式</code></p>\n<p>lambda表达式的语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">lambda</span> argument_list: expression<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>argument_list</code>是参数列表。它的结构与Python中函数(<code>function</code>)的参数列表是一样的。</li>\n<li><code>expression</code>是一个关于参数的表达式。表达式中出现的参数需要在<code>argument_list</code>中有定义，并且表达式只能是单行的。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># lambda x: x*x</span><br><span class=\"hljs-comment\"># 这个lambda表达式实际等同于：</span><br><span class=\"hljs-comment\"># def f(x):</span><br><span class=\"hljs-comment\">#   return x*x</span><br>In [<span class=\"hljs-number\">15</span>]: f = <span class=\"hljs-keyword\">lambda</span> x: x * x<br><br>In [<span class=\"hljs-number\">16</span>]: f<br>Out[<span class=\"hljs-number\">16</span>]: &lt;function __main__.&lt;<span class=\"hljs-keyword\">lambda</span>&gt;(x)&gt;<br><br>In [<span class=\"hljs-number\">17</span>]: f(<span class=\"hljs-number\">5</span>)<br>Out[<span class=\"hljs-number\">17</span>]: <span class=\"hljs-number\">25</span><br>    <br>In [<span class=\"hljs-number\">24</span>]: x2 = <span class=\"hljs-keyword\">lambda</span> *args: [x**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">list</span>(args)]<br><br>In [<span class=\"hljs-number\">25</span>]: x2(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>)<br>Out[<span class=\"hljs-number\">25</span>]: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">49</span>]<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>匿名函数作为参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">7</span>]: s = [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>)]<br><br>In [<span class=\"hljs-number\">8</span>]: s<br>Out[<span class=\"hljs-number\">8</span>]: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]<br><br>In [<span class=\"hljs-number\">9</span>]: s.sort(key=<span class=\"hljs-keyword\">lambda</span> x : <span class=\"hljs-built_in\">abs</span>(x-<span class=\"hljs-number\">5</span>))<br><br>In [<span class=\"hljs-number\">10</span>]: s<br>Out[<span class=\"hljs-number\">10</span>]: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>]<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">32</span>]: stus = [<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">18</span>&#125;,<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;lisi&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">19</span>&#125;,<br>...:     &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;wangwu&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">17</span>&#125;<br>...: ]<br><br>In [<span class=\"hljs-number\">33</span>]: stus.sort(key=<span class=\"hljs-keyword\">lambda</span> x : x[<span class=\"hljs-string\">&quot;name&quot;</span>])<br><br>In [<span class=\"hljs-number\">34</span>]: stus<br>Out[<span class=\"hljs-number\">34</span>]:<br>[&#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">19</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;wangwu&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">17</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">18</span>&#125;]<br><br>In [<span class=\"hljs-number\">35</span>]: stus.sort(key=<span class=\"hljs-keyword\">lambda</span> x : x[<span class=\"hljs-string\">&quot;age&quot;</span>])<br><br>In [<span class=\"hljs-number\">36</span>]: stus<br>Out[<span class=\"hljs-number\">36</span>]:<br>[&#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;wangwu&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">17</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">18</span>&#125;,<br> &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">19</span>&#125;]<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"python变量作用域","date":"2020-06-06T03:10:17.000Z","_content":"\n### 变量的作用域\n\n- 在Python程序中创建、改变、查找变量名时，都是在一个保存变量名的空间中进行，我们称之为命名空间，也被称之为作用域。\n\n- Python的作用域是静态的，在源代码中变量名被赋值的位置决定了该变量能被访问的范围。即Python变量的作用域由变量所在源代码中的位置决定。\n\n### 作用域的产生\n\n- 只有当变量在`Module(模块)`、`Class(类)`、`def(函数)`中定义的时候，才会有作用域的概念。\n\n- 在作用域中定义的变量，一般只在该作用域中有效。\n\n- 在`if-elif-else`、`for-else`、`while`、`try-except/try-finally`等关键字的语句块中并不会产生作用域\n\n#### 代码分析1\n\n```python\ndef func():\n    variable = 100\n    print(variable)\nprint(variable)\n```\n\n> 代码执行到第二个`print(variable)`时会报错 `NameError: name 'variable' is not defined`\n>\n>变量`variable`只在函数`func()`的定义域内有效！\n\n#### 代码分析2\n\n```python\nif True:\n    variable = 100\n    print(variable)\nprint(\"******\")\nprint(variable)\n```\n\n输出结果为：\n\n```shell\n100     \n******\n100\n```\n\n程序没有报错，因为if语句不产生作用域\n\n### 变量作用域的类型\n\n- L(local)局部作用域\n  - √ 函数内的命名空间\n- E(enclosing)嵌套作用域\n  - √ 外部嵌套函数的命名空间\n- G(global)全局作用域\n  - √ 所在模块（文件）的命名空间\n- B(built-in)内置作用域\n  - √ Python内置模块的命名空间\n\n#### 实例解析\n\n```python\nglobalVar = 100  # 全局作用域     \n\n\ndef test_scope():\n    enclosingVar = 200  # 嵌套作用域\n\n    def func():\n        localVar = enclosingVar + 1  # 局部作用域\n        print(localVar)\n\n\nprint(__name__)  # 内置作用域\n```\n\n### 变量名解析LEGB法则\n\n当在函数中使用未确定的变量名时，`Python`会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。\n\n- 首先搜索局部作用域(L)，\n\n- 之后是上一层嵌套结构中`def`或`lambda`函数的嵌套作用域(E)，\n\n- 之后是全局作用域(G)，\n\n- 最后是内置作用域(B)。\n\n- 按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发`NameError`错误。\n\n### 搜索变量名的优先级：\n\n- 局部作用域 > 嵌套作用域 > 全局作用域 > 内置作用域\n\n#### 实例1\n\n```python\ndef func():\n    variable = 300\n    print(variable)  #打印局部作用域的variable\n\nvariable = 100\nfunc()\nprint(variable) #打印全局作用域的variable\n```\n\n运行结果：\n\n```shell\n300\n100\n```\n\n#### 实例2\n\n```python\ndef test_scopt():\n    variable = 200\n    print(variable)\n    def func():\n        print(variable) #此处打印的是上层嵌套函数\n    func()              #test_scopt()中的variable\nvariable = 100\ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\n200\n200\n100\n```\n\n#### 实例3\n\n```python\nvariable = 300\ndef test_scopt():\n    print(variable) #此处的变量variable绑定的是下一行  \n    variable = 200  #语句中所声明的局部变量，但未被赋值所以报错\n\ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\nUnboundLocalError: local variable 'variable' referenced before assignment\n```\n\n#### 实例4\n\n```python\nvariable = 300\ndef test_scopt():\n    print(variable)  #此处打印的是全局变量variable\n    #variable = 200  #如果这行未被注释，那么上一句print打印的应是\n                     #此处定义的局部变量     \ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\n300\n300\n```\n\n仔细体会实例4和实例3的区别！\n\n### global与nonlocal关键字\n\n- global适用于函数内部修改全局变量的值\n\n- nonlocal适用于嵌套函数中内部函数修改外部变量的值\n\n#### 实例1（global关键字）\n\n```python\nspam = 99   # <--\ndef tester():\n    def nested():\n        global spam   #绑定到了第一行定义的spam\n        print('current=',spam)\n        spam = 200\n    return nested\ntester()()\nprint(spam)\n```\n\n运行结果：\n\n```shell\ncurrent= 99\n200\n```\n\n#### 实例2（nonlocal关键字）\n\n```python\ndef outer():\n    count = 10 # <--\n    def inner():\n        nonlocal count #绑定到了第二行定义的count\n        count = 20\n        print(count)\n    inner()\n    print(count)\nouter()\n```\n\n运行结果：\n\n```shell\n20\n20\n```\n","source":"_posts/python函数-变量解析.md","raw":"---\ntitle: python变量作用域\ndate: 2020-06-06 11:10:17\ncategories:\n- 技术\n- python\n- 基础\ntags:\n- LEGB\n- 作用域\n- global\n- nonlocal\n---\n\n### 变量的作用域\n\n- 在Python程序中创建、改变、查找变量名时，都是在一个保存变量名的空间中进行，我们称之为命名空间，也被称之为作用域。\n\n- Python的作用域是静态的，在源代码中变量名被赋值的位置决定了该变量能被访问的范围。即Python变量的作用域由变量所在源代码中的位置决定。\n\n### 作用域的产生\n\n- 只有当变量在`Module(模块)`、`Class(类)`、`def(函数)`中定义的时候，才会有作用域的概念。\n\n- 在作用域中定义的变量，一般只在该作用域中有效。\n\n- 在`if-elif-else`、`for-else`、`while`、`try-except/try-finally`等关键字的语句块中并不会产生作用域\n\n#### 代码分析1\n\n```python\ndef func():\n    variable = 100\n    print(variable)\nprint(variable)\n```\n\n> 代码执行到第二个`print(variable)`时会报错 `NameError: name 'variable' is not defined`\n>\n>变量`variable`只在函数`func()`的定义域内有效！\n\n#### 代码分析2\n\n```python\nif True:\n    variable = 100\n    print(variable)\nprint(\"******\")\nprint(variable)\n```\n\n输出结果为：\n\n```shell\n100     \n******\n100\n```\n\n程序没有报错，因为if语句不产生作用域\n\n### 变量作用域的类型\n\n- L(local)局部作用域\n  - √ 函数内的命名空间\n- E(enclosing)嵌套作用域\n  - √ 外部嵌套函数的命名空间\n- G(global)全局作用域\n  - √ 所在模块（文件）的命名空间\n- B(built-in)内置作用域\n  - √ Python内置模块的命名空间\n\n#### 实例解析\n\n```python\nglobalVar = 100  # 全局作用域     \n\n\ndef test_scope():\n    enclosingVar = 200  # 嵌套作用域\n\n    def func():\n        localVar = enclosingVar + 1  # 局部作用域\n        print(localVar)\n\n\nprint(__name__)  # 内置作用域\n```\n\n### 变量名解析LEGB法则\n\n当在函数中使用未确定的变量名时，`Python`会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。\n\n- 首先搜索局部作用域(L)，\n\n- 之后是上一层嵌套结构中`def`或`lambda`函数的嵌套作用域(E)，\n\n- 之后是全局作用域(G)，\n\n- 最后是内置作用域(B)。\n\n- 按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发`NameError`错误。\n\n### 搜索变量名的优先级：\n\n- 局部作用域 > 嵌套作用域 > 全局作用域 > 内置作用域\n\n#### 实例1\n\n```python\ndef func():\n    variable = 300\n    print(variable)  #打印局部作用域的variable\n\nvariable = 100\nfunc()\nprint(variable) #打印全局作用域的variable\n```\n\n运行结果：\n\n```shell\n300\n100\n```\n\n#### 实例2\n\n```python\ndef test_scopt():\n    variable = 200\n    print(variable)\n    def func():\n        print(variable) #此处打印的是上层嵌套函数\n    func()              #test_scopt()中的variable\nvariable = 100\ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\n200\n200\n100\n```\n\n#### 实例3\n\n```python\nvariable = 300\ndef test_scopt():\n    print(variable) #此处的变量variable绑定的是下一行  \n    variable = 200  #语句中所声明的局部变量，但未被赋值所以报错\n\ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\nUnboundLocalError: local variable 'variable' referenced before assignment\n```\n\n#### 实例4\n\n```python\nvariable = 300\ndef test_scopt():\n    print(variable)  #此处打印的是全局变量variable\n    #variable = 200  #如果这行未被注释，那么上一句print打印的应是\n                     #此处定义的局部变量     \ntest_scopt()\nprint(variable)\n```\n\n运行结果：\n\n```shell\n300\n300\n```\n\n仔细体会实例4和实例3的区别！\n\n### global与nonlocal关键字\n\n- global适用于函数内部修改全局变量的值\n\n- nonlocal适用于嵌套函数中内部函数修改外部变量的值\n\n#### 实例1（global关键字）\n\n```python\nspam = 99   # <--\ndef tester():\n    def nested():\n        global spam   #绑定到了第一行定义的spam\n        print('current=',spam)\n        spam = 200\n    return nested\ntester()()\nprint(spam)\n```\n\n运行结果：\n\n```shell\ncurrent= 99\n200\n```\n\n#### 实例2（nonlocal关键字）\n\n```python\ndef outer():\n    count = 10 # <--\n    def inner():\n        nonlocal count #绑定到了第二行定义的count\n        count = 20\n        print(count)\n    inner()\n    print(count)\nouter()\n```\n\n运行结果：\n\n```shell\n20\n20\n```\n","slug":"python函数-变量解析","published":1,"updated":"2021-01-23T14:58:34.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuca001jjjln1cyj80ar","content":"<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><ul>\n<li><p>在Python程序中创建、改变、查找变量名时，都是在一个保存变量名的空间中进行，我们称之为命名空间，也被称之为作用域。</p>\n</li>\n<li><p>Python的作用域是静态的，在源代码中变量名被赋值的位置决定了该变量能被访问的范围。即Python变量的作用域由变量所在源代码中的位置决定。</p>\n</li>\n</ul>\n<h3 id=\"作用域的产生\"><a href=\"#作用域的产生\" class=\"headerlink\" title=\"作用域的产生\"></a>作用域的产生</h3><ul>\n<li><p>只有当变量在<code>Module(模块)</code>、<code>Class(类)</code>、<code>def(函数)</code>中定义的时候，才会有作用域的概念。</p>\n</li>\n<li><p>在作用域中定义的变量，一般只在该作用域中有效。</p>\n</li>\n<li><p>在<code>if-elif-else</code>、<code>for-else</code>、<code>while</code>、<code>try-except/try-finally</code>等关键字的语句块中并不会产生作用域</p>\n</li>\n</ul>\n<h4 id=\"代码分析1\"><a href=\"#代码分析1\" class=\"headerlink\" title=\"代码分析1\"></a>代码分析1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>    variable = <span class=\"hljs-number\">100</span><br>    print(variable)<br>print(variable)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>代码执行到第二个<code>print(variable)</code>时会报错 <code>NameError: name &#39;variable&#39; is not defined</code></p>\n<p>变量<code>variable</code>只在函数<code>func()</code>的定义域内有效！</p>\n</blockquote>\n<h4 id=\"代码分析2\"><a href=\"#代码分析2\" class=\"headerlink\" title=\"代码分析2\"></a>代码分析2</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span>:<br>    variable = <span class=\"hljs-number\">100</span><br>    print(variable)<br>print(<span class=\"hljs-string\">&quot;******&quot;</span>)<br>print(variable)<br></code></pre></div></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">100     <br>******<br>100<br></code></pre></div></td></tr></table></figure>\n<p>程序没有报错，因为if语句不产生作用域</p>\n<h3 id=\"变量作用域的类型\"><a href=\"#变量作用域的类型\" class=\"headerlink\" title=\"变量作用域的类型\"></a>变量作用域的类型</h3><ul>\n<li>L(local)局部作用域<ul>\n<li>√ 函数内的命名空间</li>\n</ul>\n</li>\n<li>E(enclosing)嵌套作用域<ul>\n<li>√ 外部嵌套函数的命名空间</li>\n</ul>\n</li>\n<li>G(global)全局作用域<ul>\n<li>√ 所在模块（文件）的命名空间</li>\n</ul>\n</li>\n<li>B(built-in)内置作用域<ul>\n<li>√ Python内置模块的命名空间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">globalVar = <span class=\"hljs-number\">100</span>  <span class=\"hljs-comment\"># 全局作用域     </span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scope</span>():</span><br>    enclosingVar = <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\"># 嵌套作用域</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>        localVar = enclosingVar + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 局部作用域</span><br>        print(localVar)<br><br><br>print(__name__)  <span class=\"hljs-comment\"># 内置作用域</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"变量名解析LEGB法则\"><a href=\"#变量名解析LEGB法则\" class=\"headerlink\" title=\"变量名解析LEGB法则\"></a>变量名解析LEGB法则</h3><p>当在函数中使用未确定的变量名时，<code>Python</code>会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。</p>\n<ul>\n<li><p>首先搜索局部作用域(L)，</p>\n</li>\n<li><p>之后是上一层嵌套结构中<code>def</code>或<code>lambda</code>函数的嵌套作用域(E)，</p>\n</li>\n<li><p>之后是全局作用域(G)，</p>\n</li>\n<li><p>最后是内置作用域(B)。</p>\n</li>\n<li><p>按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发<code>NameError</code>错误。</p>\n</li>\n</ul>\n<h3 id=\"搜索变量名的优先级：\"><a href=\"#搜索变量名的优先级：\" class=\"headerlink\" title=\"搜索变量名的优先级：\"></a>搜索变量名的优先级：</h3><ul>\n<li>局部作用域 &gt; 嵌套作用域 &gt; 全局作用域 &gt; 内置作用域</li>\n</ul>\n<h4 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>    variable = <span class=\"hljs-number\">300</span><br>    print(variable)  <span class=\"hljs-comment\">#打印局部作用域的variable</span><br><br>variable = <span class=\"hljs-number\">100</span><br>func()<br>print(variable) <span class=\"hljs-comment\">#打印全局作用域的variable</span><br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">300<br>100<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    variable = <span class=\"hljs-number\">200</span><br>    print(variable)<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>        print(variable) <span class=\"hljs-comment\">#此处打印的是上层嵌套函数</span><br>    func()              <span class=\"hljs-comment\">#test_scopt()中的variable</span><br>variable = <span class=\"hljs-number\">100</span><br>test_scopt()<br>print(variable)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">200<br>200<br>100<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实例3\"><a href=\"#实例3\" class=\"headerlink\" title=\"实例3\"></a>实例3</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">variable = <span class=\"hljs-number\">300</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    print(variable) <span class=\"hljs-comment\">#此处的变量variable绑定的是下一行  </span><br>    variable = <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">#语句中所声明的局部变量，但未被赋值所以报错</span><br><br>test_scopt()<br>print(variable)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">UnboundLocalError: local variable &#x27;variable&#x27; referenced before assignment<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实例4\"><a href=\"#实例4\" class=\"headerlink\" title=\"实例4\"></a>实例4</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">variable = <span class=\"hljs-number\">300</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    print(variable)  <span class=\"hljs-comment\">#此处打印的是全局变量variable</span><br>    <span class=\"hljs-comment\">#variable = 200  #如果这行未被注释，那么上一句print打印的应是</span><br>                     <span class=\"hljs-comment\">#此处定义的局部变量     </span><br>test_scopt()<br>print(variable)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">300<br>300<br></code></pre></div></td></tr></table></figure>\n<p>仔细体会实例4和实例3的区别！</p>\n<h3 id=\"global与nonlocal关键字\"><a href=\"#global与nonlocal关键字\" class=\"headerlink\" title=\"global与nonlocal关键字\"></a>global与nonlocal关键字</h3><ul>\n<li><p>global适用于函数内部修改全局变量的值</p>\n</li>\n<li><p>nonlocal适用于嵌套函数中内部函数修改外部变量的值</p>\n</li>\n</ul>\n<h4 id=\"实例1（global关键字）\"><a href=\"#实例1（global关键字）\" class=\"headerlink\" title=\"实例1（global关键字）\"></a>实例1（global关键字）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">spam = <span class=\"hljs-number\">99</span>   <span class=\"hljs-comment\"># &lt;--</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tester</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">nested</span>():</span><br>        <span class=\"hljs-keyword\">global</span> spam   <span class=\"hljs-comment\">#绑定到了第一行定义的spam</span><br>        print(<span class=\"hljs-string\">&#x27;current=&#x27;</span>,spam)<br>        spam = <span class=\"hljs-number\">200</span><br>    <span class=\"hljs-keyword\">return</span> nested<br>tester()()<br>print(spam)<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">current= 99<br>200<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"实例2（nonlocal关键字）\"><a href=\"#实例2（nonlocal关键字）\" class=\"headerlink\" title=\"实例2（nonlocal关键字）\"></a>实例2（nonlocal关键字）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>():</span><br>    count = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># &lt;--</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>():</span><br>        <span class=\"hljs-keyword\">nonlocal</span> count <span class=\"hljs-comment\">#绑定到了第二行定义的count</span><br>        count = <span class=\"hljs-number\">20</span><br>        print(count)<br>    inner()<br>    print(count)<br>outer()<br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">20<br>20<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><ul>\n<li><p>在Python程序中创建、改变、查找变量名时，都是在一个保存变量名的空间中进行，我们称之为命名空间，也被称之为作用域。</p>\n</li>\n<li><p>Python的作用域是静态的，在源代码中变量名被赋值的位置决定了该变量能被访问的范围。即Python变量的作用域由变量所在源代码中的位置决定。</p>\n</li>\n</ul>\n<h3 id=\"作用域的产生\"><a href=\"#作用域的产生\" class=\"headerlink\" title=\"作用域的产生\"></a>作用域的产生</h3><ul>\n<li><p>只有当变量在<code>Module(模块)</code>、<code>Class(类)</code>、<code>def(函数)</code>中定义的时候，才会有作用域的概念。</p>\n</li>\n<li><p>在作用域中定义的变量，一般只在该作用域中有效。</p>\n</li>\n<li><p>在<code>if-elif-else</code>、<code>for-else</code>、<code>while</code>、<code>try-except/try-finally</code>等关键字的语句块中并不会产生作用域</p>\n</li>\n</ul>\n<h4 id=\"代码分析1\"><a href=\"#代码分析1\" class=\"headerlink\" title=\"代码分析1\"></a>代码分析1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>    variable = <span class=\"hljs-number\">100</span><br>    print(variable)<br>print(variable)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>代码执行到第二个<code>print(variable)</code>时会报错 <code>NameError: name &#39;variable&#39; is not defined</code></p>\n<p>变量<code>variable</code>只在函数<code>func()</code>的定义域内有效！</p>\n</blockquote>\n<h4 id=\"代码分析2\"><a href=\"#代码分析2\" class=\"headerlink\" title=\"代码分析2\"></a>代码分析2</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span>:<br>    variable = <span class=\"hljs-number\">100</span><br>    print(variable)<br>print(<span class=\"hljs-string\">&quot;******&quot;</span>)<br>print(variable)<br></code></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">100     <br>******<br>100<br></code></pre></td></tr></table></figure>\n<p>程序没有报错，因为if语句不产生作用域</p>\n<h3 id=\"变量作用域的类型\"><a href=\"#变量作用域的类型\" class=\"headerlink\" title=\"变量作用域的类型\"></a>变量作用域的类型</h3><ul>\n<li>L(local)局部作用域<ul>\n<li>√ 函数内的命名空间</li>\n</ul>\n</li>\n<li>E(enclosing)嵌套作用域<ul>\n<li>√ 外部嵌套函数的命名空间</li>\n</ul>\n</li>\n<li>G(global)全局作用域<ul>\n<li>√ 所在模块（文件）的命名空间</li>\n</ul>\n</li>\n<li>B(built-in)内置作用域<ul>\n<li>√ Python内置模块的命名空间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实例解析\"><a href=\"#实例解析\" class=\"headerlink\" title=\"实例解析\"></a>实例解析</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">globalVar = <span class=\"hljs-number\">100</span>  <span class=\"hljs-comment\"># 全局作用域     </span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scope</span>():</span><br>    enclosingVar = <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\"># 嵌套作用域</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>        localVar = enclosingVar + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># 局部作用域</span><br>        print(localVar)<br><br><br>print(__name__)  <span class=\"hljs-comment\"># 内置作用域</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"变量名解析LEGB法则\"><a href=\"#变量名解析LEGB法则\" class=\"headerlink\" title=\"变量名解析LEGB法则\"></a>变量名解析LEGB法则</h3><p>当在函数中使用未确定的变量名时，<code>Python</code>会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。</p>\n<ul>\n<li><p>首先搜索局部作用域(L)，</p>\n</li>\n<li><p>之后是上一层嵌套结构中<code>def</code>或<code>lambda</code>函数的嵌套作用域(E)，</p>\n</li>\n<li><p>之后是全局作用域(G)，</p>\n</li>\n<li><p>最后是内置作用域(B)。</p>\n</li>\n<li><p>按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发<code>NameError</code>错误。</p>\n</li>\n</ul>\n<h3 id=\"搜索变量名的优先级：\"><a href=\"#搜索变量名的优先级：\" class=\"headerlink\" title=\"搜索变量名的优先级：\"></a>搜索变量名的优先级：</h3><ul>\n<li>局部作用域 &gt; 嵌套作用域 &gt; 全局作用域 &gt; 内置作用域</li>\n</ul>\n<h4 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>    variable = <span class=\"hljs-number\">300</span><br>    print(variable)  <span class=\"hljs-comment\">#打印局部作用域的variable</span><br><br>variable = <span class=\"hljs-number\">100</span><br>func()<br>print(variable) <span class=\"hljs-comment\">#打印全局作用域的variable</span><br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">300<br>100<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    variable = <span class=\"hljs-number\">200</span><br>    print(variable)<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span><br>        print(variable) <span class=\"hljs-comment\">#此处打印的是上层嵌套函数</span><br>    func()              <span class=\"hljs-comment\">#test_scopt()中的variable</span><br>variable = <span class=\"hljs-number\">100</span><br>test_scopt()<br>print(variable)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">200<br>200<br>100<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例3\"><a href=\"#实例3\" class=\"headerlink\" title=\"实例3\"></a>实例3</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">variable = <span class=\"hljs-number\">300</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    print(variable) <span class=\"hljs-comment\">#此处的变量variable绑定的是下一行  </span><br>    variable = <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">#语句中所声明的局部变量，但未被赋值所以报错</span><br><br>test_scopt()<br>print(variable)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">UnboundLocalError: local variable &#x27;variable&#x27; referenced before assignment<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例4\"><a href=\"#实例4\" class=\"headerlink\" title=\"实例4\"></a>实例4</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">variable = <span class=\"hljs-number\">300</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_scopt</span>():</span><br>    print(variable)  <span class=\"hljs-comment\">#此处打印的是全局变量variable</span><br>    <span class=\"hljs-comment\">#variable = 200  #如果这行未被注释，那么上一句print打印的应是</span><br>                     <span class=\"hljs-comment\">#此处定义的局部变量     </span><br>test_scopt()<br>print(variable)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">300<br>300<br></code></pre></td></tr></table></figure>\n<p>仔细体会实例4和实例3的区别！</p>\n<h3 id=\"global与nonlocal关键字\"><a href=\"#global与nonlocal关键字\" class=\"headerlink\" title=\"global与nonlocal关键字\"></a>global与nonlocal关键字</h3><ul>\n<li><p>global适用于函数内部修改全局变量的值</p>\n</li>\n<li><p>nonlocal适用于嵌套函数中内部函数修改外部变量的值</p>\n</li>\n</ul>\n<h4 id=\"实例1（global关键字）\"><a href=\"#实例1（global关键字）\" class=\"headerlink\" title=\"实例1（global关键字）\"></a>实例1（global关键字）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">spam = <span class=\"hljs-number\">99</span>   <span class=\"hljs-comment\"># &lt;--</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tester</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">nested</span>():</span><br>        <span class=\"hljs-keyword\">global</span> spam   <span class=\"hljs-comment\">#绑定到了第一行定义的spam</span><br>        print(<span class=\"hljs-string\">&#x27;current=&#x27;</span>,spam)<br>        spam = <span class=\"hljs-number\">200</span><br>    <span class=\"hljs-keyword\">return</span> nested<br>tester()()<br>print(spam)<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">current= 99<br>200<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例2（nonlocal关键字）\"><a href=\"#实例2（nonlocal关键字）\" class=\"headerlink\" title=\"实例2（nonlocal关键字）\"></a>实例2（nonlocal关键字）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>():</span><br>    count = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># &lt;--</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>():</span><br>        <span class=\"hljs-keyword\">nonlocal</span> count <span class=\"hljs-comment\">#绑定到了第二行定义的count</span><br>        count = <span class=\"hljs-number\">20</span><br>        print(count)<br>    inner()<br>    print(count)<br>outer()<br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">20<br>20<br></code></pre></td></tr></table></figure>"},{"title":"装饰器","date":"2019-05-02T06:30:27.000Z","_content":"\n## 返回函数\n\n> `python`的常识，函数和其他任何东西一样，都是对象。这意味着可以将`函数`当做`实参`传递给函数，或者在函数中将`函数`作为`返回值`返回。\n\n```python\ndef lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum\nf = lazy_sum(1, 3, 5, 7, 9)\nf()\n```\n\n## 闭包\n\n闭包是“返回函数”的一个典型应用\n\n闭包的定义：\n\n> -   在一个外函数(`outer`)中定义了一个内函数(`inner`)\n>\n> -    内函数里运用了外函数的临时变量\n>\n> -   并且外函数的返回值是内函数的引用\n\n闭包的使用，可以隐藏内部函数的工作细节，只给外部使用者提供一个可以执行的内部函数的引用。\n\n```python\n#闭包函数的实例\n  # outer是外部函数 a和b都是外函数的临时变量\n  def outer( a ):\n    b = 10\n    def inner():  # inner是内函数\n        print(a+b)  #在内函数中 用到了外函数的临时变量\n    return inner  # 外函数的返回值是内函数的引用\n\n  # 在这里我们调用外函数传入参数5\n  #此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo\n  # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数\n  demo = outer(5)\n\n  # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量\n  # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数\n  demo() # 15\n```\n\n  > `inner`函数修改`outer`函数变量\n\n  ```python\n  def createCounter():\n    i = 0\n    def counter():\n       nonlocal i # 指定外部函数的局部变量\n       i = i + 1\n       return i\n    return counter\n\n  counterA = createCounter()\n  print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5\n  counterB = createCounter()\n  if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:\n     print('测试通过!')\n  else:\n     print('测试失败!')\n  ```\n\n## 装饰器\n\n### 装饰器介绍\n\n要了解python中`@`装饰器的作用，首先要记住这么几点：\n\n>   装饰器符号`@`属于语法糖\n\n什么意思呢？\n\n- 就是说，我不按照`@`装饰器的语法要求来写，而是按照一般`python`的语法要求来写完全可以。\n- 那么用`@`装饰器的格式来写的目的就是为了书写简单方便\n\n**注意：装饰器是用于拓展已有函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，实际上就是利用闭包语法实现的。**\n\n### 装饰器语法\n\n装饰器的作用是什么呢？ 简单的理解就是：装饰原有的函数。什么意思呢？\n\n比如有一个函数`func(a, b)`，它的功能是求`a`,`b`的差值\n\n现在有一个新需求，就是想对函数功能再装饰下，求完差值后再取绝对值，但是不能能修改原有函数，这时候就需要装饰器装饰函数     \n\n```python\n\"\"\"\n函数闭包实现求差值之后，再求绝对值\n\"\"\"\ndef func(a, b):\n    return a- b\n\ndef abs_num(func):\n    def inner(a, b):\n        ret = func(a, b)\n        return abs(ret)\n    return inner\n\n@abs_num\nfunc(2, 3)\n```\n\n - 当`abs_num`装饰函数`func`时，类似于将函数`func`作为参数传给`abs_num`,并将返回值即内层函数(`inner`)名重新赋值给变量`func`\n\n - 当调用函数`func`时，实质是调用内层函数`inner`，在内层函数中执行`func`函数，即最原始的函数`func`\n\n### 装饰器分类\n\n#### 被装饰函数有参数\n\n```python\ndef outer(func):\n    def inner(x, y):\n        func(x, y)  # 新版的 func  才是 原来的 add\n\n    return inner\n\n\n@outer\ndef add(x, y):\n    print(x + y)\n\n\nadd(1, 2)  # 新版的 add  是 内层 inner\n\n# add(1, 2)   ====>  inner(1, 2)  ====>  func(1, 2)  ===> 3\n```\n\n> 被装饰函数 有参数，`inner`和 `func `需要同样的参数\n\n#### 被装饰函数有返回值\n\n```python\ndef outer(func):\n    def inner(x, y):\n\n        r = func(x, y)  # 装饰器装饰之后， func才是真正的add求和函数\n        \n        r += 10  # 将两数之和再加 10\n        \n        return r\n\n    return inner\n\n\n@outer\ndef add(x, y):\n    return x + y\n\n\n# 在装饰器中 对函数的执行结果 加10 处理\nr = add(10, 200)  # add实际是inner\nprint(r)\n```\n\n> 被装饰函数有返回值， `inner`需要将 `func` 的结果 返回\n\n#### 被装饰的函数有不定长参数\n\n```python\ndef set_func(func):\n    def call_func(*args, **kwargs):\n        \n        # func(args, kwargs),此时得到的是元组和字典\n        # func(*args, **kwargs),此时则是把元素拆包为单个数值和键值对\n        return func(*args, **kwargs)\n\n    return call_func\n\n@set_func\ndef s(a, b, *args, **kwargs):\n\n    print(a, b, args, kwargs)\n\n\ns(12, 50, 34, c=20, d=56)\n```\n\n- 形参\n    - *args：接收多余的参数，得到元组(args)\n    - **kwargs:接收多余的关键字参数，得到字典(kwargs)\n- 实参\n    - *args：对元组(args)进行拆包，得到单个数值\n    - **kwargs：对字典(kwargs)拆包，得到单个的键值对\n\n#### 多个装饰器装饰函数\n- 多个装饰器装饰同一个函数，装饰顺序和执行顺序正好相反\n\n- 装饰器函数的执行顺序和装饰器的顺序有关\n\n```python\ndef set_func1(func):\n    print(\"这是测试1...\")\n\n    def call_func1():\n        print(\"这是装饰器1...\")\n        return func()\n\n    return call_func1\n\n\ndef set_func2(func):\n    print(\"这是测试2...\")\n\n    def call_func2():\n        print(\"这是装饰器2...\")\n        return func()\n\n    return call_func2\n\n\n@set_func1\n@set_func2\ndef s():\n    print(\"hello...\")\n\n\ns()\n\n```\n\n- 代码从上到下，依次执行，同时装饰器是用来装饰函数的\n\n  - 执行到装饰器set_func1时，无法装饰，先跳过\n  - 执行装饰器set_func2时，装饰原始函数s，\n      - 先执行set_func2,输出\"这是测试2...\"，\n      - 然后得到s = call_func2(s)，此时的s是原始函数s\n  - 然后装饰器set_func1装饰新得到的函数s = call_func2(s)\n      - 先执行set_func1,输出\"这是测试1...\"\n      - 然后得到s = call_func1(s)，此时的s是新得到的函数s = call_func2(s)\n  - 最后得到函数s = call_func1(call_func(s))\n\n  - 最后执行函数s\n      - 先执行call_func1,输出\"这是装饰器1...\"\n      - 再执行call_func2,输出\"这是装饰器2...\"\n      - 最后执行原始函数s，输出\"hello...\"\n\n#### 装饰器带参\n```python\ndef set_pars(pars):\n    def set_func(func):\n        def call_func():\n            print(\"這是測試級別%d\" % pars)\n            return func()\n        return call_func\n    return set_func\n\n@set_pars(10) # 装饰分两步\ndef s():\n    print(\"hello...\")\n\ns()\n\n```\n- 装饰器带参时，装饰函数过程分两步：\n    - 将参数传给函数set_pars，进行执行\n    - 将函数返回结果作为函数s的装饰器进行装饰\n\n#### 类装饰器\n\n```python\nclass Test(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):  \n        '''\n        魔法方法__call__可以将对象设置为可调用对象（callable）,允许一个类的实例像函数一样被调用 \n        '''\n        print(\"这是类装饰器...\")\n        return self.func(*args, **kwargs)\n\n@Test  # s = Test(s)\ndef s(*args, **kwargs):\n    print(\"hello python...\")\n\ns()\n\n```\n- 自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号()应用到某个对象身上都可称之为可调用对象\n- 判断对象是否为可调用对象可以用函数 callable\n- 如果在类中实现了 __call__ 方法，那么实例对象也将成为一个可调用对象\n\n### 示例\n\n#### 装饰器处理响应值\n\n函数input_str中，会获取用户输入字符串，并返回其结果，利用装饰器将其字符串先加上`<b></b>`标签，再添加`<i></i>`标签，如：`<i><b>hello</b></>`。注意：**利用双层装饰器实现**。\n\n```python\ndef set_func_b(func):\n    def call_func():\n        return \"<b>\" + func() + \"</b>\"\n\n    return call_func\n\ndef set_func_i(func):\n    def call_func():\n        return \"<i>\" + func() + \"</i>\"\n\n    return call_func\n\n@set_func_i\n@set_func_b\ndef input_str():\n    str = input(\"输入：\")\n    return str\n\nprint(input_str())\n```\n\n#### 装饰器限频\n\n请实现一个装饰器,限制该函数被调用的频率,如10秒一次\n\n```python\nimport time\n\ndef set_time(t):\n    def set_num(func):\n        dic = {\"last_time\": 0, \"time_interval\": t}\n\n        def call_func():\n            now_time = time.time()\n\n            finall_time = dic[\"last_time\"] + dic[\"time_interval\"]\n            if finall_time <= now_time:\n                dic[\"last_time\"] = now_time\n                ret = func()\n\n                return ret\n            else:\n                print(\"还有%.2fs才能调用该函数\" % (finall_time - now_time))\n\n        return call_func\n    return set_num\n\n@set_time(5)\ndef s():\n    print(\"hello...\")\n```\n\n请实现一个装饰器,限制该函数每个间隔被调用的频率,如1分钟5次\n\n```python\nimport time\n\ndef set_time(t, n):\n    def set_num(func):\n        dic = {\"last_time\": 0, \"time_interval\": t, \"num\": 0}\n\n        def call_func():\n            now_time = time.time()\n\n            finall_time = dic[\"last_time\"] + dic[\"time_interval\"] # 代表可以重新调用的时间\n            finall_num = dic[\"num\"] # 代表调用的次数\n\n            if finall_num < n: # 当次数不满足时，可以继续调用\n                if finall_num == 0:\n                    dic[\"last_time\"] = now_time\n                dic[\"num\"] += 1\n\n                return func()\n\n            elif now_time >= finall_time: # 已经超出时间，可以重新调用\n                dic[\"num\"] = 0\n                dic[\"last_time\"] = 0\n\n                return func()\n            else:\n                print(\"还有%.2fs才能调用该函数\" % (finall_time - now_time))\n        return call_func\n    return set_num\n\n@set_time(60, 5)\ndef s():\n    print(\"hello...\")\n\ns()\ns()\ns()\ntime.sleep(2)\ns()\n```","source":"_posts/python函数-装饰器.md","raw":"---\ntitle: 装饰器\ndate: 2019-05-02 14:30:27\ncategories: \n- 技术\n- python\n- 基础\ntags:\n  - 闭包\n  - 装饰器\n---\n\n## 返回函数\n\n> `python`的常识，函数和其他任何东西一样，都是对象。这意味着可以将`函数`当做`实参`传递给函数，或者在函数中将`函数`作为`返回值`返回。\n\n```python\ndef lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum\nf = lazy_sum(1, 3, 5, 7, 9)\nf()\n```\n\n## 闭包\n\n闭包是“返回函数”的一个典型应用\n\n闭包的定义：\n\n> -   在一个外函数(`outer`)中定义了一个内函数(`inner`)\n>\n> -    内函数里运用了外函数的临时变量\n>\n> -   并且外函数的返回值是内函数的引用\n\n闭包的使用，可以隐藏内部函数的工作细节，只给外部使用者提供一个可以执行的内部函数的引用。\n\n```python\n#闭包函数的实例\n  # outer是外部函数 a和b都是外函数的临时变量\n  def outer( a ):\n    b = 10\n    def inner():  # inner是内函数\n        print(a+b)  #在内函数中 用到了外函数的临时变量\n    return inner  # 外函数的返回值是内函数的引用\n\n  # 在这里我们调用外函数传入参数5\n  #此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo\n  # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数\n  demo = outer(5)\n\n  # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量\n  # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数\n  demo() # 15\n```\n\n  > `inner`函数修改`outer`函数变量\n\n  ```python\n  def createCounter():\n    i = 0\n    def counter():\n       nonlocal i # 指定外部函数的局部变量\n       i = i + 1\n       return i\n    return counter\n\n  counterA = createCounter()\n  print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5\n  counterB = createCounter()\n  if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:\n     print('测试通过!')\n  else:\n     print('测试失败!')\n  ```\n\n## 装饰器\n\n### 装饰器介绍\n\n要了解python中`@`装饰器的作用，首先要记住这么几点：\n\n>   装饰器符号`@`属于语法糖\n\n什么意思呢？\n\n- 就是说，我不按照`@`装饰器的语法要求来写，而是按照一般`python`的语法要求来写完全可以。\n- 那么用`@`装饰器的格式来写的目的就是为了书写简单方便\n\n**注意：装饰器是用于拓展已有函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，实际上就是利用闭包语法实现的。**\n\n### 装饰器语法\n\n装饰器的作用是什么呢？ 简单的理解就是：装饰原有的函数。什么意思呢？\n\n比如有一个函数`func(a, b)`，它的功能是求`a`,`b`的差值\n\n现在有一个新需求，就是想对函数功能再装饰下，求完差值后再取绝对值，但是不能能修改原有函数，这时候就需要装饰器装饰函数     \n\n```python\n\"\"\"\n函数闭包实现求差值之后，再求绝对值\n\"\"\"\ndef func(a, b):\n    return a- b\n\ndef abs_num(func):\n    def inner(a, b):\n        ret = func(a, b)\n        return abs(ret)\n    return inner\n\n@abs_num\nfunc(2, 3)\n```\n\n - 当`abs_num`装饰函数`func`时，类似于将函数`func`作为参数传给`abs_num`,并将返回值即内层函数(`inner`)名重新赋值给变量`func`\n\n - 当调用函数`func`时，实质是调用内层函数`inner`，在内层函数中执行`func`函数，即最原始的函数`func`\n\n### 装饰器分类\n\n#### 被装饰函数有参数\n\n```python\ndef outer(func):\n    def inner(x, y):\n        func(x, y)  # 新版的 func  才是 原来的 add\n\n    return inner\n\n\n@outer\ndef add(x, y):\n    print(x + y)\n\n\nadd(1, 2)  # 新版的 add  是 内层 inner\n\n# add(1, 2)   ====>  inner(1, 2)  ====>  func(1, 2)  ===> 3\n```\n\n> 被装饰函数 有参数，`inner`和 `func `需要同样的参数\n\n#### 被装饰函数有返回值\n\n```python\ndef outer(func):\n    def inner(x, y):\n\n        r = func(x, y)  # 装饰器装饰之后， func才是真正的add求和函数\n        \n        r += 10  # 将两数之和再加 10\n        \n        return r\n\n    return inner\n\n\n@outer\ndef add(x, y):\n    return x + y\n\n\n# 在装饰器中 对函数的执行结果 加10 处理\nr = add(10, 200)  # add实际是inner\nprint(r)\n```\n\n> 被装饰函数有返回值， `inner`需要将 `func` 的结果 返回\n\n#### 被装饰的函数有不定长参数\n\n```python\ndef set_func(func):\n    def call_func(*args, **kwargs):\n        \n        # func(args, kwargs),此时得到的是元组和字典\n        # func(*args, **kwargs),此时则是把元素拆包为单个数值和键值对\n        return func(*args, **kwargs)\n\n    return call_func\n\n@set_func\ndef s(a, b, *args, **kwargs):\n\n    print(a, b, args, kwargs)\n\n\ns(12, 50, 34, c=20, d=56)\n```\n\n- 形参\n    - *args：接收多余的参数，得到元组(args)\n    - **kwargs:接收多余的关键字参数，得到字典(kwargs)\n- 实参\n    - *args：对元组(args)进行拆包，得到单个数值\n    - **kwargs：对字典(kwargs)拆包，得到单个的键值对\n\n#### 多个装饰器装饰函数\n- 多个装饰器装饰同一个函数，装饰顺序和执行顺序正好相反\n\n- 装饰器函数的执行顺序和装饰器的顺序有关\n\n```python\ndef set_func1(func):\n    print(\"这是测试1...\")\n\n    def call_func1():\n        print(\"这是装饰器1...\")\n        return func()\n\n    return call_func1\n\n\ndef set_func2(func):\n    print(\"这是测试2...\")\n\n    def call_func2():\n        print(\"这是装饰器2...\")\n        return func()\n\n    return call_func2\n\n\n@set_func1\n@set_func2\ndef s():\n    print(\"hello...\")\n\n\ns()\n\n```\n\n- 代码从上到下，依次执行，同时装饰器是用来装饰函数的\n\n  - 执行到装饰器set_func1时，无法装饰，先跳过\n  - 执行装饰器set_func2时，装饰原始函数s，\n      - 先执行set_func2,输出\"这是测试2...\"，\n      - 然后得到s = call_func2(s)，此时的s是原始函数s\n  - 然后装饰器set_func1装饰新得到的函数s = call_func2(s)\n      - 先执行set_func1,输出\"这是测试1...\"\n      - 然后得到s = call_func1(s)，此时的s是新得到的函数s = call_func2(s)\n  - 最后得到函数s = call_func1(call_func(s))\n\n  - 最后执行函数s\n      - 先执行call_func1,输出\"这是装饰器1...\"\n      - 再执行call_func2,输出\"这是装饰器2...\"\n      - 最后执行原始函数s，输出\"hello...\"\n\n#### 装饰器带参\n```python\ndef set_pars(pars):\n    def set_func(func):\n        def call_func():\n            print(\"這是測試級別%d\" % pars)\n            return func()\n        return call_func\n    return set_func\n\n@set_pars(10) # 装饰分两步\ndef s():\n    print(\"hello...\")\n\ns()\n\n```\n- 装饰器带参时，装饰函数过程分两步：\n    - 将参数传给函数set_pars，进行执行\n    - 将函数返回结果作为函数s的装饰器进行装饰\n\n#### 类装饰器\n\n```python\nclass Test(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):  \n        '''\n        魔法方法__call__可以将对象设置为可调用对象（callable）,允许一个类的实例像函数一样被调用 \n        '''\n        print(\"这是类装饰器...\")\n        return self.func(*args, **kwargs)\n\n@Test  # s = Test(s)\ndef s(*args, **kwargs):\n    print(\"hello python...\")\n\ns()\n\n```\n- 自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号()应用到某个对象身上都可称之为可调用对象\n- 判断对象是否为可调用对象可以用函数 callable\n- 如果在类中实现了 __call__ 方法，那么实例对象也将成为一个可调用对象\n\n### 示例\n\n#### 装饰器处理响应值\n\n函数input_str中，会获取用户输入字符串，并返回其结果，利用装饰器将其字符串先加上`<b></b>`标签，再添加`<i></i>`标签，如：`<i><b>hello</b></>`。注意：**利用双层装饰器实现**。\n\n```python\ndef set_func_b(func):\n    def call_func():\n        return \"<b>\" + func() + \"</b>\"\n\n    return call_func\n\ndef set_func_i(func):\n    def call_func():\n        return \"<i>\" + func() + \"</i>\"\n\n    return call_func\n\n@set_func_i\n@set_func_b\ndef input_str():\n    str = input(\"输入：\")\n    return str\n\nprint(input_str())\n```\n\n#### 装饰器限频\n\n请实现一个装饰器,限制该函数被调用的频率,如10秒一次\n\n```python\nimport time\n\ndef set_time(t):\n    def set_num(func):\n        dic = {\"last_time\": 0, \"time_interval\": t}\n\n        def call_func():\n            now_time = time.time()\n\n            finall_time = dic[\"last_time\"] + dic[\"time_interval\"]\n            if finall_time <= now_time:\n                dic[\"last_time\"] = now_time\n                ret = func()\n\n                return ret\n            else:\n                print(\"还有%.2fs才能调用该函数\" % (finall_time - now_time))\n\n        return call_func\n    return set_num\n\n@set_time(5)\ndef s():\n    print(\"hello...\")\n```\n\n请实现一个装饰器,限制该函数每个间隔被调用的频率,如1分钟5次\n\n```python\nimport time\n\ndef set_time(t, n):\n    def set_num(func):\n        dic = {\"last_time\": 0, \"time_interval\": t, \"num\": 0}\n\n        def call_func():\n            now_time = time.time()\n\n            finall_time = dic[\"last_time\"] + dic[\"time_interval\"] # 代表可以重新调用的时间\n            finall_num = dic[\"num\"] # 代表调用的次数\n\n            if finall_num < n: # 当次数不满足时，可以继续调用\n                if finall_num == 0:\n                    dic[\"last_time\"] = now_time\n                dic[\"num\"] += 1\n\n                return func()\n\n            elif now_time >= finall_time: # 已经超出时间，可以重新调用\n                dic[\"num\"] = 0\n                dic[\"last_time\"] = 0\n\n                return func()\n            else:\n                print(\"还有%.2fs才能调用该函数\" % (finall_time - now_time))\n        return call_func\n    return set_num\n\n@set_time(60, 5)\ndef s():\n    print(\"hello...\")\n\ns()\ns()\ns()\ntime.sleep(2)\ns()\n```","slug":"python函数-装饰器","published":1,"updated":"2021-01-23T15:05:25.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucb001kjjlndamza7iw","content":"<h2 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h2><blockquote>\n<p><code>python</code>的常识，函数和其他任何东西一样，都是对象。这意味着可以将<code>函数</code>当做<code>实参</code>传递给函数，或者在函数中将<code>函数</code>作为<code>返回值</code>返回。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lazy_sum</span>(<span class=\"hljs-params\">*args</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sum</span>():</span><br>        ax = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> args:<br>            ax = ax + n<br>        <span class=\"hljs-keyword\">return</span> ax<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span><br>f = lazy_sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>)<br>f()<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包是“返回函数”的一个典型应用</p>\n<p>闭包的定义：</p>\n<blockquote>\n<ul>\n<li><p>在一个外函数(<code>outer</code>)中定义了一个内函数(<code>inner</code>)</p>\n</li>\n<li><p>内函数里运用了外函数的临时变量</p>\n</li>\n<li><p>并且外函数的返回值是内函数的引用</p>\n</li>\n</ul>\n</blockquote>\n<p>闭包的使用，可以隐藏内部函数的工作细节，只给外部使用者提供一个可以执行的内部函数的引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#闭包函数的实例</span><br>  <span class=\"hljs-comment\"># outer是外部函数 a和b都是外函数的临时变量</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"> a </span>):</span><br>    b = <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>():</span>  <span class=\"hljs-comment\"># inner是内函数</span><br>        print(a+b)  <span class=\"hljs-comment\">#在内函数中 用到了外函数的临时变量</span><br>    <span class=\"hljs-keyword\">return</span> inner  <span class=\"hljs-comment\"># 外函数的返回值是内函数的引用</span><br><br>  <span class=\"hljs-comment\"># 在这里我们调用外函数传入参数5</span><br>  <span class=\"hljs-comment\">#此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo</span><br>  <span class=\"hljs-comment\"># 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span><br>  demo = outer(<span class=\"hljs-number\">5</span>)<br><br>  <span class=\"hljs-comment\"># 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span><br>  <span class=\"hljs-comment\"># demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span><br>  demo() <span class=\"hljs-comment\"># 15</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><code>inner</code>函数修改<code>outer</code>函数变量</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">createCounter</span>():</span><br>  i = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">counter</span>():</span><br>     <span class=\"hljs-keyword\">nonlocal</span> i <span class=\"hljs-comment\"># 指定外部函数的局部变量</span><br>     i = i + <span class=\"hljs-number\">1</span><br>     <span class=\"hljs-keyword\">return</span> i<br>  <span class=\"hljs-keyword\">return</span> counter<br><br>counterA = createCounter()<br>print(counterA(), counterA(), counterA(), counterA(), counterA()) <span class=\"hljs-comment\"># 1 2 3 4 5</span><br>counterB = createCounter()<br><span class=\"hljs-keyword\">if</span> [counterB(), counterB(), counterB(), counterB()] == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]:<br>   print(<span class=\"hljs-string\">&#x27;测试通过!&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>   print(<span class=\"hljs-string\">&#x27;测试失败!&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><h3 id=\"装饰器介绍\"><a href=\"#装饰器介绍\" class=\"headerlink\" title=\"装饰器介绍\"></a>装饰器介绍</h3><p>要了解python中<code>@</code>装饰器的作用，首先要记住这么几点：</p>\n<blockquote>\n<p>  装饰器符号<code>@</code>属于语法糖</p>\n</blockquote>\n<p>什么意思呢？</p>\n<ul>\n<li>就是说，我不按照<code>@</code>装饰器的语法要求来写，而是按照一般<code>python</code>的语法要求来写完全可以。</li>\n<li>那么用<code>@</code>装饰器的格式来写的目的就是为了书写简单方便</li>\n</ul>\n<p><strong>注意：装饰器是用于拓展已有函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，实际上就是利用闭包语法实现的。</strong></p>\n<h3 id=\"装饰器语法\"><a href=\"#装饰器语法\" class=\"headerlink\" title=\"装饰器语法\"></a>装饰器语法</h3><p>装饰器的作用是什么呢？ 简单的理解就是：装饰原有的函数。什么意思呢？</p>\n<p>比如有一个函数<code>func(a, b)</code>，它的功能是求<code>a</code>,<code>b</code>的差值</p>\n<p>现在有一个新需求，就是想对函数功能再装饰下，求完差值后再取绝对值，但是不能能修改原有函数，这时候就需要装饰器装饰函数     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">函数闭包实现求差值之后，再求绝对值</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">a, b</span>):</span><br>    <span class=\"hljs-keyword\">return</span> a- b<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">abs_num</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">a, b</span>):</span><br>        ret = func(a, b)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(ret)<br>    <span class=\"hljs-keyword\">return</span> inner<br><br><span class=\"hljs-meta\">@abs_num</span><br>func(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p>当<code>abs_num</code>装饰函数<code>func</code>时，类似于将函数<code>func</code>作为参数传给<code>abs_num</code>,并将返回值即内层函数(<code>inner</code>)名重新赋值给变量<code>func</code></p>\n</li>\n<li><p>当调用函数<code>func</code>时，实质是调用内层函数<code>inner</code>，在内层函数中执行<code>func</code>函数，即最原始的函数<code>func</code></p>\n</li>\n</ul>\n<h3 id=\"装饰器分类\"><a href=\"#装饰器分类\" class=\"headerlink\" title=\"装饰器分类\"></a>装饰器分类</h3><h4 id=\"被装饰函数有参数\"><a href=\"#被装饰函数有参数\" class=\"headerlink\" title=\"被装饰函数有参数\"></a>被装饰函数有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">x, y</span>):</span><br>        func(x, y)  <span class=\"hljs-comment\"># 新版的 func  才是 原来的 add</span><br><br>    <span class=\"hljs-keyword\">return</span> inner<br><br><br><span class=\"hljs-meta\">@outer</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    print(x + y)<br><br><br>add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 新版的 add  是 内层 inner</span><br><br><span class=\"hljs-comment\"># add(1, 2)   ====&gt;  inner(1, 2)  ====&gt;  func(1, 2)  ===&gt; 3</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>被装饰函数 有参数，<code>inner</code>和 <code>func</code>需要同样的参数</p>\n</blockquote>\n<h4 id=\"被装饰函数有返回值\"><a href=\"#被装饰函数有返回值\" class=\"headerlink\" title=\"被装饰函数有返回值\"></a>被装饰函数有返回值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">x, y</span>):</span><br><br>        r = func(x, y)  <span class=\"hljs-comment\"># 装饰器装饰之后， func才是真正的add求和函数</span><br>        <br>        r += <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># 将两数之和再加 10</span><br>        <br>        <span class=\"hljs-keyword\">return</span> r<br><br>    <span class=\"hljs-keyword\">return</span> inner<br><br><br><span class=\"hljs-meta\">@outer</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x + y<br><br><br><span class=\"hljs-comment\"># 在装饰器中 对函数的执行结果 加10 处理</span><br>r = add(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">200</span>)  <span class=\"hljs-comment\"># add实际是inner</span><br>print(r)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>被装饰函数有返回值， <code>inner</code>需要将 <code>func</code> 的结果 返回</p>\n</blockquote>\n<h4 id=\"被装饰的函数有不定长参数\"><a href=\"#被装饰的函数有不定长参数\" class=\"headerlink\" title=\"被装饰的函数有不定长参数\"></a>被装饰的函数有不定长参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>        <br>        <span class=\"hljs-comment\"># func(args, kwargs),此时得到的是元组和字典</span><br>        <span class=\"hljs-comment\"># func(*args, **kwargs),此时则是把元素拆包为单个数值和键值对</span><br>        <span class=\"hljs-keyword\">return</span> func(*args, **kwargs)<br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-meta\">@set_func</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>(<span class=\"hljs-params\">a, b, *args, **kwargs</span>):</span><br><br>    print(a, b, args, kwargs)<br><br><br>s(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">34</span>, c=<span class=\"hljs-number\">20</span>, d=<span class=\"hljs-number\">56</span>)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>形参<ul>\n<li>*args：接收多余的参数，得到元组(args)</li>\n<li>**kwargs:接收多余的关键字参数，得到字典(kwargs)</li>\n</ul>\n</li>\n<li>实参<ul>\n<li>*args：对元组(args)进行拆包，得到单个数值</li>\n<li>**kwargs：对字典(kwargs)拆包，得到单个的键值对</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多个装饰器装饰函数\"><a href=\"#多个装饰器装饰函数\" class=\"headerlink\" title=\"多个装饰器装饰函数\"></a>多个装饰器装饰函数</h4><ul>\n<li><p>多个装饰器装饰同一个函数，装饰顺序和执行顺序正好相反</p>\n</li>\n<li><p>装饰器函数的执行顺序和装饰器的顺序有关</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func1</span>(<span class=\"hljs-params\">func</span>):</span><br>    print(<span class=\"hljs-string\">&quot;这是测试1...&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func1</span>():</span><br>        print(<span class=\"hljs-string\">&quot;这是装饰器1...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> func()<br><br>    <span class=\"hljs-keyword\">return</span> call_func1<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func2</span>(<span class=\"hljs-params\">func</span>):</span><br>    print(<span class=\"hljs-string\">&quot;这是测试2...&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func2</span>():</span><br>        print(<span class=\"hljs-string\">&quot;这是装饰器2...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> func()<br><br>    <span class=\"hljs-keyword\">return</span> call_func2<br><br><br><span class=\"hljs-meta\">@set_func1</span><br><span class=\"hljs-meta\">@set_func2</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br><br>s()<br><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p>代码从上到下，依次执行，同时装饰器是用来装饰函数的</p>\n<ul>\n<li><p>执行到装饰器set_func1时，无法装饰，先跳过</p>\n</li>\n<li><p>执行装饰器set_func2时，装饰原始函数s，</p>\n<ul>\n<li>先执行set_func2,输出”这是测试2…”，</li>\n<li>然后得到s = call_func2(s)，此时的s是原始函数s</li>\n</ul>\n</li>\n<li><p>然后装饰器set_func1装饰新得到的函数s = call_func2(s)</p>\n<ul>\n<li>先执行set_func1,输出”这是测试1…”</li>\n<li>然后得到s = call_func1(s)，此时的s是新得到的函数s = call_func2(s)</li>\n</ul>\n</li>\n<li><p>最后得到函数s = call_func1(call_func(s))</p>\n</li>\n<li><p>最后执行函数s</p>\n<ul>\n<li>先执行call_func1,输出”这是装饰器1…”</li>\n<li>再执行call_func2,输出”这是装饰器2…”</li>\n<li>最后执行原始函数s，输出”hello…”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"装饰器带参\"><a href=\"#装饰器带参\" class=\"headerlink\" title=\"装饰器带参\"></a>装饰器带参</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_pars</span>(<span class=\"hljs-params\">pars</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func</span>(<span class=\"hljs-params\">func</span>):</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            print(<span class=\"hljs-string\">&quot;這是測試級別%d&quot;</span> % pars)<br>            <span class=\"hljs-keyword\">return</span> func()<br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_func<br><br><span class=\"hljs-meta\">@set_pars(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>) </span><span class=\"hljs-comment\"># 装饰分两步</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br>s()<br><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>装饰器带参时，装饰函数过程分两步：<ul>\n<li>将参数传给函数set_pars，进行执行</li>\n<li>将函数返回结果作为函数s的装饰器进行装饰</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, func</span>):</span><br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__call__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):</span>  <br>        <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">        魔法方法__call__可以将对象设置为可调用对象（callable）,允许一个类的实例像函数一样被调用 </span><br><span class=\"hljs-string\">        &#x27;&#x27;&#x27;</span><br>        print(<span class=\"hljs-string\">&quot;这是类装饰器...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> self.func(*args, **kwargs)<br><br><span class=\"hljs-meta\">@Test  </span><span class=\"hljs-comment\"># s = Test(s)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>    print(<span class=\"hljs-string\">&quot;hello python...&quot;</span>)<br><br>s()<br><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号()应用到某个对象身上都可称之为可调用对象</li>\n<li>判断对象是否为可调用对象可以用函数 callable</li>\n<li>如果在类中实现了 <strong>call</strong> 方法，那么实例对象也将成为一个可调用对象</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"装饰器处理响应值\"><a href=\"#装饰器处理响应值\" class=\"headerlink\" title=\"装饰器处理响应值\"></a>装饰器处理响应值</h4><p>函数input_str中，会获取用户输入字符串，并返回其结果，利用装饰器将其字符串先加上<code>&lt;b&gt;&lt;/b&gt;</code>标签，再添加<code>&lt;i&gt;&lt;/i&gt;</code>标签，如：<code>&lt;i&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/&gt;</code>。注意：<strong>利用双层装饰器实现</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func_b</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;b&gt;&quot;</span> + func() + <span class=\"hljs-string\">&quot;&lt;/b&gt;&quot;</span><br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func_i</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;i&gt;&quot;</span> + func() + <span class=\"hljs-string\">&quot;&lt;/i&gt;&quot;</span><br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-meta\">@set_func_i</span><br><span class=\"hljs-meta\">@set_func_b</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">input_str</span>():</span><br>    <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入：&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span><br><br>print(input_str())<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"装饰器限频\"><a href=\"#装饰器限频\" class=\"headerlink\" title=\"装饰器限频\"></a>装饰器限频</h4><p>请实现一个装饰器,限制该函数被调用的频率,如10秒一次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_time</span>(<span class=\"hljs-params\">t</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_num</span>(<span class=\"hljs-params\">func</span>):</span><br>        dic = &#123;<span class=\"hljs-string\">&quot;last_time&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;time_interval&quot;</span>: t&#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            now_time = time.time()<br><br>            finall_time = dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] + dic[<span class=\"hljs-string\">&quot;time_interval&quot;</span>]<br>            <span class=\"hljs-keyword\">if</span> finall_time &lt;= now_time:<br>                dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = now_time<br>                ret = func()<br><br>                <span class=\"hljs-keyword\">return</span> ret<br>            <span class=\"hljs-keyword\">else</span>:<br>                print(<span class=\"hljs-string\">&quot;还有%.2fs才能调用该函数&quot;</span> % (finall_time - now_time))<br><br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_num<br><br><span class=\"hljs-meta\">@set_time(<span class=\"hljs-params\"><span class=\"hljs-number\">5</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br></code></pre></div></td></tr></table></figure>\n<p>请实现一个装饰器,限制该函数每个间隔被调用的频率,如1分钟5次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_time</span>(<span class=\"hljs-params\">t, n</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_num</span>(<span class=\"hljs-params\">func</span>):</span><br>        dic = &#123;<span class=\"hljs-string\">&quot;last_time&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;time_interval&quot;</span>: t, <span class=\"hljs-string\">&quot;num&quot;</span>: <span class=\"hljs-number\">0</span>&#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            now_time = time.time()<br><br>            finall_time = dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] + dic[<span class=\"hljs-string\">&quot;time_interval&quot;</span>] <span class=\"hljs-comment\"># 代表可以重新调用的时间</span><br>            finall_num = dic[<span class=\"hljs-string\">&quot;num&quot;</span>] <span class=\"hljs-comment\"># 代表调用的次数</span><br><br>            <span class=\"hljs-keyword\">if</span> finall_num &lt; n: <span class=\"hljs-comment\"># 当次数不满足时，可以继续调用</span><br>                <span class=\"hljs-keyword\">if</span> finall_num == <span class=\"hljs-number\">0</span>:<br>                    dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = now_time<br>                dic[<span class=\"hljs-string\">&quot;num&quot;</span>] += <span class=\"hljs-number\">1</span><br><br>                <span class=\"hljs-keyword\">return</span> func()<br><br>            <span class=\"hljs-keyword\">elif</span> now_time &gt;= finall_time: <span class=\"hljs-comment\"># 已经超出时间，可以重新调用</span><br>                dic[<span class=\"hljs-string\">&quot;num&quot;</span>] = <span class=\"hljs-number\">0</span><br>                dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = <span class=\"hljs-number\">0</span><br><br>                <span class=\"hljs-keyword\">return</span> func()<br>            <span class=\"hljs-keyword\">else</span>:<br>                print(<span class=\"hljs-string\">&quot;还有%.2fs才能调用该函数&quot;</span> % (finall_time - now_time))<br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_num<br><br><span class=\"hljs-meta\">@set_time(<span class=\"hljs-params\"><span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">5</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br>s()<br>s()<br>s()<br>time.sleep(<span class=\"hljs-number\">2</span>)<br>s()<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h2><blockquote>\n<p><code>python</code>的常识，函数和其他任何东西一样，都是对象。这意味着可以将<code>函数</code>当做<code>实参</code>传递给函数，或者在函数中将<code>函数</code>作为<code>返回值</code>返回。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lazy_sum</span>(<span class=\"hljs-params\">*args</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sum</span>():</span><br>        ax = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> args:<br>            ax = ax + n<br>        <span class=\"hljs-keyword\">return</span> ax<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span><br>f = lazy_sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>)<br>f()<br></code></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包是“返回函数”的一个典型应用</p>\n<p>闭包的定义：</p>\n<blockquote>\n<ul>\n<li><p>在一个外函数(<code>outer</code>)中定义了一个内函数(<code>inner</code>)</p>\n</li>\n<li><p>内函数里运用了外函数的临时变量</p>\n</li>\n<li><p>并且外函数的返回值是内函数的引用</p>\n</li>\n</ul>\n</blockquote>\n<p>闭包的使用，可以隐藏内部函数的工作细节，只给外部使用者提供一个可以执行的内部函数的引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#闭包函数的实例</span><br>  <span class=\"hljs-comment\"># outer是外部函数 a和b都是外函数的临时变量</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"> a </span>):</span><br>    b = <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>():</span>  <span class=\"hljs-comment\"># inner是内函数</span><br>        print(a+b)  <span class=\"hljs-comment\">#在内函数中 用到了外函数的临时变量</span><br>    <span class=\"hljs-keyword\">return</span> inner  <span class=\"hljs-comment\"># 外函数的返回值是内函数的引用</span><br><br>  <span class=\"hljs-comment\"># 在这里我们调用外函数传入参数5</span><br>  <span class=\"hljs-comment\">#此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo</span><br>  <span class=\"hljs-comment\"># 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span><br>  demo = outer(<span class=\"hljs-number\">5</span>)<br><br>  <span class=\"hljs-comment\"># 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span><br>  <span class=\"hljs-comment\"># demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span><br>  demo() <span class=\"hljs-comment\"># 15</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>inner</code>函数修改<code>outer</code>函数变量</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">createCounter</span>():</span><br>  i = <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">counter</span>():</span><br>     <span class=\"hljs-keyword\">nonlocal</span> i <span class=\"hljs-comment\"># 指定外部函数的局部变量</span><br>     i = i + <span class=\"hljs-number\">1</span><br>     <span class=\"hljs-keyword\">return</span> i<br>  <span class=\"hljs-keyword\">return</span> counter<br><br>counterA = createCounter()<br>print(counterA(), counterA(), counterA(), counterA(), counterA()) <span class=\"hljs-comment\"># 1 2 3 4 5</span><br>counterB = createCounter()<br><span class=\"hljs-keyword\">if</span> [counterB(), counterB(), counterB(), counterB()] == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]:<br>   print(<span class=\"hljs-string\">&#x27;测试通过!&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>   print(<span class=\"hljs-string\">&#x27;测试失败!&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><h3 id=\"装饰器介绍\"><a href=\"#装饰器介绍\" class=\"headerlink\" title=\"装饰器介绍\"></a>装饰器介绍</h3><p>要了解python中<code>@</code>装饰器的作用，首先要记住这么几点：</p>\n<blockquote>\n<p>  装饰器符号<code>@</code>属于语法糖</p>\n</blockquote>\n<p>什么意思呢？</p>\n<ul>\n<li>就是说，我不按照<code>@</code>装饰器的语法要求来写，而是按照一般<code>python</code>的语法要求来写完全可以。</li>\n<li>那么用<code>@</code>装饰器的格式来写的目的就是为了书写简单方便</li>\n</ul>\n<p><strong>注意：装饰器是用于拓展已有函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，实际上就是利用闭包语法实现的。</strong></p>\n<h3 id=\"装饰器语法\"><a href=\"#装饰器语法\" class=\"headerlink\" title=\"装饰器语法\"></a>装饰器语法</h3><p>装饰器的作用是什么呢？ 简单的理解就是：装饰原有的函数。什么意思呢？</p>\n<p>比如有一个函数<code>func(a, b)</code>，它的功能是求<code>a</code>,<code>b</code>的差值</p>\n<p>现在有一个新需求，就是想对函数功能再装饰下，求完差值后再取绝对值，但是不能能修改原有函数，这时候就需要装饰器装饰函数     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">函数闭包实现求差值之后，再求绝对值</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">a, b</span>):</span><br>    <span class=\"hljs-keyword\">return</span> a- b<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">abs_num</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">a, b</span>):</span><br>        ret = func(a, b)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(ret)<br>    <span class=\"hljs-keyword\">return</span> inner<br><br><span class=\"hljs-meta\">@abs_num</span><br>func(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>当<code>abs_num</code>装饰函数<code>func</code>时，类似于将函数<code>func</code>作为参数传给<code>abs_num</code>,并将返回值即内层函数(<code>inner</code>)名重新赋值给变量<code>func</code></p>\n</li>\n<li><p>当调用函数<code>func</code>时，实质是调用内层函数<code>inner</code>，在内层函数中执行<code>func</code>函数，即最原始的函数<code>func</code></p>\n</li>\n</ul>\n<h3 id=\"装饰器分类\"><a href=\"#装饰器分类\" class=\"headerlink\" title=\"装饰器分类\"></a>装饰器分类</h3><h4 id=\"被装饰函数有参数\"><a href=\"#被装饰函数有参数\" class=\"headerlink\" title=\"被装饰函数有参数\"></a>被装饰函数有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">x, y</span>):</span><br>        func(x, y)  <span class=\"hljs-comment\"># 新版的 func  才是 原来的 add</span><br><br>    <span class=\"hljs-keyword\">return</span> inner<br><br><br><span class=\"hljs-meta\">@outer</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    print(x + y)<br><br><br>add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 新版的 add  是 内层 inner</span><br><br><span class=\"hljs-comment\"># add(1, 2)   ====&gt;  inner(1, 2)  ====&gt;  func(1, 2)  ===&gt; 3</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>被装饰函数 有参数，<code>inner</code>和 <code>func</code>需要同样的参数</p>\n</blockquote>\n<h4 id=\"被装饰函数有返回值\"><a href=\"#被装饰函数有返回值\" class=\"headerlink\" title=\"被装饰函数有返回值\"></a>被装饰函数有返回值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">x, y</span>):</span><br><br>        r = func(x, y)  <span class=\"hljs-comment\"># 装饰器装饰之后， func才是真正的add求和函数</span><br>        <br>        r += <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># 将两数之和再加 10</span><br>        <br>        <span class=\"hljs-keyword\">return</span> r<br><br>    <span class=\"hljs-keyword\">return</span> inner<br><br><br><span class=\"hljs-meta\">@outer</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x + y<br><br><br><span class=\"hljs-comment\"># 在装饰器中 对函数的执行结果 加10 处理</span><br>r = add(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">200</span>)  <span class=\"hljs-comment\"># add实际是inner</span><br>print(r)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>被装饰函数有返回值， <code>inner</code>需要将 <code>func</code> 的结果 返回</p>\n</blockquote>\n<h4 id=\"被装饰的函数有不定长参数\"><a href=\"#被装饰的函数有不定长参数\" class=\"headerlink\" title=\"被装饰的函数有不定长参数\"></a>被装饰的函数有不定长参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>        <br>        <span class=\"hljs-comment\"># func(args, kwargs),此时得到的是元组和字典</span><br>        <span class=\"hljs-comment\"># func(*args, **kwargs),此时则是把元素拆包为单个数值和键值对</span><br>        <span class=\"hljs-keyword\">return</span> func(*args, **kwargs)<br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-meta\">@set_func</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>(<span class=\"hljs-params\">a, b, *args, **kwargs</span>):</span><br><br>    print(a, b, args, kwargs)<br><br><br>s(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">34</span>, c=<span class=\"hljs-number\">20</span>, d=<span class=\"hljs-number\">56</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>形参<ul>\n<li>*args：接收多余的参数，得到元组(args)</li>\n<li>**kwargs:接收多余的关键字参数，得到字典(kwargs)</li>\n</ul>\n</li>\n<li>实参<ul>\n<li>*args：对元组(args)进行拆包，得到单个数值</li>\n<li>**kwargs：对字典(kwargs)拆包，得到单个的键值对</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多个装饰器装饰函数\"><a href=\"#多个装饰器装饰函数\" class=\"headerlink\" title=\"多个装饰器装饰函数\"></a>多个装饰器装饰函数</h4><ul>\n<li><p>多个装饰器装饰同一个函数，装饰顺序和执行顺序正好相反</p>\n</li>\n<li><p>装饰器函数的执行顺序和装饰器的顺序有关</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func1</span>(<span class=\"hljs-params\">func</span>):</span><br>    print(<span class=\"hljs-string\">&quot;这是测试1...&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func1</span>():</span><br>        print(<span class=\"hljs-string\">&quot;这是装饰器1...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> func()<br><br>    <span class=\"hljs-keyword\">return</span> call_func1<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func2</span>(<span class=\"hljs-params\">func</span>):</span><br>    print(<span class=\"hljs-string\">&quot;这是测试2...&quot;</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func2</span>():</span><br>        print(<span class=\"hljs-string\">&quot;这是装饰器2...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> func()<br><br>    <span class=\"hljs-keyword\">return</span> call_func2<br><br><br><span class=\"hljs-meta\">@set_func1</span><br><span class=\"hljs-meta\">@set_func2</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br><br>s()<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>代码从上到下，依次执行，同时装饰器是用来装饰函数的</p>\n<ul>\n<li><p>执行到装饰器set_func1时，无法装饰，先跳过</p>\n</li>\n<li><p>执行装饰器set_func2时，装饰原始函数s，</p>\n<ul>\n<li>先执行set_func2,输出”这是测试2…”，</li>\n<li>然后得到s = call_func2(s)，此时的s是原始函数s</li>\n</ul>\n</li>\n<li><p>然后装饰器set_func1装饰新得到的函数s = call_func2(s)</p>\n<ul>\n<li>先执行set_func1,输出”这是测试1…”</li>\n<li>然后得到s = call_func1(s)，此时的s是新得到的函数s = call_func2(s)</li>\n</ul>\n</li>\n<li><p>最后得到函数s = call_func1(call_func(s))</p>\n</li>\n<li><p>最后执行函数s</p>\n<ul>\n<li>先执行call_func1,输出”这是装饰器1…”</li>\n<li>再执行call_func2,输出”这是装饰器2…”</li>\n<li>最后执行原始函数s，输出”hello…”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"装饰器带参\"><a href=\"#装饰器带参\" class=\"headerlink\" title=\"装饰器带参\"></a>装饰器带参</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_pars</span>(<span class=\"hljs-params\">pars</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func</span>(<span class=\"hljs-params\">func</span>):</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            print(<span class=\"hljs-string\">&quot;這是測試級別%d&quot;</span> % pars)<br>            <span class=\"hljs-keyword\">return</span> func()<br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_func<br><br><span class=\"hljs-meta\">@set_pars(<span class=\"hljs-params\"><span class=\"hljs-number\">10</span></span>) </span><span class=\"hljs-comment\"># 装饰分两步</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br>s()<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li>装饰器带参时，装饰函数过程分两步：<ul>\n<li>将参数传给函数set_pars，进行执行</li>\n<li>将函数返回结果作为函数s的装饰器进行装饰</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, func</span>):</span><br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__call__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):</span>  <br>        <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">        魔法方法__call__可以将对象设置为可调用对象（callable）,允许一个类的实例像函数一样被调用 </span><br><span class=\"hljs-string\">        &#x27;&#x27;&#x27;</span><br>        print(<span class=\"hljs-string\">&quot;这是类装饰器...&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> self.func(*args, **kwargs)<br><br><span class=\"hljs-meta\">@Test  </span><span class=\"hljs-comment\"># s = Test(s)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>(<span class=\"hljs-params\">*args, **kwargs</span>):</span><br>    print(<span class=\"hljs-string\">&quot;hello python...&quot;</span>)<br><br>s()<br><br></code></pre></td></tr></table></figure>\n<ul>\n<li>自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号()应用到某个对象身上都可称之为可调用对象</li>\n<li>判断对象是否为可调用对象可以用函数 callable</li>\n<li>如果在类中实现了 <strong>call</strong> 方法，那么实例对象也将成为一个可调用对象</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"装饰器处理响应值\"><a href=\"#装饰器处理响应值\" class=\"headerlink\" title=\"装饰器处理响应值\"></a>装饰器处理响应值</h4><p>函数input_str中，会获取用户输入字符串，并返回其结果，利用装饰器将其字符串先加上<code>&lt;b&gt;&lt;/b&gt;</code>标签，再添加<code>&lt;i&gt;&lt;/i&gt;</code>标签，如：<code>&lt;i&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/&gt;</code>。注意：<strong>利用双层装饰器实现</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func_b</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;b&gt;&quot;</span> + func() + <span class=\"hljs-string\">&quot;&lt;/b&gt;&quot;</span><br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_func_i</span>(<span class=\"hljs-params\">func</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&lt;i&gt;&quot;</span> + func() + <span class=\"hljs-string\">&quot;&lt;/i&gt;&quot;</span><br><br>    <span class=\"hljs-keyword\">return</span> call_func<br><br><span class=\"hljs-meta\">@set_func_i</span><br><span class=\"hljs-meta\">@set_func_b</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">input_str</span>():</span><br>    <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入：&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span><br><br>print(input_str())<br></code></pre></td></tr></table></figure>\n<h4 id=\"装饰器限频\"><a href=\"#装饰器限频\" class=\"headerlink\" title=\"装饰器限频\"></a>装饰器限频</h4><p>请实现一个装饰器,限制该函数被调用的频率,如10秒一次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_time</span>(<span class=\"hljs-params\">t</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_num</span>(<span class=\"hljs-params\">func</span>):</span><br>        dic = &#123;<span class=\"hljs-string\">&quot;last_time&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;time_interval&quot;</span>: t&#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            now_time = time.time()<br><br>            finall_time = dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] + dic[<span class=\"hljs-string\">&quot;time_interval&quot;</span>]<br>            <span class=\"hljs-keyword\">if</span> finall_time &lt;= now_time:<br>                dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = now_time<br>                ret = func()<br><br>                <span class=\"hljs-keyword\">return</span> ret<br>            <span class=\"hljs-keyword\">else</span>:<br>                print(<span class=\"hljs-string\">&quot;还有%.2fs才能调用该函数&quot;</span> % (finall_time - now_time))<br><br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_num<br><br><span class=\"hljs-meta\">@set_time(<span class=\"hljs-params\"><span class=\"hljs-number\">5</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>请实现一个装饰器,限制该函数每个间隔被调用的频率,如1分钟5次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_time</span>(<span class=\"hljs-params\">t, n</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_num</span>(<span class=\"hljs-params\">func</span>):</span><br>        dic = &#123;<span class=\"hljs-string\">&quot;last_time&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;time_interval&quot;</span>: t, <span class=\"hljs-string\">&quot;num&quot;</span>: <span class=\"hljs-number\">0</span>&#125;<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call_func</span>():</span><br>            now_time = time.time()<br><br>            finall_time = dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] + dic[<span class=\"hljs-string\">&quot;time_interval&quot;</span>] <span class=\"hljs-comment\"># 代表可以重新调用的时间</span><br>            finall_num = dic[<span class=\"hljs-string\">&quot;num&quot;</span>] <span class=\"hljs-comment\"># 代表调用的次数</span><br><br>            <span class=\"hljs-keyword\">if</span> finall_num &lt; n: <span class=\"hljs-comment\"># 当次数不满足时，可以继续调用</span><br>                <span class=\"hljs-keyword\">if</span> finall_num == <span class=\"hljs-number\">0</span>:<br>                    dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = now_time<br>                dic[<span class=\"hljs-string\">&quot;num&quot;</span>] += <span class=\"hljs-number\">1</span><br><br>                <span class=\"hljs-keyword\">return</span> func()<br><br>            <span class=\"hljs-keyword\">elif</span> now_time &gt;= finall_time: <span class=\"hljs-comment\"># 已经超出时间，可以重新调用</span><br>                dic[<span class=\"hljs-string\">&quot;num&quot;</span>] = <span class=\"hljs-number\">0</span><br>                dic[<span class=\"hljs-string\">&quot;last_time&quot;</span>] = <span class=\"hljs-number\">0</span><br><br>                <span class=\"hljs-keyword\">return</span> func()<br>            <span class=\"hljs-keyword\">else</span>:<br>                print(<span class=\"hljs-string\">&quot;还有%.2fs才能调用该函数&quot;</span> % (finall_time - now_time))<br>        <span class=\"hljs-keyword\">return</span> call_func<br>    <span class=\"hljs-keyword\">return</span> set_num<br><br><span class=\"hljs-meta\">@set_time(<span class=\"hljs-params\"><span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">5</span></span>)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s</span>():</span><br>    print(<span class=\"hljs-string\">&quot;hello...&quot;</span>)<br><br>s()<br>s()<br>s()<br>time.sleep(<span class=\"hljs-number\">2</span>)<br>s()<br></code></pre></td></tr></table></figure>"},{"title":"python递归函数","date":"2020-06-06T03:16:01.000Z","_content":"\n## 定义\n\n函数调用函数自身，这种方式称为递归，这种函数称为递归函数\n\n> 递归函数使用过程中，需要找到`不变的规律`和停止递归的`边界条件`， \n>\n> 因为函数自身调用自身，函数本身的结构不变，只是`每次传的参数改变`啦\n>\n> 递归实现过程(**扩展**)：利用栈的思想，先找边界条件，同时将后面的任务存起来，一直到最前面的边界条件，然后回去，每次从栈中取任务，进行计算，一直到最后一个任务取完，结果也计算完毕\n\n## 递归过程:\n\n- 递归前进段\n- 递归边界条件\n- 递归返回段\n\n## 案例讲解\n\n#### 递归实现吸烟问题\n\n吸烟有危害，不仅仅危害人体健康，还会对社会产生不良的影响。吸烟还很容易引起喉头炎、气管炎，肺气肿等问题； 那么现在假设人一生抽烟10000根达到极限峰值，再抽一根烟就像压倒骆驼的最后一根稻草，会使人体爆发疾病问题； 每天一个人抽烟的个数都比前天多一根（第一天抽一根），且一周只有工作日（周一~周五）会吸烟； 请使用递归的方式求出一个人按照以上方式抽烟达到10000根，爆发疾病需要历经多少天\n\n```python\ndef smoker(day, count, amount):\n    \"\"\"\n    递归解决吸烟问题\n    :param day: 当前的天数\n    :param count: 当天的吸烟数量\n    :param amount: 总计的吸烟数量\n    :return: 吸到10000根烟的天数\n    \"\"\"\n    if amount >= 10000:\n        # 如果吸烟总数大于10000， 返回天数\n        return day\n\n    else:\n        day += 1 # 每吸一次烟，天数加1\n        if day % 7 != 6 and day % 7 != 0:\n            # 只有周六，周日不吸烟，判断不是周六，也不是周日\n            count += 1 # 当天吸烟的数量\n            amount += count # 目前为止，吸烟的总数量\n\n        return smoker(day, count, amount)\n\n\nprint(smoker(1, 1, 1)) # 第1天，吸了1根烟，总共吸了1根烟\n```\n\n#### 青蛙跳台阶问题\n\n\n\n### 汉诺塔问题\n\n\n\n### 青蛙过河问题","source":"_posts/python函数-递归函数.md","raw":"---\ntitle: python递归函数\ndate: 2020-06-06 11:16:01\ncategories:\n- 技术\n- python\n- 基础\ntags:\n- 递归函数\n---\n\n## 定义\n\n函数调用函数自身，这种方式称为递归，这种函数称为递归函数\n\n> 递归函数使用过程中，需要找到`不变的规律`和停止递归的`边界条件`， \n>\n> 因为函数自身调用自身，函数本身的结构不变，只是`每次传的参数改变`啦\n>\n> 递归实现过程(**扩展**)：利用栈的思想，先找边界条件，同时将后面的任务存起来，一直到最前面的边界条件，然后回去，每次从栈中取任务，进行计算，一直到最后一个任务取完，结果也计算完毕\n\n## 递归过程:\n\n- 递归前进段\n- 递归边界条件\n- 递归返回段\n\n## 案例讲解\n\n#### 递归实现吸烟问题\n\n吸烟有危害，不仅仅危害人体健康，还会对社会产生不良的影响。吸烟还很容易引起喉头炎、气管炎，肺气肿等问题； 那么现在假设人一生抽烟10000根达到极限峰值，再抽一根烟就像压倒骆驼的最后一根稻草，会使人体爆发疾病问题； 每天一个人抽烟的个数都比前天多一根（第一天抽一根），且一周只有工作日（周一~周五）会吸烟； 请使用递归的方式求出一个人按照以上方式抽烟达到10000根，爆发疾病需要历经多少天\n\n```python\ndef smoker(day, count, amount):\n    \"\"\"\n    递归解决吸烟问题\n    :param day: 当前的天数\n    :param count: 当天的吸烟数量\n    :param amount: 总计的吸烟数量\n    :return: 吸到10000根烟的天数\n    \"\"\"\n    if amount >= 10000:\n        # 如果吸烟总数大于10000， 返回天数\n        return day\n\n    else:\n        day += 1 # 每吸一次烟，天数加1\n        if day % 7 != 6 and day % 7 != 0:\n            # 只有周六，周日不吸烟，判断不是周六，也不是周日\n            count += 1 # 当天吸烟的数量\n            amount += count # 目前为止，吸烟的总数量\n\n        return smoker(day, count, amount)\n\n\nprint(smoker(1, 1, 1)) # 第1天，吸了1根烟，总共吸了1根烟\n```\n\n#### 青蛙跳台阶问题\n\n\n\n### 汉诺塔问题\n\n\n\n### 青蛙过河问题","slug":"python函数-递归函数","published":1,"updated":"2021-01-23T14:59:58.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucd001njjln17a76fhu","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>函数调用函数自身，这种方式称为递归，这种函数称为递归函数</p>\n<blockquote>\n<p>递归函数使用过程中，需要找到<code>不变的规律</code>和停止递归的<code>边界条件</code>， </p>\n<p>因为函数自身调用自身，函数本身的结构不变，只是<code>每次传的参数改变</code>啦</p>\n<p>递归实现过程(<strong>扩展</strong>)：利用栈的思想，先找边界条件，同时将后面的任务存起来，一直到最前面的边界条件，然后回去，每次从栈中取任务，进行计算，一直到最后一个任务取完，结果也计算完毕</p>\n</blockquote>\n<h2 id=\"递归过程\"><a href=\"#递归过程\" class=\"headerlink\" title=\"递归过程:\"></a>递归过程:</h2><ul>\n<li>递归前进段</li>\n<li>递归边界条件</li>\n<li>递归返回段</li>\n</ul>\n<h2 id=\"案例讲解\"><a href=\"#案例讲解\" class=\"headerlink\" title=\"案例讲解\"></a>案例讲解</h2><h4 id=\"递归实现吸烟问题\"><a href=\"#递归实现吸烟问题\" class=\"headerlink\" title=\"递归实现吸烟问题\"></a>递归实现吸烟问题</h4><p>吸烟有危害，不仅仅危害人体健康，还会对社会产生不良的影响。吸烟还很容易引起喉头炎、气管炎，肺气肿等问题； 那么现在假设人一生抽烟10000根达到极限峰值，再抽一根烟就像压倒骆驼的最后一根稻草，会使人体爆发疾病问题； 每天一个人抽烟的个数都比前天多一根（第一天抽一根），且一周只有工作日（周一~周五）会吸烟； 请使用递归的方式求出一个人按照以上方式抽烟达到10000根，爆发疾病需要历经多少天</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">smoker</span>(<span class=\"hljs-params\">day, count, amount</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    递归解决吸烟问题</span><br><span class=\"hljs-string\">    :param day: 当前的天数</span><br><span class=\"hljs-string\">    :param count: 当天的吸烟数量</span><br><span class=\"hljs-string\">    :param amount: 总计的吸烟数量</span><br><span class=\"hljs-string\">    :return: 吸到10000根烟的天数</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> amount &gt;= <span class=\"hljs-number\">10000</span>:<br>        <span class=\"hljs-comment\"># 如果吸烟总数大于10000， 返回天数</span><br>        <span class=\"hljs-keyword\">return</span> day<br><br>    <span class=\"hljs-keyword\">else</span>:<br>        day += <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 每吸一次烟，天数加1</span><br>        <span class=\"hljs-keyword\">if</span> day % <span class=\"hljs-number\">7</span> != <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">and</span> day % <span class=\"hljs-number\">7</span> != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-comment\"># 只有周六，周日不吸烟，判断不是周六，也不是周日</span><br>            count += <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 当天吸烟的数量</span><br>            amount += count <span class=\"hljs-comment\"># 目前为止，吸烟的总数量</span><br><br>        <span class=\"hljs-keyword\">return</span> smoker(day, count, amount)<br><br><br>print(smoker(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\"># 第1天，吸了1根烟，总共吸了1根烟</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"青蛙跳台阶问题\"><a href=\"#青蛙跳台阶问题\" class=\"headerlink\" title=\"青蛙跳台阶问题\"></a>青蛙跳台阶问题</h4><h3 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h3><h3 id=\"青蛙过河问题\"><a href=\"#青蛙过河问题\" class=\"headerlink\" title=\"青蛙过河问题\"></a>青蛙过河问题</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>函数调用函数自身，这种方式称为递归，这种函数称为递归函数</p>\n<blockquote>\n<p>递归函数使用过程中，需要找到<code>不变的规律</code>和停止递归的<code>边界条件</code>， </p>\n<p>因为函数自身调用自身，函数本身的结构不变，只是<code>每次传的参数改变</code>啦</p>\n<p>递归实现过程(<strong>扩展</strong>)：利用栈的思想，先找边界条件，同时将后面的任务存起来，一直到最前面的边界条件，然后回去，每次从栈中取任务，进行计算，一直到最后一个任务取完，结果也计算完毕</p>\n</blockquote>\n<h2 id=\"递归过程\"><a href=\"#递归过程\" class=\"headerlink\" title=\"递归过程:\"></a>递归过程:</h2><ul>\n<li>递归前进段</li>\n<li>递归边界条件</li>\n<li>递归返回段</li>\n</ul>\n<h2 id=\"案例讲解\"><a href=\"#案例讲解\" class=\"headerlink\" title=\"案例讲解\"></a>案例讲解</h2><h4 id=\"递归实现吸烟问题\"><a href=\"#递归实现吸烟问题\" class=\"headerlink\" title=\"递归实现吸烟问题\"></a>递归实现吸烟问题</h4><p>吸烟有危害，不仅仅危害人体健康，还会对社会产生不良的影响。吸烟还很容易引起喉头炎、气管炎，肺气肿等问题； 那么现在假设人一生抽烟10000根达到极限峰值，再抽一根烟就像压倒骆驼的最后一根稻草，会使人体爆发疾病问题； 每天一个人抽烟的个数都比前天多一根（第一天抽一根），且一周只有工作日（周一~周五）会吸烟； 请使用递归的方式求出一个人按照以上方式抽烟达到10000根，爆发疾病需要历经多少天</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">smoker</span>(<span class=\"hljs-params\">day, count, amount</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    递归解决吸烟问题</span><br><span class=\"hljs-string\">    :param day: 当前的天数</span><br><span class=\"hljs-string\">    :param count: 当天的吸烟数量</span><br><span class=\"hljs-string\">    :param amount: 总计的吸烟数量</span><br><span class=\"hljs-string\">    :return: 吸到10000根烟的天数</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> amount &gt;= <span class=\"hljs-number\">10000</span>:<br>        <span class=\"hljs-comment\"># 如果吸烟总数大于10000， 返回天数</span><br>        <span class=\"hljs-keyword\">return</span> day<br><br>    <span class=\"hljs-keyword\">else</span>:<br>        day += <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 每吸一次烟，天数加1</span><br>        <span class=\"hljs-keyword\">if</span> day % <span class=\"hljs-number\">7</span> != <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">and</span> day % <span class=\"hljs-number\">7</span> != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-comment\"># 只有周六，周日不吸烟，判断不是周六，也不是周日</span><br>            count += <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># 当天吸烟的数量</span><br>            amount += count <span class=\"hljs-comment\"># 目前为止，吸烟的总数量</span><br><br>        <span class=\"hljs-keyword\">return</span> smoker(day, count, amount)<br><br><br>print(smoker(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\"># 第1天，吸了1根烟，总共吸了1根烟</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"青蛙跳台阶问题\"><a href=\"#青蛙跳台阶问题\" class=\"headerlink\" title=\"青蛙跳台阶问题\"></a>青蛙跳台阶问题</h4><h3 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h3><h3 id=\"青蛙过河问题\"><a href=\"#青蛙过河问题\" class=\"headerlink\" title=\"青蛙过河问题\"></a>青蛙过河问题</h3>"},{"title":"python高阶函数","date":"2020-06-06T03:13:12.000Z","_content":"\n## 高阶函数介绍\n\n### 定义\n\n当一个函数 接收 另一个函数作为参数， 它就是 `高阶函数`\n\n### 示例\n\n```python\ndef func(a, x, y):\n    a(x, y)  # a就是传递的 函数参数f，  执行 a 相当于 执行  f\n\ndef f(x, y):\n    print(x + y)\n\nfunc(f, 1, 2)  # 3， 在函数f执行过程中，输出 3\n```\n\n## 四大高阶函数\n\n### `map(func, iterable)`\n\n>将 **可迭代对象** 中的每个值 按照 第一个参数( **函数**)的 规则 依次 处理， 得到一个 新的 **迭代器** 对象\n\n\n```python\ndef func(alist):\n    \"\"\"\n    :param alist: 接收列表作为参数\n    :return: 将列表中每个数字，求平方之后，返回一个新列表\n    \"\"\"\n\n    def sqr(x):\n        return x * x\n\n    r = map(sqr, alist) # r是迭代器对象\n\n    return list(r)  # 将迭代器对象转换为列表\n\n\nr = func([11, 22, 33, 44, 55])\nprint(r)\n```\n\n\n\n```python\n# 定义函数， 接收 列表 作为参数 ， 返回一个 包含 绝对值  的新列表\n# abs()：python内置函数，求一个数的绝对值\ndef func(alist):\n    # map 高阶函数需要的参数，不用管是内置的，还是自定义的\n    r = map(abs, alist)\n    return list(r)\n\n\nr = func([-12, 34, 56, -98])\n\nprint(r)  # [12, 34, 56, 98]\n```\n\n\n\n```python\n# 定义函数，接收 一个 包含 单词的字符串， 返回 一个 每个单词 首字母大写 的字符串\ndef func(astr):\n    # 将字符串切分为单词列表\n    wlist = astr.split()\n\n    def toUpper(x):\n        return x.title()\n\n    r = map(toUpper, wlist)\n\n    # 将单词拼接为字符串\n    s = \" \".join(r)\n\n    return s\n\n\nr = func(\"a good  fruit apple\")\n\nprint(r)  # \" A Good  Fruit Apple\"\n\n# 提示： 可以考虑 将 字符串按照 单词 切分， map处理之后， 再 重新拼接为字符串\n```\n\n### `reduce(func, iterable)`\n\n> 将可迭代对象中所有的元素，按照第一个 函数的规则， 连续操作，得到一个  **具体的数据**\n\n```python\nfrom functools import reduce\n\n\n# 自定义一个Mysum()函数，接收一个列表作为参数， 返回列表中所有元素之和\ndef mysum(alist):\n    def add(x, y):\n        return x + y\n\n    r = reduce(add, alist) # reduce 的结果是一个具体的值\n\n    return r\n\n\nr = mysum([1, 2, 3, 4, 5])\nprint(r)  # 15\n```\n\n### `filter(func, iterable)`\n\n> 按照第一个 函数的 **返回值** 对 可迭代对象 中 所有的数据 进行 过滤， 得到一个 包含过滤后结果的 **迭代器对象**\n\n```python\n# 自定义一个filterNumber()函数，接收一个列表作为参数， 返回一个 包含偶数 的列表\n\ndef filterNumber(alist):\n    def is_even(x):\n        \"\"\"如果函数的返回结果为True, 对应的元素可以得到\"\"\"\n        if x % 2 == 0:\n            return True\n\n    r = filter(is_even, alist)  # r也是迭代器对象\n\n    return list(r)  # 通过类型转换，将迭代器中数据取出\n\n\nr = filterNumber([1, 2, 3, 4, 5, 6])\nprint(r)  # [2, 4, 6]]\n```\n\n```python\n# 自定义一个函数 sevenNumber()函数，接收一个列表作为参数， 返回一个 包含 \"逢7必过\" 数字的新列表\ndef sevenNumber(alist):\n    def f(x):\n        # 判断为7的倍数，返回True\n        if x % 7 == 0 or '7' in str(x):\n            return True\n\n    r = filter(f, alist)  # r是迭代器对象\n\n    return list(r)\n\n\nr = sevenNumber(range(1, 101))\nprint(r)\n```\n\n\n\n### `sorted(iterable, key=func, reverse=False)`\n\n> 默认将列表 按照 升序 排序\n\n```python\nalist = [21, 14, -67, -34, 19]\n\n# 按照 数字大小 升序 排序\nr = sorted(alist)\nprint(r)  # [-67, -34, 14, 19, 21]\n\n# 按照 数字大小 降序 排序\nr = sorted(alist, reverse=True)\nprint(r)  # [21, 19, 14, -34, -67]\n\n# 按照每 个数字的绝对值 升序 排序\nr = sorted(alist, key=abs)\nprint(r)  # [14, 19, 21, -34, -67]\n\n# 按照 每个数字的绝对值 降序 排序\nr = sorted(alist, key=abs, reverse=True)\nprint(r)  # [-67, -34, 21, 19, 14]\n```\n","source":"_posts/python函数-高阶函数.md","raw":"---\ntitle: python高阶函数\ndate: 2020-06-06 11:13:12\ncategories:\n- 技术\n- python\n- 基础\ntags:\n- 高阶函数\n- sorted\n- map\n- reduce\n- filter\n---\n\n## 高阶函数介绍\n\n### 定义\n\n当一个函数 接收 另一个函数作为参数， 它就是 `高阶函数`\n\n### 示例\n\n```python\ndef func(a, x, y):\n    a(x, y)  # a就是传递的 函数参数f，  执行 a 相当于 执行  f\n\ndef f(x, y):\n    print(x + y)\n\nfunc(f, 1, 2)  # 3， 在函数f执行过程中，输出 3\n```\n\n## 四大高阶函数\n\n### `map(func, iterable)`\n\n>将 **可迭代对象** 中的每个值 按照 第一个参数( **函数**)的 规则 依次 处理， 得到一个 新的 **迭代器** 对象\n\n\n```python\ndef func(alist):\n    \"\"\"\n    :param alist: 接收列表作为参数\n    :return: 将列表中每个数字，求平方之后，返回一个新列表\n    \"\"\"\n\n    def sqr(x):\n        return x * x\n\n    r = map(sqr, alist) # r是迭代器对象\n\n    return list(r)  # 将迭代器对象转换为列表\n\n\nr = func([11, 22, 33, 44, 55])\nprint(r)\n```\n\n\n\n```python\n# 定义函数， 接收 列表 作为参数 ， 返回一个 包含 绝对值  的新列表\n# abs()：python内置函数，求一个数的绝对值\ndef func(alist):\n    # map 高阶函数需要的参数，不用管是内置的，还是自定义的\n    r = map(abs, alist)\n    return list(r)\n\n\nr = func([-12, 34, 56, -98])\n\nprint(r)  # [12, 34, 56, 98]\n```\n\n\n\n```python\n# 定义函数，接收 一个 包含 单词的字符串， 返回 一个 每个单词 首字母大写 的字符串\ndef func(astr):\n    # 将字符串切分为单词列表\n    wlist = astr.split()\n\n    def toUpper(x):\n        return x.title()\n\n    r = map(toUpper, wlist)\n\n    # 将单词拼接为字符串\n    s = \" \".join(r)\n\n    return s\n\n\nr = func(\"a good  fruit apple\")\n\nprint(r)  # \" A Good  Fruit Apple\"\n\n# 提示： 可以考虑 将 字符串按照 单词 切分， map处理之后， 再 重新拼接为字符串\n```\n\n### `reduce(func, iterable)`\n\n> 将可迭代对象中所有的元素，按照第一个 函数的规则， 连续操作，得到一个  **具体的数据**\n\n```python\nfrom functools import reduce\n\n\n# 自定义一个Mysum()函数，接收一个列表作为参数， 返回列表中所有元素之和\ndef mysum(alist):\n    def add(x, y):\n        return x + y\n\n    r = reduce(add, alist) # reduce 的结果是一个具体的值\n\n    return r\n\n\nr = mysum([1, 2, 3, 4, 5])\nprint(r)  # 15\n```\n\n### `filter(func, iterable)`\n\n> 按照第一个 函数的 **返回值** 对 可迭代对象 中 所有的数据 进行 过滤， 得到一个 包含过滤后结果的 **迭代器对象**\n\n```python\n# 自定义一个filterNumber()函数，接收一个列表作为参数， 返回一个 包含偶数 的列表\n\ndef filterNumber(alist):\n    def is_even(x):\n        \"\"\"如果函数的返回结果为True, 对应的元素可以得到\"\"\"\n        if x % 2 == 0:\n            return True\n\n    r = filter(is_even, alist)  # r也是迭代器对象\n\n    return list(r)  # 通过类型转换，将迭代器中数据取出\n\n\nr = filterNumber([1, 2, 3, 4, 5, 6])\nprint(r)  # [2, 4, 6]]\n```\n\n```python\n# 自定义一个函数 sevenNumber()函数，接收一个列表作为参数， 返回一个 包含 \"逢7必过\" 数字的新列表\ndef sevenNumber(alist):\n    def f(x):\n        # 判断为7的倍数，返回True\n        if x % 7 == 0 or '7' in str(x):\n            return True\n\n    r = filter(f, alist)  # r是迭代器对象\n\n    return list(r)\n\n\nr = sevenNumber(range(1, 101))\nprint(r)\n```\n\n\n\n### `sorted(iterable, key=func, reverse=False)`\n\n> 默认将列表 按照 升序 排序\n\n```python\nalist = [21, 14, -67, -34, 19]\n\n# 按照 数字大小 升序 排序\nr = sorted(alist)\nprint(r)  # [-67, -34, 14, 19, 21]\n\n# 按照 数字大小 降序 排序\nr = sorted(alist, reverse=True)\nprint(r)  # [21, 19, 14, -34, -67]\n\n# 按照每 个数字的绝对值 升序 排序\nr = sorted(alist, key=abs)\nprint(r)  # [14, 19, 21, -34, -67]\n\n# 按照 每个数字的绝对值 降序 排序\nr = sorted(alist, key=abs, reverse=True)\nprint(r)  # [-67, -34, 21, 19, 14]\n```\n","slug":"python函数-高阶函数","published":1,"updated":"2021-01-23T14:59:48.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucd001ojjlndwgc2h8b","content":"<h2 id=\"高阶函数介绍\"><a href=\"#高阶函数介绍\" class=\"headerlink\" title=\"高阶函数介绍\"></a>高阶函数介绍</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>当一个函数 接收 另一个函数作为参数， 它就是 <code>高阶函数</code></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">a, x, y</span>):</span><br>    a(x, y)  <span class=\"hljs-comment\"># a就是传递的 函数参数f，  执行 a 相当于 执行  f</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    print(x + y)<br><br>func(f, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 3， 在函数f执行过程中，输出 3</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"四大高阶函数\"><a href=\"#四大高阶函数\" class=\"headerlink\" title=\"四大高阶函数\"></a>四大高阶函数</h2><h3 id=\"map-func-iterable\"><a href=\"#map-func-iterable\" class=\"headerlink\" title=\"map(func, iterable)\"></a><code>map(func, iterable)</code></h3><blockquote>\n<p>将 <strong>可迭代对象</strong> 中的每个值 按照 第一个参数( <strong>函数</strong>)的 规则 依次 处理， 得到一个 新的 <strong>迭代器</strong> 对象</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    :param alist: 接收列表作为参数</span><br><span class=\"hljs-string\">    :return: 将列表中每个数字，求平方之后，返回一个新列表</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sqr</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x * x<br><br>    r = <span class=\"hljs-built_in\">map</span>(sqr, alist) <span class=\"hljs-comment\"># r是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)  <span class=\"hljs-comment\"># 将迭代器对象转换为列表</span><br><br><br>r = func([<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">55</span>])<br>print(r)<br></code></pre></div></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义函数， 接收 列表 作为参数 ， 返回一个 包含 绝对值  的新列表</span><br><span class=\"hljs-comment\"># abs()：python内置函数，求一个数的绝对值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-comment\"># map 高阶函数需要的参数，不用管是内置的，还是自定义的</span><br>    r = <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">abs</span>, alist)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)<br><br><br>r = func([-<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">56</span>, -<span class=\"hljs-number\">98</span>])<br><br>print(r)  <span class=\"hljs-comment\"># [12, 34, 56, 98]</span><br></code></pre></div></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义函数，接收 一个 包含 单词的字符串， 返回 一个 每个单词 首字母大写 的字符串</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">astr</span>):</span><br>    <span class=\"hljs-comment\"># 将字符串切分为单词列表</span><br>    wlist = astr.split()<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">toUpper</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x.title()<br><br>    r = <span class=\"hljs-built_in\">map</span>(toUpper, wlist)<br><br>    <span class=\"hljs-comment\"># 将单词拼接为字符串</span><br>    s = <span class=\"hljs-string\">&quot; &quot;</span>.join(r)<br><br>    <span class=\"hljs-keyword\">return</span> s<br><br><br>r = func(<span class=\"hljs-string\">&quot;a good  fruit apple&quot;</span>)<br><br>print(r)  <span class=\"hljs-comment\"># &quot; A Good  Fruit Apple&quot;</span><br><br><span class=\"hljs-comment\"># 提示： 可以考虑 将 字符串按照 单词 切分， map处理之后， 再 重新拼接为字符串</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"reduce-func-iterable\"><a href=\"#reduce-func-iterable\" class=\"headerlink\" title=\"reduce(func, iterable)\"></a><code>reduce(func, iterable)</code></h3><blockquote>\n<p>将可迭代对象中所有的元素，按照第一个 函数的规则， 连续操作，得到一个  <strong>具体的数据</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> reduce<br><br><br><span class=\"hljs-comment\"># 自定义一个Mysum()函数，接收一个列表作为参数， 返回列表中所有元素之和</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mysum</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x + y<br><br>    r = reduce(add, alist) <span class=\"hljs-comment\"># reduce 的结果是一个具体的值</span><br><br>    <span class=\"hljs-keyword\">return</span> r<br><br><br>r = mysum([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])<br>print(r)  <span class=\"hljs-comment\"># 15</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"filter-func-iterable\"><a href=\"#filter-func-iterable\" class=\"headerlink\" title=\"filter(func, iterable)\"></a><code>filter(func, iterable)</code></h3><blockquote>\n<p>按照第一个 函数的 <strong>返回值</strong> 对 可迭代对象 中 所有的数据 进行 过滤， 得到一个 包含过滤后结果的 <strong>迭代器对象</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义一个filterNumber()函数，接收一个列表作为参数， 返回一个 包含偶数 的列表</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">filterNumber</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_even</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;如果函数的返回结果为True, 对应的元素可以得到&quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br>    r = <span class=\"hljs-built_in\">filter</span>(is_even, alist)  <span class=\"hljs-comment\"># r也是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)  <span class=\"hljs-comment\"># 通过类型转换，将迭代器中数据取出</span><br><br><br>r = filterNumber([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>])<br>print(r)  <span class=\"hljs-comment\"># [2, 4, 6]]</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义一个函数 sevenNumber()函数，接收一个列表作为参数， 返回一个 包含 &quot;逢7必过&quot; 数字的新列表</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sevenNumber</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-comment\"># 判断为7的倍数，返回True</span><br>        <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">7</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&#x27;7&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">str</span>(x):<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br>    r = <span class=\"hljs-built_in\">filter</span>(f, alist)  <span class=\"hljs-comment\"># r是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)<br><br><br>r = sevenNumber(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>))<br>print(r)<br></code></pre></div></td></tr></table></figure>\n\n\n<h3 id=\"sorted-iterable-key-func-reverse-False\"><a href=\"#sorted-iterable-key-func-reverse-False\" class=\"headerlink\" title=\"sorted(iterable, key=func, reverse=False)\"></a><code>sorted(iterable, key=func, reverse=False)</code></h3><blockquote>\n<p>默认将列表 按照 升序 排序</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">alist = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">14</span>, -<span class=\"hljs-number\">67</span>, -<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">19</span>]<br><br><span class=\"hljs-comment\"># 按照 数字大小 升序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist)<br>print(r)  <span class=\"hljs-comment\"># [-67, -34, 14, 19, 21]</span><br><br><span class=\"hljs-comment\"># 按照 数字大小 降序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, reverse=<span class=\"hljs-literal\">True</span>)<br>print(r)  <span class=\"hljs-comment\"># [21, 19, 14, -34, -67]</span><br><br><span class=\"hljs-comment\"># 按照每 个数字的绝对值 升序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, key=<span class=\"hljs-built_in\">abs</span>)<br>print(r)  <span class=\"hljs-comment\"># [14, 19, 21, -34, -67]</span><br><br><span class=\"hljs-comment\"># 按照 每个数字的绝对值 降序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, key=<span class=\"hljs-built_in\">abs</span>, reverse=<span class=\"hljs-literal\">True</span>)<br>print(r)  <span class=\"hljs-comment\"># [-67, -34, 21, 19, 14]</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"高阶函数介绍\"><a href=\"#高阶函数介绍\" class=\"headerlink\" title=\"高阶函数介绍\"></a>高阶函数介绍</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>当一个函数 接收 另一个函数作为参数， 它就是 <code>高阶函数</code></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">a, x, y</span>):</span><br>    a(x, y)  <span class=\"hljs-comment\"># a就是传递的 函数参数f，  执行 a 相当于 执行  f</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    print(x + y)<br><br>func(f, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># 3， 在函数f执行过程中，输出 3</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"四大高阶函数\"><a href=\"#四大高阶函数\" class=\"headerlink\" title=\"四大高阶函数\"></a>四大高阶函数</h2><h3 id=\"map-func-iterable\"><a href=\"#map-func-iterable\" class=\"headerlink\" title=\"map(func, iterable)\"></a><code>map(func, iterable)</code></h3><blockquote>\n<p>将 <strong>可迭代对象</strong> 中的每个值 按照 第一个参数( <strong>函数</strong>)的 规则 依次 处理， 得到一个 新的 <strong>迭代器</strong> 对象</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    :param alist: 接收列表作为参数</span><br><span class=\"hljs-string\">    :return: 将列表中每个数字，求平方之后，返回一个新列表</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sqr</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x * x<br><br>    r = <span class=\"hljs-built_in\">map</span>(sqr, alist) <span class=\"hljs-comment\"># r是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)  <span class=\"hljs-comment\"># 将迭代器对象转换为列表</span><br><br><br>r = func([<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">55</span>])<br>print(r)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义函数， 接收 列表 作为参数 ， 返回一个 包含 绝对值  的新列表</span><br><span class=\"hljs-comment\"># abs()：python内置函数，求一个数的绝对值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-comment\"># map 高阶函数需要的参数，不用管是内置的，还是自定义的</span><br>    r = <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">abs</span>, alist)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)<br><br><br>r = func([-<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">56</span>, -<span class=\"hljs-number\">98</span>])<br><br>print(r)  <span class=\"hljs-comment\"># [12, 34, 56, 98]</span><br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 定义函数，接收 一个 包含 单词的字符串， 返回 一个 每个单词 首字母大写 的字符串</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">astr</span>):</span><br>    <span class=\"hljs-comment\"># 将字符串切分为单词列表</span><br>    wlist = astr.split()<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">toUpper</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x.title()<br><br>    r = <span class=\"hljs-built_in\">map</span>(toUpper, wlist)<br><br>    <span class=\"hljs-comment\"># 将单词拼接为字符串</span><br>    s = <span class=\"hljs-string\">&quot; &quot;</span>.join(r)<br><br>    <span class=\"hljs-keyword\">return</span> s<br><br><br>r = func(<span class=\"hljs-string\">&quot;a good  fruit apple&quot;</span>)<br><br>print(r)  <span class=\"hljs-comment\"># &quot; A Good  Fruit Apple&quot;</span><br><br><span class=\"hljs-comment\"># 提示： 可以考虑 将 字符串按照 单词 切分， map处理之后， 再 重新拼接为字符串</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"reduce-func-iterable\"><a href=\"#reduce-func-iterable\" class=\"headerlink\" title=\"reduce(func, iterable)\"></a><code>reduce(func, iterable)</code></h3><blockquote>\n<p>将可迭代对象中所有的元素，按照第一个 函数的规则， 连续操作，得到一个  <strong>具体的数据</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> reduce<br><br><br><span class=\"hljs-comment\"># 自定义一个Mysum()函数，接收一个列表作为参数， 返回列表中所有元素之和</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mysum</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>):</span><br>        <span class=\"hljs-keyword\">return</span> x + y<br><br>    r = reduce(add, alist) <span class=\"hljs-comment\"># reduce 的结果是一个具体的值</span><br><br>    <span class=\"hljs-keyword\">return</span> r<br><br><br>r = mysum([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])<br>print(r)  <span class=\"hljs-comment\"># 15</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"filter-func-iterable\"><a href=\"#filter-func-iterable\" class=\"headerlink\" title=\"filter(func, iterable)\"></a><code>filter(func, iterable)</code></h3><blockquote>\n<p>按照第一个 函数的 <strong>返回值</strong> 对 可迭代对象 中 所有的数据 进行 过滤， 得到一个 包含过滤后结果的 <strong>迭代器对象</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义一个filterNumber()函数，接收一个列表作为参数， 返回一个 包含偶数 的列表</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">filterNumber</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_even</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;如果函数的返回结果为True, 对应的元素可以得到&quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br>    r = <span class=\"hljs-built_in\">filter</span>(is_even, alist)  <span class=\"hljs-comment\"># r也是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)  <span class=\"hljs-comment\"># 通过类型转换，将迭代器中数据取出</span><br><br><br>r = filterNumber([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>])<br>print(r)  <span class=\"hljs-comment\"># [2, 4, 6]]</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义一个函数 sevenNumber()函数，接收一个列表作为参数， 返回一个 包含 &quot;逢7必过&quot; 数字的新列表</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sevenNumber</span>(<span class=\"hljs-params\">alist</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x</span>):</span><br>        <span class=\"hljs-comment\"># 判断为7的倍数，返回True</span><br>        <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">7</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&#x27;7&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">str</span>(x):<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br>    r = <span class=\"hljs-built_in\">filter</span>(f, alist)  <span class=\"hljs-comment\"># r是迭代器对象</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(r)<br><br><br>r = sevenNumber(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>))<br>print(r)<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"sorted-iterable-key-func-reverse-False\"><a href=\"#sorted-iterable-key-func-reverse-False\" class=\"headerlink\" title=\"sorted(iterable, key=func, reverse=False)\"></a><code>sorted(iterable, key=func, reverse=False)</code></h3><blockquote>\n<p>默认将列表 按照 升序 排序</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">alist = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">14</span>, -<span class=\"hljs-number\">67</span>, -<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">19</span>]<br><br><span class=\"hljs-comment\"># 按照 数字大小 升序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist)<br>print(r)  <span class=\"hljs-comment\"># [-67, -34, 14, 19, 21]</span><br><br><span class=\"hljs-comment\"># 按照 数字大小 降序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, reverse=<span class=\"hljs-literal\">True</span>)<br>print(r)  <span class=\"hljs-comment\"># [21, 19, 14, -34, -67]</span><br><br><span class=\"hljs-comment\"># 按照每 个数字的绝对值 升序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, key=<span class=\"hljs-built_in\">abs</span>)<br>print(r)  <span class=\"hljs-comment\"># [14, 19, 21, -34, -67]</span><br><br><span class=\"hljs-comment\"># 按照 每个数字的绝对值 降序 排序</span><br>r = <span class=\"hljs-built_in\">sorted</span>(alist, key=<span class=\"hljs-built_in\">abs</span>, reverse=<span class=\"hljs-literal\">True</span>)<br>print(r)  <span class=\"hljs-comment\"># [-67, -34, 21, 19, 14]</span><br></code></pre></td></tr></table></figure>"},{"title":"Json模块","date":"2019-11-25T06:30:27.000Z","_content":"\n### JSON介绍\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。\n\n#### JSON 语法规则\nJSON是一个标记符的序列。\nJSON是一个序列化的对象或数组。\n\n#### JSON 与 JS 对象的关系\n很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：\n**JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。**\n如\n```javascript\nvar obj = {a: 'Hello', b: 'World'}; //这是一个对象，注意键名也是可以使用引号包裹的\n\nvar json = '{\"a\": \"Hello\", \"b\": \"World\"}'; //这是一个 JSON 字符串，本质是一个字符串\n```\n#### JSON 和 JS 对象互转\n要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：\n```javascript\nvar obj = JSON.parse('{\"a\": \"Hello\", \"b\": \"World\"}'); //结果是 {a: 'Hello', b: 'World'}\n```\n要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：\n```javascript\nvar json = JSON.stringify({a: 'Hello', b: 'World'}); //结果是 '{\"a\": \"Hello\", \"b\": \"World\"}'\n```\n\n#### JSON 和 PYTHON 对象互转\n\n要实现从JSON字符串转换为Python对象，使用 json.loads() 方法：\n```python\nimport json\n\na_dict = json.loads('{\"a\": \"Hello\", \"b\": \"World\"}') //结果是 {'a': 'Hello', 'b': 'World'}\nb_list = json.loads('[1, 2, 3, 4]') //结果是 [1, 2, 3, 4]\n```\n要实现从Python对象转换为JSON字符串，使用 json.dumps() 方法：\n```python\nimport json\n\na_obj = json.dumps({a: 'Hello', b: 'World'}) //结果是 '{\"a\": \"Hello\", \"b\": \"World\"}'\nb_obj = json.dumps([1, 2, 3, {\"a\":7}]) //结果是 '[1, 2, 3, {\"a\": 7}]'\n```\n\n要实现从Python对象转换为JSON字符串，并写入到json文件中，使用 json.dump() 方法：\n```python\nimport json\n\na_obj = '[12, 34, 56]'\nwith open(\"1.json\", \"w\") as f:\n\tjson.dump(a_obj,f)\n```\n\n要实现从json文件中读取JSON字符串，并转换为Python对象，使用 json.load() 方法：\n```python\nimport json\n\nwith open('1.json', \"r\") as f:\n\ta_str = json.load(f)\n\tprint(a_str)\n```\n\n\n","source":"_posts/python模块-Json模块.md","raw":"---\ntitle: Json模块\ndate: 2019-11-25 14:30:27\ncategories: \n  - 技术\n  - python\n  - 模块\ntags:\n  - Json\n---\n\n### JSON介绍\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。\n\n#### JSON 语法规则\nJSON是一个标记符的序列。\nJSON是一个序列化的对象或数组。\n\n#### JSON 与 JS 对象的关系\n很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：\n**JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。**\n如\n```javascript\nvar obj = {a: 'Hello', b: 'World'}; //这是一个对象，注意键名也是可以使用引号包裹的\n\nvar json = '{\"a\": \"Hello\", \"b\": \"World\"}'; //这是一个 JSON 字符串，本质是一个字符串\n```\n#### JSON 和 JS 对象互转\n要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：\n```javascript\nvar obj = JSON.parse('{\"a\": \"Hello\", \"b\": \"World\"}'); //结果是 {a: 'Hello', b: 'World'}\n```\n要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：\n```javascript\nvar json = JSON.stringify({a: 'Hello', b: 'World'}); //结果是 '{\"a\": \"Hello\", \"b\": \"World\"}'\n```\n\n#### JSON 和 PYTHON 对象互转\n\n要实现从JSON字符串转换为Python对象，使用 json.loads() 方法：\n```python\nimport json\n\na_dict = json.loads('{\"a\": \"Hello\", \"b\": \"World\"}') //结果是 {'a': 'Hello', 'b': 'World'}\nb_list = json.loads('[1, 2, 3, 4]') //结果是 [1, 2, 3, 4]\n```\n要实现从Python对象转换为JSON字符串，使用 json.dumps() 方法：\n```python\nimport json\n\na_obj = json.dumps({a: 'Hello', b: 'World'}) //结果是 '{\"a\": \"Hello\", \"b\": \"World\"}'\nb_obj = json.dumps([1, 2, 3, {\"a\":7}]) //结果是 '[1, 2, 3, {\"a\": 7}]'\n```\n\n要实现从Python对象转换为JSON字符串，并写入到json文件中，使用 json.dump() 方法：\n```python\nimport json\n\na_obj = '[12, 34, 56]'\nwith open(\"1.json\", \"w\") as f:\n\tjson.dump(a_obj,f)\n```\n\n要实现从json文件中读取JSON字符串，并转换为Python对象，使用 json.load() 方法：\n```python\nimport json\n\nwith open('1.json', \"r\") as f:\n\ta_str = json.load(f)\n\tprint(a_str)\n```\n\n\n","slug":"python模块-Json模块","published":1,"updated":"2021-01-23T15:07:46.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucf001rjjln95x0aza7","content":"<h3 id=\"JSON介绍\"><a href=\"#JSON介绍\" class=\"headerlink\" title=\"JSON介绍\"></a>JSON介绍</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。</p>\n<h4 id=\"JSON-语法规则\"><a href=\"#JSON-语法规则\" class=\"headerlink\" title=\"JSON 语法规则\"></a>JSON 语法规则</h4><p>JSON是一个标记符的序列。<br>JSON是一个序列化的对象或数组。</p>\n<h4 id=\"JSON-与-JS-对象的关系\"><a href=\"#JSON-与-JS-对象的关系\" class=\"headerlink\" title=\"JSON 与 JS 对象的关系\"></a>JSON 与 JS 对象的关系</h4><p>很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：<br><strong>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong><br>如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;; <span class=\"hljs-comment\">//这是一个对象，注意键名也是可以使用引号包裹的</span><br><br><span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class=\"hljs-comment\">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"JSON-和-JS-对象互转\"><a href=\"#JSON-和-JS-对象互转\" class=\"headerlink\" title=\"JSON 和 JS 对象互转\"></a>JSON 和 JS 对象互转</h4><p>要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <span class=\"hljs-comment\">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure>\n<p>要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;); <span class=\"hljs-comment\">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"JSON-和-PYTHON-对象互转\"><a href=\"#JSON-和-PYTHON-对象互转\" class=\"headerlink\" title=\"JSON 和 PYTHON 对象互转\"></a>JSON 和 PYTHON 对象互转</h4><p>要实现从JSON字符串转换为Python对象，使用 json.loads() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_dict = json.loads(<span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>) //结果是 &#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;<br>b_list = json.loads(<span class=\"hljs-string\">&#x27;[1, 2, 3, 4]&#x27;</span>) //结果是 [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br></code></pre></div></td></tr></table></figure>\n<p>要实现从Python对象转换为JSON字符串，使用 json.dumps() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_obj = json.dumps(&#123;a: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, b: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;) //结果是 <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br>b_obj = json.dumps([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, &#123;<span class=\"hljs-string\">&quot;a&quot;</span>:<span class=\"hljs-number\">7</span>&#125;]) //结果是 <span class=\"hljs-string\">&#x27;[1, 2, 3, &#123;&quot;a&quot;: 7&#125;]&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p>要实现从Python对象转换为JSON字符串，并写入到json文件中，使用 json.dump() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_obj = <span class=\"hljs-string\">&#x27;[12, 34, 56]&#x27;</span><br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;1.json&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\tjson.dump(a_obj,f)<br></code></pre></div></td></tr></table></figure>\n<p>要实现从json文件中读取JSON字符串，并转换为Python对象，使用 json.load() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;1.json&#x27;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\ta_str = json.load(f)<br>\tprint(a_str)<br></code></pre></div></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JSON介绍\"><a href=\"#JSON介绍\" class=\"headerlink\" title=\"JSON介绍\"></a>JSON介绍</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。</p>\n<h4 id=\"JSON-语法规则\"><a href=\"#JSON-语法规则\" class=\"headerlink\" title=\"JSON 语法规则\"></a>JSON 语法规则</h4><p>JSON是一个标记符的序列。<br>JSON是一个序列化的对象或数组。</p>\n<h4 id=\"JSON-与-JS-对象的关系\"><a href=\"#JSON-与-JS-对象的关系\" class=\"headerlink\" title=\"JSON 与 JS 对象的关系\"></a>JSON 与 JS 对象的关系</h4><p>很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：<br><strong>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong><br>如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;; <span class=\"hljs-comment\">//这是一个对象，注意键名也是可以使用引号包裹的</span><br><br><span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class=\"hljs-comment\">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"JSON-和-JS-对象互转\"><a href=\"#JSON-和-JS-对象互转\" class=\"headerlink\" title=\"JSON 和 JS 对象互转\"></a>JSON 和 JS 对象互转</h4><p>要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <span class=\"hljs-comment\">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure>\n<p>要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;); <span class=\"hljs-comment\">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"JSON-和-PYTHON-对象互转\"><a href=\"#JSON-和-PYTHON-对象互转\" class=\"headerlink\" title=\"JSON 和 PYTHON 对象互转\"></a>JSON 和 PYTHON 对象互转</h4><p>要实现从JSON字符串转换为Python对象，使用 json.loads() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_dict = json.loads(<span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>) //结果是 &#123;<span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;<br>b_list = json.loads(<span class=\"hljs-string\">&#x27;[1, 2, 3, 4]&#x27;</span>) //结果是 [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]<br></code></pre></td></tr></table></figure>\n<p>要实现从Python对象转换为JSON字符串，使用 json.dumps() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_obj = json.dumps(&#123;a: <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, b: <span class=\"hljs-string\">&#x27;World&#x27;</span>&#125;) //结果是 <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br>b_obj = json.dumps([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, &#123;<span class=\"hljs-string\">&quot;a&quot;</span>:<span class=\"hljs-number\">7</span>&#125;]) //结果是 <span class=\"hljs-string\">&#x27;[1, 2, 3, &#123;&quot;a&quot;: 7&#125;]&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>要实现从Python对象转换为JSON字符串，并写入到json文件中，使用 json.dump() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br>a_obj = <span class=\"hljs-string\">&#x27;[12, 34, 56]&#x27;</span><br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;1.json&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\tjson.dump(a_obj,f)<br></code></pre></td></tr></table></figure>\n<p>要实现从json文件中读取JSON字符串，并转换为Python对象，使用 json.load() 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;1.json&#x27;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>\ta_str = json.load(f)<br>\tprint(a_str)<br></code></pre></td></tr></table></figure>\n\n"},{"title":"time与timeit 模块","date":"2019-05-03T12:14:29.000Z","_content":"# 一、time 模块\n### 1. 时间表现形式\n- timestamp：时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量\n- struct_time： 时间元组，共有九个元素组\n- format time： 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式\n### 2. 时间格式转换图\n![20190503200750-时间格式转换图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190503200750-时间格式转换图%20.jpg)\n\n### 3. 常用方法\n1. 获取当前时间戳\n\n    ```python\n    In [26]: time.time()\n    Out[26]: 1556888776.3707364\n\n    In [25]: time.mktime(time.localtime()) # 元组->时间戳\n    Out[25]: 1556888742.0\n    ```\n2.  当前时间的 struct_time 形式\n    ```python\n    In [1]: import time                                                                                      \n\n    In [2]: time.localtime()                 \n    Out[2]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=20, tm_min=48, tm_sec=32, tm_wday=4, tm_yday=123, tm_isdst=0) \n\n    In [29]: time.localtime(time.time()) # 时间戳->元组     \n    Out[29]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=21, tm_min=12, tm_sec=6, tm_wday=4, tm_yday=123, tm_isdst=0)  \n\n    In [22]: time.gmtime()     \n    Out[22]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=13, tm_min=3, tm_sec=21, tm_wday=4, tm_yday=123, tm_isdst=0)   \n\n    In [30]: time.gmtime(time.time()) # 时间戳->元组     \n    Out[30]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=13, tm_min=12, tm_sec=21, tm_wday=4, tm_yday=123, tm_isdst=0)\n\n    In [34]: time.strptime(a, \"%a %b %d %H:%M:%S %Y\") # 字符串->元组\n    Out[34]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=21, tm_min=9, tm_sec=25, tm_wday=4, tm_yday=123, tm_isdst=-1)\n    ```\n3. 当前时间的字符串形式\n    ```python\n    In [3]: time.ctime()\n    Out[3]: 'Fri May  3 20:49:30 2019'\n\n    In [27]: time.ctime(time.time()) # 时间戳->字符串\n    Out[27]: 'Fri May  3 21:08:20 2019'\n\n    In [4]: time.asctime()\n    Out[4]: 'Fri May  3 20:49:45 2019'\n\n    In [28]: time.asctime(time.localtime()) # 元组->默认字符串\n    Out[28]: 'Fri May  3 21:09:25 2019'\n\n    In [7]: time.strftime('%Y-%m-%d %H:%M\"%S', time.localtime()) # 元组->格式化字符串\n    Out[7]: '2019-05-03 20:52\"47'\n\n    In [31]: time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime())\n    Out[31]: 'Fri May 03 21:15:50 2019'\n    ```\n\n### 4. 耗时统计\n- time.perf_counter() \n    - 调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒\n    - 当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒\n    - 两个函数取差，即实现从时间点B1到B2的计时功能\n- time.process_time()\n  - 返回当前进程执行 CPU 的时间总和，不包含睡眠时间\n  - 由于返回值的基准点是未定义的\n  - 只有连续调用的结果之间的差才是有效的\n- time.time()\n  - 连续两次生成的时间戳之差即为耗时\n    ```python\n    import time\n    \n    def test():\n        time.sleep(2)\n\n    start1 = time.perf_counter()\n    start2 = time.time()\n    start3 = time.process_time()\n    test()\n    finish1 = time.perf_counter()\n    finish2 = time.time()\n    finish3 = time.process_time()\n    t1 = finish1 - start1\n    t2 = finish2 - start2\n    t3 = finish3 - start3\n    \n    print(t1)\n    print(t2)\n    print(t3)\n    ```\n    结果为：\n    ```shell\n    1.9998265000000002 # perf_counter\n    2.000767946243286  # time\n    0.0                # process_time\n    ```","source":"_posts/python模块-time-timeit-模块.md","raw":"---\ntitle: time与timeit 模块\ndate:  2019-05-03 20:14:29\ncategories:\n  - 技术\n  - python\n  - 模块\ntags:\n  - 时间模块\n---\n# 一、time 模块\n### 1. 时间表现形式\n- timestamp：时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量\n- struct_time： 时间元组，共有九个元素组\n- format time： 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式\n### 2. 时间格式转换图\n![20190503200750-时间格式转换图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190503200750-时间格式转换图%20.jpg)\n\n### 3. 常用方法\n1. 获取当前时间戳\n\n    ```python\n    In [26]: time.time()\n    Out[26]: 1556888776.3707364\n\n    In [25]: time.mktime(time.localtime()) # 元组->时间戳\n    Out[25]: 1556888742.0\n    ```\n2.  当前时间的 struct_time 形式\n    ```python\n    In [1]: import time                                                                                      \n\n    In [2]: time.localtime()                 \n    Out[2]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=20, tm_min=48, tm_sec=32, tm_wday=4, tm_yday=123, tm_isdst=0) \n\n    In [29]: time.localtime(time.time()) # 时间戳->元组     \n    Out[29]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=21, tm_min=12, tm_sec=6, tm_wday=4, tm_yday=123, tm_isdst=0)  \n\n    In [22]: time.gmtime()     \n    Out[22]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=13, tm_min=3, tm_sec=21, tm_wday=4, tm_yday=123, tm_isdst=0)   \n\n    In [30]: time.gmtime(time.time()) # 时间戳->元组     \n    Out[30]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=13, tm_min=12, tm_sec=21, tm_wday=4, tm_yday=123, tm_isdst=0)\n\n    In [34]: time.strptime(a, \"%a %b %d %H:%M:%S %Y\") # 字符串->元组\n    Out[34]: time.struct_time(tm_year=2019, tm_mon=5, tm_mday=3, tm_hour=21, tm_min=9, tm_sec=25, tm_wday=4, tm_yday=123, tm_isdst=-1)\n    ```\n3. 当前时间的字符串形式\n    ```python\n    In [3]: time.ctime()\n    Out[3]: 'Fri May  3 20:49:30 2019'\n\n    In [27]: time.ctime(time.time()) # 时间戳->字符串\n    Out[27]: 'Fri May  3 21:08:20 2019'\n\n    In [4]: time.asctime()\n    Out[4]: 'Fri May  3 20:49:45 2019'\n\n    In [28]: time.asctime(time.localtime()) # 元组->默认字符串\n    Out[28]: 'Fri May  3 21:09:25 2019'\n\n    In [7]: time.strftime('%Y-%m-%d %H:%M\"%S', time.localtime()) # 元组->格式化字符串\n    Out[7]: '2019-05-03 20:52\"47'\n\n    In [31]: time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime())\n    Out[31]: 'Fri May 03 21:15:50 2019'\n    ```\n\n### 4. 耗时统计\n- time.perf_counter() \n    - 调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒\n    - 当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒\n    - 两个函数取差，即实现从时间点B1到B2的计时功能\n- time.process_time()\n  - 返回当前进程执行 CPU 的时间总和，不包含睡眠时间\n  - 由于返回值的基准点是未定义的\n  - 只有连续调用的结果之间的差才是有效的\n- time.time()\n  - 连续两次生成的时间戳之差即为耗时\n    ```python\n    import time\n    \n    def test():\n        time.sleep(2)\n\n    start1 = time.perf_counter()\n    start2 = time.time()\n    start3 = time.process_time()\n    test()\n    finish1 = time.perf_counter()\n    finish2 = time.time()\n    finish3 = time.process_time()\n    t1 = finish1 - start1\n    t2 = finish2 - start2\n    t3 = finish3 - start3\n    \n    print(t1)\n    print(t2)\n    print(t3)\n    ```\n    结果为：\n    ```shell\n    1.9998265000000002 # perf_counter\n    2.000767946243286  # time\n    0.0                # process_time\n    ```","slug":"python模块-time-timeit-模块","published":1,"updated":"2021-01-23T15:07:25.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucg001sjjln85n5agru","content":"<h1 id=\"一、time-模块\"><a href=\"#一、time-模块\" class=\"headerlink\" title=\"一、time 模块\"></a>一、time 模块</h1><h3 id=\"1-时间表现形式\"><a href=\"#1-时间表现形式\" class=\"headerlink\" title=\"1. 时间表现形式\"></a>1. 时间表现形式</h3><ul>\n<li>timestamp：时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量</li>\n<li>struct_time： 时间元组，共有九个元素组</li>\n<li>format time： 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式<h3 id=\"2-时间格式转换图\"><a href=\"#2-时间格式转换图\" class=\"headerlink\" title=\"2. 时间格式转换图\"></a>2. 时间格式转换图</h3><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190503200750-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%9B%BE%20.jpg\" alt=\"20190503200750-时间格式转换图\"></li>\n</ul>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3. 常用方法\"></a>3. 常用方法</h3><ol>\n<li><p>获取当前时间戳</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">26</span>]: time.time()<br>Out[<span class=\"hljs-number\">26</span>]: <span class=\"hljs-number\">1556888776.3707364</span><br><br>In [<span class=\"hljs-number\">25</span>]: time.mktime(time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;时间戳</span><br>Out[<span class=\"hljs-number\">25</span>]: <span class=\"hljs-number\">1556888742.0</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>当前时间的 struct_time 形式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">1</span>]: <span class=\"hljs-keyword\">import</span> time                                                                                      <br><br>In [<span class=\"hljs-number\">2</span>]: time.localtime()                 <br>Out[<span class=\"hljs-number\">2</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">20</span>, tm_min=<span class=\"hljs-number\">48</span>, tm_sec=<span class=\"hljs-number\">32</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>) <br><br>In [<span class=\"hljs-number\">29</span>]: time.localtime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;元组     </span><br>Out[<span class=\"hljs-number\">29</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">21</span>, tm_min=<span class=\"hljs-number\">12</span>, tm_sec=<span class=\"hljs-number\">6</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)  <br><br>In [<span class=\"hljs-number\">22</span>]: time.gmtime()     <br>Out[<span class=\"hljs-number\">22</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">13</span>, tm_min=<span class=\"hljs-number\">3</span>, tm_sec=<span class=\"hljs-number\">21</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)   <br><br>In [<span class=\"hljs-number\">30</span>]: time.gmtime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;元组     </span><br>Out[<span class=\"hljs-number\">30</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">13</span>, tm_min=<span class=\"hljs-number\">12</span>, tm_sec=<span class=\"hljs-number\">21</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)<br><br>In [<span class=\"hljs-number\">34</span>]: time.strptime(a, <span class=\"hljs-string\">&quot;%a %b %d %H:%M:%S %Y&quot;</span>) <span class=\"hljs-comment\"># 字符串-&gt;元组</span><br>Out[<span class=\"hljs-number\">34</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">21</span>, tm_min=<span class=\"hljs-number\">9</span>, tm_sec=<span class=\"hljs-number\">25</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=-<span class=\"hljs-number\">1</span>)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>当前时间的字符串形式</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">3</span>]: time.ctime()<br>Out[<span class=\"hljs-number\">3</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 20:49:30 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">27</span>]: time.ctime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;字符串</span><br>Out[<span class=\"hljs-number\">27</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 21:08:20 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">4</span>]: time.asctime()<br>Out[<span class=\"hljs-number\">4</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 20:49:45 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">28</span>]: time.asctime(time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;默认字符串</span><br>Out[<span class=\"hljs-number\">28</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 21:09:25 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">7</span>]: time.strftime(<span class=\"hljs-string\">&#x27;%Y-%m-%d %H:%M&quot;%S&#x27;</span>, time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;格式化字符串</span><br>Out[<span class=\"hljs-number\">7</span>]: <span class=\"hljs-string\">&#x27;2019-05-03 20:52&quot;47&#x27;</span><br><br>In [<span class=\"hljs-number\">31</span>]: time.strftime(<span class=\"hljs-string\">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime())<br>Out[<span class=\"hljs-number\">31</span>]: <span class=\"hljs-string\">&#x27;Fri May 03 21:15:50 2019&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"4-耗时统计\"><a href=\"#4-耗时统计\" class=\"headerlink\" title=\"4. 耗时统计\"></a>4. 耗时统计</h3></li>\n</ol>\n<ul>\n<li>time.perf_counter() <ul>\n<li>调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒</li>\n<li>当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒</li>\n<li>两个函数取差，即实现从时间点B1到B2的计时功能</li>\n</ul>\n</li>\n<li>time.process_time()<ul>\n<li>返回当前进程执行 CPU 的时间总和，不包含睡眠时间</li>\n<li>由于返回值的基准点是未定义的</li>\n<li>只有连续调用的结果之间的差才是有效的</li>\n</ul>\n</li>\n<li>time.time()<ul>\n<li>连续两次生成的时间戳之差即为耗时<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>():</span><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br><br>start1 = time.perf_counter()<br>start2 = time.time()<br>start3 = time.process_time()<br>test()<br>finish1 = time.perf_counter()<br>finish2 = time.time()<br>finish3 = time.process_time()<br>t1 = finish1 - start1<br>t2 = finish2 - start2<br>t3 = finish3 - start3<br><br>print(t1)<br>print(t2)<br>print(t3)<br></code></pre></div></td></tr></table></figure>\n结果为：<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">1.9998265000000002 # perf_counter<br>2.000767946243286  # time<br>0.0                # process_time<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、time-模块\"><a href=\"#一、time-模块\" class=\"headerlink\" title=\"一、time 模块\"></a>一、time 模块</h1><h3 id=\"1-时间表现形式\"><a href=\"#1-时间表现形式\" class=\"headerlink\" title=\"1. 时间表现形式\"></a>1. 时间表现形式</h3><ul>\n<li>timestamp：时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量</li>\n<li>struct_time： 时间元组，共有九个元素组</li>\n<li>format time： 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式<h3 id=\"2-时间格式转换图\"><a href=\"#2-时间格式转换图\" class=\"headerlink\" title=\"2. 时间格式转换图\"></a>2. 时间格式转换图</h3><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190503200750-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%9B%BE%20.jpg\" alt=\"20190503200750-时间格式转换图\"></li>\n</ul>\n<h3 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3. 常用方法\"></a>3. 常用方法</h3><ol>\n<li><p>获取当前时间戳</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">26</span>]: time.time()<br>Out[<span class=\"hljs-number\">26</span>]: <span class=\"hljs-number\">1556888776.3707364</span><br><br>In [<span class=\"hljs-number\">25</span>]: time.mktime(time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;时间戳</span><br>Out[<span class=\"hljs-number\">25</span>]: <span class=\"hljs-number\">1556888742.0</span><br></code></pre></td></tr></table></figure></li>\n<li><p>当前时间的 struct_time 形式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">1</span>]: <span class=\"hljs-keyword\">import</span> time                                                                                      <br><br>In [<span class=\"hljs-number\">2</span>]: time.localtime()                 <br>Out[<span class=\"hljs-number\">2</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">20</span>, tm_min=<span class=\"hljs-number\">48</span>, tm_sec=<span class=\"hljs-number\">32</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>) <br><br>In [<span class=\"hljs-number\">29</span>]: time.localtime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;元组     </span><br>Out[<span class=\"hljs-number\">29</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">21</span>, tm_min=<span class=\"hljs-number\">12</span>, tm_sec=<span class=\"hljs-number\">6</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)  <br><br>In [<span class=\"hljs-number\">22</span>]: time.gmtime()     <br>Out[<span class=\"hljs-number\">22</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">13</span>, tm_min=<span class=\"hljs-number\">3</span>, tm_sec=<span class=\"hljs-number\">21</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)   <br><br>In [<span class=\"hljs-number\">30</span>]: time.gmtime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;元组     </span><br>Out[<span class=\"hljs-number\">30</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">13</span>, tm_min=<span class=\"hljs-number\">12</span>, tm_sec=<span class=\"hljs-number\">21</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=<span class=\"hljs-number\">0</span>)<br><br>In [<span class=\"hljs-number\">34</span>]: time.strptime(a, <span class=\"hljs-string\">&quot;%a %b %d %H:%M:%S %Y&quot;</span>) <span class=\"hljs-comment\"># 字符串-&gt;元组</span><br>Out[<span class=\"hljs-number\">34</span>]: time.struct_time(tm_year=<span class=\"hljs-number\">2019</span>, tm_mon=<span class=\"hljs-number\">5</span>, tm_mday=<span class=\"hljs-number\">3</span>, tm_hour=<span class=\"hljs-number\">21</span>, tm_min=<span class=\"hljs-number\">9</span>, tm_sec=<span class=\"hljs-number\">25</span>, tm_wday=<span class=\"hljs-number\">4</span>, tm_yday=<span class=\"hljs-number\">123</span>, tm_isdst=-<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>当前时间的字符串形式</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">3</span>]: time.ctime()<br>Out[<span class=\"hljs-number\">3</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 20:49:30 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">27</span>]: time.ctime(time.time()) <span class=\"hljs-comment\"># 时间戳-&gt;字符串</span><br>Out[<span class=\"hljs-number\">27</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 21:08:20 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">4</span>]: time.asctime()<br>Out[<span class=\"hljs-number\">4</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 20:49:45 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">28</span>]: time.asctime(time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;默认字符串</span><br>Out[<span class=\"hljs-number\">28</span>]: <span class=\"hljs-string\">&#x27;Fri May  3 21:09:25 2019&#x27;</span><br><br>In [<span class=\"hljs-number\">7</span>]: time.strftime(<span class=\"hljs-string\">&#x27;%Y-%m-%d %H:%M&quot;%S&#x27;</span>, time.localtime()) <span class=\"hljs-comment\"># 元组-&gt;格式化字符串</span><br>Out[<span class=\"hljs-number\">7</span>]: <span class=\"hljs-string\">&#x27;2019-05-03 20:52&quot;47&#x27;</span><br><br>In [<span class=\"hljs-number\">31</span>]: time.strftime(<span class=\"hljs-string\">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime())<br>Out[<span class=\"hljs-number\">31</span>]: <span class=\"hljs-string\">&#x27;Fri May 03 21:15:50 2019&#x27;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"4-耗时统计\"><a href=\"#4-耗时统计\" class=\"headerlink\" title=\"4. 耗时统计\"></a>4. 耗时统计</h3></li>\n</ol>\n<ul>\n<li>time.perf_counter() <ul>\n<li>调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒</li>\n<li>当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒</li>\n<li>两个函数取差，即实现从时间点B1到B2的计时功能</li>\n</ul>\n</li>\n<li>time.process_time()<ul>\n<li>返回当前进程执行 CPU 的时间总和，不包含睡眠时间</li>\n<li>由于返回值的基准点是未定义的</li>\n<li>只有连续调用的结果之间的差才是有效的</li>\n</ul>\n</li>\n<li>time.time()<ul>\n<li>连续两次生成的时间戳之差即为耗时<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>():</span><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br><br>start1 = time.perf_counter()<br>start2 = time.time()<br>start3 = time.process_time()<br>test()<br>finish1 = time.perf_counter()<br>finish2 = time.time()<br>finish3 = time.process_time()<br>t1 = finish1 - start1<br>t2 = finish2 - start2<br>t3 = finish3 - start3<br><br>print(t1)<br>print(t2)<br>print(t3)<br></code></pre></td></tr></table></figure>\n结果为：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">1.9998265000000002 # perf_counter<br>2.000767946243286  # time<br>0.0                # process_time<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"python魔法方法","date":"2019-03-22T14:22:33.000Z","_content":"据说，Python 的对象天生拥有一些神奇的方法，它们总被双下划线所包围，他们是面向对象的 Python 的一切。\n\n他们是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。\n\nPython 的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要！\n\n![魔法方法](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/魔法方法%20.png)","source":"_posts/python面向对象-魔法方法.md","raw":"---\ntitle: python魔法方法\ndate: 2019-03-22 22:22:33\ncategories:\n  - 技术\n  - python\n  - 基础\ntags:\n  - 魔法方法\n---\n据说，Python 的对象天生拥有一些神奇的方法，它们总被双下划线所包围，他们是面向对象的 Python 的一切。\n\n他们是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。\n\nPython 的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要！\n\n![魔法方法](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/魔法方法%20.png)","slug":"python面向对象-魔法方法","published":1,"updated":"2021-01-23T15:06:30.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuch001vjjln859p3d30","content":"<p>据说，Python 的对象天生拥有一些神奇的方法，它们总被双下划线所包围，他们是面向对象的 Python 的一切。</p>\n<p>他们是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。</p>\n<p>Python 的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要！</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%20.png\" alt=\"魔法方法\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>据说，Python 的对象天生拥有一些神奇的方法，它们总被双下划线所包围，他们是面向对象的 Python 的一切。</p>\n<p>他们是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。</p>\n<p>Python 的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要！</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%20.png\" alt=\"魔法方法\"></p>\n"},{"title":"python内存管理","date":"2020-07-30T13:53:24.000Z","_content":"\n## 内存管理机制\n\n> Python中不但变量名无需事先声明，而且也无需类型声明。在Python语言中，对象的类型和内存占用都是运行时确定的。在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。在对象创建后，一个该对象的引用会被赋值给左侧的变量。\n\n![python针对变量的内存管理机制](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/python针对变量的内存管理机制%20.png)\n\n### id()函数\n\n> python的内置函数 id()可以用来查看对象的内存地址\n\n```python\n>>> a = 1\n>>> id(a)\n24834392\n>>> a = 'banana'\n>>> id(a)\n139990659655312\n\n\n>>> a = 3\n>>> b = 3\n>>> id(a)\n10289448\n>>> id(b)\n10289448\n```\n\n### 引用计数\n\n- 要保持追踪内存中的对象，Python使用了引用计数这一简单技术。\n- 也就是说Python内部记录着所有使用中的对象各有多少引用。\n\n  - 一个内部跟踪变量，称为引用计数器。\n  - 每个对象各有多少个引用，简称引用计数。\n  - 当对象被创建时，就创建了一个引用计数，当这个对象不再需要时，也就是说，这个对象的引用计数变为0时，它通常会被垃圾回收。\n\n#### 增加引用计数\n\n![增加引用计数](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/增加引用计数%20.png)\n\n#### 减少引用计数\n\n![减少引用计数](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/减少引用计数%20.png)\n\n### is和==\n\n在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：`id`(身份标识)、`type`(数据类型)和`value`(值)。\n\n`is`和`==`都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。\n\n`is`也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是`id`是否相同。\n\n`==`是python标准操作符中的比较操作符，用来比较判断两个对象的`value`(值)是否相等\n\n### 可变类型与不可变类型\n\n1. `list`、`dict`、`set`属于可变类型\n2. `number`、`str`、`tuple`、`bool`属于不可变类型\n\n不可变数据类型在第一次声明赋值声明的时候, 会在内存中开辟一块空间, 用来存放这个变量被赋的值, 而这个变量实际上存储的, 并不是被赋予的这个值, 而是存放这个值所在空间的内存地址, 通过这个地址, 变量就可以在内存中取出数据了. 所谓不可变就是说, 我们不能改变这个数据在内存中的值, 所以当我们改变这个变量的赋值时, 只是在内存中重新开辟了一块空间, 将这一条新的数据存放在这一个新的内存地址里, 而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。\n\n结合不可变数据类型，可变数据类型就很好理解来，可变数据类型是指变量所指向的内存地址处的值是可以被改变的。\n\n**从另外一个角度来看：**\n\n可变类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。\n\n可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。\n\n### 内存管理优化\n\nPython采用基于值的内存管理模式，相同的值在内存中只有一份。这是很多Python教程上都会提到的一句话，但实际情况要复杂的多。什么才是值？什么样的值才会在内存中只保存一份？这是个非常复杂的问题。\n\n#### 在python交互环境中\n\n首先明确一点，整数、实数、字符串是真正意义上的值，而上面那句话中的“值”主要指**不可变类型**中的整数和字符串。对于列表、元组、字典、集合以及range对象、map对象等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。\n\n##### 整数\n\n```python\nIn [51]: a = 12\n\nIn [52]: b = 12\n\nIn [53]: a is b\nOut[53]: True\n```\n\npython中对于小的整数存在一个缓存池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题， Python解释器会在启动时创建出小整数池，范围是`[-5,256]`，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被垃圾回收机制回收。\n\n##### 实数\n\n```python\nIn [8]: a = 12.5\n\nIn [9]: b = 12.5\n\nIn [10]: a is b\nOut[10]: False\n```\n\n对于实数，由于计算机存储实数会有精度问题，很难精确存储，所以不进行缓存，也就是说，即使看起来是一样的实数，在内存中也不是一份。\n\n##### 字符串\n\n```python\nIn [63]: a = \"abc123_\"\n\nIn [64]: b = \"abc123_\"\n\nIn [65]: a is b\nOut[65]: True\n\nIn [66]: a = \"12 3\"\n\nIn [67]: b = \"12 3\"\n\nIn [68]: a is b\nOut[68]: False\n```\n\n由于变量的存储机制，python增加了字符串的`intern`机制。也就是说，值同样的字符串对象（**整数也使用**）仅仅会保存一份，是共用的，这也决定了字符串必须是不可变对象。\n\n```python\nIn [70]: c = \"a\" + \"b\"  # 在 compile-time（编译时）已经求完值，被替换成了'ab', \n\nIn [71]: id(c)\nOut[71]: 4489029232\n\nIn [72]: d = \"ab\"  # 此时，内存中已经有 'ab', 因此直接引用即可\n\nIn [73]: id(d)\nOut[73]: 4489029232\n\n  \nIn [74]: id(a + \"b\")  # 在run-time（运行时）拼接的，导致没有被主动intern\nOut[74]: 4519083312\n\n \nIn [75]: a = 'hello world'\nIn [76]: b = 'hello world'\n\nIn [77]: a is b  # intern机制仅仅对那些看起来像是Python标识符的字符串对象才会触发\nOut[77]: False\n```\n\n**intern机制**\n\n　　**优点**：在创建新的字符对象时，如果内存中已经存在，则直接引用，避免频繁的创建和销毁内存，提升效率。\n\n　　**缺点**：在拼接字符串时，或者在改动字符串时会极大的影响性能。原因是字符串在Python当中是不可变对象，所以对字符串的改动不是inplace（原地）操作，需要新开辟内存地址，新建对象。这也是为什么拼接字符串的时候不建议用`+`而是用`join()`。`join()`是先计算出全部字符串的长度，然后再一一拷贝，仅仅创建一次对象。\n\n**总结**\n\n1. 单词，即Python标识符，不可修改，默认开启intern机制，共用对象，引用计数为0时自动被回收。\n2. 字符串（包含了除Python标识符以外的字符），不可修改，默认没有开启intern机制，引用计数为0时自动被回收。\n3. 特殊情况下（动态拼接），不会被主动intern。\n\n##### 元组\n\n```python\nIn [4]: a = (1, 2)\n\nIn [5]: b = (1, 2)\n\nIn [6]: a is b\nOut[6]: False\n```\n\n对于元组等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。\n\n#### 在Python代码中\n\n在同一模块文件中，不可变类型的数字、字符串、元组， 在值相同时，只会保存一份;而不同模块中的不同值，才会重新生成。\n\n**模块 `bbb.py`**\n\n```python\nc1 = 1000\nc2 = \"hello world % \"\nc3 = (1, 2)\nc4 = 12.3\n\n```\n\n**模块 `aaa.py`**\n\n```python\nfrom bbb import *\n\na = 1000\nb = 1000\nprint(a is b)  # True\nprint(a is c1)  # False\n\na = \"hello world % \"\nb = \"hello world % \"\nprint(a is b)  # True\nprint(a is c2)  # False\n\na = (1, 2)\nb = (1, 2)\nprint(a is b)  # True\nprint(a is c3)  # False\n\na = 12.3\nb = 12.3\nprint(a is b)  # True\nprint(a is c4)  # False\n\n```\n\n### [引用计数+标记清理+分代回收](https://www.cnblogs.com/shengulong/p/10143856.html)\n\n","source":"_posts/python高级-内存管理.md","raw":"---\ntitle: python内存管理\ndate: 2020-07-30 21:53:24\ncategories:\n  - 技术\n  - python\n  - 系统\ntags:\n  - 引用计数\n  - 分代回收\n  - 标记清除\n---\n\n## 内存管理机制\n\n> Python中不但变量名无需事先声明，而且也无需类型声明。在Python语言中，对象的类型和内存占用都是运行时确定的。在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。在对象创建后，一个该对象的引用会被赋值给左侧的变量。\n\n![python针对变量的内存管理机制](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/python针对变量的内存管理机制%20.png)\n\n### id()函数\n\n> python的内置函数 id()可以用来查看对象的内存地址\n\n```python\n>>> a = 1\n>>> id(a)\n24834392\n>>> a = 'banana'\n>>> id(a)\n139990659655312\n\n\n>>> a = 3\n>>> b = 3\n>>> id(a)\n10289448\n>>> id(b)\n10289448\n```\n\n### 引用计数\n\n- 要保持追踪内存中的对象，Python使用了引用计数这一简单技术。\n- 也就是说Python内部记录着所有使用中的对象各有多少引用。\n\n  - 一个内部跟踪变量，称为引用计数器。\n  - 每个对象各有多少个引用，简称引用计数。\n  - 当对象被创建时，就创建了一个引用计数，当这个对象不再需要时，也就是说，这个对象的引用计数变为0时，它通常会被垃圾回收。\n\n#### 增加引用计数\n\n![增加引用计数](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/增加引用计数%20.png)\n\n#### 减少引用计数\n\n![减少引用计数](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/减少引用计数%20.png)\n\n### is和==\n\n在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：`id`(身份标识)、`type`(数据类型)和`value`(值)。\n\n`is`和`==`都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。\n\n`is`也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是`id`是否相同。\n\n`==`是python标准操作符中的比较操作符，用来比较判断两个对象的`value`(值)是否相等\n\n### 可变类型与不可变类型\n\n1. `list`、`dict`、`set`属于可变类型\n2. `number`、`str`、`tuple`、`bool`属于不可变类型\n\n不可变数据类型在第一次声明赋值声明的时候, 会在内存中开辟一块空间, 用来存放这个变量被赋的值, 而这个变量实际上存储的, 并不是被赋予的这个值, 而是存放这个值所在空间的内存地址, 通过这个地址, 变量就可以在内存中取出数据了. 所谓不可变就是说, 我们不能改变这个数据在内存中的值, 所以当我们改变这个变量的赋值时, 只是在内存中重新开辟了一块空间, 将这一条新的数据存放在这一个新的内存地址里, 而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。\n\n结合不可变数据类型，可变数据类型就很好理解来，可变数据类型是指变量所指向的内存地址处的值是可以被改变的。\n\n**从另外一个角度来看：**\n\n可变类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。\n\n可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。\n\n### 内存管理优化\n\nPython采用基于值的内存管理模式，相同的值在内存中只有一份。这是很多Python教程上都会提到的一句话，但实际情况要复杂的多。什么才是值？什么样的值才会在内存中只保存一份？这是个非常复杂的问题。\n\n#### 在python交互环境中\n\n首先明确一点，整数、实数、字符串是真正意义上的值，而上面那句话中的“值”主要指**不可变类型**中的整数和字符串。对于列表、元组、字典、集合以及range对象、map对象等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。\n\n##### 整数\n\n```python\nIn [51]: a = 12\n\nIn [52]: b = 12\n\nIn [53]: a is b\nOut[53]: True\n```\n\npython中对于小的整数存在一个缓存池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题， Python解释器会在启动时创建出小整数池，范围是`[-5,256]`，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被垃圾回收机制回收。\n\n##### 实数\n\n```python\nIn [8]: a = 12.5\n\nIn [9]: b = 12.5\n\nIn [10]: a is b\nOut[10]: False\n```\n\n对于实数，由于计算机存储实数会有精度问题，很难精确存储，所以不进行缓存，也就是说，即使看起来是一样的实数，在内存中也不是一份。\n\n##### 字符串\n\n```python\nIn [63]: a = \"abc123_\"\n\nIn [64]: b = \"abc123_\"\n\nIn [65]: a is b\nOut[65]: True\n\nIn [66]: a = \"12 3\"\n\nIn [67]: b = \"12 3\"\n\nIn [68]: a is b\nOut[68]: False\n```\n\n由于变量的存储机制，python增加了字符串的`intern`机制。也就是说，值同样的字符串对象（**整数也使用**）仅仅会保存一份，是共用的，这也决定了字符串必须是不可变对象。\n\n```python\nIn [70]: c = \"a\" + \"b\"  # 在 compile-time（编译时）已经求完值，被替换成了'ab', \n\nIn [71]: id(c)\nOut[71]: 4489029232\n\nIn [72]: d = \"ab\"  # 此时，内存中已经有 'ab', 因此直接引用即可\n\nIn [73]: id(d)\nOut[73]: 4489029232\n\n  \nIn [74]: id(a + \"b\")  # 在run-time（运行时）拼接的，导致没有被主动intern\nOut[74]: 4519083312\n\n \nIn [75]: a = 'hello world'\nIn [76]: b = 'hello world'\n\nIn [77]: a is b  # intern机制仅仅对那些看起来像是Python标识符的字符串对象才会触发\nOut[77]: False\n```\n\n**intern机制**\n\n　　**优点**：在创建新的字符对象时，如果内存中已经存在，则直接引用，避免频繁的创建和销毁内存，提升效率。\n\n　　**缺点**：在拼接字符串时，或者在改动字符串时会极大的影响性能。原因是字符串在Python当中是不可变对象，所以对字符串的改动不是inplace（原地）操作，需要新开辟内存地址，新建对象。这也是为什么拼接字符串的时候不建议用`+`而是用`join()`。`join()`是先计算出全部字符串的长度，然后再一一拷贝，仅仅创建一次对象。\n\n**总结**\n\n1. 单词，即Python标识符，不可修改，默认开启intern机制，共用对象，引用计数为0时自动被回收。\n2. 字符串（包含了除Python标识符以外的字符），不可修改，默认没有开启intern机制，引用计数为0时自动被回收。\n3. 特殊情况下（动态拼接），不会被主动intern。\n\n##### 元组\n\n```python\nIn [4]: a = (1, 2)\n\nIn [5]: b = (1, 2)\n\nIn [6]: a is b\nOut[6]: False\n```\n\n对于元组等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。\n\n#### 在Python代码中\n\n在同一模块文件中，不可变类型的数字、字符串、元组， 在值相同时，只会保存一份;而不同模块中的不同值，才会重新生成。\n\n**模块 `bbb.py`**\n\n```python\nc1 = 1000\nc2 = \"hello world % \"\nc3 = (1, 2)\nc4 = 12.3\n\n```\n\n**模块 `aaa.py`**\n\n```python\nfrom bbb import *\n\na = 1000\nb = 1000\nprint(a is b)  # True\nprint(a is c1)  # False\n\na = \"hello world % \"\nb = \"hello world % \"\nprint(a is b)  # True\nprint(a is c2)  # False\n\na = (1, 2)\nb = (1, 2)\nprint(a is b)  # True\nprint(a is c3)  # False\n\na = 12.3\nb = 12.3\nprint(a is b)  # True\nprint(a is c4)  # False\n\n```\n\n### [引用计数+标记清理+分代回收](https://www.cnblogs.com/shengulong/p/10143856.html)\n\n","slug":"python高级-内存管理","published":1,"updated":"2021-01-23T14:53:26.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuci001xjjlnfu2jg8mk","content":"<h2 id=\"内存管理机制\"><a href=\"#内存管理机制\" class=\"headerlink\" title=\"内存管理机制\"></a>内存管理机制</h2><blockquote>\n<p>Python中不但变量名无需事先声明，而且也无需类型声明。在Python语言中，对象的类型和内存占用都是运行时确定的。在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。在对象创建后，一个该对象的引用会被赋值给左侧的变量。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/python%E9%92%88%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%20.png\" alt=\"python针对变量的内存管理机制\"></p>\n<h3 id=\"id-函数\"><a href=\"#id-函数\" class=\"headerlink\" title=\"id()函数\"></a>id()函数</h3><blockquote>\n<p>python的内置函数 id()可以用来查看对象的内存地址</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-number\">1</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">24834392</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-string\">&#x27;banana&#x27;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">139990659655312</span><br><br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-number\">3</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>b = <span class=\"hljs-number\">3</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">10289448</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(b)<br><span class=\"hljs-number\">10289448</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><ul>\n<li><p>要保持追踪内存中的对象，Python使用了引用计数这一简单技术。</p>\n</li>\n<li><p>也就是说Python内部记录着所有使用中的对象各有多少引用。</p>\n<ul>\n<li>一个内部跟踪变量，称为引用计数器。</li>\n<li>每个对象各有多少个引用，简称引用计数。</li>\n<li>当对象被创建时，就创建了一个引用计数，当这个对象不再需要时，也就是说，这个对象的引用计数变为0时，它通常会被垃圾回收。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加引用计数\"><a href=\"#增加引用计数\" class=\"headerlink\" title=\"增加引用计数\"></a>增加引用计数</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/%E5%A2%9E%E5%8A%A0%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%20.png\" alt=\"增加引用计数\"></p>\n<h4 id=\"减少引用计数\"><a href=\"#减少引用计数\" class=\"headerlink\" title=\"减少引用计数\"></a>减少引用计数</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/%E5%87%8F%E5%B0%91%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%20.png\" alt=\"减少引用计数\"></p>\n<h3 id=\"is和\"><a href=\"#is和\" class=\"headerlink\" title=\"is和==\"></a>is和==</h3><p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：<code>id</code>(身份标识)、<code>type</code>(数据类型)和<code>value</code>(值)。</p>\n<p><code>is</code>和<code>==</code>都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。</p>\n<p><code>is</code>也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是<code>id</code>是否相同。</p>\n<p><code>==</code>是python标准操作符中的比较操作符，用来比较判断两个对象的<code>value</code>(值)是否相等</p>\n<h3 id=\"可变类型与不可变类型\"><a href=\"#可变类型与不可变类型\" class=\"headerlink\" title=\"可变类型与不可变类型\"></a>可变类型与不可变类型</h3><ol>\n<li><code>list</code>、<code>dict</code>、<code>set</code>属于可变类型</li>\n<li><code>number</code>、<code>str</code>、<code>tuple</code>、<code>bool</code>属于不可变类型</li>\n</ol>\n<p>不可变数据类型在第一次声明赋值声明的时候, 会在内存中开辟一块空间, 用来存放这个变量被赋的值, 而这个变量实际上存储的, 并不是被赋予的这个值, 而是存放这个值所在空间的内存地址, 通过这个地址, 变量就可以在内存中取出数据了. 所谓不可变就是说, 我们不能改变这个数据在内存中的值, 所以当我们改变这个变量的赋值时, 只是在内存中重新开辟了一块空间, 将这一条新的数据存放在这一个新的内存地址里, 而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。</p>\n<p>结合不可变数据类型，可变数据类型就很好理解来，可变数据类型是指变量所指向的内存地址处的值是可以被改变的。</p>\n<p><strong>从另外一个角度来看：</strong></p>\n<p>可变类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>\n<p>可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>\n<h3 id=\"内存管理优化\"><a href=\"#内存管理优化\" class=\"headerlink\" title=\"内存管理优化\"></a>内存管理优化</h3><p>Python采用基于值的内存管理模式，相同的值在内存中只有一份。这是很多Python教程上都会提到的一句话，但实际情况要复杂的多。什么才是值？什么样的值才会在内存中只保存一份？这是个非常复杂的问题。</p>\n<h4 id=\"在python交互环境中\"><a href=\"#在python交互环境中\" class=\"headerlink\" title=\"在python交互环境中\"></a>在python交互环境中</h4><p>首先明确一点，整数、实数、字符串是真正意义上的值，而上面那句话中的“值”主要指<strong>不可变类型</strong>中的整数和字符串。对于列表、元组、字典、集合以及range对象、map对象等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>\n<h5 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">51</span>]: a = <span class=\"hljs-number\">12</span><br><br>In [<span class=\"hljs-number\">52</span>]: b = <span class=\"hljs-number\">12</span><br><br>In [<span class=\"hljs-number\">53</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">53</span>]: <span class=\"hljs-literal\">True</span><br></code></pre></div></td></tr></table></figure>\n<p>python中对于小的整数存在一个缓存池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题， Python解释器会在启动时创建出小整数池，范围是<code>[-5,256]</code>，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被垃圾回收机制回收。</p>\n<h5 id=\"实数\"><a href=\"#实数\" class=\"headerlink\" title=\"实数\"></a>实数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">8</span>]: a = <span class=\"hljs-number\">12.5</span><br><br>In [<span class=\"hljs-number\">9</span>]: b = <span class=\"hljs-number\">12.5</span><br><br>In [<span class=\"hljs-number\">10</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">10</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></div></td></tr></table></figure>\n<p>对于实数，由于计算机存储实数会有精度问题，很难精确存储，所以不进行缓存，也就是说，即使看起来是一样的实数，在内存中也不是一份。</p>\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">63</span>]: a = <span class=\"hljs-string\">&quot;abc123_&quot;</span><br><br>In [<span class=\"hljs-number\">64</span>]: b = <span class=\"hljs-string\">&quot;abc123_&quot;</span><br><br>In [<span class=\"hljs-number\">65</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">65</span>]: <span class=\"hljs-literal\">True</span><br><br>In [<span class=\"hljs-number\">66</span>]: a = <span class=\"hljs-string\">&quot;12 3&quot;</span><br><br>In [<span class=\"hljs-number\">67</span>]: b = <span class=\"hljs-string\">&quot;12 3&quot;</span><br><br>In [<span class=\"hljs-number\">68</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">68</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></div></td></tr></table></figure>\n<p>由于变量的存储机制，python增加了字符串的<code>intern</code>机制。也就是说，值同样的字符串对象（<strong>整数也使用</strong>）仅仅会保存一份，是共用的，这也决定了字符串必须是不可变对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">70</span>]: c = <span class=\"hljs-string\">&quot;a&quot;</span> + <span class=\"hljs-string\">&quot;b&quot;</span>  <span class=\"hljs-comment\"># 在 compile-time（编译时）已经求完值，被替换成了&#x27;ab&#x27;, </span><br><br>In [<span class=\"hljs-number\">71</span>]: <span class=\"hljs-built_in\">id</span>(c)<br>Out[<span class=\"hljs-number\">71</span>]: <span class=\"hljs-number\">4489029232</span><br><br>In [<span class=\"hljs-number\">72</span>]: d = <span class=\"hljs-string\">&quot;ab&quot;</span>  <span class=\"hljs-comment\"># 此时，内存中已经有 &#x27;ab&#x27;, 因此直接引用即可</span><br><br>In [<span class=\"hljs-number\">73</span>]: <span class=\"hljs-built_in\">id</span>(d)<br>Out[<span class=\"hljs-number\">73</span>]: <span class=\"hljs-number\">4489029232</span><br><br>  <br>In [<span class=\"hljs-number\">74</span>]: <span class=\"hljs-built_in\">id</span>(a + <span class=\"hljs-string\">&quot;b&quot;</span>)  <span class=\"hljs-comment\"># 在run-time（运行时）拼接的，导致没有被主动intern</span><br>Out[<span class=\"hljs-number\">74</span>]: <span class=\"hljs-number\">4519083312</span><br><br> <br>In [<span class=\"hljs-number\">75</span>]: a = <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br>In [<span class=\"hljs-number\">76</span>]: b = <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br><br>In [<span class=\"hljs-number\">77</span>]: a <span class=\"hljs-keyword\">is</span> b  <span class=\"hljs-comment\"># intern机制仅仅对那些看起来像是Python标识符的字符串对象才会触发</span><br>Out[<span class=\"hljs-number\">77</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></div></td></tr></table></figure>\n<p><strong>intern机制</strong></p>\n<p>　　<strong>优点</strong>：在创建新的字符对象时，如果内存中已经存在，则直接引用，避免频繁的创建和销毁内存，提升效率。</p>\n<p>　　<strong>缺点</strong>：在拼接字符串时，或者在改动字符串时会极大的影响性能。原因是字符串在Python当中是不可变对象，所以对字符串的改动不是inplace（原地）操作，需要新开辟内存地址，新建对象。这也是为什么拼接字符串的时候不建议用<code>+</code>而是用<code>join()</code>。<code>join()</code>是先计算出全部字符串的长度，然后再一一拷贝，仅仅创建一次对象。</p>\n<p><strong>总结</strong></p>\n<ol>\n<li>单词，即Python标识符，不可修改，默认开启intern机制，共用对象，引用计数为0时自动被回收。</li>\n<li>字符串（包含了除Python标识符以外的字符），不可修改，默认没有开启intern机制，引用计数为0时自动被回收。</li>\n<li>特殊情况下（动态拼接），不会被主动intern。</li>\n</ol>\n<h5 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">4</span>]: a = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br><br>In [<span class=\"hljs-number\">5</span>]: b = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br><br>In [<span class=\"hljs-number\">6</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">6</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></div></td></tr></table></figure>\n<p>对于元组等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>\n<h4 id=\"在Python代码中\"><a href=\"#在Python代码中\" class=\"headerlink\" title=\"在Python代码中\"></a>在Python代码中</h4><p>在同一模块文件中，不可变类型的数字、字符串、元组， 在值相同时，只会保存一份;而不同模块中的不同值，才会重新生成。</p>\n<p><strong>模块 <code>bbb.py</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">c1 = <span class=\"hljs-number\">1000</span><br>c2 = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>c3 = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>c4 = <span class=\"hljs-number\">12.3</span><br><br></code></pre></div></td></tr></table></figure>\n<p><strong>模块 <code>aaa.py</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> bbb <span class=\"hljs-keyword\">import</span> *<br><br>a = <span class=\"hljs-number\">1000</span><br>b = <span class=\"hljs-number\">1000</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c1)  <span class=\"hljs-comment\"># False</span><br><br>a = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>b = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c2)  <span class=\"hljs-comment\"># False</span><br><br>a = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>b = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c3)  <span class=\"hljs-comment\"># False</span><br><br>a = <span class=\"hljs-number\">12.3</span><br>b = <span class=\"hljs-number\">12.3</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c4)  <span class=\"hljs-comment\"># False</span><br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"引用计数-标记清理-分代回收\"><a href=\"#引用计数-标记清理-分代回收\" class=\"headerlink\" title=\"引用计数+标记清理+分代回收\"></a><a href=\"https://www.cnblogs.com/shengulong/p/10143856.html\">引用计数+标记清理+分代回收</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存管理机制\"><a href=\"#内存管理机制\" class=\"headerlink\" title=\"内存管理机制\"></a>内存管理机制</h2><blockquote>\n<p>Python中不但变量名无需事先声明，而且也无需类型声明。在Python语言中，对象的类型和内存占用都是运行时确定的。在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。在对象创建后，一个该对象的引用会被赋值给左侧的变量。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/python%E9%92%88%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%20.png\" alt=\"python针对变量的内存管理机制\"></p>\n<h3 id=\"id-函数\"><a href=\"#id-函数\" class=\"headerlink\" title=\"id()函数\"></a>id()函数</h3><blockquote>\n<p>python的内置函数 id()可以用来查看对象的内存地址</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-number\">1</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">24834392</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-string\">&#x27;banana&#x27;</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">139990659655312</span><br><br><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = <span class=\"hljs-number\">3</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>b = <span class=\"hljs-number\">3</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(a)<br><span class=\"hljs-number\">10289448</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">id</span>(b)<br><span class=\"hljs-number\">10289448</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><ul>\n<li><p>要保持追踪内存中的对象，Python使用了引用计数这一简单技术。</p>\n</li>\n<li><p>也就是说Python内部记录着所有使用中的对象各有多少引用。</p>\n<ul>\n<li>一个内部跟踪变量，称为引用计数器。</li>\n<li>每个对象各有多少个引用，简称引用计数。</li>\n<li>当对象被创建时，就创建了一个引用计数，当这个对象不再需要时，也就是说，这个对象的引用计数变为0时，它通常会被垃圾回收。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加引用计数\"><a href=\"#增加引用计数\" class=\"headerlink\" title=\"增加引用计数\"></a>增加引用计数</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/%E5%A2%9E%E5%8A%A0%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%20.png\" alt=\"增加引用计数\"></p>\n<h4 id=\"减少引用计数\"><a href=\"#减少引用计数\" class=\"headerlink\" title=\"减少引用计数\"></a>减少引用计数</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/%E5%87%8F%E5%B0%91%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%20.png\" alt=\"减少引用计数\"></p>\n<h3 id=\"is和\"><a href=\"#is和\" class=\"headerlink\" title=\"is和==\"></a>is和==</h3><p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：<code>id</code>(身份标识)、<code>type</code>(数据类型)和<code>value</code>(值)。</p>\n<p><code>is</code>和<code>==</code>都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。</p>\n<p><code>is</code>也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是<code>id</code>是否相同。</p>\n<p><code>==</code>是python标准操作符中的比较操作符，用来比较判断两个对象的<code>value</code>(值)是否相等</p>\n<h3 id=\"可变类型与不可变类型\"><a href=\"#可变类型与不可变类型\" class=\"headerlink\" title=\"可变类型与不可变类型\"></a>可变类型与不可变类型</h3><ol>\n<li><code>list</code>、<code>dict</code>、<code>set</code>属于可变类型</li>\n<li><code>number</code>、<code>str</code>、<code>tuple</code>、<code>bool</code>属于不可变类型</li>\n</ol>\n<p>不可变数据类型在第一次声明赋值声明的时候, 会在内存中开辟一块空间, 用来存放这个变量被赋的值, 而这个变量实际上存储的, 并不是被赋予的这个值, 而是存放这个值所在空间的内存地址, 通过这个地址, 变量就可以在内存中取出数据了. 所谓不可变就是说, 我们不能改变这个数据在内存中的值, 所以当我们改变这个变量的赋值时, 只是在内存中重新开辟了一块空间, 将这一条新的数据存放在这一个新的内存地址里, 而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。</p>\n<p>结合不可变数据类型，可变数据类型就很好理解来，可变数据类型是指变量所指向的内存地址处的值是可以被改变的。</p>\n<p><strong>从另外一个角度来看：</strong></p>\n<p>可变类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>\n<p>可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>\n<h3 id=\"内存管理优化\"><a href=\"#内存管理优化\" class=\"headerlink\" title=\"内存管理优化\"></a>内存管理优化</h3><p>Python采用基于值的内存管理模式，相同的值在内存中只有一份。这是很多Python教程上都会提到的一句话，但实际情况要复杂的多。什么才是值？什么样的值才会在内存中只保存一份？这是个非常复杂的问题。</p>\n<h4 id=\"在python交互环境中\"><a href=\"#在python交互环境中\" class=\"headerlink\" title=\"在python交互环境中\"></a>在python交互环境中</h4><p>首先明确一点，整数、实数、字符串是真正意义上的值，而上面那句话中的“值”主要指<strong>不可变类型</strong>中的整数和字符串。对于列表、元组、字典、集合以及range对象、map对象等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>\n<h5 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">51</span>]: a = <span class=\"hljs-number\">12</span><br><br>In [<span class=\"hljs-number\">52</span>]: b = <span class=\"hljs-number\">12</span><br><br>In [<span class=\"hljs-number\">53</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">53</span>]: <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n<p>python中对于小的整数存在一个缓存池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题， Python解释器会在启动时创建出小整数池，范围是<code>[-5,256]</code>，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被垃圾回收机制回收。</p>\n<h5 id=\"实数\"><a href=\"#实数\" class=\"headerlink\" title=\"实数\"></a>实数</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">8</span>]: a = <span class=\"hljs-number\">12.5</span><br><br>In [<span class=\"hljs-number\">9</span>]: b = <span class=\"hljs-number\">12.5</span><br><br>In [<span class=\"hljs-number\">10</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">10</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></td></tr></table></figure>\n<p>对于实数，由于计算机存储实数会有精度问题，很难精确存储，所以不进行缓存，也就是说，即使看起来是一样的实数，在内存中也不是一份。</p>\n<h5 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">63</span>]: a = <span class=\"hljs-string\">&quot;abc123_&quot;</span><br><br>In [<span class=\"hljs-number\">64</span>]: b = <span class=\"hljs-string\">&quot;abc123_&quot;</span><br><br>In [<span class=\"hljs-number\">65</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">65</span>]: <span class=\"hljs-literal\">True</span><br><br>In [<span class=\"hljs-number\">66</span>]: a = <span class=\"hljs-string\">&quot;12 3&quot;</span><br><br>In [<span class=\"hljs-number\">67</span>]: b = <span class=\"hljs-string\">&quot;12 3&quot;</span><br><br>In [<span class=\"hljs-number\">68</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">68</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></td></tr></table></figure>\n<p>由于变量的存储机制，python增加了字符串的<code>intern</code>机制。也就是说，值同样的字符串对象（<strong>整数也使用</strong>）仅仅会保存一份，是共用的，这也决定了字符串必须是不可变对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">70</span>]: c = <span class=\"hljs-string\">&quot;a&quot;</span> + <span class=\"hljs-string\">&quot;b&quot;</span>  <span class=\"hljs-comment\"># 在 compile-time（编译时）已经求完值，被替换成了&#x27;ab&#x27;, </span><br><br>In [<span class=\"hljs-number\">71</span>]: <span class=\"hljs-built_in\">id</span>(c)<br>Out[<span class=\"hljs-number\">71</span>]: <span class=\"hljs-number\">4489029232</span><br><br>In [<span class=\"hljs-number\">72</span>]: d = <span class=\"hljs-string\">&quot;ab&quot;</span>  <span class=\"hljs-comment\"># 此时，内存中已经有 &#x27;ab&#x27;, 因此直接引用即可</span><br><br>In [<span class=\"hljs-number\">73</span>]: <span class=\"hljs-built_in\">id</span>(d)<br>Out[<span class=\"hljs-number\">73</span>]: <span class=\"hljs-number\">4489029232</span><br><br>  <br>In [<span class=\"hljs-number\">74</span>]: <span class=\"hljs-built_in\">id</span>(a + <span class=\"hljs-string\">&quot;b&quot;</span>)  <span class=\"hljs-comment\"># 在run-time（运行时）拼接的，导致没有被主动intern</span><br>Out[<span class=\"hljs-number\">74</span>]: <span class=\"hljs-number\">4519083312</span><br><br> <br>In [<span class=\"hljs-number\">75</span>]: a = <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br>In [<span class=\"hljs-number\">76</span>]: b = <span class=\"hljs-string\">&#x27;hello world&#x27;</span><br><br>In [<span class=\"hljs-number\">77</span>]: a <span class=\"hljs-keyword\">is</span> b  <span class=\"hljs-comment\"># intern机制仅仅对那些看起来像是Python标识符的字符串对象才会触发</span><br>Out[<span class=\"hljs-number\">77</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></td></tr></table></figure>\n<p><strong>intern机制</strong></p>\n<p>　　<strong>优点</strong>：在创建新的字符对象时，如果内存中已经存在，则直接引用，避免频繁的创建和销毁内存，提升效率。</p>\n<p>　　<strong>缺点</strong>：在拼接字符串时，或者在改动字符串时会极大的影响性能。原因是字符串在Python当中是不可变对象，所以对字符串的改动不是inplace（原地）操作，需要新开辟内存地址，新建对象。这也是为什么拼接字符串的时候不建议用<code>+</code>而是用<code>join()</code>。<code>join()</code>是先计算出全部字符串的长度，然后再一一拷贝，仅仅创建一次对象。</p>\n<p><strong>总结</strong></p>\n<ol>\n<li>单词，即Python标识符，不可修改，默认开启intern机制，共用对象，引用计数为0时自动被回收。</li>\n<li>字符串（包含了除Python标识符以外的字符），不可修改，默认没有开启intern机制，引用计数为0时自动被回收。</li>\n<li>特殊情况下（动态拼接），不会被主动intern。</li>\n</ol>\n<h5 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">4</span>]: a = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br><br>In [<span class=\"hljs-number\">5</span>]: b = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br><br>In [<span class=\"hljs-number\">6</span>]: a <span class=\"hljs-keyword\">is</span> b<br>Out[<span class=\"hljs-number\">6</span>]: <span class=\"hljs-literal\">False</span><br></code></pre></td></tr></table></figure>\n<p>对于元组等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>\n<h4 id=\"在Python代码中\"><a href=\"#在Python代码中\" class=\"headerlink\" title=\"在Python代码中\"></a>在Python代码中</h4><p>在同一模块文件中，不可变类型的数字、字符串、元组， 在值相同时，只会保存一份;而不同模块中的不同值，才会重新生成。</p>\n<p><strong>模块 <code>bbb.py</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">c1 = <span class=\"hljs-number\">1000</span><br>c2 = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>c3 = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>c4 = <span class=\"hljs-number\">12.3</span><br><br></code></pre></td></tr></table></figure>\n<p><strong>模块 <code>aaa.py</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> bbb <span class=\"hljs-keyword\">import</span> *<br><br>a = <span class=\"hljs-number\">1000</span><br>b = <span class=\"hljs-number\">1000</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c1)  <span class=\"hljs-comment\"># False</span><br><br>a = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>b = <span class=\"hljs-string\">&quot;hello world % &quot;</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c2)  <span class=\"hljs-comment\"># False</span><br><br>a = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>b = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c3)  <span class=\"hljs-comment\"># False</span><br><br>a = <span class=\"hljs-number\">12.3</span><br>b = <span class=\"hljs-number\">12.3</span><br>print(a <span class=\"hljs-keyword\">is</span> b)  <span class=\"hljs-comment\"># True</span><br>print(a <span class=\"hljs-keyword\">is</span> c4)  <span class=\"hljs-comment\"># False</span><br><br></code></pre></td></tr></table></figure>\n<h3 id=\"引用计数-标记清理-分代回收\"><a href=\"#引用计数-标记清理-分代回收\" class=\"headerlink\" title=\"引用计数+标记清理+分代回收\"></a><a href=\"https://www.cnblogs.com/shengulong/p/10143856.html\">引用计数+标记清理+分代回收</a></h3>"},{"title":"python异常","date":"2019-03-22T14:38:25.000Z","_content":"![20190517210629-异常类型](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190517210629-异常类型%20.png)\n\n### 自定义异常类型\n```python\n# 自定义错误类型\nclass ArgsException(Exception):\n    def __init__(self, num, num_type):\n        self.num = num  # 用来描述参数个数\n        self.num_type = num_type  # 用户描述参数类型\n\n\nnum1 = input(\"输入数字:\")\nnum2 = input(\"输入数字:\")\n\ntry:\n    if num1.isdigit() is False or num2.isdigit() is False:\n             # 错误类型的实例对象\n        raise ArgsException(2, \"int\")  # raise 异常类型  -> 主动抛出异常\nexcept ArgsException as ret:\n    print(\"需要%d个%s参数\" % (ret.num, ret.num_type))\n\n```","source":"_posts/python高级-异常.md","raw":"---\ntitle: python异常\ncategories:\n  - 技术\n  - python\n  - 基础\ntags:\n  - 异常\ndate: 2019-03-22 22:38:25\n---\n![20190517210629-异常类型](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190517210629-异常类型%20.png)\n\n### 自定义异常类型\n```python\n# 自定义错误类型\nclass ArgsException(Exception):\n    def __init__(self, num, num_type):\n        self.num = num  # 用来描述参数个数\n        self.num_type = num_type  # 用户描述参数类型\n\n\nnum1 = input(\"输入数字:\")\nnum2 = input(\"输入数字:\")\n\ntry:\n    if num1.isdigit() is False or num2.isdigit() is False:\n             # 错误类型的实例对象\n        raise ArgsException(2, \"int\")  # raise 异常类型  -> 主动抛出异常\nexcept ArgsException as ret:\n    print(\"需要%d个%s参数\" % (ret.num, ret.num_type))\n\n```","slug":"python高级-异常","published":1,"updated":"2021-01-23T14:54:17.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucj0021jjlnbcnof2kc","content":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190517210629-%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B%20.png\" alt=\"20190517210629-异常类型\"></p>\n<h3 id=\"自定义异常类型\"><a href=\"#自定义异常类型\" class=\"headerlink\" title=\"自定义异常类型\"></a>自定义异常类型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义错误类型</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArgsException</span>(<span class=\"hljs-params\">Exception</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, num, num_type</span>):</span><br>        self.num = num  <span class=\"hljs-comment\"># 用来描述参数个数</span><br>        self.num_type = num_type  <span class=\"hljs-comment\"># 用户描述参数类型</span><br><br><br>num1 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入数字:&quot;</span>)<br>num2 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入数字:&quot;</span>)<br><br><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-keyword\">if</span> num1.isdigit() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">or</span> num2.isdigit() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:<br>             <span class=\"hljs-comment\"># 错误类型的实例对象</span><br>        <span class=\"hljs-keyword\">raise</span> ArgsException(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;int&quot;</span>)  <span class=\"hljs-comment\"># raise 异常类型  -&gt; 主动抛出异常</span><br><span class=\"hljs-keyword\">except</span> ArgsException <span class=\"hljs-keyword\">as</span> ret:<br>    print(<span class=\"hljs-string\">&quot;需要%d个%s参数&quot;</span> % (ret.num, ret.num_type))<br><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190517210629-%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B%20.png\" alt=\"20190517210629-异常类型\"></p>\n<h3 id=\"自定义异常类型\"><a href=\"#自定义异常类型\" class=\"headerlink\" title=\"自定义异常类型\"></a>自定义异常类型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 自定义错误类型</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArgsException</span>(<span class=\"hljs-params\">Exception</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, num, num_type</span>):</span><br>        self.num = num  <span class=\"hljs-comment\"># 用来描述参数个数</span><br>        self.num_type = num_type  <span class=\"hljs-comment\"># 用户描述参数类型</span><br><br><br>num1 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入数字:&quot;</span>)<br>num2 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;输入数字:&quot;</span>)<br><br><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-keyword\">if</span> num1.isdigit() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">or</span> num2.isdigit() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:<br>             <span class=\"hljs-comment\"># 错误类型的实例对象</span><br>        <span class=\"hljs-keyword\">raise</span> ArgsException(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;int&quot;</span>)  <span class=\"hljs-comment\"># raise 异常类型  -&gt; 主动抛出异常</span><br><span class=\"hljs-keyword\">except</span> ArgsException <span class=\"hljs-keyword\">as</span> ret:<br>    print(<span class=\"hljs-string\">&quot;需要%d个%s参数&quot;</span> % (ret.num, ret.num_type))<br><br></code></pre></td></tr></table></figure>"},{"title":"python正则匹配","date":"2019-05-23T12:51:32.000Z","_content":"\n## 正则匹配\n\n1. 题目描述：\n\n现公司要开发一个业务管理系统，要求注册环节的密码需要提示用户其安全等级，密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分；此外，密码的组成可以由字母，数字，以及符号构成。\n\n以下为密码分数判断选项，每项判断只能拿一个分项：\n\n- 密码长度:\n  - 5 分: 小于等于4个字符\n  - 10 分: 5到7字符\n  - 25 分: 大于等于8个字符\n- 字母:\n  - 0 分: 没有字母\n  - 10 分: 全都是小（大）写字母\n  - 20 分: 大小写混合字母\n- 数字:\n  - 0 分: 没有数字\n  - 10 分: 1个数字\n  - 20 分: 大于1个数字\n\n- 符号:\n  - 0 分: 没有符号\n  - 10 分: 1个符号\n  - 25 分: 大于1个符号\n\n- 奖励:\n  - 2 分: 字母和数字\n  - 3 分: 字母、数字和符号\n  - 5 分: 大小写字母、数字和符号\n\n最后的评分标准:\n\n  大于等于90: 非常安全\n  大于等于80: 安全\n  大于等于70: 非常强\n  大于等于 60: 强\n  大于等于 50: 一般\n  大于等于 25: 弱\n  大于等于0:  非常弱\n\n当用户输入一个密码字符串后，判断密码等级，并输出\n\n输入描述：\n\n```shell\nb12A3%$123\n```\n\n输出：\n\n```shell\n非常安全\n```\n\n代码实现如下：\n\n```python\nimport re\n\n\ndef s1(password):\n    if re.match(r\".{,4}$\", password):\n        return 5\n    if re.match(r\".{5,7}$\", password):\n        return 10\n\n    if re.match(r\".{8,}$\", password):\n        return 25\n\n\ndef s2(password):\n    if re.match(r\"[^a-zA-Z]*$\", password):\n        return 0\n    if re.match(r\"([a-z]*$)|([A-Z]*$)\", password):\n        return 10\n\n    if re.match(r\".*(?=.*[a-z])(?=.*[A-Z]).*$\", password):\n        return 20\n\n\ndef s3(password):\n    if re.match(r\"[^\\d]*$\", password):\n        return 0\n    if re.match(r\"[^\\d]*[\\d][^\\d]*$\", password):\n        return 10\n    if re.match(r\".*[\\d]+.*[\\d]+.*$\", password):\n        return 20\n\n\ndef s4(password):\n    if re.match(r\"[^!@#$%^&*?]*$\", password):\n        return 0\n    if re.match(r\"[^!@#$%^&*?]*[!@#$%^&*?][^!@#$%^&*?]*$\", password):\n        return 10\n    if re.match(r\".*[!@#$%^&*?]+.*[!@#$%^&*?]+.*$\", password):\n        return 20\n\n\ndef s5(password):\n    if re.match(r\".*(?=.*\\d.*$)(?=.*[!@#$%^&*?].*$)(?=.*[a-z].*$)(?=.*[A-Z].*$).*$\", password):\n        return 5\n\n    if re.match(r\"(?=.*\\d.*$)(?=.*[!@#$%^&*?].*$)(?=.*[a-zA-Z].*$).*$\", password):\n        return 3\n\n    if re.match(r\".*(?=.*[\\d].*$)(?=.*[a-zA-Z].*$).*$\", password):\n        return 2\n\n\npassword = input(\"请输入密码：\")\nret = sum((s1(password), s2(password), s3(password), s4(password), s5(password)))\n\nif ret >= 90:\n    print(\"非常安全\")\nelif ret >= 80:\n    print(\"安全\")\nelif ret >= 70:\n    print(\"非常强\")\nelif ret >= 60:\n    print(\"强\")\nelif ret >= 50:\n    print(\"一般\")\nelif ret >= 25:\n    print(\"弱\")\nelse:\n    print(\"非常弱\")\n\n```","source":"_posts/python高级-正则匹配.md","raw":"---\ntitle: python正则匹配\ncategories:\n  - 技术\n  - python\n  - 基础\ntags:\n  - 正则表达式\ndate: 2019-05-23 20:51:32\n---\n\n## 正则匹配\n\n1. 题目描述：\n\n现公司要开发一个业务管理系统，要求注册环节的密码需要提示用户其安全等级，密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分；此外，密码的组成可以由字母，数字，以及符号构成。\n\n以下为密码分数判断选项，每项判断只能拿一个分项：\n\n- 密码长度:\n  - 5 分: 小于等于4个字符\n  - 10 分: 5到7字符\n  - 25 分: 大于等于8个字符\n- 字母:\n  - 0 分: 没有字母\n  - 10 分: 全都是小（大）写字母\n  - 20 分: 大小写混合字母\n- 数字:\n  - 0 分: 没有数字\n  - 10 分: 1个数字\n  - 20 分: 大于1个数字\n\n- 符号:\n  - 0 分: 没有符号\n  - 10 分: 1个符号\n  - 25 分: 大于1个符号\n\n- 奖励:\n  - 2 分: 字母和数字\n  - 3 分: 字母、数字和符号\n  - 5 分: 大小写字母、数字和符号\n\n最后的评分标准:\n\n  大于等于90: 非常安全\n  大于等于80: 安全\n  大于等于70: 非常强\n  大于等于 60: 强\n  大于等于 50: 一般\n  大于等于 25: 弱\n  大于等于0:  非常弱\n\n当用户输入一个密码字符串后，判断密码等级，并输出\n\n输入描述：\n\n```shell\nb12A3%$123\n```\n\n输出：\n\n```shell\n非常安全\n```\n\n代码实现如下：\n\n```python\nimport re\n\n\ndef s1(password):\n    if re.match(r\".{,4}$\", password):\n        return 5\n    if re.match(r\".{5,7}$\", password):\n        return 10\n\n    if re.match(r\".{8,}$\", password):\n        return 25\n\n\ndef s2(password):\n    if re.match(r\"[^a-zA-Z]*$\", password):\n        return 0\n    if re.match(r\"([a-z]*$)|([A-Z]*$)\", password):\n        return 10\n\n    if re.match(r\".*(?=.*[a-z])(?=.*[A-Z]).*$\", password):\n        return 20\n\n\ndef s3(password):\n    if re.match(r\"[^\\d]*$\", password):\n        return 0\n    if re.match(r\"[^\\d]*[\\d][^\\d]*$\", password):\n        return 10\n    if re.match(r\".*[\\d]+.*[\\d]+.*$\", password):\n        return 20\n\n\ndef s4(password):\n    if re.match(r\"[^!@#$%^&*?]*$\", password):\n        return 0\n    if re.match(r\"[^!@#$%^&*?]*[!@#$%^&*?][^!@#$%^&*?]*$\", password):\n        return 10\n    if re.match(r\".*[!@#$%^&*?]+.*[!@#$%^&*?]+.*$\", password):\n        return 20\n\n\ndef s5(password):\n    if re.match(r\".*(?=.*\\d.*$)(?=.*[!@#$%^&*?].*$)(?=.*[a-z].*$)(?=.*[A-Z].*$).*$\", password):\n        return 5\n\n    if re.match(r\"(?=.*\\d.*$)(?=.*[!@#$%^&*?].*$)(?=.*[a-zA-Z].*$).*$\", password):\n        return 3\n\n    if re.match(r\".*(?=.*[\\d].*$)(?=.*[a-zA-Z].*$).*$\", password):\n        return 2\n\n\npassword = input(\"请输入密码：\")\nret = sum((s1(password), s2(password), s3(password), s4(password), s5(password)))\n\nif ret >= 90:\n    print(\"非常安全\")\nelif ret >= 80:\n    print(\"安全\")\nelif ret >= 70:\n    print(\"非常强\")\nelif ret >= 60:\n    print(\"强\")\nelif ret >= 50:\n    print(\"一般\")\nelif ret >= 25:\n    print(\"弱\")\nelse:\n    print(\"非常弱\")\n\n```","slug":"python高级-正则匹配","published":1,"updated":"2021-01-23T14:58:20.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucp0025jjlnemfn3bkv","content":"<h2 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h2><ol>\n<li>题目描述：</li>\n</ol>\n<p>现公司要开发一个业务管理系统，要求注册环节的密码需要提示用户其安全等级，密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分；此外，密码的组成可以由字母，数字，以及符号构成。</p>\n<p>以下为密码分数判断选项，每项判断只能拿一个分项：</p>\n<ul>\n<li><p>密码长度:</p>\n<ul>\n<li>5 分: 小于等于4个字符</li>\n<li>10 分: 5到7字符</li>\n<li>25 分: 大于等于8个字符</li>\n</ul>\n</li>\n<li><p>字母:</p>\n<ul>\n<li>0 分: 没有字母</li>\n<li>10 分: 全都是小（大）写字母</li>\n<li>20 分: 大小写混合字母</li>\n</ul>\n</li>\n<li><p>数字:</p>\n<ul>\n<li>0 分: 没有数字</li>\n<li>10 分: 1个数字</li>\n<li>20 分: 大于1个数字</li>\n</ul>\n</li>\n<li><p>符号:</p>\n<ul>\n<li>0 分: 没有符号</li>\n<li>10 分: 1个符号</li>\n<li>25 分: 大于1个符号</li>\n</ul>\n</li>\n<li><p>奖励:</p>\n<ul>\n<li>2 分: 字母和数字</li>\n<li>3 分: 字母、数字和符号</li>\n<li>5 分: 大小写字母、数字和符号</li>\n</ul>\n</li>\n</ul>\n<p>最后的评分标准:</p>\n<p>  大于等于90: 非常安全<br>  大于等于80: 安全<br>  大于等于70: 非常强<br>  大于等于 60: 强<br>  大于等于 50: 一般<br>  大于等于 25: 弱<br>  大于等于0:  非常弱</p>\n<p>当用户输入一个密码字符串后，判断密码等级，并输出</p>\n<p>输入描述：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">b12A3%</span><span class=\"bash\"><span class=\"hljs-variable\">$123</span></span><br></code></pre></div></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">非常安全<br></code></pre></div></td></tr></table></figure>\n<p>代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s1</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;,4&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;5,7&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;8,&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">25</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s2</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^a-zA-Z]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;([a-z]*$)|([A-Z]*$)&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*[a-z])(?=.*[A-Z]).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s3</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^\\d]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^\\d]*[\\d][^\\d]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*[\\d]+.*[\\d]+.*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s4</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^!@#$%^&amp;*?]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^!@#$%^&amp;*?]*[!@#$%^&amp;*?][^!@#$%^&amp;*?]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*[!@#$%^&amp;*?]+.*[!@#$%^&amp;*?]+.*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s5</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*\\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-z].*$)(?=.*[A-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;(?=.*\\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*[\\d].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span><br><br><br>password = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;请输入密码：&quot;</span>)<br>ret = <span class=\"hljs-built_in\">sum</span>((s1(password), s2(password), s3(password), s4(password), s5(password)))<br><br><span class=\"hljs-keyword\">if</span> ret &gt;= <span class=\"hljs-number\">90</span>:<br>    print(<span class=\"hljs-string\">&quot;非常安全&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">80</span>:<br>    print(<span class=\"hljs-string\">&quot;安全&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">70</span>:<br>    print(<span class=\"hljs-string\">&quot;非常强&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">60</span>:<br>    print(<span class=\"hljs-string\">&quot;强&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">50</span>:<br>    print(<span class=\"hljs-string\">&quot;一般&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">25</span>:<br>    print(<span class=\"hljs-string\">&quot;弱&quot;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&quot;非常弱&quot;</span>)<br><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h2><ol>\n<li>题目描述：</li>\n</ol>\n<p>现公司要开发一个业务管理系统，要求注册环节的密码需要提示用户其安全等级，密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分；此外，密码的组成可以由字母，数字，以及符号构成。</p>\n<p>以下为密码分数判断选项，每项判断只能拿一个分项：</p>\n<ul>\n<li><p>密码长度:</p>\n<ul>\n<li>5 分: 小于等于4个字符</li>\n<li>10 分: 5到7字符</li>\n<li>25 分: 大于等于8个字符</li>\n</ul>\n</li>\n<li><p>字母:</p>\n<ul>\n<li>0 分: 没有字母</li>\n<li>10 分: 全都是小（大）写字母</li>\n<li>20 分: 大小写混合字母</li>\n</ul>\n</li>\n<li><p>数字:</p>\n<ul>\n<li>0 分: 没有数字</li>\n<li>10 分: 1个数字</li>\n<li>20 分: 大于1个数字</li>\n</ul>\n</li>\n<li><p>符号:</p>\n<ul>\n<li>0 分: 没有符号</li>\n<li>10 分: 1个符号</li>\n<li>25 分: 大于1个符号</li>\n</ul>\n</li>\n<li><p>奖励:</p>\n<ul>\n<li>2 分: 字母和数字</li>\n<li>3 分: 字母、数字和符号</li>\n<li>5 分: 大小写字母、数字和符号</li>\n</ul>\n</li>\n</ul>\n<p>最后的评分标准:</p>\n<p>  大于等于90: 非常安全<br>  大于等于80: 安全<br>  大于等于70: 非常强<br>  大于等于 60: 强<br>  大于等于 50: 一般<br>  大于等于 25: 弱<br>  大于等于0:  非常弱</p>\n<p>当用户输入一个密码字符串后，判断密码等级，并输出</p>\n<p>输入描述：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">b12A3%</span><span class=\"bash\"><span class=\"hljs-variable\">$123</span></span><br></code></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">非常安全<br></code></pre></td></tr></table></figure>\n<p>代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s1</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;,4&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;5,7&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.&#123;8,&#125;$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">25</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s2</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^a-zA-Z]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;([a-z]*$)|([A-Z]*$)&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*[a-z])(?=.*[A-Z]).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s3</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^\\d]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^\\d]*[\\d][^\\d]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*[\\d]+.*[\\d]+.*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s4</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^!@#$%^&amp;*?]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;[^!@#$%^&amp;*?]*[!@#$%^&amp;*?][^!@#$%^&amp;*?]*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*[!@#$%^&amp;*?]+.*[!@#$%^&amp;*?]+.*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">s5</span>(<span class=\"hljs-params\">password</span>):</span><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*\\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-z].*$)(?=.*[A-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;(?=.*\\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span><br><br>    <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&quot;.*(?=.*[\\d].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span><br><br><br>password = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;请输入密码：&quot;</span>)<br>ret = <span class=\"hljs-built_in\">sum</span>((s1(password), s2(password), s3(password), s4(password), s5(password)))<br><br><span class=\"hljs-keyword\">if</span> ret &gt;= <span class=\"hljs-number\">90</span>:<br>    print(<span class=\"hljs-string\">&quot;非常安全&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">80</span>:<br>    print(<span class=\"hljs-string\">&quot;安全&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">70</span>:<br>    print(<span class=\"hljs-string\">&quot;非常强&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">60</span>:<br>    print(<span class=\"hljs-string\">&quot;强&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">50</span>:<br>    print(<span class=\"hljs-string\">&quot;一般&quot;</span>)<br><span class=\"hljs-keyword\">elif</span> ret &gt;= <span class=\"hljs-number\">25</span>:<br>    print(<span class=\"hljs-string\">&quot;弱&quot;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    print(<span class=\"hljs-string\">&quot;非常弱&quot;</span>)<br><br></code></pre></td></tr></table></figure>"},{"title":"Axios(一):axios在vue中的使用教程","date":"2020-03-03T09:25:10.000Z","_content":"\n在 vue项目中使用axios分为局部使用和全局使用\n\n## 在vue中局部使用\n\n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/?ID=12345&firstName=Fred&lastName=Flintstone')\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n## 在vue中全部使用\n\naxios 是一个基于 promise 的 HTTP 库，所以是不能使用vue.use()方法的。\n那么难道我们要在每个文件都要来引用一次axios吗？多繁琐！！！\n☞解决方法有很多种：\n\n### 1.结合 vue-axios使用\n\n看了vue-axios的源码，它是按照vue插件的方式去写的。那么结合vue-axios，就可以去使用vue.use方法了\n\n1. 首先在主入口文件main.js中引用：\n\n    ```javascript\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n\n    Vue.use(VueAxios,axios);\n    ```\n\n2. 之后就可以使用了，在组件文件中的methods里去使用了：\n\n    ```javascript\n    getNewsList(){\n        this.axios.get('api/getNewsList').then((response)=>{\n            this.newsList=response.data.data;\n        }).catch((response)=>{\n            console.log(response);\n        })\n    }\n    ```\n\n### 2.axios 改写为 Vue 的原型属性（不推荐这样用）\n\n1. 首先在主入口文件main.js中引用，之后挂在vue的原型链上：\n\n    ```javascript\n    import axios from 'axios'\n    Vue.prototype.$axios= axios\n    ```\n\n2. 在组件中使用\n\n    ```javascript\n    this.$ajax.get('api/getNewsList')\n    .then((response)=>{\n        this.newsList=response.data.data;\n    }).catch((response)=>{\n        console.log(response);\n    })\n    ```\n\n### 3. 结合Vuex的action\n\n1. 在vuex的仓库文件store.js中引用，使用action添加方法\n\n    ```javascript\n    import Vue from 'Vue'\n    import Vuex from 'vuex'\n    import axios from 'axios'\n\n    Vue.use(Vuex)\n    const store = new Vuex.Store({\n    // 定义状态\n    state: {\n        user: {\n        name: 'xiaoming'\n        }\n    },\n    actions: {\n        // 封装一个 ajax 方法\n        login (context) {\n        axios({\n            method: 'post',\n            url: '/user',\n            data: context.state.user\n        })\n        }\n    }\n    })\n\n    export default store\n    ```\n\n2. 在组件中发送请求的时候，需要使用 this.$store.dispatch\n\n    ```javascript\n    methods: {\n        submitForm () {\n            this.$store.dispatch('login')\n        }\n    }\n    ```\n","source":"_posts/vue-Axios(一)Axios在vue中的使用教程.md","raw":"---\ntitle: Axios(一):axios在vue中的使用教程\ndate: 2020-03-03 17:25:10\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - axios\n    - vue-axios\n    - 局部axios\n    - 全局axios\n---\n\n在 vue项目中使用axios分为局部使用和全局使用\n\n## 在vue中局部使用\n\n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/?ID=12345&firstName=Fred&lastName=Flintstone')\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n## 在vue中全部使用\n\naxios 是一个基于 promise 的 HTTP 库，所以是不能使用vue.use()方法的。\n那么难道我们要在每个文件都要来引用一次axios吗？多繁琐！！！\n☞解决方法有很多种：\n\n### 1.结合 vue-axios使用\n\n看了vue-axios的源码，它是按照vue插件的方式去写的。那么结合vue-axios，就可以去使用vue.use方法了\n\n1. 首先在主入口文件main.js中引用：\n\n    ```javascript\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n\n    Vue.use(VueAxios,axios);\n    ```\n\n2. 之后就可以使用了，在组件文件中的methods里去使用了：\n\n    ```javascript\n    getNewsList(){\n        this.axios.get('api/getNewsList').then((response)=>{\n            this.newsList=response.data.data;\n        }).catch((response)=>{\n            console.log(response);\n        })\n    }\n    ```\n\n### 2.axios 改写为 Vue 的原型属性（不推荐这样用）\n\n1. 首先在主入口文件main.js中引用，之后挂在vue的原型链上：\n\n    ```javascript\n    import axios from 'axios'\n    Vue.prototype.$axios= axios\n    ```\n\n2. 在组件中使用\n\n    ```javascript\n    this.$ajax.get('api/getNewsList')\n    .then((response)=>{\n        this.newsList=response.data.data;\n    }).catch((response)=>{\n        console.log(response);\n    })\n    ```\n\n### 3. 结合Vuex的action\n\n1. 在vuex的仓库文件store.js中引用，使用action添加方法\n\n    ```javascript\n    import Vue from 'Vue'\n    import Vuex from 'vuex'\n    import axios from 'axios'\n\n    Vue.use(Vuex)\n    const store = new Vuex.Store({\n    // 定义状态\n    state: {\n        user: {\n        name: 'xiaoming'\n        }\n    },\n    actions: {\n        // 封装一个 ajax 方法\n        login (context) {\n        axios({\n            method: 'post',\n            url: '/user',\n            data: context.state.user\n        })\n        }\n    }\n    })\n\n    export default store\n    ```\n\n2. 在组件中发送请求的时候，需要使用 this.$store.dispatch\n\n    ```javascript\n    methods: {\n        submitForm () {\n            this.$store.dispatch('login')\n        }\n    }\n    ```\n","slug":"vue-Axios(一)Axios在vue中的使用教程","published":1,"updated":"2020-12-01T14:23:48.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucr0029jjlneh6d468i","content":"<p>在 vue项目中使用axios分为局部使用和全局使用</p>\n<h2 id=\"在vue中局部使用\"><a href=\"#在vue中局部使用\" class=\"headerlink\" title=\"在vue中局部使用\"></a>在vue中局部使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"在vue中全部使用\"><a href=\"#在vue中全部使用\" class=\"headerlink\" title=\"在vue中全部使用\"></a>在vue中全部使用</h2><p>axios 是一个基于 promise 的 HTTP 库，所以是不能使用vue.use()方法的。<br>那么难道我们要在每个文件都要来引用一次axios吗？多繁琐！！！<br>☞解决方法有很多种：</p>\n<h3 id=\"1-结合-vue-axios使用\"><a href=\"#1-结合-vue-axios使用\" class=\"headerlink\" title=\"1.结合 vue-axios使用\"></a>1.结合 vue-axios使用</h3><p>看了vue-axios的源码，它是按照vue插件的方式去写的。那么结合vue-axios，就可以去使用vue.use方法了</p>\n<ol>\n<li><p>首先在主入口文件main.js中引用：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">import</span> VueAxios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-axios&#x27;</span><br><br>Vue.use(VueAxios,axios);<br></code></pre></div></td></tr></table></figure></li>\n<li><p>之后就可以使用了，在组件文件中的methods里去使用了：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">getNewsList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.axios.get(<span class=\"hljs-string\">&#x27;api/getNewsList&#x27;</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.newsList=response.data.data;<br>    &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(response);<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-axios-改写为-Vue-的原型属性（不推荐这样用）\"><a href=\"#2-axios-改写为-Vue-的原型属性（不推荐这样用）\" class=\"headerlink\" title=\"2.axios 改写为 Vue 的原型属性（不推荐这样用）\"></a>2.axios 改写为 Vue 的原型属性（不推荐这样用）</h3></li>\n<li><p>首先在主入口文件main.js中引用，之后挂在vue的原型链上：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br>Vue.prototype.$axios= axios<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在组件中使用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>.$ajax.get(<span class=\"hljs-string\">&#x27;api/getNewsList&#x27;</span>)<br>.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.newsList=response.data.data;<br>&#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-结合Vuex的action\"><a href=\"#3-结合Vuex的action\" class=\"headerlink\" title=\"3. 结合Vuex的action\"></a>3. 结合Vuex的action</h3></li>\n<li><p>在vuex的仓库文件store.js中引用，使用action添加方法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span><br><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>Vue.use(Vuex)<br><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br><span class=\"hljs-comment\">// 定义状态</span><br>state: &#123;<br>    user: &#123;<br>    name: <span class=\"hljs-string\">&#x27;xiaoming&#x27;</span><br>    &#125;<br>&#125;,<br>actions: &#123;<br>    <span class=\"hljs-comment\">// 封装一个 ajax 方法</span><br>    login (context) &#123;<br>    axios(&#123;<br>        method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>        url: <span class=\"hljs-string\">&#x27;/user&#x27;</span>,<br>        data: context.state.user<br>    &#125;)<br>    &#125;<br>&#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在组件中发送请求的时候，需要使用 this.$store.dispatch</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">methods: &#123;<br>    submitForm () &#123;<br>        <span class=\"hljs-built_in\">this</span>.$store.dispatch(<span class=\"hljs-string\">&#x27;login&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在 vue项目中使用axios分为局部使用和全局使用</p>\n<h2 id=\"在vue中局部使用\"><a href=\"#在vue中局部使用\" class=\"headerlink\" title=\"在vue中局部使用\"></a>在vue中局部使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h2 id=\"在vue中全部使用\"><a href=\"#在vue中全部使用\" class=\"headerlink\" title=\"在vue中全部使用\"></a>在vue中全部使用</h2><p>axios 是一个基于 promise 的 HTTP 库，所以是不能使用vue.use()方法的。<br>那么难道我们要在每个文件都要来引用一次axios吗？多繁琐！！！<br>☞解决方法有很多种：</p>\n<h3 id=\"1-结合-vue-axios使用\"><a href=\"#1-结合-vue-axios使用\" class=\"headerlink\" title=\"1.结合 vue-axios使用\"></a>1.结合 vue-axios使用</h3><p>看了vue-axios的源码，它是按照vue插件的方式去写的。那么结合vue-axios，就可以去使用vue.use方法了</p>\n<ol>\n<li><p>首先在主入口文件main.js中引用：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">import</span> VueAxios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-axios&#x27;</span><br><br>Vue.use(VueAxios,axios);<br></code></pre></td></tr></table></figure></li>\n<li><p>之后就可以使用了，在组件文件中的methods里去使用了：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">getNewsList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.axios.get(<span class=\"hljs-string\">&#x27;api/getNewsList&#x27;</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.newsList=response.data.data;<br>    &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(response);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-axios-改写为-Vue-的原型属性（不推荐这样用）\"><a href=\"#2-axios-改写为-Vue-的原型属性（不推荐这样用）\" class=\"headerlink\" title=\"2.axios 改写为 Vue 的原型属性（不推荐这样用）\"></a>2.axios 改写为 Vue 的原型属性（不推荐这样用）</h3></li>\n<li><p>首先在主入口文件main.js中引用，之后挂在vue的原型链上：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br>Vue.prototype.$axios= axios<br></code></pre></td></tr></table></figure></li>\n<li><p>在组件中使用</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">this</span>.$ajax.get(<span class=\"hljs-string\">&#x27;api/getNewsList&#x27;</span>)<br>.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.newsList=response.data.data;<br>&#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-结合Vuex的action\"><a href=\"#3-结合Vuex的action\" class=\"headerlink\" title=\"3. 结合Vuex的action\"></a>3. 结合Vuex的action</h3></li>\n<li><p>在vuex的仓库文件store.js中引用，使用action添加方法</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span><br><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>Vue.use(Vuex)<br><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br><span class=\"hljs-comment\">// 定义状态</span><br>state: &#123;<br>    user: &#123;<br>    name: <span class=\"hljs-string\">&#x27;xiaoming&#x27;</span><br>    &#125;<br>&#125;,<br>actions: &#123;<br>    <span class=\"hljs-comment\">// 封装一个 ajax 方法</span><br>    login (context) &#123;<br>    axios(&#123;<br>        method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>        url: <span class=\"hljs-string\">&#x27;/user&#x27;</span>,<br>        data: context.state.user<br>    &#125;)<br>    &#125;<br>&#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store<br></code></pre></td></tr></table></figure></li>\n<li><p>在组件中发送请求的时候，需要使用 this.$store.dispatch</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">methods: &#123;<br>    submitForm () &#123;<br>        <span class=\"hljs-built_in\">this</span>.$store.dispatch(<span class=\"hljs-string\">&#x27;login&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Axios(三):GET和POST提交数据","date":"2020-03-03T09:05:24.000Z","_content":"\n## GET 请求传递参数\n  \n### 1、直接在 URL 上添加参数\n\n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/?ID=12345&firstName=Fred&lastName=Flintstone')\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n### 2、可以通过 params 设置参数\n  \n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/', {\n    params: {\n        ID: 12345,\n        firstName: 'Fred',\n        lastName: 'Flintstone',\n    }\n})\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n## POST 请求传递参数\n\n### 1、Content-Type: application/json\n\n```javascript\nimport axios from 'axios'\n\nlet data = {\"code\":\"1234\",\"name\":\"yyyy\"};\naxios.post(`${this.$url}/test/testRequest`,data)\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n### 2、Content-Type: multipart/form-data\n\n```javascript\nimport axios from 'axios'\nlet data = new FormData();\ndata.append('code','1234');\ndata.append('name','yyyy');\naxios.post(`${this.$url}/test/testRequest`,data)\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n### 3、Content-Type: application/x-www-form-urlencoded\n\n```javascript\nimport axios from 'axios'\nimport qs from 'Qs'\nlet data = {\"code\":\"1234\",\"name\":\"yyyy\"};\naxios.post(`${this.$url}/test/testRequest`,qs.stringify({\n    data\n}))\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n总结：  \n1、上面三种方式会对应后台的请求方式，这个也要注意，比如django POST参数获取\n","source":"_posts/vue-Axios(三)GET和POST提交数据.md","raw":"---\ntitle: Axios(三):GET和POST提交数据\ndate: 2020-03-03 17:05:24\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - axios\n    - GET\n    - POST\n---\n\n## GET 请求传递参数\n  \n### 1、直接在 URL 上添加参数\n\n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/?ID=12345&firstName=Fred&lastName=Flintstone')\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n### 2、可以通过 params 设置参数\n  \n```javascript\nimport axios from 'axios'\n\naxios.get('/api/goods/add_info/', {\n    params: {\n        ID: 12345,\n        firstName: 'Fred',\n        lastName: 'Flintstone',\n    }\n})\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n});\n```\n\n## POST 请求传递参数\n\n### 1、Content-Type: application/json\n\n```javascript\nimport axios from 'axios'\n\nlet data = {\"code\":\"1234\",\"name\":\"yyyy\"};\naxios.post(`${this.$url}/test/testRequest`,data)\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n### 2、Content-Type: multipart/form-data\n\n```javascript\nimport axios from 'axios'\nlet data = new FormData();\ndata.append('code','1234');\ndata.append('name','yyyy');\naxios.post(`${this.$url}/test/testRequest`,data)\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n### 3、Content-Type: application/x-www-form-urlencoded\n\n```javascript\nimport axios from 'axios'\nimport qs from 'Qs'\nlet data = {\"code\":\"1234\",\"name\":\"yyyy\"};\naxios.post(`${this.$url}/test/testRequest`,qs.stringify({\n    data\n}))\n.then(res=>{\n    console.log('res=>',res);\n})\n```\n\n总结：  \n1、上面三种方式会对应后台的请求方式，这个也要注意，比如django POST参数获取\n","slug":"vue-Axios(三)GET和POST提交数据","published":1,"updated":"2020-12-01T14:23:48.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucs002djjln99nkbwlu","content":"<h2 id=\"GET-请求传递参数\"><a href=\"#GET-请求传递参数\" class=\"headerlink\" title=\"GET 请求传递参数\"></a>GET 请求传递参数</h2><h3 id=\"1、直接在-URL-上添加参数\"><a href=\"#1、直接在-URL-上添加参数\" class=\"headerlink\" title=\"1、直接在 URL 上添加参数\"></a>1、直接在 URL 上添加参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2、可以通过-params-设置参数\"><a href=\"#2、可以通过-params-设置参数\" class=\"headerlink\" title=\"2、可以通过 params 设置参数\"></a>2、可以通过 params 设置参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/&#x27;</span>, &#123;<br>    params: &#123;<br>        ID: <span class=\"hljs-number\">12345</span>,<br>        firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>        lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span>,<br>    &#125;<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"POST-请求传递参数\"><a href=\"#POST-请求传递参数\" class=\"headerlink\" title=\"POST 请求传递参数\"></a>POST 请求传递参数</h2><h3 id=\"1、Content-Type-application-json\"><a href=\"#1、Content-Type-application-json\" class=\"headerlink\" title=\"1、Content-Type: application/json\"></a>1、Content-Type: application/json</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br><span class=\"hljs-keyword\">let</span> data = &#123;<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1234&quot;</span>,<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;yyyy&quot;</span>&#125;;<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,data)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2、Content-Type-multipart-form-data\"><a href=\"#2、Content-Type-multipart-form-data\" class=\"headerlink\" title=\"2、Content-Type: multipart/form-data\"></a>2、Content-Type: multipart/form-data</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">new</span> FormData();<br>data.append(<span class=\"hljs-string\">&#x27;code&#x27;</span>,<span class=\"hljs-string\">&#x27;1234&#x27;</span>);<br>data.append(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;yyyy&#x27;</span>);<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,data)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3、Content-Type-application-x-www-form-urlencoded\"><a href=\"#3、Content-Type-application-x-www-form-urlencoded\" class=\"headerlink\" title=\"3、Content-Type: application/x-www-form-urlencoded\"></a>3、Content-Type: application/x-www-form-urlencoded</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">import</span> qs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Qs&#x27;</span><br><span class=\"hljs-keyword\">let</span> data = &#123;<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1234&quot;</span>,<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;yyyy&quot;</span>&#125;;<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,qs.stringify(&#123;<br>    data<br>&#125;))<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<p>总结：<br>1、上面三种方式会对应后台的请求方式，这个也要注意，比如django POST参数获取</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GET-请求传递参数\"><a href=\"#GET-请求传递参数\" class=\"headerlink\" title=\"GET 请求传递参数\"></a>GET 请求传递参数</h2><h3 id=\"1、直接在-URL-上添加参数\"><a href=\"#1、直接在-URL-上添加参数\" class=\"headerlink\" title=\"1、直接在 URL 上添加参数\"></a>1、直接在 URL 上添加参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、可以通过-params-设置参数\"><a href=\"#2、可以通过-params-设置参数\" class=\"headerlink\" title=\"2、可以通过 params 设置参数\"></a>2、可以通过 params 设置参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/goods/add_info/&#x27;</span>, &#123;<br>    params: &#123;<br>        ID: <span class=\"hljs-number\">12345</span>,<br>        firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>        lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span>,<br>    &#125;<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br>.catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure>\n<h2 id=\"POST-请求传递参数\"><a href=\"#POST-请求传递参数\" class=\"headerlink\" title=\"POST 请求传递参数\"></a>POST 请求传递参数</h2><h3 id=\"1、Content-Type-application-json\"><a href=\"#1、Content-Type-application-json\" class=\"headerlink\" title=\"1、Content-Type: application/json\"></a>1、Content-Type: application/json</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br><span class=\"hljs-keyword\">let</span> data = &#123;<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1234&quot;</span>,<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;yyyy&quot;</span>&#125;;<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,data)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、Content-Type-multipart-form-data\"><a href=\"#2、Content-Type-multipart-form-data\" class=\"headerlink\" title=\"2、Content-Type: multipart/form-data\"></a>2、Content-Type: multipart/form-data</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">new</span> FormData();<br>data.append(<span class=\"hljs-string\">&#x27;code&#x27;</span>,<span class=\"hljs-string\">&#x27;1234&#x27;</span>);<br>data.append(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;yyyy&#x27;</span>);<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,data)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"3、Content-Type-application-x-www-form-urlencoded\"><a href=\"#3、Content-Type-application-x-www-form-urlencoded\" class=\"headerlink\" title=\"3、Content-Type: application/x-www-form-urlencoded\"></a>3、Content-Type: application/x-www-form-urlencoded</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><span class=\"hljs-keyword\">import</span> qs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;Qs&#x27;</span><br><span class=\"hljs-keyword\">let</span> data = &#123;<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1234&quot;</span>,<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;yyyy&quot;</span>&#125;;<br>axios.post(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.$url&#125;</span>/test/testRequest`</span>,qs.stringify(&#123;<br>    data<br>&#125;))<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;res=&gt;&#x27;</span>,res);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>总结：<br>1、上面三种方式会对应后台的请求方式，这个也要注意，比如django POST参数获取</p>\n"},{"title":"Axios(二):API说明","date":"2020-03-03T05:30:05.000Z","_content":"\n## Axios API\n\n1. 可以通过向 axios 传递相关配置来创建请求\n\n    - axios配置全部参数\n\n        ```javascript\n        axios(config)\n        ```\n\n        ```javascript\n        // 发送 POST 请求\n        axios({\n            method: 'post',\n            url: '/user/12345',\n            data: {\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n            }\n        });\n        ```\n\n    - axios中指定url和参数配置\n\n        ```javascript\n        axios(url[, config])\n        ```\n\n        ```javascript\n        // 发送 GET 请求（默认的方法）\n        axios('/user/12345');\n        ```\n\n        ```javascript\n        // 发送 POST 请求\n        axios('/user/12345', {\n            method: 'post',\n            data: {\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n            }\n        });\n        ```\n\n2. 请求方法的别名\n\n    - 为方便起见，为所有支持的请求方法提供了别名\n\n        ```javascript\n        axios.request(config)\n        axios.get(url[, config])\n        axios.delete(url[, config])\n        axios.head(url[, config])\n        axios.post(url[, data[, config]])\n        axios.put(url[, data[, config]])\n        axios.patch(url[, data[, config]])\n        ```\n\n        > NOTE:在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n    - axios请求方法\n\n        ```javascript\n        // 发送 POST 请求\n        axios.post('/user/12345',{\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n        });\n        ```\n\n3. 并发\n\n    - 处理并发请求的助手函数\n\n        ```javascript\n        axios.all(iterable)\n        axios.spread(callback)\n        ```\n\n    - 执行多个并发请求\n\n        ```javascript\n        function getUserAccount() {\n            return axios.get('/user/12345');\n        }\n\n        function getUserPermissions() {\n            return axios.get('/user/12345/permissions');\n        }\n\n        axios.all([getUserAccount(), getUserPermissions()])\n        .then(axios.spread(function (acct, perms) {\n            // 两个请求现在都执行完成\n        }));\n        ```\n","source":"_posts/vue-Axios(二)API说明.md","raw":"---\ntitle: Axios(二):API说明\ndate: 2020-03-03 13:30:05\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - axios\n    - API\n---\n\n## Axios API\n\n1. 可以通过向 axios 传递相关配置来创建请求\n\n    - axios配置全部参数\n\n        ```javascript\n        axios(config)\n        ```\n\n        ```javascript\n        // 发送 POST 请求\n        axios({\n            method: 'post',\n            url: '/user/12345',\n            data: {\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n            }\n        });\n        ```\n\n    - axios中指定url和参数配置\n\n        ```javascript\n        axios(url[, config])\n        ```\n\n        ```javascript\n        // 发送 GET 请求（默认的方法）\n        axios('/user/12345');\n        ```\n\n        ```javascript\n        // 发送 POST 请求\n        axios('/user/12345', {\n            method: 'post',\n            data: {\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n            }\n        });\n        ```\n\n2. 请求方法的别名\n\n    - 为方便起见，为所有支持的请求方法提供了别名\n\n        ```javascript\n        axios.request(config)\n        axios.get(url[, config])\n        axios.delete(url[, config])\n        axios.head(url[, config])\n        axios.post(url[, data[, config]])\n        axios.put(url[, data[, config]])\n        axios.patch(url[, data[, config]])\n        ```\n\n        > NOTE:在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n    - axios请求方法\n\n        ```javascript\n        // 发送 POST 请求\n        axios.post('/user/12345',{\n            firstName: 'Fred',\n            lastName: 'Flintstone'\n        });\n        ```\n\n3. 并发\n\n    - 处理并发请求的助手函数\n\n        ```javascript\n        axios.all(iterable)\n        axios.spread(callback)\n        ```\n\n    - 执行多个并发请求\n\n        ```javascript\n        function getUserAccount() {\n            return axios.get('/user/12345');\n        }\n\n        function getUserPermissions() {\n            return axios.get('/user/12345/permissions');\n        }\n\n        axios.all([getUserAccount(), getUserPermissions()])\n        .then(axios.spread(function (acct, perms) {\n            // 两个请求现在都执行完成\n        }));\n        ```\n","slug":"vue-Axios(二)API说明","published":1,"updated":"2020-12-01T14:23:48.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuct002hjjln32l093z7","content":"<h2 id=\"Axios-API\"><a href=\"#Axios-API\" class=\"headerlink\" title=\"Axios API\"></a>Axios API</h2><ol>\n<li><p>可以通过向 axios 传递相关配置来创建请求</p>\n<ul>\n<li><p>axios配置全部参数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">axios(config)<br></code></pre></div></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios(&#123;<br>    method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    url: <span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,<br>    data: &#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure></li>\n<li><p>axios中指定url和参数配置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">axios(url[, config])<br></code></pre></div></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 GET 请求（默认的方法）</span><br>axios(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br></code></pre></div></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>, &#123;<br>    method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    data: &#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>请求方法的别名</p>\n<ul>\n<li><p>为方便起见，为所有支持的请求方法提供了别名</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">axios.request(config)<br>axios.get(url[, config])<br>axios.delete(url[, config])<br>axios.head(url[, config])<br>axios.post(url[, data[, config]])<br>axios.put(url[, data[, config]])<br>axios.patch(url[, data[, config]])<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>NOTE:在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</blockquote>\n</li>\n<li><p>axios请求方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios.post(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,&#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>并发</p>\n<ul>\n<li><p>处理并发请求的助手函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">axios.all(iterable)<br>axios.spread(callback)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>执行多个并发请求</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserAccount</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserPermissions</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br>axios.all([getUserAccount(), getUserPermissions()])<br>.then(axios.spread(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">acct, perms</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 两个请求现在都执行完成</span><br>&#125;));<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Axios-API\"><a href=\"#Axios-API\" class=\"headerlink\" title=\"Axios API\"></a>Axios API</h2><ol>\n<li><p>可以通过向 axios 传递相关配置来创建请求</p>\n<ul>\n<li><p>axios配置全部参数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">axios(config)<br></code></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios(&#123;<br>    method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    url: <span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,<br>    data: &#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li><p>axios中指定url和参数配置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">axios(url[, config])<br></code></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 GET 请求（默认的方法）</span><br>axios(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br></code></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>, &#123;<br>    method: <span class=\"hljs-string\">&#x27;post&#x27;</span>,<br>    data: &#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>请求方法的别名</p>\n<ul>\n<li><p>为方便起见，为所有支持的请求方法提供了别名</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">axios.request(config)<br>axios.get(url[, config])<br>axios.delete(url[, config])<br>axios.head(url[, config])<br>axios.post(url[, data[, config]])<br>axios.put(url[, data[, config]])<br>axios.patch(url[, data[, config]])<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE:在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</blockquote>\n</li>\n<li><p>axios请求方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 发送 POST 请求</span><br>axios.post(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>,&#123;<br>    firstName: <span class=\"hljs-string\">&#x27;Fred&#x27;</span>,<br>    lastName: <span class=\"hljs-string\">&#x27;Flintstone&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>并发</p>\n<ul>\n<li><p>处理并发请求的助手函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">axios.all(iterable)<br>axios.spread(callback)<br></code></pre></td></tr></table></figure></li>\n<li><p>执行多个并发请求</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserAccount</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserPermissions</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br>axios.all([getUserAccount(), getUserPermissions()])<br>.then(axios.spread(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">acct, perms</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 两个请求现在都执行完成</span><br>&#125;));<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Axios(四):跨域请求","date":"2020-03-03T09:55:30.000Z","_content":"在前后端开发过程中一直会伴随我们的问题就是跨域问题，因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行axios访问的时候浏览器就会报跨域相关的错误。\n\n原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。\n\n## 1. 设置代理服务器,实现跨域请求转发\n\n方案：采用proxyTable解决。\n\n1. proxyTable是什么？\n\n    vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware),它是http代理中间件，它依赖node.js，基本原理是用服务端代理解决浏览器跨域\n\n    实现的过程就是在我们前端的本地起一个服务，然后我们前端的所有ajax访问首选访问我们本地的服务，本地的服务不会对来的请求做加工处理，只是将请求转发到我们真实的后台服务上去。我们本地的服务其实你就是一个中转站。这种解决方案就是利用**后端之间访问是不存在跨域的问题**。\n\n2. 具体流程\n\n    1. 首先在`config/index.js`里面找到`proxyTable:{}`,然后在里面加入\n\n        ```javascript\n        \"/api\":{\n            target: 'https://www.runoob.com',\n            changeOrigin: true,\n            pathRewrite:{\n                '^/api':''\n            }\n        }\n        ```\n\n        >注意:\n\n        - `/api`: 是自定义的，写成什么都可以。\n\n        - `target`: 设置要调用的接口域名和端口号。\n\n        - `^/api`: 代替`target`里面的地址，后面组件中我们调接口时直接用`/api`代替\n\n    2. 在组件中实现跨域请求\n\n        - 比如要访问`'https://www.runoob.com/ajax/json_demo.json'`，直接写`/api/ajax/json_demo.json`即可。\n\n            ```javascript\n            import axios from 'axios'\n\n            axios.get('/api/ajax/json_demo.json')\n                .then(resp=>{\n                    console.log(resp.data)\n                })\n                .cath(err=>{\n                    console.log(err)\n                })\n            ```\n\n        - 然而我们可以在`src/main.js`设置一个基础路径，这样你调用接口的时候可以不写`api`,直接写`/ajax/json_demo.json`即可。\n\n            - 在`src/main.js`设置`axios.defaults.baseURL=\"/api\"`;\n\n                ```javascript\n                import axios from 'axios'\n                axios.defaults.baseURL=\"/api\";\n                ```\n\n            - 在组件中直接调用接口即可。\n\n                ```javascript\n                import axios from 'axios'\n\n                axios.get('/ajax/json_demo.json')\n                    .then(resp=>{\n                        console.log(resp.data)\n                    })\n                    .cath(err=>{\n                        console.log(err)\n                    })\n                ```\n\n## 2. 在后台django中配置跨域请求允许\n\n但是今天我们这里不讲这种方式，有兴趣的可以在我的另一篇博客看到\n","source":"_posts/vue-Axios(四)跨域请求.md","raw":"---\ntitle: Axios(四):跨域请求\ndate: 2020-03-03 17:55:30\ncategories:\n    - 技术\n    - vue\ntags:\n    - vue\n    - axios\n    - 跨域\n---\n在前后端开发过程中一直会伴随我们的问题就是跨域问题，因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行axios访问的时候浏览器就会报跨域相关的错误。\n\n原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。\n\n## 1. 设置代理服务器,实现跨域请求转发\n\n方案：采用proxyTable解决。\n\n1. proxyTable是什么？\n\n    vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了[http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware),它是http代理中间件，它依赖node.js，基本原理是用服务端代理解决浏览器跨域\n\n    实现的过程就是在我们前端的本地起一个服务，然后我们前端的所有ajax访问首选访问我们本地的服务，本地的服务不会对来的请求做加工处理，只是将请求转发到我们真实的后台服务上去。我们本地的服务其实你就是一个中转站。这种解决方案就是利用**后端之间访问是不存在跨域的问题**。\n\n2. 具体流程\n\n    1. 首先在`config/index.js`里面找到`proxyTable:{}`,然后在里面加入\n\n        ```javascript\n        \"/api\":{\n            target: 'https://www.runoob.com',\n            changeOrigin: true,\n            pathRewrite:{\n                '^/api':''\n            }\n        }\n        ```\n\n        >注意:\n\n        - `/api`: 是自定义的，写成什么都可以。\n\n        - `target`: 设置要调用的接口域名和端口号。\n\n        - `^/api`: 代替`target`里面的地址，后面组件中我们调接口时直接用`/api`代替\n\n    2. 在组件中实现跨域请求\n\n        - 比如要访问`'https://www.runoob.com/ajax/json_demo.json'`，直接写`/api/ajax/json_demo.json`即可。\n\n            ```javascript\n            import axios from 'axios'\n\n            axios.get('/api/ajax/json_demo.json')\n                .then(resp=>{\n                    console.log(resp.data)\n                })\n                .cath(err=>{\n                    console.log(err)\n                })\n            ```\n\n        - 然而我们可以在`src/main.js`设置一个基础路径，这样你调用接口的时候可以不写`api`,直接写`/ajax/json_demo.json`即可。\n\n            - 在`src/main.js`设置`axios.defaults.baseURL=\"/api\"`;\n\n                ```javascript\n                import axios from 'axios'\n                axios.defaults.baseURL=\"/api\";\n                ```\n\n            - 在组件中直接调用接口即可。\n\n                ```javascript\n                import axios from 'axios'\n\n                axios.get('/ajax/json_demo.json')\n                    .then(resp=>{\n                        console.log(resp.data)\n                    })\n                    .cath(err=>{\n                        console.log(err)\n                    })\n                ```\n\n## 2. 在后台django中配置跨域请求允许\n\n但是今天我们这里不讲这种方式，有兴趣的可以在我的另一篇博客看到\n","slug":"vue-Axios(四)跨域请求","published":1,"updated":"2020-12-01T14:23:48.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucv002kjjlnbpdw2xs4","content":"<p>在前后端开发过程中一直会伴随我们的问题就是跨域问题，因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行axios访问的时候浏览器就会报跨域相关的错误。</p>\n<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>\n<h2 id=\"1-设置代理服务器-实现跨域请求转发\"><a href=\"#1-设置代理服务器-实现跨域请求转发\" class=\"headerlink\" title=\"1. 设置代理服务器,实现跨域请求转发\"></a>1. 设置代理服务器,实现跨域请求转发</h2><p>方案：采用proxyTable解决。</p>\n<ol>\n<li><p>proxyTable是什么？</p>\n<p> vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了<a href=\"https://github.com/chimurai/http-proxy-middleware\">http-proxy-middleware</a>,它是http代理中间件，它依赖node.js，基本原理是用服务端代理解决浏览器跨域</p>\n<p> 实现的过程就是在我们前端的本地起一个服务，然后我们前端的所有ajax访问首选访问我们本地的服务，本地的服务不会对来的请求做加工处理，只是将请求转发到我们真实的后台服务上去。我们本地的服务其实你就是一个中转站。这种解决方案就是利用<strong>后端之间访问是不存在跨域的问题</strong>。</p>\n</li>\n<li><p>具体流程</p>\n<ol>\n<li><p>首先在<code>config/index.js</code>里面找到<code>proxyTable:&#123;&#125;</code>,然后在里面加入</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&quot;/api&quot;</span>:&#123;<br>    target: <span class=\"hljs-string\">&#x27;https://www.runoob.com&#x27;</span>,<br>    changeOrigin: <span class=\"hljs-literal\">true</span>,<br>    pathRewrite:&#123;<br>        <span class=\"hljs-string\">&#x27;^/api&#x27;</span>:<span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意:</p>\n</blockquote>\n<ul>\n<li><p><code>/api</code>: 是自定义的，写成什么都可以。</p>\n</li>\n<li><p><code>target</code>: 设置要调用的接口域名和端口号。</p>\n</li>\n<li><p><code>^/api</code>: 代替<code>target</code>里面的地址，后面组件中我们调接口时直接用<code>/api</code>代替</p>\n</li>\n</ul>\n</li>\n<li><p>在组件中实现跨域请求</p>\n<ul>\n<li><p>比如要访问<code>&#39;https://www.runoob.com/ajax/json_demo.json&#39;</code>，直接写<code>/api/ajax/json_demo.json</code>即可。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/ajax/json_demo.json&#x27;</span>)<br>    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(resp.data)<br>    &#125;)<br>    .cath(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>    &#125;)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>然而我们可以在<code>src/main.js</code>设置一个基础路径，这样你调用接口的时候可以不写<code>api</code>,直接写<code>/ajax/json_demo.json</code>即可。</p>\n<ul>\n<li><p>在<code>src/main.js</code>设置<code>axios.defaults.baseURL=&quot;/api&quot;</code>;</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br>axios.defaults.baseURL=<span class=\"hljs-string\">&quot;/api&quot;</span>;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在组件中直接调用接口即可。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/ajax/json_demo.json&#x27;</span>)<br>    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(resp.data)<br>    &#125;)<br>    .cath(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>    &#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"2-在后台django中配置跨域请求允许\"><a href=\"#2-在后台django中配置跨域请求允许\" class=\"headerlink\" title=\"2. 在后台django中配置跨域请求允许\"></a>2. 在后台django中配置跨域请求允许</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>但是今天我们这里不讲这种方式，有兴趣的可以在我的另一篇博客看到</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在前后端开发过程中一直会伴随我们的问题就是跨域问题，因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行axios访问的时候浏览器就会报跨域相关的错误。</p>\n<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>\n<h2 id=\"1-设置代理服务器-实现跨域请求转发\"><a href=\"#1-设置代理服务器-实现跨域请求转发\" class=\"headerlink\" title=\"1. 设置代理服务器,实现跨域请求转发\"></a>1. 设置代理服务器,实现跨域请求转发</h2><p>方案：采用proxyTable解决。</p>\n<ol>\n<li><p>proxyTable是什么？</p>\n<p> vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了<a href=\"https://github.com/chimurai/http-proxy-middleware\">http-proxy-middleware</a>,它是http代理中间件，它依赖node.js，基本原理是用服务端代理解决浏览器跨域</p>\n<p> 实现的过程就是在我们前端的本地起一个服务，然后我们前端的所有ajax访问首选访问我们本地的服务，本地的服务不会对来的请求做加工处理，只是将请求转发到我们真实的后台服务上去。我们本地的服务其实你就是一个中转站。这种解决方案就是利用<strong>后端之间访问是不存在跨域的问题</strong>。</p>\n</li>\n<li><p>具体流程</p>\n<ol>\n<li><p>首先在<code>config/index.js</code>里面找到<code>proxyTable:&#123;&#125;</code>,然后在里面加入</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&quot;/api&quot;</span>:&#123;<br>    target: <span class=\"hljs-string\">&#x27;https://www.runoob.com&#x27;</span>,<br>    changeOrigin: <span class=\"hljs-literal\">true</span>,<br>    pathRewrite:&#123;<br>        <span class=\"hljs-string\">&#x27;^/api&#x27;</span>:<span class=\"hljs-string\">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:</p>\n</blockquote>\n<ul>\n<li><p><code>/api</code>: 是自定义的，写成什么都可以。</p>\n</li>\n<li><p><code>target</code>: 设置要调用的接口域名和端口号。</p>\n</li>\n<li><p><code>^/api</code>: 代替<code>target</code>里面的地址，后面组件中我们调接口时直接用<code>/api</code>代替</p>\n</li>\n</ul>\n</li>\n<li><p>在组件中实现跨域请求</p>\n<ul>\n<li><p>比如要访问<code>&#39;https://www.runoob.com/ajax/json_demo.json&#39;</code>，直接写<code>/api/ajax/json_demo.json</code>即可。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/api/ajax/json_demo.json&#x27;</span>)<br>    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(resp.data)<br>    &#125;)<br>    .cath(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>    &#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>然而我们可以在<code>src/main.js</code>设置一个基础路径，这样你调用接口的时候可以不写<code>api</code>,直接写<code>/ajax/json_demo.json</code>即可。</p>\n<ul>\n<li><p>在<code>src/main.js</code>设置<code>axios.defaults.baseURL=&quot;/api&quot;</code>;</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br>axios.defaults.baseURL=<span class=\"hljs-string\">&quot;/api&quot;</span>;<br></code></pre></td></tr></table></figure></li>\n<li><p>在组件中直接调用接口即可。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.get(<span class=\"hljs-string\">&#x27;/ajax/json_demo.json&#x27;</span>)<br>    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(resp.data)<br>    &#125;)<br>    .cath(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>    &#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-在后台django中配置跨域请求允许\"><a href=\"#2-在后台django中配置跨域请求允许\" class=\"headerlink\" title=\"2. 在后台django中配置跨域请求允许\"></a>2. 在后台django中配置跨域请求允许</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>但是今天我们这里不讲这种方式，有兴趣的可以在我的另一篇博客看到</p>\n"},{"title":"HTTP状态码","date":"2020-05-24T12:38:26.000Z","_content":"\nHTTP 协议之 http 状态码详解\n-------------------\n\nHTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。\n\n它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。\n\nHTTP 状态码被分为五大类， 目前我们使用的 HTTP 协议版本是 1.1， 支持以下的状态码。随着协议的发展，HTTP 规范中会定义更多的状态码。 \n\n## 1xx（临时响应）\n\n>   表示临时响应并需要请求者继续执行操作的状态代码。\n\n代码 | 说明\n:--:|:---:\n100  |（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 \n101  |（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。\n\n## 2xx （成功）\n\n>   表示成功处理了请求的状态代码。\n\n代码|  说明\n:--:|:----\n200  |（成功） 服务器已成功处理了请求，该操作是幂等的（Idempotent）。 通常，这表示服务器提供了请求的网页。\n201  |（已创建） 请求成功并且服务器创建了新的资源。\n202  |（已接受） 服务器已接受请求，但尚未处理。即请求已经进入后台排队（异步任务）\n203  |（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204  |（无内容） 服务器成功处理了请求，但没有返回任何内容。\n205  |（重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206  |（部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3xx （重定向）\n\n>   表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n\n代码  |说明\n:--:|:----\n300  |（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301  |（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302  |（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303  |（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304  |（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305  |（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n307  |（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4xx（请求错误）\n\n> 这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n代码 | 说明\n:--:|:---:\n400  |（错误请求） 服务器不理解请求的语法。\n401  |（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n403  |（禁止） 服务器拒绝请求。\n404  |（未找到） 服务器找不到请求的网页。\n405  |（方法禁用） 禁用请求中指定的方法。\n406  |（不接受） 无法使用请求的内容特性响应请求的网页。\n407  |（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408  |（请求超时） 服务器等候请求时发生超时。\n409  |（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410  |（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411  |（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412  |（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413  |（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414  |（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415  |（不支持的媒体类型） 请求的格式不受请求页面的支持。\n416  |（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 | （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5xx（服务器错误）\n\n>   这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n代码|  说明\n:--:|:---:\n500  |（服务器内部错误） 服务器遇到错误，无法完成请求。\n501  |（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502  |（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503  |（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504  |（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505  |（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。 ","source":"_posts/web-HTTP 协议之 http 状态码详解.md","raw":"---\ntitle: HTTP状态码\ndate: 2020-05-24 20:38:26\ncategories:\n  - 技术\n  - python\n  - web\ntags:\n  - 状态码\n  - HTTP\n---\n\nHTTP 协议之 http 状态码详解\n-------------------\n\nHTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。\n\n它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。\n\nHTTP 状态码被分为五大类， 目前我们使用的 HTTP 协议版本是 1.1， 支持以下的状态码。随着协议的发展，HTTP 规范中会定义更多的状态码。 \n\n## 1xx（临时响应）\n\n>   表示临时响应并需要请求者继续执行操作的状态代码。\n\n代码 | 说明\n:--:|:---:\n100  |（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 \n101  |（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。\n\n## 2xx （成功）\n\n>   表示成功处理了请求的状态代码。\n\n代码|  说明\n:--:|:----\n200  |（成功） 服务器已成功处理了请求，该操作是幂等的（Idempotent）。 通常，这表示服务器提供了请求的网页。\n201  |（已创建） 请求成功并且服务器创建了新的资源。\n202  |（已接受） 服务器已接受请求，但尚未处理。即请求已经进入后台排队（异步任务）\n203  |（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204  |（无内容） 服务器成功处理了请求，但没有返回任何内容。\n205  |（重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206  |（部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3xx （重定向）\n\n>   表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n\n代码  |说明\n:--:|:----\n300  |（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301  |（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302  |（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303  |（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304  |（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305  |（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n307  |（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4xx（请求错误）\n\n> 这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n代码 | 说明\n:--:|:---:\n400  |（错误请求） 服务器不理解请求的语法。\n401  |（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n403  |（禁止） 服务器拒绝请求。\n404  |（未找到） 服务器找不到请求的网页。\n405  |（方法禁用） 禁用请求中指定的方法。\n406  |（不接受） 无法使用请求的内容特性响应请求的网页。\n407  |（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408  |（请求超时） 服务器等候请求时发生超时。\n409  |（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410  |（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411  |（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412  |（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413  |（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414  |（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415  |（不支持的媒体类型） 请求的格式不受请求页面的支持。\n416  |（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 | （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5xx（服务器错误）\n\n>   这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n代码|  说明\n:--:|:---:\n500  |（服务器内部错误） 服务器遇到错误，无法完成请求。\n501  |（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502  |（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503  |（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504  |（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505  |（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。 ","slug":"web-HTTP 协议之 http 状态码详解","published":1,"updated":"2021-01-23T15:17:00.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucx002njjlnhya9and9","content":"<h2 id=\"HTTP-协议之-http-状态码详解\"><a href=\"#HTTP-协议之-http-状态码详解\" class=\"headerlink\" title=\"HTTP 协议之 http 状态码详解\"></a>HTTP 协议之 http 状态码详解</h2><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。</p>\n<p>它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p>\n<p>HTTP 状态码被分为五大类， 目前我们使用的 HTTP 协议版本是 1.1， 支持以下的状态码。随着协议的发展，HTTP 规范中会定义更多的状态码。 </p>\n<h2 id=\"1xx（临时响应）\"><a href=\"#1xx（临时响应）\" class=\"headerlink\" title=\"1xx（临时响应）\"></a>1xx（临时响应）</h2><blockquote>\n<p>  表示临时响应并需要请求者继续执行操作的状态代码。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">100</td>\n<td align=\"center\">（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\">（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2xx-（成功）\"><a href=\"#2xx-（成功）\" class=\"headerlink\" title=\"2xx （成功）\"></a>2xx （成功）</h2><blockquote>\n<p>  表示成功处理了请求的状态代码。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">200</td>\n<td align=\"left\">（成功） 服务器已成功处理了请求，该操作是幂等的（Idempotent）。 通常，这表示服务器提供了请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">201</td>\n<td align=\"left\">（已创建） 请求成功并且服务器创建了新的资源。</td>\n</tr>\n<tr>\n<td align=\"center\">202</td>\n<td align=\"left\">（已接受） 服务器已接受请求，但尚未处理。即请求已经进入后台排队（异步任务）</td>\n</tr>\n<tr>\n<td align=\"center\">203</td>\n<td align=\"left\">（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>\n</tr>\n<tr>\n<td align=\"center\">204</td>\n<td align=\"left\">（无内容） 服务器成功处理了请求，但没有返回任何内容。</td>\n</tr>\n<tr>\n<td align=\"center\">205</td>\n<td align=\"left\">（重置内容） 服务器成功处理了请求，但没有返回任何内容。</td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"left\">（部分内容） 服务器成功处理了部分 GET 请求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"3xx-（重定向）\"><a href=\"#3xx-（重定向）\" class=\"headerlink\" title=\"3xx （重定向）\"></a>3xx （重定向）</h2><blockquote>\n<p>  表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">300</td>\n<td align=\"left\">（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td align=\"center\">301</td>\n<td align=\"left\">（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td align=\"center\">302</td>\n<td align=\"left\">（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">303</td>\n<td align=\"left\">（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>\n</tr>\n<tr>\n<td align=\"center\">304</td>\n<td align=\"left\">（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td>\n</tr>\n<tr>\n<td align=\"center\">305</td>\n<td align=\"left\">（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\">307</td>\n<td align=\"left\">（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"4xx（请求错误）\"><a href=\"#4xx（请求错误）\" class=\"headerlink\" title=\"4xx（请求错误）\"></a>4xx（请求错误）</h2><blockquote>\n<p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">400</td>\n<td align=\"center\">（错误请求） 服务器不理解请求的语法。</td>\n</tr>\n<tr>\n<td align=\"center\">401</td>\n<td align=\"center\">（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td>\n</tr>\n<tr>\n<td align=\"center\">403</td>\n<td align=\"center\">（禁止） 服务器拒绝请求。</td>\n</tr>\n<tr>\n<td align=\"center\">404</td>\n<td align=\"center\">（未找到） 服务器找不到请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">405</td>\n<td align=\"center\">（方法禁用） 禁用请求中指定的方法。</td>\n</tr>\n<tr>\n<td align=\"center\">406</td>\n<td align=\"center\">（不接受） 无法使用请求的内容特性响应请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">407</td>\n<td align=\"center\">（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\">408</td>\n<td align=\"center\">（请求超时） 服务器等候请求时发生超时。</td>\n</tr>\n<tr>\n<td align=\"center\">409</td>\n<td align=\"center\">（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td>\n</tr>\n<tr>\n<td align=\"center\">410</td>\n<td align=\"center\">（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</td>\n</tr>\n<tr>\n<td align=\"center\">411</td>\n<td align=\"center\">（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">412</td>\n<td align=\"center\">（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td>\n</tr>\n<tr>\n<td align=\"center\">413</td>\n<td align=\"center\">（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>\n</tr>\n<tr>\n<td align=\"center\">414</td>\n<td align=\"center\">（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td>\n</tr>\n<tr>\n<td align=\"center\">415</td>\n<td align=\"center\">（不支持的媒体类型） 请求的格式不受请求页面的支持。</td>\n</tr>\n<tr>\n<td align=\"center\">416</td>\n<td align=\"center\">（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>\n</tr>\n<tr>\n<td align=\"center\">417</td>\n<td align=\"center\">（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h2><blockquote>\n<p>  这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">500</td>\n<td align=\"center\">（服务器内部错误） 服务器遇到错误，无法完成请求。</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td align=\"center\">（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td>\n</tr>\n<tr>\n<td align=\"center\">502</td>\n<td align=\"center\">（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td>\n</tr>\n<tr>\n<td align=\"center\">503</td>\n<td align=\"center\">（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>\n</tr>\n<tr>\n<td align=\"center\">504</td>\n<td align=\"center\">（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>\n</tr>\n<tr>\n<td align=\"center\">505</td>\n<td align=\"center\">（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTTP-协议之-http-状态码详解\"><a href=\"#HTTP-协议之-http-状态码详解\" class=\"headerlink\" title=\"HTTP 协议之 http 状态码详解\"></a>HTTP 协议之 http 状态码详解</h2><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。</p>\n<p>它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p>\n<p>HTTP 状态码被分为五大类， 目前我们使用的 HTTP 协议版本是 1.1， 支持以下的状态码。随着协议的发展，HTTP 规范中会定义更多的状态码。 </p>\n<h2 id=\"1xx（临时响应）\"><a href=\"#1xx（临时响应）\" class=\"headerlink\" title=\"1xx（临时响应）\"></a>1xx（临时响应）</h2><blockquote>\n<p>  表示临时响应并需要请求者继续执行操作的状态代码。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">100</td>\n<td align=\"center\">（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\">（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2xx-（成功）\"><a href=\"#2xx-（成功）\" class=\"headerlink\" title=\"2xx （成功）\"></a>2xx （成功）</h2><blockquote>\n<p>  表示成功处理了请求的状态代码。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">200</td>\n<td align=\"left\">（成功） 服务器已成功处理了请求，该操作是幂等的（Idempotent）。 通常，这表示服务器提供了请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">201</td>\n<td align=\"left\">（已创建） 请求成功并且服务器创建了新的资源。</td>\n</tr>\n<tr>\n<td align=\"center\">202</td>\n<td align=\"left\">（已接受） 服务器已接受请求，但尚未处理。即请求已经进入后台排队（异步任务）</td>\n</tr>\n<tr>\n<td align=\"center\">203</td>\n<td align=\"left\">（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>\n</tr>\n<tr>\n<td align=\"center\">204</td>\n<td align=\"left\">（无内容） 服务器成功处理了请求，但没有返回任何内容。</td>\n</tr>\n<tr>\n<td align=\"center\">205</td>\n<td align=\"left\">（重置内容） 服务器成功处理了请求，但没有返回任何内容。</td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"left\">（部分内容） 服务器成功处理了部分 GET 请求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"3xx-（重定向）\"><a href=\"#3xx-（重定向）\" class=\"headerlink\" title=\"3xx （重定向）\"></a>3xx （重定向）</h2><blockquote>\n<p>  表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">300</td>\n<td align=\"left\">（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td align=\"center\">301</td>\n<td align=\"left\">（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td align=\"center\">302</td>\n<td align=\"left\">（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">303</td>\n<td align=\"left\">（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>\n</tr>\n<tr>\n<td align=\"center\">304</td>\n<td align=\"left\">（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td>\n</tr>\n<tr>\n<td align=\"center\">305</td>\n<td align=\"left\">（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\">307</td>\n<td align=\"left\">（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"4xx（请求错误）\"><a href=\"#4xx（请求错误）\" class=\"headerlink\" title=\"4xx（请求错误）\"></a>4xx（请求错误）</h2><blockquote>\n<p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">400</td>\n<td align=\"center\">（错误请求） 服务器不理解请求的语法。</td>\n</tr>\n<tr>\n<td align=\"center\">401</td>\n<td align=\"center\">（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td>\n</tr>\n<tr>\n<td align=\"center\">403</td>\n<td align=\"center\">（禁止） 服务器拒绝请求。</td>\n</tr>\n<tr>\n<td align=\"center\">404</td>\n<td align=\"center\">（未找到） 服务器找不到请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">405</td>\n<td align=\"center\">（方法禁用） 禁用请求中指定的方法。</td>\n</tr>\n<tr>\n<td align=\"center\">406</td>\n<td align=\"center\">（不接受） 无法使用请求的内容特性响应请求的网页。</td>\n</tr>\n<tr>\n<td align=\"center\">407</td>\n<td align=\"center\">（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\">408</td>\n<td align=\"center\">（请求超时） 服务器等候请求时发生超时。</td>\n</tr>\n<tr>\n<td align=\"center\">409</td>\n<td align=\"center\">（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td>\n</tr>\n<tr>\n<td align=\"center\">410</td>\n<td align=\"center\">（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</td>\n</tr>\n<tr>\n<td align=\"center\">411</td>\n<td align=\"center\">（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td>\n</tr>\n<tr>\n<td align=\"center\">412</td>\n<td align=\"center\">（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td>\n</tr>\n<tr>\n<td align=\"center\">413</td>\n<td align=\"center\">（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>\n</tr>\n<tr>\n<td align=\"center\">414</td>\n<td align=\"center\">（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td>\n</tr>\n<tr>\n<td align=\"center\">415</td>\n<td align=\"center\">（不支持的媒体类型） 请求的格式不受请求页面的支持。</td>\n</tr>\n<tr>\n<td align=\"center\">416</td>\n<td align=\"center\">（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>\n</tr>\n<tr>\n<td align=\"center\">417</td>\n<td align=\"center\">（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td>\n</tr>\n</tbody></table>\n<h2 id=\"5xx（服务器错误）\"><a href=\"#5xx（服务器错误）\" class=\"headerlink\" title=\"5xx（服务器错误）\"></a>5xx（服务器错误）</h2><blockquote>\n<p>  这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">500</td>\n<td align=\"center\">（服务器内部错误） 服务器遇到错误，无法完成请求。</td>\n</tr>\n<tr>\n<td align=\"center\">501</td>\n<td align=\"center\">（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td>\n</tr>\n<tr>\n<td align=\"center\">502</td>\n<td align=\"center\">（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td>\n</tr>\n<tr>\n<td align=\"center\">503</td>\n<td align=\"center\">（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>\n</tr>\n<tr>\n<td align=\"center\">504</td>\n<td align=\"center\">（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>\n</tr>\n<tr>\n<td align=\"center\">505</td>\n<td align=\"center\">（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td>\n</tr>\n</tbody></table>\n"},{"title":"RESTful规范的API接口设计","date":"2020-08-14T12:38:26.000Z","_content":"\n\n\n在项目中，需要为 APP 撰写 API。刚开始接触的时候，并没有考虑太多，就想提供 URL，APP 端通过该 URL 进行查询、创建、更新等操作即可。但再对相关规范进行了解后，才发现，API 的设计并没有那么简单，远远不是 URL 的问题，而是一个通信协议的整体架构。\n\n## 使用 SSL（https）来提供 URL\n\n>   首先，使用 https 可以在数据包被抓取时多一层加密。\n\n我们现在的 APP 使用环境大部分都是在路由器 WIFI 环境下，一旦路由器被入侵，那么黑客可以非常容易的抓取到用户通过路由器传输的数据，如果使用 http 未经加密，那么黑客可以很轻松的获取用户的信息，甚至是账户信息。\n\n>   其次，即使使用 https，也要在 API 数据传输设计时，正确的采用加密。\n\n例如直接将 token 信息放在 URL 中的做法，即使你使用了 https，黑客仅能抓到域名字符部分，不能抓到请求的数据，但是 URL 可以在浏览器或特殊客户端工具中直接看到。因此，使用 https 进行请求时，要采用 POST、PUT 或者 HEAD 的方式传输必要的数据。\n\n## 使用 GET、POST、PUT、DELETE 这几种请求模式\n\n请求模式也可以说是动作、数据传输方式，通常我们在 web 中的 form 有 GET、POST 两种。\n\n而在 HTTP 中，存在以下这几种。\n\n请求方式 | 功能\n:---|:---\nGET（选择）|从服务器上获取一个具体的资源或者一个资源列表。 \nPOST（创建）| 在服务器上创建一个新的资源。\nPUT（更新）| 以整体的方式更新服务器上的一个资源。\nPATCH （更新）| 只更新服务器上一个资源的一个属性。\nDELETE（删除）|删除服务器上的一个资源。 \nHEAD | 获取一个资源的元数据，如数据的哈希值或最后的更新时间。 \nOPTIONS | 获取客户端能对资源做什么操作的信息。\n\n## 在 URI 中体现资源，而非动作\n\n阅读 RESTful 架构的参考文献之后，你会了解什么是资源的概念，以及 REST 的确切含义。再构建 API 的 URL 的时候，URI 中应该仅包含资源（对象），而不要加入动作。\n\n比如 `/user/1/update` ，其中 `update` 就是一个动作，虽然我们希望通过这个 URI 来实现用户 ID 为 1 的用户进行信息更新，但是按照 RESTful 的规范，`update`作为动作，应该用上面的 `PUT` 来表示，所以请求更新用户信息，应该使用 `PUT /user/1` 来表示更新用户 ID 为 1 的用户信息。\n\n如果去对应上面的请求模式：\n\n-   GET 表示显示、列出、展示\n-   POST 表示提交、创建\n-   PUT 表示更新\n-   DELETE 表示删除\n\n## 版本\n\nAPI 的开发直接关系了 APP 是否可以正常使用，如果原本运行正常的 API，突然改动，那么之前使用这个 API 的 APP 可能无法正常运行。APP 是不可能强迫用户主动升级的，因此，通过 API 版本来解决这个问题。也就是说，API 的多个版本是同时运行的，而且都要保证可以正常使用。\n\n按照 RESTful 的规范，不同的版本也应该用相同的 API URL，通过 header 信息来判断版本，再调用不同版本的程序进行处理。但是这明显会给开发带来巨大的成本。\n\n解决办法有两种：\n\n1.  新版本兼容旧版本，所有旧版本的动作、字段、操作，都在新版本中可以被实现，但明显这样的维护成本很大；\n2.  不同的版本，用不同的 URL 来提供服务，比如在 URL 中通过 v1、v2 来区分版本号，或者采用子域名的方式，比如 v2.api.xxx.com/user 的方式。\n\n## HTTP 响应码\n\n在用户发出请求，服务端对请求进行响应时，给予正确的 HTTP 响应状态码，有利于让客户端正确区分遇到的情况。\n\n状态码| 请求方式| 描述\n:--:|:--:|:--\n`200 ` |` [GET]`|（`OK`成功）服务器成功返回用户请求的数据,该操作是幂等的（Idempotent）\n`201 ` |` [POST/PUT/PATCH]`|（`CREATED`已建立）用户新建或修改数据成功\n`202` |`[*]`| (`Accepted`接受请求)表示一个请求已经进入后台排队（异步任务）\n`204` | `[DELETE]` |(`NO CONTENT`无内容) 用户删除数据成功\n`300 `||（`Multiple Choices`多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n`301 `||（`Permanently Moved`永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n`302 `||（`Temporarily Moved`临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n`303 `||（`See Other`查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码\n`304 `||（`Not Modified`未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。\n`305 ` ||（`Use Proxy`使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。\n`307`|| `Temporary Redirect`（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 \n`400`|`[POST/PUT/PATCH]`| ` INVALID REQUEST`(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 \n`401`| `[*]`|`Unauthorized` (未授权) 表示用户没有权限（令牌、用户名、密码错误）\n`403` |`[*]`|`Forbidden` （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的\n`404` | `[*]`|`NOT FOUND` （未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n`405`||` Method not allowed`（方法不被允许）不支持该Request的方法\n`406` ||`Not Acceptable`（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析（比如用户请求 JSON 格式，但是只有 XML 格式）\n`407` ||`Proxy Authentication Required`（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器.\n`408`||` Request Timeout`(请求超时) 如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接\n`410` |`[GET]`|`Gone` （过去的）用户请求的资源被永久删除，且不会再得到的\n`422` |` [POST/PUT/PATCH]`|`Unprocesable entity` （不可处理）当创建一个对象时，发生一个验证错误\n`500` |` [*]`| `INTERNAL SERVER ERROR`(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功\n\n## 返回值结构\n\n在完成了上面的 URL 部署之后，接下来我们来看看返回结果应该怎么样来确定。\n\n我看到大部分文献中指出，最好使用 JSON 进行返回，而非 xml。\n\n我认为原因可能有两点：\n\n1.  JSON 可以很好的被很多程序支持，javascript 的 ajax 可以直接将 JSON 转换为对象。\n2.  JSON 的格式在容量上比 xml 小很多，可以减低宽带占用，提高传输效率。\n\n那么，返回值应该怎么去部署呢？\n\n首先，字段的合理返回，数据的包裹。因为返回值中，我们常常要对数据进行区分分组，或者按照从属关系打包，所以，我们再返回时，最好有包裹的思想，把数据存放在不同的包裹中进行返回。\n\n```python\n{\n    'error_code': 0,\n    'data': {\n        'user_id': 1,\n        'username': 'xiaomin'\n    },\n    'server_time': 14939939\n}\n```\n\n上面返回的 JSON 中，使用 data 来作为数据包，将所有数据统一以这个字段进行包裹。除了 data，也可以用 list 等其他形式的包裹，命名都是自己来根据自己的需要确定的。\n\n```python\n{\n    'error_code': 0,\n    'list': [\n        {'user_id': 1, 'username': 'xiaoming'},\n        {'user_id': 2, 'username': 'goudan'}\n    ]\n    'server_time': 14939939\n}\n```\n\n总之，不要不分包，直接把所有数据和一些你想返回的全局数据混在一起进行返回。\n\n其次，错误码。错误码的作用是方便查找错误原因，通常情况下，可以用 error\\_code 来表示，当 error\\_code=0 时，表示没有发生错误，当 error\\_code>0 时，发生了错误，并且提供较为详细的文档，告诉客户端对应的 error\\_code 值所产生的错误的原因和位置。\n\n最后，空白压缩和字符转换。也就是返回的 JSON 结果不要换行和空格，用一行返回结果，使整个结果文本容量最小。同时，中文等字符或结果中有引号，都进行字符转换，防止结果无法被正确识别。\n\n## 鉴权\n\n其实也就是客户端的权限控制。一般而言，会给客户端分发一个 token 来确定该客户端的唯一身份。客户端在请求时，通过这个 token，判断发出请求的客户端所对应的用户，及其相关信息和权限。\n\n前文已经提到了，token 信息不是用来进行处理的数据，虽然可以通过 POST、PUT 等进行数据提交或传输，但是从 RESTful 规范来讲，它不属于操作数据，在服务端进行处理时，仅是利用 token 进行鉴权处理，所以，我的建议是通过 header 来发送 token。\n\n","source":"_posts/web-RESTful 规范的 API 接口设计.md","raw":"---\ntitle: RESTful规范的API接口设计\ndate: 2020-8-14 20:38:26\ncategories:\n  - 技术\n  - python\n  - web\ntags:\n  - RESTful\n  - API\n---\n\n\n\n在项目中，需要为 APP 撰写 API。刚开始接触的时候，并没有考虑太多，就想提供 URL，APP 端通过该 URL 进行查询、创建、更新等操作即可。但再对相关规范进行了解后，才发现，API 的设计并没有那么简单，远远不是 URL 的问题，而是一个通信协议的整体架构。\n\n## 使用 SSL（https）来提供 URL\n\n>   首先，使用 https 可以在数据包被抓取时多一层加密。\n\n我们现在的 APP 使用环境大部分都是在路由器 WIFI 环境下，一旦路由器被入侵，那么黑客可以非常容易的抓取到用户通过路由器传输的数据，如果使用 http 未经加密，那么黑客可以很轻松的获取用户的信息，甚至是账户信息。\n\n>   其次，即使使用 https，也要在 API 数据传输设计时，正确的采用加密。\n\n例如直接将 token 信息放在 URL 中的做法，即使你使用了 https，黑客仅能抓到域名字符部分，不能抓到请求的数据，但是 URL 可以在浏览器或特殊客户端工具中直接看到。因此，使用 https 进行请求时，要采用 POST、PUT 或者 HEAD 的方式传输必要的数据。\n\n## 使用 GET、POST、PUT、DELETE 这几种请求模式\n\n请求模式也可以说是动作、数据传输方式，通常我们在 web 中的 form 有 GET、POST 两种。\n\n而在 HTTP 中，存在以下这几种。\n\n请求方式 | 功能\n:---|:---\nGET（选择）|从服务器上获取一个具体的资源或者一个资源列表。 \nPOST（创建）| 在服务器上创建一个新的资源。\nPUT（更新）| 以整体的方式更新服务器上的一个资源。\nPATCH （更新）| 只更新服务器上一个资源的一个属性。\nDELETE（删除）|删除服务器上的一个资源。 \nHEAD | 获取一个资源的元数据，如数据的哈希值或最后的更新时间。 \nOPTIONS | 获取客户端能对资源做什么操作的信息。\n\n## 在 URI 中体现资源，而非动作\n\n阅读 RESTful 架构的参考文献之后，你会了解什么是资源的概念，以及 REST 的确切含义。再构建 API 的 URL 的时候，URI 中应该仅包含资源（对象），而不要加入动作。\n\n比如 `/user/1/update` ，其中 `update` 就是一个动作，虽然我们希望通过这个 URI 来实现用户 ID 为 1 的用户进行信息更新，但是按照 RESTful 的规范，`update`作为动作，应该用上面的 `PUT` 来表示，所以请求更新用户信息，应该使用 `PUT /user/1` 来表示更新用户 ID 为 1 的用户信息。\n\n如果去对应上面的请求模式：\n\n-   GET 表示显示、列出、展示\n-   POST 表示提交、创建\n-   PUT 表示更新\n-   DELETE 表示删除\n\n## 版本\n\nAPI 的开发直接关系了 APP 是否可以正常使用，如果原本运行正常的 API，突然改动，那么之前使用这个 API 的 APP 可能无法正常运行。APP 是不可能强迫用户主动升级的，因此，通过 API 版本来解决这个问题。也就是说，API 的多个版本是同时运行的，而且都要保证可以正常使用。\n\n按照 RESTful 的规范，不同的版本也应该用相同的 API URL，通过 header 信息来判断版本，再调用不同版本的程序进行处理。但是这明显会给开发带来巨大的成本。\n\n解决办法有两种：\n\n1.  新版本兼容旧版本，所有旧版本的动作、字段、操作，都在新版本中可以被实现，但明显这样的维护成本很大；\n2.  不同的版本，用不同的 URL 来提供服务，比如在 URL 中通过 v1、v2 来区分版本号，或者采用子域名的方式，比如 v2.api.xxx.com/user 的方式。\n\n## HTTP 响应码\n\n在用户发出请求，服务端对请求进行响应时，给予正确的 HTTP 响应状态码，有利于让客户端正确区分遇到的情况。\n\n状态码| 请求方式| 描述\n:--:|:--:|:--\n`200 ` |` [GET]`|（`OK`成功）服务器成功返回用户请求的数据,该操作是幂等的（Idempotent）\n`201 ` |` [POST/PUT/PATCH]`|（`CREATED`已建立）用户新建或修改数据成功\n`202` |`[*]`| (`Accepted`接受请求)表示一个请求已经进入后台排队（异步任务）\n`204` | `[DELETE]` |(`NO CONTENT`无内容) 用户删除数据成功\n`300 `||（`Multiple Choices`多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n`301 `||（`Permanently Moved`永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n`302 `||（`Temporarily Moved`临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n`303 `||（`See Other`查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码\n`304 `||（`Not Modified`未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。\n`305 ` ||（`Use Proxy`使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。\n`307`|| `Temporary Redirect`（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 \n`400`|`[POST/PUT/PATCH]`| ` INVALID REQUEST`(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 \n`401`| `[*]`|`Unauthorized` (未授权) 表示用户没有权限（令牌、用户名、密码错误）\n`403` |`[*]`|`Forbidden` （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的\n`404` | `[*]`|`NOT FOUND` （未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n`405`||` Method not allowed`（方法不被允许）不支持该Request的方法\n`406` ||`Not Acceptable`（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析（比如用户请求 JSON 格式，但是只有 XML 格式）\n`407` ||`Proxy Authentication Required`（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器.\n`408`||` Request Timeout`(请求超时) 如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接\n`410` |`[GET]`|`Gone` （过去的）用户请求的资源被永久删除，且不会再得到的\n`422` |` [POST/PUT/PATCH]`|`Unprocesable entity` （不可处理）当创建一个对象时，发生一个验证错误\n`500` |` [*]`| `INTERNAL SERVER ERROR`(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功\n\n## 返回值结构\n\n在完成了上面的 URL 部署之后，接下来我们来看看返回结果应该怎么样来确定。\n\n我看到大部分文献中指出，最好使用 JSON 进行返回，而非 xml。\n\n我认为原因可能有两点：\n\n1.  JSON 可以很好的被很多程序支持，javascript 的 ajax 可以直接将 JSON 转换为对象。\n2.  JSON 的格式在容量上比 xml 小很多，可以减低宽带占用，提高传输效率。\n\n那么，返回值应该怎么去部署呢？\n\n首先，字段的合理返回，数据的包裹。因为返回值中，我们常常要对数据进行区分分组，或者按照从属关系打包，所以，我们再返回时，最好有包裹的思想，把数据存放在不同的包裹中进行返回。\n\n```python\n{\n    'error_code': 0,\n    'data': {\n        'user_id': 1,\n        'username': 'xiaomin'\n    },\n    'server_time': 14939939\n}\n```\n\n上面返回的 JSON 中，使用 data 来作为数据包，将所有数据统一以这个字段进行包裹。除了 data，也可以用 list 等其他形式的包裹，命名都是自己来根据自己的需要确定的。\n\n```python\n{\n    'error_code': 0,\n    'list': [\n        {'user_id': 1, 'username': 'xiaoming'},\n        {'user_id': 2, 'username': 'goudan'}\n    ]\n    'server_time': 14939939\n}\n```\n\n总之，不要不分包，直接把所有数据和一些你想返回的全局数据混在一起进行返回。\n\n其次，错误码。错误码的作用是方便查找错误原因，通常情况下，可以用 error\\_code 来表示，当 error\\_code=0 时，表示没有发生错误，当 error\\_code>0 时，发生了错误，并且提供较为详细的文档，告诉客户端对应的 error\\_code 值所产生的错误的原因和位置。\n\n最后，空白压缩和字符转换。也就是返回的 JSON 结果不要换行和空格，用一行返回结果，使整个结果文本容量最小。同时，中文等字符或结果中有引号，都进行字符转换，防止结果无法被正确识别。\n\n## 鉴权\n\n其实也就是客户端的权限控制。一般而言，会给客户端分发一个 token 来确定该客户端的唯一身份。客户端在请求时，通过这个 token，判断发出请求的客户端所对应的用户，及其相关信息和权限。\n\n前文已经提到了，token 信息不是用来进行处理的数据，虽然可以通过 POST、PUT 等进行数据提交或传输，但是从 RESTful 规范来讲，它不属于操作数据，在服务端进行处理时，仅是利用 token 进行鉴权处理，所以，我的建议是通过 header 来发送 token。\n\n","slug":"web-RESTful 规范的 API 接口设计","published":1,"updated":"2021-01-23T15:09:50.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnucz002qjjln8j108otp","content":"<p>在项目中，需要为 APP 撰写 API。刚开始接触的时候，并没有考虑太多，就想提供 URL，APP 端通过该 URL 进行查询、创建、更新等操作即可。但再对相关规范进行了解后，才发现，API 的设计并没有那么简单，远远不是 URL 的问题，而是一个通信协议的整体架构。</p>\n<h2 id=\"使用-SSL（https）来提供-URL\"><a href=\"#使用-SSL（https）来提供-URL\" class=\"headerlink\" title=\"使用 SSL（https）来提供 URL\"></a>使用 SSL（https）来提供 URL</h2><blockquote>\n<p>  首先，使用 https 可以在数据包被抓取时多一层加密。</p>\n</blockquote>\n<p>我们现在的 APP 使用环境大部分都是在路由器 WIFI 环境下，一旦路由器被入侵，那么黑客可以非常容易的抓取到用户通过路由器传输的数据，如果使用 http 未经加密，那么黑客可以很轻松的获取用户的信息，甚至是账户信息。</p>\n<blockquote>\n<p>  其次，即使使用 https，也要在 API 数据传输设计时，正确的采用加密。</p>\n</blockquote>\n<p>例如直接将 token 信息放在 URL 中的做法，即使你使用了 https，黑客仅能抓到域名字符部分，不能抓到请求的数据，但是 URL 可以在浏览器或特殊客户端工具中直接看到。因此，使用 https 进行请求时，要采用 POST、PUT 或者 HEAD 的方式传输必要的数据。</p>\n<h2 id=\"使用-GET、POST、PUT、DELETE-这几种请求模式\"><a href=\"#使用-GET、POST、PUT、DELETE-这几种请求模式\" class=\"headerlink\" title=\"使用 GET、POST、PUT、DELETE 这几种请求模式\"></a>使用 GET、POST、PUT、DELETE 这几种请求模式</h2><p>请求模式也可以说是动作、数据传输方式，通常我们在 web 中的 form 有 GET、POST 两种。</p>\n<p>而在 HTTP 中，存在以下这几种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">请求方式</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET（选择）</td>\n<td align=\"left\">从服务器上获取一个具体的资源或者一个资源列表。</td>\n</tr>\n<tr>\n<td align=\"left\">POST（创建）</td>\n<td align=\"left\">在服务器上创建一个新的资源。</td>\n</tr>\n<tr>\n<td align=\"left\">PUT（更新）</td>\n<td align=\"left\">以整体的方式更新服务器上的一个资源。</td>\n</tr>\n<tr>\n<td align=\"left\">PATCH （更新）</td>\n<td align=\"left\">只更新服务器上一个资源的一个属性。</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE（删除）</td>\n<td align=\"left\">删除服务器上的一个资源。</td>\n</tr>\n<tr>\n<td align=\"left\">HEAD</td>\n<td align=\"left\">获取一个资源的元数据，如数据的哈希值或最后的更新时间。</td>\n</tr>\n<tr>\n<td align=\"left\">OPTIONS</td>\n<td align=\"left\">获取客户端能对资源做什么操作的信息。</td>\n</tr>\n</tbody></table>\n<h2 id=\"在-URI-中体现资源，而非动作\"><a href=\"#在-URI-中体现资源，而非动作\" class=\"headerlink\" title=\"在 URI 中体现资源，而非动作\"></a>在 URI 中体现资源，而非动作</h2><p>阅读 RESTful 架构的参考文献之后，你会了解什么是资源的概念，以及 REST 的确切含义。再构建 API 的 URL 的时候，URI 中应该仅包含资源（对象），而不要加入动作。</p>\n<p>比如 <code>/user/1/update</code> ，其中 <code>update</code> 就是一个动作，虽然我们希望通过这个 URI 来实现用户 ID 为 1 的用户进行信息更新，但是按照 RESTful 的规范，<code>update</code>作为动作，应该用上面的 <code>PUT</code> 来表示，所以请求更新用户信息，应该使用 <code>PUT /user/1</code> 来表示更新用户 ID 为 1 的用户信息。</p>\n<p>如果去对应上面的请求模式：</p>\n<ul>\n<li>GET 表示显示、列出、展示</li>\n<li>POST 表示提交、创建</li>\n<li>PUT 表示更新</li>\n<li>DELETE 表示删除</li>\n</ul>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>API 的开发直接关系了 APP 是否可以正常使用，如果原本运行正常的 API，突然改动，那么之前使用这个 API 的 APP 可能无法正常运行。APP 是不可能强迫用户主动升级的，因此，通过 API 版本来解决这个问题。也就是说，API 的多个版本是同时运行的，而且都要保证可以正常使用。</p>\n<p>按照 RESTful 的规范，不同的版本也应该用相同的 API URL，通过 header 信息来判断版本，再调用不同版本的程序进行处理。但是这明显会给开发带来巨大的成本。</p>\n<p>解决办法有两种：</p>\n<ol>\n<li>新版本兼容旧版本，所有旧版本的动作、字段、操作，都在新版本中可以被实现，但明显这样的维护成本很大；</li>\n<li>不同的版本，用不同的 URL 来提供服务，比如在 URL 中通过 v1、v2 来区分版本号，或者采用子域名的方式，比如 v2.api.xxx.com/user 的方式。</li>\n</ol>\n<h2 id=\"HTTP-响应码\"><a href=\"#HTTP-响应码\" class=\"headerlink\" title=\"HTTP 响应码\"></a>HTTP 响应码</h2><p>在用户发出请求，服务端对请求进行响应时，给予正确的 HTTP 响应状态码，有利于让客户端正确区分遇到的情况。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态码</th>\n<th align=\"center\">请求方式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>200</code></td>\n<td align=\"center\"><code>[GET]</code></td>\n<td align=\"left\">（<code>OK</code>成功）服务器成功返回用户请求的数据,该操作是幂等的（Idempotent）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>201</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\">（<code>CREATED</code>已建立）用户新建或修改数据成功</td>\n</tr>\n<tr>\n<td align=\"center\"><code>202</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\">(<code>Accepted</code>接受请求)表示一个请求已经进入后台排队（异步任务）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>204</code></td>\n<td align=\"center\"><code>[DELETE]</code></td>\n<td align=\"left\">(<code>NO CONTENT</code>无内容) 用户删除数据成功</td>\n</tr>\n<tr>\n<td align=\"center\"><code>300</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Multiple Choices</code>多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>301</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Permanently Moved</code>永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>302</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Temporarily Moved</code>临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>303</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>See Other</code>查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>304</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Not Modified</code>未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>305</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Use Proxy</code>使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>307</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Temporary Redirect</code>（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>400</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\"><code>INVALID REQUEST</code>(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>401</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>Unauthorized</code> (未授权) 表示用户没有权限（令牌、用户名、密码错误）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>403</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>Forbidden</code> （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的</td>\n</tr>\n<tr>\n<td align=\"center\"><code>404</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>NOT FOUND</code> （未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>405</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Method not allowed</code>（方法不被允许）不支持该Request的方法</td>\n</tr>\n<tr>\n<td align=\"center\"><code>406</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Not Acceptable</code>（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析（比如用户请求 JSON 格式，但是只有 XML 格式）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>407</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Proxy Authentication Required</code>（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>408</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Request Timeout</code>(请求超时) 如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td>\n</tr>\n<tr>\n<td align=\"center\"><code>410</code></td>\n<td align=\"center\"><code>[GET]</code></td>\n<td align=\"left\"><code>Gone</code> （过去的）用户请求的资源被永久删除，且不会再得到的</td>\n</tr>\n<tr>\n<td align=\"center\"><code>422</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\"><code>Unprocesable entity</code> （不可处理）当创建一个对象时，发生一个验证错误</td>\n</tr>\n<tr>\n<td align=\"center\"><code>500</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>INTERNAL SERVER ERROR</code>(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功</td>\n</tr>\n</tbody></table>\n<h2 id=\"返回值结构\"><a href=\"#返回值结构\" class=\"headerlink\" title=\"返回值结构\"></a>返回值结构</h2><p>在完成了上面的 URL 部署之后，接下来我们来看看返回结果应该怎么样来确定。</p>\n<p>我看到大部分文献中指出，最好使用 JSON 进行返回，而非 xml。</p>\n<p>我认为原因可能有两点：</p>\n<ol>\n<li>JSON 可以很好的被很多程序支持，javascript 的 ajax 可以直接将 JSON 转换为对象。</li>\n<li>JSON 的格式在容量上比 xml 小很多，可以减低宽带占用，提高传输效率。</li>\n</ol>\n<p>那么，返回值应该怎么去部署呢？</p>\n<p>首先，字段的合理返回，数据的包裹。因为返回值中，我们常常要对数据进行区分分组，或者按照从属关系打包，所以，我们再返回时，最好有包裹的思想，把数据存放在不同的包裹中进行返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&#123;<br>    <span class=\"hljs-string\">&#x27;error_code&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;data&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;xiaomin&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&#x27;server_time&#x27;</span>: <span class=\"hljs-number\">14939939</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>上面返回的 JSON 中，使用 data 来作为数据包，将所有数据统一以这个字段进行包裹。除了 data，也可以用 list 等其他形式的包裹，命名都是自己来根据自己的需要确定的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">&#123;<br>    <span class=\"hljs-string\">&#x27;error_code&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;list&#x27;</span>: [<br>        &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;xiaoming&#x27;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;goudan&#x27;</span>&#125;<br>    ]<br>    <span class=\"hljs-string\">&#x27;server_time&#x27;</span>: <span class=\"hljs-number\">14939939</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>总之，不要不分包，直接把所有数据和一些你想返回的全局数据混在一起进行返回。</p>\n<p>其次，错误码。错误码的作用是方便查找错误原因，通常情况下，可以用 error_code 来表示，当 error_code=0 时，表示没有发生错误，当 error_code&gt;0 时，发生了错误，并且提供较为详细的文档，告诉客户端对应的 error_code 值所产生的错误的原因和位置。</p>\n<p>最后，空白压缩和字符转换。也就是返回的 JSON 结果不要换行和空格，用一行返回结果，使整个结果文本容量最小。同时，中文等字符或结果中有引号，都进行字符转换，防止结果无法被正确识别。</p>\n<h2 id=\"鉴权\"><a href=\"#鉴权\" class=\"headerlink\" title=\"鉴权\"></a>鉴权</h2><p>其实也就是客户端的权限控制。一般而言，会给客户端分发一个 token 来确定该客户端的唯一身份。客户端在请求时，通过这个 token，判断发出请求的客户端所对应的用户，及其相关信息和权限。</p>\n<p>前文已经提到了，token 信息不是用来进行处理的数据，虽然可以通过 POST、PUT 等进行数据提交或传输，但是从 RESTful 规范来讲，它不属于操作数据，在服务端进行处理时，仅是利用 token 进行鉴权处理，所以，我的建议是通过 header 来发送 token。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目中，需要为 APP 撰写 API。刚开始接触的时候，并没有考虑太多，就想提供 URL，APP 端通过该 URL 进行查询、创建、更新等操作即可。但再对相关规范进行了解后，才发现，API 的设计并没有那么简单，远远不是 URL 的问题，而是一个通信协议的整体架构。</p>\n<h2 id=\"使用-SSL（https）来提供-URL\"><a href=\"#使用-SSL（https）来提供-URL\" class=\"headerlink\" title=\"使用 SSL（https）来提供 URL\"></a>使用 SSL（https）来提供 URL</h2><blockquote>\n<p>  首先，使用 https 可以在数据包被抓取时多一层加密。</p>\n</blockquote>\n<p>我们现在的 APP 使用环境大部分都是在路由器 WIFI 环境下，一旦路由器被入侵，那么黑客可以非常容易的抓取到用户通过路由器传输的数据，如果使用 http 未经加密，那么黑客可以很轻松的获取用户的信息，甚至是账户信息。</p>\n<blockquote>\n<p>  其次，即使使用 https，也要在 API 数据传输设计时，正确的采用加密。</p>\n</blockquote>\n<p>例如直接将 token 信息放在 URL 中的做法，即使你使用了 https，黑客仅能抓到域名字符部分，不能抓到请求的数据，但是 URL 可以在浏览器或特殊客户端工具中直接看到。因此，使用 https 进行请求时，要采用 POST、PUT 或者 HEAD 的方式传输必要的数据。</p>\n<h2 id=\"使用-GET、POST、PUT、DELETE-这几种请求模式\"><a href=\"#使用-GET、POST、PUT、DELETE-这几种请求模式\" class=\"headerlink\" title=\"使用 GET、POST、PUT、DELETE 这几种请求模式\"></a>使用 GET、POST、PUT、DELETE 这几种请求模式</h2><p>请求模式也可以说是动作、数据传输方式，通常我们在 web 中的 form 有 GET、POST 两种。</p>\n<p>而在 HTTP 中，存在以下这几种。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">请求方式</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET（选择）</td>\n<td align=\"left\">从服务器上获取一个具体的资源或者一个资源列表。</td>\n</tr>\n<tr>\n<td align=\"left\">POST（创建）</td>\n<td align=\"left\">在服务器上创建一个新的资源。</td>\n</tr>\n<tr>\n<td align=\"left\">PUT（更新）</td>\n<td align=\"left\">以整体的方式更新服务器上的一个资源。</td>\n</tr>\n<tr>\n<td align=\"left\">PATCH （更新）</td>\n<td align=\"left\">只更新服务器上一个资源的一个属性。</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE（删除）</td>\n<td align=\"left\">删除服务器上的一个资源。</td>\n</tr>\n<tr>\n<td align=\"left\">HEAD</td>\n<td align=\"left\">获取一个资源的元数据，如数据的哈希值或最后的更新时间。</td>\n</tr>\n<tr>\n<td align=\"left\">OPTIONS</td>\n<td align=\"left\">获取客户端能对资源做什么操作的信息。</td>\n</tr>\n</tbody></table>\n<h2 id=\"在-URI-中体现资源，而非动作\"><a href=\"#在-URI-中体现资源，而非动作\" class=\"headerlink\" title=\"在 URI 中体现资源，而非动作\"></a>在 URI 中体现资源，而非动作</h2><p>阅读 RESTful 架构的参考文献之后，你会了解什么是资源的概念，以及 REST 的确切含义。再构建 API 的 URL 的时候，URI 中应该仅包含资源（对象），而不要加入动作。</p>\n<p>比如 <code>/user/1/update</code> ，其中 <code>update</code> 就是一个动作，虽然我们希望通过这个 URI 来实现用户 ID 为 1 的用户进行信息更新，但是按照 RESTful 的规范，<code>update</code>作为动作，应该用上面的 <code>PUT</code> 来表示，所以请求更新用户信息，应该使用 <code>PUT /user/1</code> 来表示更新用户 ID 为 1 的用户信息。</p>\n<p>如果去对应上面的请求模式：</p>\n<ul>\n<li>GET 表示显示、列出、展示</li>\n<li>POST 表示提交、创建</li>\n<li>PUT 表示更新</li>\n<li>DELETE 表示删除</li>\n</ul>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>API 的开发直接关系了 APP 是否可以正常使用，如果原本运行正常的 API，突然改动，那么之前使用这个 API 的 APP 可能无法正常运行。APP 是不可能强迫用户主动升级的，因此，通过 API 版本来解决这个问题。也就是说，API 的多个版本是同时运行的，而且都要保证可以正常使用。</p>\n<p>按照 RESTful 的规范，不同的版本也应该用相同的 API URL，通过 header 信息来判断版本，再调用不同版本的程序进行处理。但是这明显会给开发带来巨大的成本。</p>\n<p>解决办法有两种：</p>\n<ol>\n<li>新版本兼容旧版本，所有旧版本的动作、字段、操作，都在新版本中可以被实现，但明显这样的维护成本很大；</li>\n<li>不同的版本，用不同的 URL 来提供服务，比如在 URL 中通过 v1、v2 来区分版本号，或者采用子域名的方式，比如 v2.api.xxx.com/user 的方式。</li>\n</ol>\n<h2 id=\"HTTP-响应码\"><a href=\"#HTTP-响应码\" class=\"headerlink\" title=\"HTTP 响应码\"></a>HTTP 响应码</h2><p>在用户发出请求，服务端对请求进行响应时，给予正确的 HTTP 响应状态码，有利于让客户端正确区分遇到的情况。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">状态码</th>\n<th align=\"center\">请求方式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>200</code></td>\n<td align=\"center\"><code>[GET]</code></td>\n<td align=\"left\">（<code>OK</code>成功）服务器成功返回用户请求的数据,该操作是幂等的（Idempotent）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>201</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\">（<code>CREATED</code>已建立）用户新建或修改数据成功</td>\n</tr>\n<tr>\n<td align=\"center\"><code>202</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\">(<code>Accepted</code>接受请求)表示一个请求已经进入后台排队（异步任务）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>204</code></td>\n<td align=\"center\"><code>[DELETE]</code></td>\n<td align=\"left\">(<code>NO CONTENT</code>无内容) 用户删除数据成功</td>\n</tr>\n<tr>\n<td align=\"center\"><code>300</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Multiple Choices</code>多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>301</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Permanently Moved</code>永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>302</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Temporarily Moved</code>临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>303</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>See Other</code>查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>304</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Not Modified</code>未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>305</code></td>\n<td align=\"center\"></td>\n<td align=\"left\">（<code>Use Proxy</code>使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>307</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Temporary Redirect</code>（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>400</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\"><code>INVALID REQUEST</code>(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>401</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>Unauthorized</code> (未授权) 表示用户没有权限（令牌、用户名、密码错误）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>403</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>Forbidden</code> （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的</td>\n</tr>\n<tr>\n<td align=\"center\"><code>404</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>NOT FOUND</code> （未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>405</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Method not allowed</code>（方法不被允许）不支持该Request的方法</td>\n</tr>\n<tr>\n<td align=\"center\"><code>406</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Not Acceptable</code>（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析（比如用户请求 JSON 格式，但是只有 XML 格式）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>407</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Proxy Authentication Required</code>（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>408</code></td>\n<td align=\"center\"></td>\n<td align=\"left\"><code>Request Timeout</code>(请求超时) 如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td>\n</tr>\n<tr>\n<td align=\"center\"><code>410</code></td>\n<td align=\"center\"><code>[GET]</code></td>\n<td align=\"left\"><code>Gone</code> （过去的）用户请求的资源被永久删除，且不会再得到的</td>\n</tr>\n<tr>\n<td align=\"center\"><code>422</code></td>\n<td align=\"center\"><code>[POST/PUT/PATCH]</code></td>\n<td align=\"left\"><code>Unprocesable entity</code> （不可处理）当创建一个对象时，发生一个验证错误</td>\n</tr>\n<tr>\n<td align=\"center\"><code>500</code></td>\n<td align=\"center\"><code>[*]</code></td>\n<td align=\"left\"><code>INTERNAL SERVER ERROR</code>(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功</td>\n</tr>\n</tbody></table>\n<h2 id=\"返回值结构\"><a href=\"#返回值结构\" class=\"headerlink\" title=\"返回值结构\"></a>返回值结构</h2><p>在完成了上面的 URL 部署之后，接下来我们来看看返回结果应该怎么样来确定。</p>\n<p>我看到大部分文献中指出，最好使用 JSON 进行返回，而非 xml。</p>\n<p>我认为原因可能有两点：</p>\n<ol>\n<li>JSON 可以很好的被很多程序支持，javascript 的 ajax 可以直接将 JSON 转换为对象。</li>\n<li>JSON 的格式在容量上比 xml 小很多，可以减低宽带占用，提高传输效率。</li>\n</ol>\n<p>那么，返回值应该怎么去部署呢？</p>\n<p>首先，字段的合理返回，数据的包裹。因为返回值中，我们常常要对数据进行区分分组，或者按照从属关系打包，所以，我们再返回时，最好有包裹的思想，把数据存放在不同的包裹中进行返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&#123;<br>    <span class=\"hljs-string\">&#x27;error_code&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;data&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;xiaomin&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&#x27;server_time&#x27;</span>: <span class=\"hljs-number\">14939939</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面返回的 JSON 中，使用 data 来作为数据包，将所有数据统一以这个字段进行包裹。除了 data，也可以用 list 等其他形式的包裹，命名都是自己来根据自己的需要确定的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">&#123;<br>    <span class=\"hljs-string\">&#x27;error_code&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;list&#x27;</span>: [<br>        &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;xiaoming&#x27;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&#x27;user_id&#x27;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>: <span class=\"hljs-string\">&#x27;goudan&#x27;</span>&#125;<br>    ]<br>    <span class=\"hljs-string\">&#x27;server_time&#x27;</span>: <span class=\"hljs-number\">14939939</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>总之，不要不分包，直接把所有数据和一些你想返回的全局数据混在一起进行返回。</p>\n<p>其次，错误码。错误码的作用是方便查找错误原因，通常情况下，可以用 error_code 来表示，当 error_code=0 时，表示没有发生错误，当 error_code&gt;0 时，发生了错误，并且提供较为详细的文档，告诉客户端对应的 error_code 值所产生的错误的原因和位置。</p>\n<p>最后，空白压缩和字符转换。也就是返回的 JSON 结果不要换行和空格，用一行返回结果，使整个结果文本容量最小。同时，中文等字符或结果中有引号，都进行字符转换，防止结果无法被正确识别。</p>\n<h2 id=\"鉴权\"><a href=\"#鉴权\" class=\"headerlink\" title=\"鉴权\"></a>鉴权</h2><p>其实也就是客户端的权限控制。一般而言，会给客户端分发一个 token 来确定该客户端的唯一身份。客户端在请求时，通过这个 token，判断发出请求的客户端所对应的用户，及其相关信息和权限。</p>\n<p>前文已经提到了，token 信息不是用来进行处理的数据，虽然可以通过 POST、PUT 等进行数据提交或传输，但是从 RESTful 规范来讲，它不属于操作数据，在服务端进行处理时，仅是利用 token 进行鉴权处理，所以，我的建议是通过 header 来发送 token。</p>\n"},{"title":"XSS攻击和CSRF攻击","date":"2020-05-24T12:38:26.000Z","_content":"\n## CSRF\n\n### 1. CSRF 的基本概念、缩写、全称\n\nCSRF（Cross-site request forgery）：跨站请求伪造。\n\n### 2. CSRF 的攻击原理\n\n![](https://img2018.cnblogs.com/blog/941968/201904/941968-20190422203527996-279231194.jpg)\n\n用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发 cookie。\n\n从上图可以看出，要完成一次 CSRF 攻击，受害者必须满足两个必要的条件：\n\n（1）登录受信任网站 A，并在本地生成 Cookie。（如果用户没有登录网站 A，那么网站 B 在诱导的时候，请求网站 A 的 api 接口时，会提示你登录）\n\n（2）在不登出 A 的情况下，访问危险网站 B（其实是利用了网站 A 的漏洞）。\n\n我们在讲 CSRF 时，一定要把上面的两点说清楚。\n\n温馨提示一下，cookie 保证了用户可以处于登录状态，但网站 B 其实拿不到 cookie。\n\n### 3. CSRF的防范措施\n\n#### 1、判断请求头中的 Referer\n\n这个字段记录的是请求的来源。比如前端*Vue*页面 `http://localhost:8080/#/showbooks`上调用了服务端*Django*的接口 `http://127.0.0.1:8000/books/?page=2&page_size=10`， 那么在服务端，就可以通过 `Referer` 判断这个请求是来自哪里。\n\n在实际应用中，这些跟业务逻辑无关的操作往往会放在拦截器中（或者说过滤器，不同技术使用的名词可能不同）。意思是说，在进入到业务逻辑之前，就应该要根据 Referer 的值来决定这个请求能不能处理。\n\n用Flask 的话可以使用装饰器；在Django 中是叫中间件。每种技术它走的流程其实都一样。\n\n而在 Django 可以通过以下代码获取对应信息\n\n```python\nrequest.META['HTTP_REFERER']  # 来路\n\nrequest.META.get(\"HTTP_USER_AGENT\")  # 请求头\n```\n\n在Flask中，则获取方式不同。\n\n```python\nrequest.referrer  # 来路\n\nrequest.headers.get('User-Agent')  # 请求头\n```\n\n但要注意的是，Referer 是浏览器设置的，在浏览器兼容性大不相同的时代中，如果存在某种浏览器允许用户修改这个值，那么 CSRF 漏洞依然存在。\n\n#### 2、在请求参数中加入 csrf token\n\n讨论 GET 和 POST 两种请求，对于 GET，其实也没什么需要防范的。为什么？\n\n因为 GET 在 “约定” 当中，被认为是查询操作，查询的意思就是，你查一次，查两次，无数次，结果都不会改变（用户得到的数据可能会变），这不会对数据库造成任何影响，所以不需要加其他额外的参数。\n\n> 所以这里要提醒各位的是，尽量遵从这些约定，不要在 GET 请求中出现 /delete, /update, /edit 这种单词。把 “写” 操作放到 POST 中。\n\n对于 POST，服务端在创建表单的时候可以加一个隐藏字段，也是通过某种加密算法得到的。在处理请求时，验证这个字段是否合法，如果合法就继续处理，否则就认为是恶意操作。\n\n```html\n<form method=\"post\" action=\"/delete\">\n  <!-- 其他字段 -->\n  <input type=\"hidden\" />\n</form>\n```\n\n这个 html 片段由服务端生成。\n\n这的确是一个很好的防范措施，再增加一些处理的话，还能防止表单重复提交。\n\n可是对于一些新兴网站，很多都采用了 “前后端分离开发” 的设计，或者退一步，无论是不是前后端分离，它的 HTML 可能是由 JavaScript 拼接而成，并且表单也都是异步提交。所以这个办法有它的应用场景，也有局限性。\n\n#### 3、新增 HTTP Header\n\n方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。\n\n把 token 隐藏在 http 的 head 头中。\n\n服务端可以像获取 Referer 一样获取这个请求头，不同的是，这个 token 是由服务端生成的，所以攻击者他没办法猜。\n\n另一篇文章讲解的——**`JWT`**——就是基于这个方式。抛开 JWT 不谈，它的工作原理是这样的:\n\n![image-20201010164929032](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/image-20201010164929032.png)\n\n解释一下这四个请求，类型都是 POST 。\n\n1. 通过 `/login` 接口，用户登录，服务端传回一个 `access_token`，前端把它保存起来，可以是内存当中，如果你希望用来模拟 `session` 的话。也可以保存到 `localStorage` 中，这样可以实现自动登录。\n\n2. 调用 `/delete` 接口，参数是某样商品的 id。仔细看，在这个请求中，多了一个名为 `Authoriaztion` 的 `header`，它的值是之前从服务端传回来的 `access_token`，在前面加了一个 “`Bearer`”（这是和服务端的约定，约定就是说，说好了加就一起加，不加就都不加……）\n\n3. 调用 `/logout` 接口，同样把 `access_token` 加在 `header` 中传过去。成功之后，服务端和前端都会把这个 `token` 置为失效，或直接删除。\n\n4. 再调用 `/delete` 接口，由于此时已经没有 `access_token` 了，所以服务端判断该请求没权限，返回 401 。\n\n从头至尾，整个过程没有涉及 cookie，所以 CSRF 是不可能发生的！\n\n## XSS\n\n### 1. XSS 的基本概念\n\nXSS（Cross Site Scripting）：跨域脚本攻击。\n\n### 2. XSS 的攻击原理\n\nXSS 攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在 url 中输入、在评论框中输入），向你的页面注入脚本（可能是 js、hmtl 代码块等）。\n\n最后导致的结果可能是：\n\n盗用 Cookie 破坏页面的正常结构，插入广告等恶意内容 D-doss 攻击\n\n### 3. XSS 的攻击方式\n\n#### 1、反射型\n\n发出请求时，XSS 代码出现在 url 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以叫反射型 XSS。\n\n#### 2、存储型存\n\n储型 XSS 和反射型 XSS 的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。\n\n### 4. XSS 的防范措施\n\nXSS 的防范措施主要有三个：\n\n#### 1、编码\n\n对用户输入的数据进行`HTML Entity` 编码。\n\n比如说这段代码：\n\n```js\n<script>alert(1)</script>\n```\n\n若不进行任何处理，则浏览器会执行 `alert` 的 js 操作，实现 `XSS` 注入。\n\n进行编码处理之后，在浏览器中的显示结果就是 `<script>alert(1)</script>`，实现了将 `$var` 作为纯文本进行输出，且不引起 `JavaScript` 的执行。\n\n#### 2、过滤\n\n移除用户输入的和事件相关的属性。如 `onerror` 可以自动触发攻击，还有 `onclick` 等。（总而言是，过滤掉一些不安全的内容）移除用户输入的 `Style` 节点、`Script` 节点、`Iframe` 节点。（尤其是 `Script` 节点，它可是支持跨域的，一定要移除）。\n\n#### 3、校正\n\n避免直接对 `HTML Entity` 进行解码。使用 `DOM Parse` 转换，校正不配对的 `DOM` 标签。备注：我们应该去了解一下`DOM Parse`这个概念，它的作用是把文本解析成 `DOM` 结构。\n\n比较常用的做法是，通过第一步的编码转成文本，然后第三步转成 DOM 对象，然后经过第二步的过滤。\n\n## CSRF 和 XSS 的区别\n\n### 区别一：\n\n- CSRF：需要用户先登录网站 A，获取 cookie。\n- XSS：不需要登录。\n\n### 区别二：（原理的区别）\n\n- CSRF：是利用网站 A 本身的漏洞，去请求网站 A 的 api。\n\n- XSS：是向网站 A 注入 JS 代码，然后执行 JS 里的代码，篡改网站 A 的内容。\n","source":"_posts/web-xss 攻击和 csrf 攻击.md","raw":"---\ntitle: XSS攻击和CSRF攻击\ndate: 2020-05-24 20:38:26\ncategories:\n  - 技术\n  - python\n  - web\ntags:\n  - CSRF\n---\n\n## CSRF\n\n### 1. CSRF 的基本概念、缩写、全称\n\nCSRF（Cross-site request forgery）：跨站请求伪造。\n\n### 2. CSRF 的攻击原理\n\n![](https://img2018.cnblogs.com/blog/941968/201904/941968-20190422203527996-279231194.jpg)\n\n用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发 cookie。\n\n从上图可以看出，要完成一次 CSRF 攻击，受害者必须满足两个必要的条件：\n\n（1）登录受信任网站 A，并在本地生成 Cookie。（如果用户没有登录网站 A，那么网站 B 在诱导的时候，请求网站 A 的 api 接口时，会提示你登录）\n\n（2）在不登出 A 的情况下，访问危险网站 B（其实是利用了网站 A 的漏洞）。\n\n我们在讲 CSRF 时，一定要把上面的两点说清楚。\n\n温馨提示一下，cookie 保证了用户可以处于登录状态，但网站 B 其实拿不到 cookie。\n\n### 3. CSRF的防范措施\n\n#### 1、判断请求头中的 Referer\n\n这个字段记录的是请求的来源。比如前端*Vue*页面 `http://localhost:8080/#/showbooks`上调用了服务端*Django*的接口 `http://127.0.0.1:8000/books/?page=2&page_size=10`， 那么在服务端，就可以通过 `Referer` 判断这个请求是来自哪里。\n\n在实际应用中，这些跟业务逻辑无关的操作往往会放在拦截器中（或者说过滤器，不同技术使用的名词可能不同）。意思是说，在进入到业务逻辑之前，就应该要根据 Referer 的值来决定这个请求能不能处理。\n\n用Flask 的话可以使用装饰器；在Django 中是叫中间件。每种技术它走的流程其实都一样。\n\n而在 Django 可以通过以下代码获取对应信息\n\n```python\nrequest.META['HTTP_REFERER']  # 来路\n\nrequest.META.get(\"HTTP_USER_AGENT\")  # 请求头\n```\n\n在Flask中，则获取方式不同。\n\n```python\nrequest.referrer  # 来路\n\nrequest.headers.get('User-Agent')  # 请求头\n```\n\n但要注意的是，Referer 是浏览器设置的，在浏览器兼容性大不相同的时代中，如果存在某种浏览器允许用户修改这个值，那么 CSRF 漏洞依然存在。\n\n#### 2、在请求参数中加入 csrf token\n\n讨论 GET 和 POST 两种请求，对于 GET，其实也没什么需要防范的。为什么？\n\n因为 GET 在 “约定” 当中，被认为是查询操作，查询的意思就是，你查一次，查两次，无数次，结果都不会改变（用户得到的数据可能会变），这不会对数据库造成任何影响，所以不需要加其他额外的参数。\n\n> 所以这里要提醒各位的是，尽量遵从这些约定，不要在 GET 请求中出现 /delete, /update, /edit 这种单词。把 “写” 操作放到 POST 中。\n\n对于 POST，服务端在创建表单的时候可以加一个隐藏字段，也是通过某种加密算法得到的。在处理请求时，验证这个字段是否合法，如果合法就继续处理，否则就认为是恶意操作。\n\n```html\n<form method=\"post\" action=\"/delete\">\n  <!-- 其他字段 -->\n  <input type=\"hidden\" />\n</form>\n```\n\n这个 html 片段由服务端生成。\n\n这的确是一个很好的防范措施，再增加一些处理的话，还能防止表单重复提交。\n\n可是对于一些新兴网站，很多都采用了 “前后端分离开发” 的设计，或者退一步，无论是不是前后端分离，它的 HTML 可能是由 JavaScript 拼接而成，并且表单也都是异步提交。所以这个办法有它的应用场景，也有局限性。\n\n#### 3、新增 HTTP Header\n\n方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。\n\n把 token 隐藏在 http 的 head 头中。\n\n服务端可以像获取 Referer 一样获取这个请求头，不同的是，这个 token 是由服务端生成的，所以攻击者他没办法猜。\n\n另一篇文章讲解的——**`JWT`**——就是基于这个方式。抛开 JWT 不谈，它的工作原理是这样的:\n\n![image-20201010164929032](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/image-20201010164929032.png)\n\n解释一下这四个请求，类型都是 POST 。\n\n1. 通过 `/login` 接口，用户登录，服务端传回一个 `access_token`，前端把它保存起来，可以是内存当中，如果你希望用来模拟 `session` 的话。也可以保存到 `localStorage` 中，这样可以实现自动登录。\n\n2. 调用 `/delete` 接口，参数是某样商品的 id。仔细看，在这个请求中，多了一个名为 `Authoriaztion` 的 `header`，它的值是之前从服务端传回来的 `access_token`，在前面加了一个 “`Bearer`”（这是和服务端的约定，约定就是说，说好了加就一起加，不加就都不加……）\n\n3. 调用 `/logout` 接口，同样把 `access_token` 加在 `header` 中传过去。成功之后，服务端和前端都会把这个 `token` 置为失效，或直接删除。\n\n4. 再调用 `/delete` 接口，由于此时已经没有 `access_token` 了，所以服务端判断该请求没权限，返回 401 。\n\n从头至尾，整个过程没有涉及 cookie，所以 CSRF 是不可能发生的！\n\n## XSS\n\n### 1. XSS 的基本概念\n\nXSS（Cross Site Scripting）：跨域脚本攻击。\n\n### 2. XSS 的攻击原理\n\nXSS 攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在 url 中输入、在评论框中输入），向你的页面注入脚本（可能是 js、hmtl 代码块等）。\n\n最后导致的结果可能是：\n\n盗用 Cookie 破坏页面的正常结构，插入广告等恶意内容 D-doss 攻击\n\n### 3. XSS 的攻击方式\n\n#### 1、反射型\n\n发出请求时，XSS 代码出现在 url 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以叫反射型 XSS。\n\n#### 2、存储型存\n\n储型 XSS 和反射型 XSS 的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。\n\n### 4. XSS 的防范措施\n\nXSS 的防范措施主要有三个：\n\n#### 1、编码\n\n对用户输入的数据进行`HTML Entity` 编码。\n\n比如说这段代码：\n\n```js\n<script>alert(1)</script>\n```\n\n若不进行任何处理，则浏览器会执行 `alert` 的 js 操作，实现 `XSS` 注入。\n\n进行编码处理之后，在浏览器中的显示结果就是 `<script>alert(1)</script>`，实现了将 `$var` 作为纯文本进行输出，且不引起 `JavaScript` 的执行。\n\n#### 2、过滤\n\n移除用户输入的和事件相关的属性。如 `onerror` 可以自动触发攻击，还有 `onclick` 等。（总而言是，过滤掉一些不安全的内容）移除用户输入的 `Style` 节点、`Script` 节点、`Iframe` 节点。（尤其是 `Script` 节点，它可是支持跨域的，一定要移除）。\n\n#### 3、校正\n\n避免直接对 `HTML Entity` 进行解码。使用 `DOM Parse` 转换，校正不配对的 `DOM` 标签。备注：我们应该去了解一下`DOM Parse`这个概念，它的作用是把文本解析成 `DOM` 结构。\n\n比较常用的做法是，通过第一步的编码转成文本，然后第三步转成 DOM 对象，然后经过第二步的过滤。\n\n## CSRF 和 XSS 的区别\n\n### 区别一：\n\n- CSRF：需要用户先登录网站 A，获取 cookie。\n- XSS：不需要登录。\n\n### 区别二：（原理的区别）\n\n- CSRF：是利用网站 A 本身的漏洞，去请求网站 A 的 api。\n\n- XSS：是向网站 A 注入 JS 代码，然后执行 JS 里的代码，篡改网站 A 的内容。\n","slug":"web-xss 攻击和 csrf 攻击","published":1,"updated":"2021-01-23T15:09:41.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud1002ujjln99f42pu0","content":"<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><h3 id=\"1-CSRF-的基本概念、缩写、全称\"><a href=\"#1-CSRF-的基本概念、缩写、全称\" class=\"headerlink\" title=\"1. CSRF 的基本概念、缩写、全称\"></a>1. CSRF 的基本概念、缩写、全称</h3><p>CSRF（Cross-site request forgery）：跨站请求伪造。</p>\n<h3 id=\"2-CSRF-的攻击原理\"><a href=\"#2-CSRF-的攻击原理\" class=\"headerlink\" title=\"2. CSRF 的攻击原理\"></a>2. CSRF 的攻击原理</h3><p><img src=\"https://img2018.cnblogs.com/blog/941968/201904/941968-20190422203527996-279231194.jpg\" alt=\"\"></p>\n<p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发 cookie。</p>\n<p>从上图可以看出，要完成一次 CSRF 攻击，受害者必须满足两个必要的条件：</p>\n<p>（1）登录受信任网站 A，并在本地生成 Cookie。（如果用户没有登录网站 A，那么网站 B 在诱导的时候，请求网站 A 的 api 接口时，会提示你登录）</p>\n<p>（2）在不登出 A 的情况下，访问危险网站 B（其实是利用了网站 A 的漏洞）。</p>\n<p>我们在讲 CSRF 时，一定要把上面的两点说清楚。</p>\n<p>温馨提示一下，cookie 保证了用户可以处于登录状态，但网站 B 其实拿不到 cookie。</p>\n<h3 id=\"3-CSRF的防范措施\"><a href=\"#3-CSRF的防范措施\" class=\"headerlink\" title=\"3. CSRF的防范措施\"></a>3. CSRF的防范措施</h3><h4 id=\"1、判断请求头中的-Referer\"><a href=\"#1、判断请求头中的-Referer\" class=\"headerlink\" title=\"1、判断请求头中的 Referer\"></a>1、判断请求头中的 Referer</h4><p>这个字段记录的是请求的来源。比如前端<em>Vue</em>页面 <code>http://localhost:8080/#/showbooks</code>上调用了服务端<em>Django</em>的接口 <code>http://127.0.0.1:8000/books/?page=2&amp;page_size=10</code>， 那么在服务端，就可以通过 <code>Referer</code> 判断这个请求是来自哪里。</p>\n<p>在实际应用中，这些跟业务逻辑无关的操作往往会放在拦截器中（或者说过滤器，不同技术使用的名词可能不同）。意思是说，在进入到业务逻辑之前，就应该要根据 Referer 的值来决定这个请求能不能处理。</p>\n<p>用Flask 的话可以使用装饰器；在Django 中是叫中间件。每种技术它走的流程其实都一样。</p>\n<p>而在 Django 可以通过以下代码获取对应信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">request.META[<span class=\"hljs-string\">&#x27;HTTP_REFERER&#x27;</span>]  <span class=\"hljs-comment\"># 来路</span><br><br>request.META.get(<span class=\"hljs-string\">&quot;HTTP_USER_AGENT&quot;</span>)  <span class=\"hljs-comment\"># 请求头</span><br></code></pre></div></td></tr></table></figure>\n<p>在Flask中，则获取方式不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">request.referrer  <span class=\"hljs-comment\"># 来路</span><br><br>request.headers.get(<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>)  <span class=\"hljs-comment\"># 请求头</span><br></code></pre></div></td></tr></table></figure>\n<p>但要注意的是，Referer 是浏览器设置的，在浏览器兼容性大不相同的时代中，如果存在某种浏览器允许用户修改这个值，那么 CSRF 漏洞依然存在。</p>\n<h4 id=\"2、在请求参数中加入-csrf-token\"><a href=\"#2、在请求参数中加入-csrf-token\" class=\"headerlink\" title=\"2、在请求参数中加入 csrf token\"></a>2、在请求参数中加入 csrf token</h4><p>讨论 GET 和 POST 两种请求，对于 GET，其实也没什么需要防范的。为什么？</p>\n<p>因为 GET 在 “约定” 当中，被认为是查询操作，查询的意思就是，你查一次，查两次，无数次，结果都不会改变（用户得到的数据可能会变），这不会对数据库造成任何影响，所以不需要加其他额外的参数。</p>\n<blockquote>\n<p>所以这里要提醒各位的是，尽量遵从这些约定，不要在 GET 请求中出现 /delete, /update, /edit 这种单词。把 “写” 操作放到 POST 中。</p>\n</blockquote>\n<p>对于 POST，服务端在创建表单的时候可以加一个隐藏字段，也是通过某种加密算法得到的。在处理请求时，验证这个字段是否合法，如果合法就继续处理，否则就认为是恶意操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/delete&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- 其他字段 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>这个 html 片段由服务端生成。</p>\n<p>这的确是一个很好的防范措施，再增加一些处理的话，还能防止表单重复提交。</p>\n<p>可是对于一些新兴网站，很多都采用了 “前后端分离开发” 的设计，或者退一步，无论是不是前后端分离，它的 HTML 可能是由 JavaScript 拼接而成，并且表单也都是异步提交。所以这个办法有它的应用场景，也有局限性。</p>\n<h4 id=\"3、新增-HTTP-Header\"><a href=\"#3、新增-HTTP-Header\" class=\"headerlink\" title=\"3、新增 HTTP Header\"></a>3、新增 HTTP Header</h4><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p>\n<p>把 token 隐藏在 http 的 head 头中。</p>\n<p>服务端可以像获取 Referer 一样获取这个请求头，不同的是，这个 token 是由服务端生成的，所以攻击者他没办法猜。</p>\n<p>另一篇文章讲解的——<strong><code>JWT</code></strong>——就是基于这个方式。抛开 JWT 不谈，它的工作原理是这样的:</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/image-20201010164929032.png\" alt=\"image-20201010164929032\"></p>\n<p>解释一下这四个请求，类型都是 POST 。</p>\n<ol>\n<li><p>通过 <code>/login</code> 接口，用户登录，服务端传回一个 <code>access_token</code>，前端把它保存起来，可以是内存当中，如果你希望用来模拟 <code>session</code> 的话。也可以保存到 <code>localStorage</code> 中，这样可以实现自动登录。</p>\n</li>\n<li><p>调用 <code>/delete</code> 接口，参数是某样商品的 id。仔细看，在这个请求中，多了一个名为 <code>Authoriaztion</code> 的 <code>header</code>，它的值是之前从服务端传回来的 <code>access_token</code>，在前面加了一个 “<code>Bearer</code>”（这是和服务端的约定，约定就是说，说好了加就一起加，不加就都不加……）</p>\n</li>\n<li><p>调用 <code>/logout</code> 接口，同样把 <code>access_token</code> 加在 <code>header</code> 中传过去。成功之后，服务端和前端都会把这个 <code>token</code> 置为失效，或直接删除。</p>\n</li>\n<li><p>再调用 <code>/delete</code> 接口，由于此时已经没有 <code>access_token</code> 了，所以服务端判断该请求没权限，返回 401 。</p>\n</li>\n</ol>\n<p>从头至尾，整个过程没有涉及 cookie，所以 CSRF 是不可能发生的！</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><h3 id=\"1-XSS-的基本概念\"><a href=\"#1-XSS-的基本概念\" class=\"headerlink\" title=\"1. XSS 的基本概念\"></a>1. XSS 的基本概念</h3><p>XSS（Cross Site Scripting）：跨域脚本攻击。</p>\n<h3 id=\"2-XSS-的攻击原理\"><a href=\"#2-XSS-的攻击原理\" class=\"headerlink\" title=\"2. XSS 的攻击原理\"></a>2. XSS 的攻击原理</h3><p>XSS 攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在 url 中输入、在评论框中输入），向你的页面注入脚本（可能是 js、hmtl 代码块等）。</p>\n<p>最后导致的结果可能是：</p>\n<p>盗用 Cookie 破坏页面的正常结构，插入广告等恶意内容 D-doss 攻击</p>\n<h3 id=\"3-XSS-的攻击方式\"><a href=\"#3-XSS-的攻击方式\" class=\"headerlink\" title=\"3. XSS 的攻击方式\"></a>3. XSS 的攻击方式</h3><h4 id=\"1、反射型\"><a href=\"#1、反射型\" class=\"headerlink\" title=\"1、反射型\"></a>1、反射型</h4><p>发出请求时，XSS 代码出现在 url 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以叫反射型 XSS。</p>\n<h4 id=\"2、存储型存\"><a href=\"#2、存储型存\" class=\"headerlink\" title=\"2、存储型存\"></a>2、存储型存</h4><p>储型 XSS 和反射型 XSS 的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p>\n<h3 id=\"4-XSS-的防范措施\"><a href=\"#4-XSS-的防范措施\" class=\"headerlink\" title=\"4. XSS 的防范措施\"></a>4. XSS 的防范措施</h3><p>XSS 的防范措施主要有三个：</p>\n<h4 id=\"1、编码\"><a href=\"#1、编码\" class=\"headerlink\" title=\"1、编码\"></a>1、编码</h4><p>对用户输入的数据进行<code>HTML Entity</code> 编码。</p>\n<p>比如说这段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;script&gt;alert(<span class=\"hljs-number\">1</span>)&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<p>若不进行任何处理，则浏览器会执行 <code>alert</code> 的 js 操作，实现 <code>XSS</code> 注入。</p>\n<p>进行编码处理之后，在浏览器中的显示结果就是 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，实现了将 <code>$var</code> 作为纯文本进行输出，且不引起 <code>JavaScript</code> 的执行。</p>\n<h4 id=\"2、过滤\"><a href=\"#2、过滤\" class=\"headerlink\" title=\"2、过滤\"></a>2、过滤</h4><p>移除用户输入的和事件相关的属性。如 <code>onerror</code> 可以自动触发攻击，还有 <code>onclick</code> 等。（总而言是，过滤掉一些不安全的内容）移除用户输入的 <code>Style</code> 节点、<code>Script</code> 节点、<code>Iframe</code> 节点。（尤其是 <code>Script</code> 节点，它可是支持跨域的，一定要移除）。</p>\n<h4 id=\"3、校正\"><a href=\"#3、校正\" class=\"headerlink\" title=\"3、校正\"></a>3、校正</h4><p>避免直接对 <code>HTML Entity</code> 进行解码。使用 <code>DOM Parse</code> 转换，校正不配对的 <code>DOM</code> 标签。备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成 <code>DOM</code> 结构。</p>\n<p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成 DOM 对象，然后经过第二步的过滤。</p>\n<h2 id=\"CSRF-和-XSS-的区别\"><a href=\"#CSRF-和-XSS-的区别\" class=\"headerlink\" title=\"CSRF 和 XSS 的区别\"></a>CSRF 和 XSS 的区别</h2><h3 id=\"区别一：\"><a href=\"#区别一：\" class=\"headerlink\" title=\"区别一：\"></a>区别一：</h3><ul>\n<li>CSRF：需要用户先登录网站 A，获取 cookie。</li>\n<li>XSS：不需要登录。</li>\n</ul>\n<h3 id=\"区别二：（原理的区别）\"><a href=\"#区别二：（原理的区别）\" class=\"headerlink\" title=\"区别二：（原理的区别）\"></a>区别二：（原理的区别）</h3><ul>\n<li><p>CSRF：是利用网站 A 本身的漏洞，去请求网站 A 的 api。</p>\n</li>\n<li><p>XSS：是向网站 A 注入 JS 代码，然后执行 JS 里的代码，篡改网站 A 的内容。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><h3 id=\"1-CSRF-的基本概念、缩写、全称\"><a href=\"#1-CSRF-的基本概念、缩写、全称\" class=\"headerlink\" title=\"1. CSRF 的基本概念、缩写、全称\"></a>1. CSRF 的基本概念、缩写、全称</h3><p>CSRF（Cross-site request forgery）：跨站请求伪造。</p>\n<h3 id=\"2-CSRF-的攻击原理\"><a href=\"#2-CSRF-的攻击原理\" class=\"headerlink\" title=\"2. CSRF 的攻击原理\"></a>2. CSRF 的攻击原理</h3><p><img src=\"https://img2018.cnblogs.com/blog/941968/201904/941968-20190422203527996-279231194.jpg\" alt=\"\"></p>\n<p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发 cookie。</p>\n<p>从上图可以看出，要完成一次 CSRF 攻击，受害者必须满足两个必要的条件：</p>\n<p>（1）登录受信任网站 A，并在本地生成 Cookie。（如果用户没有登录网站 A，那么网站 B 在诱导的时候，请求网站 A 的 api 接口时，会提示你登录）</p>\n<p>（2）在不登出 A 的情况下，访问危险网站 B（其实是利用了网站 A 的漏洞）。</p>\n<p>我们在讲 CSRF 时，一定要把上面的两点说清楚。</p>\n<p>温馨提示一下，cookie 保证了用户可以处于登录状态，但网站 B 其实拿不到 cookie。</p>\n<h3 id=\"3-CSRF的防范措施\"><a href=\"#3-CSRF的防范措施\" class=\"headerlink\" title=\"3. CSRF的防范措施\"></a>3. CSRF的防范措施</h3><h4 id=\"1、判断请求头中的-Referer\"><a href=\"#1、判断请求头中的-Referer\" class=\"headerlink\" title=\"1、判断请求头中的 Referer\"></a>1、判断请求头中的 Referer</h4><p>这个字段记录的是请求的来源。比如前端<em>Vue</em>页面 <code>http://localhost:8080/#/showbooks</code>上调用了服务端<em>Django</em>的接口 <code>http://127.0.0.1:8000/books/?page=2&amp;page_size=10</code>， 那么在服务端，就可以通过 <code>Referer</code> 判断这个请求是来自哪里。</p>\n<p>在实际应用中，这些跟业务逻辑无关的操作往往会放在拦截器中（或者说过滤器，不同技术使用的名词可能不同）。意思是说，在进入到业务逻辑之前，就应该要根据 Referer 的值来决定这个请求能不能处理。</p>\n<p>用Flask 的话可以使用装饰器；在Django 中是叫中间件。每种技术它走的流程其实都一样。</p>\n<p>而在 Django 可以通过以下代码获取对应信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">request.META[<span class=\"hljs-string\">&#x27;HTTP_REFERER&#x27;</span>]  <span class=\"hljs-comment\"># 来路</span><br><br>request.META.get(<span class=\"hljs-string\">&quot;HTTP_USER_AGENT&quot;</span>)  <span class=\"hljs-comment\"># 请求头</span><br></code></pre></td></tr></table></figure>\n<p>在Flask中，则获取方式不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">request.referrer  <span class=\"hljs-comment\"># 来路</span><br><br>request.headers.get(<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>)  <span class=\"hljs-comment\"># 请求头</span><br></code></pre></td></tr></table></figure>\n<p>但要注意的是，Referer 是浏览器设置的，在浏览器兼容性大不相同的时代中，如果存在某种浏览器允许用户修改这个值，那么 CSRF 漏洞依然存在。</p>\n<h4 id=\"2、在请求参数中加入-csrf-token\"><a href=\"#2、在请求参数中加入-csrf-token\" class=\"headerlink\" title=\"2、在请求参数中加入 csrf token\"></a>2、在请求参数中加入 csrf token</h4><p>讨论 GET 和 POST 两种请求，对于 GET，其实也没什么需要防范的。为什么？</p>\n<p>因为 GET 在 “约定” 当中，被认为是查询操作，查询的意思就是，你查一次，查两次，无数次，结果都不会改变（用户得到的数据可能会变），这不会对数据库造成任何影响，所以不需要加其他额外的参数。</p>\n<blockquote>\n<p>所以这里要提醒各位的是，尽量遵从这些约定，不要在 GET 请求中出现 /delete, /update, /edit 这种单词。把 “写” 操作放到 POST 中。</p>\n</blockquote>\n<p>对于 POST，服务端在创建表单的时候可以加一个隐藏字段，也是通过某种加密算法得到的。在处理请求时，验证这个字段是否合法，如果合法就继续处理，否则就认为是恶意操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/delete&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- 其他字段 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>这个 html 片段由服务端生成。</p>\n<p>这的确是一个很好的防范措施，再增加一些处理的话，还能防止表单重复提交。</p>\n<p>可是对于一些新兴网站，很多都采用了 “前后端分离开发” 的设计，或者退一步，无论是不是前后端分离，它的 HTML 可能是由 JavaScript 拼接而成，并且表单也都是异步提交。所以这个办法有它的应用场景，也有局限性。</p>\n<h4 id=\"3、新增-HTTP-Header\"><a href=\"#3、新增-HTTP-Header\" class=\"headerlink\" title=\"3、新增 HTTP Header\"></a>3、新增 HTTP Header</h4><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p>\n<p>把 token 隐藏在 http 的 head 头中。</p>\n<p>服务端可以像获取 Referer 一样获取这个请求头，不同的是，这个 token 是由服务端生成的，所以攻击者他没办法猜。</p>\n<p>另一篇文章讲解的——<strong><code>JWT</code></strong>——就是基于这个方式。抛开 JWT 不谈，它的工作原理是这样的:</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/image-20201010164929032.png\" alt=\"image-20201010164929032\"></p>\n<p>解释一下这四个请求，类型都是 POST 。</p>\n<ol>\n<li><p>通过 <code>/login</code> 接口，用户登录，服务端传回一个 <code>access_token</code>，前端把它保存起来，可以是内存当中，如果你希望用来模拟 <code>session</code> 的话。也可以保存到 <code>localStorage</code> 中，这样可以实现自动登录。</p>\n</li>\n<li><p>调用 <code>/delete</code> 接口，参数是某样商品的 id。仔细看，在这个请求中，多了一个名为 <code>Authoriaztion</code> 的 <code>header</code>，它的值是之前从服务端传回来的 <code>access_token</code>，在前面加了一个 “<code>Bearer</code>”（这是和服务端的约定，约定就是说，说好了加就一起加，不加就都不加……）</p>\n</li>\n<li><p>调用 <code>/logout</code> 接口，同样把 <code>access_token</code> 加在 <code>header</code> 中传过去。成功之后，服务端和前端都会把这个 <code>token</code> 置为失效，或直接删除。</p>\n</li>\n<li><p>再调用 <code>/delete</code> 接口，由于此时已经没有 <code>access_token</code> 了，所以服务端判断该请求没权限，返回 401 。</p>\n</li>\n</ol>\n<p>从头至尾，整个过程没有涉及 cookie，所以 CSRF 是不可能发生的！</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><h3 id=\"1-XSS-的基本概念\"><a href=\"#1-XSS-的基本概念\" class=\"headerlink\" title=\"1. XSS 的基本概念\"></a>1. XSS 的基本概念</h3><p>XSS（Cross Site Scripting）：跨域脚本攻击。</p>\n<h3 id=\"2-XSS-的攻击原理\"><a href=\"#2-XSS-的攻击原理\" class=\"headerlink\" title=\"2. XSS 的攻击原理\"></a>2. XSS 的攻击原理</h3><p>XSS 攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在 url 中输入、在评论框中输入），向你的页面注入脚本（可能是 js、hmtl 代码块等）。</p>\n<p>最后导致的结果可能是：</p>\n<p>盗用 Cookie 破坏页面的正常结构，插入广告等恶意内容 D-doss 攻击</p>\n<h3 id=\"3-XSS-的攻击方式\"><a href=\"#3-XSS-的攻击方式\" class=\"headerlink\" title=\"3. XSS 的攻击方式\"></a>3. XSS 的攻击方式</h3><h4 id=\"1、反射型\"><a href=\"#1、反射型\" class=\"headerlink\" title=\"1、反射型\"></a>1、反射型</h4><p>发出请求时，XSS 代码出现在 url 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以叫反射型 XSS。</p>\n<h4 id=\"2、存储型存\"><a href=\"#2、存储型存\" class=\"headerlink\" title=\"2、存储型存\"></a>2、存储型存</h4><p>储型 XSS 和反射型 XSS 的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p>\n<h3 id=\"4-XSS-的防范措施\"><a href=\"#4-XSS-的防范措施\" class=\"headerlink\" title=\"4. XSS 的防范措施\"></a>4. XSS 的防范措施</h3><p>XSS 的防范措施主要有三个：</p>\n<h4 id=\"1、编码\"><a href=\"#1、编码\" class=\"headerlink\" title=\"1、编码\"></a>1、编码</h4><p>对用户输入的数据进行<code>HTML Entity</code> 编码。</p>\n<p>比如说这段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;script&gt;alert(<span class=\"hljs-number\">1</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>若不进行任何处理，则浏览器会执行 <code>alert</code> 的 js 操作，实现 <code>XSS</code> 注入。</p>\n<p>进行编码处理之后，在浏览器中的显示结果就是 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，实现了将 <code>$var</code> 作为纯文本进行输出，且不引起 <code>JavaScript</code> 的执行。</p>\n<h4 id=\"2、过滤\"><a href=\"#2、过滤\" class=\"headerlink\" title=\"2、过滤\"></a>2、过滤</h4><p>移除用户输入的和事件相关的属性。如 <code>onerror</code> 可以自动触发攻击，还有 <code>onclick</code> 等。（总而言是，过滤掉一些不安全的内容）移除用户输入的 <code>Style</code> 节点、<code>Script</code> 节点、<code>Iframe</code> 节点。（尤其是 <code>Script</code> 节点，它可是支持跨域的，一定要移除）。</p>\n<h4 id=\"3、校正\"><a href=\"#3、校正\" class=\"headerlink\" title=\"3、校正\"></a>3、校正</h4><p>避免直接对 <code>HTML Entity</code> 进行解码。使用 <code>DOM Parse</code> 转换，校正不配对的 <code>DOM</code> 标签。备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成 <code>DOM</code> 结构。</p>\n<p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成 DOM 对象，然后经过第二步的过滤。</p>\n<h2 id=\"CSRF-和-XSS-的区别\"><a href=\"#CSRF-和-XSS-的区别\" class=\"headerlink\" title=\"CSRF 和 XSS 的区别\"></a>CSRF 和 XSS 的区别</h2><h3 id=\"区别一：\"><a href=\"#区别一：\" class=\"headerlink\" title=\"区别一：\"></a>区别一：</h3><ul>\n<li>CSRF：需要用户先登录网站 A，获取 cookie。</li>\n<li>XSS：不需要登录。</li>\n</ul>\n<h3 id=\"区别二：（原理的区别）\"><a href=\"#区别二：（原理的区别）\" class=\"headerlink\" title=\"区别二：（原理的区别）\"></a>区别二：（原理的区别）</h3><ul>\n<li><p>CSRF：是利用网站 A 本身的漏洞，去请求网站 A 的 api。</p>\n</li>\n<li><p>XSS：是向网站 A 注入 JS 代码，然后执行 JS 里的代码，篡改网站 A 的内容。</p>\n</li>\n</ul>\n"},{"title":"Git操作","date":"2019-03-31T04:15:27.000Z","_content":"\nGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，开发人员必备技能。\n\n## 1. 安装Git\n\n- windows：到git官网上下载, [Download](https://gitforwindows.org/) git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。\n\n- linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码\n\n  ```shell\n  sudo apt-get install git\n  ```\n\n  安装好后，用`git --version` 来查看一下版本\n\n## 2. 基本操作\n\n![Git操作](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Git操作%20.jpg)\n\n\n## 3. 远程仓库密钥配置\n\n### 1. GitHub密钥配置\n\n#### 1.1. 设置身份信息\n\ngit设置身份信息\n\n```shell\ngit config --global user.name \"yourname\"\n\ngit config --global user.email \"your@email.com\"\n```\n\n#### 1.2. 删除.ssh文件夹\n\n（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git）\n\n#### 1.3. 创建密钥\n\n终端输入命令\n\n```shell\nssh-keygen -t rsa -C \"your@email.com\"（请填你设置的邮箱地址）\n```\n\n接着出现：\n\n```shell\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):\n```\n\n请直接按下回车\n\n然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打id_rsa.pub\n\n将全部的内容复制\n\n#### 1.4. 添加公钥\n\n打开[https://github.com/](https://github.com/)，登陆你的账户，进入设置\n\n进入ssh设置\n\n点击 `New SSH key`\n\n在key中将刚刚复制的粘贴进去\n\n最后点击`Add SSH key`\n\n#### 1.5. 测试\n\n在终端输入\n\n```shell\nssh -T git@github.com\n```\n\n你将会看到：\n\n```shell\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n输入 yes\n\n```shell\nHi humingx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n如果看到Hi后面是你的用户名，就说明成功了。\n\n### 2. Gitee仓库密钥配置类似\n\n> 重装系统之后,git push的时候会出现问题:`The authenticity of host 'github.com (13.229.188.59)' can't be established.`，原因是本地仓库和远程的SSH不匹配\n>\n> 解决办法：重新配置仓库密钥即可。\n\n## 4. 本地仓库关联远程仓库\n\n1. 已有仓库\n\n    ```bash\n    cd existing_git_repo\n    git remote add origin https://gitee.com/bookandmusic/test.git\n    ```\n    添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n    ```bash\n    git push -u origin master\n    ```\n    把本地库的内容推送到远程，用git push命令，实际上是把当前分支source推送到远程。\n\n    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n2. 新建git仓库，并关联远程仓库\n\n    ```bash\n    mkdir test\n    cd test\n    git init\n    touch README.md\n    git add README.md\n    git commit -m \"first commit\"\n    git remote add origin https://gitee.com/bookandmusic/test.git\n    git push -u origin master\n    ```\n\n3. 用git进行push操作的时候，报`fatal: TaskCanceledException encountered.`的解决方法\n    解决方法如下：\n    ```shell\n    git config --global credential.helper manager\n    ```\n    之后再push一切正常\n","source":"_posts/工具-Git操作.md","raw":"---\ntitle: Git操作\ncategories:\n\t- 工具\n\t- Git\ndate: 2019-03-31 12:15:27\ntags:\n\t- Git\n\t- 密钥\n\t- 远程仓库关联\n---\n\nGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，开发人员必备技能。\n\n## 1. 安装Git\n\n- windows：到git官网上下载, [Download](https://gitforwindows.org/) git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。\n\n- linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码\n\n  ```shell\n  sudo apt-get install git\n  ```\n\n  安装好后，用`git --version` 来查看一下版本\n\n## 2. 基本操作\n\n![Git操作](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Git操作%20.jpg)\n\n\n## 3. 远程仓库密钥配置\n\n### 1. GitHub密钥配置\n\n#### 1.1. 设置身份信息\n\ngit设置身份信息\n\n```shell\ngit config --global user.name \"yourname\"\n\ngit config --global user.email \"your@email.com\"\n```\n\n#### 1.2. 删除.ssh文件夹\n\n（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git）\n\n#### 1.3. 创建密钥\n\n终端输入命令\n\n```shell\nssh-keygen -t rsa -C \"your@email.com\"（请填你设置的邮箱地址）\n```\n\n接着出现：\n\n```shell\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):\n```\n\n请直接按下回车\n\n然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打id_rsa.pub\n\n将全部的内容复制\n\n#### 1.4. 添加公钥\n\n打开[https://github.com/](https://github.com/)，登陆你的账户，进入设置\n\n进入ssh设置\n\n点击 `New SSH key`\n\n在key中将刚刚复制的粘贴进去\n\n最后点击`Add SSH key`\n\n#### 1.5. 测试\n\n在终端输入\n\n```shell\nssh -T git@github.com\n```\n\n你将会看到：\n\n```shell\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n输入 yes\n\n```shell\nHi humingx! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n如果看到Hi后面是你的用户名，就说明成功了。\n\n### 2. Gitee仓库密钥配置类似\n\n> 重装系统之后,git push的时候会出现问题:`The authenticity of host 'github.com (13.229.188.59)' can't be established.`，原因是本地仓库和远程的SSH不匹配\n>\n> 解决办法：重新配置仓库密钥即可。\n\n## 4. 本地仓库关联远程仓库\n\n1. 已有仓库\n\n    ```bash\n    cd existing_git_repo\n    git remote add origin https://gitee.com/bookandmusic/test.git\n    ```\n    添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n    ```bash\n    git push -u origin master\n    ```\n    把本地库的内容推送到远程，用git push命令，实际上是把当前分支source推送到远程。\n\n    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n2. 新建git仓库，并关联远程仓库\n\n    ```bash\n    mkdir test\n    cd test\n    git init\n    touch README.md\n    git add README.md\n    git commit -m \"first commit\"\n    git remote add origin https://gitee.com/bookandmusic/test.git\n    git push -u origin master\n    ```\n\n3. 用git进行push操作的时候，报`fatal: TaskCanceledException encountered.`的解决方法\n    解决方法如下：\n    ```shell\n    git config --global credential.helper manager\n    ```\n    之后再push一切正常\n","slug":"工具-Git操作","published":1,"updated":"2021-01-25T02:56:53.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud2002yjjln3mwtcpuy","content":"<p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，开发人员必备技能。</p>\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1. 安装Git\"></a>1. 安装Git</h2><ul>\n<li><p>windows：到git官网上下载, <a href=\"https://gitforwindows.org/\">Download</a> git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n</li>\n<li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sudo apt-get install git<br></code></pre></div></td></tr></table></figure>\n<p>安装好后，用<code>git --version</code> 来查看一下版本</p>\n</li>\n</ul>\n<h2 id=\"2-基本操作\"><a href=\"#2-基本操作\" class=\"headerlink\" title=\"2. 基本操作\"></a>2. 基本操作</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Git%E6%93%8D%E4%BD%9C%20.jpg\" alt=\"Git操作\"></p>\n<h2 id=\"3-远程仓库密钥配置\"><a href=\"#3-远程仓库密钥配置\" class=\"headerlink\" title=\"3. 远程仓库密钥配置\"></a>3. 远程仓库密钥配置</h2><h3 id=\"1-GitHub密钥配置\"><a href=\"#1-GitHub密钥配置\" class=\"headerlink\" title=\"1. GitHub密钥配置\"></a>1. GitHub密钥配置</h3><h4 id=\"1-1-设置身份信息\"><a href=\"#1-1-设置身份信息\" class=\"headerlink\" title=\"1.1. 设置身份信息\"></a>1.1. 设置身份信息</h4><p>git设置身份信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git config --global user.name &quot;yourname&quot;<br><br>git config --global user.email &quot;your@email.com&quot;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"1-2-删除-ssh文件夹\"><a href=\"#1-2-删除-ssh文件夹\" class=\"headerlink\" title=\"1.2. 删除.ssh文件夹\"></a>1.2. 删除.ssh文件夹</h4><p>（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git）</p>\n<h4 id=\"1-3-创建密钥\"><a href=\"#1-3-创建密钥\" class=\"headerlink\" title=\"1.3. 创建密钥\"></a>1.3. 创建密钥</h4><p>终端输入命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ssh-keygen -t rsa -C &quot;your@email.com&quot;（请填你设置的邮箱地址）<br></code></pre></div></td></tr></table></figure>\n<p>接着出现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">Generating public/private rsa key pair.<br><br>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<br></code></pre></div></td></tr></table></figure>\n<p>请直接按下回车</p>\n<p>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打id_rsa.pub</p>\n<p>将全部的内容复制</p>\n<h4 id=\"1-4-添加公钥\"><a href=\"#1-4-添加公钥\" class=\"headerlink\" title=\"1.4. 添加公钥\"></a>1.4. 添加公钥</h4><p>打开<a href=\"https://github.com/\">https://github.com/</a>，登陆你的账户，进入设置</p>\n<p>进入ssh设置</p>\n<p>点击 <code>New SSH key</code></p>\n<p>在key中将刚刚复制的粘贴进去</p>\n<p>最后点击<code>Add SSH key</code></p>\n<h4 id=\"1-5-测试\"><a href=\"#1-5-测试\" class=\"headerlink\" title=\"1.5. 测试\"></a>1.5. 测试</h4><p>在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure>\n<p>你将会看到：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">The authenticity of host &#x27;github.com (207.97.227.239)&#x27; can&#x27;t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?<br></code></pre></div></td></tr></table></figure>\n<p>输入 yes</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">Hi humingx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></div></td></tr></table></figure>\n<p>如果看到Hi后面是你的用户名，就说明成功了。</p>\n<h3 id=\"2-Gitee仓库密钥配置类似\"><a href=\"#2-Gitee仓库密钥配置类似\" class=\"headerlink\" title=\"2. Gitee仓库密钥配置类似\"></a>2. Gitee仓库密钥配置类似</h3><blockquote>\n<p>重装系统之后,git push的时候会出现问题:<code>The authenticity of host &#39;github.com (13.229.188.59)&#39; can&#39;t be established.</code>，原因是本地仓库和远程的SSH不匹配</p>\n<p>解决办法：重新配置仓库密钥即可。</p>\n</blockquote>\n<h2 id=\"4-本地仓库关联远程仓库\"><a href=\"#4-本地仓库关联远程仓库\" class=\"headerlink\" title=\"4. 本地仓库关联远程仓库\"></a>4. 本地仓库关联远程仓库</h2><ol>\n<li><p>已有仓库</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> existing_git_repo<br>git remote add origin https://gitee.com/bookandmusic/test.git<br></code></pre></div></td></tr></table></figure>\n<p> 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">git push -u origin master<br></code></pre></div></td></tr></table></figure>\n<p> 把本地库的内容推送到远程，用git push命令，实际上是把当前分支source推送到远程。</p>\n<p> 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n<li><p>新建git仓库，并关联远程仓库</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mkdir <span class=\"hljs-built_in\">test</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">test</span><br>git init<br>touch README.md<br>git add README.md<br>git commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br>git remote add origin https://gitee.com/bookandmusic/test.git<br>git push -u origin master<br></code></pre></div></td></tr></table></figure></li>\n<li><p>用git进行push操作的时候，报<code>fatal: TaskCanceledException encountered.</code>的解决方法<br> 解决方法如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git config --global credential.helper manager<br></code></pre></div></td></tr></table></figure>\n<p> 之后再push一切正常</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，开发人员必备技能。</p>\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1. 安装Git\"></a>1. 安装Git</h2><ul>\n<li><p>windows：到git官网上下载, <a href=\"https://gitforwindows.org/\">Download</a> git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>\n</li>\n<li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install git<br></code></pre></td></tr></table></figure>\n<p>安装好后，用<code>git --version</code> 来查看一下版本</p>\n</li>\n</ul>\n<h2 id=\"2-基本操作\"><a href=\"#2-基本操作\" class=\"headerlink\" title=\"2. 基本操作\"></a>2. 基本操作</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Git%E6%93%8D%E4%BD%9C%20.jpg\" alt=\"Git操作\"></p>\n<h2 id=\"3-远程仓库密钥配置\"><a href=\"#3-远程仓库密钥配置\" class=\"headerlink\" title=\"3. 远程仓库密钥配置\"></a>3. 远程仓库密钥配置</h2><h3 id=\"1-GitHub密钥配置\"><a href=\"#1-GitHub密钥配置\" class=\"headerlink\" title=\"1. GitHub密钥配置\"></a>1. GitHub密钥配置</h3><h4 id=\"1-1-设置身份信息\"><a href=\"#1-1-设置身份信息\" class=\"headerlink\" title=\"1.1. 设置身份信息\"></a>1.1. 设置身份信息</h4><p>git设置身份信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config --global user.name &quot;yourname&quot;<br><br>git config --global user.email &quot;your@email.com&quot;<br></code></pre></td></tr></table></figure>\n<h4 id=\"1-2-删除-ssh文件夹\"><a href=\"#1-2-删除-ssh文件夹\" class=\"headerlink\" title=\"1.2. 删除.ssh文件夹\"></a>1.2. 删除.ssh文件夹</h4><p>（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git）</p>\n<h4 id=\"1-3-创建密钥\"><a href=\"#1-3-创建密钥\" class=\"headerlink\" title=\"1.3. 创建密钥\"></a>1.3. 创建密钥</h4><p>终端输入命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ssh-keygen -t rsa -C &quot;your@email.com&quot;（请填你设置的邮箱地址）<br></code></pre></td></tr></table></figure>\n<p>接着出现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Generating public/private rsa key pair.<br><br>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<br></code></pre></td></tr></table></figure>\n<p>请直接按下回车</p>\n<p>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打id_rsa.pub</p>\n<p>将全部的内容复制</p>\n<h4 id=\"1-4-添加公钥\"><a href=\"#1-4-添加公钥\" class=\"headerlink\" title=\"1.4. 添加公钥\"></a>1.4. 添加公钥</h4><p>打开<a href=\"https://github.com/\">https://github.com/</a>，登陆你的账户，进入设置</p>\n<p>进入ssh设置</p>\n<p>点击 <code>New SSH key</code></p>\n<p>在key中将刚刚复制的粘贴进去</p>\n<p>最后点击<code>Add SSH key</code></p>\n<h4 id=\"1-5-测试\"><a href=\"#1-5-测试\" class=\"headerlink\" title=\"1.5. 测试\"></a>1.5. 测试</h4><p>在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n<p>你将会看到：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">The authenticity of host &#x27;github.com (207.97.227.239)&#x27; can&#x27;t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?<br></code></pre></td></tr></table></figure>\n<p>输入 yes</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Hi humingx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n<p>如果看到Hi后面是你的用户名，就说明成功了。</p>\n<h3 id=\"2-Gitee仓库密钥配置类似\"><a href=\"#2-Gitee仓库密钥配置类似\" class=\"headerlink\" title=\"2. Gitee仓库密钥配置类似\"></a>2. Gitee仓库密钥配置类似</h3><blockquote>\n<p>重装系统之后,git push的时候会出现问题:<code>The authenticity of host &#39;github.com (13.229.188.59)&#39; can&#39;t be established.</code>，原因是本地仓库和远程的SSH不匹配</p>\n<p>解决办法：重新配置仓库密钥即可。</p>\n</blockquote>\n<h2 id=\"4-本地仓库关联远程仓库\"><a href=\"#4-本地仓库关联远程仓库\" class=\"headerlink\" title=\"4. 本地仓库关联远程仓库\"></a>4. 本地仓库关联远程仓库</h2><ol>\n<li><p>已有仓库</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> existing_git_repo<br>git remote add origin https://gitee.com/bookandmusic/test.git<br></code></pre></td></tr></table></figure>\n<p> 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git push -u origin master<br></code></pre></td></tr></table></figure>\n<p> 把本地库的内容推送到远程，用git push命令，实际上是把当前分支source推送到远程。</p>\n<p> 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n<li><p>新建git仓库，并关联远程仓库</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mkdir <span class=\"hljs-built_in\">test</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">test</span><br>git init<br>touch README.md<br>git add README.md<br>git commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br>git remote add origin https://gitee.com/bookandmusic/test.git<br>git push -u origin master<br></code></pre></td></tr></table></figure></li>\n<li><p>用git进行push操作的时候，报<code>fatal: TaskCanceledException encountered.</code>的解决方法<br> 解决方法如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config --global credential.helper manager<br></code></pre></td></tr></table></figure>\n<p> 之后再push一切正常</p>\n</li>\n</ol>\n"},{"title":"Node.js环境配置","date":"2019-03-31T03:58:35.000Z","_content":"\n简单的说 Node.js 就是运行在服务端的 JavaScript。\n\nNode.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n\nNode.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n\n## Node.js版本管理\n\n1. 手动安装nvm\n\n    ```bash\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n    ```\n\n    ```bash\n    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n    ```\n\n    运行以上任一命令将下载一个脚本并运行它。\n    该脚本会将nvm存储库克隆到`~/.nvm`,并尝试将以下代码段中的源代码行添加到正确的配置文件（`~/.bash_profile`, `~/.zshrc`, `~/.profile`, 或 `~/.bashrc`）\n\n    ```bash\n    export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n    ```\n\n2. 修改nvm默认镜像源\n\n    用国内镜像快速安装node,把环境变量 NVM_NODEJS_ORG_MIRROR加入到正确的配置文件（`~/.bash_profile`,`~/.zshrc`, `~/.profile`, 或 `~/.bashrc`）\n\n    ```bash\n    export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n    ```\n\n3. nvm命令\n\n    ```bash\n    nvm version # 查看当前的版本\n    nvm ls-remote # 列出所有可以安装的node版本号\n\n    nvm install stable # 安装最新稳定版本\n    nvm install  <version> # 安装指定版本号的node\n    nvm use <version> # 切换使用指定的版本node\n\n    nvm ls  # 列出所有已经安装的node版本\n    nvm current # 当前node版本\n\n    nvm alias default <version>  # 指定默认的node版本\n    nvm alias <name> <version> # 给不同的版本号添加别名\n    nvm unalias <name> ## 删除已定义的别名\n\n    nvm uninstall <version> 卸载指定的版本\n    ```\n\n## Node.js包管理\n\n1. 安装包管理工具: npm、cnpm、yarn\n\n    ```bash\n    npm -g install npm@next  # npm升级\n    npm install -g cnpm --registry=https://registry.npm.taobao.org  # cnpm安装\n    npm install -g yarn  # yarn安装\n    ```\n\n2. 查看已安装的所有全局包\n\n    ```bash\n    npm list -g --depth=0\n\n    cnpm list -g --depth=0\n\n    yarn global list\n    ```\n\n3. 安装包\n\n    ```bash\n    npm install -g <package>\n\n    cnpm install -g <package>\n\n    yarn global add <package>\n    ```\n\n4. 卸载包\n\n    ```bash\n    npm uninstall -g <package>\n\n    cnpm uninstall -g <package>\n\n    yarn global remove <package>\n    ```\n\n5. 更新包\n\n    ```bash\n    npm update <package>\n    ```\n\n6. 更新本地包\n\n    ```bash\n    npm upgrade --save\n    yarn upgrade\n    ```\n\n7. 其他一些常用的命令\n\n    ```bash\n    npm config get registry  # 查看npm当前镜像源\n\n    npm config set registry https://registry.npm.taobao.org/  # 设置npm镜像源为淘宝镜像\n\n    yarn config get registry  # 查看yarn当前镜像源\n\n    yarn config set registry https://registry.npm.taobao.org/  # 设置yarn镜像源为淘宝镜像\n    ```\n\n## Node.js镜像管理\n\n1. 直接编辑npm的配置文件\n\n    ```bash\n    npm config edit\n    ```\n\n    直接修改registry的地址\n\n    ```bash\n    sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\n    phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/\n    electron_mirror=https://npm.taobao.org/mirrors/electron/\n    registry=https://registry.npm.taobao.org\n    ```\n\n2. 用代码更改npm的配置文件\n\n    ```bash\n    npm config set registry http://registry.npm.taobao.org\n    ```\n\n    这段代码即将镜像改为淘宝镜像\n\n3. 使用nrm管理registry地址\n\n    - 安装nrm\n\n        ```bash\n        npm install -g nrm\n        ```\n\n    - 查看镜像列表\n\n        ```bash\n        nrm ls\n        ```\n\n    - 切换镜像\n\n        ```bash\n        nrm use taobao\n        ```\n\n    - 在nrm添加自己的镜像地址\n\n        ```bash\n        nrm add r_name r_url\n        # r_name镜像名字  \n        # r_url镜像地址\n        ```\n\n    - 删除\n\n        ```bash\n        nrm del r_name\n        ```\n\n    - 测试镜像的相应速度\n\n        ```bash\n        nrm test r_name\n        ```\n\n## 第三方脚手架\n\n1. vue 3.0(Node最新版)\n\n    ```bash\n    npm install -g @vue/cli\n    # OR\n    yarn global add @vue/cli\n    ```\n\n2. vue2.0\n\n    Vue CLI >= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：\n\n    ```bash\n    npm install -g @vue/cli-init\n    ```\n\n    或者直接安装vue-cli脚手架\n\n    ```bash\n    cnpm install -g vue-cli\n    ```\n\n3. http-server\n\n    利用http-server，开启本地服务\n\n    ```bash\n    cnpm install -g http-server\n    ```\n\n    ```bash\n    http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）\n    Starting up http-server, serving ./\n    Available on:\n      http://127.0.0.1:8080\n      http://192.168.8.196:8080\n    Hit CTRL-C to stop the server\n    ```\n\n4. hexo-cli\n\n    ```bash\n    cnpm install -g hexo-cli\n    ```\n\n5. gitbook-cli\n\n    ```bash\n    cnpm install -g gitbook-cli\n    ```\n","source":"_posts/工具-Nodejs环境配置.md","raw":"---\ntitle: Node.js环境配置\ncategories:\n  - 工具\n  - NodeJs\ntags:\n  - NodeJs\n  - npm\n  - nvm\n  - yarn\ndate: 2019-03-31 11:58:35\n---\n\n简单的说 Node.js 就是运行在服务端的 JavaScript。\n\nNode.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n\nNode.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n\n## Node.js版本管理\n\n1. 手动安装nvm\n\n    ```bash\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n    ```\n\n    ```bash\n    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash\n    ```\n\n    运行以上任一命令将下载一个脚本并运行它。\n    该脚本会将nvm存储库克隆到`~/.nvm`,并尝试将以下代码段中的源代码行添加到正确的配置文件（`~/.bash_profile`, `~/.zshrc`, `~/.profile`, 或 `~/.bashrc`）\n\n    ```bash\n    export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n    ```\n\n2. 修改nvm默认镜像源\n\n    用国内镜像快速安装node,把环境变量 NVM_NODEJS_ORG_MIRROR加入到正确的配置文件（`~/.bash_profile`,`~/.zshrc`, `~/.profile`, 或 `~/.bashrc`）\n\n    ```bash\n    export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n    ```\n\n3. nvm命令\n\n    ```bash\n    nvm version # 查看当前的版本\n    nvm ls-remote # 列出所有可以安装的node版本号\n\n    nvm install stable # 安装最新稳定版本\n    nvm install  <version> # 安装指定版本号的node\n    nvm use <version> # 切换使用指定的版本node\n\n    nvm ls  # 列出所有已经安装的node版本\n    nvm current # 当前node版本\n\n    nvm alias default <version>  # 指定默认的node版本\n    nvm alias <name> <version> # 给不同的版本号添加别名\n    nvm unalias <name> ## 删除已定义的别名\n\n    nvm uninstall <version> 卸载指定的版本\n    ```\n\n## Node.js包管理\n\n1. 安装包管理工具: npm、cnpm、yarn\n\n    ```bash\n    npm -g install npm@next  # npm升级\n    npm install -g cnpm --registry=https://registry.npm.taobao.org  # cnpm安装\n    npm install -g yarn  # yarn安装\n    ```\n\n2. 查看已安装的所有全局包\n\n    ```bash\n    npm list -g --depth=0\n\n    cnpm list -g --depth=0\n\n    yarn global list\n    ```\n\n3. 安装包\n\n    ```bash\n    npm install -g <package>\n\n    cnpm install -g <package>\n\n    yarn global add <package>\n    ```\n\n4. 卸载包\n\n    ```bash\n    npm uninstall -g <package>\n\n    cnpm uninstall -g <package>\n\n    yarn global remove <package>\n    ```\n\n5. 更新包\n\n    ```bash\n    npm update <package>\n    ```\n\n6. 更新本地包\n\n    ```bash\n    npm upgrade --save\n    yarn upgrade\n    ```\n\n7. 其他一些常用的命令\n\n    ```bash\n    npm config get registry  # 查看npm当前镜像源\n\n    npm config set registry https://registry.npm.taobao.org/  # 设置npm镜像源为淘宝镜像\n\n    yarn config get registry  # 查看yarn当前镜像源\n\n    yarn config set registry https://registry.npm.taobao.org/  # 设置yarn镜像源为淘宝镜像\n    ```\n\n## Node.js镜像管理\n\n1. 直接编辑npm的配置文件\n\n    ```bash\n    npm config edit\n    ```\n\n    直接修改registry的地址\n\n    ```bash\n    sass_binary_site=https://npm.taobao.org/mirrors/node-sass/\n    phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/\n    electron_mirror=https://npm.taobao.org/mirrors/electron/\n    registry=https://registry.npm.taobao.org\n    ```\n\n2. 用代码更改npm的配置文件\n\n    ```bash\n    npm config set registry http://registry.npm.taobao.org\n    ```\n\n    这段代码即将镜像改为淘宝镜像\n\n3. 使用nrm管理registry地址\n\n    - 安装nrm\n\n        ```bash\n        npm install -g nrm\n        ```\n\n    - 查看镜像列表\n\n        ```bash\n        nrm ls\n        ```\n\n    - 切换镜像\n\n        ```bash\n        nrm use taobao\n        ```\n\n    - 在nrm添加自己的镜像地址\n\n        ```bash\n        nrm add r_name r_url\n        # r_name镜像名字  \n        # r_url镜像地址\n        ```\n\n    - 删除\n\n        ```bash\n        nrm del r_name\n        ```\n\n    - 测试镜像的相应速度\n\n        ```bash\n        nrm test r_name\n        ```\n\n## 第三方脚手架\n\n1. vue 3.0(Node最新版)\n\n    ```bash\n    npm install -g @vue/cli\n    # OR\n    yarn global add @vue/cli\n    ```\n\n2. vue2.0\n\n    Vue CLI >= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：\n\n    ```bash\n    npm install -g @vue/cli-init\n    ```\n\n    或者直接安装vue-cli脚手架\n\n    ```bash\n    cnpm install -g vue-cli\n    ```\n\n3. http-server\n\n    利用http-server，开启本地服务\n\n    ```bash\n    cnpm install -g http-server\n    ```\n\n    ```bash\n    http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）\n    Starting up http-server, serving ./\n    Available on:\n      http://127.0.0.1:8080\n      http://192.168.8.196:8080\n    Hit CTRL-C to stop the server\n    ```\n\n4. hexo-cli\n\n    ```bash\n    cnpm install -g hexo-cli\n    ```\n\n5. gitbook-cli\n\n    ```bash\n    cnpm install -g gitbook-cli\n    ```\n","slug":"工具-Nodejs环境配置","published":1,"updated":"2021-01-25T02:56:48.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud40032jjlncvoy5dgr","content":"<p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>\n<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p>\n<p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>\n<h2 id=\"Node-js版本管理\"><a href=\"#Node-js版本管理\" class=\"headerlink\" title=\"Node.js版本管理\"></a>Node.js版本管理</h2><ol>\n<li><p>手动安装nvm</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash<br></code></pre></div></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash<br></code></pre></div></td></tr></table></figure>\n<p> 运行以上任一命令将下载一个脚本并运行它。<br> 该脚本会将nvm存储库克隆到<code>~/.nvm</code>,并尝试将以下代码段中的源代码行添加到正确的配置文件（<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> NVM_DIR=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$([ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span><br>[ -s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \\. <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NVM_DIR</span>/nvm.sh&quot;</span> <span class=\"hljs-comment\"># This loads nvm</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>修改nvm默认镜像源</p>\n<p> 用国内镜像快速安装node,把环境变量 NVM_NODEJS_ORG_MIRROR加入到正确的配置文件（<code>~/.bash_profile</code>,<code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node<br></code></pre></div></td></tr></table></figure></li>\n<li><p>nvm命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nvm version <span class=\"hljs-comment\"># 查看当前的版本</span><br>nvm ls-remote <span class=\"hljs-comment\"># 列出所有可以安装的node版本号</span><br><br>nvm install stable <span class=\"hljs-comment\"># 安装最新稳定版本</span><br>nvm install  &lt;version&gt; <span class=\"hljs-comment\"># 安装指定版本号的node</span><br>nvm use &lt;version&gt; <span class=\"hljs-comment\"># 切换使用指定的版本node</span><br><br>nvm ls  <span class=\"hljs-comment\"># 列出所有已经安装的node版本</span><br>nvm current <span class=\"hljs-comment\"># 当前node版本</span><br><br>nvm <span class=\"hljs-built_in\">alias</span> default &lt;version&gt;  <span class=\"hljs-comment\"># 指定默认的node版本</span><br>nvm <span class=\"hljs-built_in\">alias</span> &lt;name&gt; &lt;version&gt; <span class=\"hljs-comment\"># 给不同的版本号添加别名</span><br>nvm <span class=\"hljs-built_in\">unalias</span> &lt;name&gt; <span class=\"hljs-comment\">## 删除已定义的别名</span><br><br>nvm uninstall &lt;version&gt; 卸载指定的版本<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"Node-js包管理\"><a href=\"#Node-js包管理\" class=\"headerlink\" title=\"Node.js包管理\"></a>Node.js包管理</h2></li>\n<li><p>安装包管理工具: npm、cnpm、yarn</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm -g install npm@next  <span class=\"hljs-comment\"># npm升级</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org  <span class=\"hljs-comment\"># cnpm安装</span><br>npm install -g yarn  <span class=\"hljs-comment\"># yarn安装</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>查看已安装的所有全局包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm list -g --depth=0<br><br>cnpm list -g --depth=0<br><br>yarn global list<br></code></pre></div></td></tr></table></figure></li>\n<li><p>安装包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm install -g &lt;package&gt;<br><br>cnpm install -g &lt;package&gt;<br><br>yarn global add &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>卸载包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm uninstall -g &lt;package&gt;<br><br>cnpm uninstall -g &lt;package&gt;<br><br>yarn global remove &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>更新包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm update &lt;package&gt;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>更新本地包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm upgrade --save<br>yarn upgrade<br></code></pre></div></td></tr></table></figure></li>\n<li><p>其他一些常用的命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm config get registry  <span class=\"hljs-comment\"># 查看npm当前镜像源</span><br><br>npm config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org/  <span class=\"hljs-comment\"># 设置npm镜像源为淘宝镜像</span><br><br>yarn config get registry  <span class=\"hljs-comment\"># 查看yarn当前镜像源</span><br><br>yarn config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org/  <span class=\"hljs-comment\"># 设置yarn镜像源为淘宝镜像</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"Node-js镜像管理\"><a href=\"#Node-js镜像管理\" class=\"headerlink\" title=\"Node.js镜像管理\"></a>Node.js镜像管理</h2></li>\n<li><p>直接编辑npm的配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm config edit<br></code></pre></div></td></tr></table></figure>\n<p> 直接修改registry的地址</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/<br>phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/<br>electron_mirror=https://npm.taobao.org/mirrors/electron/<br>registry=https://registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure></li>\n<li><p>用代码更改npm的配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm config <span class=\"hljs-built_in\">set</span> registry http://registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure>\n<p> 这段代码即将镜像改为淘宝镜像</p>\n</li>\n<li><p>使用nrm管理registry地址</p>\n<ul>\n<li><p>安装nrm</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm install -g nrm<br></code></pre></div></td></tr></table></figure></li>\n<li><p>查看镜像列表</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nrm ls<br></code></pre></div></td></tr></table></figure></li>\n<li><p>切换镜像</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nrm use taobao<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在nrm添加自己的镜像地址</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nrm add r_name r_url<br><span class=\"hljs-comment\"># r_name镜像名字  </span><br><span class=\"hljs-comment\"># r_url镜像地址</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>删除</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nrm del r_name<br></code></pre></div></td></tr></table></figure></li>\n<li><p>测试镜像的相应速度</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">nrm <span class=\"hljs-built_in\">test</span> r_name<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"第三方脚手架\"><a href=\"#第三方脚手架\" class=\"headerlink\" title=\"第三方脚手架\"></a>第三方脚手架</h2></li>\n</ul>\n</li>\n<li><p>vue 3.0(Node最新版)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm install -g @vue/cli<br><span class=\"hljs-comment\"># OR</span><br>yarn global add @vue/cli<br></code></pre></div></td></tr></table></figure></li>\n<li><p>vue2.0</p>\n<p> Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm install -g @vue/cli-init<br></code></pre></div></td></tr></table></figure>\n<p> 或者直接安装vue-cli脚手架</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">cnpm install -g vue-cli<br></code></pre></div></td></tr></table></figure></li>\n<li><p>http-server</p>\n<p> 利用http-server，开启本地服务</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">cnpm install -g http-server<br></code></pre></div></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）<br>Starting up http-server, serving ./<br>Available on:<br>  http://127.0.0.1:8080<br>  http://192.168.8.196:8080<br>Hit CTRL-C to stop the server<br></code></pre></div></td></tr></table></figure></li>\n<li><p>hexo-cli</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">cnpm install -g hexo-cli<br></code></pre></div></td></tr></table></figure></li>\n<li><p>gitbook-cli</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">cnpm install -g gitbook-cli<br></code></pre></div></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>\n<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p>\n<p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>\n<h2 id=\"Node-js版本管理\"><a href=\"#Node-js版本管理\" class=\"headerlink\" title=\"Node.js版本管理\"></a>Node.js版本管理</h2><ol>\n<li><p>手动安装nvm</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash<br></code></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash<br></code></pre></td></tr></table></figure>\n<p> 运行以上任一命令将下载一个脚本并运行它。<br> 该脚本会将nvm存储库克隆到<code>~/.nvm</code>,并尝试将以下代码段中的源代码行添加到正确的配置文件（<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> NVM_DIR=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$([ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span><br>[ -s <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \\. <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NVM_DIR</span>/nvm.sh&quot;</span> <span class=\"hljs-comment\"># This loads nvm</span><br></code></pre></td></tr></table></figure></li>\n<li><p>修改nvm默认镜像源</p>\n<p> 用国内镜像快速安装node,把环境变量 NVM_NODEJS_ORG_MIRROR加入到正确的配置文件（<code>~/.bash_profile</code>,<code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node<br></code></pre></td></tr></table></figure></li>\n<li><p>nvm命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nvm version <span class=\"hljs-comment\"># 查看当前的版本</span><br>nvm ls-remote <span class=\"hljs-comment\"># 列出所有可以安装的node版本号</span><br><br>nvm install stable <span class=\"hljs-comment\"># 安装最新稳定版本</span><br>nvm install  &lt;version&gt; <span class=\"hljs-comment\"># 安装指定版本号的node</span><br>nvm use &lt;version&gt; <span class=\"hljs-comment\"># 切换使用指定的版本node</span><br><br>nvm ls  <span class=\"hljs-comment\"># 列出所有已经安装的node版本</span><br>nvm current <span class=\"hljs-comment\"># 当前node版本</span><br><br>nvm <span class=\"hljs-built_in\">alias</span> default &lt;version&gt;  <span class=\"hljs-comment\"># 指定默认的node版本</span><br>nvm <span class=\"hljs-built_in\">alias</span> &lt;name&gt; &lt;version&gt; <span class=\"hljs-comment\"># 给不同的版本号添加别名</span><br>nvm <span class=\"hljs-built_in\">unalias</span> &lt;name&gt; <span class=\"hljs-comment\">## 删除已定义的别名</span><br><br>nvm uninstall &lt;version&gt; 卸载指定的版本<br></code></pre></td></tr></table></figure>\n<h2 id=\"Node-js包管理\"><a href=\"#Node-js包管理\" class=\"headerlink\" title=\"Node.js包管理\"></a>Node.js包管理</h2></li>\n<li><p>安装包管理工具: npm、cnpm、yarn</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm -g install npm@next  <span class=\"hljs-comment\"># npm升级</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org  <span class=\"hljs-comment\"># cnpm安装</span><br>npm install -g yarn  <span class=\"hljs-comment\"># yarn安装</span><br></code></pre></td></tr></table></figure></li>\n<li><p>查看已安装的所有全局包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm list -g --depth=0<br><br>cnpm list -g --depth=0<br><br>yarn global list<br></code></pre></td></tr></table></figure></li>\n<li><p>安装包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g &lt;package&gt;<br><br>cnpm install -g &lt;package&gt;<br><br>yarn global add &lt;package&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>卸载包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm uninstall -g &lt;package&gt;<br><br>cnpm uninstall -g &lt;package&gt;<br><br>yarn global remove &lt;package&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>更新包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm update &lt;package&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>更新本地包</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm upgrade --save<br>yarn upgrade<br></code></pre></td></tr></table></figure></li>\n<li><p>其他一些常用的命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm config get registry  <span class=\"hljs-comment\"># 查看npm当前镜像源</span><br><br>npm config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org/  <span class=\"hljs-comment\"># 设置npm镜像源为淘宝镜像</span><br><br>yarn config get registry  <span class=\"hljs-comment\"># 查看yarn当前镜像源</span><br><br>yarn config <span class=\"hljs-built_in\">set</span> registry https://registry.npm.taobao.org/  <span class=\"hljs-comment\"># 设置yarn镜像源为淘宝镜像</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Node-js镜像管理\"><a href=\"#Node-js镜像管理\" class=\"headerlink\" title=\"Node.js镜像管理\"></a>Node.js镜像管理</h2></li>\n<li><p>直接编辑npm的配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm config edit<br></code></pre></td></tr></table></figure>\n<p> 直接修改registry的地址</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/<br>phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/<br>electron_mirror=https://npm.taobao.org/mirrors/electron/<br>registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li>\n<li><p>用代码更改npm的配置文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm config <span class=\"hljs-built_in\">set</span> registry http://registry.npm.taobao.org<br></code></pre></td></tr></table></figure>\n<p> 这段代码即将镜像改为淘宝镜像</p>\n</li>\n<li><p>使用nrm管理registry地址</p>\n<ul>\n<li><p>安装nrm</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g nrm<br></code></pre></td></tr></table></figure></li>\n<li><p>查看镜像列表</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nrm ls<br></code></pre></td></tr></table></figure></li>\n<li><p>切换镜像</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nrm use taobao<br></code></pre></td></tr></table></figure></li>\n<li><p>在nrm添加自己的镜像地址</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nrm add r_name r_url<br><span class=\"hljs-comment\"># r_name镜像名字  </span><br><span class=\"hljs-comment\"># r_url镜像地址</span><br></code></pre></td></tr></table></figure></li>\n<li><p>删除</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nrm del r_name<br></code></pre></td></tr></table></figure></li>\n<li><p>测试镜像的相应速度</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">nrm <span class=\"hljs-built_in\">test</span> r_name<br></code></pre></td></tr></table></figure>\n<h2 id=\"第三方脚手架\"><a href=\"#第三方脚手架\" class=\"headerlink\" title=\"第三方脚手架\"></a>第三方脚手架</h2></li>\n</ul>\n</li>\n<li><p>vue 3.0(Node最新版)</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g @vue/cli<br><span class=\"hljs-comment\"># OR</span><br>yarn global add @vue/cli<br></code></pre></td></tr></table></figure></li>\n<li><p>vue2.0</p>\n<p> Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g @vue/cli-init<br></code></pre></td></tr></table></figure>\n<p> 或者直接安装vue-cli脚手架</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">cnpm install -g vue-cli<br></code></pre></td></tr></table></figure></li>\n<li><p>http-server</p>\n<p> 利用http-server，开启本地服务</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">cnpm install -g http-server<br></code></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）<br>Starting up http-server, serving ./<br>Available on:<br>  http://127.0.0.1:8080<br>  http://192.168.8.196:8080<br>Hit CTRL-C to stop the server<br></code></pre></td></tr></table></figure></li>\n<li><p>hexo-cli</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure></li>\n<li><p>gitbook-cli</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">cnpm install -g gitbook-cli<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"python环境配置","date":"2020-04-10T16:00:27.000Z","_content":"\n本篇文章将介绍如何在本地搭建Python开发环境。\n\nPython可应用于多平台包括 Linux 和 Mac OS X。\n\n你可以通过终端窗口输入 \"python\" 命令来查看本地是否已经安装Python以及Python的安装版本。\n\n## Python环境配置\n\n```bash\n# ubuntu\nsudo apt-get install python3-pip\nsudo apt-get install python-pip\n\n# windows\npython3 -m pip install --upgrade pip --force-reinstall\npython2 -m pip install --upgrade pip --force-reinstall\n\n# mac\nbrew install python  # 这一步安装了python3和pip3\nbrew install python@2 # 这一步安装了python2和pip2\n\n# ipython2\npip install ipython \n# ipython3\npip3 install ipython \n```\n\n## pip镜像源\n\n### 镜像源\n\n- 清华：`https://pypi.tuna.tsinghua.edu.cn/simple`\n- 阿里云：`http://mirrors.aliyun.com/pypi/simple/`\n- 中国科技大学 `https://pypi.mirrors.ustc.edu.cn/simple/`\n- 华中理工大学：`http://pypi.hustunique.com/`\n- 山东理工大学：`http://pypi.sdutlinux.org/`\n- 豆瓣：`http://pypi.douban.com/simple/`\n\n### 文件修改\n\n#### Linux/Mac\n\n修改 `~/.pip/pip.conf` (没有就创建一个文件夹及文件。文件夹要加`.`，表示是隐藏文件夹)\n\n> 内容如下\n\n```bash\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n#### windows\n\n直接在 user 目录中创建一个 pip 目录，如：`C:\\Users\\xx\\pip`，新建文件`pip.ini`。内容同上。\n\n### 终端修改\n\n```bash\npip config set global.index-url http://mirrors.aliyun.com/pypi/simple/ # 终端使用命令设置pip镜像\npip install pip -U  # 升级pip包管理工具\n```\n\n## 虚拟环境之pipenv\n\n1. 安装`pipenv`\n\n   ```bash\n    pip install pipenv\n   ```\n\n2. 使用`pipenv`创建虚拟环境\n  \n   ```bash\n    # 尽量在一个项目目录下创建虚拟环境\n    pip install\n   ```\n\n3. 激活虚拟环境\n  \n   ```bash\n    # 在创建虚拟环境的位置运行命令\n    pipenv shell\n   ```\n\n4. 修改虚拟环境的镜像源\n  \n    打开虚拟环境下的配置文件: `Pipfile`\n   \n    ```bash\n        [[source]]\n        name = \"pypi\"\n        url = \"https://pypi.org/simple\"\n        verify_ssl = true\n    \n        [dev-packages]\n    \n        [packages]\n    \n        [requires]\n        python_version = \"3.7\"\n    ```\n    修改url为国内镜像源:\n   \n   - 清华: `https://pypi.tuna.tsinghua.edu.cn/simple`\n   \n   - 阿里云: `http://mirrors.aliyun.com/pypi/simple/`\n   \n   - 中国科技大学: `https://pypi.mirrors.ustc.edu.cn/simple/`\n   \n   - 华中理工大学: `http://pypi.hustunique.com/`\n   \n   - 山东理工大学: `http://pypi.sdutlinux.org/`\n   \n   - 豆瓣: `http://pypi.douban.com/simple/`\n\n5. 在虚拟环境安装第三方包\n  \n   ```bash\n    pipenv install django\n   ```\n\n6. 使用pipenv卸载第三方模块\n  \n   ```bash\n    pipev uninstall django\n   ```\n\n7. 查看依赖\n  \n   ```bash\n    pipenv graph\n   ```\n\n8. 将安装的模块打包到一个文件内\n  \n   ```bash\n    pip freeze > requirements.txt\n   ```\n\n9. 将一个文件内的第三方扩展安装到虚拟环境中\n  \n   ```bash\n    pip install -r requirements.txt\n   ```\n\n10. 退出虚拟环境\n  \n    ```bash\n    exit\n    ```\n\n11. 删除虚拟环境\n  \n    ```bash\n    pipenv --rm\n    ```\n\n12. 不激活虚拟环境，直接运行命令\n  \n    ```bash\n    pipenv run django-amdin start project djangodemo\n    ```\n\n## 虚拟环境之virtualenv\n\n1. 安装`virtualenv`\n  \n   ```bash\n    pip install virtualenv # 虚拟环境\n    pip install virtualenvwrappern # mac/linux系统\n    pip install virtualenvwrapper-win # windows系统\n   ```\n\n2. 创建虚拟环境\n  \n   ```bash\n    mkvirtualenv django\n   ```\n\n3. 激活虚拟环境\n  \n   ```bash\n    # 在创建虚拟环境后会默认激活\n    workon django  # 激活django虚拟环境\n    workon  # 查看所有虚拟环境\n   ```\n\n4. 修改虚拟环境的镜像源\n  \n   ```bash\n   pip config set global.index-url http://mirrors.aliyun.com/pypi/simple/ # 终端使用命令设置pip镜像\n   pip install pip -U  # 升级pip包管理工具\n   ```\n\n5. 在虚拟环境安装第三方包\n  \n   ```bash\n    pip install django  # 先激活虚拟环境\n   ```\n\n6. 卸载第三方模块\n  \n   ```bash\n    pip uninstall django # 先激活虚拟环境\n   ```\n\n7. 将安装的模块打包到一个文件内\n  \n   ```bash\n    pip freeze > requirements.txt\n   ```\n\n8. 将一个文件内的第三方扩展安装到虚拟环境中\n  \n   ```bash\n    pip install -r requirements.txt\n   ```\n\n9. 退出虚拟环境\n  \n    ```bash\n    exit\n    ```\n\n10. 删除虚拟环境\n  \n    ```bash\n    rmvirtualenv django\n    ```\n\n## 虚拟环境之conda\n\n### 1. Anaconda简介\n\n- Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。\n\n- Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。\n\n- Anaconda 镜像使用帮助\n  - Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows, 包含了众多流行的科学计算、数据分析的 Python 包。\n\n  - Anaconda 安装包可以到 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/) 下载。\n\n- Miniconda 镜像使用帮助\n  - Miniconda 是一个 Anaconda 的轻量级替代，默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包。\n\n  - Miniconda 安装包可以到 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/](https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/) 下载。\n\n### 2. Anaconda安装\n\n- Windows安装\n\n  - 点击安装文件`Anaconda3-2019.07-Windows-x86_64.exe`,选择安装路径,如`D:\\python\\Anaconda`,然后一直next即可。\n\n  - **配置环境变量:** 将安装的根路径,如`D:\\python\\Anaconda`和`scripts`文件夹路径`D:\\python\\Anaconda\\scripts`添加到电脑环境变量之中\n\n- Linux/Mac安装\n\n  - 将安装文件`Anaconda3-2019.07-Linux-x86_64.sh`移动到用户家目录\n\n  - 在用户家目录,打开终端,执行`./Anaconda3-2019.07-Linux-x86_64.sh`,然后输入yes,一路回车即可。\n\n  - **配置环境变量:**\n\n    - 打开.bashrc 文件,在终端执行如下命令:\n\n      ```bash\n      vi ~/.bashrc\n      ```\n\n    - 输入G，跳转到文件末尾,在文件最后一行新增环境变量\n\n      ```bash\n      export PATH=~/anaconda3/bin:$PATH\n      ```\n\n    - 修改完成,先按esc键进入命令行模式，然后按`shift+：`进入末行模式，输入`wq`,保存退出\n\n    - 在终端执行如下命令,使其立即生效\n\n      ```bash\n      source ~/.bashrc\n      ```\n\n    > 注意：在Mac中，修改文件`.bash_profile`,其余和Linux操作一样\n\n### 3. 修改Anaconda镜像源\n\n- Anaconda默认访问国外服务器，网速较慢，故需要修改默认镜像\n\n- TUNA 还提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，查看完整列表）的镜像，各系统都可以通过修改用户目录下的 .condarc 文件:\n\n  ```bash\n  channels:\n    - defaults\n  show_channel_urls: true\n  channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\n  default_channels:\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n  custom_channels:\n    conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  ```\n\n  即可添加 Anaconda Python 免费仓库。Windows 用户无法直接创建名为 `.condarc` 的文件，可先执行 `conda config --set show_channel_urls yes` 生成该文件之后再修改。\n\n### 4. Anconda基本使用\n\n#### 管理环境\n\n- 检查conda版本\n\n  ```bash\n  conda --version\n  ```\n\n- 升级当前版本conda\n\n  ```bash\n  conda update conda\n  ```\n\n- 管理（虚拟）环境\n\n  ```bash\n  # 创建一个名为python37的环境，指定Python版本是3.7（不用管是3.7.x，conda会为我们自动寻找3.7.x中的最新版本）\n  conda create --name python37 python=3.7\n  \n  # 安装好后，使用activate激活某个环境\n  activate python37 # for Windows\n  source activate python37 # for Linux & Mac\n  # 激活后，会发现terminal输入的地方多了python37的字样\n  \n  # 如果想返回默认的python环境，运行\n  deactivate python37 # for Windows\n  source deactivate python37 # for Linux & Mac\n  \n  # 删除一个已有的环境\n  conda remove --name python37 --all\n  \n  # 另外，我们可以使用conda命令替换source命令用来激活和关闭环境\n  conda activate python37\n  conda deactivate\n  \n  # 取消每次打开终端，默认激活bash环境\n  conda config --set auto_activate_base false\n  \n  # 重新激活每次打开终端，默认进入base环境\n  conda config --set auto_activate_base true\n  \n  ```\n\n  新的开发环境会被默认安装在你conda目录下的envs文件目录下。\n\n  如果我们没有指定安装python的版本，conda会安装我们最初安装conda时所装的那个版本的python。\n\n- 列出所有环境\n\n  ```bash\n  conda info -e\n  conda info –-envs\n  ```\n\n  > 注意:conda会对当前活动的环境追加星号标记。\n\n  ```bash\n  macdeMacBook-Pro:~ mac$ conda info -e\n  # conda environments:\n  #\n  base                  *  /Users/mac/anaconda3\n  myenv                    /Users/mac/anaconda3/envs/myenv\n  py3                      /Users/mac/anaconda3/envs/py3\n  ```\n\n- 复制一个环境\n  通过克隆来复制一个环境。这儿将通过克隆py3来创建一个称为py32的副本。\n\n  ```bash\n  conda create -n py32 --clone py3\n  ```\n\n  通过\n\n  ```bash\n  conda info –-envs\n  ```\n\n  来检查环境。\n\n- 重命名env\n\n  conda是没有重命名环境的功能的, 要实现这个基本需求, 只能通过愚蠢的克隆-删除的过程。\n\n  切记不要直接mv移动环境的文件夹来重命名, 会导致一系列无法想象的错误的发生!\n\n  ```bash\n  conda create --name newname --clone oldname      # 克隆环境\n  conda remove --name oldname --all      # 彻底删除旧环境\n  ```\n\n- 分享环境\n\n  如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。\n\n  **一个分享环境的快速方法就是给ta一个你的环境的.yml文件。**\n\n  首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件\n\n  ```bash\n  conda env export > environment.yml\n  ```\n\n  小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境\n\n  ```bash\n  conda env create -f environment.yml\n  ```\n\n#### 管理包\n\n- conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。\n\n- **不建议使用easy_install安装包**。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装\n\n- 使用合适的源可以提升安装的速度\n\n- 查看已安装包\n\n  ```bash\n  conda list\n  ```\n\n  使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。\n\n- 向指定环境安装包\n  我们在指定环境中安装requests包，有两种方式:\n\n  - 直接通过-n选项指定安装环境的名字\n\n    ```bash\n    conda install --name py3 requests\n    ```\n\n    > 提示：你必须告诉conda你要安装环境的名字（-n py3）否则它将会被安装到当前环境中。\n\n  - 激活py3环境，再使用conda install命令。\n\n    ```bash\n    conda activate py3\n    conda install requests\n    ```\n\n- 通过pip命令\n\n  对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。\n\n  可以上pypi网站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。\n\n  我们激活想要放置程序的python环境，然后通过pip安装一个叫“PyMysql”的包。\n\n  ```bash\n  # Linux, OS X\n  source activate bunnies\n  \n  # Windows\n  activate py3\n  # 安装\n  pip install pymysql\n  ```\n\n  pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。\n\n  > 小技巧：在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。\n\n#### 移除包、环境、或者conda\n\n- 移除包\n\n  假设你决定不再使用包pymysql。你可以在py3环境中移除它。\n\n  ```bash\n  conda remove -n py3 pymysql\n  ```\n\n- 移除环境\n\n  我们不再需要snakes环境了，可以输入以下命令：\n\n  ```bash\n  conda remove -n myenv --all\n  ```\n\n- 删除conda\n\n  - Linux/OS X：\n\n    移除Anaconda 或 Miniconda 安装文件夹\n\n    ```bash\n    rm -rf ~/miniconda\n    # OR\n    rm -rf ~/anaconda\n    ```\n\n  - Windows：\n    去控制面板，点击“添加或删除程序”，选择“Python2.7/3.6（Anaconda）”或“Python2.7/3.6（Miniconda）”并点击删除程序。","source":"_posts/工具-Python环境配置.md","raw":"---\ntitle: python环境配置\ndate: 2020-04-11 00:00:27\ncategories:\n  - 工具\n  - python\ntags:\n  - virtualenv\n  - pipenv\n  - conda\n  - 虚拟环境\n  - pip\n---\n\n本篇文章将介绍如何在本地搭建Python开发环境。\n\nPython可应用于多平台包括 Linux 和 Mac OS X。\n\n你可以通过终端窗口输入 \"python\" 命令来查看本地是否已经安装Python以及Python的安装版本。\n\n## Python环境配置\n\n```bash\n# ubuntu\nsudo apt-get install python3-pip\nsudo apt-get install python-pip\n\n# windows\npython3 -m pip install --upgrade pip --force-reinstall\npython2 -m pip install --upgrade pip --force-reinstall\n\n# mac\nbrew install python  # 这一步安装了python3和pip3\nbrew install python@2 # 这一步安装了python2和pip2\n\n# ipython2\npip install ipython \n# ipython3\npip3 install ipython \n```\n\n## pip镜像源\n\n### 镜像源\n\n- 清华：`https://pypi.tuna.tsinghua.edu.cn/simple`\n- 阿里云：`http://mirrors.aliyun.com/pypi/simple/`\n- 中国科技大学 `https://pypi.mirrors.ustc.edu.cn/simple/`\n- 华中理工大学：`http://pypi.hustunique.com/`\n- 山东理工大学：`http://pypi.sdutlinux.org/`\n- 豆瓣：`http://pypi.douban.com/simple/`\n\n### 文件修改\n\n#### Linux/Mac\n\n修改 `~/.pip/pip.conf` (没有就创建一个文件夹及文件。文件夹要加`.`，表示是隐藏文件夹)\n\n> 内容如下\n\n```bash\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n\n#### windows\n\n直接在 user 目录中创建一个 pip 目录，如：`C:\\Users\\xx\\pip`，新建文件`pip.ini`。内容同上。\n\n### 终端修改\n\n```bash\npip config set global.index-url http://mirrors.aliyun.com/pypi/simple/ # 终端使用命令设置pip镜像\npip install pip -U  # 升级pip包管理工具\n```\n\n## 虚拟环境之pipenv\n\n1. 安装`pipenv`\n\n   ```bash\n    pip install pipenv\n   ```\n\n2. 使用`pipenv`创建虚拟环境\n  \n   ```bash\n    # 尽量在一个项目目录下创建虚拟环境\n    pip install\n   ```\n\n3. 激活虚拟环境\n  \n   ```bash\n    # 在创建虚拟环境的位置运行命令\n    pipenv shell\n   ```\n\n4. 修改虚拟环境的镜像源\n  \n    打开虚拟环境下的配置文件: `Pipfile`\n   \n    ```bash\n        [[source]]\n        name = \"pypi\"\n        url = \"https://pypi.org/simple\"\n        verify_ssl = true\n    \n        [dev-packages]\n    \n        [packages]\n    \n        [requires]\n        python_version = \"3.7\"\n    ```\n    修改url为国内镜像源:\n   \n   - 清华: `https://pypi.tuna.tsinghua.edu.cn/simple`\n   \n   - 阿里云: `http://mirrors.aliyun.com/pypi/simple/`\n   \n   - 中国科技大学: `https://pypi.mirrors.ustc.edu.cn/simple/`\n   \n   - 华中理工大学: `http://pypi.hustunique.com/`\n   \n   - 山东理工大学: `http://pypi.sdutlinux.org/`\n   \n   - 豆瓣: `http://pypi.douban.com/simple/`\n\n5. 在虚拟环境安装第三方包\n  \n   ```bash\n    pipenv install django\n   ```\n\n6. 使用pipenv卸载第三方模块\n  \n   ```bash\n    pipev uninstall django\n   ```\n\n7. 查看依赖\n  \n   ```bash\n    pipenv graph\n   ```\n\n8. 将安装的模块打包到一个文件内\n  \n   ```bash\n    pip freeze > requirements.txt\n   ```\n\n9. 将一个文件内的第三方扩展安装到虚拟环境中\n  \n   ```bash\n    pip install -r requirements.txt\n   ```\n\n10. 退出虚拟环境\n  \n    ```bash\n    exit\n    ```\n\n11. 删除虚拟环境\n  \n    ```bash\n    pipenv --rm\n    ```\n\n12. 不激活虚拟环境，直接运行命令\n  \n    ```bash\n    pipenv run django-amdin start project djangodemo\n    ```\n\n## 虚拟环境之virtualenv\n\n1. 安装`virtualenv`\n  \n   ```bash\n    pip install virtualenv # 虚拟环境\n    pip install virtualenvwrappern # mac/linux系统\n    pip install virtualenvwrapper-win # windows系统\n   ```\n\n2. 创建虚拟环境\n  \n   ```bash\n    mkvirtualenv django\n   ```\n\n3. 激活虚拟环境\n  \n   ```bash\n    # 在创建虚拟环境后会默认激活\n    workon django  # 激活django虚拟环境\n    workon  # 查看所有虚拟环境\n   ```\n\n4. 修改虚拟环境的镜像源\n  \n   ```bash\n   pip config set global.index-url http://mirrors.aliyun.com/pypi/simple/ # 终端使用命令设置pip镜像\n   pip install pip -U  # 升级pip包管理工具\n   ```\n\n5. 在虚拟环境安装第三方包\n  \n   ```bash\n    pip install django  # 先激活虚拟环境\n   ```\n\n6. 卸载第三方模块\n  \n   ```bash\n    pip uninstall django # 先激活虚拟环境\n   ```\n\n7. 将安装的模块打包到一个文件内\n  \n   ```bash\n    pip freeze > requirements.txt\n   ```\n\n8. 将一个文件内的第三方扩展安装到虚拟环境中\n  \n   ```bash\n    pip install -r requirements.txt\n   ```\n\n9. 退出虚拟环境\n  \n    ```bash\n    exit\n    ```\n\n10. 删除虚拟环境\n  \n    ```bash\n    rmvirtualenv django\n    ```\n\n## 虚拟环境之conda\n\n### 1. Anaconda简介\n\n- Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。\n\n- Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。\n\n- Anaconda 镜像使用帮助\n  - Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows, 包含了众多流行的科学计算、数据分析的 Python 包。\n\n  - Anaconda 安装包可以到 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/](https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/) 下载。\n\n- Miniconda 镜像使用帮助\n  - Miniconda 是一个 Anaconda 的轻量级替代，默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包。\n\n  - Miniconda 安装包可以到 [https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/](https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/) 下载。\n\n### 2. Anaconda安装\n\n- Windows安装\n\n  - 点击安装文件`Anaconda3-2019.07-Windows-x86_64.exe`,选择安装路径,如`D:\\python\\Anaconda`,然后一直next即可。\n\n  - **配置环境变量:** 将安装的根路径,如`D:\\python\\Anaconda`和`scripts`文件夹路径`D:\\python\\Anaconda\\scripts`添加到电脑环境变量之中\n\n- Linux/Mac安装\n\n  - 将安装文件`Anaconda3-2019.07-Linux-x86_64.sh`移动到用户家目录\n\n  - 在用户家目录,打开终端,执行`./Anaconda3-2019.07-Linux-x86_64.sh`,然后输入yes,一路回车即可。\n\n  - **配置环境变量:**\n\n    - 打开.bashrc 文件,在终端执行如下命令:\n\n      ```bash\n      vi ~/.bashrc\n      ```\n\n    - 输入G，跳转到文件末尾,在文件最后一行新增环境变量\n\n      ```bash\n      export PATH=~/anaconda3/bin:$PATH\n      ```\n\n    - 修改完成,先按esc键进入命令行模式，然后按`shift+：`进入末行模式，输入`wq`,保存退出\n\n    - 在终端执行如下命令,使其立即生效\n\n      ```bash\n      source ~/.bashrc\n      ```\n\n    > 注意：在Mac中，修改文件`.bash_profile`,其余和Linux操作一样\n\n### 3. 修改Anaconda镜像源\n\n- Anaconda默认访问国外服务器，网速较慢，故需要修改默认镜像\n\n- TUNA 还提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，查看完整列表）的镜像，各系统都可以通过修改用户目录下的 .condarc 文件:\n\n  ```bash\n  channels:\n    - defaults\n  show_channel_urls: true\n  channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda\n  default_channels:\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro\n    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\n  custom_channels:\n    conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n    simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n  ```\n\n  即可添加 Anaconda Python 免费仓库。Windows 用户无法直接创建名为 `.condarc` 的文件，可先执行 `conda config --set show_channel_urls yes` 生成该文件之后再修改。\n\n### 4. Anconda基本使用\n\n#### 管理环境\n\n- 检查conda版本\n\n  ```bash\n  conda --version\n  ```\n\n- 升级当前版本conda\n\n  ```bash\n  conda update conda\n  ```\n\n- 管理（虚拟）环境\n\n  ```bash\n  # 创建一个名为python37的环境，指定Python版本是3.7（不用管是3.7.x，conda会为我们自动寻找3.7.x中的最新版本）\n  conda create --name python37 python=3.7\n  \n  # 安装好后，使用activate激活某个环境\n  activate python37 # for Windows\n  source activate python37 # for Linux & Mac\n  # 激活后，会发现terminal输入的地方多了python37的字样\n  \n  # 如果想返回默认的python环境，运行\n  deactivate python37 # for Windows\n  source deactivate python37 # for Linux & Mac\n  \n  # 删除一个已有的环境\n  conda remove --name python37 --all\n  \n  # 另外，我们可以使用conda命令替换source命令用来激活和关闭环境\n  conda activate python37\n  conda deactivate\n  \n  # 取消每次打开终端，默认激活bash环境\n  conda config --set auto_activate_base false\n  \n  # 重新激活每次打开终端，默认进入base环境\n  conda config --set auto_activate_base true\n  \n  ```\n\n  新的开发环境会被默认安装在你conda目录下的envs文件目录下。\n\n  如果我们没有指定安装python的版本，conda会安装我们最初安装conda时所装的那个版本的python。\n\n- 列出所有环境\n\n  ```bash\n  conda info -e\n  conda info –-envs\n  ```\n\n  > 注意:conda会对当前活动的环境追加星号标记。\n\n  ```bash\n  macdeMacBook-Pro:~ mac$ conda info -e\n  # conda environments:\n  #\n  base                  *  /Users/mac/anaconda3\n  myenv                    /Users/mac/anaconda3/envs/myenv\n  py3                      /Users/mac/anaconda3/envs/py3\n  ```\n\n- 复制一个环境\n  通过克隆来复制一个环境。这儿将通过克隆py3来创建一个称为py32的副本。\n\n  ```bash\n  conda create -n py32 --clone py3\n  ```\n\n  通过\n\n  ```bash\n  conda info –-envs\n  ```\n\n  来检查环境。\n\n- 重命名env\n\n  conda是没有重命名环境的功能的, 要实现这个基本需求, 只能通过愚蠢的克隆-删除的过程。\n\n  切记不要直接mv移动环境的文件夹来重命名, 会导致一系列无法想象的错误的发生!\n\n  ```bash\n  conda create --name newname --clone oldname      # 克隆环境\n  conda remove --name oldname --all      # 彻底删除旧环境\n  ```\n\n- 分享环境\n\n  如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。\n\n  **一个分享环境的快速方法就是给ta一个你的环境的.yml文件。**\n\n  首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件\n\n  ```bash\n  conda env export > environment.yml\n  ```\n\n  小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境\n\n  ```bash\n  conda env create -f environment.yml\n  ```\n\n#### 管理包\n\n- conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。\n\n- **不建议使用easy_install安装包**。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装\n\n- 使用合适的源可以提升安装的速度\n\n- 查看已安装包\n\n  ```bash\n  conda list\n  ```\n\n  使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。\n\n- 向指定环境安装包\n  我们在指定环境中安装requests包，有两种方式:\n\n  - 直接通过-n选项指定安装环境的名字\n\n    ```bash\n    conda install --name py3 requests\n    ```\n\n    > 提示：你必须告诉conda你要安装环境的名字（-n py3）否则它将会被安装到当前环境中。\n\n  - 激活py3环境，再使用conda install命令。\n\n    ```bash\n    conda activate py3\n    conda install requests\n    ```\n\n- 通过pip命令\n\n  对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。\n\n  可以上pypi网站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。\n\n  我们激活想要放置程序的python环境，然后通过pip安装一个叫“PyMysql”的包。\n\n  ```bash\n  # Linux, OS X\n  source activate bunnies\n  \n  # Windows\n  activate py3\n  # 安装\n  pip install pymysql\n  ```\n\n  pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。\n\n  > 小技巧：在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。\n\n#### 移除包、环境、或者conda\n\n- 移除包\n\n  假设你决定不再使用包pymysql。你可以在py3环境中移除它。\n\n  ```bash\n  conda remove -n py3 pymysql\n  ```\n\n- 移除环境\n\n  我们不再需要snakes环境了，可以输入以下命令：\n\n  ```bash\n  conda remove -n myenv --all\n  ```\n\n- 删除conda\n\n  - Linux/OS X：\n\n    移除Anaconda 或 Miniconda 安装文件夹\n\n    ```bash\n    rm -rf ~/miniconda\n    # OR\n    rm -rf ~/anaconda\n    ```\n\n  - Windows：\n    去控制面板，点击“添加或删除程序”，选择“Python2.7/3.6（Anaconda）”或“Python2.7/3.6（Miniconda）”并点击删除程序。","slug":"工具-Python环境配置","published":1,"updated":"2021-01-25T02:57:01.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud50036jjln0tnge65d","content":"<p>本篇文章将介绍如何在本地搭建Python开发环境。</p>\n<p>Python可应用于多平台包括 Linux 和 Mac OS X。</p>\n<p>你可以通过终端窗口输入 “python” 命令来查看本地是否已经安装Python以及Python的安装版本。</p>\n<h2 id=\"Python环境配置\"><a href=\"#Python环境配置\" class=\"headerlink\" title=\"Python环境配置\"></a>Python环境配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># ubuntu</span><br>sudo apt-get install python3-pip<br>sudo apt-get install python-pip<br><br><span class=\"hljs-comment\"># windows</span><br>python3 -m pip install --upgrade pip --force-reinstall<br>python2 -m pip install --upgrade pip --force-reinstall<br><br><span class=\"hljs-comment\"># mac</span><br>brew install python  <span class=\"hljs-comment\"># 这一步安装了python3和pip3</span><br>brew install python@2 <span class=\"hljs-comment\"># 这一步安装了python2和pip2</span><br><br><span class=\"hljs-comment\"># ipython2</span><br>pip install ipython <br><span class=\"hljs-comment\"># ipython3</span><br>pip3 install ipython <br></code></pre></div></td></tr></table></figure>\n<h2 id=\"pip镜像源\"><a href=\"#pip镜像源\" class=\"headerlink\" title=\"pip镜像源\"></a>pip镜像源</h2><h3 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h3><ul>\n<li>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></li>\n<li>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code></li>\n<li>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></li>\n<li>华中理工大学：<code>http://pypi.hustunique.com/</code></li>\n<li>山东理工大学：<code>http://pypi.sdutlinux.org/</code></li>\n<li>豆瓣：<code>http://pypi.douban.com/simple/</code></li>\n</ul>\n<h3 id=\"文件修改\"><a href=\"#文件修改\" class=\"headerlink\" title=\"文件修改\"></a>文件修改</h3><h4 id=\"Linux-Mac\"><a href=\"#Linux-Mac\" class=\"headerlink\" title=\"Linux/Mac\"></a>Linux/Mac</h4><p>修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加<code>.</code>，表示是隐藏文件夹)</p>\n<blockquote>\n<p>内容如下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br>trusted-host=mirrors.aliyun.com<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h4><p>直接在 user 目录中创建一个 pip 目录，如：<code>C:\\Users\\xx\\pip</code>，新建文件<code>pip.ini</code>。内容同上。</p>\n<h3 id=\"终端修改\"><a href=\"#终端修改\" class=\"headerlink\" title=\"终端修改\"></a>终端修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip config <span class=\"hljs-built_in\">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class=\"hljs-comment\"># 终端使用命令设置pip镜像</span><br>pip install pip -U  <span class=\"hljs-comment\"># 升级pip包管理工具</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"虚拟环境之pipenv\"><a href=\"#虚拟环境之pipenv\" class=\"headerlink\" title=\"虚拟环境之pipenv\"></a>虚拟环境之pipenv</h2><ol>\n<li><p>安装<code>pipenv</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install pipenv<br></code></pre></div></td></tr></table></figure></li>\n<li><p>使用<code>pipenv</code>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 尽量在一个项目目录下创建虚拟环境</span><br>pip install<br></code></pre></div></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 在创建虚拟环境的位置运行命令</span><br>pipenv shell<br></code></pre></div></td></tr></table></figure></li>\n<li><p>修改虚拟环境的镜像源</p>\n<p> 打开虚拟环境下的配置文件: <code>Pipfile</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">[[<span class=\"hljs-built_in\">source</span>]]<br>name = <span class=\"hljs-string\">&quot;pypi&quot;</span><br>url = <span class=\"hljs-string\">&quot;https://pypi.org/simple&quot;</span><br>verify_ssl = <span class=\"hljs-literal\">true</span><br>    <br>[dev-packages]<br>    <br>[packages]<br>    <br>[requires]<br>python_version = <span class=\"hljs-string\">&quot;3.7&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p> 修改url为国内镜像源:</p>\n<ul>\n<li><p>清华: <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p>\n</li>\n<li><p>阿里云: <code>http://mirrors.aliyun.com/pypi/simple/</code></p>\n</li>\n<li><p>中国科技大学: <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p>\n</li>\n<li><p>华中理工大学: <code>http://pypi.hustunique.com/</code></p>\n</li>\n<li><p>山东理工大学: <code>http://pypi.sdutlinux.org/</code></p>\n</li>\n<li><p>豆瓣: <code>http://pypi.douban.com/simple/</code></p>\n</li>\n</ul>\n</li>\n<li><p>在虚拟环境安装第三方包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pipenv install django<br></code></pre></div></td></tr></table></figure></li>\n<li><p>使用pipenv卸载第三方模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pipev uninstall django<br></code></pre></div></td></tr></table></figure></li>\n<li><p>查看依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pipenv graph<br></code></pre></div></td></tr></table></figure></li>\n<li><p>将安装的模块打包到一个文件内</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip freeze &gt; requirements.txt<br></code></pre></div></td></tr></table></figure></li>\n<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install -r requirements.txt<br></code></pre></div></td></tr></table></figure></li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">exit</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pipenv --rm<br></code></pre></div></td></tr></table></figure></li>\n<li><p>不激活虚拟环境，直接运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pipenv run django-amdin start project djangodemo<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"虚拟环境之virtualenv\"><a href=\"#虚拟环境之virtualenv\" class=\"headerlink\" title=\"虚拟环境之virtualenv\"></a>虚拟环境之virtualenv</h2></li>\n<li><p>安装<code>virtualenv</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install virtualenv <span class=\"hljs-comment\"># 虚拟环境</span><br>pip install virtualenvwrappern <span class=\"hljs-comment\"># mac/linux系统</span><br>pip install virtualenvwrapper-win <span class=\"hljs-comment\"># windows系统</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mkvirtualenv django<br></code></pre></div></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 在创建虚拟环境后会默认激活</span><br>workon django  <span class=\"hljs-comment\"># 激活django虚拟环境</span><br>workon  <span class=\"hljs-comment\"># 查看所有虚拟环境</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>修改虚拟环境的镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip config <span class=\"hljs-built_in\">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class=\"hljs-comment\"># 终端使用命令设置pip镜像</span><br>pip install pip -U  <span class=\"hljs-comment\"># 升级pip包管理工具</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>在虚拟环境安装第三方包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install django  <span class=\"hljs-comment\"># 先激活虚拟环境</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>卸载第三方模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip uninstall django <span class=\"hljs-comment\"># 先激活虚拟环境</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>将安装的模块打包到一个文件内</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip freeze &gt; requirements.txt<br></code></pre></div></td></tr></table></figure></li>\n<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install -r requirements.txt<br></code></pre></div></td></tr></table></figure></li>\n<li><p>退出虚拟环境</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">exit</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">rmvirtualenv django<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"虚拟环境之conda\"><a href=\"#虚拟环境之conda\" class=\"headerlink\" title=\"虚拟环境之conda\"></a>虚拟环境之conda</h2></li>\n</ol>\n<h3 id=\"1-Anaconda简介\"><a href=\"#1-Anaconda简介\" class=\"headerlink\" title=\"1. Anaconda简介\"></a>1. Anaconda简介</h3><ul>\n<li><p>Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。</p>\n</li>\n<li><p>Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。</p>\n</li>\n<li><p>Anaconda 镜像使用帮助</p>\n<ul>\n<li><p>Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows, 包含了众多流行的科学计算、数据分析的 Python 包。</p>\n</li>\n<li><p>Anaconda 安装包可以到 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载。</p>\n</li>\n</ul>\n</li>\n<li><p>Miniconda 镜像使用帮助</p>\n<ul>\n<li><p>Miniconda 是一个 Anaconda 的轻量级替代，默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包。</p>\n</li>\n<li><p>Miniconda 安装包可以到 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a> 下载。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-Anaconda安装\"><a href=\"#2-Anaconda安装\" class=\"headerlink\" title=\"2. Anaconda安装\"></a>2. Anaconda安装</h3><ul>\n<li><p>Windows安装</p>\n<ul>\n<li><p>点击安装文件<code>Anaconda3-2019.07-Windows-x86_64.exe</code>,选择安装路径,如<code>D:\\python\\Anaconda</code>,然后一直next即可。</p>\n</li>\n<li><p><strong>配置环境变量:</strong> 将安装的根路径,如<code>D:\\python\\Anaconda</code>和<code>scripts</code>文件夹路径<code>D:\\python\\Anaconda\\scripts</code>添加到电脑环境变量之中</p>\n</li>\n</ul>\n</li>\n<li><p>Linux/Mac安装</p>\n<ul>\n<li><p>将安装文件<code>Anaconda3-2019.07-Linux-x86_64.sh</code>移动到用户家目录</p>\n</li>\n<li><p>在用户家目录,打开终端,执行<code>./Anaconda3-2019.07-Linux-x86_64.sh</code>,然后输入yes,一路回车即可。</p>\n</li>\n<li><p><strong>配置环境变量:</strong></p>\n<ul>\n<li><p>打开.bashrc 文件,在终端执行如下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">vi ~/.bashrc<br></code></pre></div></td></tr></table></figure></li>\n<li><p>输入G，跳转到文件末尾,在文件最后一行新增环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> PATH=~/anaconda3/bin:<span class=\"hljs-variable\">$PATH</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>修改完成,先按esc键进入命令行模式，然后按<code>shift+：</code>进入末行模式，输入<code>wq</code>,保存退出</p>\n</li>\n<li><p>在终端执行如下命令,使其立即生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意：在Mac中，修改文件<code>.bash_profile</code>,其余和Linux操作一样</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-修改Anaconda镜像源\"><a href=\"#3-修改Anaconda镜像源\" class=\"headerlink\" title=\"3. 修改Anaconda镜像源\"></a>3. 修改Anaconda镜像源</h3><ul>\n<li><p>Anaconda默认访问国外服务器，网速较慢，故需要修改默认镜像</p>\n</li>\n<li><p>TUNA 还提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，查看完整列表）的镜像，各系统都可以通过修改用户目录下的 .condarc 文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">channels:<br>  - defaults<br>show_channel_urls: <span class=\"hljs-literal\">true</span><br>channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br></code></pre></div></td></tr></table></figure>\n<p>即可添加 Anaconda Python 免费仓库。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，可先执行 <code>conda config --set show_channel_urls yes</code> 生成该文件之后再修改。</p>\n</li>\n</ul>\n<h3 id=\"4-Anconda基本使用\"><a href=\"#4-Anconda基本使用\" class=\"headerlink\" title=\"4. Anconda基本使用\"></a>4. Anconda基本使用</h3><h4 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h4><ul>\n<li><p>检查conda版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda --version<br></code></pre></div></td></tr></table></figure></li>\n<li><p>升级当前版本conda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda update conda<br></code></pre></div></td></tr></table></figure></li>\n<li><p>管理（虚拟）环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 创建一个名为python37的环境，指定Python版本是3.7（不用管是3.7.x，conda会为我们自动寻找3.7.x中的最新版本）</span><br>conda create --name python37 python=3.7<br><br><span class=\"hljs-comment\"># 安装好后，使用activate激活某个环境</span><br>activate python37 <span class=\"hljs-comment\"># for Windows</span><br><span class=\"hljs-built_in\">source</span> activate python37 <span class=\"hljs-comment\"># for Linux &amp; Mac</span><br><span class=\"hljs-comment\"># 激活后，会发现terminal输入的地方多了python37的字样</span><br><br><span class=\"hljs-comment\"># 如果想返回默认的python环境，运行</span><br>deactivate python37 <span class=\"hljs-comment\"># for Windows</span><br><span class=\"hljs-built_in\">source</span> deactivate python37 <span class=\"hljs-comment\"># for Linux &amp; Mac</span><br><br><span class=\"hljs-comment\"># 删除一个已有的环境</span><br>conda remove --name python37 --all<br><br><span class=\"hljs-comment\"># 另外，我们可以使用conda命令替换source命令用来激活和关闭环境</span><br>conda activate python37<br>conda deactivate<br><br><span class=\"hljs-comment\"># 取消每次打开终端，默认激活bash环境</span><br>conda config --<span class=\"hljs-built_in\">set</span> auto_activate_base <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># 重新激活每次打开终端，默认进入base环境</span><br>conda config --<span class=\"hljs-built_in\">set</span> auto_activate_base <span class=\"hljs-literal\">true</span><br><br></code></pre></div></td></tr></table></figure>\n<p>新的开发环境会被默认安装在你conda目录下的envs文件目录下。</p>\n<p>如果我们没有指定安装python的版本，conda会安装我们最初安装conda时所装的那个版本的python。</p>\n</li>\n<li><p>列出所有环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda info -e<br>conda info –-envs<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意:conda会对当前活动的环境追加星号标记。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">macdeMacBook-Pro:~ mac$ conda info -e<br><span class=\"hljs-comment\"># conda environments:</span><br><span class=\"hljs-comment\">#</span><br>base                  *  /Users/mac/anaconda3<br>myenv                    /Users/mac/anaconda3/envs/myenv<br>py3                      /Users/mac/anaconda3/envs/py3<br></code></pre></div></td></tr></table></figure></li>\n<li><p>复制一个环境<br>通过克隆来复制一个环境。这儿将通过克隆py3来创建一个称为py32的副本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda create -n py32 --<span class=\"hljs-built_in\">clone</span> py3<br></code></pre></div></td></tr></table></figure>\n<p>通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda info –-envs<br></code></pre></div></td></tr></table></figure>\n<p>来检查环境。</p>\n</li>\n<li><p>重命名env</p>\n<p>conda是没有重命名环境的功能的, 要实现这个基本需求, 只能通过愚蠢的克隆-删除的过程。</p>\n<p>切记不要直接mv移动环境的文件夹来重命名, 会导致一系列无法想象的错误的发生!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda create --name newname --<span class=\"hljs-built_in\">clone</span> oldname      <span class=\"hljs-comment\"># 克隆环境</span><br>conda remove --name oldname --all      <span class=\"hljs-comment\"># 彻底删除旧环境</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>分享环境</p>\n<p>如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。</p>\n<p><strong>一个分享环境的快速方法就是给ta一个你的环境的.yml文件。</strong></p>\n<p>首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda env <span class=\"hljs-built_in\">export</span> &gt; environment.yml<br></code></pre></div></td></tr></table></figure>\n<p>小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda env create -f environment.yml<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"管理包\"><a href=\"#管理包\" class=\"headerlink\" title=\"管理包\"></a>管理包</h4></li>\n<li><p>conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。</p>\n</li>\n<li><p><strong>不建议使用easy_install安装包</strong>。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装</p>\n</li>\n<li><p>使用合适的源可以提升安装的速度</p>\n</li>\n<li><p>查看已安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda list<br></code></pre></div></td></tr></table></figure>\n<p>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。</p>\n</li>\n<li><p>向指定环境安装包<br>我们在指定环境中安装requests包，有两种方式:</p>\n<ul>\n<li><p>直接通过-n选项指定安装环境的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda install --name py3 requests<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>提示：你必须告诉conda你要安装环境的名字（-n py3）否则它将会被安装到当前环境中。</p>\n</blockquote>\n</li>\n<li><p>激活py3环境，再使用conda install命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda activate py3<br>conda install requests<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过pip命令</p>\n<p>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。</p>\n<p>可以上pypi网站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。</p>\n<p>我们激活想要放置程序的python环境，然后通过pip安装一个叫“PyMysql”的包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Linux, OS X</span><br><span class=\"hljs-built_in\">source</span> activate bunnies<br><br><span class=\"hljs-comment\"># Windows</span><br>activate py3<br><span class=\"hljs-comment\"># 安装</span><br>pip install pymysql<br></code></pre></div></td></tr></table></figure>\n<p>pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。</p>\n<blockquote>\n<p>小技巧：在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"移除包、环境、或者conda\"><a href=\"#移除包、环境、或者conda\" class=\"headerlink\" title=\"移除包、环境、或者conda\"></a>移除包、环境、或者conda</h4><ul>\n<li><p>移除包</p>\n<p>假设你决定不再使用包pymysql。你可以在py3环境中移除它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda remove -n py3 pymysql<br></code></pre></div></td></tr></table></figure></li>\n<li><p>移除环境</p>\n<p>我们不再需要snakes环境了，可以输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">conda remove -n myenv --all<br></code></pre></div></td></tr></table></figure></li>\n<li><p>删除conda</p>\n<ul>\n<li><p>Linux/OS X：</p>\n<p>移除Anaconda 或 Miniconda 安装文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">rm -rf ~/miniconda<br><span class=\"hljs-comment\"># OR</span><br>rm -rf ~/anaconda<br></code></pre></div></td></tr></table></figure></li>\n<li><p>Windows：<br>去控制面板，点击“添加或删除程序”，选择“Python2.7/3.6（Anaconda）”或“Python2.7/3.6（Miniconda）”并点击删除程序。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇文章将介绍如何在本地搭建Python开发环境。</p>\n<p>Python可应用于多平台包括 Linux 和 Mac OS X。</p>\n<p>你可以通过终端窗口输入 “python” 命令来查看本地是否已经安装Python以及Python的安装版本。</p>\n<h2 id=\"Python环境配置\"><a href=\"#Python环境配置\" class=\"headerlink\" title=\"Python环境配置\"></a>Python环境配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># ubuntu</span><br>sudo apt-get install python3-pip<br>sudo apt-get install python-pip<br><br><span class=\"hljs-comment\"># windows</span><br>python3 -m pip install --upgrade pip --force-reinstall<br>python2 -m pip install --upgrade pip --force-reinstall<br><br><span class=\"hljs-comment\"># mac</span><br>brew install python  <span class=\"hljs-comment\"># 这一步安装了python3和pip3</span><br>brew install python@2 <span class=\"hljs-comment\"># 这一步安装了python2和pip2</span><br><br><span class=\"hljs-comment\"># ipython2</span><br>pip install ipython <br><span class=\"hljs-comment\"># ipython3</span><br>pip3 install ipython <br></code></pre></td></tr></table></figure>\n<h2 id=\"pip镜像源\"><a href=\"#pip镜像源\" class=\"headerlink\" title=\"pip镜像源\"></a>pip镜像源</h2><h3 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h3><ul>\n<li>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></li>\n<li>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code></li>\n<li>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></li>\n<li>华中理工大学：<code>http://pypi.hustunique.com/</code></li>\n<li>山东理工大学：<code>http://pypi.sdutlinux.org/</code></li>\n<li>豆瓣：<code>http://pypi.douban.com/simple/</code></li>\n</ul>\n<h3 id=\"文件修改\"><a href=\"#文件修改\" class=\"headerlink\" title=\"文件修改\"></a>文件修改</h3><h4 id=\"Linux-Mac\"><a href=\"#Linux-Mac\" class=\"headerlink\" title=\"Linux/Mac\"></a>Linux/Mac</h4><p>修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加<code>.</code>，表示是隐藏文件夹)</p>\n<blockquote>\n<p>内容如下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br>trusted-host=mirrors.aliyun.com<br></code></pre></td></tr></table></figure>\n<h4 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h4><p>直接在 user 目录中创建一个 pip 目录，如：<code>C:\\Users\\xx\\pip</code>，新建文件<code>pip.ini</code>。内容同上。</p>\n<h3 id=\"终端修改\"><a href=\"#终端修改\" class=\"headerlink\" title=\"终端修改\"></a>终端修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip config <span class=\"hljs-built_in\">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class=\"hljs-comment\"># 终端使用命令设置pip镜像</span><br>pip install pip -U  <span class=\"hljs-comment\"># 升级pip包管理工具</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"虚拟环境之pipenv\"><a href=\"#虚拟环境之pipenv\" class=\"headerlink\" title=\"虚拟环境之pipenv\"></a>虚拟环境之pipenv</h2><ol>\n<li><p>安装<code>pipenv</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install pipenv<br></code></pre></td></tr></table></figure></li>\n<li><p>使用<code>pipenv</code>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 尽量在一个项目目录下创建虚拟环境</span><br>pip install<br></code></pre></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 在创建虚拟环境的位置运行命令</span><br>pipenv shell<br></code></pre></td></tr></table></figure></li>\n<li><p>修改虚拟环境的镜像源</p>\n<p> 打开虚拟环境下的配置文件: <code>Pipfile</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">[[<span class=\"hljs-built_in\">source</span>]]<br>name = <span class=\"hljs-string\">&quot;pypi&quot;</span><br>url = <span class=\"hljs-string\">&quot;https://pypi.org/simple&quot;</span><br>verify_ssl = <span class=\"hljs-literal\">true</span><br>    <br>[dev-packages]<br>    <br>[packages]<br>    <br>[requires]<br>python_version = <span class=\"hljs-string\">&quot;3.7&quot;</span><br></code></pre></td></tr></table></figure>\n<p> 修改url为国内镜像源:</p>\n<ul>\n<li><p>清华: <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p>\n</li>\n<li><p>阿里云: <code>http://mirrors.aliyun.com/pypi/simple/</code></p>\n</li>\n<li><p>中国科技大学: <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p>\n</li>\n<li><p>华中理工大学: <code>http://pypi.hustunique.com/</code></p>\n</li>\n<li><p>山东理工大学: <code>http://pypi.sdutlinux.org/</code></p>\n</li>\n<li><p>豆瓣: <code>http://pypi.douban.com/simple/</code></p>\n</li>\n</ul>\n</li>\n<li><p>在虚拟环境安装第三方包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pipenv install django<br></code></pre></td></tr></table></figure></li>\n<li><p>使用pipenv卸载第三方模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pipev uninstall django<br></code></pre></td></tr></table></figure></li>\n<li><p>查看依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pipenv graph<br></code></pre></td></tr></table></figure></li>\n<li><p>将安装的模块打包到一个文件内</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure></li>\n<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install -r requirements.txt<br></code></pre></td></tr></table></figure></li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">exit</span><br></code></pre></td></tr></table></figure></li>\n<li><p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pipenv --rm<br></code></pre></td></tr></table></figure></li>\n<li><p>不激活虚拟环境，直接运行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pipenv run django-amdin start project djangodemo<br></code></pre></td></tr></table></figure>\n<h2 id=\"虚拟环境之virtualenv\"><a href=\"#虚拟环境之virtualenv\" class=\"headerlink\" title=\"虚拟环境之virtualenv\"></a>虚拟环境之virtualenv</h2></li>\n<li><p>安装<code>virtualenv</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install virtualenv <span class=\"hljs-comment\"># 虚拟环境</span><br>pip install virtualenvwrappern <span class=\"hljs-comment\"># mac/linux系统</span><br>pip install virtualenvwrapper-win <span class=\"hljs-comment\"># windows系统</span><br></code></pre></td></tr></table></figure></li>\n<li><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mkvirtualenv django<br></code></pre></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 在创建虚拟环境后会默认激活</span><br>workon django  <span class=\"hljs-comment\"># 激活django虚拟环境</span><br>workon  <span class=\"hljs-comment\"># 查看所有虚拟环境</span><br></code></pre></td></tr></table></figure></li>\n<li><p>修改虚拟环境的镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip config <span class=\"hljs-built_in\">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class=\"hljs-comment\"># 终端使用命令设置pip镜像</span><br>pip install pip -U  <span class=\"hljs-comment\"># 升级pip包管理工具</span><br></code></pre></td></tr></table></figure></li>\n<li><p>在虚拟环境安装第三方包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install django  <span class=\"hljs-comment\"># 先激活虚拟环境</span><br></code></pre></td></tr></table></figure></li>\n<li><p>卸载第三方模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip uninstall django <span class=\"hljs-comment\"># 先激活虚拟环境</span><br></code></pre></td></tr></table></figure></li>\n<li><p>将安装的模块打包到一个文件内</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure></li>\n<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install -r requirements.txt<br></code></pre></td></tr></table></figure></li>\n<li><p>退出虚拟环境</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">exit</span><br></code></pre></td></tr></table></figure></li>\n<li><p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">rmvirtualenv django<br></code></pre></td></tr></table></figure>\n<h2 id=\"虚拟环境之conda\"><a href=\"#虚拟环境之conda\" class=\"headerlink\" title=\"虚拟环境之conda\"></a>虚拟环境之conda</h2></li>\n</ol>\n<h3 id=\"1-Anaconda简介\"><a href=\"#1-Anaconda简介\" class=\"headerlink\" title=\"1. Anaconda简介\"></a>1. Anaconda简介</h3><ul>\n<li><p>Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。</p>\n</li>\n<li><p>Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。</p>\n</li>\n<li><p>Anaconda 镜像使用帮助</p>\n<ul>\n<li><p>Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows, 包含了众多流行的科学计算、数据分析的 Python 包。</p>\n</li>\n<li><p>Anaconda 安装包可以到 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载。</p>\n</li>\n</ul>\n</li>\n<li><p>Miniconda 镜像使用帮助</p>\n<ul>\n<li><p>Miniconda 是一个 Anaconda 的轻量级替代，默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包。</p>\n</li>\n<li><p>Miniconda 安装包可以到 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a> 下载。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-Anaconda安装\"><a href=\"#2-Anaconda安装\" class=\"headerlink\" title=\"2. Anaconda安装\"></a>2. Anaconda安装</h3><ul>\n<li><p>Windows安装</p>\n<ul>\n<li><p>点击安装文件<code>Anaconda3-2019.07-Windows-x86_64.exe</code>,选择安装路径,如<code>D:\\python\\Anaconda</code>,然后一直next即可。</p>\n</li>\n<li><p><strong>配置环境变量:</strong> 将安装的根路径,如<code>D:\\python\\Anaconda</code>和<code>scripts</code>文件夹路径<code>D:\\python\\Anaconda\\scripts</code>添加到电脑环境变量之中</p>\n</li>\n</ul>\n</li>\n<li><p>Linux/Mac安装</p>\n<ul>\n<li><p>将安装文件<code>Anaconda3-2019.07-Linux-x86_64.sh</code>移动到用户家目录</p>\n</li>\n<li><p>在用户家目录,打开终端,执行<code>./Anaconda3-2019.07-Linux-x86_64.sh</code>,然后输入yes,一路回车即可。</p>\n</li>\n<li><p><strong>配置环境变量:</strong></p>\n<ul>\n<li><p>打开.bashrc 文件,在终端执行如下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vi ~/.bashrc<br></code></pre></td></tr></table></figure></li>\n<li><p>输入G，跳转到文件末尾,在文件最后一行新增环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> PATH=~/anaconda3/bin:<span class=\"hljs-variable\">$PATH</span><br></code></pre></td></tr></table></figure></li>\n<li><p>修改完成,先按esc键进入命令行模式，然后按<code>shift+：</code>进入末行模式，输入<code>wq</code>,保存退出</p>\n</li>\n<li><p>在终端执行如下命令,使其立即生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在Mac中，修改文件<code>.bash_profile</code>,其余和Linux操作一样</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-修改Anaconda镜像源\"><a href=\"#3-修改Anaconda镜像源\" class=\"headerlink\" title=\"3. 修改Anaconda镜像源\"></a>3. 修改Anaconda镜像源</h3><ul>\n<li><p>Anaconda默认访问国外服务器，网速较慢，故需要修改默认镜像</p>\n</li>\n<li><p>TUNA 还提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，查看完整列表）的镜像，各系统都可以通过修改用户目录下的 .condarc 文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">channels:<br>  - defaults<br>show_channel_urls: <span class=\"hljs-literal\">true</span><br>channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br></code></pre></td></tr></table></figure>\n<p>即可添加 Anaconda Python 免费仓库。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，可先执行 <code>conda config --set show_channel_urls yes</code> 生成该文件之后再修改。</p>\n</li>\n</ul>\n<h3 id=\"4-Anconda基本使用\"><a href=\"#4-Anconda基本使用\" class=\"headerlink\" title=\"4. Anconda基本使用\"></a>4. Anconda基本使用</h3><h4 id=\"管理环境\"><a href=\"#管理环境\" class=\"headerlink\" title=\"管理环境\"></a>管理环境</h4><ul>\n<li><p>检查conda版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda --version<br></code></pre></td></tr></table></figure></li>\n<li><p>升级当前版本conda</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda update conda<br></code></pre></td></tr></table></figure></li>\n<li><p>管理（虚拟）环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 创建一个名为python37的环境，指定Python版本是3.7（不用管是3.7.x，conda会为我们自动寻找3.7.x中的最新版本）</span><br>conda create --name python37 python=3.7<br><br><span class=\"hljs-comment\"># 安装好后，使用activate激活某个环境</span><br>activate python37 <span class=\"hljs-comment\"># for Windows</span><br><span class=\"hljs-built_in\">source</span> activate python37 <span class=\"hljs-comment\"># for Linux &amp; Mac</span><br><span class=\"hljs-comment\"># 激活后，会发现terminal输入的地方多了python37的字样</span><br><br><span class=\"hljs-comment\"># 如果想返回默认的python环境，运行</span><br>deactivate python37 <span class=\"hljs-comment\"># for Windows</span><br><span class=\"hljs-built_in\">source</span> deactivate python37 <span class=\"hljs-comment\"># for Linux &amp; Mac</span><br><br><span class=\"hljs-comment\"># 删除一个已有的环境</span><br>conda remove --name python37 --all<br><br><span class=\"hljs-comment\"># 另外，我们可以使用conda命令替换source命令用来激活和关闭环境</span><br>conda activate python37<br>conda deactivate<br><br><span class=\"hljs-comment\"># 取消每次打开终端，默认激活bash环境</span><br>conda config --<span class=\"hljs-built_in\">set</span> auto_activate_base <span class=\"hljs-literal\">false</span><br><br><span class=\"hljs-comment\"># 重新激活每次打开终端，默认进入base环境</span><br>conda config --<span class=\"hljs-built_in\">set</span> auto_activate_base <span class=\"hljs-literal\">true</span><br><br></code></pre></td></tr></table></figure>\n<p>新的开发环境会被默认安装在你conda目录下的envs文件目录下。</p>\n<p>如果我们没有指定安装python的版本，conda会安装我们最初安装conda时所装的那个版本的python。</p>\n</li>\n<li><p>列出所有环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda info -e<br>conda info –-envs<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:conda会对当前活动的环境追加星号标记。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">macdeMacBook-Pro:~ mac$ conda info -e<br><span class=\"hljs-comment\"># conda environments:</span><br><span class=\"hljs-comment\">#</span><br>base                  *  /Users/mac/anaconda3<br>myenv                    /Users/mac/anaconda3/envs/myenv<br>py3                      /Users/mac/anaconda3/envs/py3<br></code></pre></td></tr></table></figure></li>\n<li><p>复制一个环境<br>通过克隆来复制一个环境。这儿将通过克隆py3来创建一个称为py32的副本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda create -n py32 --<span class=\"hljs-built_in\">clone</span> py3<br></code></pre></td></tr></table></figure>\n<p>通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda info –-envs<br></code></pre></td></tr></table></figure>\n<p>来检查环境。</p>\n</li>\n<li><p>重命名env</p>\n<p>conda是没有重命名环境的功能的, 要实现这个基本需求, 只能通过愚蠢的克隆-删除的过程。</p>\n<p>切记不要直接mv移动环境的文件夹来重命名, 会导致一系列无法想象的错误的发生!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda create --name newname --<span class=\"hljs-built_in\">clone</span> oldname      <span class=\"hljs-comment\"># 克隆环境</span><br>conda remove --name oldname --all      <span class=\"hljs-comment\"># 彻底删除旧环境</span><br></code></pre></td></tr></table></figure></li>\n<li><p>分享环境</p>\n<p>如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。</p>\n<p><strong>一个分享环境的快速方法就是给ta一个你的环境的.yml文件。</strong></p>\n<p>首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda env <span class=\"hljs-built_in\">export</span> &gt; environment.yml<br></code></pre></td></tr></table></figure>\n<p>小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda env create -f environment.yml<br></code></pre></td></tr></table></figure>\n<h4 id=\"管理包\"><a href=\"#管理包\" class=\"headerlink\" title=\"管理包\"></a>管理包</h4></li>\n<li><p>conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。</p>\n</li>\n<li><p><strong>不建议使用easy_install安装包</strong>。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装</p>\n</li>\n<li><p>使用合适的源可以提升安装的速度</p>\n</li>\n<li><p>查看已安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda list<br></code></pre></td></tr></table></figure>\n<p>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。</p>\n</li>\n<li><p>向指定环境安装包<br>我们在指定环境中安装requests包，有两种方式:</p>\n<ul>\n<li><p>直接通过-n选项指定安装环境的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda install --name py3 requests<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>提示：你必须告诉conda你要安装环境的名字（-n py3）否则它将会被安装到当前环境中。</p>\n</blockquote>\n</li>\n<li><p>激活py3环境，再使用conda install命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda activate py3<br>conda install requests<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过pip命令</p>\n<p>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。</p>\n<p>可以上pypi网站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。</p>\n<p>我们激活想要放置程序的python环境，然后通过pip安装一个叫“PyMysql”的包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># Linux, OS X</span><br><span class=\"hljs-built_in\">source</span> activate bunnies<br><br><span class=\"hljs-comment\"># Windows</span><br>activate py3<br><span class=\"hljs-comment\"># 安装</span><br>pip install pymysql<br></code></pre></td></tr></table></figure>\n<p>pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。</p>\n<blockquote>\n<p>小技巧：在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"移除包、环境、或者conda\"><a href=\"#移除包、环境、或者conda\" class=\"headerlink\" title=\"移除包、环境、或者conda\"></a>移除包、环境、或者conda</h4><ul>\n<li><p>移除包</p>\n<p>假设你决定不再使用包pymysql。你可以在py3环境中移除它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda remove -n py3 pymysql<br></code></pre></td></tr></table></figure></li>\n<li><p>移除环境</p>\n<p>我们不再需要snakes环境了，可以输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">conda remove -n myenv --all<br></code></pre></td></tr></table></figure></li>\n<li><p>删除conda</p>\n<ul>\n<li><p>Linux/OS X：</p>\n<p>移除Anaconda 或 Miniconda 安装文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">rm -rf ~/miniconda<br><span class=\"hljs-comment\"># OR</span><br>rm -rf ~/anaconda<br></code></pre></td></tr></table></figure></li>\n<li><p>Windows：<br>去控制面板，点击“添加或删除程序”，选择“Python2.7/3.6（Anaconda）”或“Python2.7/3.6（Miniconda）”并点击删除程序。</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"win10 python2和python3共存问题","date":"2019-05-25T02:45:27.000Z","_content":"\n> **特别说明**，本文是在 **Windows64 位系统**下进行的，32 位系统请下载相应版本的安装包，安装方法类似。\n\n## 下载python安装包\n\n进入 python 官网，链接 [https://www.python.org/](https://www.python.org/)\n\n选择 Downloads--->Windows，点击进入就可以看到寻找想要的 python 版本\n\n![win10_download_py](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103726-win10_download_py%20.png)\n\n\n本文选择的是：\n\nPython3.5.2, 点击后面链接可直接下载，[https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe](https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe)\n\n![20190526103746-win10_download_py3](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103746-win10_download_py3%20.png)\n\nPython2.7.9, 点击后面链接可直接下载，[https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi](https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi)\n\n![20190526103737-win10_download_py2](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103737-win10_download_py2%20.png)\n\n## python3 安装\n\n> **说明:** 本文先安装 python3，然后安装 python2\n\n首先选择安装目录，本文安装路径为 D:\\Python\\python35，然后点击下载好的 python3 软件包进行安装，具体流程如下：\n\n1. 在下图红色标记的地方 Add Python3.5 to PATH 前勾选，可以直接将 python3 添加到系统环境变量，然后在 Customize installation 中自定义安装路径。\n  ![20190526104125-py3_安装_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104125-py3_安装_01%20.png)\n\n2. 直接 next 即可\n  ![20190526104133-py3_安装_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104133-py3_安装_02%20.png)\n\n3. 下图中 Advanced Options 中没有默认勾选的根据自己的需要进行勾选，黄色标记为 VS 2015 及其以后版本需要的，如果你以后打算在 VS 2015 中配置 python 环境请勾选此项，点击 Browse 选择安装目录，然后点击 Install 进行安装。\n![20190526104141-py3_安装_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104141-py3_安装_03%20.png)\n\n4. 等待如下安装过程\n![20190526104253-py3_安装_04](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104253-py3_安装_04%20.png)\n\n5. 安装成功\n![20190526104257-py3_安装_05](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104257-py3_安装_05%20.png)\n\n6. 点击关闭，查看 python3 安装情况，按 “Win + R” 快捷键，在打开的 “运行” 对话框中，输入 “cmd” 按回车，进入如下界面，输入 python 查看 python3 安装情况，显示 python 3.5.2 的版本信息，则安装成功，可以输入语句 print(1 + 1)进行测试。\n![20190526104443-py3_安装_06](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104443-py3_安装_06%20.png)\n\n## python2 安装\n\n1. 点击 python2 安装包，点击运行，next，选择安装目录，本文安装路径为 D:\\Python\\python27，然后 next\n![20190526104627-py2_安装_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104627-py2_安装_01%20.png)\n\n2. 下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用 python 命令没有关系，先点击 next 进行安装，后面专门解决。\n![20190526104634-py2_安装_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104634-py2_安装_02%20.png)\n![20190526104643-py2_安装_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104643-py2_安装_03%20.png)\n\n3. 点击 finish 完成安装。\n  至此，python2 和 python3 安装完毕。\n\n> 特别说明：此时运行 “cmd” 命令进入 DOS 命令提示框，输入 python 仍然显示 python3 版本。\n\n## 配置环境变量\n\n打开，控制面板 \\ 系统和安全 \\ 系统，选择高级系统设置，环境变量，选择 Path，点击编辑，新建，分别添加 D:\\Python\\python27 和 D:\\Python\\python27\\Scripts 到环境变量。\n\n> **注意：** python3 安装时可以选择自动添加到系统环境变量，如未选择，方法和 python2 添加过程相同。\n\n## 重命名 python.exe\n\n1. 找到 python2 和 python3 的安装目录，修改 python2.7.9 和 python3.5.2 中 python.exe 和 pythonw.exe 的名称为 python2.exe、pythonw2.exe 和 python3.exe、pythonw3.exe。\n\n2. 然后在运行 cmd 命令，输入 python2 即可运行 python2.7.9 版本\n  ![20190526104936-py2_test](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104936-py2_test%20.png)\n\n3. 输入 python3 即可运行 python3.5.2 版本\n  ![20190526104944-py3_test](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104944-py3_test%20.png)\n\n4. 至此，python2 和 python3 安装完毕。\n\n## pip2 和 pip3 设置\n\n1. Python 安装包需要用到包管理工具 pip，但是当同时安装 python2 和 python3 的时候，pip 只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的 pip，使得两个 python 版本的 pip 能够共存。\n  ![20190526105211-pip3安装](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105211-pip3安装%20.png)\n\n2. 在 DOS 命令框输入命令，python2-m pip install --upgrade pip --force-reinstall，显示重新安装成功。\n  ![20190526105206-pip2安装](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105206-pip2安装%20.png)\n\n3. 现在可以通过 pip2 -V 和 pip3-V 查看两个版本的 pip 信息，以后只需运行 pip2install XXX 和 pip3 install XXX 即可安装各自的 python 包。\n  ![20190526105218-pip安装包](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105218-pip安装包%20.png)\n\n4. 至此，pip2 和 pip3 修改成功。\n","source":"_posts/工具-win10 pyhton2和3共存.md","raw":"---\ntitle: win10 python2和python3共存问题\ncategories:\n  - 工具\n  - python\ntags:\n  - Windows\ndate: 2019-05-25 10:45:27\n---\n\n> **特别说明**，本文是在 **Windows64 位系统**下进行的，32 位系统请下载相应版本的安装包，安装方法类似。\n\n## 下载python安装包\n\n进入 python 官网，链接 [https://www.python.org/](https://www.python.org/)\n\n选择 Downloads--->Windows，点击进入就可以看到寻找想要的 python 版本\n\n![win10_download_py](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103726-win10_download_py%20.png)\n\n\n本文选择的是：\n\nPython3.5.2, 点击后面链接可直接下载，[https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe](https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe)\n\n![20190526103746-win10_download_py3](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103746-win10_download_py3%20.png)\n\nPython2.7.9, 点击后面链接可直接下载，[https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi](https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi)\n\n![20190526103737-win10_download_py2](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103737-win10_download_py2%20.png)\n\n## python3 安装\n\n> **说明:** 本文先安装 python3，然后安装 python2\n\n首先选择安装目录，本文安装路径为 D:\\Python\\python35，然后点击下载好的 python3 软件包进行安装，具体流程如下：\n\n1. 在下图红色标记的地方 Add Python3.5 to PATH 前勾选，可以直接将 python3 添加到系统环境变量，然后在 Customize installation 中自定义安装路径。\n  ![20190526104125-py3_安装_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104125-py3_安装_01%20.png)\n\n2. 直接 next 即可\n  ![20190526104133-py3_安装_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104133-py3_安装_02%20.png)\n\n3. 下图中 Advanced Options 中没有默认勾选的根据自己的需要进行勾选，黄色标记为 VS 2015 及其以后版本需要的，如果你以后打算在 VS 2015 中配置 python 环境请勾选此项，点击 Browse 选择安装目录，然后点击 Install 进行安装。\n![20190526104141-py3_安装_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104141-py3_安装_03%20.png)\n\n4. 等待如下安装过程\n![20190526104253-py3_安装_04](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104253-py3_安装_04%20.png)\n\n5. 安装成功\n![20190526104257-py3_安装_05](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104257-py3_安装_05%20.png)\n\n6. 点击关闭，查看 python3 安装情况，按 “Win + R” 快捷键，在打开的 “运行” 对话框中，输入 “cmd” 按回车，进入如下界面，输入 python 查看 python3 安装情况，显示 python 3.5.2 的版本信息，则安装成功，可以输入语句 print(1 + 1)进行测试。\n![20190526104443-py3_安装_06](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104443-py3_安装_06%20.png)\n\n## python2 安装\n\n1. 点击 python2 安装包，点击运行，next，选择安装目录，本文安装路径为 D:\\Python\\python27，然后 next\n![20190526104627-py2_安装_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104627-py2_安装_01%20.png)\n\n2. 下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用 python 命令没有关系，先点击 next 进行安装，后面专门解决。\n![20190526104634-py2_安装_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104634-py2_安装_02%20.png)\n![20190526104643-py2_安装_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104643-py2_安装_03%20.png)\n\n3. 点击 finish 完成安装。\n  至此，python2 和 python3 安装完毕。\n\n> 特别说明：此时运行 “cmd” 命令进入 DOS 命令提示框，输入 python 仍然显示 python3 版本。\n\n## 配置环境变量\n\n打开，控制面板 \\ 系统和安全 \\ 系统，选择高级系统设置，环境变量，选择 Path，点击编辑，新建，分别添加 D:\\Python\\python27 和 D:\\Python\\python27\\Scripts 到环境变量。\n\n> **注意：** python3 安装时可以选择自动添加到系统环境变量，如未选择，方法和 python2 添加过程相同。\n\n## 重命名 python.exe\n\n1. 找到 python2 和 python3 的安装目录，修改 python2.7.9 和 python3.5.2 中 python.exe 和 pythonw.exe 的名称为 python2.exe、pythonw2.exe 和 python3.exe、pythonw3.exe。\n\n2. 然后在运行 cmd 命令，输入 python2 即可运行 python2.7.9 版本\n  ![20190526104936-py2_test](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104936-py2_test%20.png)\n\n3. 输入 python3 即可运行 python3.5.2 版本\n  ![20190526104944-py3_test](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104944-py3_test%20.png)\n\n4. 至此，python2 和 python3 安装完毕。\n\n## pip2 和 pip3 设置\n\n1. Python 安装包需要用到包管理工具 pip，但是当同时安装 python2 和 python3 的时候，pip 只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的 pip，使得两个 python 版本的 pip 能够共存。\n  ![20190526105211-pip3安装](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105211-pip3安装%20.png)\n\n2. 在 DOS 命令框输入命令，python2-m pip install --upgrade pip --force-reinstall，显示重新安装成功。\n  ![20190526105206-pip2安装](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105206-pip2安装%20.png)\n\n3. 现在可以通过 pip2 -V 和 pip3-V 查看两个版本的 pip 信息，以后只需运行 pip2install XXX 和 pip3 install XXX 即可安装各自的 python 包。\n  ![20190526105218-pip安装包](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105218-pip安装包%20.png)\n\n4. 至此，pip2 和 pip3 修改成功。\n","slug":"工具-win10 pyhton2和3共存","published":1,"updated":"2021-01-23T15:13:23.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud70039jjlnftyx6llx","content":"<blockquote>\n<p><strong>特别说明</strong>，本文是在 <strong>Windows64 位系统</strong>下进行的，32 位系统请下载相应版本的安装包，安装方法类似。</p>\n</blockquote>\n<h2 id=\"下载python安装包\"><a href=\"#下载python安装包\" class=\"headerlink\" title=\"下载python安装包\"></a>下载python安装包</h2><p>进入 python 官网，链接 <a href=\"https://www.python.org/\">https://www.python.org/</a></p>\n<p>选择 Downloads—&gt;Windows，点击进入就可以看到寻找想要的 python 版本</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103726-win10_download_py%20.png\" alt=\"win10_download_py\"></p>\n<p>本文选择的是：</p>\n<p>Python3.5.2, 点击后面链接可直接下载，<a href=\"https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe\">https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe</a></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103746-win10_download_py3%20.png\" alt=\"20190526103746-win10_download_py3\"></p>\n<p>Python2.7.9, 点击后面链接可直接下载，<a href=\"https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi\">https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi</a></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103737-win10_download_py2%20.png\" alt=\"20190526103737-win10_download_py2\"></p>\n<h2 id=\"python3-安装\"><a href=\"#python3-安装\" class=\"headerlink\" title=\"python3 安装\"></a>python3 安装</h2><blockquote>\n<p><strong>说明:</strong> 本文先安装 python3，然后安装 python2</p>\n</blockquote>\n<p>首先选择安装目录，本文安装路径为 D:\\Python\\python35，然后点击下载好的 python3 软件包进行安装，具体流程如下：</p>\n<ol>\n<li><p>在下图红色标记的地方 Add Python3.5 to PATH 前勾选，可以直接将 python3 添加到系统环境变量，然后在 Customize installation 中自定义安装路径。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104125-py3_%E5%AE%89%E8%A3%85_01%20.png\" alt=\"20190526104125-py3_安装_01\"></p>\n</li>\n<li><p>直接 next 即可<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104133-py3_%E5%AE%89%E8%A3%85_02%20.png\" alt=\"20190526104133-py3_安装_02\"></p>\n</li>\n<li><p>下图中 Advanced Options 中没有默认勾选的根据自己的需要进行勾选，黄色标记为 VS 2015 及其以后版本需要的，如果你以后打算在 VS 2015 中配置 python 环境请勾选此项，点击 Browse 选择安装目录，然后点击 Install 进行安装。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104141-py3_%E5%AE%89%E8%A3%85_03%20.png\" alt=\"20190526104141-py3_安装_03\"></p>\n</li>\n<li><p>等待如下安装过程<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104253-py3_%E5%AE%89%E8%A3%85_04%20.png\" alt=\"20190526104253-py3_安装_04\"></p>\n</li>\n<li><p>安装成功<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104257-py3_%E5%AE%89%E8%A3%85_05%20.png\" alt=\"20190526104257-py3_安装_05\"></p>\n</li>\n<li><p>点击关闭，查看 python3 安装情况，按 “Win + R” 快捷键，在打开的 “运行” 对话框中，输入 “cmd” 按回车，进入如下界面，输入 python 查看 python3 安装情况，显示 python 3.5.2 的版本信息，则安装成功，可以输入语句 print(1 + 1)进行测试。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104443-py3_%E5%AE%89%E8%A3%85_06%20.png\" alt=\"20190526104443-py3_安装_06\"></p>\n</li>\n</ol>\n<h2 id=\"python2-安装\"><a href=\"#python2-安装\" class=\"headerlink\" title=\"python2 安装\"></a>python2 安装</h2><ol>\n<li><p>点击 python2 安装包，点击运行，next，选择安装目录，本文安装路径为 D:\\Python\\python27，然后 next<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104627-py2_%E5%AE%89%E8%A3%85_01%20.png\" alt=\"20190526104627-py2_安装_01\"></p>\n</li>\n<li><p>下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用 python 命令没有关系，先点击 next 进行安装，后面专门解决。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104634-py2_%E5%AE%89%E8%A3%85_02%20.png\" alt=\"20190526104634-py2_安装_02\"><br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104643-py2_%E5%AE%89%E8%A3%85_03%20.png\" alt=\"20190526104643-py2_安装_03\"></p>\n</li>\n<li><p>点击 finish 完成安装。<br>至此，python2 和 python3 安装完毕。</p>\n</li>\n</ol>\n<blockquote>\n<p>特别说明：此时运行 “cmd” 命令进入 DOS 命令提示框，输入 python 仍然显示 python3 版本。</p>\n</blockquote>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>打开，控制面板 \\ 系统和安全 \\ 系统，选择高级系统设置，环境变量，选择 Path，点击编辑，新建，分别添加 D:\\Python\\python27 和 D:\\Python\\python27\\Scripts 到环境变量。</p>\n<blockquote>\n<p><strong>注意：</strong> python3 安装时可以选择自动添加到系统环境变量，如未选择，方法和 python2 添加过程相同。</p>\n</blockquote>\n<h2 id=\"重命名-python-exe\"><a href=\"#重命名-python-exe\" class=\"headerlink\" title=\"重命名 python.exe\"></a>重命名 python.exe</h2><ol>\n<li><p>找到 python2 和 python3 的安装目录，修改 python2.7.9 和 python3.5.2 中 python.exe 和 pythonw.exe 的名称为 python2.exe、pythonw2.exe 和 python3.exe、pythonw3.exe。</p>\n</li>\n<li><p>然后在运行 cmd 命令，输入 python2 即可运行 python2.7.9 版本<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104936-py2_test%20.png\" alt=\"20190526104936-py2_test\"></p>\n</li>\n<li><p>输入 python3 即可运行 python3.5.2 版本<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104944-py3_test%20.png\" alt=\"20190526104944-py3_test\"></p>\n</li>\n<li><p>至此，python2 和 python3 安装完毕。</p>\n</li>\n</ol>\n<h2 id=\"pip2-和-pip3-设置\"><a href=\"#pip2-和-pip3-设置\" class=\"headerlink\" title=\"pip2 和 pip3 设置\"></a>pip2 和 pip3 设置</h2><ol>\n<li><p>Python 安装包需要用到包管理工具 pip，但是当同时安装 python2 和 python3 的时候，pip 只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的 pip，使得两个 python 版本的 pip 能够共存。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105211-pip3%E5%AE%89%E8%A3%85%20.png\" alt=\"20190526105211-pip3安装\"></p>\n</li>\n<li><p>在 DOS 命令框输入命令，python2-m pip install –upgrade pip –force-reinstall，显示重新安装成功。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105206-pip2%E5%AE%89%E8%A3%85%20.png\" alt=\"20190526105206-pip2安装\"></p>\n</li>\n<li><p>现在可以通过 pip2 -V 和 pip3-V 查看两个版本的 pip 信息，以后只需运行 pip2install XXX 和 pip3 install XXX 即可安装各自的 python 包。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105218-pip%E5%AE%89%E8%A3%85%E5%8C%85%20.png\" alt=\"20190526105218-pip安装包\"></p>\n</li>\n<li><p>至此，pip2 和 pip3 修改成功。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>特别说明</strong>，本文是在 <strong>Windows64 位系统</strong>下进行的，32 位系统请下载相应版本的安装包，安装方法类似。</p>\n</blockquote>\n<h2 id=\"下载python安装包\"><a href=\"#下载python安装包\" class=\"headerlink\" title=\"下载python安装包\"></a>下载python安装包</h2><p>进入 python 官网，链接 <a href=\"https://www.python.org/\">https://www.python.org/</a></p>\n<p>选择 Downloads—&gt;Windows，点击进入就可以看到寻找想要的 python 版本</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103726-win10_download_py%20.png\" alt=\"win10_download_py\"></p>\n<p>本文选择的是：</p>\n<p>Python3.5.2, 点击后面链接可直接下载，<a href=\"https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe\">https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe</a></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103746-win10_download_py3%20.png\" alt=\"20190526103746-win10_download_py3\"></p>\n<p>Python2.7.9, 点击后面链接可直接下载，<a href=\"https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi\">https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi</a></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103737-win10_download_py2%20.png\" alt=\"20190526103737-win10_download_py2\"></p>\n<h2 id=\"python3-安装\"><a href=\"#python3-安装\" class=\"headerlink\" title=\"python3 安装\"></a>python3 安装</h2><blockquote>\n<p><strong>说明:</strong> 本文先安装 python3，然后安装 python2</p>\n</blockquote>\n<p>首先选择安装目录，本文安装路径为 D:\\Python\\python35，然后点击下载好的 python3 软件包进行安装，具体流程如下：</p>\n<ol>\n<li><p>在下图红色标记的地方 Add Python3.5 to PATH 前勾选，可以直接将 python3 添加到系统环境变量，然后在 Customize installation 中自定义安装路径。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104125-py3_%E5%AE%89%E8%A3%85_01%20.png\" alt=\"20190526104125-py3_安装_01\"></p>\n</li>\n<li><p>直接 next 即可<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104133-py3_%E5%AE%89%E8%A3%85_02%20.png\" alt=\"20190526104133-py3_安装_02\"></p>\n</li>\n<li><p>下图中 Advanced Options 中没有默认勾选的根据自己的需要进行勾选，黄色标记为 VS 2015 及其以后版本需要的，如果你以后打算在 VS 2015 中配置 python 环境请勾选此项，点击 Browse 选择安装目录，然后点击 Install 进行安装。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104141-py3_%E5%AE%89%E8%A3%85_03%20.png\" alt=\"20190526104141-py3_安装_03\"></p>\n</li>\n<li><p>等待如下安装过程<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104253-py3_%E5%AE%89%E8%A3%85_04%20.png\" alt=\"20190526104253-py3_安装_04\"></p>\n</li>\n<li><p>安装成功<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104257-py3_%E5%AE%89%E8%A3%85_05%20.png\" alt=\"20190526104257-py3_安装_05\"></p>\n</li>\n<li><p>点击关闭，查看 python3 安装情况，按 “Win + R” 快捷键，在打开的 “运行” 对话框中，输入 “cmd” 按回车，进入如下界面，输入 python 查看 python3 安装情况，显示 python 3.5.2 的版本信息，则安装成功，可以输入语句 print(1 + 1)进行测试。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104443-py3_%E5%AE%89%E8%A3%85_06%20.png\" alt=\"20190526104443-py3_安装_06\"></p>\n</li>\n</ol>\n<h2 id=\"python2-安装\"><a href=\"#python2-安装\" class=\"headerlink\" title=\"python2 安装\"></a>python2 安装</h2><ol>\n<li><p>点击 python2 安装包，点击运行，next，选择安装目录，本文安装路径为 D:\\Python\\python27，然后 next<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104627-py2_%E5%AE%89%E8%A3%85_01%20.png\" alt=\"20190526104627-py2_安装_01\"></p>\n</li>\n<li><p>下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用 python 命令没有关系，先点击 next 进行安装，后面专门解决。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104634-py2_%E5%AE%89%E8%A3%85_02%20.png\" alt=\"20190526104634-py2_安装_02\"><br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104643-py2_%E5%AE%89%E8%A3%85_03%20.png\" alt=\"20190526104643-py2_安装_03\"></p>\n</li>\n<li><p>点击 finish 完成安装。<br>至此，python2 和 python3 安装完毕。</p>\n</li>\n</ol>\n<blockquote>\n<p>特别说明：此时运行 “cmd” 命令进入 DOS 命令提示框，输入 python 仍然显示 python3 版本。</p>\n</blockquote>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>打开，控制面板 \\ 系统和安全 \\ 系统，选择高级系统设置，环境变量，选择 Path，点击编辑，新建，分别添加 D:\\Python\\python27 和 D:\\Python\\python27\\Scripts 到环境变量。</p>\n<blockquote>\n<p><strong>注意：</strong> python3 安装时可以选择自动添加到系统环境变量，如未选择，方法和 python2 添加过程相同。</p>\n</blockquote>\n<h2 id=\"重命名-python-exe\"><a href=\"#重命名-python-exe\" class=\"headerlink\" title=\"重命名 python.exe\"></a>重命名 python.exe</h2><ol>\n<li><p>找到 python2 和 python3 的安装目录，修改 python2.7.9 和 python3.5.2 中 python.exe 和 pythonw.exe 的名称为 python2.exe、pythonw2.exe 和 python3.exe、pythonw3.exe。</p>\n</li>\n<li><p>然后在运行 cmd 命令，输入 python2 即可运行 python2.7.9 版本<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104936-py2_test%20.png\" alt=\"20190526104936-py2_test\"></p>\n</li>\n<li><p>输入 python3 即可运行 python3.5.2 版本<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104944-py3_test%20.png\" alt=\"20190526104944-py3_test\"></p>\n</li>\n<li><p>至此，python2 和 python3 安装完毕。</p>\n</li>\n</ol>\n<h2 id=\"pip2-和-pip3-设置\"><a href=\"#pip2-和-pip3-设置\" class=\"headerlink\" title=\"pip2 和 pip3 设置\"></a>pip2 和 pip3 设置</h2><ol>\n<li><p>Python 安装包需要用到包管理工具 pip，但是当同时安装 python2 和 python3 的时候，pip 只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的 pip，使得两个 python 版本的 pip 能够共存。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105211-pip3%E5%AE%89%E8%A3%85%20.png\" alt=\"20190526105211-pip3安装\"></p>\n</li>\n<li><p>在 DOS 命令框输入命令，python2-m pip install –upgrade pip –force-reinstall，显示重新安装成功。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105206-pip2%E5%AE%89%E8%A3%85%20.png\" alt=\"20190526105206-pip2安装\"></p>\n</li>\n<li><p>现在可以通过 pip2 -V 和 pip3-V 查看两个版本的 pip 信息，以后只需运行 pip2install XXX 和 pip3 install XXX 即可安装各自的 python 包。<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105218-pip%E5%AE%89%E8%A3%85%E5%8C%85%20.png\" alt=\"20190526105218-pip安装包\"></p>\n</li>\n<li><p>至此，pip2 和 pip3 修改成功。</p>\n</li>\n</ol>\n"},{"title":"好用的CLI工具","date":"2020-12-27T14:10:35.000Z","_content":"\n## 1 Starship\n\n如果必须要从本篇文章中选择一个我最喜欢的终端工具——那非 `Starship` 莫属。`Starship` 可以适用于任何 Shell。你只需要安装它，然后在相应的配置文件`.bashrc`/`.zshrc`添加一行配置，剩下的工作交给它来完成就好了。  \n\n```bash\neval \"$(starship init bash)\"\n```\n\n它可以做到：\n\n*   根据你是否在代码仓库中添加了新文件、是否修改了文件、是否暂存了文件等情况，用相应的符号表示 `git` 仓库的状态。\n  \n*   根据你所在的 `Python` 项目目录，展示 Python 的版本号，这也适用于 `Go`/`Node`/`Rust`/`Elm` 等其他编程语言环境。\n  \n*   展示上一个命令执行所用的时间，指令运行时间必须在毫秒级别。\n  \n*   如果上一个命令执行失败，会展示相应的错误提示符。\n  \n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640.jpeg)  \n\n还有不计其数的其他信息可以展示。但是，它能以更加友好的形式智能地给你呈现!\n\n```bash\n# startship 个性化配置\n[character]      # 正在配置的组件名称是“character”\nsymbol = \">\"  # 提示符中在输入文本之前显示的符号\nerror_symbol = \"✗\" # 如果上一条命令失败，提示符中在输入文本之前显示的符号\nuse_symbol_for_status = true # 指示是否改变显示符号来指出错误状态\nstyle_success = \"bold green\"\t# 上次命令成功时使用的样式\nstyle_failure = \"bold red\"\t# 上次命令失败时使用的样式\n\n# 当 starship 扫描当前目录下的文件和文件夹时，最多使用 10 毫秒\nscan_timeout = 10\n\n[battery]\nfull_symbol = \"🔋\" # 电量满标志\ncharging_symbol = \"⚡️\" # 充电标志\ndischarging_symbol = \"💀\" # 放电标志\n\n[[battery.display]]  # 当电量在 0% 到 30% 时以 \"bold red\" 样式显示\nthreshold = 30\nstyle = \"bold red\"\n\n[[battery.display]]  # 当电量在 30% 到 100% 时以 \"bold yellow\" 样式显示\nthreshold = 100\nstyle = \"bold yellow\"\n\n\n[cmd_duration]\nmin_time = 100 # 显示此组件所需的最短执行时长\nprefix = \"underwent \" # 直接在执行时长前显示的前缀\nstyle = \"bold yellow\" # 此组件的样式\n\n[directory] # 显示当前目录的路径\ntruncation_length = 8 # 当前目录路径被截断后最多保留的父目录数量。\ntruncate_to_repo = true # 是否只截断到您当前处于的 git 仓库根目录下。\nprefix = \"in\" # 直接在显示路径前显示的前缀。\nstyle = \"bold cyan\" # 此组件的样式。\n\n[time]\ndisabled = false # 启用时间组件\nuse_12hr = false # 禁用12小时制\nformat = \"🕙[ %T ]\" # 时间格式\ntime_range = \"-\" # 显示时间的范围，必须是24小时制\n```\n\n官网地址：[https://starship.rs/](https://starship.rs/)\n\n## 2 fzf\n\nfzf— fuzzy finder，即模糊查找器。它是一种通用工具，可让你使用模糊搜索来查找文件、历史命令、进程、git 提交等。你键入一些字母，它会尝试匹配结果列表中任何位置的字母。输入的字母越多，结果也就越准确。你可能在其他的代码编辑器中有过这种类型的搜索使用体验——当你想打开某个文件时，只键入文件名的一部分而不用输入完整路径就能进行查找——这就是模糊搜索。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220059861.jpeg)  \n\n我通过 fish fzf 插件插件使用它，因此我可以搜索命令历史记录或快速打开文件。这是可以每天为我节省不少时间的一个非常棒的工具。\n\nfzf默认会以“extened-search\"模式启动， 这种模式下你可以输入多个以空格分隔的搜索关键词， 如`^music .mp3$`, `sbtrkt !fire`.\n\n| Token  | Match type                 | Description  |\n| ------ | -------------------------- | ------------ |\n| sbtrkt | fuzzy-match                | 匹配sbtrkt   |\n| ^music | prefix-exact-match         | 以music开头  |\n| .mp3^  | suffix-exact-match         | 以.mp3结尾   |\n| 'wild  | exact-match(quoted)        | 精确包含wild |\n| !fire  | inverse-exact-match        | 不包含fire   |\n| !.mp3$ | inverse-suffix-exact-match | 不以.mp3结尾 |\n\n如果你不想用fuzzy match， 可以用`fzf -e`做精确匹配\n符号\"|\"可以做or匹配， 比如\n\n```bash\n^core go$|rb$|py$\n```\n\n表示以core开头，以go或rb或py结尾的\n\n下载地址：https://github.com/junegunn/fzf\n\n## 3 fd\n\n类似于系统自带的 `find` 命令，但使用起来更简单，查找速度更快，并且具有良好的默认设置。\n\n### 简单搜索\n\n*fd*设计用于查找文件系统中的条目. 你可以执行的最基本的搜索就是运行一个参数:搜索模式的*fd*. 例如,假设您想查找您的旧脚本 (包括`netflix`) :\n\n```zsh\n> fd netfl\nSoftware/python/imdb-ratings/netflix-details.py\n```\n\n如果只调用一个这样的参数,*fd*递归检索当前目录中, *包含*模式`netfl`的任何条目.\n\n### 正则表达式搜索\n\n搜索模式被视为正则表达式. 这里,我们搜索开始`x`并以`rc`结束的条目. :\n\n```zsh\n> cd /etc\n> fd '^x.*rc$'\nX11/xinit/xinitrc\nX11/xinit/xserverrc\n```\n\n### 指定根目录\n\n如果我们想搜索一个特定的目录,它可以作为第二个参数*fd*:\n\n```\n> fd passwd /etc\n/etc/default/passwd\n/etc/pam.d/passwd\n/etc/passwd\n```\n\n### 仅运行*fd*\n\n*fd*可以不带参数调用. 这是非常有用的,以便快速地查看当前目录中的所有条目,递归地 (类似于`ls -R`) :\n\n```zsh\n> cd fd/tests\n> fd\ntestenv\ntestenv/mod.rs\ntests.rs\n```\n\n### 搜索特定的文件扩展名\n\n通常,我们对特定类型的所有文件感兴趣. 这可以用`-e` (或) `--extension`选择权. 在这里,我们搜索FD仓库中的所有md文件:\n\n```zsh\n> cd fd\n> fd -e md\nCONTRIBUTING.md\nREADME.md\n```\n\n这个`-e`选项可以与搜索模式结合使用:\n\n```zsh\n> fd -e rs mod\nsrc/fshelper/mod.rs\nsrc/lscolors/mod.rs\ntests/testenv/mod.rs\n```\n\n下载地址：https://github.com/sharkdp/fd\n\n## 4 ripgrep\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220618373.gif)\n\n上图为 grep（左）与 rg（右）命令执行时的对比。\n\n与上述`fd`指令类似，`ripgrep`是`grep`命令的替代方法， 不过`ripgrep`的执行速度更快，而且具有健全的默认配置以及丰富的彩色输出。\n\n它同样会跳过被`.gitignore`忽略以及隐藏的文件，因此如果有特殊需要，我们可以设置指令别名：`rga ='rg -uuu'`。它会禁用所有智能筛选，并使`ripgrep`的表现与标准的 grep 指令一致。\n\n### 简单搜索\n\n```bash\nls | rg App\n```\n\n### 正则表达式搜索\n\n```bash\nls | rg ^App.*$\n```\n\n### 指定文件搜索\n\n```bash\nrg  ^def.*$ 01_two-sum.py\n```\n\n下载地址：https://github.com/BurntSushi/ripgrep\n\n## 5 htop 和 glances\n\n在 Linux 或 Mac 上显示进程运行状态信息最常用工具是我们熟悉的`top`，它是每位系统管理员的好帮手。而且，即使是像我一样主要从事网络开发，查看计算机的运行状况也很有用。你知道，只是看一下当前到底是 Docker 进程还是 Chrome 进程吃掉了你所有的 RAM，应该如何做吗？\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220647892.jpeg)  \n\n`htop`工具是`top`工具的绝佳替代品。\n\n`top`工具是非常基础的监控工具，提供的功能有限，因此很多人转去使用 htop。`htop`比起`top`，优势很明显——除了功能更加完善以外，它的色彩搭配也很丰富，整体上使用起来更加友好。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220657583.jpeg)  \n\n借助 glances，还可以让你一目了然地快速了解系统当前状态。\n\nglances 是`htop`的补充工具。除了列出所有进程及其 CPU 和内存使用情况之外，它还可以显示有关系统的其他信息，比如：\n\n*   网络及磁盘使用情况\n  \n*   文件系统已使用的空间和总空间\n  \n*   来自不同传感器（例如电池）的数据\n  \n*   以及最近消耗过多资源的进程列表\n  \n\n我选择使用`htop`来筛选和终止进程，因为对我来讲，效率提高了不少，我也使用 `glances`可以快速浏览一下计算机的运行状况。它提供 API 接口、Web UI 以及支持各种导出格式，因此你可以将系统监视提高到一个新 Level。因此我在这里强烈推荐一波！\n\nhtop 下载地址：https://hisham.hm/htop/\n\nglances 下载地址：https://nicolargo.github.io/glances/\n\n## 6 virtualenv\n\nVirtualenv 是用于在 Python 中创建虚拟环境的工具（比起内置的`venv`模块，我更喜欢 Virtualenv）。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220804528.jpeg)  \n\nvirtualenvwrapper 是 virtualenv 的虚拟环境管理器。它提供了许多命令来执行快速创建、列出或删除虚拟环境等操作。\n\nvirtualenv 下载地址：\n\nhttps://pypi.org/project/virtualenv/\n\n\n\n## 7 Homebrew\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220810324.jpeg)\n\n如果你使用的是 Mac，那我就无需再介绍 Homebrew 了。它是 macOS 上被业界普遍认可的软件包管理器。\n\n下载地址：https://brew.sh/  \n\n在Mac下面安装Mysql、Redis、Node之类软件的时候，比较方便的方式是使用Homebrew（号称是The missing package manager for OS X）。不过Homebrew是命令行方式，用起来不是那么的友好，所以就有了Cakebrew。\n\n网站：https://www.cakebrew.com/\n\n非常友好的图形界面，使用起来简单快捷。\n\n而LaunchRocket呢，则是一个帮助管理Homebrew安装的服务的软件，比如你使用Homebrew安装的Mysql、Redis、MongoDB，是让它自启动呢，还是手动启动，传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理了！\n\n网站：https://github.com/jimbojsb/launchrocket\n\n## 8 tree\n\n你可以通过`brew install tree`安装该工具。如果要查看给定目录的内容，那么 tree 是执行此操作的必备工具。它能以漂亮的树状结构显示所有子目录及文件：\n\n```\n$ tree .\n.\n├── recovery.md\n├── README.md\n├── archive\n├── automator\n│   ├── Open\\\\ Iterm2.workflow\n│   │   └── Contents\n│   │       ├── Info.plist\n│   │       ├── QuickLook\n│   │       │   └── Thumbnail.png\n│   │       └── document.wflow\n│   └── Start\\\\ Screen\\\\ Saver.workflow\n├── brew-cask.sh\n```\n\n## 9 bat\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220820634.jpeg)\n\n类似于在终端中常用的用于显示文件内容的`cat`命令，但是`bat`效果更佳。\n\n它增加了语法高亮显示，git gutter 标记（如果适用），自动分页（如果文件很大）等功能，并且使得输出的内容阅读起来更加友好。\n\nbat 下载地址：https://github.com/sharkdp/bat\n\n## 10 httpie\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220827622.gif)\n\n如果你需要发送一些 HTTP 请求，但发现使用`curl`不够直观，那么请尝试一下`httpie`。这是一款非常好用的`curl`替代工具。合理的默认配置以及简洁的语法使它更易于使用，命令返回也是彩色输出，甚至支持为不同类型的身份验证安装相应的插件。\n\nhttpie 下载地址：https://httpie.org/\n\n## 11 tldr\n\n简化版的命令帮助手册。“man pages” 包含了 Linux 软件的手册，这些手册解释了如何使用给定的命令。你可以尝试运行`man cat`或`man grep`来查看相关命令的帮助手册。它们描述的非常详细，有时可能难以掌握。因此，`tldr`社区的目的，就是将每个命令的帮助手册进行简化，方便用户查阅。\n\n`tldr`适用于几乎所有的受欢迎的软件。正如我提到的，这是社区的努力和功劳，虽然不太可能包含所有的软件的简化帮助手册。但是当某个帮助手册被纳入管理并起作用时，它提供的信息通常就是你要查找的内容。\n\n比如，如果你要创建一些文件的 gzip 压缩存档，`man tar`可以为你提供可能的参数选择。而`tldr tar`会列出一些我们常见的示例——如图所示，第二个示例正是你要执行的操作：\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220836708.jpeg)  \n\n“man pages” 展示的信息太全面了，但是很多时候使用`tldr`可以更快地帮你找到特定信息，这才是用户真正想要的。\n\ntldr 下载地址：https://tldr.sh/\n\n## 12 exa\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220843370.jpeg)\n\n`exa`是`ls`命令的一个可替代方案。\n\n它色彩艳丽，还可以显示 git 状态等其他信息，自动将文件大小转换为方便人们阅读的单位，并且所有这些都保持与`ls`几乎相同的执行速度。虽然我很喜欢这个工具并推荐给你们，但由于某种原因，我仍然坚持使用 ls。\n\nexa 下载地址：https://the.exa.website/\n\n## 13 litecli 和 mycli\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220850333.gif)\n\n这是我首选的 SQLite 和 mysql的解决方案。借助自动提示和语法突出显示，它们比默认的`sqlite3`和`mysql`工具要好用很多。\n\nlitecli 下载地址：https://litecli.com/\n\nmycli 下载地址：https://www.mycli.net/\n\n## 14 ncdu\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220855650.jpeg)\n\n这是在终端进行磁盘分析时使用的工具，它使用起来简单快捷。当我需要释放一些硬盘空间时，会默认使用这款工具。\n\nncdu 下载地址：https://dev.yorhel.nl/ncdu\n\n","source":"_posts/工具-好用的 CLI 工具.md","raw":"---\ntitle: 好用的CLI工具\ndate: 2020-12-27 22:10:35\ncategories:\n    - 系统\n    - Mac\ntags:\n    - CLI\n    - 终端工具\n---\n\n## 1 Starship\n\n如果必须要从本篇文章中选择一个我最喜欢的终端工具——那非 `Starship` 莫属。`Starship` 可以适用于任何 Shell。你只需要安装它，然后在相应的配置文件`.bashrc`/`.zshrc`添加一行配置，剩下的工作交给它来完成就好了。  \n\n```bash\neval \"$(starship init bash)\"\n```\n\n它可以做到：\n\n*   根据你是否在代码仓库中添加了新文件、是否修改了文件、是否暂存了文件等情况，用相应的符号表示 `git` 仓库的状态。\n  \n*   根据你所在的 `Python` 项目目录，展示 Python 的版本号，这也适用于 `Go`/`Node`/`Rust`/`Elm` 等其他编程语言环境。\n  \n*   展示上一个命令执行所用的时间，指令运行时间必须在毫秒级别。\n  \n*   如果上一个命令执行失败，会展示相应的错误提示符。\n  \n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640.jpeg)  \n\n还有不计其数的其他信息可以展示。但是，它能以更加友好的形式智能地给你呈现!\n\n```bash\n# startship 个性化配置\n[character]      # 正在配置的组件名称是“character”\nsymbol = \">\"  # 提示符中在输入文本之前显示的符号\nerror_symbol = \"✗\" # 如果上一条命令失败，提示符中在输入文本之前显示的符号\nuse_symbol_for_status = true # 指示是否改变显示符号来指出错误状态\nstyle_success = \"bold green\"\t# 上次命令成功时使用的样式\nstyle_failure = \"bold red\"\t# 上次命令失败时使用的样式\n\n# 当 starship 扫描当前目录下的文件和文件夹时，最多使用 10 毫秒\nscan_timeout = 10\n\n[battery]\nfull_symbol = \"🔋\" # 电量满标志\ncharging_symbol = \"⚡️\" # 充电标志\ndischarging_symbol = \"💀\" # 放电标志\n\n[[battery.display]]  # 当电量在 0% 到 30% 时以 \"bold red\" 样式显示\nthreshold = 30\nstyle = \"bold red\"\n\n[[battery.display]]  # 当电量在 30% 到 100% 时以 \"bold yellow\" 样式显示\nthreshold = 100\nstyle = \"bold yellow\"\n\n\n[cmd_duration]\nmin_time = 100 # 显示此组件所需的最短执行时长\nprefix = \"underwent \" # 直接在执行时长前显示的前缀\nstyle = \"bold yellow\" # 此组件的样式\n\n[directory] # 显示当前目录的路径\ntruncation_length = 8 # 当前目录路径被截断后最多保留的父目录数量。\ntruncate_to_repo = true # 是否只截断到您当前处于的 git 仓库根目录下。\nprefix = \"in\" # 直接在显示路径前显示的前缀。\nstyle = \"bold cyan\" # 此组件的样式。\n\n[time]\ndisabled = false # 启用时间组件\nuse_12hr = false # 禁用12小时制\nformat = \"🕙[ %T ]\" # 时间格式\ntime_range = \"-\" # 显示时间的范围，必须是24小时制\n```\n\n官网地址：[https://starship.rs/](https://starship.rs/)\n\n## 2 fzf\n\nfzf— fuzzy finder，即模糊查找器。它是一种通用工具，可让你使用模糊搜索来查找文件、历史命令、进程、git 提交等。你键入一些字母，它会尝试匹配结果列表中任何位置的字母。输入的字母越多，结果也就越准确。你可能在其他的代码编辑器中有过这种类型的搜索使用体验——当你想打开某个文件时，只键入文件名的一部分而不用输入完整路径就能进行查找——这就是模糊搜索。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220059861.jpeg)  \n\n我通过 fish fzf 插件插件使用它，因此我可以搜索命令历史记录或快速打开文件。这是可以每天为我节省不少时间的一个非常棒的工具。\n\nfzf默认会以“extened-search\"模式启动， 这种模式下你可以输入多个以空格分隔的搜索关键词， 如`^music .mp3$`, `sbtrkt !fire`.\n\n| Token  | Match type                 | Description  |\n| ------ | -------------------------- | ------------ |\n| sbtrkt | fuzzy-match                | 匹配sbtrkt   |\n| ^music | prefix-exact-match         | 以music开头  |\n| .mp3^  | suffix-exact-match         | 以.mp3结尾   |\n| 'wild  | exact-match(quoted)        | 精确包含wild |\n| !fire  | inverse-exact-match        | 不包含fire   |\n| !.mp3$ | inverse-suffix-exact-match | 不以.mp3结尾 |\n\n如果你不想用fuzzy match， 可以用`fzf -e`做精确匹配\n符号\"|\"可以做or匹配， 比如\n\n```bash\n^core go$|rb$|py$\n```\n\n表示以core开头，以go或rb或py结尾的\n\n下载地址：https://github.com/junegunn/fzf\n\n## 3 fd\n\n类似于系统自带的 `find` 命令，但使用起来更简单，查找速度更快，并且具有良好的默认设置。\n\n### 简单搜索\n\n*fd*设计用于查找文件系统中的条目. 你可以执行的最基本的搜索就是运行一个参数:搜索模式的*fd*. 例如,假设您想查找您的旧脚本 (包括`netflix`) :\n\n```zsh\n> fd netfl\nSoftware/python/imdb-ratings/netflix-details.py\n```\n\n如果只调用一个这样的参数,*fd*递归检索当前目录中, *包含*模式`netfl`的任何条目.\n\n### 正则表达式搜索\n\n搜索模式被视为正则表达式. 这里,我们搜索开始`x`并以`rc`结束的条目. :\n\n```zsh\n> cd /etc\n> fd '^x.*rc$'\nX11/xinit/xinitrc\nX11/xinit/xserverrc\n```\n\n### 指定根目录\n\n如果我们想搜索一个特定的目录,它可以作为第二个参数*fd*:\n\n```\n> fd passwd /etc\n/etc/default/passwd\n/etc/pam.d/passwd\n/etc/passwd\n```\n\n### 仅运行*fd*\n\n*fd*可以不带参数调用. 这是非常有用的,以便快速地查看当前目录中的所有条目,递归地 (类似于`ls -R`) :\n\n```zsh\n> cd fd/tests\n> fd\ntestenv\ntestenv/mod.rs\ntests.rs\n```\n\n### 搜索特定的文件扩展名\n\n通常,我们对特定类型的所有文件感兴趣. 这可以用`-e` (或) `--extension`选择权. 在这里,我们搜索FD仓库中的所有md文件:\n\n```zsh\n> cd fd\n> fd -e md\nCONTRIBUTING.md\nREADME.md\n```\n\n这个`-e`选项可以与搜索模式结合使用:\n\n```zsh\n> fd -e rs mod\nsrc/fshelper/mod.rs\nsrc/lscolors/mod.rs\ntests/testenv/mod.rs\n```\n\n下载地址：https://github.com/sharkdp/fd\n\n## 4 ripgrep\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220618373.gif)\n\n上图为 grep（左）与 rg（右）命令执行时的对比。\n\n与上述`fd`指令类似，`ripgrep`是`grep`命令的替代方法， 不过`ripgrep`的执行速度更快，而且具有健全的默认配置以及丰富的彩色输出。\n\n它同样会跳过被`.gitignore`忽略以及隐藏的文件，因此如果有特殊需要，我们可以设置指令别名：`rga ='rg -uuu'`。它会禁用所有智能筛选，并使`ripgrep`的表现与标准的 grep 指令一致。\n\n### 简单搜索\n\n```bash\nls | rg App\n```\n\n### 正则表达式搜索\n\n```bash\nls | rg ^App.*$\n```\n\n### 指定文件搜索\n\n```bash\nrg  ^def.*$ 01_two-sum.py\n```\n\n下载地址：https://github.com/BurntSushi/ripgrep\n\n## 5 htop 和 glances\n\n在 Linux 或 Mac 上显示进程运行状态信息最常用工具是我们熟悉的`top`，它是每位系统管理员的好帮手。而且，即使是像我一样主要从事网络开发，查看计算机的运行状况也很有用。你知道，只是看一下当前到底是 Docker 进程还是 Chrome 进程吃掉了你所有的 RAM，应该如何做吗？\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220647892.jpeg)  \n\n`htop`工具是`top`工具的绝佳替代品。\n\n`top`工具是非常基础的监控工具，提供的功能有限，因此很多人转去使用 htop。`htop`比起`top`，优势很明显——除了功能更加完善以外，它的色彩搭配也很丰富，整体上使用起来更加友好。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220657583.jpeg)  \n\n借助 glances，还可以让你一目了然地快速了解系统当前状态。\n\nglances 是`htop`的补充工具。除了列出所有进程及其 CPU 和内存使用情况之外，它还可以显示有关系统的其他信息，比如：\n\n*   网络及磁盘使用情况\n  \n*   文件系统已使用的空间和总空间\n  \n*   来自不同传感器（例如电池）的数据\n  \n*   以及最近消耗过多资源的进程列表\n  \n\n我选择使用`htop`来筛选和终止进程，因为对我来讲，效率提高了不少，我也使用 `glances`可以快速浏览一下计算机的运行状况。它提供 API 接口、Web UI 以及支持各种导出格式，因此你可以将系统监视提高到一个新 Level。因此我在这里强烈推荐一波！\n\nhtop 下载地址：https://hisham.hm/htop/\n\nglances 下载地址：https://nicolargo.github.io/glances/\n\n## 6 virtualenv\n\nVirtualenv 是用于在 Python 中创建虚拟环境的工具（比起内置的`venv`模块，我更喜欢 Virtualenv）。\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220804528.jpeg)  \n\nvirtualenvwrapper 是 virtualenv 的虚拟环境管理器。它提供了许多命令来执行快速创建、列出或删除虚拟环境等操作。\n\nvirtualenv 下载地址：\n\nhttps://pypi.org/project/virtualenv/\n\n\n\n## 7 Homebrew\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220810324.jpeg)\n\n如果你使用的是 Mac，那我就无需再介绍 Homebrew 了。它是 macOS 上被业界普遍认可的软件包管理器。\n\n下载地址：https://brew.sh/  \n\n在Mac下面安装Mysql、Redis、Node之类软件的时候，比较方便的方式是使用Homebrew（号称是The missing package manager for OS X）。不过Homebrew是命令行方式，用起来不是那么的友好，所以就有了Cakebrew。\n\n网站：https://www.cakebrew.com/\n\n非常友好的图形界面，使用起来简单快捷。\n\n而LaunchRocket呢，则是一个帮助管理Homebrew安装的服务的软件，比如你使用Homebrew安装的Mysql、Redis、MongoDB，是让它自启动呢，还是手动启动，传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理了！\n\n网站：https://github.com/jimbojsb/launchrocket\n\n## 8 tree\n\n你可以通过`brew install tree`安装该工具。如果要查看给定目录的内容，那么 tree 是执行此操作的必备工具。它能以漂亮的树状结构显示所有子目录及文件：\n\n```\n$ tree .\n.\n├── recovery.md\n├── README.md\n├── archive\n├── automator\n│   ├── Open\\\\ Iterm2.workflow\n│   │   └── Contents\n│   │       ├── Info.plist\n│   │       ├── QuickLook\n│   │       │   └── Thumbnail.png\n│   │       └── document.wflow\n│   └── Start\\\\ Screen\\\\ Saver.workflow\n├── brew-cask.sh\n```\n\n## 9 bat\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220820634.jpeg)\n\n类似于在终端中常用的用于显示文件内容的`cat`命令，但是`bat`效果更佳。\n\n它增加了语法高亮显示，git gutter 标记（如果适用），自动分页（如果文件很大）等功能，并且使得输出的内容阅读起来更加友好。\n\nbat 下载地址：https://github.com/sharkdp/bat\n\n## 10 httpie\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220827622.gif)\n\n如果你需要发送一些 HTTP 请求，但发现使用`curl`不够直观，那么请尝试一下`httpie`。这是一款非常好用的`curl`替代工具。合理的默认配置以及简洁的语法使它更易于使用，命令返回也是彩色输出，甚至支持为不同类型的身份验证安装相应的插件。\n\nhttpie 下载地址：https://httpie.org/\n\n## 11 tldr\n\n简化版的命令帮助手册。“man pages” 包含了 Linux 软件的手册，这些手册解释了如何使用给定的命令。你可以尝试运行`man cat`或`man grep`来查看相关命令的帮助手册。它们描述的非常详细，有时可能难以掌握。因此，`tldr`社区的目的，就是将每个命令的帮助手册进行简化，方便用户查阅。\n\n`tldr`适用于几乎所有的受欢迎的软件。正如我提到的，这是社区的努力和功劳，虽然不太可能包含所有的软件的简化帮助手册。但是当某个帮助手册被纳入管理并起作用时，它提供的信息通常就是你要查找的内容。\n\n比如，如果你要创建一些文件的 gzip 压缩存档，`man tar`可以为你提供可能的参数选择。而`tldr tar`会列出一些我们常见的示例——如图所示，第二个示例正是你要执行的操作：\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220836708.jpeg)  \n\n“man pages” 展示的信息太全面了，但是很多时候使用`tldr`可以更快地帮你找到特定信息，这才是用户真正想要的。\n\ntldr 下载地址：https://tldr.sh/\n\n## 12 exa\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220843370.jpeg)\n\n`exa`是`ls`命令的一个可替代方案。\n\n它色彩艳丽，还可以显示 git 状态等其他信息，自动将文件大小转换为方便人们阅读的单位，并且所有这些都保持与`ls`几乎相同的执行速度。虽然我很喜欢这个工具并推荐给你们，但由于某种原因，我仍然坚持使用 ls。\n\nexa 下载地址：https://the.exa.website/\n\n## 13 litecli 和 mycli\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220850333.gif)\n\n这是我首选的 SQLite 和 mysql的解决方案。借助自动提示和语法突出显示，它们比默认的`sqlite3`和`mysql`工具要好用很多。\n\nlitecli 下载地址：https://litecli.com/\n\nmycli 下载地址：https://www.mycli.net/\n\n## 14 ncdu\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220855650.jpeg)\n\n这是在终端进行磁盘分析时使用的工具，它使用起来简单快捷。当我需要释放一些硬盘空间时，会默认使用这款工具。\n\nncdu 下载地址：https://dev.yorhel.nl/ncdu\n\n","slug":"工具-好用的 CLI 工具","published":1,"updated":"2021-01-21T07:06:06.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnud9003cjjlngq1pa45f","content":"<h2 id=\"1-Starship\"><a href=\"#1-Starship\" class=\"headerlink\" title=\"1 Starship\"></a>1 Starship</h2><p>如果必须要从本篇文章中选择一个我最喜欢的终端工具——那非 <code>Starship</code> 莫属。<code>Starship</code> 可以适用于任何 Shell。你只需要安装它，然后在相应的配置文件<code>.bashrc</code>/<code>.zshrc</code>添加一行配置，剩下的工作交给它来完成就好了。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(starship init bash)</span>&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>它可以做到：</p>\n<ul>\n<li><p>根据你是否在代码仓库中添加了新文件、是否修改了文件、是否暂存了文件等情况，用相应的符号表示 <code>git</code> 仓库的状态。</p>\n</li>\n<li><p>根据你所在的 <code>Python</code> 项目目录，展示 Python 的版本号，这也适用于 <code>Go</code>/<code>Node</code>/<code>Rust</code>/<code>Elm</code> 等其他编程语言环境。</p>\n</li>\n<li><p>展示上一个命令执行所用的时间，指令运行时间必须在毫秒级别。</p>\n</li>\n<li><p>如果上一个命令执行失败，会展示相应的错误提示符。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640.jpeg\" alt=\"\">  </p>\n<p>还有不计其数的其他信息可以展示。但是，它能以更加友好的形式智能地给你呈现!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># startship 个性化配置</span><br>[character]      <span class=\"hljs-comment\"># 正在配置的组件名称是“character”</span><br>symbol = <span class=\"hljs-string\">&quot;&gt;&quot;</span>  <span class=\"hljs-comment\"># 提示符中在输入文本之前显示的符号</span><br>error_symbol = <span class=\"hljs-string\">&quot;✗&quot;</span> <span class=\"hljs-comment\"># 如果上一条命令失败，提示符中在输入文本之前显示的符号</span><br>use_symbol_for_status = <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 指示是否改变显示符号来指出错误状态</span><br>style_success = <span class=\"hljs-string\">&quot;bold green&quot;</span>\t<span class=\"hljs-comment\"># 上次命令成功时使用的样式</span><br>style_failure = <span class=\"hljs-string\">&quot;bold red&quot;</span>\t<span class=\"hljs-comment\"># 上次命令失败时使用的样式</span><br><br><span class=\"hljs-comment\"># 当 starship 扫描当前目录下的文件和文件夹时，最多使用 10 毫秒</span><br>scan_timeout = 10<br><br>[battery]<br>full_symbol = <span class=\"hljs-string\">&quot;🔋&quot;</span> <span class=\"hljs-comment\"># 电量满标志</span><br>charging_symbol = <span class=\"hljs-string\">&quot;⚡️&quot;</span> <span class=\"hljs-comment\"># 充电标志</span><br>discharging_symbol = <span class=\"hljs-string\">&quot;💀&quot;</span> <span class=\"hljs-comment\"># 放电标志</span><br><br>[[battery.display]]  <span class=\"hljs-comment\"># 当电量在 0% 到 30% 时以 &quot;bold red&quot; 样式显示</span><br>threshold = 30<br>style = <span class=\"hljs-string\">&quot;bold red&quot;</span><br><br>[[battery.display]]  <span class=\"hljs-comment\"># 当电量在 30% 到 100% 时以 &quot;bold yellow&quot; 样式显示</span><br>threshold = 100<br>style = <span class=\"hljs-string\">&quot;bold yellow&quot;</span><br><br><br>[cmd_duration]<br>min_time = 100 <span class=\"hljs-comment\"># 显示此组件所需的最短执行时长</span><br>prefix = <span class=\"hljs-string\">&quot;underwent &quot;</span> <span class=\"hljs-comment\"># 直接在执行时长前显示的前缀</span><br>style = <span class=\"hljs-string\">&quot;bold yellow&quot;</span> <span class=\"hljs-comment\"># 此组件的样式</span><br><br>[directory] <span class=\"hljs-comment\"># 显示当前目录的路径</span><br>truncation_length = 8 <span class=\"hljs-comment\"># 当前目录路径被截断后最多保留的父目录数量。</span><br>truncate_to_repo = <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否只截断到您当前处于的 git 仓库根目录下。</span><br>prefix = <span class=\"hljs-string\">&quot;in&quot;</span> <span class=\"hljs-comment\"># 直接在显示路径前显示的前缀。</span><br>style = <span class=\"hljs-string\">&quot;bold cyan&quot;</span> <span class=\"hljs-comment\"># 此组件的样式。</span><br><br>[time]<br>disabled = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 启用时间组件</span><br>use_12hr = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 禁用12小时制</span><br>format = <span class=\"hljs-string\">&quot;🕙[ %T ]&quot;</span> <span class=\"hljs-comment\"># 时间格式</span><br>time_range = <span class=\"hljs-string\">&quot;-&quot;</span> <span class=\"hljs-comment\"># 显示时间的范围，必须是24小时制</span><br></code></pre></div></td></tr></table></figure>\n<p>官网地址：<a href=\"https://starship.rs/\">https://starship.rs/</a></p>\n<h2 id=\"2-fzf\"><a href=\"#2-fzf\" class=\"headerlink\" title=\"2 fzf\"></a>2 fzf</h2><p>fzf— fuzzy finder，即模糊查找器。它是一种通用工具，可让你使用模糊搜索来查找文件、历史命令、进程、git 提交等。你键入一些字母，它会尝试匹配结果列表中任何位置的字母。输入的字母越多，结果也就越准确。你可能在其他的代码编辑器中有过这种类型的搜索使用体验——当你想打开某个文件时，只键入文件名的一部分而不用输入完整路径就能进行查找——这就是模糊搜索。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220059861.jpeg\" alt=\"\">  </p>\n<p>我通过 fish fzf 插件插件使用它，因此我可以搜索命令历史记录或快速打开文件。这是可以每天为我节省不少时间的一个非常棒的工具。</p>\n<p>fzf默认会以“extened-search”模式启动， 这种模式下你可以输入多个以空格分隔的搜索关键词， 如<code>^music .mp3$</code>, <code>sbtrkt !fire</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Token</th>\n<th>Match type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sbtrkt</td>\n<td>fuzzy-match</td>\n<td>匹配sbtrkt</td>\n</tr>\n<tr>\n<td>^music</td>\n<td>prefix-exact-match</td>\n<td>以music开头</td>\n</tr>\n<tr>\n<td>.mp3^</td>\n<td>suffix-exact-match</td>\n<td>以.mp3结尾</td>\n</tr>\n<tr>\n<td>‘wild</td>\n<td>exact-match(quoted)</td>\n<td>精确包含wild</td>\n</tr>\n<tr>\n<td>!fire</td>\n<td>inverse-exact-match</td>\n<td>不包含fire</td>\n</tr>\n<tr>\n<td>!.mp3$</td>\n<td>inverse-suffix-exact-match</td>\n<td>不以.mp3结尾</td>\n</tr>\n</tbody></table>\n<p>如果你不想用fuzzy match， 可以用<code>fzf -e</code>做精确匹配<br>符号”|”可以做or匹配， 比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">^core go$|rb$|py$<br></code></pre></div></td></tr></table></figure>\n<p>表示以core开头，以go或rb或py结尾的</p>\n<p>下载地址：<a href=\"https://github.com/junegunn/fzf\">https://github.com/junegunn/fzf</a></p>\n<h2 id=\"3-fd\"><a href=\"#3-fd\" class=\"headerlink\" title=\"3 fd\"></a>3 fd</h2><p>类似于系统自带的 <code>find</code> 命令，但使用起来更简单，查找速度更快，并且具有良好的默认设置。</p>\n<h3 id=\"简单搜索\"><a href=\"#简单搜索\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h3><p><em>fd<em>设计用于查找文件系统中的条目. 你可以执行的最基本的搜索就是运行一个参数:搜索模式的</em>fd</em>. 例如,假设您想查找您的旧脚本 (包括<code>netflix</code>) :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">&gt; fd netfl<br>Software/python/imdb-ratings/netflix-details.py<br></code></pre></div></td></tr></table></figure>\n<p>如果只调用一个这样的参数,<em>fd</em>递归检索当前目录中, <em>包含</em>模式<code>netfl</code>的任何条目.</p>\n<h3 id=\"正则表达式搜索\"><a href=\"#正则表达式搜索\" class=\"headerlink\" title=\"正则表达式搜索\"></a>正则表达式搜索</h3><p>搜索模式被视为正则表达式. 这里,我们搜索开始<code>x</code>并以<code>rc</code>结束的条目. :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> /etc<br>&gt; fd <span class=\"hljs-string\">&#x27;^x.*rc$&#x27;</span><br>X11/xinit/xinitrc<br>X11/xinit/xserverrc<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"指定根目录\"><a href=\"#指定根目录\" class=\"headerlink\" title=\"指定根目录\"></a>指定根目录</h3><p>如果我们想搜索一个特定的目录,它可以作为第二个参数<em>fd</em>:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs gradle\">&gt; fd passwd /etc<br><span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">default</span>/passwd<br><span class=\"hljs-regexp\">/etc/</span>pam.d/passwd<br><span class=\"hljs-regexp\">/etc/</span>passwd<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"仅运行fd\"><a href=\"#仅运行fd\" class=\"headerlink\" title=\"仅运行fd\"></a>仅运行<em>fd</em></h3><p><em>fd</em>可以不带参数调用. 这是非常有用的,以便快速地查看当前目录中的所有条目,递归地 (类似于<code>ls -R</code>) :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> fd/tests<br>&gt; fd<br>testenv<br>testenv/mod.rs<br>tests.rs<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"搜索特定的文件扩展名\"><a href=\"#搜索特定的文件扩展名\" class=\"headerlink\" title=\"搜索特定的文件扩展名\"></a>搜索特定的文件扩展名</h3><p>通常,我们对特定类型的所有文件感兴趣. 这可以用<code>-e</code> (或) <code>--extension</code>选择权. 在这里,我们搜索FD仓库中的所有md文件:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> fd<br>&gt; fd -e md<br>CONTRIBUTING.md<br>README.md<br></code></pre></div></td></tr></table></figure>\n<p>这个<code>-e</code>选项可以与搜索模式结合使用:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">&gt; fd -e rs mod<br>src/fshelper/mod.rs<br>src/lscolors/mod.rs<br>tests/testenv/mod.rs<br></code></pre></div></td></tr></table></figure>\n<p>下载地址：<a href=\"https://github.com/sharkdp/fd\">https://github.com/sharkdp/fd</a></p>\n<h2 id=\"4-ripgrep\"><a href=\"#4-ripgrep\" class=\"headerlink\" title=\"4 ripgrep\"></a>4 ripgrep</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220618373.gif\" alt=\"\"></p>\n<p>上图为 grep（左）与 rg（右）命令执行时的对比。</p>\n<p>与上述<code>fd</code>指令类似，<code>ripgrep</code>是<code>grep</code>命令的替代方法， 不过<code>ripgrep</code>的执行速度更快，而且具有健全的默认配置以及丰富的彩色输出。</p>\n<p>它同样会跳过被<code>.gitignore</code>忽略以及隐藏的文件，因此如果有特殊需要，我们可以设置指令别名：<code>rga =&#39;rg -uuu&#39;</code>。它会禁用所有智能筛选，并使<code>ripgrep</code>的表现与标准的 grep 指令一致。</p>\n<h3 id=\"简单搜索-1\"><a href=\"#简单搜索-1\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">ls | rg App<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"正则表达式搜索-1\"><a href=\"#正则表达式搜索-1\" class=\"headerlink\" title=\"正则表达式搜索\"></a>正则表达式搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">ls | rg ^App.*$<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"指定文件搜索\"><a href=\"#指定文件搜索\" class=\"headerlink\" title=\"指定文件搜索\"></a>指定文件搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">rg  ^def.*$ 01_two-sum.py<br></code></pre></div></td></tr></table></figure>\n<p>下载地址：<a href=\"https://github.com/BurntSushi/ripgrep\">https://github.com/BurntSushi/ripgrep</a></p>\n<h2 id=\"5-htop-和-glances\"><a href=\"#5-htop-和-glances\" class=\"headerlink\" title=\"5 htop 和 glances\"></a>5 htop 和 glances</h2><p>在 Linux 或 Mac 上显示进程运行状态信息最常用工具是我们熟悉的<code>top</code>，它是每位系统管理员的好帮手。而且，即使是像我一样主要从事网络开发，查看计算机的运行状况也很有用。你知道，只是看一下当前到底是 Docker 进程还是 Chrome 进程吃掉了你所有的 RAM，应该如何做吗？</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220647892.jpeg\" alt=\"\">  </p>\n<p><code>htop</code>工具是<code>top</code>工具的绝佳替代品。</p>\n<p><code>top</code>工具是非常基础的监控工具，提供的功能有限，因此很多人转去使用 htop。<code>htop</code>比起<code>top</code>，优势很明显——除了功能更加完善以外，它的色彩搭配也很丰富，整体上使用起来更加友好。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220657583.jpeg\" alt=\"\">  </p>\n<p>借助 glances，还可以让你一目了然地快速了解系统当前状态。</p>\n<p>glances 是<code>htop</code>的补充工具。除了列出所有进程及其 CPU 和内存使用情况之外，它还可以显示有关系统的其他信息，比如：</p>\n<ul>\n<li><p>网络及磁盘使用情况</p>\n</li>\n<li><p>文件系统已使用的空间和总空间</p>\n</li>\n<li><p>来自不同传感器（例如电池）的数据</p>\n</li>\n<li><p>以及最近消耗过多资源的进程列表</p>\n</li>\n</ul>\n<p>我选择使用<code>htop</code>来筛选和终止进程，因为对我来讲，效率提高了不少，我也使用 <code>glances</code>可以快速浏览一下计算机的运行状况。它提供 API 接口、Web UI 以及支持各种导出格式，因此你可以将系统监视提高到一个新 Level。因此我在这里强烈推荐一波！</p>\n<p>htop 下载地址：<a href=\"https://hisham.hm/htop/\">https://hisham.hm/htop/</a></p>\n<p>glances 下载地址：<a href=\"https://nicolargo.github.io/glances/\">https://nicolargo.github.io/glances/</a></p>\n<h2 id=\"6-virtualenv\"><a href=\"#6-virtualenv\" class=\"headerlink\" title=\"6 virtualenv\"></a>6 virtualenv</h2><p>Virtualenv 是用于在 Python 中创建虚拟环境的工具（比起内置的<code>venv</code>模块，我更喜欢 Virtualenv）。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220804528.jpeg\" alt=\"\">  </p>\n<p>virtualenvwrapper 是 virtualenv 的虚拟环境管理器。它提供了许多命令来执行快速创建、列出或删除虚拟环境等操作。</p>\n<p>virtualenv 下载地址：</p>\n<p><a href=\"https://pypi.org/project/virtualenv/\">https://pypi.org/project/virtualenv/</a></p>\n<h2 id=\"7-Homebrew\"><a href=\"#7-Homebrew\" class=\"headerlink\" title=\"7 Homebrew\"></a>7 Homebrew</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220810324.jpeg\" alt=\"\"></p>\n<p>如果你使用的是 Mac，那我就无需再介绍 Homebrew 了。它是 macOS 上被业界普遍认可的软件包管理器。</p>\n<p>下载地址：<a href=\"https://brew.sh/\">https://brew.sh/</a>  </p>\n<p>在Mac下面安装Mysql、Redis、Node之类软件的时候，比较方便的方式是使用Homebrew（号称是The missing package manager for OS X）。不过Homebrew是命令行方式，用起来不是那么的友好，所以就有了Cakebrew。</p>\n<p>网站：<a href=\"https://www.cakebrew.com/\">https://www.cakebrew.com/</a></p>\n<p>非常友好的图形界面，使用起来简单快捷。</p>\n<p>而LaunchRocket呢，则是一个帮助管理Homebrew安装的服务的软件，比如你使用Homebrew安装的Mysql、Redis、MongoDB，是让它自启动呢，还是手动启动，传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理了！</p>\n<p>网站：<a href=\"https://github.com/jimbojsb/launchrocket\">https://github.com/jimbojsb/launchrocket</a></p>\n<h2 id=\"8-tree\"><a href=\"#8-tree\" class=\"headerlink\" title=\"8 tree\"></a>8 tree</h2><p>你可以通过<code>brew install tree</code>安装该工具。如果要查看给定目录的内容，那么 tree 是执行此操作的必备工具。它能以漂亮的树状结构显示所有子目录及文件：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs reasonml\">$ tree .<br>.<br>├── recovery.md<br>├── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">README</span>.</span></span>md<br>├── archive<br>├── automator<br>│   ├── Open\\\\ <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Iterm2</span>.</span></span>workflow<br>│   │   └── Contents<br>│   │       ├── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Info</span>.</span></span>plist<br>│   │       ├── QuickLook<br>│   │       │   └── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Thumbnail</span>.</span></span>png<br>│   │       └── document.wflow<br>│   └── Start\\\\ Screen\\\\ <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Saver</span>.</span></span>workflow<br>├── brew-cask.sh<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"9-bat\"><a href=\"#9-bat\" class=\"headerlink\" title=\"9 bat\"></a>9 bat</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220820634.jpeg\" alt=\"\"></p>\n<p>类似于在终端中常用的用于显示文件内容的<code>cat</code>命令，但是<code>bat</code>效果更佳。</p>\n<p>它增加了语法高亮显示，git gutter 标记（如果适用），自动分页（如果文件很大）等功能，并且使得输出的内容阅读起来更加友好。</p>\n<p>bat 下载地址：<a href=\"https://github.com/sharkdp/bat\">https://github.com/sharkdp/bat</a></p>\n<h2 id=\"10-httpie\"><a href=\"#10-httpie\" class=\"headerlink\" title=\"10 httpie\"></a>10 httpie</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220827622.gif\" alt=\"\"></p>\n<p>如果你需要发送一些 HTTP 请求，但发现使用<code>curl</code>不够直观，那么请尝试一下<code>httpie</code>。这是一款非常好用的<code>curl</code>替代工具。合理的默认配置以及简洁的语法使它更易于使用，命令返回也是彩色输出，甚至支持为不同类型的身份验证安装相应的插件。</p>\n<p>httpie 下载地址：<a href=\"https://httpie.org/\">https://httpie.org/</a></p>\n<h2 id=\"11-tldr\"><a href=\"#11-tldr\" class=\"headerlink\" title=\"11 tldr\"></a>11 tldr</h2><p>简化版的命令帮助手册。“man pages” 包含了 Linux 软件的手册，这些手册解释了如何使用给定的命令。你可以尝试运行<code>man cat</code>或<code>man grep</code>来查看相关命令的帮助手册。它们描述的非常详细，有时可能难以掌握。因此，<code>tldr</code>社区的目的，就是将每个命令的帮助手册进行简化，方便用户查阅。</p>\n<p><code>tldr</code>适用于几乎所有的受欢迎的软件。正如我提到的，这是社区的努力和功劳，虽然不太可能包含所有的软件的简化帮助手册。但是当某个帮助手册被纳入管理并起作用时，它提供的信息通常就是你要查找的内容。</p>\n<p>比如，如果你要创建一些文件的 gzip 压缩存档，<code>man tar</code>可以为你提供可能的参数选择。而<code>tldr tar</code>会列出一些我们常见的示例——如图所示，第二个示例正是你要执行的操作：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220836708.jpeg\" alt=\"\">  </p>\n<p>“man pages” 展示的信息太全面了，但是很多时候使用<code>tldr</code>可以更快地帮你找到特定信息，这才是用户真正想要的。</p>\n<p>tldr 下载地址：<a href=\"https://tldr.sh/\">https://tldr.sh/</a></p>\n<h2 id=\"12-exa\"><a href=\"#12-exa\" class=\"headerlink\" title=\"12 exa\"></a>12 exa</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220843370.jpeg\" alt=\"\"></p>\n<p><code>exa</code>是<code>ls</code>命令的一个可替代方案。</p>\n<p>它色彩艳丽，还可以显示 git 状态等其他信息，自动将文件大小转换为方便人们阅读的单位，并且所有这些都保持与<code>ls</code>几乎相同的执行速度。虽然我很喜欢这个工具并推荐给你们，但由于某种原因，我仍然坚持使用 ls。</p>\n<p>exa 下载地址：<a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n<h2 id=\"13-litecli-和-mycli\"><a href=\"#13-litecli-和-mycli\" class=\"headerlink\" title=\"13 litecli 和 mycli\"></a>13 litecli 和 mycli</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220850333.gif\" alt=\"\"></p>\n<p>这是我首选的 SQLite 和 mysql的解决方案。借助自动提示和语法突出显示，它们比默认的<code>sqlite3</code>和<code>mysql</code>工具要好用很多。</p>\n<p>litecli 下载地址：<a href=\"https://litecli.com/\">https://litecli.com/</a></p>\n<p>mycli 下载地址：<a href=\"https://www.mycli.net/\">https://www.mycli.net/</a></p>\n<h2 id=\"14-ncdu\"><a href=\"#14-ncdu\" class=\"headerlink\" title=\"14 ncdu\"></a>14 ncdu</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220855650.jpeg\" alt=\"\"></p>\n<p>这是在终端进行磁盘分析时使用的工具，它使用起来简单快捷。当我需要释放一些硬盘空间时，会默认使用这款工具。</p>\n<p>ncdu 下载地址：<a href=\"https://dev.yorhel.nl/ncdu\">https://dev.yorhel.nl/ncdu</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Starship\"><a href=\"#1-Starship\" class=\"headerlink\" title=\"1 Starship\"></a>1 Starship</h2><p>如果必须要从本篇文章中选择一个我最喜欢的终端工具——那非 <code>Starship</code> 莫属。<code>Starship</code> 可以适用于任何 Shell。你只需要安装它，然后在相应的配置文件<code>.bashrc</code>/<code>.zshrc</code>添加一行配置，剩下的工作交给它来完成就好了。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(starship init bash)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n<p>它可以做到：</p>\n<ul>\n<li><p>根据你是否在代码仓库中添加了新文件、是否修改了文件、是否暂存了文件等情况，用相应的符号表示 <code>git</code> 仓库的状态。</p>\n</li>\n<li><p>根据你所在的 <code>Python</code> 项目目录，展示 Python 的版本号，这也适用于 <code>Go</code>/<code>Node</code>/<code>Rust</code>/<code>Elm</code> 等其他编程语言环境。</p>\n</li>\n<li><p>展示上一个命令执行所用的时间，指令运行时间必须在毫秒级别。</p>\n</li>\n<li><p>如果上一个命令执行失败，会展示相应的错误提示符。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640.jpeg\" alt=\"\">  </p>\n<p>还有不计其数的其他信息可以展示。但是，它能以更加友好的形式智能地给你呈现!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># startship 个性化配置</span><br>[character]      <span class=\"hljs-comment\"># 正在配置的组件名称是“character”</span><br>symbol = <span class=\"hljs-string\">&quot;&gt;&quot;</span>  <span class=\"hljs-comment\"># 提示符中在输入文本之前显示的符号</span><br>error_symbol = <span class=\"hljs-string\">&quot;✗&quot;</span> <span class=\"hljs-comment\"># 如果上一条命令失败，提示符中在输入文本之前显示的符号</span><br>use_symbol_for_status = <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 指示是否改变显示符号来指出错误状态</span><br>style_success = <span class=\"hljs-string\">&quot;bold green&quot;</span>\t<span class=\"hljs-comment\"># 上次命令成功时使用的样式</span><br>style_failure = <span class=\"hljs-string\">&quot;bold red&quot;</span>\t<span class=\"hljs-comment\"># 上次命令失败时使用的样式</span><br><br><span class=\"hljs-comment\"># 当 starship 扫描当前目录下的文件和文件夹时，最多使用 10 毫秒</span><br>scan_timeout = 10<br><br>[battery]<br>full_symbol = <span class=\"hljs-string\">&quot;🔋&quot;</span> <span class=\"hljs-comment\"># 电量满标志</span><br>charging_symbol = <span class=\"hljs-string\">&quot;⚡️&quot;</span> <span class=\"hljs-comment\"># 充电标志</span><br>discharging_symbol = <span class=\"hljs-string\">&quot;💀&quot;</span> <span class=\"hljs-comment\"># 放电标志</span><br><br>[[battery.display]]  <span class=\"hljs-comment\"># 当电量在 0% 到 30% 时以 &quot;bold red&quot; 样式显示</span><br>threshold = 30<br>style = <span class=\"hljs-string\">&quot;bold red&quot;</span><br><br>[[battery.display]]  <span class=\"hljs-comment\"># 当电量在 30% 到 100% 时以 &quot;bold yellow&quot; 样式显示</span><br>threshold = 100<br>style = <span class=\"hljs-string\">&quot;bold yellow&quot;</span><br><br><br>[cmd_duration]<br>min_time = 100 <span class=\"hljs-comment\"># 显示此组件所需的最短执行时长</span><br>prefix = <span class=\"hljs-string\">&quot;underwent &quot;</span> <span class=\"hljs-comment\"># 直接在执行时长前显示的前缀</span><br>style = <span class=\"hljs-string\">&quot;bold yellow&quot;</span> <span class=\"hljs-comment\"># 此组件的样式</span><br><br>[directory] <span class=\"hljs-comment\"># 显示当前目录的路径</span><br>truncation_length = 8 <span class=\"hljs-comment\"># 当前目录路径被截断后最多保留的父目录数量。</span><br>truncate_to_repo = <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否只截断到您当前处于的 git 仓库根目录下。</span><br>prefix = <span class=\"hljs-string\">&quot;in&quot;</span> <span class=\"hljs-comment\"># 直接在显示路径前显示的前缀。</span><br>style = <span class=\"hljs-string\">&quot;bold cyan&quot;</span> <span class=\"hljs-comment\"># 此组件的样式。</span><br><br>[time]<br>disabled = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 启用时间组件</span><br>use_12hr = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 禁用12小时制</span><br>format = <span class=\"hljs-string\">&quot;🕙[ %T ]&quot;</span> <span class=\"hljs-comment\"># 时间格式</span><br>time_range = <span class=\"hljs-string\">&quot;-&quot;</span> <span class=\"hljs-comment\"># 显示时间的范围，必须是24小时制</span><br></code></pre></td></tr></table></figure>\n<p>官网地址：<a href=\"https://starship.rs/\">https://starship.rs/</a></p>\n<h2 id=\"2-fzf\"><a href=\"#2-fzf\" class=\"headerlink\" title=\"2 fzf\"></a>2 fzf</h2><p>fzf— fuzzy finder，即模糊查找器。它是一种通用工具，可让你使用模糊搜索来查找文件、历史命令、进程、git 提交等。你键入一些字母，它会尝试匹配结果列表中任何位置的字母。输入的字母越多，结果也就越准确。你可能在其他的代码编辑器中有过这种类型的搜索使用体验——当你想打开某个文件时，只键入文件名的一部分而不用输入完整路径就能进行查找——这就是模糊搜索。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220059861.jpeg\" alt=\"\">  </p>\n<p>我通过 fish fzf 插件插件使用它，因此我可以搜索命令历史记录或快速打开文件。这是可以每天为我节省不少时间的一个非常棒的工具。</p>\n<p>fzf默认会以“extened-search”模式启动， 这种模式下你可以输入多个以空格分隔的搜索关键词， 如<code>^music .mp3$</code>, <code>sbtrkt !fire</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Token</th>\n<th>Match type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sbtrkt</td>\n<td>fuzzy-match</td>\n<td>匹配sbtrkt</td>\n</tr>\n<tr>\n<td>^music</td>\n<td>prefix-exact-match</td>\n<td>以music开头</td>\n</tr>\n<tr>\n<td>.mp3^</td>\n<td>suffix-exact-match</td>\n<td>以.mp3结尾</td>\n</tr>\n<tr>\n<td>‘wild</td>\n<td>exact-match(quoted)</td>\n<td>精确包含wild</td>\n</tr>\n<tr>\n<td>!fire</td>\n<td>inverse-exact-match</td>\n<td>不包含fire</td>\n</tr>\n<tr>\n<td>!.mp3$</td>\n<td>inverse-suffix-exact-match</td>\n<td>不以.mp3结尾</td>\n</tr>\n</tbody></table>\n<p>如果你不想用fuzzy match， 可以用<code>fzf -e</code>做精确匹配<br>符号”|”可以做or匹配， 比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">^core go$|rb$|py$<br></code></pre></td></tr></table></figure>\n<p>表示以core开头，以go或rb或py结尾的</p>\n<p>下载地址：<a href=\"https://github.com/junegunn/fzf\">https://github.com/junegunn/fzf</a></p>\n<h2 id=\"3-fd\"><a href=\"#3-fd\" class=\"headerlink\" title=\"3 fd\"></a>3 fd</h2><p>类似于系统自带的 <code>find</code> 命令，但使用起来更简单，查找速度更快，并且具有良好的默认设置。</p>\n<h3 id=\"简单搜索\"><a href=\"#简单搜索\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h3><p><em>fd<em>设计用于查找文件系统中的条目. 你可以执行的最基本的搜索就是运行一个参数:搜索模式的</em>fd</em>. 例如,假设您想查找您的旧脚本 (包括<code>netflix</code>) :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">&gt; fd netfl<br>Software/python/imdb-ratings/netflix-details.py<br></code></pre></td></tr></table></figure>\n<p>如果只调用一个这样的参数,<em>fd</em>递归检索当前目录中, <em>包含</em>模式<code>netfl</code>的任何条目.</p>\n<h3 id=\"正则表达式搜索\"><a href=\"#正则表达式搜索\" class=\"headerlink\" title=\"正则表达式搜索\"></a>正则表达式搜索</h3><p>搜索模式被视为正则表达式. 这里,我们搜索开始<code>x</code>并以<code>rc</code>结束的条目. :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> /etc<br>&gt; fd <span class=\"hljs-string\">&#x27;^x.*rc$&#x27;</span><br>X11/xinit/xinitrc<br>X11/xinit/xserverrc<br></code></pre></td></tr></table></figure>\n<h3 id=\"指定根目录\"><a href=\"#指定根目录\" class=\"headerlink\" title=\"指定根目录\"></a>指定根目录</h3><p>如果我们想搜索一个特定的目录,它可以作为第二个参数<em>fd</em>:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">&gt; fd passwd /etc<br><span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-keyword\">default</span>/passwd<br><span class=\"hljs-regexp\">/etc/</span>pam.d/passwd<br><span class=\"hljs-regexp\">/etc/</span>passwd<br></code></pre></td></tr></table></figure>\n<h3 id=\"仅运行fd\"><a href=\"#仅运行fd\" class=\"headerlink\" title=\"仅运行fd\"></a>仅运行<em>fd</em></h3><p><em>fd</em>可以不带参数调用. 这是非常有用的,以便快速地查看当前目录中的所有条目,递归地 (类似于<code>ls -R</code>) :</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> fd/tests<br>&gt; fd<br>testenv<br>testenv/mod.rs<br>tests.rs<br></code></pre></td></tr></table></figure>\n<h3 id=\"搜索特定的文件扩展名\"><a href=\"#搜索特定的文件扩展名\" class=\"headerlink\" title=\"搜索特定的文件扩展名\"></a>搜索特定的文件扩展名</h3><p>通常,我们对特定类型的所有文件感兴趣. 这可以用<code>-e</code> (或) <code>--extension</code>选择权. 在这里,我们搜索FD仓库中的所有md文件:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">&gt; <span class=\"hljs-built_in\">cd</span> fd<br>&gt; fd -e md<br>CONTRIBUTING.md<br>README.md<br></code></pre></td></tr></table></figure>\n<p>这个<code>-e</code>选项可以与搜索模式结合使用:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">&gt; fd -e rs mod<br>src/fshelper/mod.rs<br>src/lscolors/mod.rs<br>tests/testenv/mod.rs<br></code></pre></td></tr></table></figure>\n<p>下载地址：<a href=\"https://github.com/sharkdp/fd\">https://github.com/sharkdp/fd</a></p>\n<h2 id=\"4-ripgrep\"><a href=\"#4-ripgrep\" class=\"headerlink\" title=\"4 ripgrep\"></a>4 ripgrep</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220618373.gif\" alt=\"\"></p>\n<p>上图为 grep（左）与 rg（右）命令执行时的对比。</p>\n<p>与上述<code>fd</code>指令类似，<code>ripgrep</code>是<code>grep</code>命令的替代方法， 不过<code>ripgrep</code>的执行速度更快，而且具有健全的默认配置以及丰富的彩色输出。</p>\n<p>它同样会跳过被<code>.gitignore</code>忽略以及隐藏的文件，因此如果有特殊需要，我们可以设置指令别名：<code>rga =&#39;rg -uuu&#39;</code>。它会禁用所有智能筛选，并使<code>ripgrep</code>的表现与标准的 grep 指令一致。</p>\n<h3 id=\"简单搜索-1\"><a href=\"#简单搜索-1\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ls | rg App<br></code></pre></td></tr></table></figure>\n<h3 id=\"正则表达式搜索-1\"><a href=\"#正则表达式搜索-1\" class=\"headerlink\" title=\"正则表达式搜索\"></a>正则表达式搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ls | rg ^App.*$<br></code></pre></td></tr></table></figure>\n<h3 id=\"指定文件搜索\"><a href=\"#指定文件搜索\" class=\"headerlink\" title=\"指定文件搜索\"></a>指定文件搜索</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">rg  ^def.*$ 01_two-sum.py<br></code></pre></td></tr></table></figure>\n<p>下载地址：<a href=\"https://github.com/BurntSushi/ripgrep\">https://github.com/BurntSushi/ripgrep</a></p>\n<h2 id=\"5-htop-和-glances\"><a href=\"#5-htop-和-glances\" class=\"headerlink\" title=\"5 htop 和 glances\"></a>5 htop 和 glances</h2><p>在 Linux 或 Mac 上显示进程运行状态信息最常用工具是我们熟悉的<code>top</code>，它是每位系统管理员的好帮手。而且，即使是像我一样主要从事网络开发，查看计算机的运行状况也很有用。你知道，只是看一下当前到底是 Docker 进程还是 Chrome 进程吃掉了你所有的 RAM，应该如何做吗？</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220647892.jpeg\" alt=\"\">  </p>\n<p><code>htop</code>工具是<code>top</code>工具的绝佳替代品。</p>\n<p><code>top</code>工具是非常基础的监控工具，提供的功能有限，因此很多人转去使用 htop。<code>htop</code>比起<code>top</code>，优势很明显——除了功能更加完善以外，它的色彩搭配也很丰富，整体上使用起来更加友好。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220657583.jpeg\" alt=\"\">  </p>\n<p>借助 glances，还可以让你一目了然地快速了解系统当前状态。</p>\n<p>glances 是<code>htop</code>的补充工具。除了列出所有进程及其 CPU 和内存使用情况之外，它还可以显示有关系统的其他信息，比如：</p>\n<ul>\n<li><p>网络及磁盘使用情况</p>\n</li>\n<li><p>文件系统已使用的空间和总空间</p>\n</li>\n<li><p>来自不同传感器（例如电池）的数据</p>\n</li>\n<li><p>以及最近消耗过多资源的进程列表</p>\n</li>\n</ul>\n<p>我选择使用<code>htop</code>来筛选和终止进程，因为对我来讲，效率提高了不少，我也使用 <code>glances</code>可以快速浏览一下计算机的运行状况。它提供 API 接口、Web UI 以及支持各种导出格式，因此你可以将系统监视提高到一个新 Level。因此我在这里强烈推荐一波！</p>\n<p>htop 下载地址：<a href=\"https://hisham.hm/htop/\">https://hisham.hm/htop/</a></p>\n<p>glances 下载地址：<a href=\"https://nicolargo.github.io/glances/\">https://nicolargo.github.io/glances/</a></p>\n<h2 id=\"6-virtualenv\"><a href=\"#6-virtualenv\" class=\"headerlink\" title=\"6 virtualenv\"></a>6 virtualenv</h2><p>Virtualenv 是用于在 Python 中创建虚拟环境的工具（比起内置的<code>venv</code>模块，我更喜欢 Virtualenv）。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220804528.jpeg\" alt=\"\">  </p>\n<p>virtualenvwrapper 是 virtualenv 的虚拟环境管理器。它提供了许多命令来执行快速创建、列出或删除虚拟环境等操作。</p>\n<p>virtualenv 下载地址：</p>\n<p><a href=\"https://pypi.org/project/virtualenv/\">https://pypi.org/project/virtualenv/</a></p>\n<h2 id=\"7-Homebrew\"><a href=\"#7-Homebrew\" class=\"headerlink\" title=\"7 Homebrew\"></a>7 Homebrew</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220810324.jpeg\" alt=\"\"></p>\n<p>如果你使用的是 Mac，那我就无需再介绍 Homebrew 了。它是 macOS 上被业界普遍认可的软件包管理器。</p>\n<p>下载地址：<a href=\"https://brew.sh/\">https://brew.sh/</a>  </p>\n<p>在Mac下面安装Mysql、Redis、Node之类软件的时候，比较方便的方式是使用Homebrew（号称是The missing package manager for OS X）。不过Homebrew是命令行方式，用起来不是那么的友好，所以就有了Cakebrew。</p>\n<p>网站：<a href=\"https://www.cakebrew.com/\">https://www.cakebrew.com/</a></p>\n<p>非常友好的图形界面，使用起来简单快捷。</p>\n<p>而LaunchRocket呢，则是一个帮助管理Homebrew安装的服务的软件，比如你使用Homebrew安装的Mysql、Redis、MongoDB，是让它自启动呢，还是手动启动，传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理了！</p>\n<p>网站：<a href=\"https://github.com/jimbojsb/launchrocket\">https://github.com/jimbojsb/launchrocket</a></p>\n<h2 id=\"8-tree\"><a href=\"#8-tree\" class=\"headerlink\" title=\"8 tree\"></a>8 tree</h2><p>你可以通过<code>brew install tree</code>安装该工具。如果要查看给定目录的内容，那么 tree 是执行此操作的必备工具。它能以漂亮的树状结构显示所有子目录及文件：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">$ tree .<br>.<br>├── recovery.md<br>├── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">README</span>.</span></span>md<br>├── archive<br>├── automator<br>│   ├── Open\\\\ <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Iterm2</span>.</span></span>workflow<br>│   │   └── Contents<br>│   │       ├── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Info</span>.</span></span>plist<br>│   │       ├── QuickLook<br>│   │       │   └── <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Thumbnail</span>.</span></span>png<br>│   │       └── document.wflow<br>│   └── Start\\\\ Screen\\\\ <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Saver</span>.</span></span>workflow<br>├── brew-cask.sh<br></code></pre></td></tr></table></figure>\n<h2 id=\"9-bat\"><a href=\"#9-bat\" class=\"headerlink\" title=\"9 bat\"></a>9 bat</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220820634.jpeg\" alt=\"\"></p>\n<p>类似于在终端中常用的用于显示文件内容的<code>cat</code>命令，但是<code>bat</code>效果更佳。</p>\n<p>它增加了语法高亮显示，git gutter 标记（如果适用），自动分页（如果文件很大）等功能，并且使得输出的内容阅读起来更加友好。</p>\n<p>bat 下载地址：<a href=\"https://github.com/sharkdp/bat\">https://github.com/sharkdp/bat</a></p>\n<h2 id=\"10-httpie\"><a href=\"#10-httpie\" class=\"headerlink\" title=\"10 httpie\"></a>10 httpie</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220827622.gif\" alt=\"\"></p>\n<p>如果你需要发送一些 HTTP 请求，但发现使用<code>curl</code>不够直观，那么请尝试一下<code>httpie</code>。这是一款非常好用的<code>curl</code>替代工具。合理的默认配置以及简洁的语法使它更易于使用，命令返回也是彩色输出，甚至支持为不同类型的身份验证安装相应的插件。</p>\n<p>httpie 下载地址：<a href=\"https://httpie.org/\">https://httpie.org/</a></p>\n<h2 id=\"11-tldr\"><a href=\"#11-tldr\" class=\"headerlink\" title=\"11 tldr\"></a>11 tldr</h2><p>简化版的命令帮助手册。“man pages” 包含了 Linux 软件的手册，这些手册解释了如何使用给定的命令。你可以尝试运行<code>man cat</code>或<code>man grep</code>来查看相关命令的帮助手册。它们描述的非常详细，有时可能难以掌握。因此，<code>tldr</code>社区的目的，就是将每个命令的帮助手册进行简化，方便用户查阅。</p>\n<p><code>tldr</code>适用于几乎所有的受欢迎的软件。正如我提到的，这是社区的努力和功劳，虽然不太可能包含所有的软件的简化帮助手册。但是当某个帮助手册被纳入管理并起作用时，它提供的信息通常就是你要查找的内容。</p>\n<p>比如，如果你要创建一些文件的 gzip 压缩存档，<code>man tar</code>可以为你提供可能的参数选择。而<code>tldr tar</code>会列出一些我们常见的示例——如图所示，第二个示例正是你要执行的操作：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220836708.jpeg\" alt=\"\">  </p>\n<p>“man pages” 展示的信息太全面了，但是很多时候使用<code>tldr</code>可以更快地帮你找到特定信息，这才是用户真正想要的。</p>\n<p>tldr 下载地址：<a href=\"https://tldr.sh/\">https://tldr.sh/</a></p>\n<h2 id=\"12-exa\"><a href=\"#12-exa\" class=\"headerlink\" title=\"12 exa\"></a>12 exa</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220843370.jpeg\" alt=\"\"></p>\n<p><code>exa</code>是<code>ls</code>命令的一个可替代方案。</p>\n<p>它色彩艳丽，还可以显示 git 状态等其他信息，自动将文件大小转换为方便人们阅读的单位，并且所有这些都保持与<code>ls</code>几乎相同的执行速度。虽然我很喜欢这个工具并推荐给你们，但由于某种原因，我仍然坚持使用 ls。</p>\n<p>exa 下载地址：<a href=\"https://the.exa.website/\">https://the.exa.website/</a></p>\n<h2 id=\"13-litecli-和-mycli\"><a href=\"#13-litecli-和-mycli\" class=\"headerlink\" title=\"13 litecli 和 mycli\"></a>13 litecli 和 mycli</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220850333.gif\" alt=\"\"></p>\n<p>这是我首选的 SQLite 和 mysql的解决方案。借助自动提示和语法突出显示，它们比默认的<code>sqlite3</code>和<code>mysql</code>工具要好用很多。</p>\n<p>litecli 下载地址：<a href=\"https://litecli.com/\">https://litecli.com/</a></p>\n<p>mycli 下载地址：<a href=\"https://www.mycli.net/\">https://www.mycli.net/</a></p>\n<h2 id=\"14-ncdu\"><a href=\"#14-ncdu\" class=\"headerlink\" title=\"14 ncdu\"></a>14 ncdu</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220855650.jpeg\" alt=\"\"></p>\n<p>这是在终端进行磁盘分析时使用的工具，它使用起来简单快捷。当我需要释放一些硬盘空间时，会默认使用这款工具。</p>\n<p>ncdu 下载地址：<a href=\"https://dev.yorhel.nl/ncdu\">https://dev.yorhel.nl/ncdu</a></p>\n"},{"title":"GitBook教程","date":"2019-03-31T03:58:35.000Z","_content":"\n> GitBook 是一个基于`Node.js`的命令行工具，可以使用`Markdown`来制作电子书，并利用`Git/Github`发布。\n\n支持输出`静态站点`、`PDF`、`eBook`、`HTML网页`等格式。\n\n安装 GitBook 需要 Node 环境，具体怎么安装 Node 这里就不多说了。\n\n## 安装 GitBook\n\n```bash\nnpm install -g gitbook-cli\n# OR\nyarn global add gitbook-cli\n```\n\n检查是否安装成功\n\n```bash\ngitbook -V\n```\n\n## 导出电子书\n\n打开到 gitbook 的目录下\n\n### 1、输出静态网页\n\n```bash\n$ gitbook serve .\nPress CTRL+C to quit ...\n\nStarting build ...\nSuccessfuly built !\n\nStarting server ...\nServing book on http://localhost:4000   \n```\n\n这时候就可以打开 [http://localhost:4000](http://localhost:4000/)：进行预览\n\n同时在项目的目录中多了一个 `_book` 的文件夹，其中的文件就是生成的静态网页的内容。\n\n### 2、导出 PDF\n\n在项目的目录中执行\n\n```bash\ngitbook pdf .\n```\n\n项目目录下就会生成 `book.pdf`\n\n### 3、导出 epub\n\n在项目目录中执行\n\n```bash\ngitbook epub .  \n```\n\n项目目录下就会生成 `book.epub`\n\n## 解决静态网页不能跳转问题\n\n- 在导出的文件夹目录下找到gitbook->theme.js文件\n\n- 找到下面的代码搜索`if(m)for(n.handler&&`\n\n- 将if(m)改成if(false)\n  \n  ```js\n  if(false)for(n.handler&&(i=n,n=i.handler,o=i.selector),o&&de.find.matchesSelector(Ye,o),n.guid||(n.guid=de.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return\"undefined\"!=typeof de&&de.event.triggered!==t.type?de.event.dispatch.apply(e,arguments):void 0}),t=(t||\"\").match(qe)||[\"\"],l=t.length;l--;)s=Ze.exec(t[l])||[],h=g=s[1],d=(s[2]||\"\").split(\".\").sort(),h&&(f=de.event.special[h]||{},h=(o?f.delegateType:f.bindType)||h,f=de.event.special[h]||{},c=de.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&de.expr.match.needsContext.test(o),namespace:d.join(\".\")},i),(p=u[h])||(p=u[h]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,d,a)!==!1||e.addEventListener&&e.addEventListener(h,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),de.event.global[h]=!0)}\n  ```\n","source":"_posts/教程-GitBook教程.md","raw":"---\ntitle: GitBook教程\ncategories:\n  - 教程\ntags:\n  - GitBook\ndate: 2019-03-31 11:58:35\n---\n\n> GitBook 是一个基于`Node.js`的命令行工具，可以使用`Markdown`来制作电子书，并利用`Git/Github`发布。\n\n支持输出`静态站点`、`PDF`、`eBook`、`HTML网页`等格式。\n\n安装 GitBook 需要 Node 环境，具体怎么安装 Node 这里就不多说了。\n\n## 安装 GitBook\n\n```bash\nnpm install -g gitbook-cli\n# OR\nyarn global add gitbook-cli\n```\n\n检查是否安装成功\n\n```bash\ngitbook -V\n```\n\n## 导出电子书\n\n打开到 gitbook 的目录下\n\n### 1、输出静态网页\n\n```bash\n$ gitbook serve .\nPress CTRL+C to quit ...\n\nStarting build ...\nSuccessfuly built !\n\nStarting server ...\nServing book on http://localhost:4000   \n```\n\n这时候就可以打开 [http://localhost:4000](http://localhost:4000/)：进行预览\n\n同时在项目的目录中多了一个 `_book` 的文件夹，其中的文件就是生成的静态网页的内容。\n\n### 2、导出 PDF\n\n在项目的目录中执行\n\n```bash\ngitbook pdf .\n```\n\n项目目录下就会生成 `book.pdf`\n\n### 3、导出 epub\n\n在项目目录中执行\n\n```bash\ngitbook epub .  \n```\n\n项目目录下就会生成 `book.epub`\n\n## 解决静态网页不能跳转问题\n\n- 在导出的文件夹目录下找到gitbook->theme.js文件\n\n- 找到下面的代码搜索`if(m)for(n.handler&&`\n\n- 将if(m)改成if(false)\n  \n  ```js\n  if(false)for(n.handler&&(i=n,n=i.handler,o=i.selector),o&&de.find.matchesSelector(Ye,o),n.guid||(n.guid=de.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return\"undefined\"!=typeof de&&de.event.triggered!==t.type?de.event.dispatch.apply(e,arguments):void 0}),t=(t||\"\").match(qe)||[\"\"],l=t.length;l--;)s=Ze.exec(t[l])||[],h=g=s[1],d=(s[2]||\"\").split(\".\").sort(),h&&(f=de.event.special[h]||{},h=(o?f.delegateType:f.bindType)||h,f=de.event.special[h]||{},c=de.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&de.expr.match.needsContext.test(o),namespace:d.join(\".\")},i),(p=u[h])||(p=u[h]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,d,a)!==!1||e.addEventListener&&e.addEventListener(h,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),de.event.global[h]=!0)}\n  ```\n","slug":"教程-GitBook教程","published":1,"updated":"2021-01-25T02:57:21.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudb003gjjln7fha2edh","content":"<blockquote>\n<p>GitBook 是一个基于<code>Node.js</code>的命令行工具，可以使用<code>Markdown</code>来制作电子书，并利用<code>Git/Github</code>发布。</p>\n</blockquote>\n<p>支持输出<code>静态站点</code>、<code>PDF</code>、<code>eBook</code>、<code>HTML网页</code>等格式。</p>\n<p>安装 GitBook 需要 Node 环境，具体怎么安装 Node 这里就不多说了。</p>\n<h2 id=\"安装-GitBook\"><a href=\"#安装-GitBook\" class=\"headerlink\" title=\"安装 GitBook\"></a>安装 GitBook</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">npm install -g gitbook-cli<br><span class=\"hljs-comment\"># OR</span><br>yarn global add gitbook-cli<br></code></pre></div></td></tr></table></figure>\n<p>检查是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">gitbook -V<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"导出电子书\"><a href=\"#导出电子书\" class=\"headerlink\" title=\"导出电子书\"></a>导出电子书</h2><p>打开到 gitbook 的目录下</p>\n<h3 id=\"1、输出静态网页\"><a href=\"#1、输出静态网页\" class=\"headerlink\" title=\"1、输出静态网页\"></a>1、输出静态网页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">$ gitbook serve .<br>Press CTRL+C to quit ...<br><br>Starting build ...<br>Successfuly built !<br><br>Starting server ...<br>Serving book on http://localhost:4000   <br></code></pre></div></td></tr></table></figure>\n<p>这时候就可以打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a>：进行预览</p>\n<p>同时在项目的目录中多了一个 <code>_book</code> 的文件夹，其中的文件就是生成的静态网页的内容。</p>\n<h3 id=\"2、导出-PDF\"><a href=\"#2、导出-PDF\" class=\"headerlink\" title=\"2、导出 PDF\"></a>2、导出 PDF</h3><p>在项目的目录中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">gitbook pdf .<br></code></pre></div></td></tr></table></figure>\n<p>项目目录下就会生成 <code>book.pdf</code></p>\n<h3 id=\"3、导出-epub\"><a href=\"#3、导出-epub\" class=\"headerlink\" title=\"3、导出 epub\"></a>3、导出 epub</h3><p>在项目目录中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">gitbook epub .  <br></code></pre></div></td></tr></table></figure>\n<p>项目目录下就会生成 <code>book.epub</code></p>\n<h2 id=\"解决静态网页不能跳转问题\"><a href=\"#解决静态网页不能跳转问题\" class=\"headerlink\" title=\"解决静态网页不能跳转问题\"></a>解决静态网页不能跳转问题</h2><ul>\n<li><p>在导出的文件夹目录下找到gitbook-&gt;theme.js文件</p>\n</li>\n<li><p>找到下面的代码搜索<code>if(m)for(n.handler&amp;&amp;</code></p>\n</li>\n<li><p>将if(m)改成if(false)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span>)<span class=\"hljs-keyword\">for</span>(n.handler&amp;&amp;(i=n,n=i.handler,o=i.selector),o&amp;&amp;de.find.matchesSelector(Ye,o),n.guid||(n.guid=de.guid++),(u=m.events)||(u=m.events=&#123;&#125;),(a=m.handle)||(a=m.handle=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>)</span>&#123;<span class=\"hljs-keyword\">return</span><span class=\"hljs-string\">&quot;undefined&quot;</span>!=<span class=\"hljs-keyword\">typeof</span> de&amp;&amp;de.event.triggered!==t.type?de.event.dispatch.apply(e,<span class=\"hljs-built_in\">arguments</span>):<span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>&#125;),t=(t||<span class=\"hljs-string\">&quot;&quot;</span>).match(qe)||[<span class=\"hljs-string\">&quot;&quot;</span>],l=t.length;l--;)s=Ze.exec(t[l])||[],h=g=s[<span class=\"hljs-number\">1</span>],d=(s[<span class=\"hljs-number\">2</span>]||<span class=\"hljs-string\">&quot;&quot;</span>).split(<span class=\"hljs-string\">&quot;.&quot;</span>).sort(),h&amp;&amp;(f=de.event.special[h]||&#123;&#125;,h=(o?f.delegateType:f.bindType)||h,f=de.event.special[h]||&#123;&#125;,c=de.extend(&#123;<span class=\"hljs-attr\">type</span>:h,<span class=\"hljs-attr\">origType</span>:g,<span class=\"hljs-attr\">data</span>:r,<span class=\"hljs-attr\">handler</span>:n,<span class=\"hljs-attr\">guid</span>:n.guid,<span class=\"hljs-attr\">selector</span>:o,<span class=\"hljs-attr\">needsContext</span>:o&amp;&amp;de.expr.match.needsContext.test(o),<span class=\"hljs-attr\">namespace</span>:d.join(<span class=\"hljs-string\">&quot;.&quot;</span>)&#125;,i),(p=u[h])||(p=u[h]=[],p.delegateCount=<span class=\"hljs-number\">0</span>,f.setup&amp;&amp;f.setup.call(e,r,d,a)!==!<span class=\"hljs-number\">1</span>||e.addEventListener&amp;&amp;e.addEventListener(h,a)),f.add&amp;&amp;(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,<span class=\"hljs-number\">0</span>,c):p.push(c),de.event.global[h]=!<span class=\"hljs-number\">0</span>)&#125;<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>GitBook 是一个基于<code>Node.js</code>的命令行工具，可以使用<code>Markdown</code>来制作电子书，并利用<code>Git/Github</code>发布。</p>\n</blockquote>\n<p>支持输出<code>静态站点</code>、<code>PDF</code>、<code>eBook</code>、<code>HTML网页</code>等格式。</p>\n<p>安装 GitBook 需要 Node 环境，具体怎么安装 Node 这里就不多说了。</p>\n<h2 id=\"安装-GitBook\"><a href=\"#安装-GitBook\" class=\"headerlink\" title=\"安装 GitBook\"></a>安装 GitBook</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g gitbook-cli<br><span class=\"hljs-comment\"># OR</span><br>yarn global add gitbook-cli<br></code></pre></td></tr></table></figure>\n<p>检查是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">gitbook -V<br></code></pre></td></tr></table></figure>\n<h2 id=\"导出电子书\"><a href=\"#导出电子书\" class=\"headerlink\" title=\"导出电子书\"></a>导出电子书</h2><p>打开到 gitbook 的目录下</p>\n<h3 id=\"1、输出静态网页\"><a href=\"#1、输出静态网页\" class=\"headerlink\" title=\"1、输出静态网页\"></a>1、输出静态网页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ gitbook serve .<br>Press CTRL+C to quit ...<br><br>Starting build ...<br>Successfuly built !<br><br>Starting server ...<br>Serving book on http://localhost:4000   <br></code></pre></td></tr></table></figure>\n<p>这时候就可以打开 <a href=\"http://localhost:4000/\">http://localhost:4000</a>：进行预览</p>\n<p>同时在项目的目录中多了一个 <code>_book</code> 的文件夹，其中的文件就是生成的静态网页的内容。</p>\n<h3 id=\"2、导出-PDF\"><a href=\"#2、导出-PDF\" class=\"headerlink\" title=\"2、导出 PDF\"></a>2、导出 PDF</h3><p>在项目的目录中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">gitbook pdf .<br></code></pre></td></tr></table></figure>\n<p>项目目录下就会生成 <code>book.pdf</code></p>\n<h3 id=\"3、导出-epub\"><a href=\"#3、导出-epub\" class=\"headerlink\" title=\"3、导出 epub\"></a>3、导出 epub</h3><p>在项目目录中执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">gitbook epub .  <br></code></pre></td></tr></table></figure>\n<p>项目目录下就会生成 <code>book.epub</code></p>\n<h2 id=\"解决静态网页不能跳转问题\"><a href=\"#解决静态网页不能跳转问题\" class=\"headerlink\" title=\"解决静态网页不能跳转问题\"></a>解决静态网页不能跳转问题</h2><ul>\n<li><p>在导出的文件夹目录下找到gitbook-&gt;theme.js文件</p>\n</li>\n<li><p>找到下面的代码搜索<code>if(m)for(n.handler&amp;&amp;</code></p>\n</li>\n<li><p>将if(m)改成if(false)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span>)<span class=\"hljs-keyword\">for</span>(n.handler&amp;&amp;(i=n,n=i.handler,o=i.selector),o&amp;&amp;de.find.matchesSelector(Ye,o),n.guid||(n.guid=de.guid++),(u=m.events)||(u=m.events=&#123;&#125;),(a=m.handle)||(a=m.handle=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>)</span>&#123;<span class=\"hljs-keyword\">return</span><span class=\"hljs-string\">&quot;undefined&quot;</span>!=<span class=\"hljs-keyword\">typeof</span> de&amp;&amp;de.event.triggered!==t.type?de.event.dispatch.apply(e,<span class=\"hljs-built_in\">arguments</span>):<span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>&#125;),t=(t||<span class=\"hljs-string\">&quot;&quot;</span>).match(qe)||[<span class=\"hljs-string\">&quot;&quot;</span>],l=t.length;l--;)s=Ze.exec(t[l])||[],h=g=s[<span class=\"hljs-number\">1</span>],d=(s[<span class=\"hljs-number\">2</span>]||<span class=\"hljs-string\">&quot;&quot;</span>).split(<span class=\"hljs-string\">&quot;.&quot;</span>).sort(),h&amp;&amp;(f=de.event.special[h]||&#123;&#125;,h=(o?f.delegateType:f.bindType)||h,f=de.event.special[h]||&#123;&#125;,c=de.extend(&#123;<span class=\"hljs-attr\">type</span>:h,<span class=\"hljs-attr\">origType</span>:g,<span class=\"hljs-attr\">data</span>:r,<span class=\"hljs-attr\">handler</span>:n,<span class=\"hljs-attr\">guid</span>:n.guid,<span class=\"hljs-attr\">selector</span>:o,<span class=\"hljs-attr\">needsContext</span>:o&amp;&amp;de.expr.match.needsContext.test(o),<span class=\"hljs-attr\">namespace</span>:d.join(<span class=\"hljs-string\">&quot;.&quot;</span>)&#125;,i),(p=u[h])||(p=u[h]=[],p.delegateCount=<span class=\"hljs-number\">0</span>,f.setup&amp;&amp;f.setup.call(e,r,d,a)!==!<span class=\"hljs-number\">1</span>||e.addEventListener&amp;&amp;e.addEventListener(h,a)),f.add&amp;&amp;(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,<span class=\"hljs-number\">0</span>,c):p.push(c),de.event.global[h]=!<span class=\"hljs-number\">0</span>)&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Hexo博客配置教程","date":"2019-03-23T13:51:51.000Z","_content":"实现Hexo + GitHub 搭建博客。\n\n## Hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。\n\n> 注意: 查看[文档](https://hexo.io/docs/)以获取更多信息。如果使用Hexo时遇到任何问题，可以在[故障排除](https://hexo.io/docs/troubleshooting.html)中找到答案，或者可以在[GitHub](https://github.com/hexojs/hexo/issues)上询问。\n\n## hexo教程\n\n1. git和nodejs安装好后，就可以安装hexo了\n\n  ```shell\n  npm install hexo-cli -g\n  npm install hexo --save\n  ```\n  依旧用hexo -v查看一下版本\n\n  至此就全部安装完了。\n\n2. 接下来初始化一下hexo\n  ```shell\n  hexo init\n  ```\n\n3. 创建一个新帖子\n\n  ``` bash\n  $ hexo new \"我的新帖子\"\n  ```\n\n  更多信息：[写作](https://hexo.io/docs/writing.html)\n\n4. 运行服务器\n\n  ``` bash\n  $ hexo server\n  ```\n\n  更多信息：[服务器](https://hexo.io/docs/server.html)\n\n5. 生成静态文件\n\n  ``` bash\n  $ hexo generate\n  ```\n\n  更多信息：[生成](https://hexo.io/docs/generating.html)\n\n6. 部署到远程站点\n\n  ``` bash\n  $ hexo deploy\n  ```\n\n  更多信息：[部署](https://hexo.io/docs/deployment.html)\n\n## Hexo中添加本地图片\n\n1. 把主页配置文件`_config.yml` 里的`post_asset_folder:`这个选项设置为`true`\n\n2. 在你的hexo目录下执行这样一句话`npm install hexo-asset-image --save`，这是下载安装一个可以上传本地图片的插件\n\n3. 等待一小段时间后，再运行`hexo n \"xxxx\"`来生成md博文时，`/source/_posts`文件夹内除了`xxxx.md`文件还有一个同名的文件夹\n\n4. 最后在`xxxx.md`中想引入图片时，先把图片复制到`xxxx`这个文件夹中，然后只需要在`xxxx.md`中按照markdown的格式引入图片：\n\n   ```markdown\n   ![你想输入的替代文字](xxxx/图片名.jpg)\n   ```\n\n   > `xxxx`是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入`xxxx`这个文件夹内就好了，很像引用相对路径。\n","source":"_posts/教程-Hexo博客配置教程.md","raw":"---\ntitle: Hexo博客配置教程\ncategories:\n  - 教程\ntags:\n  - Hexo\ndate: 2019-03-23 21:51:51\n---\n实现Hexo + GitHub 搭建博客。\n\n## Hexo简介\n\nHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。\n\n> 注意: 查看[文档](https://hexo.io/docs/)以获取更多信息。如果使用Hexo时遇到任何问题，可以在[故障排除](https://hexo.io/docs/troubleshooting.html)中找到答案，或者可以在[GitHub](https://github.com/hexojs/hexo/issues)上询问。\n\n## hexo教程\n\n1. git和nodejs安装好后，就可以安装hexo了\n\n  ```shell\n  npm install hexo-cli -g\n  npm install hexo --save\n  ```\n  依旧用hexo -v查看一下版本\n\n  至此就全部安装完了。\n\n2. 接下来初始化一下hexo\n  ```shell\n  hexo init\n  ```\n\n3. 创建一个新帖子\n\n  ``` bash\n  $ hexo new \"我的新帖子\"\n  ```\n\n  更多信息：[写作](https://hexo.io/docs/writing.html)\n\n4. 运行服务器\n\n  ``` bash\n  $ hexo server\n  ```\n\n  更多信息：[服务器](https://hexo.io/docs/server.html)\n\n5. 生成静态文件\n\n  ``` bash\n  $ hexo generate\n  ```\n\n  更多信息：[生成](https://hexo.io/docs/generating.html)\n\n6. 部署到远程站点\n\n  ``` bash\n  $ hexo deploy\n  ```\n\n  更多信息：[部署](https://hexo.io/docs/deployment.html)\n\n## Hexo中添加本地图片\n\n1. 把主页配置文件`_config.yml` 里的`post_asset_folder:`这个选项设置为`true`\n\n2. 在你的hexo目录下执行这样一句话`npm install hexo-asset-image --save`，这是下载安装一个可以上传本地图片的插件\n\n3. 等待一小段时间后，再运行`hexo n \"xxxx\"`来生成md博文时，`/source/_posts`文件夹内除了`xxxx.md`文件还有一个同名的文件夹\n\n4. 最后在`xxxx.md`中想引入图片时，先把图片复制到`xxxx`这个文件夹中，然后只需要在`xxxx.md`中按照markdown的格式引入图片：\n\n   ```markdown\n   ![你想输入的替代文字](xxxx/图片名.jpg)\n   ```\n\n   > `xxxx`是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入`xxxx`这个文件夹内就好了，很像引用相对路径。\n","slug":"教程-Hexo博客配置教程","published":1,"updated":"2021-01-25T02:58:34.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudc003jjjln3jmtgtnk","content":"<p>实现Hexo + GitHub 搭建博客。</p>\n<h2 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<blockquote>\n<p>注意: 查看<a href=\"https://hexo.io/docs/\">文档</a>以获取更多信息。如果使用Hexo时遇到任何问题，可以在<a href=\"https://hexo.io/docs/troubleshooting.html\">故障排除</a>中找到答案，或者可以在<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>上询问。</p>\n</blockquote>\n<h2 id=\"hexo教程\"><a href=\"#hexo教程\" class=\"headerlink\" title=\"hexo教程\"></a>hexo教程</h2><ol>\n<li><p>git和nodejs安装好后，就可以安装hexo了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">npm install hexo-cli -g<br>npm install hexo --save<br></code></pre></div></td></tr></table></figure>\n<p>依旧用hexo -v查看一下版本</p>\n<p>至此就全部安装完了。</p>\n</li>\n<li><p>接下来初始化一下hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">hexo init<br></code></pre></div></td></tr></table></figure></li>\n<li><p>创建一个新帖子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;我的新帖子&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n</li>\n<li><p>运行服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></div></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\">服务器</a></p>\n</li>\n<li><p>生成静态文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></div></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\">生成</a></p>\n</li>\n<li><p>部署到远程站点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></div></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/deployment.html\">部署</a></p>\n</li>\n</ol>\n<h2 id=\"Hexo中添加本地图片\"><a href=\"#Hexo中添加本地图片\" class=\"headerlink\" title=\"Hexo中添加本地图片\"></a>Hexo中添加本地图片</h2><ol>\n<li><p>把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>\n</li>\n<li><p>在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件</p>\n</li>\n<li><p>等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p>\n</li>\n<li><p>最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到<code>xxxx</code>这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs markdown\">![<span class=\"hljs-string\">你想输入的替代文字</span>](<span class=\"hljs-link\">xxxx/图片名.jpg</span>)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><code>xxxx</code>是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入<code>xxxx</code>这个文件夹内就好了，很像引用相对路径。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>实现Hexo + GitHub 搭建博客。</p>\n<h2 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>\n<blockquote>\n<p>注意: 查看<a href=\"https://hexo.io/docs/\">文档</a>以获取更多信息。如果使用Hexo时遇到任何问题，可以在<a href=\"https://hexo.io/docs/troubleshooting.html\">故障排除</a>中找到答案，或者可以在<a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>上询问。</p>\n</blockquote>\n<h2 id=\"hexo教程\"><a href=\"#hexo教程\" class=\"headerlink\" title=\"hexo教程\"></a>hexo教程</h2><ol>\n<li><p>git和nodejs安装好后，就可以安装hexo了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">npm install hexo-cli -g<br>npm install hexo --save<br></code></pre></td></tr></table></figure>\n<p>依旧用hexo -v查看一下版本</p>\n<p>至此就全部安装完了。</p>\n</li>\n<li><p>接下来初始化一下hexo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hexo init<br></code></pre></td></tr></table></figure></li>\n<li><p>创建一个新帖子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;我的新帖子&quot;</span><br></code></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n</li>\n<li><p>运行服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\">服务器</a></p>\n</li>\n<li><p>生成静态文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\">生成</a></p>\n</li>\n<li><p>部署到远程站点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/deployment.html\">部署</a></p>\n</li>\n</ol>\n<h2 id=\"Hexo中添加本地图片\"><a href=\"#Hexo中添加本地图片\" class=\"headerlink\" title=\"Hexo中添加本地图片\"></a>Hexo中添加本地图片</h2><ol>\n<li><p>把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>\n</li>\n<li><p>在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件</p>\n</li>\n<li><p>等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p>\n</li>\n<li><p>最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到<code>xxxx</code>这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">![<span class=\"hljs-string\">你想输入的替代文字</span>](<span class=\"hljs-link\">xxxx/图片名.jpg</span>)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>xxxx</code>是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入<code>xxxx</code>这个文件夹内就好了，很像引用相对路径。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"主键约束和唯一性约束的区别","date":"2020-02-26T00:33:14.000Z","_content":"\n主键必然是唯一且不为空，但是唯一不一定是主键，而且主键只能有一个，但是唯一约束仅仅是为了保持某些列具有唯一性而已。所以可以有多列\n一张表里只能有一个主键约束，可以有多个唯一约束\n主键约束的字段不能为null，而唯一约束的字段可以为null值\n\n<!--more-->\n\n### 主键约束（PRIMARY KEY）\n\n1) 主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。\n2) 是不可能（或很难）更新．\n3) 主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．\n4) 主健可作外健，唯一索引不可；\n\n### 唯一性约束（UNIQUE）\n\n1) 唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．\n2) 只要唯一就可以更新．\n3) 即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．\n4) 一个表上可以放置多个唯一性约束\n","source":"_posts/数据库-MySQL主键约束和唯一性约束的区别.md","raw":"---\ntitle: 主键约束和唯一性约束的区别\ndate: 2020-2-26 08:33:14\ncategories: \n    - 技术\n    - 数据库\n    - mysql\ntags:\n    - 主键约束\n    - 唯一约束\n---\n\n主键必然是唯一且不为空，但是唯一不一定是主键，而且主键只能有一个，但是唯一约束仅仅是为了保持某些列具有唯一性而已。所以可以有多列\n一张表里只能有一个主键约束，可以有多个唯一约束\n主键约束的字段不能为null，而唯一约束的字段可以为null值\n\n<!--more-->\n\n### 主键约束（PRIMARY KEY）\n\n1) 主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。\n2) 是不可能（或很难）更新．\n3) 主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．\n4) 主健可作外健，唯一索引不可；\n\n### 唯一性约束（UNIQUE）\n\n1) 唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．\n2) 只要唯一就可以更新．\n3) 即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．\n4) 一个表上可以放置多个唯一性约束\n","slug":"数据库-MySQL主键约束和唯一性约束的区别","published":1,"updated":"2020-12-01T14:23:48.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudd003njjln6lid9agk","content":"<p>主键必然是唯一且不为空，但是唯一不一定是主键，而且主键只能有一个，但是唯一约束仅仅是为了保持某些列具有唯一性而已。所以可以有多列<br>一张表里只能有一个主键约束，可以有多个唯一约束<br>主键约束的字段不能为null，而唯一约束的字段可以为null值</p>\n<a id=\"more\"></a>\n\n<h3 id=\"主键约束（PRIMARY-KEY）\"><a href=\"#主键约束（PRIMARY-KEY）\" class=\"headerlink\" title=\"主键约束（PRIMARY KEY）\"></a>主键约束（PRIMARY KEY）</h3><p>1) 主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。<br>2) 是不可能（或很难）更新．<br>3) 主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．<br>4) 主健可作外健，唯一索引不可；</p>\n<h3 id=\"唯一性约束（UNIQUE）\"><a href=\"#唯一性约束（UNIQUE）\" class=\"headerlink\" title=\"唯一性约束（UNIQUE）\"></a>唯一性约束（UNIQUE）</h3><p>1) 唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．<br>2) 只要唯一就可以更新．<br>3) 即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．<br>4) 一个表上可以放置多个唯一性约束</p>\n","site":{"data":{}},"excerpt":"<p>主键必然是唯一且不为空，但是唯一不一定是主键，而且主键只能有一个，但是唯一约束仅仅是为了保持某些列具有唯一性而已。所以可以有多列<br>一张表里只能有一个主键约束，可以有多个唯一约束<br>主键约束的字段不能为null，而唯一约束的字段可以为null值</p>","more":"<h3 id=\"主键约束（PRIMARY-KEY）\"><a href=\"#主键约束（PRIMARY-KEY）\" class=\"headerlink\" title=\"主键约束（PRIMARY KEY）\"></a>主键约束（PRIMARY KEY）</h3><p>1) 主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。<br>2) 是不可能（或很难）更新．<br>3) 主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．<br>4) 主健可作外健，唯一索引不可；</p>\n<h3 id=\"唯一性约束（UNIQUE）\"><a href=\"#唯一性约束（UNIQUE）\" class=\"headerlink\" title=\"唯一性约束（UNIQUE）\"></a>唯一性约束（UNIQUE）</h3><p>1) 唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．<br>2) 只要唯一就可以更新．<br>3) 即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．<br>4) 一个表上可以放置多个唯一性约束</p>"},{"title":"Mysql中的Decimal类型说明","date":"2019-06-01T00:50:26.000Z","_content":"\n我们在Mysql中存字段的时候，比如，一些与金钱有关的数据。这个时候就会对精确到的要求非常高。那么这个时候，就会发现我们之前所学的八大基本类型不再能够满足需求，无论是整形还是浮点型，有人会说存整形有什么不可，但是你要知道不是每个人的金额都是整数的；这样不行的话，存浮点型的就可以了嘛，对于银行存钱来说，一个小数点的问题都会将一笔钱的金额变得很大或者很小......So，这个时候你可以尝试一下Decimal类型，你会发现能够很好地解决你的问题。\n\n### decimal详细介绍：\n\n**decimal(a,b)**\n\n- 参数说明：\n\n  - a:指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度为38.\n\n  - b:指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从0~a之间的值，默认小数位数是0.\n\n- 举例说明，11615.23653234568这个数存你说的三个格式\n  - decimal：11615\n  - decimal(3)：999\n  - decdimal(3,2)：9.99\n  - decimal(10,5)11615.23653\n  **超出精度范围的数会被强制进位并只显示数据类型定义的格式**\n\n- 备注：\n\n  decimal数据类型用于要求非常高的精确计算中，这些类型允许指定数值的精确度和计算方法作为选择参数。精确度在这里指为这个值保存的有效数字的总个数。而计数方法指的是小数点后数字的个数。例如：decimal(5,2)规定了存储的值将不会超过五位数字 ，而且小数点后面有两位数字。\n\n#### 实例1：\n\n```bash\nmysql> create table t1(c1 float(10,2), c3decimal(10,2));\n\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> insert into t1 values(9876543.21, 9876543.12);\n\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from t1;\n\n+------------+------------+\n| c1         | c3         |\n+------------+------------+\n| 9876543.00 | 9876543.12 |\n+------------+------------+\n1 row in set (0.00 sec)\n```\n\n**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现，flocat类型的字段会自动将值四舍五入，而decimal类型的不会，如果用flocat类型的去存与金额有关的数据的时候就会出现问题，而decimal类型的就不会。**\n\n#### 实例2：decimal(5,2)\n\n```bash\nmysql> create table t1(id1 float(5,2) default null,id2 double(5,2) default null,\nid3 decimal(5,2) default null );\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into t1 values(1.2345,1.2345,1.2345);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nmysql> show warnings;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1265 | Data truncated for column 'id3' at row 1 |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n- 1.2345 --- 小数点后最多2位，所以保存可以，自动四舍五入数据截断,但会报waning\n\n- 12.34 --- OK\n\n- 1234.5 --- 因为小数部分未满2位，要补0.所以保存应该1234.50。所以整个位数超出了5，保存报错。\n\n- 1.2 --- 小数未满部分补0。按照1.20保存。\n\n### 默认状态比较：\n\n- 浮点数\n  - 如果不写精度和标度，会按照实际精度值保存\n  - 如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错\n- 定点数\n  - 如果不写精度和标度，则按照默认值decimal(10,0)来操作\n  - 如果数据超过了精度和标度值，系统会报错\n","source":"_posts/数据库-Mysql中的Decimal类型说明.md","raw":"---\ntitle: Mysql中的Decimal类型说明\ndate: 2019-06-01 08:50:26\ncategories:\n  - 技术\n  - 数据库\n  - mysql\ntags:\n  - float\n  - decimal\n---\n\n我们在Mysql中存字段的时候，比如，一些与金钱有关的数据。这个时候就会对精确到的要求非常高。那么这个时候，就会发现我们之前所学的八大基本类型不再能够满足需求，无论是整形还是浮点型，有人会说存整形有什么不可，但是你要知道不是每个人的金额都是整数的；这样不行的话，存浮点型的就可以了嘛，对于银行存钱来说，一个小数点的问题都会将一笔钱的金额变得很大或者很小......So，这个时候你可以尝试一下Decimal类型，你会发现能够很好地解决你的问题。\n\n### decimal详细介绍：\n\n**decimal(a,b)**\n\n- 参数说明：\n\n  - a:指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度为38.\n\n  - b:指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从0~a之间的值，默认小数位数是0.\n\n- 举例说明，11615.23653234568这个数存你说的三个格式\n  - decimal：11615\n  - decimal(3)：999\n  - decdimal(3,2)：9.99\n  - decimal(10,5)11615.23653\n  **超出精度范围的数会被强制进位并只显示数据类型定义的格式**\n\n- 备注：\n\n  decimal数据类型用于要求非常高的精确计算中，这些类型允许指定数值的精确度和计算方法作为选择参数。精确度在这里指为这个值保存的有效数字的总个数。而计数方法指的是小数点后数字的个数。例如：decimal(5,2)规定了存储的值将不会超过五位数字 ，而且小数点后面有两位数字。\n\n#### 实例1：\n\n```bash\nmysql> create table t1(c1 float(10,2), c3decimal(10,2));\n\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> insert into t1 values(9876543.21, 9876543.12);\n\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from t1;\n\n+------------+------------+\n| c1         | c3         |\n+------------+------------+\n| 9876543.00 | 9876543.12 |\n+------------+------------+\n1 row in set (0.00 sec)\n```\n\n**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现，flocat类型的字段会自动将值四舍五入，而decimal类型的不会，如果用flocat类型的去存与金额有关的数据的时候就会出现问题，而decimal类型的就不会。**\n\n#### 实例2：decimal(5,2)\n\n```bash\nmysql> create table t1(id1 float(5,2) default null,id2 double(5,2) default null,\nid3 decimal(5,2) default null );\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into t1 values(1.2345,1.2345,1.2345);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nmysql> show warnings;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1265 | Data truncated for column 'id3' at row 1 |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n- 1.2345 --- 小数点后最多2位，所以保存可以，自动四舍五入数据截断,但会报waning\n\n- 12.34 --- OK\n\n- 1234.5 --- 因为小数部分未满2位，要补0.所以保存应该1234.50。所以整个位数超出了5，保存报错。\n\n- 1.2 --- 小数未满部分补0。按照1.20保存。\n\n### 默认状态比较：\n\n- 浮点数\n  - 如果不写精度和标度，会按照实际精度值保存\n  - 如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错\n- 定点数\n  - 如果不写精度和标度，则按照默认值decimal(10,0)来操作\n  - 如果数据超过了精度和标度值，系统会报错\n","slug":"数据库-Mysql中的Decimal类型说明","published":1,"updated":"2021-01-23T15:14:51.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnude003qjjln70py16xg","content":"<p>我们在Mysql中存字段的时候，比如，一些与金钱有关的数据。这个时候就会对精确到的要求非常高。那么这个时候，就会发现我们之前所学的八大基本类型不再能够满足需求，无论是整形还是浮点型，有人会说存整形有什么不可，但是你要知道不是每个人的金额都是整数的；这样不行的话，存浮点型的就可以了嘛，对于银行存钱来说，一个小数点的问题都会将一笔钱的金额变得很大或者很小……So，这个时候你可以尝试一下Decimal类型，你会发现能够很好地解决你的问题。</p>\n<h3 id=\"decimal详细介绍：\"><a href=\"#decimal详细介绍：\" class=\"headerlink\" title=\"decimal详细介绍：\"></a>decimal详细介绍：</h3><p><strong>decimal(a,b)</strong></p>\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li><p>a:指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度为38.</p>\n</li>\n<li><p>b:指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从0~a之间的值，默认小数位数是0.</p>\n</li>\n</ul>\n</li>\n<li><p>举例说明，11615.23653234568这个数存你说的三个格式</p>\n<ul>\n<li>decimal：11615</li>\n<li>decimal(3)：999</li>\n<li>decdimal(3,2)：9.99</li>\n<li>decimal(10,5)11615.23653</li>\n</ul>\n<p><strong>超出精度范围的数会被强制进位并只显示数据类型定义的格式</strong></p>\n</li>\n<li><p>备注：</p>\n<p>decimal数据类型用于要求非常高的精确计算中，这些类型允许指定数值的精确度和计算方法作为选择参数。精确度在这里指为这个值保存的有效数字的总个数。而计数方法指的是小数点后数字的个数。例如：decimal(5,2)规定了存储的值将不会超过五位数字 ，而且小数点后面有两位数字。</p>\n</li>\n</ul>\n<h4 id=\"实例1：\"><a href=\"#实例1：\" class=\"headerlink\" title=\"实例1：\"></a>实例1：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table t1(c1 <span class=\"hljs-built_in\">float</span>(10,2), c3decimal(10,2));<br><br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; insert into t1 values(9876543.21, 9876543.12);<br><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from t1;<br><br>+------------+------------+<br>| c1         | c3         |<br>+------------+------------+<br>| 9876543.00 | 9876543.12 |<br>+------------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现，flocat类型的字段会自动将值四舍五入，而decimal类型的不会，如果用flocat类型的去存与金额有关的数据的时候就会出现问题，而decimal类型的就不会。</strong></p>\n<h4 id=\"实例2：decimal-5-2\"><a href=\"#实例2：decimal-5-2\" class=\"headerlink\" title=\"实例2：decimal(5,2)\"></a>实例2：decimal(5,2)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table t1(id1 <span class=\"hljs-built_in\">float</span>(5,2) default null,id2 double(5,2) default null,<br>id3 decimal(5,2) default null );<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; insert into t1 values(1.2345,1.2345,1.2345);<br>Query OK, 1 row affected, 1 warning (0.04 sec)<br><br>mysql&gt; show warnings;<br>+-------+------+------------------------------------------+<br>| Level | Code | Message                                  |<br>+-------+------+------------------------------------------+<br>| Note  | 1265 | Data truncated <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-string\">&#x27;id3&#x27;</span> at row 1 |<br>+-------+------+------------------------------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p>1.2345 — 小数点后最多2位，所以保存可以，自动四舍五入数据截断,但会报waning</p>\n</li>\n<li><p>12.34 — OK</p>\n</li>\n<li><p>1234.5 — 因为小数部分未满2位，要补0.所以保存应该1234.50。所以整个位数超出了5，保存报错。</p>\n</li>\n<li><p>1.2 — 小数未满部分补0。按照1.20保存。</p>\n</li>\n</ul>\n<h3 id=\"默认状态比较：\"><a href=\"#默认状态比较：\" class=\"headerlink\" title=\"默认状态比较：\"></a>默认状态比较：</h3><ul>\n<li>浮点数<ul>\n<li>如果不写精度和标度，会按照实际精度值保存</li>\n<li>如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错</li>\n</ul>\n</li>\n<li>定点数<ul>\n<li>如果不写精度和标度，则按照默认值decimal(10,0)来操作</li>\n<li>如果数据超过了精度和标度值，系统会报错</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>我们在Mysql中存字段的时候，比如，一些与金钱有关的数据。这个时候就会对精确到的要求非常高。那么这个时候，就会发现我们之前所学的八大基本类型不再能够满足需求，无论是整形还是浮点型，有人会说存整形有什么不可，但是你要知道不是每个人的金额都是整数的；这样不行的话，存浮点型的就可以了嘛，对于银行存钱来说，一个小数点的问题都会将一笔钱的金额变得很大或者很小……So，这个时候你可以尝试一下Decimal类型，你会发现能够很好地解决你的问题。</p>\n<h3 id=\"decimal详细介绍：\"><a href=\"#decimal详细介绍：\" class=\"headerlink\" title=\"decimal详细介绍：\"></a>decimal详细介绍：</h3><p><strong>decimal(a,b)</strong></p>\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li><p>a:指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度为38.</p>\n</li>\n<li><p>b:指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从0~a之间的值，默认小数位数是0.</p>\n</li>\n</ul>\n</li>\n<li><p>举例说明，11615.23653234568这个数存你说的三个格式</p>\n<ul>\n<li>decimal：11615</li>\n<li>decimal(3)：999</li>\n<li>decdimal(3,2)：9.99</li>\n<li>decimal(10,5)11615.23653</li>\n</ul>\n<p><strong>超出精度范围的数会被强制进位并只显示数据类型定义的格式</strong></p>\n</li>\n<li><p>备注：</p>\n<p>decimal数据类型用于要求非常高的精确计算中，这些类型允许指定数值的精确度和计算方法作为选择参数。精确度在这里指为这个值保存的有效数字的总个数。而计数方法指的是小数点后数字的个数。例如：decimal(5,2)规定了存储的值将不会超过五位数字 ，而且小数点后面有两位数字。</p>\n</li>\n</ul>\n<h4 id=\"实例1：\"><a href=\"#实例1：\" class=\"headerlink\" title=\"实例1：\"></a>实例1：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table t1(c1 <span class=\"hljs-built_in\">float</span>(10,2), c3decimal(10,2));<br><br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; insert into t1 values(9876543.21, 9876543.12);<br><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from t1;<br><br>+------------+------------+<br>| c1         | c3         |<br>+------------+------------+<br>| 9876543.00 | 9876543.12 |<br>+------------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现，flocat类型的字段会自动将值四舍五入，而decimal类型的不会，如果用flocat类型的去存与金额有关的数据的时候就会出现问题，而decimal类型的就不会。</strong></p>\n<h4 id=\"实例2：decimal-5-2\"><a href=\"#实例2：decimal-5-2\" class=\"headerlink\" title=\"实例2：decimal(5,2)\"></a>实例2：decimal(5,2)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table t1(id1 <span class=\"hljs-built_in\">float</span>(5,2) default null,id2 double(5,2) default null,<br>id3 decimal(5,2) default null );<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; insert into t1 values(1.2345,1.2345,1.2345);<br>Query OK, 1 row affected, 1 warning (0.04 sec)<br><br>mysql&gt; show warnings;<br>+-------+------+------------------------------------------+<br>| Level | Code | Message                                  |<br>+-------+------+------------------------------------------+<br>| Note  | 1265 | Data truncated <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-string\">&#x27;id3&#x27;</span> at row 1 |<br>+-------+------+------------------------------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>1.2345 — 小数点后最多2位，所以保存可以，自动四舍五入数据截断,但会报waning</p>\n</li>\n<li><p>12.34 — OK</p>\n</li>\n<li><p>1234.5 — 因为小数部分未满2位，要补0.所以保存应该1234.50。所以整个位数超出了5，保存报错。</p>\n</li>\n<li><p>1.2 — 小数未满部分补0。按照1.20保存。</p>\n</li>\n</ul>\n<h3 id=\"默认状态比较：\"><a href=\"#默认状态比较：\" class=\"headerlink\" title=\"默认状态比较：\"></a>默认状态比较：</h3><ul>\n<li>浮点数<ul>\n<li>如果不写精度和标度，会按照实际精度值保存</li>\n<li>如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错</li>\n</ul>\n</li>\n<li>定点数<ul>\n<li>如果不写精度和标度，则按照默认值decimal(10,0)来操作</li>\n<li>如果数据超过了精度和标度值，系统会报错</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Mysql中varbinary、binary、char、varchar异同","date":"2019-06-01T01:12:16.000Z","_content":"\nbinary 与 varbinary 类型和char与varchar类型是相似的，只是他们存储的是二进制数据，也就是说他们是包含字节流而不是字符流，他们有二进制字符的集合和顺序，他们的对比，排序是基于字节的数值进行的\n\nbinary与varbinary的最大长度和char与varchar是一样的，只不过他们是定义**字节长度**，而char和varchar对应的是**字符长度**。\n\n#### 存储和取出时对尾部空格的处理\n\n- char(N)用来存储非二进制字符串，插入时，对于少于N个字符的会自动在尾部加空格，查询时，尾部的空格就会被丢弃掉\n\n- vachar(N) 用来存储非二进制字符串，插入时，对于少于N个字符的不填补空格，查询时，尾部的空格不会被丢弃掉\n\n- binary(N)存储二进制字符串，插入进，少于N个字节的会自动在尾部加0x00，取出时，所有的字节都保留，返回定义长度的字节长度，在比较的时候，所有的字节都是有效的，并且0x00<space (space对应的是0x20)\n\n- varbinary在插入不会去填补0x00字节，查询的时候也不会丢弃任何字节，在比较的时候，所有的字节都是有效的，并且0x00<space (space对应的是0x20)\n\n#### 大小比较时\n\nchar与varchar的字符比较中，是忽略大小写与最后的空格的，如：\n\n```bash\nmysql> select 'a'='a ' , 'a'='A' , 'a'='A ';\n\n+----------+---------+----------+\n| 'a'='a ' | 'a'='A' | 'a'='A ' |\n+----------+---------+----------+\n|        1 |       1 |        1 |\n+----------+---------+----------+\n1 row in set (0.00 sec)\n```\n\n而binary及varbinary的字节比较中，所有的信息都不会被忽略，如：\n\n```bash\nmysql> create table t (c BINARY(3));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> insert into t set c = 'a';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select hex(c), c = 'a', c = 'a\\0\\0' from t;\n+--------+---------+-------------+\n| HEX(c) | c = 'a' | c = 'a\\0\\0' |\n+--------+---------+-------------+\n| 610000 |       0 |           1 |\n+--------+---------+-------------+\n1 row in set (0.08 sec)\n```\n\n","source":"_posts/数据库-Mysql中varbinary、binary、char、varchar异同.md","raw":"---\ntitle: Mysql中varbinary、binary、char、varchar异同\ndate: 2019-06-01 09:12:16\ncategories:\n  - 技术\n  - 数据库\n  - mysql\ntags:\n  - varbinary\n  - binary\n  - char\n  - varchar\n---\n\nbinary 与 varbinary 类型和char与varchar类型是相似的，只是他们存储的是二进制数据，也就是说他们是包含字节流而不是字符流，他们有二进制字符的集合和顺序，他们的对比，排序是基于字节的数值进行的\n\nbinary与varbinary的最大长度和char与varchar是一样的，只不过他们是定义**字节长度**，而char和varchar对应的是**字符长度**。\n\n#### 存储和取出时对尾部空格的处理\n\n- char(N)用来存储非二进制字符串，插入时，对于少于N个字符的会自动在尾部加空格，查询时，尾部的空格就会被丢弃掉\n\n- vachar(N) 用来存储非二进制字符串，插入时，对于少于N个字符的不填补空格，查询时，尾部的空格不会被丢弃掉\n\n- binary(N)存储二进制字符串，插入进，少于N个字节的会自动在尾部加0x00，取出时，所有的字节都保留，返回定义长度的字节长度，在比较的时候，所有的字节都是有效的，并且0x00<space (space对应的是0x20)\n\n- varbinary在插入不会去填补0x00字节，查询的时候也不会丢弃任何字节，在比较的时候，所有的字节都是有效的，并且0x00<space (space对应的是0x20)\n\n#### 大小比较时\n\nchar与varchar的字符比较中，是忽略大小写与最后的空格的，如：\n\n```bash\nmysql> select 'a'='a ' , 'a'='A' , 'a'='A ';\n\n+----------+---------+----------+\n| 'a'='a ' | 'a'='A' | 'a'='A ' |\n+----------+---------+----------+\n|        1 |       1 |        1 |\n+----------+---------+----------+\n1 row in set (0.00 sec)\n```\n\n而binary及varbinary的字节比较中，所有的信息都不会被忽略，如：\n\n```bash\nmysql> create table t (c BINARY(3));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> insert into t set c = 'a';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select hex(c), c = 'a', c = 'a\\0\\0' from t;\n+--------+---------+-------------+\n| HEX(c) | c = 'a' | c = 'a\\0\\0' |\n+--------+---------+-------------+\n| 610000 |       0 |           1 |\n+--------+---------+-------------+\n1 row in set (0.08 sec)\n```\n\n","slug":"数据库-Mysql中varbinary、binary、char、varchar异同","published":1,"updated":"2021-01-23T15:15:10.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudg003tjjln2shea6nf","content":"<p>binary 与 varbinary 类型和char与varchar类型是相似的，只是他们存储的是二进制数据，也就是说他们是包含字节流而不是字符流，他们有二进制字符的集合和顺序，他们的对比，排序是基于字节的数值进行的</p>\n<p>binary与varbinary的最大长度和char与varchar是一样的，只不过他们是定义<strong>字节长度</strong>，而char和varchar对应的是<strong>字符长度</strong>。</p>\n<h4 id=\"存储和取出时对尾部空格的处理\"><a href=\"#存储和取出时对尾部空格的处理\" class=\"headerlink\" title=\"存储和取出时对尾部空格的处理\"></a>存储和取出时对尾部空格的处理</h4><ul>\n<li><p>char(N)用来存储非二进制字符串，插入时，对于少于N个字符的会自动在尾部加空格，查询时，尾部的空格就会被丢弃掉</p>\n</li>\n<li><p>vachar(N) 用来存储非二进制字符串，插入时，对于少于N个字符的不填补空格，查询时，尾部的空格不会被丢弃掉</p>\n</li>\n<li><p>binary(N)存储二进制字符串，插入进，少于N个字节的会自动在尾部加0x00，取出时，所有的字节都保留，返回定义长度的字节长度，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>\n</li>\n<li><p>varbinary在插入不会去填补0x00字节，查询的时候也不会丢弃任何字节，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>\n</li>\n</ul>\n<h4 id=\"大小比较时\"><a href=\"#大小比较时\" class=\"headerlink\" title=\"大小比较时\"></a>大小比较时</h4><p>char与varchar的字符比较中，是忽略大小写与最后的空格的，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;a &#x27;</span> , <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A&#x27;</span> , <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A &#x27;</span>;<br><br>+----------+---------+----------+<br>| <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;a &#x27;</span> | <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A&#x27;</span> | <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A &#x27;</span> |<br>+----------+---------+----------+<br>|        1 |       1 |        1 |<br>+----------+---------+----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<p>而binary及varbinary的字节比较中，所有的信息都不会被忽略，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table t (c BINARY(3));<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into t <span class=\"hljs-built_in\">set</span> c = <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select hex(c), c = <span class=\"hljs-string\">&#x27;a&#x27;</span>, c = <span class=\"hljs-string\">&#x27;a\\0\\0&#x27;</span> from t;<br>+--------+---------+-------------+<br>| HEX(c) | c = <span class=\"hljs-string\">&#x27;a&#x27;</span> | c = <span class=\"hljs-string\">&#x27;a\\0\\0&#x27;</span> |<br>+--------+---------+-------------+<br>| 610000 |       0 |           1 |<br>+--------+---------+-------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.08 sec)<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>binary 与 varbinary 类型和char与varchar类型是相似的，只是他们存储的是二进制数据，也就是说他们是包含字节流而不是字符流，他们有二进制字符的集合和顺序，他们的对比，排序是基于字节的数值进行的</p>\n<p>binary与varbinary的最大长度和char与varchar是一样的，只不过他们是定义<strong>字节长度</strong>，而char和varchar对应的是<strong>字符长度</strong>。</p>\n<h4 id=\"存储和取出时对尾部空格的处理\"><a href=\"#存储和取出时对尾部空格的处理\" class=\"headerlink\" title=\"存储和取出时对尾部空格的处理\"></a>存储和取出时对尾部空格的处理</h4><ul>\n<li><p>char(N)用来存储非二进制字符串，插入时，对于少于N个字符的会自动在尾部加空格，查询时，尾部的空格就会被丢弃掉</p>\n</li>\n<li><p>vachar(N) 用来存储非二进制字符串，插入时，对于少于N个字符的不填补空格，查询时，尾部的空格不会被丢弃掉</p>\n</li>\n<li><p>binary(N)存储二进制字符串，插入进，少于N个字节的会自动在尾部加0x00，取出时，所有的字节都保留，返回定义长度的字节长度，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>\n</li>\n<li><p>varbinary在插入不会去填补0x00字节，查询的时候也不会丢弃任何字节，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>\n</li>\n</ul>\n<h4 id=\"大小比较时\"><a href=\"#大小比较时\" class=\"headerlink\" title=\"大小比较时\"></a>大小比较时</h4><p>char与varchar的字符比较中，是忽略大小写与最后的空格的，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;a &#x27;</span> , <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A&#x27;</span> , <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A &#x27;</span>;<br><br>+----------+---------+----------+<br>| <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;a &#x27;</span> | <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A&#x27;</span> | <span class=\"hljs-string\">&#x27;a&#x27;</span>=<span class=\"hljs-string\">&#x27;A &#x27;</span> |<br>+----------+---------+----------+<br>|        1 |       1 |        1 |<br>+----------+---------+----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<p>而binary及varbinary的字节比较中，所有的信息都不会被忽略，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table t (c BINARY(3));<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into t <span class=\"hljs-built_in\">set</span> c = <span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select hex(c), c = <span class=\"hljs-string\">&#x27;a&#x27;</span>, c = <span class=\"hljs-string\">&#x27;a\\0\\0&#x27;</span> from t;<br>+--------+---------+-------------+<br>| HEX(c) | c = <span class=\"hljs-string\">&#x27;a&#x27;</span> | c = <span class=\"hljs-string\">&#x27;a\\0\\0&#x27;</span> |<br>+--------+---------+-------------+<br>| 610000 |       0 |           1 |<br>+--------+---------+-------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.08 sec)<br></code></pre></td></tr></table></figure>\n"},{"title":"Mysql常见错误","date":"2020-04-21T14:27:42.000Z","_content":"\n简单对常见错误进行总结、归纳。\n\n## Ubuntu系统\n\n### 1698 只能root用户登录Mysql\n\n#### 一、问题描述\n\n如果mysql安装时，没有提示输入密码，则会随机分配密码，直接mysql -u root -p则无法登录，报错：\n\n```shell\nERROR 1698 (28000): Access denied for user 'root'@'localhost\n```\n\n#### 二、解决方案\n\n1. 用管理员权限进入数据库\n  \n   ```shell\n    sudo mysql -uroot -p\n   ```\n\n2. 修改加密方式和密码\n  \n   ```sql\n    alter user 'username'@'host' identified with mysql_native_password BY 'password';\n   ```\n\n3. 刷新\n  \n   ```sql\n    flush privileges;\n   ```\n\n4. 最后重启终端，就可通过 `mysql -u root -p` 免sudo登录mysql啦！\n\n## Windows系统\n\n### 1042服务启动异常\n\n#### 一、问题描述\n\nmysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：\n\n```bash\nerror 1042：Unable to connect to any of the specified MySQL hosts\n```\n\n上述异常直接导致mysql无法正常Finish，如图所示：\n\n![Mysql-1042](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql-1042.png)\n\n#### 二、解决方案\n\n1. windows端使用`Win+R` --> 运行 `\"services.msc\"` --> 打开service服务管理器，找到刚才安装mysql的服务名称\n\n2. 右键 --> 属性 --> 登录，更改成\"本地系统账户\" --> 确定\n  \n    ![Mysql登录身份修改](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql登录身份修改.png)\n\n3. 回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面\n\n### 1045用户密码错误\n\n#### 一、问题描述\n\n在数据库安装之后，使用`mysql -uroot -p`链接数据库时，出现以下异常:\n\n```bash\n1045    Access denied for user 'root'@'localhost' (using password:YES)\n```\n\n这个意思是说：用户“root”@本地主机的访问被拒绝\n\n那为什么会出现这种错误呢？\n\n答案是这样：这种问题的本质是用户密码出现错误。\n\n#### 二、解决方案\n\n1. 打开命令窗口cmd，停止MySQL服务，输入命令：\n  \n   ```bash\n    net stop mysql\n   ```\n\n2. 开启跳过密码验证登录的MySQL服务,输入命令\n  \n   ```bash\n    mysqld --console --skip-grant-tables --shared-memory\n   ```\n\n3. 再打开一个新的cmd，无密码登录MySQL，输入登录命令\n  \n   ```bash\n    mysql -u root -p\n   ```\n\n4. 重置用户名对应的密码，命令如下：\n  \n   ```sql\n    use mysql;\n   \n    update user set authentication_string='' where user='root'; --修改密码为空\n   \n    flush privileges; --刷新权限\n   ```\n\n5. 退出mysql\n\n6. 关闭以`--console --skip-grant-tables --shared-memory` 启动的MySQL服务，\n\n7. 打开命令框，启动MySQL服务。输入\n  \n   ```bash\n    net start mysql\n   ```\n\n8. 再次登录无密码登录：\n  \n   ```bash\n    mysql -u root -p\n   ```\n\n9. 正确修改root密码\n  \n   ```sql\n   alter user 'root'@'host' identified with mysql_native_password BY 'mysql';\n   \n   flush privileges;\n   ```\n\n10. 退出，再次成功登录，到此，重置密码结束。\n\n### Mysql数据库初始化\n\n当Mysql数据库链接失败， 跳过用户名验证也失败， 需要先删除 安装目录下的`data`文件夹, 然后重新初始化,生成初始化密码\n\n1. 以管理员的身份打开cmd窗口跳转路径到`X:\\xxx\\mysql-8.0.11-winx64\\bin`\n  \n   ```bash\n    mysqld --initialize --user=mysql --console\n   ```\n\n2. 按照上面的流程，就可以跳过用户名验证，重新设置mysql密码\n\n\n\n\n","source":"_posts/数据库-Mysql常见错误.md","raw":"---\ntitle: Mysql常见错误\ndate: 2020-04-21 22:27:42\ncategories: \n    - 技术\n    - 数据库\n    - mysql\ntags:\n    - 错误说明\n---\n\n简单对常见错误进行总结、归纳。\n\n## Ubuntu系统\n\n### 1698 只能root用户登录Mysql\n\n#### 一、问题描述\n\n如果mysql安装时，没有提示输入密码，则会随机分配密码，直接mysql -u root -p则无法登录，报错：\n\n```shell\nERROR 1698 (28000): Access denied for user 'root'@'localhost\n```\n\n#### 二、解决方案\n\n1. 用管理员权限进入数据库\n  \n   ```shell\n    sudo mysql -uroot -p\n   ```\n\n2. 修改加密方式和密码\n  \n   ```sql\n    alter user 'username'@'host' identified with mysql_native_password BY 'password';\n   ```\n\n3. 刷新\n  \n   ```sql\n    flush privileges;\n   ```\n\n4. 最后重启终端，就可通过 `mysql -u root -p` 免sudo登录mysql啦！\n\n## Windows系统\n\n### 1042服务启动异常\n\n#### 一、问题描述\n\nmysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：\n\n```bash\nerror 1042：Unable to connect to any of the specified MySQL hosts\n```\n\n上述异常直接导致mysql无法正常Finish，如图所示：\n\n![Mysql-1042](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql-1042.png)\n\n#### 二、解决方案\n\n1. windows端使用`Win+R` --> 运行 `\"services.msc\"` --> 打开service服务管理器，找到刚才安装mysql的服务名称\n\n2. 右键 --> 属性 --> 登录，更改成\"本地系统账户\" --> 确定\n  \n    ![Mysql登录身份修改](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql登录身份修改.png)\n\n3. 回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面\n\n### 1045用户密码错误\n\n#### 一、问题描述\n\n在数据库安装之后，使用`mysql -uroot -p`链接数据库时，出现以下异常:\n\n```bash\n1045    Access denied for user 'root'@'localhost' (using password:YES)\n```\n\n这个意思是说：用户“root”@本地主机的访问被拒绝\n\n那为什么会出现这种错误呢？\n\n答案是这样：这种问题的本质是用户密码出现错误。\n\n#### 二、解决方案\n\n1. 打开命令窗口cmd，停止MySQL服务，输入命令：\n  \n   ```bash\n    net stop mysql\n   ```\n\n2. 开启跳过密码验证登录的MySQL服务,输入命令\n  \n   ```bash\n    mysqld --console --skip-grant-tables --shared-memory\n   ```\n\n3. 再打开一个新的cmd，无密码登录MySQL，输入登录命令\n  \n   ```bash\n    mysql -u root -p\n   ```\n\n4. 重置用户名对应的密码，命令如下：\n  \n   ```sql\n    use mysql;\n   \n    update user set authentication_string='' where user='root'; --修改密码为空\n   \n    flush privileges; --刷新权限\n   ```\n\n5. 退出mysql\n\n6. 关闭以`--console --skip-grant-tables --shared-memory` 启动的MySQL服务，\n\n7. 打开命令框，启动MySQL服务。输入\n  \n   ```bash\n    net start mysql\n   ```\n\n8. 再次登录无密码登录：\n  \n   ```bash\n    mysql -u root -p\n   ```\n\n9. 正确修改root密码\n  \n   ```sql\n   alter user 'root'@'host' identified with mysql_native_password BY 'mysql';\n   \n   flush privileges;\n   ```\n\n10. 退出，再次成功登录，到此，重置密码结束。\n\n### Mysql数据库初始化\n\n当Mysql数据库链接失败， 跳过用户名验证也失败， 需要先删除 安装目录下的`data`文件夹, 然后重新初始化,生成初始化密码\n\n1. 以管理员的身份打开cmd窗口跳转路径到`X:\\xxx\\mysql-8.0.11-winx64\\bin`\n  \n   ```bash\n    mysqld --initialize --user=mysql --console\n   ```\n\n2. 按照上面的流程，就可以跳过用户名验证，重新设置mysql密码\n\n\n\n\n","slug":"数据库-Mysql常见错误","published":1,"updated":"2021-01-23T15:14:24.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudh003wjjln8a68ae9z","content":"<p>简单对常见错误进行总结、归纳。</p>\n<h2 id=\"Ubuntu系统\"><a href=\"#Ubuntu系统\" class=\"headerlink\" title=\"Ubuntu系统\"></a>Ubuntu系统</h2><h3 id=\"1698-只能root用户登录Mysql\"><a href=\"#1698-只能root用户登录Mysql\" class=\"headerlink\" title=\"1698 只能root用户登录Mysql\"></a>1698 只能root用户登录Mysql</h3><h4 id=\"一、问题描述\"><a href=\"#一、问题描述\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>如果mysql安装时，没有提示输入密码，则会随机分配密码，直接mysql -u root -p则无法登录，报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>用管理员权限进入数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sudo mysql -uroot -p<br></code></pre></div></td></tr></table></figure></li>\n<li><p>修改加密方式和密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>刷新</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\">flush privileges;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>最后重启终端，就可通过 <code>mysql -u root -p</code> 免sudo登录mysql啦！</p>\n</li>\n</ol>\n<h2 id=\"Windows系统\"><a href=\"#Windows系统\" class=\"headerlink\" title=\"Windows系统\"></a>Windows系统</h2><h3 id=\"1042服务启动异常\"><a href=\"#1042服务启动异常\" class=\"headerlink\" title=\"1042服务启动异常\"></a>1042服务启动异常</h3><h4 id=\"一、问题描述-1\"><a href=\"#一、问题描述-1\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>mysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">error 1042：Unable to connect to any of the specified MySQL hosts<br></code></pre></div></td></tr></table></figure>\n<p>上述异常直接导致mysql无法正常Finish，如图所示：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql-1042.png\" alt=\"Mysql-1042\"></p>\n<h4 id=\"二、解决方案-1\"><a href=\"#二、解决方案-1\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>windows端使用<code>Win+R</code> –&gt; 运行 <code>&quot;services.msc&quot;</code> –&gt; 打开service服务管理器，找到刚才安装mysql的服务名称</p>\n</li>\n<li><p>右键 –&gt; 属性 –&gt; 登录，更改成”本地系统账户” –&gt; 确定</p>\n<p> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql%E7%99%BB%E5%BD%95%E8%BA%AB%E4%BB%BD%E4%BF%AE%E6%94%B9.png\" alt=\"Mysql登录身份修改\"></p>\n</li>\n<li><p>回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面</p>\n</li>\n</ol>\n<h3 id=\"1045用户密码错误\"><a href=\"#1045用户密码错误\" class=\"headerlink\" title=\"1045用户密码错误\"></a>1045用户密码错误</h3><h4 id=\"一、问题描述-2\"><a href=\"#一、问题描述-2\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>在数据库安装之后，使用<code>mysql -uroot -p</code>链接数据库时，出现以下异常:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">1045    Access denied <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-string\">&#x27;root&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> (using password:YES)<br></code></pre></div></td></tr></table></figure>\n<p>这个意思是说：用户“root”@本地主机的访问被拒绝</p>\n<p>那为什么会出现这种错误呢？</p>\n<p>答案是这样：这种问题的本质是用户密码出现错误。</p>\n<h4 id=\"二、解决方案-2\"><a href=\"#二、解决方案-2\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>打开命令窗口cmd，停止MySQL服务，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">net stop mysql<br></code></pre></div></td></tr></table></figure></li>\n<li><p>开启跳过密码验证登录的MySQL服务,输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysqld --console --skip-grant-tables --shared-memory<br></code></pre></div></td></tr></table></figure></li>\n<li><p>再打开一个新的cmd，无密码登录MySQL，输入登录命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql -u root -p<br></code></pre></div></td></tr></table></figure></li>\n<li><p>重置用户名对应的密码，命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\">use mysql;<br>   <br><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> authentication_string<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;root&#x27;</span>; <span class=\"hljs-comment\">--修改密码为空</span><br>   <br>flush privileges; <span class=\"hljs-comment\">--刷新权限</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>退出mysql</p>\n</li>\n<li><p>关闭以<code>--console --skip-grant-tables --shared-memory</code> 启动的MySQL服务，</p>\n</li>\n<li><p>打开命令框，启动MySQL服务。输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">net start mysql<br></code></pre></div></td></tr></table></figure></li>\n<li><p>再次登录无密码登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql -u root -p<br></code></pre></div></td></tr></table></figure></li>\n<li><p>正确修改root密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;root&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;mysql&#x27;</span>;<br><br>flush privileges;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>退出，再次成功登录，到此，重置密码结束。</p>\n</li>\n</ol>\n<h3 id=\"Mysql数据库初始化\"><a href=\"#Mysql数据库初始化\" class=\"headerlink\" title=\"Mysql数据库初始化\"></a>Mysql数据库初始化</h3><p>当Mysql数据库链接失败， 跳过用户名验证也失败， 需要先删除 安装目录下的<code>data</code>文件夹, 然后重新初始化,生成初始化密码</p>\n<ol>\n<li><p>以管理员的身份打开cmd窗口跳转路径到<code>X:\\xxx\\mysql-8.0.11-winx64\\bin</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysqld --initialize --user=mysql --console<br></code></pre></div></td></tr></table></figure></li>\n<li><p>按照上面的流程，就可以跳过用户名验证，重新设置mysql密码</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>简单对常见错误进行总结、归纳。</p>\n<h2 id=\"Ubuntu系统\"><a href=\"#Ubuntu系统\" class=\"headerlink\" title=\"Ubuntu系统\"></a>Ubuntu系统</h2><h3 id=\"1698-只能root用户登录Mysql\"><a href=\"#1698-只能root用户登录Mysql\" class=\"headerlink\" title=\"1698 只能root用户登录Mysql\"></a>1698 只能root用户登录Mysql</h3><h4 id=\"一、问题描述\"><a href=\"#一、问题描述\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>如果mysql安装时，没有提示输入密码，则会随机分配密码，直接mysql -u root -p则无法登录，报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost<br></code></pre></td></tr></table></figure>\n<h4 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>用管理员权限进入数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mysql -uroot -p<br></code></pre></td></tr></table></figure></li>\n<li><p>修改加密方式和密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></td></tr></table></figure></li>\n<li><p>刷新</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">flush privileges;<br></code></pre></td></tr></table></figure></li>\n<li><p>最后重启终端，就可通过 <code>mysql -u root -p</code> 免sudo登录mysql啦！</p>\n</li>\n</ol>\n<h2 id=\"Windows系统\"><a href=\"#Windows系统\" class=\"headerlink\" title=\"Windows系统\"></a>Windows系统</h2><h3 id=\"1042服务启动异常\"><a href=\"#1042服务启动异常\" class=\"headerlink\" title=\"1042服务启动异常\"></a>1042服务启动异常</h3><h4 id=\"一、问题描述-1\"><a href=\"#一、问题描述-1\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>mysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">error 1042：Unable to connect to any of the specified MySQL hosts<br></code></pre></td></tr></table></figure>\n<p>上述异常直接导致mysql无法正常Finish，如图所示：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql-1042.png\" alt=\"Mysql-1042\"></p>\n<h4 id=\"二、解决方案-1\"><a href=\"#二、解决方案-1\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>windows端使用<code>Win+R</code> –&gt; 运行 <code>&quot;services.msc&quot;</code> –&gt; 打开service服务管理器，找到刚才安装mysql的服务名称</p>\n</li>\n<li><p>右键 –&gt; 属性 –&gt; 登录，更改成”本地系统账户” –&gt; 确定</p>\n<p> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql%E7%99%BB%E5%BD%95%E8%BA%AB%E4%BB%BD%E4%BF%AE%E6%94%B9.png\" alt=\"Mysql登录身份修改\"></p>\n</li>\n<li><p>回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面</p>\n</li>\n</ol>\n<h3 id=\"1045用户密码错误\"><a href=\"#1045用户密码错误\" class=\"headerlink\" title=\"1045用户密码错误\"></a>1045用户密码错误</h3><h4 id=\"一、问题描述-2\"><a href=\"#一、问题描述-2\" class=\"headerlink\" title=\"一、问题描述\"></a>一、问题描述</h4><p>在数据库安装之后，使用<code>mysql -uroot -p</code>链接数据库时，出现以下异常:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">1045    Access denied <span class=\"hljs-keyword\">for</span> user <span class=\"hljs-string\">&#x27;root&#x27;</span>@<span class=\"hljs-string\">&#x27;localhost&#x27;</span> (using password:YES)<br></code></pre></td></tr></table></figure>\n<p>这个意思是说：用户“root”@本地主机的访问被拒绝</p>\n<p>那为什么会出现这种错误呢？</p>\n<p>答案是这样：这种问题的本质是用户密码出现错误。</p>\n<h4 id=\"二、解决方案-2\"><a href=\"#二、解决方案-2\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h4><ol>\n<li><p>打开命令窗口cmd，停止MySQL服务，输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">net stop mysql<br></code></pre></td></tr></table></figure></li>\n<li><p>开启跳过密码验证登录的MySQL服务,输入命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysqld --console --skip-grant-tables --shared-memory<br></code></pre></td></tr></table></figure></li>\n<li><p>再打开一个新的cmd，无密码登录MySQL，输入登录命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql -u root -p<br></code></pre></td></tr></table></figure></li>\n<li><p>重置用户名对应的密码，命令如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">use mysql;<br>   <br><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> authentication_string<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;root&#x27;</span>; <span class=\"hljs-comment\">--修改密码为空</span><br>   <br>flush privileges; <span class=\"hljs-comment\">--刷新权限</span><br></code></pre></td></tr></table></figure></li>\n<li><p>退出mysql</p>\n</li>\n<li><p>关闭以<code>--console --skip-grant-tables --shared-memory</code> 启动的MySQL服务，</p>\n</li>\n<li><p>打开命令框，启动MySQL服务。输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">net start mysql<br></code></pre></td></tr></table></figure></li>\n<li><p>再次登录无密码登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql -u root -p<br></code></pre></td></tr></table></figure></li>\n<li><p>正确修改root密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;root&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;mysql&#x27;</span>;<br><br>flush privileges;<br></code></pre></td></tr></table></figure></li>\n<li><p>退出，再次成功登录，到此，重置密码结束。</p>\n</li>\n</ol>\n<h3 id=\"Mysql数据库初始化\"><a href=\"#Mysql数据库初始化\" class=\"headerlink\" title=\"Mysql数据库初始化\"></a>Mysql数据库初始化</h3><p>当Mysql数据库链接失败， 跳过用户名验证也失败， 需要先删除 安装目录下的<code>data</code>文件夹, 然后重新初始化,生成初始化密码</p>\n<ol>\n<li><p>以管理员的身份打开cmd窗口跳转路径到<code>X:\\xxx\\mysql-8.0.11-winx64\\bin</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysqld --initialize --user=mysql --console<br></code></pre></td></tr></table></figure></li>\n<li><p>按照上面的流程，就可以跳过用户名验证，重新设置mysql密码</p>\n</li>\n</ol>\n"},{"title":"Mysql操作","date":"2019-12-12T00:33:14.000Z","_content":"介绍如何在 Ubuntu系统上 安装mysql软件、以及如何创建用户信息。\n\n### Mysql软件操作\n\n以下所有操作以Ubuntu为例\n\n#### mysql安装\n\n```bash\nsudo apt install mysql-server # 安装mysql\n```\n\n#### mysql删除\n\n```bash\nsudo apt remove --upgrade mysql-* -y # 卸载mysql\n\ndpkg -l|grep ^rc|awk '{print$2}'|sudo xargs dpkg -P #清除配置\n```\n\n#### mysql服务\n\n```bash\nservice mysql start # 启动服务\nservice mysql stop  # 停止服务\nservice mysql restart  # 重启服务\n```\n\n### mysql用户操作\n\n#### 一、创建用户\n\n```sql\ncreate user 'username'@'host' identified with mysql_native_password BY 'password';\n```\n\n- `username`：你将创建的用户名\n- `host`：指定该用户在哪个主机上可以登陆，如果是本地用户可用`localhost`，如果想让该用户可以从任意远程主机登陆，可以使用通配符`%`\n- `password`：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n- `mysql_native_password`：用户加密方式，该方式为mysql8.0之前的加密方式，如果不写，则是mysql 8.0之后的加密方式`caching_sha2_password`\n\n#### 二、 修改用户信息\n\n```sql\nalter user 'username'@'host' identified with mysql_native_password BY 'password';\n```\n\n- 参数同上\n\n#### 三、删除用户\n\n```sql\ndrop user 'username'@'host';\n```\n\n- 参数同上\n\n#### 四、授权\n\n```sql\ngrant privileges on databasename.tablename to 'username'@'host';\n```\n\n- privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL\n- databasename：数据库名\n- tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*\n- 其余参数同上\n\n#### 五、删除权限\n\n```sql\nrevoke privileges on databasename.tablename to 'username'@'host';\n```\n\n- 参数同上\n\n#### 六、演示\n\n```sql\n# 创建一个可以从任意远程主机登陆的用户test\ncreate user 'test'@'%' identified with mysql_native_password BY '123456';\n\n# 创建数据库mydata\ncreate database mydata charset=utf8;\n\n# 对用户test授权，只能操作数据库mydata\ngrant all on mydata.* to 'test'@'%';\n\n# 刷新配置，立即启用修改\nflush privileges;\n```\n","source":"_posts/数据库-Mysql操作.md","raw":"---\ntitle: Mysql操作\ndate: 2019-12-12 08:33:14\ncategories: \n    - 技术\n    - 数据库\n    - mysql\ntags:\n    - 用户管理\n    - mysql软件操作\n---\n介绍如何在 Ubuntu系统上 安装mysql软件、以及如何创建用户信息。\n\n### Mysql软件操作\n\n以下所有操作以Ubuntu为例\n\n#### mysql安装\n\n```bash\nsudo apt install mysql-server # 安装mysql\n```\n\n#### mysql删除\n\n```bash\nsudo apt remove --upgrade mysql-* -y # 卸载mysql\n\ndpkg -l|grep ^rc|awk '{print$2}'|sudo xargs dpkg -P #清除配置\n```\n\n#### mysql服务\n\n```bash\nservice mysql start # 启动服务\nservice mysql stop  # 停止服务\nservice mysql restart  # 重启服务\n```\n\n### mysql用户操作\n\n#### 一、创建用户\n\n```sql\ncreate user 'username'@'host' identified with mysql_native_password BY 'password';\n```\n\n- `username`：你将创建的用户名\n- `host`：指定该用户在哪个主机上可以登陆，如果是本地用户可用`localhost`，如果想让该用户可以从任意远程主机登陆，可以使用通配符`%`\n- `password`：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n- `mysql_native_password`：用户加密方式，该方式为mysql8.0之前的加密方式，如果不写，则是mysql 8.0之后的加密方式`caching_sha2_password`\n\n#### 二、 修改用户信息\n\n```sql\nalter user 'username'@'host' identified with mysql_native_password BY 'password';\n```\n\n- 参数同上\n\n#### 三、删除用户\n\n```sql\ndrop user 'username'@'host';\n```\n\n- 参数同上\n\n#### 四、授权\n\n```sql\ngrant privileges on databasename.tablename to 'username'@'host';\n```\n\n- privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL\n- databasename：数据库名\n- tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*\n- 其余参数同上\n\n#### 五、删除权限\n\n```sql\nrevoke privileges on databasename.tablename to 'username'@'host';\n```\n\n- 参数同上\n\n#### 六、演示\n\n```sql\n# 创建一个可以从任意远程主机登陆的用户test\ncreate user 'test'@'%' identified with mysql_native_password BY '123456';\n\n# 创建数据库mydata\ncreate database mydata charset=utf8;\n\n# 对用户test授权，只能操作数据库mydata\ngrant all on mydata.* to 'test'@'%';\n\n# 刷新配置，立即启用修改\nflush privileges;\n```\n","slug":"数据库-Mysql操作","published":1,"updated":"2021-01-23T15:14:15.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudi003zjjlnbtwkhh66","content":"<p>介绍如何在 Ubuntu系统上 安装mysql软件、以及如何创建用户信息。</p>\n<h3 id=\"Mysql软件操作\"><a href=\"#Mysql软件操作\" class=\"headerlink\" title=\"Mysql软件操作\"></a>Mysql软件操作</h3><p>以下所有操作以Ubuntu为例</p>\n<h4 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">sudo apt install mysql-server <span class=\"hljs-comment\"># 安装mysql</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"mysql删除\"><a href=\"#mysql删除\" class=\"headerlink\" title=\"mysql删除\"></a>mysql删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">sudo apt remove --upgrade mysql-* -y <span class=\"hljs-comment\"># 卸载mysql</span><br><br>dpkg -l|grep ^rc|awk <span class=\"hljs-string\">&#x27;&#123;print$2&#125;&#x27;</span>|sudo xargs dpkg -P <span class=\"hljs-comment\">#清除配置</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"mysql服务\"><a href=\"#mysql服务\" class=\"headerlink\" title=\"mysql服务\"></a>mysql服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">service mysql start <span class=\"hljs-comment\"># 启动服务</span><br>service mysql stop  <span class=\"hljs-comment\"># 停止服务</span><br>service mysql restart  <span class=\"hljs-comment\"># 重启服务</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"mysql用户操作\"><a href=\"#mysql用户操作\" class=\"headerlink\" title=\"mysql用户操作\"></a>mysql用户操作</h3><h4 id=\"一、创建用户\"><a href=\"#一、创建用户\" class=\"headerlink\" title=\"一、创建用户\"></a>一、创建用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><code>username</code>：你将创建的用户名</li>\n<li><code>host</code>：指定该用户在哪个主机上可以登陆，如果是本地用户可用<code>localhost</code>，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li>\n<li><code>password</code>：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>\n<li><code>mysql_native_password</code>：用户加密方式，该方式为mysql8.0之前的加密方式，如果不写，则是mysql 8.0之后的加密方式<code>caching_sha2_password</code></li>\n</ul>\n<h4 id=\"二、-修改用户信息\"><a href=\"#二、-修改用户信息\" class=\"headerlink\" title=\"二、 修改用户信息\"></a>二、 修改用户信息</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"三、删除用户\"><a href=\"#三、删除用户\" class=\"headerlink\" title=\"三、删除用户\"></a>三、删除用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"四、授权\"><a href=\"#四、授权\" class=\"headerlink\" title=\"四、授权\"></a>四、授权</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">grant</span> privileges <span class=\"hljs-keyword\">on</span> databasename.tablename <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li>\n<li>databasename：数据库名</li>\n<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</li>\n<li>其余参数同上</li>\n</ul>\n<h4 id=\"五、删除权限\"><a href=\"#五、删除权限\" class=\"headerlink\" title=\"五、删除权限\"></a>五、删除权限</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">revoke</span> privileges <span class=\"hljs-keyword\">on</span> databasename.tablename <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"六、演示\"><a href=\"#六、演示\" class=\"headerlink\" title=\"六、演示\"></a>六、演示</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"># 创建一个可以从任意远程主机登陆的用户test<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br># 创建数据库mydata<br><span class=\"hljs-keyword\">create</span> database mydata charset<span class=\"hljs-operator\">=</span>utf8;<br><br># 对用户test授权，只能操作数据库mydata<br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">on</span> mydata.<span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span>;<br><br># 刷新配置，立即启用修改<br>flush privileges;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>介绍如何在 Ubuntu系统上 安装mysql软件、以及如何创建用户信息。</p>\n<h3 id=\"Mysql软件操作\"><a href=\"#Mysql软件操作\" class=\"headerlink\" title=\"Mysql软件操作\"></a>Mysql软件操作</h3><p>以下所有操作以Ubuntu为例</p>\n<h4 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo apt install mysql-server <span class=\"hljs-comment\"># 安装mysql</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"mysql删除\"><a href=\"#mysql删除\" class=\"headerlink\" title=\"mysql删除\"></a>mysql删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo apt remove --upgrade mysql-* -y <span class=\"hljs-comment\"># 卸载mysql</span><br><br>dpkg -l|grep ^rc|awk <span class=\"hljs-string\">&#x27;&#123;print$2&#125;&#x27;</span>|sudo xargs dpkg -P <span class=\"hljs-comment\">#清除配置</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"mysql服务\"><a href=\"#mysql服务\" class=\"headerlink\" title=\"mysql服务\"></a>mysql服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">service mysql start <span class=\"hljs-comment\"># 启动服务</span><br>service mysql stop  <span class=\"hljs-comment\"># 停止服务</span><br>service mysql restart  <span class=\"hljs-comment\"># 重启服务</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"mysql用户操作\"><a href=\"#mysql用户操作\" class=\"headerlink\" title=\"mysql用户操作\"></a>mysql用户操作</h3><h4 id=\"一、创建用户\"><a href=\"#一、创建用户\" class=\"headerlink\" title=\"一、创建用户\"></a>一、创建用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>username</code>：你将创建的用户名</li>\n<li><code>host</code>：指定该用户在哪个主机上可以登陆，如果是本地用户可用<code>localhost</code>，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li>\n<li><code>password</code>：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>\n<li><code>mysql_native_password</code>：用户加密方式，该方式为mysql8.0之前的加密方式，如果不写，则是mysql 8.0之后的加密方式<code>caching_sha2_password</code></li>\n</ul>\n<h4 id=\"二、-修改用户信息\"><a href=\"#二、-修改用户信息\" class=\"headerlink\" title=\"二、 修改用户信息\"></a>二、 修改用户信息</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;password&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"三、删除用户\"><a href=\"#三、删除用户\" class=\"headerlink\" title=\"三、删除用户\"></a>三、删除用户</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"四、授权\"><a href=\"#四、授权\" class=\"headerlink\" title=\"四、授权\"></a>四、授权</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">grant</span> privileges <span class=\"hljs-keyword\">on</span> databasename.tablename <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li>\n<li>databasename：数据库名</li>\n<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</li>\n<li>其余参数同上</li>\n</ul>\n<h4 id=\"五、删除权限\"><a href=\"#五、删除权限\" class=\"headerlink\" title=\"五、删除权限\"></a>五、删除权限</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">revoke</span> privileges <span class=\"hljs-keyword\">on</span> databasename.tablename <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;username&#x27;</span>@<span class=\"hljs-string\">&#x27;host&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>参数同上</li>\n</ul>\n<h4 id=\"六、演示\"><a href=\"#六、演示\" class=\"headerlink\" title=\"六、演示\"></a>六、演示</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"># 创建一个可以从任意远程主机登陆的用户test<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span> identified <span class=\"hljs-keyword\">with</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">&#x27;123456&#x27;</span>;<br><br># 创建数据库mydata<br><span class=\"hljs-keyword\">create</span> database mydata charset<span class=\"hljs-operator\">=</span>utf8;<br><br># 对用户test授权，只能操作数据库mydata<br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">on</span> mydata.<span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>@<span class=\"hljs-string\">&#x27;%&#x27;</span>;<br><br># 刷新配置，立即启用修改<br>flush privileges;<br></code></pre></td></tr></table></figure>"},{"title":"Redis命令","date":"2020-05-23T12:54:16.000Z","_content":"\n简单对redis 命令进行总结、归纳。\n\n<!--more-->\n\n### 键\n\n![键](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/键%20.png)\n\n### String\n\n![String（字符串）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/String（字符串）%20.png)\n\n### List\n\n![List（列表）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/List（列表）%20.png)\n\n### Hash\n\n![Hash（哈希表）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Hash（哈希表）%20.png)\n\n### Set\n\n![Set（集合）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Set（集合）%20.png)\n\n### Zset\n\n![ZSet（SortedSet_有序集合）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ZSet（SortedSet_有序集合）%20.png)\n\n更多命令参考[Redis教程](https://cloud.tencent.com/developer/doc/1203)","source":"_posts/数据库-Redis命令.md","raw":"---\ntitle: Redis命令\ndate: 2020-05-23 20:54:16\ncategories:\n    - 技术\n    - 数据库\n    - redis\ntags:\n    - redis命令\n---\n\n简单对redis 命令进行总结、归纳。\n\n<!--more-->\n\n### 键\n\n![键](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/键%20.png)\n\n### String\n\n![String（字符串）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/String（字符串）%20.png)\n\n### List\n\n![List（列表）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/List（列表）%20.png)\n\n### Hash\n\n![Hash（哈希表）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Hash（哈希表）%20.png)\n\n### Set\n\n![Set（集合）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Set（集合）%20.png)\n\n### Zset\n\n![ZSet（SortedSet_有序集合）](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ZSet（SortedSet_有序集合）%20.png)\n\n更多命令参考[Redis教程](https://cloud.tencent.com/developer/doc/1203)","slug":"数据库-Redis命令","published":1,"updated":"2021-01-21T07:06:30.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudl0042jjlnbd9gamfj","content":"<p>简单对redis 命令进行总结、归纳。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/%E9%94%AE%20.png\" alt=\"键\"></p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/String%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%20.png\" alt=\"String（字符串）\"></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/List%EF%BC%88%E5%88%97%E8%A1%A8%EF%BC%89%20.png\" alt=\"List（列表）\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Hash%EF%BC%88%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%89%20.png\" alt=\"Hash（哈希表）\"></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Set%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89%20.png\" alt=\"Set（集合）\"></p>\n<h3 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ZSet%EF%BC%88SortedSet_%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%89%20.png\" alt=\"ZSet（SortedSet_有序集合）\"></p>\n<p>更多命令参考<a href=\"https://cloud.tencent.com/developer/doc/1203\">Redis教程</a></p>\n","site":{"data":{}},"excerpt":"<p>简单对redis 命令进行总结、归纳。</p>","more":"<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/%E9%94%AE%20.png\" alt=\"键\"></p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/String%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%20.png\" alt=\"String（字符串）\"></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/List%EF%BC%88%E5%88%97%E8%A1%A8%EF%BC%89%20.png\" alt=\"List（列表）\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Hash%EF%BC%88%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%89%20.png\" alt=\"Hash（哈希表）\"></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Set%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89%20.png\" alt=\"Set（集合）\"></p>\n<h3 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ZSet%EF%BC%88SortedSet_%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%89%20.png\" alt=\"ZSet（SortedSet_有序集合）\"></p>\n<p>更多命令参考<a href=\"https://cloud.tencent.com/developer/doc/1203\">Redis教程</a></p>"},{"title":"小故事","date":"2019-03-23T14:13:30.000Z","_content":"\n![20190517210307-茶](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210307-茶%20.jpg)\n\n### 关于晚安的事\n\n有一天，天堂放假，一个天使来到人间，为了化解自己的无聊，对一个女孩说，我可以实现你一个愿望，权利，金钱，美貌，爱情……女孩想得很认真，天使有些害怕，如果她说一些他实现不了的愿望，会很没面子。总之一定要让她看到天使是多么厉害，我要她崇拜我，我要让她感激我。“我想每天睡前都能听到你对我说晚安！”天使惊讶于如此简单的愿望，忽然有一种大材小用的感慨。“好，这很容易！”天使根本没有多想，就如此轻易的答应了。女孩也就欢欣雀跃，满心期待着愿望一天一天实现。晚上，在qq上，天使对女孩说：“晚安！”还画了一个：\"*\"，说这是给她的晚安kiss。女孩也就满足的睡去，梦都散发着甜甜的味道。也偶尔，网关断了，天使也会打个电话给她，对她说晚安，并在电话的另一端亲她的额头，祝她好梦。不知是从何时开始，天使要开始忙自己的事情了，他或许是太忙了，连说晚安的时间都没有了。于是，每天晚上，女孩都满怀期待的等着自己的晚安，却每晚都在失落中入睡，梦里，女孩站在远远的地方，看着忙碌的天使，他或许忙得忘记了晚安的约定，或许等他有空了，他会把亏欠的晚安都补给她。最终，天使忙得都忘记了女孩，终于永远的飞走了，带着那许多亏欠的晚安。很久之后，天堂放假的日子，一大群天使来到人间，他们问女孩，我们可以每人帮你实现一个愿望，权利，金钱，美貌，爱情。……女孩却没有说出自己的愿望，她知道，这是个简单到无法实现的愿望，哪怕是天使，也不能。\n\n### 人生\n\n##### 26岁\n\n你看着身边的人都结了婚，婚礼的份子钱逐年递增。春节回家，父母从带你串亲戚，变成了带你去见相亲对象，见了十几个姑娘，你每次都觉得和那个她，差了一点。\n\n##### 28岁\n\n你遇到了一个和你遭遇差不多的姑娘，你们有一搭没一搭地聊着。她说：你还不错，你喝了一口可乐说：你也是。\n你还不确定喜不喜欢她，双方家长就已经摆好了订婚宴。\n结婚的前一周，你和朋友出去喝酒。你说：不想结婚，朋友说：你啊，就是想太多，谁不是这么过来的？\n\n##### 29岁\n\n你们终于结了婚，婚礼办得不大不小，朋友来得不多不少。攒了几年想要去实现理想的钱，搭在了这一场百人的私人庙会上。\n婚礼进行到中间，司仪带着标准的商业化微笑，对着台下的亲朋喊道，要不要让他们亲一个，台下那些人跟着一起起哄。\n不知道为什么，你简简单单地亲了一口，俩人恢复到了一开始的站位。\n你小声说了一句：我爱你。那个昨天还看不惯你倒腾模型的新娘，愣了一下说：我也爱你。\n你不确定她是不是对你说的，就像你不确定是不是对她说的一样。\n婚礼结束后，并没有你想象得浪漫，你听着外屋的新娘一笔一笔地算着份子钱。想着不过才两年，怎么就变成这样了。\n想着想着，洞房夜就睡着了\n\n##### 30岁\n\n她怀孕了，辞掉了工作，在家养胎。你在公司逐渐有了点地位，手里管着十来个人，独立负责一个项目。\n结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享，但你依然不敢放松。\n每次加班，电话那头都是抱怨与委屈。但你不能争辩什么，谁让她怀了你的孩子。\n在这一刻，不论是她的父母还是你的父母，都无条件地站在这一边。\n\n##### 31岁\n\n孩子落地了，前前后后连孕检加上住院费花了10万块钱，不过无所谓，你看着你的孩子，怎么看怎么喜欢。高兴得仿佛这是你的新生。\n\n##### 32岁\n\n这是人生最不愿意重复的一年，平均睡眠3小时，孩子每一个小时都要闹腾一次，第二天拖着睡不醒的眼睛去上班。\n老板说你上班不干活，回家媳妇说你不干活。你想了半天不明白，那谁干活呢？\n那辆开了3年的车，成为了你真正的家，你不在抱怨路上拥堵的交通，你甚至开始希望再多堵一会。\n回到家，你关了发动机，在车上点了一根烟。这是你每天最幸福的十分钟，车前是功名利禄，车尾是柴米油盐。\n35岁\n你因为身体越来越差，加班越来越少，晋升的速度也越来越缓慢 。\n那天下班，媳妇告诉你，孩子要上幼儿园了，双语的一个月3000，你皱了皱眉头，那边就已经不耐烦了。\n“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”\n你没说话，回屋给媳妇转了6000块钱。这笔钱，你原本打算，给自己过个生日，买台新电脑。\n\n##### 38岁\n\n孩子上了一年级，老师说一年级最关键，打好基础很重要。你笑着说，是是是，老师您多照顾。\n新生接待的老师看着你不明事理的脸，给你指了一条明路，课外辅导班，一个月2200。\n\n##### 40岁\n\n孩子上了三年级，老师说，三年级，最关键，承上启下很重要。你笑着说：是是是，正打算再报个补习班。\n\n##### 44岁\n\n孩子上了初中，有一天回到家，他对你说，爸爸，我想学钢琴。你没什么犹豫的，你以为这些年，你已经习惯了。\n但那句“爸爸现在买不起”你始终说不出口，好在孩子比较懂事。他说：爸爸没事，要不我先学陶笛也可以，你看着这么懂事的孩子，却开心不起来。\n\n##### 46岁\n\n孩子上了一个不好不差的高中，有一天你在开会，接到了老师的电话，电话里说你的孩子在学校打架了，叫你去一趟。你唯唯诺诺地和那个比你还小5岁的领导请了个假。\n到学校又被老师训了一通，无非台词就是那一句，你们做家长的就知道工作，能不能陪陪孩子。\n你看着这个老师，有点可笑。好像当时说，家长在外辛苦点，多赚点钱让孩子多补补课的和他不是一个人。\n\n##### 50岁\n\n孩子上了大学，很争气，是一个一本。他学的专业你有点看不懂，你只知道工作不一定好找而且学费还死贵。\n你和他深夜想聊聊，准备了半斤白酒，一碟花生米，你说着那些曾经你最讨厌的话。――还是要为以后工作着想，挑个热门的专业，活着比热爱重要。\n你们从交流变成了争吵，你发现，你老了，老到可能都打不过这个18岁的孩子，你说不过他，只能说一句：我是你爸爸！\n孩子看着你，知道再怎么争辩都没用，这场确立你最后威严的酒局不欢而散。\n你听得不真切，在孩子回自己屋的路上好像叨叨了一句，我不想活得像你一样。\n怎么就哭了呢？50岁的人了。\n一定是酒太辣了，对不对，一定是酒太辣了。\n\n##### 55岁\n\n孩子工作了，似乎有一点理解你了，但你却反了过来，你说不要妥协。\n\n##### 56岁\n\n孩子也结婚了，你问他喜欢那个姑娘么。他愣了愣说：喜欢吧\n\n##### 60岁\n\n辛苦了一辈子，想出去走走，身边的那个人过了30年，你依旧分不清到底喜不喜欢。\n你们开始规划旅游路线，这么多年了，你们还是存在分歧，还是在争吵。某个瞬间，你觉得，这样可能也挺好。\n一切都准备好了，儿子说：爸妈，我工作太忙了，可以帮我照顾一下孩子么。\n你们退了机票，又回到了30年前。\n\n##### 70岁\n\n孩子的孩子也长大了，不用天天操心了，你下定决心说：一定要去玩一趟。可是手边的拐杖，只能支持你走到楼下的花园。\n\n##### 75岁\n\n你在医院的病床上，身边聚满了人，你迷迷糊糊的看见医生摇了摇头。\n周围那些人神情肃穆，你明白了，你要死掉了。你没有感到一丝害怕，你突然问自己，我到底是什么时候死掉的呢？\n你想起来30岁的那场婚礼，原来，那时候你就死掉了吧。\n依照惯例，死前的3秒，你的大脑要走马灯，倒叙你这75个年头的一生，画面一张一张地过。\n1秒\n2秒\n两秒过去了，你面无表情地看着这两秒内的回忆。\n第3秒，突然你笑了，原来已经回到了15岁的那一年。\n你看见一个男孩，他叼着一袋牛奶，背着书包。从另一个女孩家的阳台下跑过，那个男孩朝窗户里看了看。\n那是15岁的你暗恋的那个女孩子，你想不起来她长什么样子了，最后一秒你努力地回忆着，然后终于笑了出来。\n3秒过去了\n身边的人突然间开始嚎啕大哭，你可能听不清了，你最后听到的嘈杂的声音，是一群十五六的少年起着哄说的――\n答应他，答应他，答应他。","source":"_posts/生活-小故事.md","raw":"---\n\ntitle: 小故事\ncategories:\n  - 生活\n  - 感悟\ntags:\n  - 感悟\ndate: 2019-03-23 22:13:30\n---\n\n![20190517210307-茶](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210307-茶%20.jpg)\n\n### 关于晚安的事\n\n有一天，天堂放假，一个天使来到人间，为了化解自己的无聊，对一个女孩说，我可以实现你一个愿望，权利，金钱，美貌，爱情……女孩想得很认真，天使有些害怕，如果她说一些他实现不了的愿望，会很没面子。总之一定要让她看到天使是多么厉害，我要她崇拜我，我要让她感激我。“我想每天睡前都能听到你对我说晚安！”天使惊讶于如此简单的愿望，忽然有一种大材小用的感慨。“好，这很容易！”天使根本没有多想，就如此轻易的答应了。女孩也就欢欣雀跃，满心期待着愿望一天一天实现。晚上，在qq上，天使对女孩说：“晚安！”还画了一个：\"*\"，说这是给她的晚安kiss。女孩也就满足的睡去，梦都散发着甜甜的味道。也偶尔，网关断了，天使也会打个电话给她，对她说晚安，并在电话的另一端亲她的额头，祝她好梦。不知是从何时开始，天使要开始忙自己的事情了，他或许是太忙了，连说晚安的时间都没有了。于是，每天晚上，女孩都满怀期待的等着自己的晚安，却每晚都在失落中入睡，梦里，女孩站在远远的地方，看着忙碌的天使，他或许忙得忘记了晚安的约定，或许等他有空了，他会把亏欠的晚安都补给她。最终，天使忙得都忘记了女孩，终于永远的飞走了，带着那许多亏欠的晚安。很久之后，天堂放假的日子，一大群天使来到人间，他们问女孩，我们可以每人帮你实现一个愿望，权利，金钱，美貌，爱情。……女孩却没有说出自己的愿望，她知道，这是个简单到无法实现的愿望，哪怕是天使，也不能。\n\n### 人生\n\n##### 26岁\n\n你看着身边的人都结了婚，婚礼的份子钱逐年递增。春节回家，父母从带你串亲戚，变成了带你去见相亲对象，见了十几个姑娘，你每次都觉得和那个她，差了一点。\n\n##### 28岁\n\n你遇到了一个和你遭遇差不多的姑娘，你们有一搭没一搭地聊着。她说：你还不错，你喝了一口可乐说：你也是。\n你还不确定喜不喜欢她，双方家长就已经摆好了订婚宴。\n结婚的前一周，你和朋友出去喝酒。你说：不想结婚，朋友说：你啊，就是想太多，谁不是这么过来的？\n\n##### 29岁\n\n你们终于结了婚，婚礼办得不大不小，朋友来得不多不少。攒了几年想要去实现理想的钱，搭在了这一场百人的私人庙会上。\n婚礼进行到中间，司仪带着标准的商业化微笑，对着台下的亲朋喊道，要不要让他们亲一个，台下那些人跟着一起起哄。\n不知道为什么，你简简单单地亲了一口，俩人恢复到了一开始的站位。\n你小声说了一句：我爱你。那个昨天还看不惯你倒腾模型的新娘，愣了一下说：我也爱你。\n你不确定她是不是对你说的，就像你不确定是不是对她说的一样。\n婚礼结束后，并没有你想象得浪漫，你听着外屋的新娘一笔一笔地算着份子钱。想着不过才两年，怎么就变成这样了。\n想着想着，洞房夜就睡着了\n\n##### 30岁\n\n她怀孕了，辞掉了工作，在家养胎。你在公司逐渐有了点地位，手里管着十来个人，独立负责一个项目。\n结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享，但你依然不敢放松。\n每次加班，电话那头都是抱怨与委屈。但你不能争辩什么，谁让她怀了你的孩子。\n在这一刻，不论是她的父母还是你的父母，都无条件地站在这一边。\n\n##### 31岁\n\n孩子落地了，前前后后连孕检加上住院费花了10万块钱，不过无所谓，你看着你的孩子，怎么看怎么喜欢。高兴得仿佛这是你的新生。\n\n##### 32岁\n\n这是人生最不愿意重复的一年，平均睡眠3小时，孩子每一个小时都要闹腾一次，第二天拖着睡不醒的眼睛去上班。\n老板说你上班不干活，回家媳妇说你不干活。你想了半天不明白，那谁干活呢？\n那辆开了3年的车，成为了你真正的家，你不在抱怨路上拥堵的交通，你甚至开始希望再多堵一会。\n回到家，你关了发动机，在车上点了一根烟。这是你每天最幸福的十分钟，车前是功名利禄，车尾是柴米油盐。\n35岁\n你因为身体越来越差，加班越来越少，晋升的速度也越来越缓慢 。\n那天下班，媳妇告诉你，孩子要上幼儿园了，双语的一个月3000，你皱了皱眉头，那边就已经不耐烦了。\n“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”\n你没说话，回屋给媳妇转了6000块钱。这笔钱，你原本打算，给自己过个生日，买台新电脑。\n\n##### 38岁\n\n孩子上了一年级，老师说一年级最关键，打好基础很重要。你笑着说，是是是，老师您多照顾。\n新生接待的老师看着你不明事理的脸，给你指了一条明路，课外辅导班，一个月2200。\n\n##### 40岁\n\n孩子上了三年级，老师说，三年级，最关键，承上启下很重要。你笑着说：是是是，正打算再报个补习班。\n\n##### 44岁\n\n孩子上了初中，有一天回到家，他对你说，爸爸，我想学钢琴。你没什么犹豫的，你以为这些年，你已经习惯了。\n但那句“爸爸现在买不起”你始终说不出口，好在孩子比较懂事。他说：爸爸没事，要不我先学陶笛也可以，你看着这么懂事的孩子，却开心不起来。\n\n##### 46岁\n\n孩子上了一个不好不差的高中，有一天你在开会，接到了老师的电话，电话里说你的孩子在学校打架了，叫你去一趟。你唯唯诺诺地和那个比你还小5岁的领导请了个假。\n到学校又被老师训了一通，无非台词就是那一句，你们做家长的就知道工作，能不能陪陪孩子。\n你看着这个老师，有点可笑。好像当时说，家长在外辛苦点，多赚点钱让孩子多补补课的和他不是一个人。\n\n##### 50岁\n\n孩子上了大学，很争气，是一个一本。他学的专业你有点看不懂，你只知道工作不一定好找而且学费还死贵。\n你和他深夜想聊聊，准备了半斤白酒，一碟花生米，你说着那些曾经你最讨厌的话。――还是要为以后工作着想，挑个热门的专业，活着比热爱重要。\n你们从交流变成了争吵，你发现，你老了，老到可能都打不过这个18岁的孩子，你说不过他，只能说一句：我是你爸爸！\n孩子看着你，知道再怎么争辩都没用，这场确立你最后威严的酒局不欢而散。\n你听得不真切，在孩子回自己屋的路上好像叨叨了一句，我不想活得像你一样。\n怎么就哭了呢？50岁的人了。\n一定是酒太辣了，对不对，一定是酒太辣了。\n\n##### 55岁\n\n孩子工作了，似乎有一点理解你了，但你却反了过来，你说不要妥协。\n\n##### 56岁\n\n孩子也结婚了，你问他喜欢那个姑娘么。他愣了愣说：喜欢吧\n\n##### 60岁\n\n辛苦了一辈子，想出去走走，身边的那个人过了30年，你依旧分不清到底喜不喜欢。\n你们开始规划旅游路线，这么多年了，你们还是存在分歧，还是在争吵。某个瞬间，你觉得，这样可能也挺好。\n一切都准备好了，儿子说：爸妈，我工作太忙了，可以帮我照顾一下孩子么。\n你们退了机票，又回到了30年前。\n\n##### 70岁\n\n孩子的孩子也长大了，不用天天操心了，你下定决心说：一定要去玩一趟。可是手边的拐杖，只能支持你走到楼下的花园。\n\n##### 75岁\n\n你在医院的病床上，身边聚满了人，你迷迷糊糊的看见医生摇了摇头。\n周围那些人神情肃穆，你明白了，你要死掉了。你没有感到一丝害怕，你突然问自己，我到底是什么时候死掉的呢？\n你想起来30岁的那场婚礼，原来，那时候你就死掉了吧。\n依照惯例，死前的3秒，你的大脑要走马灯，倒叙你这75个年头的一生，画面一张一张地过。\n1秒\n2秒\n两秒过去了，你面无表情地看着这两秒内的回忆。\n第3秒，突然你笑了，原来已经回到了15岁的那一年。\n你看见一个男孩，他叼着一袋牛奶，背着书包。从另一个女孩家的阳台下跑过，那个男孩朝窗户里看了看。\n那是15岁的你暗恋的那个女孩子，你想不起来她长什么样子了，最后一秒你努力地回忆着，然后终于笑了出来。\n3秒过去了\n身边的人突然间开始嚎啕大哭，你可能听不清了，你最后听到的嘈杂的声音，是一群十五六的少年起着哄说的――\n答应他，答应他，答应他。","slug":"生活-小故事","published":1,"updated":"2021-01-25T02:58:41.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudm0045jjlncexrfmr8","content":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210307-%E8%8C%B6%20.jpg\" alt=\"20190517210307-茶\"></p>\n<h3 id=\"关于晚安的事\"><a href=\"#关于晚安的事\" class=\"headerlink\" title=\"关于晚安的事\"></a>关于晚安的事</h3><p>有一天，天堂放假，一个天使来到人间，为了化解自己的无聊，对一个女孩说，我可以实现你一个愿望，权利，金钱，美貌，爱情……女孩想得很认真，天使有些害怕，如果她说一些他实现不了的愿望，会很没面子。总之一定要让她看到天使是多么厉害，我要她崇拜我，我要让她感激我。“我想每天睡前都能听到你对我说晚安！”天使惊讶于如此简单的愿望，忽然有一种大材小用的感慨。“好，这很容易！”天使根本没有多想，就如此轻易的答应了。女孩也就欢欣雀跃，满心期待着愿望一天一天实现。晚上，在qq上，天使对女孩说：“晚安！”还画了一个：”*”，说这是给她的晚安kiss。女孩也就满足的睡去，梦都散发着甜甜的味道。也偶尔，网关断了，天使也会打个电话给她，对她说晚安，并在电话的另一端亲她的额头，祝她好梦。不知是从何时开始，天使要开始忙自己的事情了，他或许是太忙了，连说晚安的时间都没有了。于是，每天晚上，女孩都满怀期待的等着自己的晚安，却每晚都在失落中入睡，梦里，女孩站在远远的地方，看着忙碌的天使，他或许忙得忘记了晚安的约定，或许等他有空了，他会把亏欠的晚安都补给她。最终，天使忙得都忘记了女孩，终于永远的飞走了，带着那许多亏欠的晚安。很久之后，天堂放假的日子，一大群天使来到人间，他们问女孩，我们可以每人帮你实现一个愿望，权利，金钱，美貌，爱情。……女孩却没有说出自己的愿望，她知道，这是个简单到无法实现的愿望，哪怕是天使，也不能。</p>\n<h3 id=\"人生\"><a href=\"#人生\" class=\"headerlink\" title=\"人生\"></a>人生</h3><h5 id=\"26岁\"><a href=\"#26岁\" class=\"headerlink\" title=\"26岁\"></a>26岁</h5><p>你看着身边的人都结了婚，婚礼的份子钱逐年递增。春节回家，父母从带你串亲戚，变成了带你去见相亲对象，见了十几个姑娘，你每次都觉得和那个她，差了一点。</p>\n<h5 id=\"28岁\"><a href=\"#28岁\" class=\"headerlink\" title=\"28岁\"></a>28岁</h5><p>你遇到了一个和你遭遇差不多的姑娘，你们有一搭没一搭地聊着。她说：你还不错，你喝了一口可乐说：你也是。<br>你还不确定喜不喜欢她，双方家长就已经摆好了订婚宴。<br>结婚的前一周，你和朋友出去喝酒。你说：不想结婚，朋友说：你啊，就是想太多，谁不是这么过来的？</p>\n<h5 id=\"29岁\"><a href=\"#29岁\" class=\"headerlink\" title=\"29岁\"></a>29岁</h5><p>你们终于结了婚，婚礼办得不大不小，朋友来得不多不少。攒了几年想要去实现理想的钱，搭在了这一场百人的私人庙会上。<br>婚礼进行到中间，司仪带着标准的商业化微笑，对着台下的亲朋喊道，要不要让他们亲一个，台下那些人跟着一起起哄。<br>不知道为什么，你简简单单地亲了一口，俩人恢复到了一开始的站位。<br>你小声说了一句：我爱你。那个昨天还看不惯你倒腾模型的新娘，愣了一下说：我也爱你。<br>你不确定她是不是对你说的，就像你不确定是不是对她说的一样。<br>婚礼结束后，并没有你想象得浪漫，你听着外屋的新娘一笔一笔地算着份子钱。想着不过才两年，怎么就变成这样了。<br>想着想着，洞房夜就睡着了</p>\n<h5 id=\"30岁\"><a href=\"#30岁\" class=\"headerlink\" title=\"30岁\"></a>30岁</h5><p>她怀孕了，辞掉了工作，在家养胎。你在公司逐渐有了点地位，手里管着十来个人，独立负责一个项目。<br>结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享，但你依然不敢放松。<br>每次加班，电话那头都是抱怨与委屈。但你不能争辩什么，谁让她怀了你的孩子。<br>在这一刻，不论是她的父母还是你的父母，都无条件地站在这一边。</p>\n<h5 id=\"31岁\"><a href=\"#31岁\" class=\"headerlink\" title=\"31岁\"></a>31岁</h5><p>孩子落地了，前前后后连孕检加上住院费花了10万块钱，不过无所谓，你看着你的孩子，怎么看怎么喜欢。高兴得仿佛这是你的新生。</p>\n<h5 id=\"32岁\"><a href=\"#32岁\" class=\"headerlink\" title=\"32岁\"></a>32岁</h5><p>这是人生最不愿意重复的一年，平均睡眠3小时，孩子每一个小时都要闹腾一次，第二天拖着睡不醒的眼睛去上班。<br>老板说你上班不干活，回家媳妇说你不干活。你想了半天不明白，那谁干活呢？<br>那辆开了3年的车，成为了你真正的家，你不在抱怨路上拥堵的交通，你甚至开始希望再多堵一会。<br>回到家，你关了发动机，在车上点了一根烟。这是你每天最幸福的十分钟，车前是功名利禄，车尾是柴米油盐。<br>35岁<br>你因为身体越来越差，加班越来越少，晋升的速度也越来越缓慢 。<br>那天下班，媳妇告诉你，孩子要上幼儿园了，双语的一个月3000，你皱了皱眉头，那边就已经不耐烦了。<br>“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱。这笔钱，你原本打算，给自己过个生日，买台新电脑。</p>\n<h5 id=\"38岁\"><a href=\"#38岁\" class=\"headerlink\" title=\"38岁\"></a>38岁</h5><p>孩子上了一年级，老师说一年级最关键，打好基础很重要。你笑着说，是是是，老师您多照顾。<br>新生接待的老师看着你不明事理的脸，给你指了一条明路，课外辅导班，一个月2200。</p>\n<h5 id=\"40岁\"><a href=\"#40岁\" class=\"headerlink\" title=\"40岁\"></a>40岁</h5><p>孩子上了三年级，老师说，三年级，最关键，承上启下很重要。你笑着说：是是是，正打算再报个补习班。</p>\n<h5 id=\"44岁\"><a href=\"#44岁\" class=\"headerlink\" title=\"44岁\"></a>44岁</h5><p>孩子上了初中，有一天回到家，他对你说，爸爸，我想学钢琴。你没什么犹豫的，你以为这些年，你已经习惯了。<br>但那句“爸爸现在买不起”你始终说不出口，好在孩子比较懂事。他说：爸爸没事，要不我先学陶笛也可以，你看着这么懂事的孩子，却开心不起来。</p>\n<h5 id=\"46岁\"><a href=\"#46岁\" class=\"headerlink\" title=\"46岁\"></a>46岁</h5><p>孩子上了一个不好不差的高中，有一天你在开会，接到了老师的电话，电话里说你的孩子在学校打架了，叫你去一趟。你唯唯诺诺地和那个比你还小5岁的领导请了个假。<br>到学校又被老师训了一通，无非台词就是那一句，你们做家长的就知道工作，能不能陪陪孩子。<br>你看着这个老师，有点可笑。好像当时说，家长在外辛苦点，多赚点钱让孩子多补补课的和他不是一个人。</p>\n<h5 id=\"50岁\"><a href=\"#50岁\" class=\"headerlink\" title=\"50岁\"></a>50岁</h5><p>孩子上了大学，很争气，是一个一本。他学的专业你有点看不懂，你只知道工作不一定好找而且学费还死贵。<br>你和他深夜想聊聊，准备了半斤白酒，一碟花生米，你说着那些曾经你最讨厌的话。――还是要为以后工作着想，挑个热门的专业，活着比热爱重要。<br>你们从交流变成了争吵，你发现，你老了，老到可能都打不过这个18岁的孩子，你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用，这场确立你最后威严的酒局不欢而散。<br>你听得不真切，在孩子回自己屋的路上好像叨叨了一句，我不想活得像你一样。<br>怎么就哭了呢？50岁的人了。<br>一定是酒太辣了，对不对，一定是酒太辣了。</p>\n<h5 id=\"55岁\"><a href=\"#55岁\" class=\"headerlink\" title=\"55岁\"></a>55岁</h5><p>孩子工作了，似乎有一点理解你了，但你却反了过来，你说不要妥协。</p>\n<h5 id=\"56岁\"><a href=\"#56岁\" class=\"headerlink\" title=\"56岁\"></a>56岁</h5><p>孩子也结婚了，你问他喜欢那个姑娘么。他愣了愣说：喜欢吧</p>\n<h5 id=\"60岁\"><a href=\"#60岁\" class=\"headerlink\" title=\"60岁\"></a>60岁</h5><p>辛苦了一辈子，想出去走走，身边的那个人过了30年，你依旧分不清到底喜不喜欢。<br>你们开始规划旅游路线，这么多年了，你们还是存在分歧，还是在争吵。某个瞬间，你觉得，这样可能也挺好。<br>一切都准备好了，儿子说：爸妈，我工作太忙了，可以帮我照顾一下孩子么。<br>你们退了机票，又回到了30年前。</p>\n<h5 id=\"70岁\"><a href=\"#70岁\" class=\"headerlink\" title=\"70岁\"></a>70岁</h5><p>孩子的孩子也长大了，不用天天操心了，你下定决心说：一定要去玩一趟。可是手边的拐杖，只能支持你走到楼下的花园。</p>\n<h5 id=\"75岁\"><a href=\"#75岁\" class=\"headerlink\" title=\"75岁\"></a>75岁</h5><p>你在医院的病床上，身边聚满了人，你迷迷糊糊的看见医生摇了摇头。<br>周围那些人神情肃穆，你明白了，你要死掉了。你没有感到一丝害怕，你突然问自己，我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼，原来，那时候你就死掉了吧。<br>依照惯例，死前的3秒，你的大脑要走马灯，倒叙你这75个年头的一生，画面一张一张地过。<br>1秒<br>2秒<br>两秒过去了，你面无表情地看着这两秒内的回忆。<br>第3秒，突然你笑了，原来已经回到了15岁的那一年。<br>你看见一个男孩，他叼着一袋牛奶，背着书包。从另一个女孩家的阳台下跑过，那个男孩朝窗户里看了看。<br>那是15岁的你暗恋的那个女孩子，你想不起来她长什么样子了，最后一秒你努力地回忆着，然后终于笑了出来。<br>3秒过去了<br>身边的人突然间开始嚎啕大哭，你可能听不清了，你最后听到的嘈杂的声音，是一群十五六的少年起着哄说的――<br>答应他，答应他，答应他。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210307-%E8%8C%B6%20.jpg\" alt=\"20190517210307-茶\"></p>\n<h3 id=\"关于晚安的事\"><a href=\"#关于晚安的事\" class=\"headerlink\" title=\"关于晚安的事\"></a>关于晚安的事</h3><p>有一天，天堂放假，一个天使来到人间，为了化解自己的无聊，对一个女孩说，我可以实现你一个愿望，权利，金钱，美貌，爱情……女孩想得很认真，天使有些害怕，如果她说一些他实现不了的愿望，会很没面子。总之一定要让她看到天使是多么厉害，我要她崇拜我，我要让她感激我。“我想每天睡前都能听到你对我说晚安！”天使惊讶于如此简单的愿望，忽然有一种大材小用的感慨。“好，这很容易！”天使根本没有多想，就如此轻易的答应了。女孩也就欢欣雀跃，满心期待着愿望一天一天实现。晚上，在qq上，天使对女孩说：“晚安！”还画了一个：”*”，说这是给她的晚安kiss。女孩也就满足的睡去，梦都散发着甜甜的味道。也偶尔，网关断了，天使也会打个电话给她，对她说晚安，并在电话的另一端亲她的额头，祝她好梦。不知是从何时开始，天使要开始忙自己的事情了，他或许是太忙了，连说晚安的时间都没有了。于是，每天晚上，女孩都满怀期待的等着自己的晚安，却每晚都在失落中入睡，梦里，女孩站在远远的地方，看着忙碌的天使，他或许忙得忘记了晚安的约定，或许等他有空了，他会把亏欠的晚安都补给她。最终，天使忙得都忘记了女孩，终于永远的飞走了，带着那许多亏欠的晚安。很久之后，天堂放假的日子，一大群天使来到人间，他们问女孩，我们可以每人帮你实现一个愿望，权利，金钱，美貌，爱情。……女孩却没有说出自己的愿望，她知道，这是个简单到无法实现的愿望，哪怕是天使，也不能。</p>\n<h3 id=\"人生\"><a href=\"#人生\" class=\"headerlink\" title=\"人生\"></a>人生</h3><h5 id=\"26岁\"><a href=\"#26岁\" class=\"headerlink\" title=\"26岁\"></a>26岁</h5><p>你看着身边的人都结了婚，婚礼的份子钱逐年递增。春节回家，父母从带你串亲戚，变成了带你去见相亲对象，见了十几个姑娘，你每次都觉得和那个她，差了一点。</p>\n<h5 id=\"28岁\"><a href=\"#28岁\" class=\"headerlink\" title=\"28岁\"></a>28岁</h5><p>你遇到了一个和你遭遇差不多的姑娘，你们有一搭没一搭地聊着。她说：你还不错，你喝了一口可乐说：你也是。<br>你还不确定喜不喜欢她，双方家长就已经摆好了订婚宴。<br>结婚的前一周，你和朋友出去喝酒。你说：不想结婚，朋友说：你啊，就是想太多，谁不是这么过来的？</p>\n<h5 id=\"29岁\"><a href=\"#29岁\" class=\"headerlink\" title=\"29岁\"></a>29岁</h5><p>你们终于结了婚，婚礼办得不大不小，朋友来得不多不少。攒了几年想要去实现理想的钱，搭在了这一场百人的私人庙会上。<br>婚礼进行到中间，司仪带着标准的商业化微笑，对着台下的亲朋喊道，要不要让他们亲一个，台下那些人跟着一起起哄。<br>不知道为什么，你简简单单地亲了一口，俩人恢复到了一开始的站位。<br>你小声说了一句：我爱你。那个昨天还看不惯你倒腾模型的新娘，愣了一下说：我也爱你。<br>你不确定她是不是对你说的，就像你不确定是不是对她说的一样。<br>婚礼结束后，并没有你想象得浪漫，你听着外屋的新娘一笔一笔地算着份子钱。想着不过才两年，怎么就变成这样了。<br>想着想着，洞房夜就睡着了</p>\n<h5 id=\"30岁\"><a href=\"#30岁\" class=\"headerlink\" title=\"30岁\"></a>30岁</h5><p>她怀孕了，辞掉了工作，在家养胎。你在公司逐渐有了点地位，手里管着十来个人，独立负责一个项目。<br>结婚前陪嫁的那辆20万左右的车也变成了你一个人的独享，但你依然不敢放松。<br>每次加班，电话那头都是抱怨与委屈。但你不能争辩什么，谁让她怀了你的孩子。<br>在这一刻，不论是她的父母还是你的父母，都无条件地站在这一边。</p>\n<h5 id=\"31岁\"><a href=\"#31岁\" class=\"headerlink\" title=\"31岁\"></a>31岁</h5><p>孩子落地了，前前后后连孕检加上住院费花了10万块钱，不过无所谓，你看着你的孩子，怎么看怎么喜欢。高兴得仿佛这是你的新生。</p>\n<h5 id=\"32岁\"><a href=\"#32岁\" class=\"headerlink\" title=\"32岁\"></a>32岁</h5><p>这是人生最不愿意重复的一年，平均睡眠3小时，孩子每一个小时都要闹腾一次，第二天拖着睡不醒的眼睛去上班。<br>老板说你上班不干活，回家媳妇说你不干活。你想了半天不明白，那谁干活呢？<br>那辆开了3年的车，成为了你真正的家，你不在抱怨路上拥堵的交通，你甚至开始希望再多堵一会。<br>回到家，你关了发动机，在车上点了一根烟。这是你每天最幸福的十分钟，车前是功名利禄，车尾是柴米油盐。<br>35岁<br>你因为身体越来越差，加班越来越少，晋升的速度也越来越缓慢 。<br>那天下班，媳妇告诉你，孩子要上幼儿园了，双语的一个月3000，你皱了皱眉头，那边就已经不耐烦了。<br>“四单元的老王家孩子，一个月6000”“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱。这笔钱，你原本打算，给自己过个生日，买台新电脑。</p>\n<h5 id=\"38岁\"><a href=\"#38岁\" class=\"headerlink\" title=\"38岁\"></a>38岁</h5><p>孩子上了一年级，老师说一年级最关键，打好基础很重要。你笑着说，是是是，老师您多照顾。<br>新生接待的老师看着你不明事理的脸，给你指了一条明路，课外辅导班，一个月2200。</p>\n<h5 id=\"40岁\"><a href=\"#40岁\" class=\"headerlink\" title=\"40岁\"></a>40岁</h5><p>孩子上了三年级，老师说，三年级，最关键，承上启下很重要。你笑着说：是是是，正打算再报个补习班。</p>\n<h5 id=\"44岁\"><a href=\"#44岁\" class=\"headerlink\" title=\"44岁\"></a>44岁</h5><p>孩子上了初中，有一天回到家，他对你说，爸爸，我想学钢琴。你没什么犹豫的，你以为这些年，你已经习惯了。<br>但那句“爸爸现在买不起”你始终说不出口，好在孩子比较懂事。他说：爸爸没事，要不我先学陶笛也可以，你看着这么懂事的孩子，却开心不起来。</p>\n<h5 id=\"46岁\"><a href=\"#46岁\" class=\"headerlink\" title=\"46岁\"></a>46岁</h5><p>孩子上了一个不好不差的高中，有一天你在开会，接到了老师的电话，电话里说你的孩子在学校打架了，叫你去一趟。你唯唯诺诺地和那个比你还小5岁的领导请了个假。<br>到学校又被老师训了一通，无非台词就是那一句，你们做家长的就知道工作，能不能陪陪孩子。<br>你看着这个老师，有点可笑。好像当时说，家长在外辛苦点，多赚点钱让孩子多补补课的和他不是一个人。</p>\n<h5 id=\"50岁\"><a href=\"#50岁\" class=\"headerlink\" title=\"50岁\"></a>50岁</h5><p>孩子上了大学，很争气，是一个一本。他学的专业你有点看不懂，你只知道工作不一定好找而且学费还死贵。<br>你和他深夜想聊聊，准备了半斤白酒，一碟花生米，你说着那些曾经你最讨厌的话。――还是要为以后工作着想，挑个热门的专业，活着比热爱重要。<br>你们从交流变成了争吵，你发现，你老了，老到可能都打不过这个18岁的孩子，你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用，这场确立你最后威严的酒局不欢而散。<br>你听得不真切，在孩子回自己屋的路上好像叨叨了一句，我不想活得像你一样。<br>怎么就哭了呢？50岁的人了。<br>一定是酒太辣了，对不对，一定是酒太辣了。</p>\n<h5 id=\"55岁\"><a href=\"#55岁\" class=\"headerlink\" title=\"55岁\"></a>55岁</h5><p>孩子工作了，似乎有一点理解你了，但你却反了过来，你说不要妥协。</p>\n<h5 id=\"56岁\"><a href=\"#56岁\" class=\"headerlink\" title=\"56岁\"></a>56岁</h5><p>孩子也结婚了，你问他喜欢那个姑娘么。他愣了愣说：喜欢吧</p>\n<h5 id=\"60岁\"><a href=\"#60岁\" class=\"headerlink\" title=\"60岁\"></a>60岁</h5><p>辛苦了一辈子，想出去走走，身边的那个人过了30年，你依旧分不清到底喜不喜欢。<br>你们开始规划旅游路线，这么多年了，你们还是存在分歧，还是在争吵。某个瞬间，你觉得，这样可能也挺好。<br>一切都准备好了，儿子说：爸妈，我工作太忙了，可以帮我照顾一下孩子么。<br>你们退了机票，又回到了30年前。</p>\n<h5 id=\"70岁\"><a href=\"#70岁\" class=\"headerlink\" title=\"70岁\"></a>70岁</h5><p>孩子的孩子也长大了，不用天天操心了，你下定决心说：一定要去玩一趟。可是手边的拐杖，只能支持你走到楼下的花园。</p>\n<h5 id=\"75岁\"><a href=\"#75岁\" class=\"headerlink\" title=\"75岁\"></a>75岁</h5><p>你在医院的病床上，身边聚满了人，你迷迷糊糊的看见医生摇了摇头。<br>周围那些人神情肃穆，你明白了，你要死掉了。你没有感到一丝害怕，你突然问自己，我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼，原来，那时候你就死掉了吧。<br>依照惯例，死前的3秒，你的大脑要走马灯，倒叙你这75个年头的一生，画面一张一张地过。<br>1秒<br>2秒<br>两秒过去了，你面无表情地看着这两秒内的回忆。<br>第3秒，突然你笑了，原来已经回到了15岁的那一年。<br>你看见一个男孩，他叼着一袋牛奶，背着书包。从另一个女孩家的阳台下跑过，那个男孩朝窗户里看了看。<br>那是15岁的你暗恋的那个女孩子，你想不起来她长什么样子了，最后一秒你努力地回忆着，然后终于笑了出来。<br>3秒过去了<br>身边的人突然间开始嚎啕大哭，你可能听不清了，你最后听到的嘈杂的声音，是一群十五六的少年起着哄说的――<br>答应他，答应他，答应他。</p>\n"},{"title":"来来来，你能猜出来吗","date":"2019-03-23T14:11:27.000Z","_content":"![20190517210413-命](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210413-命%20.jpg)\n<!--more-->\n\n### 来来来，你能猜出来吗\n\n 考试前，小红对小明说，如果这次你能考全班第一，现在就和你啪啪啪。全班同学都听到了，考卷发下来后，大家都默默的把笔放下，打算交白卷。小明眼泛泪光，看着虎背熊腰200斤的小红，默默的把试卷撕碎吃了！小红微微一笑，在自己的试卷上写下了小明的名字。老师改卷的时候把唯一一份写答案的试卷扔进了碎纸机，毕竟她是小明的母亲，校长在门缝里看到了，偷偷把一张试卷写满，写上了小明的名字，毕竟他和小红妈妈的艺术照还在小红手里，教育局长发现了试卷，把它点着烧了，他满意的看着火光想起了小明嫩滑滑的身体。市长收到消息，偷天换日般的把小刚的试卷换成小明的，毕竟小红有了小明就不会再来打扰他了。省长坐在办公室默默的注视着屏幕上显示出来的市长的一举一动，一道命令下去，学校办公室着火了，毕竟小明可是他的儿子。然而大家都不知道副校长早就把试卷偷偷的拿到了自己的办公室然后走向书架后面的暗门跪在了小红的面前，小红一边脱下假面具和看起来两百斤的厚的衣服露出了倾国倾城的面容和苗条的身材一边用风铃般的声音说着“关于爱情我们永远都不知道他会发生些什么”副校长顺从的说着“是啊是啊”随即含住了小红那比自己还大的丁丁，陶醉的闭上了眼","source":"_posts/生活-笑话-一.md","raw":"---\ntitle: 来来来，你能猜出来吗\ncategories:\n  - 生活\n  - 笑话\ntags:\n  - 笑话\ndate: 2019-03-23 22:11:27\n---\n![20190517210413-命](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210413-命%20.jpg)\n<!--more-->\n\n### 来来来，你能猜出来吗\n\n 考试前，小红对小明说，如果这次你能考全班第一，现在就和你啪啪啪。全班同学都听到了，考卷发下来后，大家都默默的把笔放下，打算交白卷。小明眼泛泪光，看着虎背熊腰200斤的小红，默默的把试卷撕碎吃了！小红微微一笑，在自己的试卷上写下了小明的名字。老师改卷的时候把唯一一份写答案的试卷扔进了碎纸机，毕竟她是小明的母亲，校长在门缝里看到了，偷偷把一张试卷写满，写上了小明的名字，毕竟他和小红妈妈的艺术照还在小红手里，教育局长发现了试卷，把它点着烧了，他满意的看着火光想起了小明嫩滑滑的身体。市长收到消息，偷天换日般的把小刚的试卷换成小明的，毕竟小红有了小明就不会再来打扰他了。省长坐在办公室默默的注视着屏幕上显示出来的市长的一举一动，一道命令下去，学校办公室着火了，毕竟小明可是他的儿子。然而大家都不知道副校长早就把试卷偷偷的拿到了自己的办公室然后走向书架后面的暗门跪在了小红的面前，小红一边脱下假面具和看起来两百斤的厚的衣服露出了倾国倾城的面容和苗条的身材一边用风铃般的声音说着“关于爱情我们永远都不知道他会发生些什么”副校长顺从的说着“是啊是啊”随即含住了小红那比自己还大的丁丁，陶醉的闭上了眼","slug":"生活-笑话-一","published":1,"updated":"2021-01-21T07:06:37.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudo0049jjlnfvhbeh3f","content":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210413-%E5%91%BD%20.jpg\" alt=\"20190517210413-命\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"来来来，你能猜出来吗\"><a href=\"#来来来，你能猜出来吗\" class=\"headerlink\" title=\"来来来，你能猜出来吗\"></a>来来来，你能猜出来吗</h3><p> 考试前，小红对小明说，如果这次你能考全班第一，现在就和你啪啪啪。全班同学都听到了，考卷发下来后，大家都默默的把笔放下，打算交白卷。小明眼泛泪光，看着虎背熊腰200斤的小红，默默的把试卷撕碎吃了！小红微微一笑，在自己的试卷上写下了小明的名字。老师改卷的时候把唯一一份写答案的试卷扔进了碎纸机，毕竟她是小明的母亲，校长在门缝里看到了，偷偷把一张试卷写满，写上了小明的名字，毕竟他和小红妈妈的艺术照还在小红手里，教育局长发现了试卷，把它点着烧了，他满意的看着火光想起了小明嫩滑滑的身体。市长收到消息，偷天换日般的把小刚的试卷换成小明的，毕竟小红有了小明就不会再来打扰他了。省长坐在办公室默默的注视着屏幕上显示出来的市长的一举一动，一道命令下去，学校办公室着火了，毕竟小明可是他的儿子。然而大家都不知道副校长早就把试卷偷偷的拿到了自己的办公室然后走向书架后面的暗门跪在了小红的面前，小红一边脱下假面具和看起来两百斤的厚的衣服露出了倾国倾城的面容和苗条的身材一边用风铃般的声音说着“关于爱情我们永远都不知道他会发生些什么”副校长顺从的说着“是啊是啊”随即含住了小红那比自己还大的丁丁，陶醉的闭上了眼</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190517210413-%E5%91%BD%20.jpg\" alt=\"20190517210413-命\"></p>","more":"<h3 id=\"来来来，你能猜出来吗\"><a href=\"#来来来，你能猜出来吗\" class=\"headerlink\" title=\"来来来，你能猜出来吗\"></a>来来来，你能猜出来吗</h3><p> 考试前，小红对小明说，如果这次你能考全班第一，现在就和你啪啪啪。全班同学都听到了，考卷发下来后，大家都默默的把笔放下，打算交白卷。小明眼泛泪光，看着虎背熊腰200斤的小红，默默的把试卷撕碎吃了！小红微微一笑，在自己的试卷上写下了小明的名字。老师改卷的时候把唯一一份写答案的试卷扔进了碎纸机，毕竟她是小明的母亲，校长在门缝里看到了，偷偷把一张试卷写满，写上了小明的名字，毕竟他和小红妈妈的艺术照还在小红手里，教育局长发现了试卷，把它点着烧了，他满意的看着火光想起了小明嫩滑滑的身体。市长收到消息，偷天换日般的把小刚的试卷换成小明的，毕竟小红有了小明就不会再来打扰他了。省长坐在办公室默默的注视着屏幕上显示出来的市长的一举一动，一道命令下去，学校办公室着火了，毕竟小明可是他的儿子。然而大家都不知道副校长早就把试卷偷偷的拿到了自己的办公室然后走向书架后面的暗门跪在了小红的面前，小红一边脱下假面具和看起来两百斤的厚的衣服露出了倾国倾城的面容和苗条的身材一边用风铃般的声音说着“关于爱情我们永远都不知道他会发生些什么”副校长顺从的说着“是啊是啊”随即含住了小红那比自己还大的丁丁，陶醉的闭上了眼</p>"},{"title":"经典排序算法总结与实现","date":"2019-05-09T11:54:09.000Z","_content":"经典排序算法在面试中占有很大的比重，也是基础，为了未雨绸缪，整理并用Python实现了七大经典排序算法，包括冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。之所以用Python实现，主要是因为它更接近伪代码，能用更少的代码实现算法，更利于理解。\n\n本篇博客所有排序实现均默认从小到大。\n## 一、冒泡排序 `BubbleSort`\n\n### 介绍\n\n冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序逆序就把他们交换过来。\n\n### 步骤\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n不过针对上述实现过程还有两种优化方案。\n\n- 优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。\n- 优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序，不用再排序了。因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。\n\n### 源代码\n\n```python\ndef bubble_sort(ary):\n    n = len(ary)                   #获得数组的长度\n    for i in range(n):\n        for j in range(1,n-i):\n            if  ary[j-1] > ary[j] :       #如果前者比后者大\n                ary[j-1],ary[j] = ary[j],ary[j-1]       #则交换两者\n    return ary\n\n\n#优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。\n#用一个标记记录这个状态即可。\ndef bubble_sort2(ary):\n    n = len(ary)\n    for i in range(n):\n        flag = 1                    #标记\n        for j in range(1,n-i):\n            if  ary[j-1] > ary[j] :\n                ary[j-1],ary[j] = ary[j],ary[j-1]\n                flag = 0\n        if flag :                   #全排好序了，直接跳出\n            break\n    return ary\n\n#优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序了。\n# 因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。\ndef bubble_sort3(ary):\n    n = len(ary)\n    k = n                           #k为循环的范围，初始值n\n    for i in range(n):\n        flag = 1\n        for j in range(1,k):        #只遍历到最后交换的位置即可\n            if  ary[j-1] > ary[j] :\n                ary[j-1],ary[j] = ary[j],ary[j-1]\n                k = j               #记录最后交换的位置\n                flag = 0\n        if flag :\n            break\n    return ary\n```\n## 二、选择排序 `SelectionSort`\n\n### 介绍\n\n选择排序无疑是最简单直观的排序。它的工作原理如下。\n\n### 步骤\n\n1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 以此类推，直到所有元素均排序完毕。\n\n### 源代码\n\n```python\ndef select_sort(ary):\n    n = len(ary)\n    for i in range(0,n):\n        min = i                             #最小元素下标标记\n        for j in range(i+1,n):\n            if ary[j] < ary[min] :\n                min = j                     #找到最小值的下标\n        ary[min],ary[i] = ary[i],ary[min]   #交换两者\n    return ary\n```\n\n## 三、插入排序 `InsertionSort`\n\n### 介绍\n\n插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n### 步骤\n\n1. 从第一个元素开始，该元素可以认为已经被排序\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n3. 如果被扫描的元素（已排序）大于新元素，将该元素后移一位\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n5. 将新元素插入到该位置后\n6. 重复步骤2~5\n\n### 排序演示\n\n![20190509200851-Insertion-sort-example-300px](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509200851-Insertion-sort-example-300px%20.gif)\n\n### 源代码\n\n```python\ndef insert_sort(ary):\n    n = len(ary)\n    for i in range(1,n):\n        if ary[i] < ary[i-1]:\n            temp = ary[i]\n            index = i           #待插入的下标\n            for j in range(i-1,-1,-1):  #从i-1 循环到 0 (包括0)\n                if ary[j] > temp :\n                    ary[j+1] = ary[j]\n                    index = j   #记录待插入下标\n                else :\n                    break\n            ary[index] = temp\n    return ary\n```\n\n## 四、希尔排序 `ShellSort`\n\n### 介绍：\n\n希尔排序，也称递减增量排序算法，实质是分组插入排序。由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。\n\n### 步骤：\n\n希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。\n\n1. 例如，假设有这样一组数`[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]`，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：\n    ```\n    13 14 94 33 82\n    25 59 94 65 23\n    45 27 73 25 39\n    10\n    ```\n2. 然后我们对每列进行排序：\n    ```\n    10 14 73 25 23\n    13 27 94 33 39\n    25 59 94 65 82\n    45\n    ```\n3. 将上述四行数字，依序接在一起时我们得到：`[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]`。这时10已经移至正确位置了，然后再以3为步长进行排序：\n    ```\n    10 14 73\n    25 23 13\n    27 94 33\n    39 25 59\n    94 65 82\n    45\n    ```\n    排序之后变为：\n    ```\n    10 14 13\n    25 23 33\n    27 25 59\n    39 65 73\n    45 94 82\n    94\n    ```\n4. 最后以1步长进行排序（此时就是简单的插入排序了）。\n\n### 源代码\n\n```python\ndef shell_sort(ary):\n    n = len(ary)\n    gap = round(n/2)       #初始步长 , 用round四舍五入取整\n    while gap > 0 :\n        for i in range(gap,n):        #每一列进行插入排序 , 从gap 到 n-1\n            temp = ary[i]\n            j = i\n            while ( j >= gap and ary[j-gap] > temp ):    #插入排序\n                ary[j] = ary[j-gap]\n                j = j - gap\n            ary[j] = temp\n        gap = round(gap/2)                     #重新设置步长\n    return ary\n```\n## 五、归并排序 `MergeSort`\n\n### 介绍\n\n归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。\n\n先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。\n\n再考虑递归分解，基本思路是将数组分解成left和right，如果这两个数组内部数据是有序的，那么就可以用上面合并数组的方法将这两个数组合并排序。如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，此时认为该小组内部已有序。然后合并排序相邻二个小组即可。\n\n### 排序演示\n\n![20190509201729-Merge-sort-example-300px](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509201729-Merge-sort-example-300px%20.gif)\n\n### 源代码\n\n```python\ndef merge_sort(ary):\n    if len(ary) <= 1 : return ary\n    num = int(len(ary)/2)       #二分分解\n    left = merge_sort(ary[:num])\n    right = merge_sort(ary[num:])\n    return merge(left,right)    #合并数组\n\ndef merge(left,right):\n    '''合并操作，\n    将两个有序数组left[]和right[]合并成一个大的有序数组'''\n    l,r = 0,0           #left与right数组的下标指针\n    result = []\n    while l<len(left) and r<len(right) :\n        if left[l] < right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    result += left[l:]\n    result += right[r:]\n    return result\n```\n## 六、快速排序 `QuickSort`\n\n### 介绍\n\n快速排序通常明显比同为`Ο(n log n)`的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。\n\n### 步骤\n\n1. 从数列中挑出一个元素作为基准数。\n2. 分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。\n3. 再对左右区间递归执行第二步，直至各区间只有一个数。\n\n### 排序演示\n\n![20190509202100-Quicksort-example](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509202100-Quicksort-example%20.gif)\n\n### 源代码\n\n```python\ndef quick_sort(ary):\n    return qsort(ary,0,len(ary)-1)\n\ndef qsort(ary,left,right):\n    #快排函数，ary为待排序数组，left为待排序的左边界，right为右边界\n    if left >= right : return ary\n    key = ary[left]     #取最左边的为基准数\n    lp = left           #左指针\n    rp = right          #右指针\n    while lp < rp :\n        while ary[rp] >= key and lp < rp :\n            rp -= 1\n        while ary[lp] <= key and lp < rp :\n            lp += 1\n        ary[lp],ary[rp] = ary[rp],ary[lp]\n    ary[left],ary[lp] = ary[lp],ary[left]\n    qsort(ary,left,lp-1)\n    qsort(ary,rp+1,right)\n    return ary\n\n```\n\n## 七、堆排序 `HeapSort`\n\n### 介绍：\n\n堆排序在 `top K` 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。\n\n> 二叉堆具有以下性质：\n\n父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。\n每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。\n\n### 步骤\n\n1. 构造最大堆（`Build_Max_Heap`）：若数组下标范围为`0~n`，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从`n/2-1`开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。\n\n2. 堆排序（`HeapSort`）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将`heap[0]`与`heap[n-1]`交换，再对`heap[0...n-2]`做最大堆调整。第二次将`heap[0]`与`heap[n-2]`交换，再对`heap[0...n-3]`做最大堆调整。重复该操作直至`heap[0]`和`heap[1]`交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。\n\n3. 最大堆调整（`Max_Heapify`）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。\n\n### 排序演示\n\n![20190509203202-Heapsort-example](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203202-Heapsort-example%20.gif)\n\n### 源代码\n\n```python\ndef heap_sort(ary) :\n    n = len(ary)\n    first = int(n/2-1)       #最后一个非叶子节点\n    for start in range(first,-1,-1) :     #构造大根堆\n        max_heapify(ary,start,n-1)\n    for end in range(n-1,0,-1):           #堆排，将大根堆转换成有序数组\n        ary[end],ary[0] = ary[0],ary[end]\n        max_heapify(ary,0,end-1)\n    return ary\n\n\n#最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点\n#start为当前需要调整最大堆的位置，end为调整边界\ndef max_heapify(ary,start,end):\n    root = start\n    while True :\n        child = root*2 +1               #调整节点的子节点\n        if child > end : break\n        if child+1 <= end and ary[child] < ary[child+1] :\n            child = child+1             #取较大的子节点\n        if ary[root] < ary[child] :     #较大的子节点成为父节点\n            ary[root],ary[child] = ary[child],ary[root]     #交换\n            root = child\n        else :\n            break\n\n```\n## 总结\n下面为七种经典排序算法指标对比情况：\n![20190509203208-81b78497jw1emncvtdf1qj20u10afn0r](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203208-81b78497jw1emncvtdf1qj20u10afn0r%20.jpg)\n\n","source":"_posts/算法-排序.md","raw":"---\ntitle: 经典排序算法总结与实现\ncategories:\n  - 技术\n  - 算法\n  - 排序\ntags:\n  - 排序\ndate: 2019-05-09 19:54:09\n---\n经典排序算法在面试中占有很大的比重，也是基础，为了未雨绸缪，整理并用Python实现了七大经典排序算法，包括冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。之所以用Python实现，主要是因为它更接近伪代码，能用更少的代码实现算法，更利于理解。\n\n本篇博客所有排序实现均默认从小到大。\n## 一、冒泡排序 `BubbleSort`\n\n### 介绍\n\n冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序逆序就把他们交换过来。\n\n### 步骤\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n不过针对上述实现过程还有两种优化方案。\n\n- 优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。\n- 优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序，不用再排序了。因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。\n\n### 源代码\n\n```python\ndef bubble_sort(ary):\n    n = len(ary)                   #获得数组的长度\n    for i in range(n):\n        for j in range(1,n-i):\n            if  ary[j-1] > ary[j] :       #如果前者比后者大\n                ary[j-1],ary[j] = ary[j],ary[j-1]       #则交换两者\n    return ary\n\n\n#优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。\n#用一个标记记录这个状态即可。\ndef bubble_sort2(ary):\n    n = len(ary)\n    for i in range(n):\n        flag = 1                    #标记\n        for j in range(1,n-i):\n            if  ary[j-1] > ary[j] :\n                ary[j-1],ary[j] = ary[j],ary[j-1]\n                flag = 0\n        if flag :                   #全排好序了，直接跳出\n            break\n    return ary\n\n#优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序了。\n# 因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。\ndef bubble_sort3(ary):\n    n = len(ary)\n    k = n                           #k为循环的范围，初始值n\n    for i in range(n):\n        flag = 1\n        for j in range(1,k):        #只遍历到最后交换的位置即可\n            if  ary[j-1] > ary[j] :\n                ary[j-1],ary[j] = ary[j],ary[j-1]\n                k = j               #记录最后交换的位置\n                flag = 0\n        if flag :\n            break\n    return ary\n```\n## 二、选择排序 `SelectionSort`\n\n### 介绍\n\n选择排序无疑是最简单直观的排序。它的工作原理如下。\n\n### 步骤\n\n1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 以此类推，直到所有元素均排序完毕。\n\n### 源代码\n\n```python\ndef select_sort(ary):\n    n = len(ary)\n    for i in range(0,n):\n        min = i                             #最小元素下标标记\n        for j in range(i+1,n):\n            if ary[j] < ary[min] :\n                min = j                     #找到最小值的下标\n        ary[min],ary[i] = ary[i],ary[min]   #交换两者\n    return ary\n```\n\n## 三、插入排序 `InsertionSort`\n\n### 介绍\n\n插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n### 步骤\n\n1. 从第一个元素开始，该元素可以认为已经被排序\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n3. 如果被扫描的元素（已排序）大于新元素，将该元素后移一位\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n5. 将新元素插入到该位置后\n6. 重复步骤2~5\n\n### 排序演示\n\n![20190509200851-Insertion-sort-example-300px](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509200851-Insertion-sort-example-300px%20.gif)\n\n### 源代码\n\n```python\ndef insert_sort(ary):\n    n = len(ary)\n    for i in range(1,n):\n        if ary[i] < ary[i-1]:\n            temp = ary[i]\n            index = i           #待插入的下标\n            for j in range(i-1,-1,-1):  #从i-1 循环到 0 (包括0)\n                if ary[j] > temp :\n                    ary[j+1] = ary[j]\n                    index = j   #记录待插入下标\n                else :\n                    break\n            ary[index] = temp\n    return ary\n```\n\n## 四、希尔排序 `ShellSort`\n\n### 介绍：\n\n希尔排序，也称递减增量排序算法，实质是分组插入排序。由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。\n\n### 步骤：\n\n希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。\n\n1. 例如，假设有这样一组数`[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]`，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：\n    ```\n    13 14 94 33 82\n    25 59 94 65 23\n    45 27 73 25 39\n    10\n    ```\n2. 然后我们对每列进行排序：\n    ```\n    10 14 73 25 23\n    13 27 94 33 39\n    25 59 94 65 82\n    45\n    ```\n3. 将上述四行数字，依序接在一起时我们得到：`[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]`。这时10已经移至正确位置了，然后再以3为步长进行排序：\n    ```\n    10 14 73\n    25 23 13\n    27 94 33\n    39 25 59\n    94 65 82\n    45\n    ```\n    排序之后变为：\n    ```\n    10 14 13\n    25 23 33\n    27 25 59\n    39 65 73\n    45 94 82\n    94\n    ```\n4. 最后以1步长进行排序（此时就是简单的插入排序了）。\n\n### 源代码\n\n```python\ndef shell_sort(ary):\n    n = len(ary)\n    gap = round(n/2)       #初始步长 , 用round四舍五入取整\n    while gap > 0 :\n        for i in range(gap,n):        #每一列进行插入排序 , 从gap 到 n-1\n            temp = ary[i]\n            j = i\n            while ( j >= gap and ary[j-gap] > temp ):    #插入排序\n                ary[j] = ary[j-gap]\n                j = j - gap\n            ary[j] = temp\n        gap = round(gap/2)                     #重新设置步长\n    return ary\n```\n## 五、归并排序 `MergeSort`\n\n### 介绍\n\n归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。\n\n先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。\n\n再考虑递归分解，基本思路是将数组分解成left和right，如果这两个数组内部数据是有序的，那么就可以用上面合并数组的方法将这两个数组合并排序。如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，此时认为该小组内部已有序。然后合并排序相邻二个小组即可。\n\n### 排序演示\n\n![20190509201729-Merge-sort-example-300px](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509201729-Merge-sort-example-300px%20.gif)\n\n### 源代码\n\n```python\ndef merge_sort(ary):\n    if len(ary) <= 1 : return ary\n    num = int(len(ary)/2)       #二分分解\n    left = merge_sort(ary[:num])\n    right = merge_sort(ary[num:])\n    return merge(left,right)    #合并数组\n\ndef merge(left,right):\n    '''合并操作，\n    将两个有序数组left[]和right[]合并成一个大的有序数组'''\n    l,r = 0,0           #left与right数组的下标指针\n    result = []\n    while l<len(left) and r<len(right) :\n        if left[l] < right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    result += left[l:]\n    result += right[r:]\n    return result\n```\n## 六、快速排序 `QuickSort`\n\n### 介绍\n\n快速排序通常明显比同为`Ο(n log n)`的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。\n\n### 步骤\n\n1. 从数列中挑出一个元素作为基准数。\n2. 分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。\n3. 再对左右区间递归执行第二步，直至各区间只有一个数。\n\n### 排序演示\n\n![20190509202100-Quicksort-example](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509202100-Quicksort-example%20.gif)\n\n### 源代码\n\n```python\ndef quick_sort(ary):\n    return qsort(ary,0,len(ary)-1)\n\ndef qsort(ary,left,right):\n    #快排函数，ary为待排序数组，left为待排序的左边界，right为右边界\n    if left >= right : return ary\n    key = ary[left]     #取最左边的为基准数\n    lp = left           #左指针\n    rp = right          #右指针\n    while lp < rp :\n        while ary[rp] >= key and lp < rp :\n            rp -= 1\n        while ary[lp] <= key and lp < rp :\n            lp += 1\n        ary[lp],ary[rp] = ary[rp],ary[lp]\n    ary[left],ary[lp] = ary[lp],ary[left]\n    qsort(ary,left,lp-1)\n    qsort(ary,rp+1,right)\n    return ary\n\n```\n\n## 七、堆排序 `HeapSort`\n\n### 介绍：\n\n堆排序在 `top K` 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。\n\n> 二叉堆具有以下性质：\n\n父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。\n每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。\n\n### 步骤\n\n1. 构造最大堆（`Build_Max_Heap`）：若数组下标范围为`0~n`，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从`n/2-1`开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。\n\n2. 堆排序（`HeapSort`）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将`heap[0]`与`heap[n-1]`交换，再对`heap[0...n-2]`做最大堆调整。第二次将`heap[0]`与`heap[n-2]`交换，再对`heap[0...n-3]`做最大堆调整。重复该操作直至`heap[0]`和`heap[1]`交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。\n\n3. 最大堆调整（`Max_Heapify`）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。\n\n### 排序演示\n\n![20190509203202-Heapsort-example](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203202-Heapsort-example%20.gif)\n\n### 源代码\n\n```python\ndef heap_sort(ary) :\n    n = len(ary)\n    first = int(n/2-1)       #最后一个非叶子节点\n    for start in range(first,-1,-1) :     #构造大根堆\n        max_heapify(ary,start,n-1)\n    for end in range(n-1,0,-1):           #堆排，将大根堆转换成有序数组\n        ary[end],ary[0] = ary[0],ary[end]\n        max_heapify(ary,0,end-1)\n    return ary\n\n\n#最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点\n#start为当前需要调整最大堆的位置，end为调整边界\ndef max_heapify(ary,start,end):\n    root = start\n    while True :\n        child = root*2 +1               #调整节点的子节点\n        if child > end : break\n        if child+1 <= end and ary[child] < ary[child+1] :\n            child = child+1             #取较大的子节点\n        if ary[root] < ary[child] :     #较大的子节点成为父节点\n            ary[root],ary[child] = ary[child],ary[root]     #交换\n            root = child\n        else :\n            break\n\n```\n## 总结\n下面为七种经典排序算法指标对比情况：\n![20190509203208-81b78497jw1emncvtdf1qj20u10afn0r](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203208-81b78497jw1emncvtdf1qj20u10afn0r%20.jpg)\n\n","slug":"算法-排序","published":1,"updated":"2021-01-25T02:58:58.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudp004cjjln31cm6scc","content":"<p>经典排序算法在面试中占有很大的比重，也是基础，为了未雨绸缪，整理并用Python实现了七大经典排序算法，包括冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。之所以用Python实现，主要是因为它更接近伪代码，能用更少的代码实现算法，更利于理解。</p>\n<p>本篇博客所有排序实现均默认从小到大。</p>\n<h2 id=\"一、冒泡排序-BubbleSort\"><a href=\"#一、冒泡排序-BubbleSort\" class=\"headerlink\" title=\"一、冒泡排序 BubbleSort\"></a>一、冒泡排序 <code>BubbleSort</code></h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序逆序就把他们交换过来。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>不过针对上述实现过程还有两种优化方案。</p>\n<ul>\n<li>优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。</li>\n<li>优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序，不用再排序了。因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)                   <span class=\"hljs-comment\">#获得数组的长度</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n-i):<br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :       <span class=\"hljs-comment\">#如果前者比后者大</span><br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]       <span class=\"hljs-comment\">#则交换两者</span><br>    <span class=\"hljs-keyword\">return</span> ary<br><br><br><span class=\"hljs-comment\">#优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。</span><br><span class=\"hljs-comment\">#用一个标记记录这个状态即可。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort2</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        flag = <span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#标记</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n-i):<br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :<br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]<br>                flag = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">if</span> flag :                   <span class=\"hljs-comment\">#全排好序了，直接跳出</span><br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">return</span> ary<br><br><span class=\"hljs-comment\">#优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序了。</span><br><span class=\"hljs-comment\"># 因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort3</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    k = n                           <span class=\"hljs-comment\">#k为循环的范围，初始值n</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        flag = <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,k):        <span class=\"hljs-comment\">#只遍历到最后交换的位置即可</span><br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :<br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]<br>                k = j               <span class=\"hljs-comment\">#记录最后交换的位置</span><br>                flag = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">if</span> flag :<br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"二、选择排序-SelectionSort\"><a href=\"#二、选择排序-SelectionSort\" class=\"headerlink\" title=\"二、选择排序 SelectionSort\"></a>二、选择排序 <code>SelectionSort</code></h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>选择排序无疑是最简单直观的排序。它的工作原理如下。</p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>以此类推，直到所有元素均排序完毕。</li>\n</ol>\n<h3 id=\"源代码-1\"><a href=\"#源代码-1\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">select_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>,n):<br>        <span class=\"hljs-built_in\">min</span> = i                             <span class=\"hljs-comment\">#最小元素下标标记</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i+<span class=\"hljs-number\">1</span>,n):<br>            <span class=\"hljs-keyword\">if</span> ary[j] &lt; ary[<span class=\"hljs-built_in\">min</span>] :<br>                <span class=\"hljs-built_in\">min</span> = j                     <span class=\"hljs-comment\">#找到最小值的下标</span><br>        ary[<span class=\"hljs-built_in\">min</span>],ary[i] = ary[i],ary[<span class=\"hljs-built_in\">min</span>]   <span class=\"hljs-comment\">#交换两者</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"三、插入排序-InsertionSort\"><a href=\"#三、插入排序-InsertionSort\" class=\"headerlink\" title=\"三、插入排序 InsertionSort\"></a>三、插入排序 <code>InsertionSort</code></h2><h3 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果被扫描的元素（已排序）大于新元素，将该元素后移一位</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n<h3 id=\"排序演示\"><a href=\"#排序演示\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509200851-Insertion-sort-example-300px%20.gif\" alt=\"20190509200851-Insertion-sort-example-300px\"></p>\n<h3 id=\"源代码-2\"><a href=\"#源代码-2\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n):<br>        <span class=\"hljs-keyword\">if</span> ary[i] &lt; ary[i-<span class=\"hljs-number\">1</span>]:<br>            temp = ary[i]<br>            index = i           <span class=\"hljs-comment\">#待插入的下标</span><br>            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>):  <span class=\"hljs-comment\">#从i-1 循环到 0 (包括0)</span><br>                <span class=\"hljs-keyword\">if</span> ary[j] &gt; temp :<br>                    ary[j+<span class=\"hljs-number\">1</span>] = ary[j]<br>                    index = j   <span class=\"hljs-comment\">#记录待插入下标</span><br>                <span class=\"hljs-keyword\">else</span> :<br>                    <span class=\"hljs-keyword\">break</span><br>            ary[index] = temp<br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"四、希尔排序-ShellSort\"><a href=\"#四、希尔排序-ShellSort\" class=\"headerlink\" title=\"四、希尔排序 ShellSort\"></a>四、希尔排序 <code>ShellSort</code></h2><h3 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><p>希尔排序，也称递减增量排序算法，实质是分组插入排序。由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。</p>\n<ol>\n<li>例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样： <figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">13 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">59</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">65</span> <span class=\"hljs-number\">23</span><br><span class=\"hljs-symbol\">45 </span><span class=\"hljs-number\">27</span> <span class=\"hljs-number\">73</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">39</span><br><span class=\"hljs-number\">10</span><br></code></pre></div></td></tr></table></figure></li>\n<li>然后我们对每列进行排序： <figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">73</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">23</span><br><span class=\"hljs-symbol\">13 </span><span class=\"hljs-number\">27</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">39</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">59</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">65</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">45</span><br></code></pre></div></td></tr></table></figure></li>\n<li>将上述四行数字，依序接在一起时我们得到：<code>[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]</code>。这时10已经移至正确位置了，然后再以3为步长进行排序： <figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">73</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">23</span> <span class=\"hljs-number\">13</span><br><span class=\"hljs-symbol\">27 </span><span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span><br><span class=\"hljs-symbol\">39 </span><span class=\"hljs-number\">25</span> <span class=\"hljs-number\">59</span><br><span class=\"hljs-symbol\">94 </span><span class=\"hljs-number\">65</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">45</span><br></code></pre></div></td></tr></table></figure>\n 排序之后变为： <figure class=\"highlight basic\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">13</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">23</span> <span class=\"hljs-number\">33</span><br><span class=\"hljs-symbol\">27 </span><span class=\"hljs-number\">25</span> <span class=\"hljs-number\">59</span><br><span class=\"hljs-symbol\">39 </span><span class=\"hljs-number\">65</span> <span class=\"hljs-number\">73</span><br><span class=\"hljs-symbol\">45 </span><span class=\"hljs-number\">94</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">94</span><br></code></pre></div></td></tr></table></figure></li>\n<li>最后以1步长进行排序（此时就是简单的插入排序了）。</li>\n</ol>\n<h3 id=\"源代码-3\"><a href=\"#源代码-3\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">shell_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    gap = <span class=\"hljs-built_in\">round</span>(n/<span class=\"hljs-number\">2</span>)       <span class=\"hljs-comment\">#初始步长 , 用round四舍五入取整</span><br>    <span class=\"hljs-keyword\">while</span> gap &gt; <span class=\"hljs-number\">0</span> :<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(gap,n):        <span class=\"hljs-comment\">#每一列进行插入排序 , 从gap 到 n-1</span><br>            temp = ary[i]<br>            j = i<br>            <span class=\"hljs-keyword\">while</span> ( j &gt;= gap <span class=\"hljs-keyword\">and</span> ary[j-gap] &gt; temp ):    <span class=\"hljs-comment\">#插入排序</span><br>                ary[j] = ary[j-gap]<br>                j = j - gap<br>            ary[j] = temp<br>        gap = <span class=\"hljs-built_in\">round</span>(gap/<span class=\"hljs-number\">2</span>)                     <span class=\"hljs-comment\">#重新设置步长</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"五、归并排序-MergeSort\"><a href=\"#五、归并排序-MergeSort\" class=\"headerlink\" title=\"五、归并排序 MergeSort\"></a>五、归并排序 <code>MergeSort</code></h2><h3 id=\"介绍-3\"><a href=\"#介绍-3\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p>\n<p>先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p>\n<p>再考虑递归分解，基本思路是将数组分解成left和right，如果这两个数组内部数据是有序的，那么就可以用上面合并数组的方法将这两个数组合并排序。如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，此时认为该小组内部已有序。然后合并排序相邻二个小组即可。</p>\n<h3 id=\"排序演示-1\"><a href=\"#排序演示-1\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509201729-Merge-sort-example-300px%20.gif\" alt=\"20190509201729-Merge-sort-example-300px\"></p>\n<h3 id=\"源代码-4\"><a href=\"#源代码-4\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ary) &lt;= <span class=\"hljs-number\">1</span> : <span class=\"hljs-keyword\">return</span> ary<br>    num = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">len</span>(ary)/<span class=\"hljs-number\">2</span>)       <span class=\"hljs-comment\">#二分分解</span><br>    left = merge_sort(ary[:num])<br>    right = merge_sort(ary[num:])<br>    <span class=\"hljs-keyword\">return</span> merge(left,right)    <span class=\"hljs-comment\">#合并数组</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">left,right</span>):</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;合并操作，</span><br><span class=\"hljs-string\">    将两个有序数组left[]和right[]合并成一个大的有序数组&#x27;&#x27;&#x27;</span><br>    l,r = <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>           <span class=\"hljs-comment\">#left与right数组的下标指针</span><br>    result = []<br>    <span class=\"hljs-keyword\">while</span> l&lt;<span class=\"hljs-built_in\">len</span>(left) <span class=\"hljs-keyword\">and</span> r&lt;<span class=\"hljs-built_in\">len</span>(right) :<br>        <span class=\"hljs-keyword\">if</span> left[l] &lt; right[r]:<br>            result.append(left[l])<br>            l += <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            result.append(right[r])<br>            r += <span class=\"hljs-number\">1</span><br>    result += left[l:]<br>    result += right[r:]<br>    <span class=\"hljs-keyword\">return</span> result<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"六、快速排序-QuickSort\"><a href=\"#六、快速排序-QuickSort\" class=\"headerlink\" title=\"六、快速排序 QuickSort\"></a>六、快速排序 <code>QuickSort</code></h2><h3 id=\"介绍-4\"><a href=\"#介绍-4\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>快速排序通常明显比同为<code>Ο(n log n)</code>的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。</p>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>从数列中挑出一个元素作为基准数。</li>\n<li>分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。</li>\n<li>再对左右区间递归执行第二步，直至各区间只有一个数。</li>\n</ol>\n<h3 id=\"排序演示-2\"><a href=\"#排序演示-2\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509202100-Quicksort-example%20.gif\" alt=\"20190509202100-Quicksort-example\"></p>\n<h3 id=\"源代码-5\"><a href=\"#源代码-5\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quick_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    <span class=\"hljs-keyword\">return</span> qsort(ary,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">len</span>(ary)-<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">qsort</span>(<span class=\"hljs-params\">ary,left,right</span>):</span><br>    <span class=\"hljs-comment\">#快排函数，ary为待排序数组，left为待排序的左边界，right为右边界</span><br>    <span class=\"hljs-keyword\">if</span> left &gt;= right : <span class=\"hljs-keyword\">return</span> ary<br>    key = ary[left]     <span class=\"hljs-comment\">#取最左边的为基准数</span><br>    lp = left           <span class=\"hljs-comment\">#左指针</span><br>    rp = right          <span class=\"hljs-comment\">#右指针</span><br>    <span class=\"hljs-keyword\">while</span> lp &lt; rp :<br>        <span class=\"hljs-keyword\">while</span> ary[rp] &gt;= key <span class=\"hljs-keyword\">and</span> lp &lt; rp :<br>            rp -= <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">while</span> ary[lp] &lt;= key <span class=\"hljs-keyword\">and</span> lp &lt; rp :<br>            lp += <span class=\"hljs-number\">1</span><br>        ary[lp],ary[rp] = ary[rp],ary[lp]<br>    ary[left],ary[lp] = ary[lp],ary[left]<br>    qsort(ary,left,lp-<span class=\"hljs-number\">1</span>)<br>    qsort(ary,rp+<span class=\"hljs-number\">1</span>,right)<br>    <span class=\"hljs-keyword\">return</span> ary<br><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"七、堆排序-HeapSort\"><a href=\"#七、堆排序-HeapSort\" class=\"headerlink\" title=\"七、堆排序 HeapSort\"></a>七、堆排序 <code>HeapSort</code></h2><h3 id=\"介绍：-1\"><a href=\"#介绍：-1\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><p>堆排序在 <code>top K</code> 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。</p>\n<blockquote>\n<p>二叉堆具有以下性质：</p>\n</blockquote>\n<p>父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。<br>每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。</p>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>构造最大堆（<code>Build_Max_Heap</code>）：若数组下标范围为<code>0~n</code>，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从<code>n/2-1</code>开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。</p>\n</li>\n<li><p>堆排序（<code>HeapSort</code>）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将<code>heap[0]</code>与<code>heap[n-1]</code>交换，再对<code>heap[0...n-2]</code>做最大堆调整。第二次将<code>heap[0]</code>与<code>heap[n-2]</code>交换，再对<code>heap[0...n-3]</code>做最大堆调整。重复该操作直至<code>heap[0]</code>和<code>heap[1]</code>交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。</p>\n</li>\n<li><p>最大堆调整（<code>Max_Heapify</code>）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。</p>\n</li>\n</ol>\n<h3 id=\"排序演示-3\"><a href=\"#排序演示-3\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203202-Heapsort-example%20.gif\" alt=\"20190509203202-Heapsort-example\"></p>\n<h3 id=\"源代码-6\"><a href=\"#源代码-6\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">heap_sort</span>(<span class=\"hljs-params\">ary</span>) :</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    first = <span class=\"hljs-built_in\">int</span>(n/<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">1</span>)       <span class=\"hljs-comment\">#最后一个非叶子节点</span><br>    <span class=\"hljs-keyword\">for</span> start <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(first,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>) :     <span class=\"hljs-comment\">#构造大根堆</span><br>        max_heapify(ary,start,n-<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> end <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">1</span>):           <span class=\"hljs-comment\">#堆排，将大根堆转换成有序数组</span><br>        ary[end],ary[<span class=\"hljs-number\">0</span>] = ary[<span class=\"hljs-number\">0</span>],ary[end]<br>        max_heapify(ary,<span class=\"hljs-number\">0</span>,end-<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> ary<br><br><br><span class=\"hljs-comment\">#最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点</span><br><span class=\"hljs-comment\">#start为当前需要调整最大堆的位置，end为调整边界</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">max_heapify</span>(<span class=\"hljs-params\">ary,start,end</span>):</span><br>    root = start<br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> :<br>        child = root*<span class=\"hljs-number\">2</span> +<span class=\"hljs-number\">1</span>               <span class=\"hljs-comment\">#调整节点的子节点</span><br>        <span class=\"hljs-keyword\">if</span> child &gt; end : <span class=\"hljs-keyword\">break</span><br>        <span class=\"hljs-keyword\">if</span> child+<span class=\"hljs-number\">1</span> &lt;= end <span class=\"hljs-keyword\">and</span> ary[child] &lt; ary[child+<span class=\"hljs-number\">1</span>] :<br>            child = child+<span class=\"hljs-number\">1</span>             <span class=\"hljs-comment\">#取较大的子节点</span><br>        <span class=\"hljs-keyword\">if</span> ary[root] &lt; ary[child] :     <span class=\"hljs-comment\">#较大的子节点成为父节点</span><br>            ary[root],ary[child] = ary[child],ary[root]     <span class=\"hljs-comment\">#交换</span><br>            root = child<br>        <span class=\"hljs-keyword\">else</span> :<br>            <span class=\"hljs-keyword\">break</span><br><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>下面为七种经典排序算法指标对比情况：<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203208-81b78497jw1emncvtdf1qj20u10afn0r%20.jpg\" alt=\"20190509203208-81b78497jw1emncvtdf1qj20u10afn0r\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>经典排序算法在面试中占有很大的比重，也是基础，为了未雨绸缪，整理并用Python实现了七大经典排序算法，包括冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。之所以用Python实现，主要是因为它更接近伪代码，能用更少的代码实现算法，更利于理解。</p>\n<p>本篇博客所有排序实现均默认从小到大。</p>\n<h2 id=\"一、冒泡排序-BubbleSort\"><a href=\"#一、冒泡排序-BubbleSort\" class=\"headerlink\" title=\"一、冒泡排序 BubbleSort\"></a>一、冒泡排序 <code>BubbleSort</code></h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序逆序就把他们交换过来。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>不过针对上述实现过程还有两种优化方案。</p>\n<ul>\n<li>优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。</li>\n<li>优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序，不用再排序了。因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)                   <span class=\"hljs-comment\">#获得数组的长度</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n-i):<br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :       <span class=\"hljs-comment\">#如果前者比后者大</span><br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]       <span class=\"hljs-comment\">#则交换两者</span><br>    <span class=\"hljs-keyword\">return</span> ary<br><br><br><span class=\"hljs-comment\">#优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。</span><br><span class=\"hljs-comment\">#用一个标记记录这个状态即可。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort2</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        flag = <span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#标记</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n-i):<br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :<br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]<br>                flag = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">if</span> flag :                   <span class=\"hljs-comment\">#全排好序了，直接跳出</span><br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">return</span> ary<br><br><span class=\"hljs-comment\">#优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序了。</span><br><span class=\"hljs-comment\"># 因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bubble_sort3</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    k = n                           <span class=\"hljs-comment\">#k为循环的范围，初始值n</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):<br>        flag = <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,k):        <span class=\"hljs-comment\">#只遍历到最后交换的位置即可</span><br>            <span class=\"hljs-keyword\">if</span>  ary[j-<span class=\"hljs-number\">1</span>] &gt; ary[j] :<br>                ary[j-<span class=\"hljs-number\">1</span>],ary[j] = ary[j],ary[j-<span class=\"hljs-number\">1</span>]<br>                k = j               <span class=\"hljs-comment\">#记录最后交换的位置</span><br>                flag = <span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">if</span> flag :<br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、选择排序-SelectionSort\"><a href=\"#二、选择排序-SelectionSort\" class=\"headerlink\" title=\"二、选择排序 SelectionSort\"></a>二、选择排序 <code>SelectionSort</code></h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>选择排序无疑是最简单直观的排序。它的工作原理如下。</p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>以此类推，直到所有元素均排序完毕。</li>\n</ol>\n<h3 id=\"源代码-1\"><a href=\"#源代码-1\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">select_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>,n):<br>        <span class=\"hljs-built_in\">min</span> = i                             <span class=\"hljs-comment\">#最小元素下标标记</span><br>        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i+<span class=\"hljs-number\">1</span>,n):<br>            <span class=\"hljs-keyword\">if</span> ary[j] &lt; ary[<span class=\"hljs-built_in\">min</span>] :<br>                <span class=\"hljs-built_in\">min</span> = j                     <span class=\"hljs-comment\">#找到最小值的下标</span><br>        ary[<span class=\"hljs-built_in\">min</span>],ary[i] = ary[i],ary[<span class=\"hljs-built_in\">min</span>]   <span class=\"hljs-comment\">#交换两者</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、插入排序-InsertionSort\"><a href=\"#三、插入排序-InsertionSort\" class=\"headerlink\" title=\"三、插入排序 InsertionSort\"></a>三、插入排序 <code>InsertionSort</code></h2><h3 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果被扫描的元素（已排序）大于新元素，将该元素后移一位</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n<h3 id=\"排序演示\"><a href=\"#排序演示\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509200851-Insertion-sort-example-300px%20.gif\" alt=\"20190509200851-Insertion-sort-example-300px\"></p>\n<h3 id=\"源代码-2\"><a href=\"#源代码-2\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,n):<br>        <span class=\"hljs-keyword\">if</span> ary[i] &lt; ary[i-<span class=\"hljs-number\">1</span>]:<br>            temp = ary[i]<br>            index = i           <span class=\"hljs-comment\">#待插入的下标</span><br>            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>):  <span class=\"hljs-comment\">#从i-1 循环到 0 (包括0)</span><br>                <span class=\"hljs-keyword\">if</span> ary[j] &gt; temp :<br>                    ary[j+<span class=\"hljs-number\">1</span>] = ary[j]<br>                    index = j   <span class=\"hljs-comment\">#记录待插入下标</span><br>                <span class=\"hljs-keyword\">else</span> :<br>                    <span class=\"hljs-keyword\">break</span><br>            ary[index] = temp<br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></td></tr></table></figure>\n<h2 id=\"四、希尔排序-ShellSort\"><a href=\"#四、希尔排序-ShellSort\" class=\"headerlink\" title=\"四、希尔排序 ShellSort\"></a>四、希尔排序 <code>ShellSort</code></h2><h3 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><p>希尔排序，也称递减增量排序算法，实质是分组插入排序。由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。</p>\n<ol>\n<li>例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样： <figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">13 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">59</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">65</span> <span class=\"hljs-number\">23</span><br><span class=\"hljs-symbol\">45 </span><span class=\"hljs-number\">27</span> <span class=\"hljs-number\">73</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">39</span><br><span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure></li>\n<li>然后我们对每列进行排序： <figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">73</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">23</span><br><span class=\"hljs-symbol\">13 </span><span class=\"hljs-number\">27</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span> <span class=\"hljs-number\">39</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">59</span> <span class=\"hljs-number\">94</span> <span class=\"hljs-number\">65</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">45</span><br></code></pre></td></tr></table></figure></li>\n<li>将上述四行数字，依序接在一起时我们得到：<code>[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]</code>。这时10已经移至正确位置了，然后再以3为步长进行排序： <figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">73</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">23</span> <span class=\"hljs-number\">13</span><br><span class=\"hljs-symbol\">27 </span><span class=\"hljs-number\">94</span> <span class=\"hljs-number\">33</span><br><span class=\"hljs-symbol\">39 </span><span class=\"hljs-number\">25</span> <span class=\"hljs-number\">59</span><br><span class=\"hljs-symbol\">94 </span><span class=\"hljs-number\">65</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">45</span><br></code></pre></td></tr></table></figure>\n 排序之后变为： <figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">10 </span><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">13</span><br><span class=\"hljs-symbol\">25 </span><span class=\"hljs-number\">23</span> <span class=\"hljs-number\">33</span><br><span class=\"hljs-symbol\">27 </span><span class=\"hljs-number\">25</span> <span class=\"hljs-number\">59</span><br><span class=\"hljs-symbol\">39 </span><span class=\"hljs-number\">65</span> <span class=\"hljs-number\">73</span><br><span class=\"hljs-symbol\">45 </span><span class=\"hljs-number\">94</span> <span class=\"hljs-number\">82</span><br><span class=\"hljs-number\">94</span><br></code></pre></td></tr></table></figure></li>\n<li>最后以1步长进行排序（此时就是简单的插入排序了）。</li>\n</ol>\n<h3 id=\"源代码-3\"><a href=\"#源代码-3\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">shell_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    gap = <span class=\"hljs-built_in\">round</span>(n/<span class=\"hljs-number\">2</span>)       <span class=\"hljs-comment\">#初始步长 , 用round四舍五入取整</span><br>    <span class=\"hljs-keyword\">while</span> gap &gt; <span class=\"hljs-number\">0</span> :<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(gap,n):        <span class=\"hljs-comment\">#每一列进行插入排序 , 从gap 到 n-1</span><br>            temp = ary[i]<br>            j = i<br>            <span class=\"hljs-keyword\">while</span> ( j &gt;= gap <span class=\"hljs-keyword\">and</span> ary[j-gap] &gt; temp ):    <span class=\"hljs-comment\">#插入排序</span><br>                ary[j] = ary[j-gap]<br>                j = j - gap<br>            ary[j] = temp<br>        gap = <span class=\"hljs-built_in\">round</span>(gap/<span class=\"hljs-number\">2</span>)                     <span class=\"hljs-comment\">#重新设置步长</span><br>    <span class=\"hljs-keyword\">return</span> ary<br></code></pre></td></tr></table></figure>\n<h2 id=\"五、归并排序-MergeSort\"><a href=\"#五、归并排序-MergeSort\" class=\"headerlink\" title=\"五、归并排序 MergeSort\"></a>五、归并排序 <code>MergeSort</code></h2><h3 id=\"介绍-3\"><a href=\"#介绍-3\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p>\n<p>先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p>\n<p>再考虑递归分解，基本思路是将数组分解成left和right，如果这两个数组内部数据是有序的，那么就可以用上面合并数组的方法将这两个数组合并排序。如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，此时认为该小组内部已有序。然后合并排序相邻二个小组即可。</p>\n<h3 id=\"排序演示-1\"><a href=\"#排序演示-1\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509201729-Merge-sort-example-300px%20.gif\" alt=\"20190509201729-Merge-sort-example-300px\"></p>\n<h3 id=\"源代码-4\"><a href=\"#源代码-4\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ary) &lt;= <span class=\"hljs-number\">1</span> : <span class=\"hljs-keyword\">return</span> ary<br>    num = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">len</span>(ary)/<span class=\"hljs-number\">2</span>)       <span class=\"hljs-comment\">#二分分解</span><br>    left = merge_sort(ary[:num])<br>    right = merge_sort(ary[num:])<br>    <span class=\"hljs-keyword\">return</span> merge(left,right)    <span class=\"hljs-comment\">#合并数组</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">left,right</span>):</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;合并操作，</span><br><span class=\"hljs-string\">    将两个有序数组left[]和right[]合并成一个大的有序数组&#x27;&#x27;&#x27;</span><br>    l,r = <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>           <span class=\"hljs-comment\">#left与right数组的下标指针</span><br>    result = []<br>    <span class=\"hljs-keyword\">while</span> l&lt;<span class=\"hljs-built_in\">len</span>(left) <span class=\"hljs-keyword\">and</span> r&lt;<span class=\"hljs-built_in\">len</span>(right) :<br>        <span class=\"hljs-keyword\">if</span> left[l] &lt; right[r]:<br>            result.append(left[l])<br>            l += <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            result.append(right[r])<br>            r += <span class=\"hljs-number\">1</span><br>    result += left[l:]<br>    result += right[r:]<br>    <span class=\"hljs-keyword\">return</span> result<br></code></pre></td></tr></table></figure>\n<h2 id=\"六、快速排序-QuickSort\"><a href=\"#六、快速排序-QuickSort\" class=\"headerlink\" title=\"六、快速排序 QuickSort\"></a>六、快速排序 <code>QuickSort</code></h2><h3 id=\"介绍-4\"><a href=\"#介绍-4\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>快速排序通常明显比同为<code>Ο(n log n)</code>的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。</p>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li>从数列中挑出一个元素作为基准数。</li>\n<li>分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。</li>\n<li>再对左右区间递归执行第二步，直至各区间只有一个数。</li>\n</ol>\n<h3 id=\"排序演示-2\"><a href=\"#排序演示-2\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509202100-Quicksort-example%20.gif\" alt=\"20190509202100-Quicksort-example\"></p>\n<h3 id=\"源代码-5\"><a href=\"#源代码-5\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">quick_sort</span>(<span class=\"hljs-params\">ary</span>):</span><br>    <span class=\"hljs-keyword\">return</span> qsort(ary,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">len</span>(ary)-<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">qsort</span>(<span class=\"hljs-params\">ary,left,right</span>):</span><br>    <span class=\"hljs-comment\">#快排函数，ary为待排序数组，left为待排序的左边界，right为右边界</span><br>    <span class=\"hljs-keyword\">if</span> left &gt;= right : <span class=\"hljs-keyword\">return</span> ary<br>    key = ary[left]     <span class=\"hljs-comment\">#取最左边的为基准数</span><br>    lp = left           <span class=\"hljs-comment\">#左指针</span><br>    rp = right          <span class=\"hljs-comment\">#右指针</span><br>    <span class=\"hljs-keyword\">while</span> lp &lt; rp :<br>        <span class=\"hljs-keyword\">while</span> ary[rp] &gt;= key <span class=\"hljs-keyword\">and</span> lp &lt; rp :<br>            rp -= <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">while</span> ary[lp] &lt;= key <span class=\"hljs-keyword\">and</span> lp &lt; rp :<br>            lp += <span class=\"hljs-number\">1</span><br>        ary[lp],ary[rp] = ary[rp],ary[lp]<br>    ary[left],ary[lp] = ary[lp],ary[left]<br>    qsort(ary,left,lp-<span class=\"hljs-number\">1</span>)<br>    qsort(ary,rp+<span class=\"hljs-number\">1</span>,right)<br>    <span class=\"hljs-keyword\">return</span> ary<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"七、堆排序-HeapSort\"><a href=\"#七、堆排序-HeapSort\" class=\"headerlink\" title=\"七、堆排序 HeapSort\"></a>七、堆排序 <code>HeapSort</code></h2><h3 id=\"介绍：-1\"><a href=\"#介绍：-1\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><p>堆排序在 <code>top K</code> 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。</p>\n<blockquote>\n<p>二叉堆具有以下性质：</p>\n</blockquote>\n<p>父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。<br>每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。</p>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ol>\n<li><p>构造最大堆（<code>Build_Max_Heap</code>）：若数组下标范围为<code>0~n</code>，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从<code>n/2-1</code>开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。</p>\n</li>\n<li><p>堆排序（<code>HeapSort</code>）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将<code>heap[0]</code>与<code>heap[n-1]</code>交换，再对<code>heap[0...n-2]</code>做最大堆调整。第二次将<code>heap[0]</code>与<code>heap[n-2]</code>交换，再对<code>heap[0...n-3]</code>做最大堆调整。重复该操作直至<code>heap[0]</code>和<code>heap[1]</code>交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。</p>\n</li>\n<li><p>最大堆调整（<code>Max_Heapify</code>）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。</p>\n</li>\n</ol>\n<h3 id=\"排序演示-3\"><a href=\"#排序演示-3\" class=\"headerlink\" title=\"排序演示\"></a>排序演示</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203202-Heapsort-example%20.gif\" alt=\"20190509203202-Heapsort-example\"></p>\n<h3 id=\"源代码-6\"><a href=\"#源代码-6\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">heap_sort</span>(<span class=\"hljs-params\">ary</span>) :</span><br>    n = <span class=\"hljs-built_in\">len</span>(ary)<br>    first = <span class=\"hljs-built_in\">int</span>(n/<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">1</span>)       <span class=\"hljs-comment\">#最后一个非叶子节点</span><br>    <span class=\"hljs-keyword\">for</span> start <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(first,-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>) :     <span class=\"hljs-comment\">#构造大根堆</span><br>        max_heapify(ary,start,n-<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">for</span> end <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">1</span>):           <span class=\"hljs-comment\">#堆排，将大根堆转换成有序数组</span><br>        ary[end],ary[<span class=\"hljs-number\">0</span>] = ary[<span class=\"hljs-number\">0</span>],ary[end]<br>        max_heapify(ary,<span class=\"hljs-number\">0</span>,end-<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> ary<br><br><br><span class=\"hljs-comment\">#最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点</span><br><span class=\"hljs-comment\">#start为当前需要调整最大堆的位置，end为调整边界</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">max_heapify</span>(<span class=\"hljs-params\">ary,start,end</span>):</span><br>    root = start<br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> :<br>        child = root*<span class=\"hljs-number\">2</span> +<span class=\"hljs-number\">1</span>               <span class=\"hljs-comment\">#调整节点的子节点</span><br>        <span class=\"hljs-keyword\">if</span> child &gt; end : <span class=\"hljs-keyword\">break</span><br>        <span class=\"hljs-keyword\">if</span> child+<span class=\"hljs-number\">1</span> &lt;= end <span class=\"hljs-keyword\">and</span> ary[child] &lt; ary[child+<span class=\"hljs-number\">1</span>] :<br>            child = child+<span class=\"hljs-number\">1</span>             <span class=\"hljs-comment\">#取较大的子节点</span><br>        <span class=\"hljs-keyword\">if</span> ary[root] &lt; ary[child] :     <span class=\"hljs-comment\">#较大的子节点成为父节点</span><br>            ary[root],ary[child] = ary[child],ary[root]     <span class=\"hljs-comment\">#交换</span><br>            root = child<br>        <span class=\"hljs-keyword\">else</span> :<br>            <span class=\"hljs-keyword\">break</span><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>下面为七种经典排序算法指标对比情况：<br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203208-81b78497jw1emncvtdf1qj20u10afn0r%20.jpg\" alt=\"20190509203208-81b78497jw1emncvtdf1qj20u10afn0r\"></p>\n"},{"title":"O标记法与常见时间复杂度","mathjax":true,"date":"2019-05-25T11:54:09.000Z","_content":"> 算法 : 内功心法, 是解决问题的一种思想\n\n### 1、时间复杂度 $T(n)$\n\n由于每台机器的性能有所差别，所有其执行相同代码的时间也长短不一，故而推出一种计量方式，统计代码执行基本运算（`函数调用需要看其源码的基本运算`）的数量（`n`) 来确定一个算法的优劣，其中基本运算的**循环按乘法计算，顺序结构按加法计算，分支结构取最大值**。\n\n```python\nfor a in range(0, 1000): \n    for b in range(0, 1000):\n        for c in range(0, 1000):\n            if a+b+c == 1000 and a**2 + b**2 + c**2:\n                print('a,b,c,: {}, {}, {}'.format(a,b,c))\n```\n\n上述代码的时间复杂度为\n$T = 1000 * 1000 * 1000 * 2$\n那么如果将上述代码中的 1000 改为 2000， 则\n$T = 2000 * 2000 * 2000 * 2$\n由于上述同样的代码由于不同的参数的 T 都不同，我们便将其统一成 **N**，这样上述代码的时间复杂度可以表示成：\n$T = N * N * N * 2$\n同样的我们抓住其主要 “**矛盾**” ，观其大，再将其简化成\n$T= N^3$\n这样同一段代码的时间复杂度便不会根据其参数而发生改变了。\n\n### 2、大 $O$ 标记法 $O()$\n\n其实和求极限的原理相似，抓住问题的主要矛盾，忽略那些细枝末节，也就像前面的 $T$的最后的样子。\n\n### 3、时间复杂度的几条基本规则\n\n1. 基本步骤: 即只有常数项, 算作 $O(1)$\n\n2. 基本结构顺序, 条件, 循环\n\n   - 顺序结构: 按加法运算\n\n   - 循环结构: 乘法\n   - 分支结构: 取最大值\n\n3. 判断一个算法效率, 往往只需要关注操作数量的最高次项, 其他次要的忽略\n4. 没特殊说明, 分析的时间复杂度都是**最坏时间复杂度**\n\n### 4、常见的时间复杂度\n\n| $T$              | $O$          | 名称         |\n| ---------------- | ------------ | ------------ |\n| $12$             | $O(1)$       | 常数阶       |\n| $2n+3$           | $O(n)$       | 线性阶       |\n| $3n^2+2n+1$      | $O(n^2)$     | 平方阶       |\n| $5log2n+20$      | $O(log(n))$  | 对数阶       |\n| $2n+3nlog2n+19$  | $O(nlog(n))$ | $nlog(n)$ 阶 |\n| $6n^3+2n^2+3n+4$ | $O(n^3)$     | 立方阶       |\n| $2^n$            | $O(2^n)$     | 指数阶       |\n\n![20190526105531-时间复杂度曲线图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105531-时间复杂度曲线图%20.png)\n\n$$\nO(1) < O(log(n)) < O(n) < O(nlog(n)) < O(n^2)< O(n ^ 2log(n)) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n$$\n\n","source":"_posts/算法-时间复杂度-01_O 标记法与常见时间复杂度.md","raw":"---\ntitle: O标记法与常见时间复杂度\ncategories:\n  - 技术\n  - 算法\n  - 时间复杂度\ntags:\n  - 时间复杂度\nmathjax: true\ndate: 2019-05-25 19:54:09\n---\n> 算法 : 内功心法, 是解决问题的一种思想\n\n### 1、时间复杂度 $T(n)$\n\n由于每台机器的性能有所差别，所有其执行相同代码的时间也长短不一，故而推出一种计量方式，统计代码执行基本运算（`函数调用需要看其源码的基本运算`）的数量（`n`) 来确定一个算法的优劣，其中基本运算的**循环按乘法计算，顺序结构按加法计算，分支结构取最大值**。\n\n```python\nfor a in range(0, 1000): \n    for b in range(0, 1000):\n        for c in range(0, 1000):\n            if a+b+c == 1000 and a**2 + b**2 + c**2:\n                print('a,b,c,: {}, {}, {}'.format(a,b,c))\n```\n\n上述代码的时间复杂度为\n$T = 1000 * 1000 * 1000 * 2$\n那么如果将上述代码中的 1000 改为 2000， 则\n$T = 2000 * 2000 * 2000 * 2$\n由于上述同样的代码由于不同的参数的 T 都不同，我们便将其统一成 **N**，这样上述代码的时间复杂度可以表示成：\n$T = N * N * N * 2$\n同样的我们抓住其主要 “**矛盾**” ，观其大，再将其简化成\n$T= N^3$\n这样同一段代码的时间复杂度便不会根据其参数而发生改变了。\n\n### 2、大 $O$ 标记法 $O()$\n\n其实和求极限的原理相似，抓住问题的主要矛盾，忽略那些细枝末节，也就像前面的 $T$的最后的样子。\n\n### 3、时间复杂度的几条基本规则\n\n1. 基本步骤: 即只有常数项, 算作 $O(1)$\n\n2. 基本结构顺序, 条件, 循环\n\n   - 顺序结构: 按加法运算\n\n   - 循环结构: 乘法\n   - 分支结构: 取最大值\n\n3. 判断一个算法效率, 往往只需要关注操作数量的最高次项, 其他次要的忽略\n4. 没特殊说明, 分析的时间复杂度都是**最坏时间复杂度**\n\n### 4、常见的时间复杂度\n\n| $T$              | $O$          | 名称         |\n| ---------------- | ------------ | ------------ |\n| $12$             | $O(1)$       | 常数阶       |\n| $2n+3$           | $O(n)$       | 线性阶       |\n| $3n^2+2n+1$      | $O(n^2)$     | 平方阶       |\n| $5log2n+20$      | $O(log(n))$  | 对数阶       |\n| $2n+3nlog2n+19$  | $O(nlog(n))$ | $nlog(n)$ 阶 |\n| $6n^3+2n^2+3n+4$ | $O(n^3)$     | 立方阶       |\n| $2^n$            | $O(2^n)$     | 指数阶       |\n\n![20190526105531-时间复杂度曲线图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105531-时间复杂度曲线图%20.png)\n\n$$\nO(1) < O(log(n)) < O(n) < O(nlog(n)) < O(n^2)< O(n ^ 2log(n)) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n$$\n\n","slug":"算法-时间复杂度-01_O 标记法与常见时间复杂度","published":1,"updated":"2021-01-25T02:59:03.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudq004hjjlna5nyfx2b","content":"<blockquote>\n<p>算法 : 内功心法, 是解决问题的一种思想</p>\n</blockquote>\n<h3 id=\"1、时间复杂度-T-n\"><a href=\"#1、时间复杂度-T-n\" class=\"headerlink\" title=\"1、时间复杂度 $T(n)$\"></a>1、时间复杂度 $T(n)$</h3><p>由于每台机器的性能有所差别，所有其执行相同代码的时间也长短不一，故而推出一种计量方式，统计代码执行基本运算（<code>函数调用需要看其源码的基本运算</code>）的数量（<code>n</code>) 来确定一个算法的优劣，其中基本运算的<strong>循环按乘法计算，顺序结构按加法计算，分支结构取最大值</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>): <br>    <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>):<br>        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>):<br>            <span class=\"hljs-keyword\">if</span> a+b+c == <span class=\"hljs-number\">1000</span> <span class=\"hljs-keyword\">and</span> a**<span class=\"hljs-number\">2</span> + b**<span class=\"hljs-number\">2</span> + c**<span class=\"hljs-number\">2</span>:<br>                print(<span class=\"hljs-string\">&#x27;a,b,c,: &#123;&#125;, &#123;&#125;, &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(a,b,c))<br></code></pre></div></td></tr></table></figure>\n<p>上述代码的时间复杂度为<br>$T = 1000 * 1000 * 1000 * 2$<br>那么如果将上述代码中的 1000 改为 2000， 则<br>$T = 2000 * 2000 * 2000 * 2$<br>由于上述同样的代码由于不同的参数的 T 都不同，我们便将其统一成 <strong>N</strong>，这样上述代码的时间复杂度可以表示成：<br>$T = N * N * N * 2$<br>同样的我们抓住其主要 “<strong>矛盾</strong>” ，观其大，再将其简化成<br>$T= N^3$<br>这样同一段代码的时间复杂度便不会根据其参数而发生改变了。</p>\n<h3 id=\"2、大-O-标记法-O\"><a href=\"#2、大-O-标记法-O\" class=\"headerlink\" title=\"2、大 $O$ 标记法 $O()$\"></a>2、大 $O$ 标记法 $O()$</h3><p>其实和求极限的原理相似，抓住问题的主要矛盾，忽略那些细枝末节，也就像前面的 $T$的最后的样子。</p>\n<h3 id=\"3、时间复杂度的几条基本规则\"><a href=\"#3、时间复杂度的几条基本规则\" class=\"headerlink\" title=\"3、时间复杂度的几条基本规则\"></a>3、时间复杂度的几条基本规则</h3><ol>\n<li><p>基本步骤: 即只有常数项, 算作 $O(1)$</p>\n</li>\n<li><p>基本结构顺序, 条件, 循环</p>\n<ul>\n<li><p>顺序结构: 按加法运算</p>\n</li>\n<li><p>循环结构: 乘法</p>\n</li>\n<li><p>分支结构: 取最大值</p>\n</li>\n</ul>\n</li>\n<li><p>判断一个算法效率, 往往只需要关注操作数量的最高次项, 其他次要的忽略</p>\n</li>\n<li><p>没特殊说明, 分析的时间复杂度都是<strong>最坏时间复杂度</strong></p>\n</li>\n</ol>\n<h3 id=\"4、常见的时间复杂度\"><a href=\"#4、常见的时间复杂度\" class=\"headerlink\" title=\"4、常见的时间复杂度\"></a>4、常见的时间复杂度</h3><table>\n<thead>\n<tr>\n<th>$T$</th>\n<th>$O$</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$12$</td>\n<td>$O(1)$</td>\n<td>常数阶</td>\n</tr>\n<tr>\n<td>$2n+3$</td>\n<td>$O(n)$</td>\n<td>线性阶</td>\n</tr>\n<tr>\n<td>$3n^2+2n+1$</td>\n<td>$O(n^2)$</td>\n<td>平方阶</td>\n</tr>\n<tr>\n<td>$5log2n+20$</td>\n<td>$O(log(n))$</td>\n<td>对数阶</td>\n</tr>\n<tr>\n<td>$2n+3nlog2n+19$</td>\n<td>$O(nlog(n))$</td>\n<td>$nlog(n)$ 阶</td>\n</tr>\n<tr>\n<td>$6n^3+2n^2+3n+4$</td>\n<td>$O(n^3)$</td>\n<td>立方阶</td>\n</tr>\n<tr>\n<td>$2^n$</td>\n<td>$O(2^n)$</td>\n<td>指数阶</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105531-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9B%B2%E7%BA%BF%E5%9B%BE%20.png\" alt=\"20190526105531-时间复杂度曲线图\"></p>\n<p>$$<br>O(1) &lt; O(log(n)) &lt; O(n) &lt; O(nlog(n)) &lt; O(n^2)&lt; O(n ^ 2log(n)) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>算法 : 内功心法, 是解决问题的一种思想</p>\n</blockquote>\n<h3 id=\"1、时间复杂度-T-n\"><a href=\"#1、时间复杂度-T-n\" class=\"headerlink\" title=\"1、时间复杂度 $T(n)$\"></a>1、时间复杂度 $T(n)$</h3><p>由于每台机器的性能有所差别，所有其执行相同代码的时间也长短不一，故而推出一种计量方式，统计代码执行基本运算（<code>函数调用需要看其源码的基本运算</code>）的数量（<code>n</code>) 来确定一个算法的优劣，其中基本运算的<strong>循环按乘法计算，顺序结构按加法计算，分支结构取最大值</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>): <br>    <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>):<br>        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>):<br>            <span class=\"hljs-keyword\">if</span> a+b+c == <span class=\"hljs-number\">1000</span> <span class=\"hljs-keyword\">and</span> a**<span class=\"hljs-number\">2</span> + b**<span class=\"hljs-number\">2</span> + c**<span class=\"hljs-number\">2</span>:<br>                print(<span class=\"hljs-string\">&#x27;a,b,c,: &#123;&#125;, &#123;&#125;, &#123;&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(a,b,c))<br></code></pre></td></tr></table></figure>\n<p>上述代码的时间复杂度为<br>$T = 1000 * 1000 * 1000 * 2$<br>那么如果将上述代码中的 1000 改为 2000， 则<br>$T = 2000 * 2000 * 2000 * 2$<br>由于上述同样的代码由于不同的参数的 T 都不同，我们便将其统一成 <strong>N</strong>，这样上述代码的时间复杂度可以表示成：<br>$T = N * N * N * 2$<br>同样的我们抓住其主要 “<strong>矛盾</strong>” ，观其大，再将其简化成<br>$T= N^3$<br>这样同一段代码的时间复杂度便不会根据其参数而发生改变了。</p>\n<h3 id=\"2、大-O-标记法-O\"><a href=\"#2、大-O-标记法-O\" class=\"headerlink\" title=\"2、大 $O$ 标记法 $O()$\"></a>2、大 $O$ 标记法 $O()$</h3><p>其实和求极限的原理相似，抓住问题的主要矛盾，忽略那些细枝末节，也就像前面的 $T$的最后的样子。</p>\n<h3 id=\"3、时间复杂度的几条基本规则\"><a href=\"#3、时间复杂度的几条基本规则\" class=\"headerlink\" title=\"3、时间复杂度的几条基本规则\"></a>3、时间复杂度的几条基本规则</h3><ol>\n<li><p>基本步骤: 即只有常数项, 算作 $O(1)$</p>\n</li>\n<li><p>基本结构顺序, 条件, 循环</p>\n<ul>\n<li><p>顺序结构: 按加法运算</p>\n</li>\n<li><p>循环结构: 乘法</p>\n</li>\n<li><p>分支结构: 取最大值</p>\n</li>\n</ul>\n</li>\n<li><p>判断一个算法效率, 往往只需要关注操作数量的最高次项, 其他次要的忽略</p>\n</li>\n<li><p>没特殊说明, 分析的时间复杂度都是<strong>最坏时间复杂度</strong></p>\n</li>\n</ol>\n<h3 id=\"4、常见的时间复杂度\"><a href=\"#4、常见的时间复杂度\" class=\"headerlink\" title=\"4、常见的时间复杂度\"></a>4、常见的时间复杂度</h3><table>\n<thead>\n<tr>\n<th>$T$</th>\n<th>$O$</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$12$</td>\n<td>$O(1)$</td>\n<td>常数阶</td>\n</tr>\n<tr>\n<td>$2n+3$</td>\n<td>$O(n)$</td>\n<td>线性阶</td>\n</tr>\n<tr>\n<td>$3n^2+2n+1$</td>\n<td>$O(n^2)$</td>\n<td>平方阶</td>\n</tr>\n<tr>\n<td>$5log2n+20$</td>\n<td>$O(log(n))$</td>\n<td>对数阶</td>\n</tr>\n<tr>\n<td>$2n+3nlog2n+19$</td>\n<td>$O(nlog(n))$</td>\n<td>$nlog(n)$ 阶</td>\n</tr>\n<tr>\n<td>$6n^3+2n^2+3n+4$</td>\n<td>$O(n^3)$</td>\n<td>立方阶</td>\n</tr>\n<tr>\n<td>$2^n$</td>\n<td>$O(2^n)$</td>\n<td>指数阶</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105531-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9B%B2%E7%BA%BF%E5%9B%BE%20.png\" alt=\"20190526105531-时间复杂度曲线图\"></p>\n<p>$$<br>O(1) &lt; O(log(n)) &lt; O(n) &lt; O(nlog(n)) &lt; O(n^2)&lt; O(n ^ 2log(n)) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)<br>$$</p>\n"},{"title":"常见函数的时间复杂度","date":"2019-05-25T11:54:09.000Z","_content":"\n很多函数都有自己的很多方法，其中有些方法的功能类似，但是其复杂度有时却大不相同\n\n本节我们将引入一个新模块 `timeit` ，其功能是来测试一小段 `Python` 代码的执行速度。\n\n### 1、timeit\n\n```python\nclass timeit.Timer(stmt='pass', setup='pass',timer=<timer function>)\n```\n\n- `Timer` 是测量小段代码执行速度的类\n\n- `stmt` 是要测试的代码语句 (`statment`), 字符串类型,\n\n- `setup` 是运行代码时需要的设置 , 字符串类型, 就是从 `__main__` 引入需要的是的方法名\n\n- `timer` 参数是一个定时器函数, 与平台有关, 不用去管\n\n- `timeit.Timer.timeit(numer=1000000)`，`numer`-> 测算次数, 返回平均耗时, 一个 `float` 类型的秒数\n\n#### 部分测试示例\n\n![20190526105816-timeit测试示例](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105816-timeit测试示例%20.png)\n\n#### 测试结果\n\n![20190526105825-timeit测试结果](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105825-timeit测试结果%20.png)\n\n\n### 2、list 的内置函数时间复杂度\n\n| 方法 | 复杂度 | 简介 |\n| --- | --- | --- |\n| index[x] | O(1) | 索引 |\n| index assignment | O(1) | 索引赋值 |\n| append | O(1) | 尾部追加 |\n| pop() | O(1) | 尾部弹出 |\n| pop(i) | O(n) | 指定位置弹出 n 列表长度, 最坏时间复杂度 |\n| insert(i, item) | O(n) | 指定位置添加 |\n| del operator | O(n) | 删除, 代表一个一个元素去清空 |\n| iteration | O(n) | 迭代 |\n| contains(in) | O(n) | 看谁是否在列表中, 需要遍历 |\n| get slice[x:y] | O(k) | 取切片, 从 x 取到 y, 一次定位到 x, 然后取到 y ,x 和 y 之间有多少就是 k |\n| del slice | O(n) | 删除切片 删除位置之后, 后面的元素都需要往前移动 |\n| set slice | O(k) | 设置切片, li[0:3] = [1, 2, 3, 4]k 是补充的东西数量 |\n| reverse | O(n) | 置返 |\n| concatenate | O(k) | 代表使用的 +, 把两个列表加到一起, k 是第二个列表中的元素 |\n| sort | O(nlogn) | 排序 |\n| multiply | O(nk) | 相乘 li=[1, 2] -> n li * 10 -> k |\n\n### 3、dict 的内置函数时间复杂度\n\n| 方法 | 复杂度 | 简介 |\n| --- | --- | --- |\n| copy | O(n) | 复制 |\n| get item | O(1) | 取 |\n| set item | O(1) | 设置 |\n| delete item | O(1) | 删除键 |\n| contains(in) | O(1) | 包含 |\n| iteration | O(n) | 迭代 |","source":"_posts/算法-时间复杂度-02_常见函数的时间复杂度.md","raw":"---\ntitle: 常见函数的时间复杂度\ncategories:\n  - 技术\n  - 算法\n  - 时间复杂度\ntags:\n  - 时间复杂度\ndate: 2019-05-25 19:54:09\n---\n\n很多函数都有自己的很多方法，其中有些方法的功能类似，但是其复杂度有时却大不相同\n\n本节我们将引入一个新模块 `timeit` ，其功能是来测试一小段 `Python` 代码的执行速度。\n\n### 1、timeit\n\n```python\nclass timeit.Timer(stmt='pass', setup='pass',timer=<timer function>)\n```\n\n- `Timer` 是测量小段代码执行速度的类\n\n- `stmt` 是要测试的代码语句 (`statment`), 字符串类型,\n\n- `setup` 是运行代码时需要的设置 , 字符串类型, 就是从 `__main__` 引入需要的是的方法名\n\n- `timer` 参数是一个定时器函数, 与平台有关, 不用去管\n\n- `timeit.Timer.timeit(numer=1000000)`，`numer`-> 测算次数, 返回平均耗时, 一个 `float` 类型的秒数\n\n#### 部分测试示例\n\n![20190526105816-timeit测试示例](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105816-timeit测试示例%20.png)\n\n#### 测试结果\n\n![20190526105825-timeit测试结果](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105825-timeit测试结果%20.png)\n\n\n### 2、list 的内置函数时间复杂度\n\n| 方法 | 复杂度 | 简介 |\n| --- | --- | --- |\n| index[x] | O(1) | 索引 |\n| index assignment | O(1) | 索引赋值 |\n| append | O(1) | 尾部追加 |\n| pop() | O(1) | 尾部弹出 |\n| pop(i) | O(n) | 指定位置弹出 n 列表长度, 最坏时间复杂度 |\n| insert(i, item) | O(n) | 指定位置添加 |\n| del operator | O(n) | 删除, 代表一个一个元素去清空 |\n| iteration | O(n) | 迭代 |\n| contains(in) | O(n) | 看谁是否在列表中, 需要遍历 |\n| get slice[x:y] | O(k) | 取切片, 从 x 取到 y, 一次定位到 x, 然后取到 y ,x 和 y 之间有多少就是 k |\n| del slice | O(n) | 删除切片 删除位置之后, 后面的元素都需要往前移动 |\n| set slice | O(k) | 设置切片, li[0:3] = [1, 2, 3, 4]k 是补充的东西数量 |\n| reverse | O(n) | 置返 |\n| concatenate | O(k) | 代表使用的 +, 把两个列表加到一起, k 是第二个列表中的元素 |\n| sort | O(nlogn) | 排序 |\n| multiply | O(nk) | 相乘 li=[1, 2] -> n li * 10 -> k |\n\n### 3、dict 的内置函数时间复杂度\n\n| 方法 | 复杂度 | 简介 |\n| --- | --- | --- |\n| copy | O(n) | 复制 |\n| get item | O(1) | 取 |\n| set item | O(1) | 设置 |\n| delete item | O(1) | 删除键 |\n| contains(in) | O(1) | 包含 |\n| iteration | O(n) | 迭代 |","slug":"算法-时间复杂度-02_常见函数的时间复杂度","published":1,"updated":"2021-01-25T02:59:08.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudr004kjjlnh41v5v5f","content":"<p>很多函数都有自己的很多方法，其中有些方法的功能类似，但是其复杂度有时却大不相同</p>\n<p>本节我们将引入一个新模块 <code>timeit</code> ，其功能是来测试一小段 <code>Python</code> 代码的执行速度。</p>\n<h3 id=\"1、timeit\"><a href=\"#1、timeit\" class=\"headerlink\" title=\"1、timeit\"></a>1、timeit</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">timeit</span>.<span class=\"hljs-title\">Timer</span>(<span class=\"hljs-params\">stmt=<span class=\"hljs-string\">&#x27;pass&#x27;</span>, setup=<span class=\"hljs-string\">&#x27;pass&#x27;</span>,timer=&lt;timer function&gt;</span>)</span><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p><code>Timer</code> 是测量小段代码执行速度的类</p>\n</li>\n<li><p><code>stmt</code> 是要测试的代码语句 (<code>statment</code>), 字符串类型,</p>\n</li>\n<li><p><code>setup</code> 是运行代码时需要的设置 , 字符串类型, 就是从 <code>__main__</code> 引入需要的是的方法名</p>\n</li>\n<li><p><code>timer</code> 参数是一个定时器函数, 与平台有关, 不用去管</p>\n</li>\n<li><p><code>timeit.Timer.timeit(numer=1000000)</code>，<code>numer</code>-&gt; 测算次数, 返回平均耗时, 一个 <code>float</code> 类型的秒数</p>\n</li>\n</ul>\n<h4 id=\"部分测试示例\"><a href=\"#部分测试示例\" class=\"headerlink\" title=\"部分测试示例\"></a>部分测试示例</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105816-timeit%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8B%20.png\" alt=\"20190526105816-timeit测试示例\"></p>\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105825-timeit%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%20.png\" alt=\"20190526105825-timeit测试结果\"></p>\n<h3 id=\"2、list-的内置函数时间复杂度\"><a href=\"#2、list-的内置函数时间复杂度\" class=\"headerlink\" title=\"2、list 的内置函数时间复杂度\"></a>2、list 的内置函数时间复杂度</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>复杂度</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index[x]</td>\n<td>O(1)</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>index assignment</td>\n<td>O(1)</td>\n<td>索引赋值</td>\n</tr>\n<tr>\n<td>append</td>\n<td>O(1)</td>\n<td>尾部追加</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>O(1)</td>\n<td>尾部弹出</td>\n</tr>\n<tr>\n<td>pop(i)</td>\n<td>O(n)</td>\n<td>指定位置弹出 n 列表长度, 最坏时间复杂度</td>\n</tr>\n<tr>\n<td>insert(i, item)</td>\n<td>O(n)</td>\n<td>指定位置添加</td>\n</tr>\n<tr>\n<td>del operator</td>\n<td>O(n)</td>\n<td>删除, 代表一个一个元素去清空</td>\n</tr>\n<tr>\n<td>iteration</td>\n<td>O(n)</td>\n<td>迭代</td>\n</tr>\n<tr>\n<td>contains(in)</td>\n<td>O(n)</td>\n<td>看谁是否在列表中, 需要遍历</td>\n</tr>\n<tr>\n<td>get slice[x:y]</td>\n<td>O(k)</td>\n<td>取切片, 从 x 取到 y, 一次定位到 x, 然后取到 y ,x 和 y 之间有多少就是 k</td>\n</tr>\n<tr>\n<td>del slice</td>\n<td>O(n)</td>\n<td>删除切片 删除位置之后, 后面的元素都需要往前移动</td>\n</tr>\n<tr>\n<td>set slice</td>\n<td>O(k)</td>\n<td>设置切片, li[0:3] = [1, 2, 3, 4]k 是补充的东西数量</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>O(n)</td>\n<td>置返</td>\n</tr>\n<tr>\n<td>concatenate</td>\n<td>O(k)</td>\n<td>代表使用的 +, 把两个列表加到一起, k 是第二个列表中的元素</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>O(nlogn)</td>\n<td>排序</td>\n</tr>\n<tr>\n<td>multiply</td>\n<td>O(nk)</td>\n<td>相乘 li=[1, 2] -&gt; n li * 10 -&gt; k</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、dict-的内置函数时间复杂度\"><a href=\"#3、dict-的内置函数时间复杂度\" class=\"headerlink\" title=\"3、dict 的内置函数时间复杂度\"></a>3、dict 的内置函数时间复杂度</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>复杂度</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>copy</td>\n<td>O(n)</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>get item</td>\n<td>O(1)</td>\n<td>取</td>\n</tr>\n<tr>\n<td>set item</td>\n<td>O(1)</td>\n<td>设置</td>\n</tr>\n<tr>\n<td>delete item</td>\n<td>O(1)</td>\n<td>删除键</td>\n</tr>\n<tr>\n<td>contains(in)</td>\n<td>O(1)</td>\n<td>包含</td>\n</tr>\n<tr>\n<td>iteration</td>\n<td>O(n)</td>\n<td>迭代</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>很多函数都有自己的很多方法，其中有些方法的功能类似，但是其复杂度有时却大不相同</p>\n<p>本节我们将引入一个新模块 <code>timeit</code> ，其功能是来测试一小段 <code>Python</code> 代码的执行速度。</p>\n<h3 id=\"1、timeit\"><a href=\"#1、timeit\" class=\"headerlink\" title=\"1、timeit\"></a>1、timeit</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">timeit</span>.<span class=\"hljs-title\">Timer</span>(<span class=\"hljs-params\">stmt=<span class=\"hljs-string\">&#x27;pass&#x27;</span>, setup=<span class=\"hljs-string\">&#x27;pass&#x27;</span>,timer=&lt;timer function&gt;</span>)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p><code>Timer</code> 是测量小段代码执行速度的类</p>\n</li>\n<li><p><code>stmt</code> 是要测试的代码语句 (<code>statment</code>), 字符串类型,</p>\n</li>\n<li><p><code>setup</code> 是运行代码时需要的设置 , 字符串类型, 就是从 <code>__main__</code> 引入需要的是的方法名</p>\n</li>\n<li><p><code>timer</code> 参数是一个定时器函数, 与平台有关, 不用去管</p>\n</li>\n<li><p><code>timeit.Timer.timeit(numer=1000000)</code>，<code>numer</code>-&gt; 测算次数, 返回平均耗时, 一个 <code>float</code> 类型的秒数</p>\n</li>\n</ul>\n<h4 id=\"部分测试示例\"><a href=\"#部分测试示例\" class=\"headerlink\" title=\"部分测试示例\"></a>部分测试示例</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105816-timeit%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8B%20.png\" alt=\"20190526105816-timeit测试示例\"></p>\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105825-timeit%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%20.png\" alt=\"20190526105825-timeit测试结果\"></p>\n<h3 id=\"2、list-的内置函数时间复杂度\"><a href=\"#2、list-的内置函数时间复杂度\" class=\"headerlink\" title=\"2、list 的内置函数时间复杂度\"></a>2、list 的内置函数时间复杂度</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>复杂度</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index[x]</td>\n<td>O(1)</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>index assignment</td>\n<td>O(1)</td>\n<td>索引赋值</td>\n</tr>\n<tr>\n<td>append</td>\n<td>O(1)</td>\n<td>尾部追加</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>O(1)</td>\n<td>尾部弹出</td>\n</tr>\n<tr>\n<td>pop(i)</td>\n<td>O(n)</td>\n<td>指定位置弹出 n 列表长度, 最坏时间复杂度</td>\n</tr>\n<tr>\n<td>insert(i, item)</td>\n<td>O(n)</td>\n<td>指定位置添加</td>\n</tr>\n<tr>\n<td>del operator</td>\n<td>O(n)</td>\n<td>删除, 代表一个一个元素去清空</td>\n</tr>\n<tr>\n<td>iteration</td>\n<td>O(n)</td>\n<td>迭代</td>\n</tr>\n<tr>\n<td>contains(in)</td>\n<td>O(n)</td>\n<td>看谁是否在列表中, 需要遍历</td>\n</tr>\n<tr>\n<td>get slice[x:y]</td>\n<td>O(k)</td>\n<td>取切片, 从 x 取到 y, 一次定位到 x, 然后取到 y ,x 和 y 之间有多少就是 k</td>\n</tr>\n<tr>\n<td>del slice</td>\n<td>O(n)</td>\n<td>删除切片 删除位置之后, 后面的元素都需要往前移动</td>\n</tr>\n<tr>\n<td>set slice</td>\n<td>O(k)</td>\n<td>设置切片, li[0:3] = [1, 2, 3, 4]k 是补充的东西数量</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>O(n)</td>\n<td>置返</td>\n</tr>\n<tr>\n<td>concatenate</td>\n<td>O(k)</td>\n<td>代表使用的 +, 把两个列表加到一起, k 是第二个列表中的元素</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>O(nlogn)</td>\n<td>排序</td>\n</tr>\n<tr>\n<td>multiply</td>\n<td>O(nk)</td>\n<td>相乘 li=[1, 2] -&gt; n li * 10 -&gt; k</td>\n</tr>\n</tbody></table>\n<h3 id=\"3、dict-的内置函数时间复杂度\"><a href=\"#3、dict-的内置函数时间复杂度\" class=\"headerlink\" title=\"3、dict 的内置函数时间复杂度\"></a>3、dict 的内置函数时间复杂度</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>复杂度</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>copy</td>\n<td>O(n)</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>get item</td>\n<td>O(1)</td>\n<td>取</td>\n</tr>\n<tr>\n<td>set item</td>\n<td>O(1)</td>\n<td>设置</td>\n</tr>\n<tr>\n<td>delete item</td>\n<td>O(1)</td>\n<td>删除键</td>\n</tr>\n<tr>\n<td>contains(in)</td>\n<td>O(1)</td>\n<td>包含</td>\n</tr>\n<tr>\n<td>iteration</td>\n<td>O(n)</td>\n<td>迭代</td>\n</tr>\n</tbody></table>\n"},{"title":"清除office最近文件","date":"2020-05-23T10:20:35.000Z","_content":"\n批量删除Mac系统下office最近文件\n\n```bash\nrm -rf ~/Library/Containers/com.microsoft.Word/Data/Library/Preferences/com.microsoft.Word.securebookmarks.plist\n\nrm -rf ~/Library/Containers/com.microsoft.Excel/Data/Library/Preferences/com.microsoft.Excel.securebookmarks.plist\n\nrm -rf ~/Library/Containers/com.microsoft.Powerpoint/Data/Library/Preferences/com.microsoft.Powerpoint.securebookmarks.plist\n```","source":"_posts/系统-Mac-清除office最近文件.md","raw":"---\ntitle: 清除office最近文件\ndate: 2020-05-23 18:20:35\ncategories:\n    - 系统\n    - Mac\ntags:\n    - office\n---\n\n批量删除Mac系统下office最近文件\n\n```bash\nrm -rf ~/Library/Containers/com.microsoft.Word/Data/Library/Preferences/com.microsoft.Word.securebookmarks.plist\n\nrm -rf ~/Library/Containers/com.microsoft.Excel/Data/Library/Preferences/com.microsoft.Excel.securebookmarks.plist\n\nrm -rf ~/Library/Containers/com.microsoft.Powerpoint/Data/Library/Preferences/com.microsoft.Powerpoint.securebookmarks.plist\n```","slug":"系统-Mac-清除office最近文件","published":1,"updated":"2021-01-25T02:59:43.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudt004ojjln0zdf57g9","content":"<p>批量删除Mac系统下office最近文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">rm -rf ~/Library/Containers/com.microsoft.Word/Data/Library/Preferences/com.microsoft.Word.securebookmarks.plist<br><br>rm -rf ~/Library/Containers/com.microsoft.Excel/Data/Library/Preferences/com.microsoft.Excel.securebookmarks.plist<br><br>rm -rf ~/Library/Containers/com.microsoft.Powerpoint/Data/Library/Preferences/com.microsoft.Powerpoint.securebookmarks.plist<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>批量删除Mac系统下office最近文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">rm -rf ~/Library/Containers/com.microsoft.Word/Data/Library/Preferences/com.microsoft.Word.securebookmarks.plist<br><br>rm -rf ~/Library/Containers/com.microsoft.Excel/Data/Library/Preferences/com.microsoft.Excel.securebookmarks.plist<br><br>rm -rf ~/Library/Containers/com.microsoft.Powerpoint/Data/Library/Preferences/com.microsoft.Powerpoint.securebookmarks.plist<br></code></pre></td></tr></table></figure>"},{"title":"Deepin OS 安装 NVIDIA驱动","date":"2020-09-03T10:20:35.000Z","_content":"\n## 工具 / 原料\n\n- 一台电脑\n- Deepin15.10.2 系统\n- N 卡官网驱动\n\n## 方法 / 步骤\n\n### 一、驱动下载\n\n本教程以 `GTX1050` 为例，前往 [N 卡官网](<https://www.nvidia.cn/geforce/drivers/>)下载对应的驱动 :\n\n![20200826215347](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20200826215347.png)\n\n然后选择一个下载即可，我下载的是`NVIDIA-Linux-x86_64-430.26.run`，最好不要下载最新的驱动，有可能有 Bug。(为可方便起见，建议更改文件名为 `001.run`，千万别忘了`. run`，该文件名只是为了好敲入命令。)\n\n### 二、禁用 nouveau 驱动\n\n1. 如果之前在 Deepin 中安装过 NVIDIA 驱动，请将其全部删除：\n\n   在终端执行命令: `sudo apt autoremove  nvidia`(没有可以跳过)\n\n2. 在终端执行命令:\n\n   ```zsh\n   sudo dedit /etc/modprobe.d/blacklist.conf\n   ```\n\n   然后在将以下内容复制到文件中\n\n   ```zsh\n   blacklist nouveau\n\n   blacklist lbm-nouveau\n\n   options nouveau modeset=0\n\n   alias nouveau off\n\n   alias lbm-nouveau off\n   ```\n\n\t 保存退出\n\n4. 接下来在终端执行命令:\n\n    ```zsh\n    sudo update-initramfs -u\n    ```\n\n5. 重启系统，再次进入系统，可能会发现分  辨率异常。(分辨率异常就说明成功禁用 nouveau 驱动重启系统，重启后查看是否生效，\n\n   ```zsh\n   lsmod |grep -i nouveau\n   ```\n\n\n### 三、NVIDIA 安装过程\n\n1. 使用快捷键 `CTRL+ALT+F2` 进入终端，登录自己的账号 (就是用户名和密码)。\n2. 暂时关闭图形界面：\n\n    ```zsh\n    sudo service lightdm stop\n    ```\n\n3. 给下载好的 nvidia 驱动文件设置执行权限 (文件默认在 `/home/用户名/Downloads/` 目录下，用户名为你自己的用户名，如果你改文件名了，就填你改后的文件名，千万别填 `NVIDIA-Linux-x86_64-430.26.run`)。\n\n    ```zsh\n    sudo chmod a+x  /home/用户名/Downloads/NVIDIA-Linux-x86_64-430.26.run\n    ```\n\n4. 驱动安装：\n\n    ```zsh\n    sudo  sh  /home / 用户名 / Downloads/NVIDIA-Linux-x86_64-430.26.run\n    ```\n\n\t(一系列 yes，还有一个界面选择 `install and cover`，意为安装和覆盖。)\n\n5. 重启系统：\n\n    ```zsh\n    sudo reboot\n    ```\n\n    安装完成后重启，执行 `nvidia-smi`\n\n\t![20190922111147368](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111147368.png)\n\t\n\t发现这时候其实 NVIDIA 的显卡并没有工作，**显存一点都没占用**。主要是由于我的电脑是双显卡，这时候其实依然是 intel 集成显卡在工作，所以还要做下面的工作。\n\n### 四、设置默认 nvidia 显卡工作\n\n```zsh\nlspci | egrep 'VGA|3D'\n```\n\n执行上述命令获取 `nvidia` 显卡设备 `BusID`，例如: `01:00.0` 填写 `PCI:1:0:0`，\n\n![20190922111306609](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111306609.png)\n\n 然后编辑 `/etc/X11/xorg.conf`，注意其中 PCI 部分填写 `PCI:1:0:0`，\n\n```zsh\nSection \"Module\"\n    Load \"modesetting\"\nEndSection\n\nSection \"Device\"\n    Identifier \"nvidia\"\n    Driver \"nvidia\"\n    BusID \"PCI:X:X:X\"       \n    Option \"AllowEmptyInitialConfiguration\"\nEndSection\n```\n\n编辑`~/.xinitrc`，\n\n```zsh\nxrandr --setprovideroutputsource modesetting NVIDIA-0\nxrandr --auto\nxrandr --dpi 96\n```\n\n编辑`/etc/lightdm/display_setup.sh`，\n\n```zsh\n#!/bin/sh\nxrandr --setprovideroutputsource modesetting NVIDIA-0\nxrandr --auto\nxrandr --dpi 96\n```\n\n然后执行\n\n```zsh\nsudo chmod +x  /etc/lightdm/display_setup.sh\n```\n\n编辑 `/etc/lightdm/lightdm.conf` 在 `[Seat:*]` 行下添加，\n\n```zsh\ndisplay-setup-script=/etc/lightdm/display_setup.sh\n```\n\n重启动后，查看是否生效，`nvidia-smi`\n\n![20190922111512515](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111512515.png)\n\n发现已经生效。","source":"_posts/系统-deepin OS 安装NVIDIA驱动.md","raw":"---\ntitle: Deepin OS 安装 NVIDIA驱动\ndate: 2020-09-03 18:20:35\ncategories:\n    - 系统\n    - linux\ntags:\n    - deepin\n    - nvidia\n---\n\n## 工具 / 原料\n\n- 一台电脑\n- Deepin15.10.2 系统\n- N 卡官网驱动\n\n## 方法 / 步骤\n\n### 一、驱动下载\n\n本教程以 `GTX1050` 为例，前往 [N 卡官网](<https://www.nvidia.cn/geforce/drivers/>)下载对应的驱动 :\n\n![20200826215347](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20200826215347.png)\n\n然后选择一个下载即可，我下载的是`NVIDIA-Linux-x86_64-430.26.run`，最好不要下载最新的驱动，有可能有 Bug。(为可方便起见，建议更改文件名为 `001.run`，千万别忘了`. run`，该文件名只是为了好敲入命令。)\n\n### 二、禁用 nouveau 驱动\n\n1. 如果之前在 Deepin 中安装过 NVIDIA 驱动，请将其全部删除：\n\n   在终端执行命令: `sudo apt autoremove  nvidia`(没有可以跳过)\n\n2. 在终端执行命令:\n\n   ```zsh\n   sudo dedit /etc/modprobe.d/blacklist.conf\n   ```\n\n   然后在将以下内容复制到文件中\n\n   ```zsh\n   blacklist nouveau\n\n   blacklist lbm-nouveau\n\n   options nouveau modeset=0\n\n   alias nouveau off\n\n   alias lbm-nouveau off\n   ```\n\n\t 保存退出\n\n4. 接下来在终端执行命令:\n\n    ```zsh\n    sudo update-initramfs -u\n    ```\n\n5. 重启系统，再次进入系统，可能会发现分  辨率异常。(分辨率异常就说明成功禁用 nouveau 驱动重启系统，重启后查看是否生效，\n\n   ```zsh\n   lsmod |grep -i nouveau\n   ```\n\n\n### 三、NVIDIA 安装过程\n\n1. 使用快捷键 `CTRL+ALT+F2` 进入终端，登录自己的账号 (就是用户名和密码)。\n2. 暂时关闭图形界面：\n\n    ```zsh\n    sudo service lightdm stop\n    ```\n\n3. 给下载好的 nvidia 驱动文件设置执行权限 (文件默认在 `/home/用户名/Downloads/` 目录下，用户名为你自己的用户名，如果你改文件名了，就填你改后的文件名，千万别填 `NVIDIA-Linux-x86_64-430.26.run`)。\n\n    ```zsh\n    sudo chmod a+x  /home/用户名/Downloads/NVIDIA-Linux-x86_64-430.26.run\n    ```\n\n4. 驱动安装：\n\n    ```zsh\n    sudo  sh  /home / 用户名 / Downloads/NVIDIA-Linux-x86_64-430.26.run\n    ```\n\n\t(一系列 yes，还有一个界面选择 `install and cover`，意为安装和覆盖。)\n\n5. 重启系统：\n\n    ```zsh\n    sudo reboot\n    ```\n\n    安装完成后重启，执行 `nvidia-smi`\n\n\t![20190922111147368](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111147368.png)\n\t\n\t发现这时候其实 NVIDIA 的显卡并没有工作，**显存一点都没占用**。主要是由于我的电脑是双显卡，这时候其实依然是 intel 集成显卡在工作，所以还要做下面的工作。\n\n### 四、设置默认 nvidia 显卡工作\n\n```zsh\nlspci | egrep 'VGA|3D'\n```\n\n执行上述命令获取 `nvidia` 显卡设备 `BusID`，例如: `01:00.0` 填写 `PCI:1:0:0`，\n\n![20190922111306609](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111306609.png)\n\n 然后编辑 `/etc/X11/xorg.conf`，注意其中 PCI 部分填写 `PCI:1:0:0`，\n\n```zsh\nSection \"Module\"\n    Load \"modesetting\"\nEndSection\n\nSection \"Device\"\n    Identifier \"nvidia\"\n    Driver \"nvidia\"\n    BusID \"PCI:X:X:X\"       \n    Option \"AllowEmptyInitialConfiguration\"\nEndSection\n```\n\n编辑`~/.xinitrc`，\n\n```zsh\nxrandr --setprovideroutputsource modesetting NVIDIA-0\nxrandr --auto\nxrandr --dpi 96\n```\n\n编辑`/etc/lightdm/display_setup.sh`，\n\n```zsh\n#!/bin/sh\nxrandr --setprovideroutputsource modesetting NVIDIA-0\nxrandr --auto\nxrandr --dpi 96\n```\n\n然后执行\n\n```zsh\nsudo chmod +x  /etc/lightdm/display_setup.sh\n```\n\n编辑 `/etc/lightdm/lightdm.conf` 在 `[Seat:*]` 行下添加，\n\n```zsh\ndisplay-setup-script=/etc/lightdm/display_setup.sh\n```\n\n重启动后，查看是否生效，`nvidia-smi`\n\n![20190922111512515](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111512515.png)\n\n发现已经生效。","slug":"系统-deepin OS 安装NVIDIA驱动","published":1,"updated":"2021-01-25T02:59:36.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudu004qjjlngpg192ip","content":"<h2 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具 / 原料\"></a>工具 / 原料</h2><ul>\n<li>一台电脑</li>\n<li>Deepin15.10.2 系统</li>\n<li>N 卡官网驱动</li>\n</ul>\n<h2 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法 / 步骤\"></a>方法 / 步骤</h2><h3 id=\"一、驱动下载\"><a href=\"#一、驱动下载\" class=\"headerlink\" title=\"一、驱动下载\"></a>一、驱动下载</h3><p>本教程以 <code>GTX1050</code> 为例，前往 <a href=\"https://www.nvidia.cn/geforce/drivers/\">N 卡官网</a>下载对应的驱动 :</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20200826215347.png\" alt=\"20200826215347\"></p>\n<p>然后选择一个下载即可，我下载的是<code>NVIDIA-Linux-x86_64-430.26.run</code>，最好不要下载最新的驱动，有可能有 Bug。(为可方便起见，建议更改文件名为 <code>001.run</code>，千万别忘了<code>. run</code>，该文件名只是为了好敲入命令。)</p>\n<h3 id=\"二、禁用-nouveau-驱动\"><a href=\"#二、禁用-nouveau-驱动\" class=\"headerlink\" title=\"二、禁用 nouveau 驱动\"></a>二、禁用 nouveau 驱动</h3><ol>\n<li><p>如果之前在 Deepin 中安装过 NVIDIA 驱动，请将其全部删除：</p>\n<p>在终端执行命令: <code>sudo apt autoremove  nvidia</code>(没有可以跳过)</p>\n</li>\n<li><p>在终端执行命令:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo dedit /etc/modprobe.d/blacklist.conf<br></code></pre></div></td></tr></table></figure>\n<p>然后在将以下内容复制到文件中</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">blacklist nouveau<br><br>blacklist lbm-nouveau<br><br>options nouveau modeset=0<br><br><span class=\"hljs-built_in\">alias</span> nouveau off<br><br><span class=\"hljs-built_in\">alias</span> lbm-nouveau off<br></code></pre></div></td></tr></table></figure>\n<p>  保存退出</p>\n</li>\n<li><p>接下来在终端执行命令:</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo update-initramfs -u<br></code></pre></div></td></tr></table></figure></li>\n<li><p>重启系统，再次进入系统，可能会发现分  辨率异常。(分辨率异常就说明成功禁用 nouveau 驱动重启系统，重启后查看是否生效，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">lsmod |grep -i nouveau<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"三、NVIDIA-安装过程\"><a href=\"#三、NVIDIA-安装过程\" class=\"headerlink\" title=\"三、NVIDIA 安装过程\"></a>三、NVIDIA 安装过程</h3><ol>\n<li><p>使用快捷键 <code>CTRL+ALT+F2</code> 进入终端，登录自己的账号 (就是用户名和密码)。</p>\n</li>\n<li><p>暂时关闭图形界面：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo service lightdm stop<br></code></pre></div></td></tr></table></figure></li>\n<li><p>给下载好的 nvidia 驱动文件设置执行权限 (文件默认在 <code>/home/用户名/Downloads/</code> 目录下，用户名为你自己的用户名，如果你改文件名了，就填你改后的文件名，千万别填 <code>NVIDIA-Linux-x86_64-430.26.run</code>)。</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo chmod a+x  /home/用户名/Downloads/NVIDIA-Linux-x86_64-430.26.run<br></code></pre></div></td></tr></table></figure></li>\n<li><p>驱动安装：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo  sh  /home / 用户名 / Downloads/NVIDIA-Linux-x86_64-430.26.run<br></code></pre></div></td></tr></table></figure>\n<p> (一系列 yes，还有一个界面选择 <code>install and cover</code>，意为安装和覆盖。)</p>\n</li>\n<li><p>重启系统：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo reboot<br></code></pre></div></td></tr></table></figure>\n<p> 安装完成后重启，执行 <code>nvidia-smi</code></p>\n<p> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111147368.png\" alt=\"20190922111147368\"></p>\n<p> 发现这时候其实 NVIDIA 的显卡并没有工作，<strong>显存一点都没占用</strong>。主要是由于我的电脑是双显卡，这时候其实依然是 intel 集成显卡在工作，所以还要做下面的工作。</p>\n</li>\n</ol>\n<h3 id=\"四、设置默认-nvidia-显卡工作\"><a href=\"#四、设置默认-nvidia-显卡工作\" class=\"headerlink\" title=\"四、设置默认 nvidia 显卡工作\"></a>四、设置默认 nvidia 显卡工作</h3><figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">lspci | egrep <span class=\"hljs-string\">&#x27;VGA|3D&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p>执行上述命令获取 <code>nvidia</code> 显卡设备 <code>BusID</code>，例如: <code>01:00.0</code> 填写 <code>PCI:1:0:0</code>，</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111306609.png\" alt=\"20190922111306609\"></p>\n<p> 然后编辑 <code>/etc/X11/xorg.conf</code>，注意其中 PCI 部分填写 <code>PCI:1:0:0</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">Section <span class=\"hljs-string\">&quot;Module&quot;</span><br>    Load <span class=\"hljs-string\">&quot;modesetting&quot;</span><br>EndSection<br><br>Section <span class=\"hljs-string\">&quot;Device&quot;</span><br>    Identifier <span class=\"hljs-string\">&quot;nvidia&quot;</span><br>    Driver <span class=\"hljs-string\">&quot;nvidia&quot;</span><br>    BusID <span class=\"hljs-string\">&quot;PCI:X:X:X&quot;</span>       <br>    Option <span class=\"hljs-string\">&quot;AllowEmptyInitialConfiguration&quot;</span><br>EndSection<br></code></pre></div></td></tr></table></figure>\n<p>编辑<code>~/.xinitrc</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">xrandr --setprovideroutputsource modesetting NVIDIA-0<br>xrandr --auto<br>xrandr --dpi 96<br></code></pre></div></td></tr></table></figure>\n<p>编辑<code>/etc/lightdm/display_setup.sh</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\"><span class=\"hljs-meta\">#!/bin/sh</span><br>xrandr --setprovideroutputsource modesetting NVIDIA-0<br>xrandr --auto<br>xrandr --dpi 96<br></code></pre></div></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">sudo chmod +x  /etc/lightdm/display_setup.sh<br></code></pre></div></td></tr></table></figure>\n<p>编辑 <code>/etc/lightdm/lightdm.conf</code> 在 <code>[Seat:*]</code> 行下添加，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs zsh\">display-setup-script=/etc/lightdm/display_setup.sh<br></code></pre></div></td></tr></table></figure>\n<p>重启动后，查看是否生效，<code>nvidia-smi</code></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111512515.png\" alt=\"20190922111512515\"></p>\n<p>发现已经生效。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具 / 原料\"></a>工具 / 原料</h2><ul>\n<li>一台电脑</li>\n<li>Deepin15.10.2 系统</li>\n<li>N 卡官网驱动</li>\n</ul>\n<h2 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法 / 步骤\"></a>方法 / 步骤</h2><h3 id=\"一、驱动下载\"><a href=\"#一、驱动下载\" class=\"headerlink\" title=\"一、驱动下载\"></a>一、驱动下载</h3><p>本教程以 <code>GTX1050</code> 为例，前往 <a href=\"https://www.nvidia.cn/geforce/drivers/\">N 卡官网</a>下载对应的驱动 :</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20200826215347.png\" alt=\"20200826215347\"></p>\n<p>然后选择一个下载即可，我下载的是<code>NVIDIA-Linux-x86_64-430.26.run</code>，最好不要下载最新的驱动，有可能有 Bug。(为可方便起见，建议更改文件名为 <code>001.run</code>，千万别忘了<code>. run</code>，该文件名只是为了好敲入命令。)</p>\n<h3 id=\"二、禁用-nouveau-驱动\"><a href=\"#二、禁用-nouveau-驱动\" class=\"headerlink\" title=\"二、禁用 nouveau 驱动\"></a>二、禁用 nouveau 驱动</h3><ol>\n<li><p>如果之前在 Deepin 中安装过 NVIDIA 驱动，请将其全部删除：</p>\n<p>在终端执行命令: <code>sudo apt autoremove  nvidia</code>(没有可以跳过)</p>\n</li>\n<li><p>在终端执行命令:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo dedit /etc/modprobe.d/blacklist.conf<br></code></pre></td></tr></table></figure>\n<p>然后在将以下内容复制到文件中</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">blacklist nouveau<br><br>blacklist lbm-nouveau<br><br>options nouveau modeset=0<br><br><span class=\"hljs-built_in\">alias</span> nouveau off<br><br><span class=\"hljs-built_in\">alias</span> lbm-nouveau off<br></code></pre></td></tr></table></figure>\n<p>  保存退出</p>\n</li>\n<li><p>接下来在终端执行命令:</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo update-initramfs -u<br></code></pre></td></tr></table></figure></li>\n<li><p>重启系统，再次进入系统，可能会发现分  辨率异常。(分辨率异常就说明成功禁用 nouveau 驱动重启系统，重启后查看是否生效，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">lsmod |grep -i nouveau<br></code></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"三、NVIDIA-安装过程\"><a href=\"#三、NVIDIA-安装过程\" class=\"headerlink\" title=\"三、NVIDIA 安装过程\"></a>三、NVIDIA 安装过程</h3><ol>\n<li><p>使用快捷键 <code>CTRL+ALT+F2</code> 进入终端，登录自己的账号 (就是用户名和密码)。</p>\n</li>\n<li><p>暂时关闭图形界面：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo service lightdm stop<br></code></pre></td></tr></table></figure></li>\n<li><p>给下载好的 nvidia 驱动文件设置执行权限 (文件默认在 <code>/home/用户名/Downloads/</code> 目录下，用户名为你自己的用户名，如果你改文件名了，就填你改后的文件名，千万别填 <code>NVIDIA-Linux-x86_64-430.26.run</code>)。</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo chmod a+x  /home/用户名/Downloads/NVIDIA-Linux-x86_64-430.26.run<br></code></pre></td></tr></table></figure></li>\n<li><p>驱动安装：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo  sh  /home / 用户名 / Downloads/NVIDIA-Linux-x86_64-430.26.run<br></code></pre></td></tr></table></figure>\n<p> (一系列 yes，还有一个界面选择 <code>install and cover</code>，意为安装和覆盖。)</p>\n</li>\n<li><p>重启系统：</p>\n <figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo reboot<br></code></pre></td></tr></table></figure>\n<p> 安装完成后重启，执行 <code>nvidia-smi</code></p>\n<p> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111147368.png\" alt=\"20190922111147368\"></p>\n<p> 发现这时候其实 NVIDIA 的显卡并没有工作，<strong>显存一点都没占用</strong>。主要是由于我的电脑是双显卡，这时候其实依然是 intel 集成显卡在工作，所以还要做下面的工作。</p>\n</li>\n</ol>\n<h3 id=\"四、设置默认-nvidia-显卡工作\"><a href=\"#四、设置默认-nvidia-显卡工作\" class=\"headerlink\" title=\"四、设置默认 nvidia 显卡工作\"></a>四、设置默认 nvidia 显卡工作</h3><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">lspci | egrep <span class=\"hljs-string\">&#x27;VGA|3D&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>执行上述命令获取 <code>nvidia</code> 显卡设备 <code>BusID</code>，例如: <code>01:00.0</code> 填写 <code>PCI:1:0:0</code>，</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111306609.png\" alt=\"20190922111306609\"></p>\n<p> 然后编辑 <code>/etc/X11/xorg.conf</code>，注意其中 PCI 部分填写 <code>PCI:1:0:0</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">Section <span class=\"hljs-string\">&quot;Module&quot;</span><br>    Load <span class=\"hljs-string\">&quot;modesetting&quot;</span><br>EndSection<br><br>Section <span class=\"hljs-string\">&quot;Device&quot;</span><br>    Identifier <span class=\"hljs-string\">&quot;nvidia&quot;</span><br>    Driver <span class=\"hljs-string\">&quot;nvidia&quot;</span><br>    BusID <span class=\"hljs-string\">&quot;PCI:X:X:X&quot;</span>       <br>    Option <span class=\"hljs-string\">&quot;AllowEmptyInitialConfiguration&quot;</span><br>EndSection<br></code></pre></td></tr></table></figure>\n<p>编辑<code>~/.xinitrc</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">xrandr --setprovideroutputsource modesetting NVIDIA-0<br>xrandr --auto<br>xrandr --dpi 96<br></code></pre></td></tr></table></figure>\n<p>编辑<code>/etc/lightdm/display_setup.sh</code>，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\"><span class=\"hljs-meta\">#!/bin/sh</span><br>xrandr --setprovideroutputsource modesetting NVIDIA-0<br>xrandr --auto<br>xrandr --dpi 96<br></code></pre></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">sudo chmod +x  /etc/lightdm/display_setup.sh<br></code></pre></td></tr></table></figure>\n<p>编辑 <code>/etc/lightdm/lightdm.conf</code> 在 <code>[Seat:*]</code> 行下添加，</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zsh\">display-setup-script=/etc/lightdm/display_setup.sh<br></code></pre></td></tr></table></figure>\n<p>重启动后，查看是否生效，<code>nvidia-smi</code></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111512515.png\" alt=\"20190922111512515\"></p>\n<p>发现已经生效。</p>\n"},{"title":"win10设置开机自启","date":"2019-05-25T02:45:27.000Z","_content":"刚开始接触 win10 的朋友肯定不知道在哪里把自己常用的软件设置成开机启动，因为你根本找不到前面的 xp、win7、win8，等里面的启动文件夹。\n\n## 工具 / 原料\n\n* win10 系统电脑一台\n\n## 方法 / 步骤\n\n1. 如果想要实现应用程序在所有的用户登录系统后都能自动启动，就把该应用程序的快捷方式放到 “系统启动文件夹” 里；\n    ![20190526103017-win10开始_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103017-win10开始_01%20.png)\n  \n2. 上面的方法有的朋友可能找不到路径，没有关系，你可以把上面的路径直接复制到地址栏里面打开即可。如下图\n    ![20190526103044-win10开始_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103044-win10开始_02%20.png)\n\n3. 同样也可以用系统命令来打开 “启动文件夹”。在运行里面输入：`shell:startup`\n    ![20190526103052-win10开始_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103052-win10开始_03%20.png)\n\n4. 或者输入：`%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`\n    ![20190526103102-win10开始_04](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103102-win10开始_04%20.png)\n\n5. 上面那种命令都可以打开系统启动文件夹的；同样，打开之后把要启动的软件放进去即可。\n","source":"_posts/系统-win10设置开机自启.md","raw":"---\ntitle: win10设置开机自启\ncategories:\n  - 系统\n  - Windows\ntags:\n  - 开机自启\ndate: 2019-05-25 10:45:27\n---\n刚开始接触 win10 的朋友肯定不知道在哪里把自己常用的软件设置成开机启动，因为你根本找不到前面的 xp、win7、win8，等里面的启动文件夹。\n\n## 工具 / 原料\n\n* win10 系统电脑一台\n\n## 方法 / 步骤\n\n1. 如果想要实现应用程序在所有的用户登录系统后都能自动启动，就把该应用程序的快捷方式放到 “系统启动文件夹” 里；\n    ![20190526103017-win10开始_01](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103017-win10开始_01%20.png)\n  \n2. 上面的方法有的朋友可能找不到路径，没有关系，你可以把上面的路径直接复制到地址栏里面打开即可。如下图\n    ![20190526103044-win10开始_02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103044-win10开始_02%20.png)\n\n3. 同样也可以用系统命令来打开 “启动文件夹”。在运行里面输入：`shell:startup`\n    ![20190526103052-win10开始_03](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103052-win10开始_03%20.png)\n\n4. 或者输入：`%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`\n    ![20190526103102-win10开始_04](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103102-win10开始_04%20.png)\n\n5. 上面那种命令都可以打开系统启动文件夹的；同样，打开之后把要启动的软件放进去即可。\n","slug":"系统-win10设置开机自启","published":1,"updated":"2021-01-21T07:06:56.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudw004ujjln1hwo5drm","content":"<p>刚开始接触 win10 的朋友肯定不知道在哪里把自己常用的软件设置成开机启动，因为你根本找不到前面的 xp、win7、win8，等里面的启动文件夹。</p>\n<h2 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具 / 原料\"></a>工具 / 原料</h2><ul>\n<li>win10 系统电脑一台</li>\n</ul>\n<h2 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法 / 步骤\"></a>方法 / 步骤</h2><ol>\n<li><p>如果想要实现应用程序在所有的用户登录系统后都能自动启动，就把该应用程序的快捷方式放到 “系统启动文件夹” 里；<br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103017-win10%E5%BC%80%E5%A7%8B_01%20.png\" alt=\"20190526103017-win10开始_01\"></p>\n</li>\n<li><p>上面的方法有的朋友可能找不到路径，没有关系，你可以把上面的路径直接复制到地址栏里面打开即可。如下图<br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103044-win10%E5%BC%80%E5%A7%8B_02%20.png\" alt=\"20190526103044-win10开始_02\"></p>\n</li>\n<li><p>同样也可以用系统命令来打开 “启动文件夹”。在运行里面输入：<code>shell:startup</code><br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103052-win10%E5%BC%80%E5%A7%8B_03%20.png\" alt=\"20190526103052-win10开始_03\"></p>\n</li>\n<li><p>或者输入：<code>%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code><br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103102-win10%E5%BC%80%E5%A7%8B_04%20.png\" alt=\"20190526103102-win10开始_04\"></p>\n</li>\n<li><p>上面那种命令都可以打开系统启动文件夹的；同样，打开之后把要启动的软件放进去即可。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始接触 win10 的朋友肯定不知道在哪里把自己常用的软件设置成开机启动，因为你根本找不到前面的 xp、win7、win8，等里面的启动文件夹。</p>\n<h2 id=\"工具-原料\"><a href=\"#工具-原料\" class=\"headerlink\" title=\"工具 / 原料\"></a>工具 / 原料</h2><ul>\n<li>win10 系统电脑一台</li>\n</ul>\n<h2 id=\"方法-步骤\"><a href=\"#方法-步骤\" class=\"headerlink\" title=\"方法 / 步骤\"></a>方法 / 步骤</h2><ol>\n<li><p>如果想要实现应用程序在所有的用户登录系统后都能自动启动，就把该应用程序的快捷方式放到 “系统启动文件夹” 里；<br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103017-win10%E5%BC%80%E5%A7%8B_01%20.png\" alt=\"20190526103017-win10开始_01\"></p>\n</li>\n<li><p>上面的方法有的朋友可能找不到路径，没有关系，你可以把上面的路径直接复制到地址栏里面打开即可。如下图<br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103044-win10%E5%BC%80%E5%A7%8B_02%20.png\" alt=\"20190526103044-win10开始_02\"></p>\n</li>\n<li><p>同样也可以用系统命令来打开 “启动文件夹”。在运行里面输入：<code>shell:startup</code><br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103052-win10%E5%BC%80%E5%A7%8B_03%20.png\" alt=\"20190526103052-win10开始_03\"></p>\n</li>\n<li><p>或者输入：<code>%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code><br> <img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103102-win10%E5%BC%80%E5%A7%8B_04%20.png\" alt=\"20190526103102-win10开始_04\"></p>\n</li>\n<li><p>上面那种命令都可以打开系统启动文件夹的；同样，打开之后把要启动的软件放进去即可。</p>\n</li>\n</ol>\n"},{"title":"01—了解web及网络基础","date":"2019-05-09T11:54:09.000Z","_content":"\nHTTP 的出现主要是为了解决文本传输的难题\n\n## TCP/IP 协议族：\n\n是互联网相关的各类协议族的总称\n\n重要的一点是**分层**: 应用层、传输层、网络层、数据链路层\n\n层次化的优点：\n1、修改某个地方只用改相应的层\n2、设计变简单，各层管理自己的职责\n\n### 分层管理\n\n**应用层**：决定向用户提供应用服务时通信的活动，\n`FTP(File Transfer Protocol)` 文件传输协议、`DNS`(`Domain Name System`) 域名系统、`HTTP`(`HyperText Transfer Protocol`)\n**传输层**：提供处于网络连接中两台计算机之间的数据传输。\n`TCP`(`Transmission Control Protocol`) 传输控制协议、`UDP`(`User Data Protocol`) 用户数据报协议\n**网络层（网络互联层）**：处理在网络上流动的数据包（数据包是网络传输的最小数据单位）。该层规定了通过怎样的路径（传输路线）到达对方计算机，并传递数据。作用就是在与对方计算机之间通过多台计算机或网络设备进行传输时，选择一条传输路线。\n**链路层（数据链路层、网络接口层）**：用来处理网络的硬件部分。包括控制操作系统、硬件设备驱动、`NIC`（`Network Interface Card`，网络适配器）、光纤等物理课件部分（连接器等一切传输媒介）。\n\n### 通信传输流\n\n![20190526110342-HTTP-传输过程](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110342-HTTP-传输过程%20.png)\n\n  应用发请求通过 `TCP` 处理报文进行分隔发送给网络层网络层增加 `MAC` 地址给链路, 之后反向操作, 请求数据的时候每一层处理完成后会给这个数据加上这个层的首部信息, 相反, 处理请求的时候, 每处理一层就删除一个首部, 这叫做数据信息的封装 (`encapsulate`)。\n\n![20190526110348-HTTP-传输过程02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110348-HTTP-传输过程02%20.png)\n\n## IP、TCP 和 DNS\n\n### IP 协议：\n\n`IP`（`Internet Protocol`）网络协议处于网络层。几乎所有使用网络的系统都会用到 `IP` 协议。`IP` 不是 `IP` 地址，`IP` 只是一种协议名称。\n\n- 作用：把各种数据包传给对方，保证能传送到达需要多种条件，其中最重要的是 `IP` 地址和 `MAC`（`Media Access Control Address`) 地址。\n\n- `IP` 地址：指明节点被分配到的地址\n\n- `MAC` 地址： 网卡所属的固定地址\n\n-  `IP` 地址可以和 `MAC` 地址进行配对，`IP` 可变，但 `MAC` 基本不会更改。\n\n    不同局域网之间的通信需要经过多次中转，在中转时会利用下一站中转设备的 `MAC` 地址来搜索下一个中转目标，这时会采用 `ARP` 协议（`Addres s Resolution Protocol`)，这是用于解析地址的协议，可以根据对方 `IP` 地址就能反查处对应的 `MAC` 地址。\n      信息传输的时候，并不是从一开始就设计好精确的路线，而是边走边瞧，到下一个中转点会自动判断下一个中转点，这叫做路由选择（`routing`）\n\n![20190526110449-IP处理](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110449-IP处理%20.png)\n\n### TCP 协议\n\n按层次位于传输层, 提供可靠的字节流服务 (`Byte Stream Service`), 意思是为了方便传输, 将大块数据分割成以报文段(`segment`) 为单位的数据包进行管理可靠的传输服务是指，能够把数据准确可靠的传给对方。\n\n> 如何确保数据到达目标\n\n####   三次握手（`three—way handshaking`）策略\n\n![20190526110500-三次握手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110500-三次握手%20.png)\n\n- 发送端先发送一个带有 `SYN`（`synchronize` 同步）标识的数据包给对方\n- 对方接收到后回传一个带有  `SYN`/`ACK`（`acknowledgement`)标识的数据包已传达确认信息\n- 最后发送端再传回一个带有 `ACK` 标识的数据包代表 “握手” 结束。\n- 若期间在某个过程莫名中断, `TCP` 协议会在此以相同顺序发送相同数据包。\n\n### DNS 服务\n\n  `DNS` 服务是和 `HTTP` 一样位于应用层, 提供`域名`到 `IP` 地址之间的解析服务。\n 计算机可以有 `IP` 地址, 又可以有主机名和域名。比如可以使用 [www.baidu.com](http://www.baidu.com) 访问百度，也可以使用 `119.75.217.109` 访问百度。`DNS` 协议就是可以查询其对应关系的协议。\n\n![20190526110337-DNS解析](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110337-DNS解析%20.png)\n\n### 各种协议与 HTTP 协议的关系\n\n  客户端发出对某 `www.` 网站的请求, 通过 `DNS` 协议获取对应的 `IP` 地址, 在通过 `HTTP` 协议生成请求报文, 通过 `TCP` 进行分隔划分成数据包, 通过三次握手把每个报文段可靠的传给对方, 再通过 `IP` 协议分配 `IP` 地址和 `MAC` 地址, 一遍中转一遍传送, 对方通过 `IP` 协议接收一段段报文, 通过 `TCP` 协议再一段段重组, 在通过 `HTTP` 协议对这些内容进行处理请求信息, 把请求结果再像上边的过程走回客户端。一次完整的传输就结束了。\n\n![20190526110506-协议关系](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110506-协议关系%20.png)\n\n## URI 和 URL\n\n- `URL`（`Uniform` `Resource` `Locator`) 统一资源定位符，就是 `Web` 浏览器访问 `web` 页面时候的网页地址，[http://www.baidu.com](http://www.baidu.com)\n-  `URI`（`Uniform` `Resource` `Identifier`) 统一资源标识符\n- _`Uniform`_ 规定统一格式可方便处理多种不同类型资源。\n- _`Resouce`_ 资源定义是 “可标识的任何东西”。\n- _`Identifier`_ 可标识的对象。也称作标识符。\n\n  综上，`URI` 就是由某协议方案表示的资源的定位标识符，其中，访问资源所使用的协议类型， `HTTP` 协议时，协议方案就是 `http`，除此还有 `ftp`、`mailto`、`telent`、`file` 等。\n  `URI` 用字符串标识某一互联网资源，`URL` 表示资源的地点，可见 `URL` 是 `URI` 的子集。\n\n### URI 格式 \n\n绝对 `URI` 格式：\n\n![20190526110455-URI格式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110455-URI格式%20.png)\n\n可选项：登录信息、服务器端口号、查询字符串、片段标识符\n\n## 自我回顾\n\n1、`HTTP`、`TCP`/`IP`、`DNS`、`URL`、`URI` 分别是什么?\n2、`TCP`/`IP` 协议为什么进行分层管理，又分为哪些层?\n3、客户端到服务端的请求过程是什么?\n4、三次握手怎么进行的?\n5、各个协议的关系是什么？\n\n**_注： 本文图片均来自《图解 HTTP》一书_**","source":"_posts/网络通信-01_了解 Web 及网络基础.md","raw":"---\ntitle: 01—了解web及网络基础\ncategories:\n  - 技术\n  - 网络通信\n  - TCP\ntags:\n  - HTTP\n  - TCP\ndate: 2019-05-09 19:54:09\n---\n\nHTTP 的出现主要是为了解决文本传输的难题\n\n## TCP/IP 协议族：\n\n是互联网相关的各类协议族的总称\n\n重要的一点是**分层**: 应用层、传输层、网络层、数据链路层\n\n层次化的优点：\n1、修改某个地方只用改相应的层\n2、设计变简单，各层管理自己的职责\n\n### 分层管理\n\n**应用层**：决定向用户提供应用服务时通信的活动，\n`FTP(File Transfer Protocol)` 文件传输协议、`DNS`(`Domain Name System`) 域名系统、`HTTP`(`HyperText Transfer Protocol`)\n**传输层**：提供处于网络连接中两台计算机之间的数据传输。\n`TCP`(`Transmission Control Protocol`) 传输控制协议、`UDP`(`User Data Protocol`) 用户数据报协议\n**网络层（网络互联层）**：处理在网络上流动的数据包（数据包是网络传输的最小数据单位）。该层规定了通过怎样的路径（传输路线）到达对方计算机，并传递数据。作用就是在与对方计算机之间通过多台计算机或网络设备进行传输时，选择一条传输路线。\n**链路层（数据链路层、网络接口层）**：用来处理网络的硬件部分。包括控制操作系统、硬件设备驱动、`NIC`（`Network Interface Card`，网络适配器）、光纤等物理课件部分（连接器等一切传输媒介）。\n\n### 通信传输流\n\n![20190526110342-HTTP-传输过程](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110342-HTTP-传输过程%20.png)\n\n  应用发请求通过 `TCP` 处理报文进行分隔发送给网络层网络层增加 `MAC` 地址给链路, 之后反向操作, 请求数据的时候每一层处理完成后会给这个数据加上这个层的首部信息, 相反, 处理请求的时候, 每处理一层就删除一个首部, 这叫做数据信息的封装 (`encapsulate`)。\n\n![20190526110348-HTTP-传输过程02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110348-HTTP-传输过程02%20.png)\n\n## IP、TCP 和 DNS\n\n### IP 协议：\n\n`IP`（`Internet Protocol`）网络协议处于网络层。几乎所有使用网络的系统都会用到 `IP` 协议。`IP` 不是 `IP` 地址，`IP` 只是一种协议名称。\n\n- 作用：把各种数据包传给对方，保证能传送到达需要多种条件，其中最重要的是 `IP` 地址和 `MAC`（`Media Access Control Address`) 地址。\n\n- `IP` 地址：指明节点被分配到的地址\n\n- `MAC` 地址： 网卡所属的固定地址\n\n-  `IP` 地址可以和 `MAC` 地址进行配对，`IP` 可变，但 `MAC` 基本不会更改。\n\n    不同局域网之间的通信需要经过多次中转，在中转时会利用下一站中转设备的 `MAC` 地址来搜索下一个中转目标，这时会采用 `ARP` 协议（`Addres s Resolution Protocol`)，这是用于解析地址的协议，可以根据对方 `IP` 地址就能反查处对应的 `MAC` 地址。\n      信息传输的时候，并不是从一开始就设计好精确的路线，而是边走边瞧，到下一个中转点会自动判断下一个中转点，这叫做路由选择（`routing`）\n\n![20190526110449-IP处理](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110449-IP处理%20.png)\n\n### TCP 协议\n\n按层次位于传输层, 提供可靠的字节流服务 (`Byte Stream Service`), 意思是为了方便传输, 将大块数据分割成以报文段(`segment`) 为单位的数据包进行管理可靠的传输服务是指，能够把数据准确可靠的传给对方。\n\n> 如何确保数据到达目标\n\n####   三次握手（`three—way handshaking`）策略\n\n![20190526110500-三次握手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110500-三次握手%20.png)\n\n- 发送端先发送一个带有 `SYN`（`synchronize` 同步）标识的数据包给对方\n- 对方接收到后回传一个带有  `SYN`/`ACK`（`acknowledgement`)标识的数据包已传达确认信息\n- 最后发送端再传回一个带有 `ACK` 标识的数据包代表 “握手” 结束。\n- 若期间在某个过程莫名中断, `TCP` 协议会在此以相同顺序发送相同数据包。\n\n### DNS 服务\n\n  `DNS` 服务是和 `HTTP` 一样位于应用层, 提供`域名`到 `IP` 地址之间的解析服务。\n 计算机可以有 `IP` 地址, 又可以有主机名和域名。比如可以使用 [www.baidu.com](http://www.baidu.com) 访问百度，也可以使用 `119.75.217.109` 访问百度。`DNS` 协议就是可以查询其对应关系的协议。\n\n![20190526110337-DNS解析](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110337-DNS解析%20.png)\n\n### 各种协议与 HTTP 协议的关系\n\n  客户端发出对某 `www.` 网站的请求, 通过 `DNS` 协议获取对应的 `IP` 地址, 在通过 `HTTP` 协议生成请求报文, 通过 `TCP` 进行分隔划分成数据包, 通过三次握手把每个报文段可靠的传给对方, 再通过 `IP` 协议分配 `IP` 地址和 `MAC` 地址, 一遍中转一遍传送, 对方通过 `IP` 协议接收一段段报文, 通过 `TCP` 协议再一段段重组, 在通过 `HTTP` 协议对这些内容进行处理请求信息, 把请求结果再像上边的过程走回客户端。一次完整的传输就结束了。\n\n![20190526110506-协议关系](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110506-协议关系%20.png)\n\n## URI 和 URL\n\n- `URL`（`Uniform` `Resource` `Locator`) 统一资源定位符，就是 `Web` 浏览器访问 `web` 页面时候的网页地址，[http://www.baidu.com](http://www.baidu.com)\n-  `URI`（`Uniform` `Resource` `Identifier`) 统一资源标识符\n- _`Uniform`_ 规定统一格式可方便处理多种不同类型资源。\n- _`Resouce`_ 资源定义是 “可标识的任何东西”。\n- _`Identifier`_ 可标识的对象。也称作标识符。\n\n  综上，`URI` 就是由某协议方案表示的资源的定位标识符，其中，访问资源所使用的协议类型， `HTTP` 协议时，协议方案就是 `http`，除此还有 `ftp`、`mailto`、`telent`、`file` 等。\n  `URI` 用字符串标识某一互联网资源，`URL` 表示资源的地点，可见 `URL` 是 `URI` 的子集。\n\n### URI 格式 \n\n绝对 `URI` 格式：\n\n![20190526110455-URI格式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110455-URI格式%20.png)\n\n可选项：登录信息、服务器端口号、查询字符串、片段标识符\n\n## 自我回顾\n\n1、`HTTP`、`TCP`/`IP`、`DNS`、`URL`、`URI` 分别是什么?\n2、`TCP`/`IP` 协议为什么进行分层管理，又分为哪些层?\n3、客户端到服务端的请求过程是什么?\n4、三次握手怎么进行的?\n5、各个协议的关系是什么？\n\n**_注： 本文图片均来自《图解 HTTP》一书_**","slug":"网络通信-01_了解 Web 及网络基础","published":1,"updated":"2021-01-25T02:59:28.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudw004wjjln511l27jx","content":"<p>HTTP 的出现主要是为了解决文本传输的难题</p>\n<h2 id=\"TCP-IP-协议族：\"><a href=\"#TCP-IP-协议族：\" class=\"headerlink\" title=\"TCP/IP 协议族：\"></a>TCP/IP 协议族：</h2><p>是互联网相关的各类协议族的总称</p>\n<p>重要的一点是<strong>分层</strong>: 应用层、传输层、网络层、数据链路层</p>\n<p>层次化的优点：<br>1、修改某个地方只用改相应的层<br>2、设计变简单，各层管理自己的职责</p>\n<h3 id=\"分层管理\"><a href=\"#分层管理\" class=\"headerlink\" title=\"分层管理\"></a>分层管理</h3><p><strong>应用层</strong>：决定向用户提供应用服务时通信的活动，<br><code>FTP(File Transfer Protocol)</code> 文件传输协议、<code>DNS</code>(<code>Domain Name System</code>) 域名系统、<code>HTTP</code>(<code>HyperText Transfer Protocol</code>)<br><strong>传输层</strong>：提供处于网络连接中两台计算机之间的数据传输。<br><code>TCP</code>(<code>Transmission Control Protocol</code>) 传输控制协议、<code>UDP</code>(<code>User Data Protocol</code>) 用户数据报协议<br><strong>网络层（网络互联层）</strong>：处理在网络上流动的数据包（数据包是网络传输的最小数据单位）。该层规定了通过怎样的路径（传输路线）到达对方计算机，并传递数据。作用就是在与对方计算机之间通过多台计算机或网络设备进行传输时，选择一条传输路线。<br><strong>链路层（数据链路层、网络接口层）</strong>：用来处理网络的硬件部分。包括控制操作系统、硬件设备驱动、<code>NIC</code>（<code>Network Interface Card</code>，网络适配器）、光纤等物理课件部分（连接器等一切传输媒介）。</p>\n<h3 id=\"通信传输流\"><a href=\"#通信传输流\" class=\"headerlink\" title=\"通信传输流\"></a>通信传输流</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110342-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%20.png\" alt=\"20190526110342-HTTP-传输过程\"></p>\n<p>  应用发请求通过 <code>TCP</code> 处理报文进行分隔发送给网络层网络层增加 <code>MAC</code> 地址给链路, 之后反向操作, 请求数据的时候每一层处理完成后会给这个数据加上这个层的首部信息, 相反, 处理请求的时候, 每处理一层就删除一个首部, 这叫做数据信息的封装 (<code>encapsulate</code>)。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110348-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B02%20.png\" alt=\"20190526110348-HTTP-传输过程02\"></p>\n<h2 id=\"IP、TCP-和-DNS\"><a href=\"#IP、TCP-和-DNS\" class=\"headerlink\" title=\"IP、TCP 和 DNS\"></a>IP、TCP 和 DNS</h2><h3 id=\"IP-协议：\"><a href=\"#IP-协议：\" class=\"headerlink\" title=\"IP 协议：\"></a>IP 协议：</h3><p><code>IP</code>（<code>Internet Protocol</code>）网络协议处于网络层。几乎所有使用网络的系统都会用到 <code>IP</code> 协议。<code>IP</code> 不是 <code>IP</code> 地址，<code>IP</code> 只是一种协议名称。</p>\n<ul>\n<li><p>作用：把各种数据包传给对方，保证能传送到达需要多种条件，其中最重要的是 <code>IP</code> 地址和 <code>MAC</code>（<code>Media Access Control Address</code>) 地址。</p>\n</li>\n<li><p><code>IP</code> 地址：指明节点被分配到的地址</p>\n</li>\n<li><p><code>MAC</code> 地址： 网卡所属的固定地址</p>\n</li>\n<li><p><code>IP</code> 地址可以和 <code>MAC</code> 地址进行配对，<code>IP</code> 可变，但 <code>MAC</code> 基本不会更改。</p>\n<p>  不同局域网之间的通信需要经过多次中转，在中转时会利用下一站中转设备的 <code>MAC</code> 地址来搜索下一个中转目标，这时会采用 <code>ARP</code> 协议（<code>Addres s Resolution Protocol</code>)，这是用于解析地址的协议，可以根据对方 <code>IP</code> 地址就能反查处对应的 <code>MAC</code> 地址。<br>   信息传输的时候，并不是从一开始就设计好精确的路线，而是边走边瞧，到下一个中转点会自动判断下一个中转点，这叫做路由选择（<code>routing</code>）</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110449-IP%E5%A4%84%E7%90%86%20.png\" alt=\"20190526110449-IP处理\"></p>\n<h3 id=\"TCP-协议\"><a href=\"#TCP-协议\" class=\"headerlink\" title=\"TCP 协议\"></a>TCP 协议</h3><p>按层次位于传输层, 提供可靠的字节流服务 (<code>Byte Stream Service</code>), 意思是为了方便传输, 将大块数据分割成以报文段(<code>segment</code>) 为单位的数据包进行管理可靠的传输服务是指，能够把数据准确可靠的传给对方。</p>\n<blockquote>\n<p>如何确保数据到达目标</p>\n</blockquote>\n<h4 id=\"三次握手（three—way-handshaking）策略\"><a href=\"#三次握手（three—way-handshaking）策略\" class=\"headerlink\" title=\"  三次握手（three—way handshaking）策略\"></a>  三次握手（<code>three—way handshaking</code>）策略</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110500-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20.png\" alt=\"20190526110500-三次握手\"></p>\n<ul>\n<li>发送端先发送一个带有 <code>SYN</code>（<code>synchronize</code> 同步）标识的数据包给对方</li>\n<li>对方接收到后回传一个带有  <code>SYN</code>/<code>ACK</code>（<code>acknowledgement</code>)标识的数据包已传达确认信息</li>\n<li>最后发送端再传回一个带有 <code>ACK</code> 标识的数据包代表 “握手” 结束。</li>\n<li>若期间在某个过程莫名中断, <code>TCP</code> 协议会在此以相同顺序发送相同数据包。</li>\n</ul>\n<h3 id=\"DNS-服务\"><a href=\"#DNS-服务\" class=\"headerlink\" title=\"DNS 服务\"></a>DNS 服务</h3><p>  <code>DNS</code> 服务是和 <code>HTTP</code> 一样位于应用层, 提供<code>域名</code>到 <code>IP</code> 地址之间的解析服务。<br> 计算机可以有 <code>IP</code> 地址, 又可以有主机名和域名。比如可以使用 <a href=\"http://www.baidu.com\">www.baidu.com</a> 访问百度，也可以使用 <code>119.75.217.109</code> 访问百度。<code>DNS</code> 协议就是可以查询其对应关系的协议。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110337-DNS%E8%A7%A3%E6%9E%90%20.png\" alt=\"20190526110337-DNS解析\"></p>\n<h3 id=\"各种协议与-HTTP-协议的关系\"><a href=\"#各种协议与-HTTP-协议的关系\" class=\"headerlink\" title=\"各种协议与 HTTP 协议的关系\"></a>各种协议与 HTTP 协议的关系</h3><p>  客户端发出对某 <code>www.</code> 网站的请求, 通过 <code>DNS</code> 协议获取对应的 <code>IP</code> 地址, 在通过 <code>HTTP</code> 协议生成请求报文, 通过 <code>TCP</code> 进行分隔划分成数据包, 通过三次握手把每个报文段可靠的传给对方, 再通过 <code>IP</code> 协议分配 <code>IP</code> 地址和 <code>MAC</code> 地址, 一遍中转一遍传送, 对方通过 <code>IP</code> 协议接收一段段报文, 通过 <code>TCP</code> 协议再一段段重组, 在通过 <code>HTTP</code> 协议对这些内容进行处理请求信息, 把请求结果再像上边的过程走回客户端。一次完整的传输就结束了。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110506-%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%20.png\" alt=\"20190526110506-协议关系\"></p>\n<h2 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h2><ul>\n<li><code>URL</code>（<code>Uniform</code> <code>Resource</code> <code>Locator</code>) 统一资源定位符，就是 <code>Web</code> 浏览器访问 <code>web</code> 页面时候的网页地址，<a href=\"http://www.baidu.com\">http://www.baidu.com</a></li>\n<li><code>URI</code>（<code>Uniform</code> <code>Resource</code> <code>Identifier</code>) 统一资源标识符</li>\n<li><em><code>Uniform</code></em> 规定统一格式可方便处理多种不同类型资源。</li>\n<li><em><code>Resouce</code></em> 资源定义是 “可标识的任何东西”。</li>\n<li><em><code>Identifier</code></em> 可标识的对象。也称作标识符。</li>\n</ul>\n<p>  综上，<code>URI</code> 就是由某协议方案表示的资源的定位标识符，其中，访问资源所使用的协议类型， <code>HTTP</code> 协议时，协议方案就是 <code>http</code>，除此还有 <code>ftp</code>、<code>mailto</code>、<code>telent</code>、<code>file</code> 等。<br>  <code>URI</code> 用字符串标识某一互联网资源，<code>URL</code> 表示资源的地点，可见 <code>URL</code> 是 <code>URI</code> 的子集。</p>\n<h3 id=\"URI-格式\"><a href=\"#URI-格式\" class=\"headerlink\" title=\"URI 格式\"></a>URI 格式</h3><p>绝对 <code>URI</code> 格式：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110455-URI%E6%A0%BC%E5%BC%8F%20.png\" alt=\"20190526110455-URI格式\"></p>\n<p>可选项：登录信息、服务器端口号、查询字符串、片段标识符</p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、<code>HTTP</code>、<code>TCP</code>/<code>IP</code>、<code>DNS</code>、<code>URL</code>、<code>URI</code> 分别是什么?<br>2、<code>TCP</code>/<code>IP</code> 协议为什么进行分层管理，又分为哪些层?<br>3、客户端到服务端的请求过程是什么?<br>4、三次握手怎么进行的?<br>5、各个协议的关系是什么？</p>\n<p><strong><em>注： 本文图片均来自《图解 HTTP》一书</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP 的出现主要是为了解决文本传输的难题</p>\n<h2 id=\"TCP-IP-协议族：\"><a href=\"#TCP-IP-协议族：\" class=\"headerlink\" title=\"TCP/IP 协议族：\"></a>TCP/IP 协议族：</h2><p>是互联网相关的各类协议族的总称</p>\n<p>重要的一点是<strong>分层</strong>: 应用层、传输层、网络层、数据链路层</p>\n<p>层次化的优点：<br>1、修改某个地方只用改相应的层<br>2、设计变简单，各层管理自己的职责</p>\n<h3 id=\"分层管理\"><a href=\"#分层管理\" class=\"headerlink\" title=\"分层管理\"></a>分层管理</h3><p><strong>应用层</strong>：决定向用户提供应用服务时通信的活动，<br><code>FTP(File Transfer Protocol)</code> 文件传输协议、<code>DNS</code>(<code>Domain Name System</code>) 域名系统、<code>HTTP</code>(<code>HyperText Transfer Protocol</code>)<br><strong>传输层</strong>：提供处于网络连接中两台计算机之间的数据传输。<br><code>TCP</code>(<code>Transmission Control Protocol</code>) 传输控制协议、<code>UDP</code>(<code>User Data Protocol</code>) 用户数据报协议<br><strong>网络层（网络互联层）</strong>：处理在网络上流动的数据包（数据包是网络传输的最小数据单位）。该层规定了通过怎样的路径（传输路线）到达对方计算机，并传递数据。作用就是在与对方计算机之间通过多台计算机或网络设备进行传输时，选择一条传输路线。<br><strong>链路层（数据链路层、网络接口层）</strong>：用来处理网络的硬件部分。包括控制操作系统、硬件设备驱动、<code>NIC</code>（<code>Network Interface Card</code>，网络适配器）、光纤等物理课件部分（连接器等一切传输媒介）。</p>\n<h3 id=\"通信传输流\"><a href=\"#通信传输流\" class=\"headerlink\" title=\"通信传输流\"></a>通信传输流</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110342-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%20.png\" alt=\"20190526110342-HTTP-传输过程\"></p>\n<p>  应用发请求通过 <code>TCP</code> 处理报文进行分隔发送给网络层网络层增加 <code>MAC</code> 地址给链路, 之后反向操作, 请求数据的时候每一层处理完成后会给这个数据加上这个层的首部信息, 相反, 处理请求的时候, 每处理一层就删除一个首部, 这叫做数据信息的封装 (<code>encapsulate</code>)。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110348-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B02%20.png\" alt=\"20190526110348-HTTP-传输过程02\"></p>\n<h2 id=\"IP、TCP-和-DNS\"><a href=\"#IP、TCP-和-DNS\" class=\"headerlink\" title=\"IP、TCP 和 DNS\"></a>IP、TCP 和 DNS</h2><h3 id=\"IP-协议：\"><a href=\"#IP-协议：\" class=\"headerlink\" title=\"IP 协议：\"></a>IP 协议：</h3><p><code>IP</code>（<code>Internet Protocol</code>）网络协议处于网络层。几乎所有使用网络的系统都会用到 <code>IP</code> 协议。<code>IP</code> 不是 <code>IP</code> 地址，<code>IP</code> 只是一种协议名称。</p>\n<ul>\n<li><p>作用：把各种数据包传给对方，保证能传送到达需要多种条件，其中最重要的是 <code>IP</code> 地址和 <code>MAC</code>（<code>Media Access Control Address</code>) 地址。</p>\n</li>\n<li><p><code>IP</code> 地址：指明节点被分配到的地址</p>\n</li>\n<li><p><code>MAC</code> 地址： 网卡所属的固定地址</p>\n</li>\n<li><p><code>IP</code> 地址可以和 <code>MAC</code> 地址进行配对，<code>IP</code> 可变，但 <code>MAC</code> 基本不会更改。</p>\n<p>  不同局域网之间的通信需要经过多次中转，在中转时会利用下一站中转设备的 <code>MAC</code> 地址来搜索下一个中转目标，这时会采用 <code>ARP</code> 协议（<code>Addres s Resolution Protocol</code>)，这是用于解析地址的协议，可以根据对方 <code>IP</code> 地址就能反查处对应的 <code>MAC</code> 地址。<br>   信息传输的时候，并不是从一开始就设计好精确的路线，而是边走边瞧，到下一个中转点会自动判断下一个中转点，这叫做路由选择（<code>routing</code>）</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110449-IP%E5%A4%84%E7%90%86%20.png\" alt=\"20190526110449-IP处理\"></p>\n<h3 id=\"TCP-协议\"><a href=\"#TCP-协议\" class=\"headerlink\" title=\"TCP 协议\"></a>TCP 协议</h3><p>按层次位于传输层, 提供可靠的字节流服务 (<code>Byte Stream Service</code>), 意思是为了方便传输, 将大块数据分割成以报文段(<code>segment</code>) 为单位的数据包进行管理可靠的传输服务是指，能够把数据准确可靠的传给对方。</p>\n<blockquote>\n<p>如何确保数据到达目标</p>\n</blockquote>\n<h4 id=\"三次握手（three—way-handshaking）策略\"><a href=\"#三次握手（three—way-handshaking）策略\" class=\"headerlink\" title=\"  三次握手（three—way handshaking）策略\"></a>  三次握手（<code>three—way handshaking</code>）策略</h4><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110500-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20.png\" alt=\"20190526110500-三次握手\"></p>\n<ul>\n<li>发送端先发送一个带有 <code>SYN</code>（<code>synchronize</code> 同步）标识的数据包给对方</li>\n<li>对方接收到后回传一个带有  <code>SYN</code>/<code>ACK</code>（<code>acknowledgement</code>)标识的数据包已传达确认信息</li>\n<li>最后发送端再传回一个带有 <code>ACK</code> 标识的数据包代表 “握手” 结束。</li>\n<li>若期间在某个过程莫名中断, <code>TCP</code> 协议会在此以相同顺序发送相同数据包。</li>\n</ul>\n<h3 id=\"DNS-服务\"><a href=\"#DNS-服务\" class=\"headerlink\" title=\"DNS 服务\"></a>DNS 服务</h3><p>  <code>DNS</code> 服务是和 <code>HTTP</code> 一样位于应用层, 提供<code>域名</code>到 <code>IP</code> 地址之间的解析服务。<br> 计算机可以有 <code>IP</code> 地址, 又可以有主机名和域名。比如可以使用 <a href=\"http://www.baidu.com\">www.baidu.com</a> 访问百度，也可以使用 <code>119.75.217.109</code> 访问百度。<code>DNS</code> 协议就是可以查询其对应关系的协议。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110337-DNS%E8%A7%A3%E6%9E%90%20.png\" alt=\"20190526110337-DNS解析\"></p>\n<h3 id=\"各种协议与-HTTP-协议的关系\"><a href=\"#各种协议与-HTTP-协议的关系\" class=\"headerlink\" title=\"各种协议与 HTTP 协议的关系\"></a>各种协议与 HTTP 协议的关系</h3><p>  客户端发出对某 <code>www.</code> 网站的请求, 通过 <code>DNS</code> 协议获取对应的 <code>IP</code> 地址, 在通过 <code>HTTP</code> 协议生成请求报文, 通过 <code>TCP</code> 进行分隔划分成数据包, 通过三次握手把每个报文段可靠的传给对方, 再通过 <code>IP</code> 协议分配 <code>IP</code> 地址和 <code>MAC</code> 地址, 一遍中转一遍传送, 对方通过 <code>IP</code> 协议接收一段段报文, 通过 <code>TCP</code> 协议再一段段重组, 在通过 <code>HTTP</code> 协议对这些内容进行处理请求信息, 把请求结果再像上边的过程走回客户端。一次完整的传输就结束了。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110506-%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%20.png\" alt=\"20190526110506-协议关系\"></p>\n<h2 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h2><ul>\n<li><code>URL</code>（<code>Uniform</code> <code>Resource</code> <code>Locator</code>) 统一资源定位符，就是 <code>Web</code> 浏览器访问 <code>web</code> 页面时候的网页地址，<a href=\"http://www.baidu.com\">http://www.baidu.com</a></li>\n<li><code>URI</code>（<code>Uniform</code> <code>Resource</code> <code>Identifier</code>) 统一资源标识符</li>\n<li><em><code>Uniform</code></em> 规定统一格式可方便处理多种不同类型资源。</li>\n<li><em><code>Resouce</code></em> 资源定义是 “可标识的任何东西”。</li>\n<li><em><code>Identifier</code></em> 可标识的对象。也称作标识符。</li>\n</ul>\n<p>  综上，<code>URI</code> 就是由某协议方案表示的资源的定位标识符，其中，访问资源所使用的协议类型， <code>HTTP</code> 协议时，协议方案就是 <code>http</code>，除此还有 <code>ftp</code>、<code>mailto</code>、<code>telent</code>、<code>file</code> 等。<br>  <code>URI</code> 用字符串标识某一互联网资源，<code>URL</code> 表示资源的地点，可见 <code>URL</code> 是 <code>URI</code> 的子集。</p>\n<h3 id=\"URI-格式\"><a href=\"#URI-格式\" class=\"headerlink\" title=\"URI 格式\"></a>URI 格式</h3><p>绝对 <code>URI</code> 格式：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110455-URI%E6%A0%BC%E5%BC%8F%20.png\" alt=\"20190526110455-URI格式\"></p>\n<p>可选项：登录信息、服务器端口号、查询字符串、片段标识符</p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、<code>HTTP</code>、<code>TCP</code>/<code>IP</code>、<code>DNS</code>、<code>URL</code>、<code>URI</code> 分别是什么?<br>2、<code>TCP</code>/<code>IP</code> 协议为什么进行分层管理，又分为哪些层?<br>3、客户端到服务端的请求过程是什么?<br>4、三次握手怎么进行的?<br>5、各个协议的关系是什么？</p>\n<p><strong><em>注： 本文图片均来自《图解 HTTP》一书</em></strong></p>\n"},{"title":"02-简单介绍 HTTP 协议结构","date":"2019-05-09T11:55:09.000Z","_content":"\n首先，应用 `HTTP` 协议时，必定有客户端和服务器端。\n其中，发起请求的是客户端，响应请求并返回的是服务端。\n\n## 1、请求报文\n\n请求报文是由请求方法、请求 `URI`、协议版本、可选的请求首部字段和内容实体构成的。\n\n![20190526111207-请求报文](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111207-请求报文%20.png)\n\n## 2、响应报文\n\n服务器以响应的形式返回处理结果。\n\n![20190526111215-响应报文](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111215-响应报文%20.png)\n\n`200 OK` 是状态码（`status` `code`）和 原因短语。\n下一行是创建相应的日期，是首部字段 (`header` `field`) 的一个属性。\n下一行是返回内容的总长度。\n下一行是返回内容的类型。\n空行后的是资源实体的主体内容。\n\n![20190526111221-响应报文02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111221-响应报文02%20.png)\n\n## 3、HTTP 是无状态（stateless）协议。\n\n  HTTP 自身不对请求和相应之间的通信状态进行保存，即不对发送过的请求或响应进行持久化处理。\n  这是为了更快地处理大量事务，确保协议的可伸缩性。\n  这一技术的**问题**就是当访问一家网站的多个页面时，无法保存其登陆状态，所以根据这一问题，引入了 `Cookie` 技术来管理状态。\n\n## 4、HTTP 方法\n\n  下面就简单介绍一下常用的几种方法，`GET`、`POST` 和 `HEAD` 除此之外的还有 `PUT`、`DELETE`、`OPTIONS`、`TRACE` 和 `CONNECT`，这些不太常用，所以不在这里赘述了。\n\n### `GET`\n\n  获取资源。请求已被 `URI` 识别的资源，就是经过服务器解析后返回的响应内容，文本就保持原样返回，如果是可执行程序，就返回结果。\n\n![20190526111129-GET方式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111129-GET方式%20.png)\n\n### `POST`\n\n  传输实体主体。\n\n![20190526111137-POST方式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111137-POST方式%20.png)\n\n### `HEAD`\n\n  获得报文首部。和 `GET` 一样，但是不返回主体部分，只用于确认 `URI` 的有效性和资源更新的日期等。\n\n![20190526111155-报文头](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111155-报文头%20.png)\n\n> **注意：**方法名区分大小写，注意要用**大写字母**。\n\n## 5、持久化连接\n\n  当请求的资源有很多时，会发生多次的 `TCP` 连接和断开过程，增加了通信量的开销。于是产生了持久链接（`HTTP` `Persistent` `connections`）。\n  **特点：** 只要任意一端没有明确提出断开连接，则保持 `TCP` 连接状态。\n\n![20190526111143-TCP链接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111143-TCP链接%20.png)\n\n## 6、管线化\n\n  持久化连接需要等待上一个发送请求得到响应之后才能发送下一个请求，但是管线化技术可以直接发送，这样就能同时并发发送多个请求。\n\n![20190526111200-管线化](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111200-管线化%20.png)\n\n## 7、Cookie\n\n  状态管理。为了解决 `HTTP` 的无状态，`Cookie` 技术通过在请求和响应报文中写入 `Cookie` 信息来控制客户端的状态。具体实现是 `Cookie` 根据响应报文内 `Set-Cookie` 的首部字段信息，通知客户端保存 `Cookie`，当下一次再像**该**服务器发送请求，客户端会自动在请求报文中添加 `Cookie` 值后发送。服务端发现客户端发送的 `Cookie` 后，回去检查对比记录，得到状态信息。\n\n![20190526111108-Cookie](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111108-Cookie%20.png)\n\n## 自我回顾\n\n1、请求报文、响应报文的基本组成？\n2、什么是无状态协议，怎么解决的？\n3、`HTTP` 的基本方法？分别有什么功能？\n4、为了加快资源访问速度出现了什么方法？","source":"_posts/网络通信-02_简单介绍 HTTP 协议结构.md","raw":"---\ntitle: 02-简单介绍 HTTP 协议结构\ncategories:\n  - 技术\n  - 网络通信\n  - TCP\ntags:\n  - HTTP\n  - TCP\ndate: 2019-05-09 19:55:09\n---\n\n首先，应用 `HTTP` 协议时，必定有客户端和服务器端。\n其中，发起请求的是客户端，响应请求并返回的是服务端。\n\n## 1、请求报文\n\n请求报文是由请求方法、请求 `URI`、协议版本、可选的请求首部字段和内容实体构成的。\n\n![20190526111207-请求报文](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111207-请求报文%20.png)\n\n## 2、响应报文\n\n服务器以响应的形式返回处理结果。\n\n![20190526111215-响应报文](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111215-响应报文%20.png)\n\n`200 OK` 是状态码（`status` `code`）和 原因短语。\n下一行是创建相应的日期，是首部字段 (`header` `field`) 的一个属性。\n下一行是返回内容的总长度。\n下一行是返回内容的类型。\n空行后的是资源实体的主体内容。\n\n![20190526111221-响应报文02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111221-响应报文02%20.png)\n\n## 3、HTTP 是无状态（stateless）协议。\n\n  HTTP 自身不对请求和相应之间的通信状态进行保存，即不对发送过的请求或响应进行持久化处理。\n  这是为了更快地处理大量事务，确保协议的可伸缩性。\n  这一技术的**问题**就是当访问一家网站的多个页面时，无法保存其登陆状态，所以根据这一问题，引入了 `Cookie` 技术来管理状态。\n\n## 4、HTTP 方法\n\n  下面就简单介绍一下常用的几种方法，`GET`、`POST` 和 `HEAD` 除此之外的还有 `PUT`、`DELETE`、`OPTIONS`、`TRACE` 和 `CONNECT`，这些不太常用，所以不在这里赘述了。\n\n### `GET`\n\n  获取资源。请求已被 `URI` 识别的资源，就是经过服务器解析后返回的响应内容，文本就保持原样返回，如果是可执行程序，就返回结果。\n\n![20190526111129-GET方式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111129-GET方式%20.png)\n\n### `POST`\n\n  传输实体主体。\n\n![20190526111137-POST方式](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111137-POST方式%20.png)\n\n### `HEAD`\n\n  获得报文首部。和 `GET` 一样，但是不返回主体部分，只用于确认 `URI` 的有效性和资源更新的日期等。\n\n![20190526111155-报文头](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111155-报文头%20.png)\n\n> **注意：**方法名区分大小写，注意要用**大写字母**。\n\n## 5、持久化连接\n\n  当请求的资源有很多时，会发生多次的 `TCP` 连接和断开过程，增加了通信量的开销。于是产生了持久链接（`HTTP` `Persistent` `connections`）。\n  **特点：** 只要任意一端没有明确提出断开连接，则保持 `TCP` 连接状态。\n\n![20190526111143-TCP链接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111143-TCP链接%20.png)\n\n## 6、管线化\n\n  持久化连接需要等待上一个发送请求得到响应之后才能发送下一个请求，但是管线化技术可以直接发送，这样就能同时并发发送多个请求。\n\n![20190526111200-管线化](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111200-管线化%20.png)\n\n## 7、Cookie\n\n  状态管理。为了解决 `HTTP` 的无状态，`Cookie` 技术通过在请求和响应报文中写入 `Cookie` 信息来控制客户端的状态。具体实现是 `Cookie` 根据响应报文内 `Set-Cookie` 的首部字段信息，通知客户端保存 `Cookie`，当下一次再像**该**服务器发送请求，客户端会自动在请求报文中添加 `Cookie` 值后发送。服务端发现客户端发送的 `Cookie` 后，回去检查对比记录，得到状态信息。\n\n![20190526111108-Cookie](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111108-Cookie%20.png)\n\n## 自我回顾\n\n1、请求报文、响应报文的基本组成？\n2、什么是无状态协议，怎么解决的？\n3、`HTTP` 的基本方法？分别有什么功能？\n4、为了加快资源访问速度出现了什么方法？","slug":"网络通信-02_简单介绍 HTTP 协议结构","published":1,"updated":"2021-01-21T07:07:03.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudy0050jjlngghb3iye","content":"<p>首先，应用 <code>HTTP</code> 协议时，必定有客户端和服务器端。<br>其中，发起请求的是客户端，响应请求并返回的是服务端。</p>\n<h2 id=\"1、请求报文\"><a href=\"#1、请求报文\" class=\"headerlink\" title=\"1、请求报文\"></a>1、请求报文</h2><p>请求报文是由请求方法、请求 <code>URI</code>、协议版本、可选的请求首部字段和内容实体构成的。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111207-%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%20.png\" alt=\"20190526111207-请求报文\"></p>\n<h2 id=\"2、响应报文\"><a href=\"#2、响应报文\" class=\"headerlink\" title=\"2、响应报文\"></a>2、响应报文</h2><p>服务器以响应的形式返回处理结果。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111215-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20.png\" alt=\"20190526111215-响应报文\"></p>\n<p><code>200 OK</code> 是状态码（<code>status</code> <code>code</code>）和 原因短语。<br>下一行是创建相应的日期，是首部字段 (<code>header</code> <code>field</code>) 的一个属性。<br>下一行是返回内容的总长度。<br>下一行是返回内容的类型。<br>空行后的是资源实体的主体内容。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111221-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%8702%20.png\" alt=\"20190526111221-响应报文02\"></p>\n<h2 id=\"3、HTTP-是无状态（stateless）协议。\"><a href=\"#3、HTTP-是无状态（stateless）协议。\" class=\"headerlink\" title=\"3、HTTP 是无状态（stateless）协议。\"></a>3、HTTP 是无状态（stateless）协议。</h2><p>  HTTP 自身不对请求和相应之间的通信状态进行保存，即不对发送过的请求或响应进行持久化处理。<br>  这是为了更快地处理大量事务，确保协议的可伸缩性。<br>  这一技术的<strong>问题</strong>就是当访问一家网站的多个页面时，无法保存其登陆状态，所以根据这一问题，引入了 <code>Cookie</code> 技术来管理状态。</p>\n<h2 id=\"4、HTTP-方法\"><a href=\"#4、HTTP-方法\" class=\"headerlink\" title=\"4、HTTP 方法\"></a>4、HTTP 方法</h2><p>  下面就简单介绍一下常用的几种方法，<code>GET</code>、<code>POST</code> 和 <code>HEAD</code> 除此之外的还有 <code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code> 和 <code>CONNECT</code>，这些不太常用，所以不在这里赘述了。</p>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a><code>GET</code></h3><p>  获取资源。请求已被 <code>URI</code> 识别的资源，就是经过服务器解析后返回的响应内容，文本就保持原样返回，如果是可执行程序，就返回结果。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111129-GET%E6%96%B9%E5%BC%8F%20.png\" alt=\"20190526111129-GET方式\"></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a><code>POST</code></h3><p>  传输实体主体。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111137-POST%E6%96%B9%E5%BC%8F%20.png\" alt=\"20190526111137-POST方式\"></p>\n<h3 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a><code>HEAD</code></h3><p>  获得报文首部。和 <code>GET</code> 一样，但是不返回主体部分，只用于确认 <code>URI</code> 的有效性和资源更新的日期等。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111155-%E6%8A%A5%E6%96%87%E5%A4%B4%20.png\" alt=\"20190526111155-报文头\"></p>\n<blockquote>\n<p><strong>注意：</strong>方法名区分大小写，注意要用<strong>大写字母</strong>。</p>\n</blockquote>\n<h2 id=\"5、持久化连接\"><a href=\"#5、持久化连接\" class=\"headerlink\" title=\"5、持久化连接\"></a>5、持久化连接</h2><p>  当请求的资源有很多时，会发生多次的 <code>TCP</code> 连接和断开过程，增加了通信量的开销。于是产生了持久链接（<code>HTTP</code> <code>Persistent</code> <code>connections</code>）。<br>  <strong>特点：</strong> 只要任意一端没有明确提出断开连接，则保持 <code>TCP</code> 连接状态。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111143-TCP%E9%93%BE%E6%8E%A5%20.png\" alt=\"20190526111143-TCP链接\"></p>\n<h2 id=\"6、管线化\"><a href=\"#6、管线化\" class=\"headerlink\" title=\"6、管线化\"></a>6、管线化</h2><p>  持久化连接需要等待上一个发送请求得到响应之后才能发送下一个请求，但是管线化技术可以直接发送，这样就能同时并发发送多个请求。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111200-%E7%AE%A1%E7%BA%BF%E5%8C%96%20.png\" alt=\"20190526111200-管线化\"></p>\n<h2 id=\"7、Cookie\"><a href=\"#7、Cookie\" class=\"headerlink\" title=\"7、Cookie\"></a>7、Cookie</h2><p>  状态管理。为了解决 <code>HTTP</code> 的无状态，<code>Cookie</code> 技术通过在请求和响应报文中写入 <code>Cookie</code> 信息来控制客户端的状态。具体实现是 <code>Cookie</code> 根据响应报文内 <code>Set-Cookie</code> 的首部字段信息，通知客户端保存 <code>Cookie</code>，当下一次再像<strong>该</strong>服务器发送请求，客户端会自动在请求报文中添加 <code>Cookie</code> 值后发送。服务端发现客户端发送的 <code>Cookie</code> 后，回去检查对比记录，得到状态信息。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111108-Cookie%20.png\" alt=\"20190526111108-Cookie\"></p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、请求报文、响应报文的基本组成？<br>2、什么是无状态协议，怎么解决的？<br>3、<code>HTTP</code> 的基本方法？分别有什么功能？<br>4、为了加快资源访问速度出现了什么方法？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，应用 <code>HTTP</code> 协议时，必定有客户端和服务器端。<br>其中，发起请求的是客户端，响应请求并返回的是服务端。</p>\n<h2 id=\"1、请求报文\"><a href=\"#1、请求报文\" class=\"headerlink\" title=\"1、请求报文\"></a>1、请求报文</h2><p>请求报文是由请求方法、请求 <code>URI</code>、协议版本、可选的请求首部字段和内容实体构成的。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111207-%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%20.png\" alt=\"20190526111207-请求报文\"></p>\n<h2 id=\"2、响应报文\"><a href=\"#2、响应报文\" class=\"headerlink\" title=\"2、响应报文\"></a>2、响应报文</h2><p>服务器以响应的形式返回处理结果。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111215-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20.png\" alt=\"20190526111215-响应报文\"></p>\n<p><code>200 OK</code> 是状态码（<code>status</code> <code>code</code>）和 原因短语。<br>下一行是创建相应的日期，是首部字段 (<code>header</code> <code>field</code>) 的一个属性。<br>下一行是返回内容的总长度。<br>下一行是返回内容的类型。<br>空行后的是资源实体的主体内容。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111221-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%8702%20.png\" alt=\"20190526111221-响应报文02\"></p>\n<h2 id=\"3、HTTP-是无状态（stateless）协议。\"><a href=\"#3、HTTP-是无状态（stateless）协议。\" class=\"headerlink\" title=\"3、HTTP 是无状态（stateless）协议。\"></a>3、HTTP 是无状态（stateless）协议。</h2><p>  HTTP 自身不对请求和相应之间的通信状态进行保存，即不对发送过的请求或响应进行持久化处理。<br>  这是为了更快地处理大量事务，确保协议的可伸缩性。<br>  这一技术的<strong>问题</strong>就是当访问一家网站的多个页面时，无法保存其登陆状态，所以根据这一问题，引入了 <code>Cookie</code> 技术来管理状态。</p>\n<h2 id=\"4、HTTP-方法\"><a href=\"#4、HTTP-方法\" class=\"headerlink\" title=\"4、HTTP 方法\"></a>4、HTTP 方法</h2><p>  下面就简单介绍一下常用的几种方法，<code>GET</code>、<code>POST</code> 和 <code>HEAD</code> 除此之外的还有 <code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code> 和 <code>CONNECT</code>，这些不太常用，所以不在这里赘述了。</p>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a><code>GET</code></h3><p>  获取资源。请求已被 <code>URI</code> 识别的资源，就是经过服务器解析后返回的响应内容，文本就保持原样返回，如果是可执行程序，就返回结果。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111129-GET%E6%96%B9%E5%BC%8F%20.png\" alt=\"20190526111129-GET方式\"></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a><code>POST</code></h3><p>  传输实体主体。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111137-POST%E6%96%B9%E5%BC%8F%20.png\" alt=\"20190526111137-POST方式\"></p>\n<h3 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a><code>HEAD</code></h3><p>  获得报文首部。和 <code>GET</code> 一样，但是不返回主体部分，只用于确认 <code>URI</code> 的有效性和资源更新的日期等。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111155-%E6%8A%A5%E6%96%87%E5%A4%B4%20.png\" alt=\"20190526111155-报文头\"></p>\n<blockquote>\n<p><strong>注意：</strong>方法名区分大小写，注意要用<strong>大写字母</strong>。</p>\n</blockquote>\n<h2 id=\"5、持久化连接\"><a href=\"#5、持久化连接\" class=\"headerlink\" title=\"5、持久化连接\"></a>5、持久化连接</h2><p>  当请求的资源有很多时，会发生多次的 <code>TCP</code> 连接和断开过程，增加了通信量的开销。于是产生了持久链接（<code>HTTP</code> <code>Persistent</code> <code>connections</code>）。<br>  <strong>特点：</strong> 只要任意一端没有明确提出断开连接，则保持 <code>TCP</code> 连接状态。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111143-TCP%E9%93%BE%E6%8E%A5%20.png\" alt=\"20190526111143-TCP链接\"></p>\n<h2 id=\"6、管线化\"><a href=\"#6、管线化\" class=\"headerlink\" title=\"6、管线化\"></a>6、管线化</h2><p>  持久化连接需要等待上一个发送请求得到响应之后才能发送下一个请求，但是管线化技术可以直接发送，这样就能同时并发发送多个请求。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111200-%E7%AE%A1%E7%BA%BF%E5%8C%96%20.png\" alt=\"20190526111200-管线化\"></p>\n<h2 id=\"7、Cookie\"><a href=\"#7、Cookie\" class=\"headerlink\" title=\"7、Cookie\"></a>7、Cookie</h2><p>  状态管理。为了解决 <code>HTTP</code> 的无状态，<code>Cookie</code> 技术通过在请求和响应报文中写入 <code>Cookie</code> 信息来控制客户端的状态。具体实现是 <code>Cookie</code> 根据响应报文内 <code>Set-Cookie</code> 的首部字段信息，通知客户端保存 <code>Cookie</code>，当下一次再像<strong>该</strong>服务器发送请求，客户端会自动在请求报文中添加 <code>Cookie</code> 值后发送。服务端发现客户端发送的 <code>Cookie</code> 后，回去检查对比记录，得到状态信息。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111108-Cookie%20.png\" alt=\"20190526111108-Cookie\"></p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、请求报文、响应报文的基本组成？<br>2、什么是无状态协议，怎么解决的？<br>3、<code>HTTP</code> 的基本方法？分别有什么功能？<br>4、为了加快资源访问速度出现了什么方法？</p>\n"},{"title":"03-HTTP 报文内的 HTTP 信息","date":"2019-05-09T11:56:09.000Z","_content":"\nHTTP 通信过程包括从客户端发往服务器端的请求以及从服务端返回客户端的响应。\n\n## 1、HTTP 报文\n\n就是一大串通信过程里经过 `HTTP` 处理后添加的报文。\n其大致分为报文首部和报文主体两块。两者由最初出现的空行（`CR+LF`）来划分，通常并不一定要有报文主体。\n\n![20190526112612-HTTP报文结构](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112612-HTTP报文结构%20.png)\n\n## 2、编码提升传输速率\n\n### 报文主体和实体主体的差异\n\n- **报文：**HTTP 通信的基本单位，8 位组字节流组成，通过 HTTP 通信传输。\n- **实体：**请求或响应的有效载荷数据被传输，内容由实体首部和实体主体组成。\n\nHTTP 报文主体用于传输请求或响应的实体主体。\n一般情况，报文主体等于实体主体，但是传输中进行编码操作的时候，实体主体内容发生变化。\n\n![20190526112620-HTTP报文结构02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112620-HTTP报文结构02%20.png)\n![20190526112630-HTTP报文实例](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112630-HTTP报文实例%20.png)\n\n### 压缩传输的内容编码\n\n`HTTP` 协议中的内容编码功能就像用压缩软件压缩东西一样，对实体内容进行编码压缩，内容编码后的实体由客户端接受并解码。这可以压缩传输内容，加快传输速度。\n常见的内容编码有 `gzip`、`compress`、`deflate`、`identity`（不编码）。\n\n### 分割发送的分块传输编码\n\n`HTTP` 通信过程中，请求的编码实体资源尚未传输完成之前，浏览器无法显示请求页面，传输大容量数据时候，通过数据分割成多块，能让浏览器逐步显示页面。这就是分块传输编码（`Chunked` `Transfer` `Coding`）。它将实体主体分成多个部分，每一块用十六进制来标记，最后一块使用`0（CR+LF)`来标记。传输给客户端，由客户端进行解码恢复。\n\n## 3、发送多种数据的多部分对象集合\n\n`MIME`（`Multipurpose` `Internet` `Mail` `Extensions`, 多用途因特网邮件扩展），它允许邮件处理文本，图片，视频等多个不同类型的数据，这使我们可以在邮件里写入文字并添加多分附件成为了现实。例如：图片等二进制数据以 `ASCII` 码字符串编码方式表名，就是利用 `MIME` 来标记数据类型，在 `MIME` 扩展中会使用一种称为多部分对象集合（`Multipart`）的方法，来容纳多份不同类型的数据。\n相应的，`HTTP` 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体，通常在图片或文本文件等上传时使用。\n多部分对象集合包括：\n\n* `multipart`/`form-data` 在 `Web` 表单文件上传使用\n\n  ![20190526112655-多部分对象集合](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112655-多部分对象集合%20.png)\n\n* `multipart`/`byteranges` 状态码 206（`Partial` `Content`，部分内容）响应报文包含了多个范围的内容时使用。\n\n![20190526112701-多部分对象集合02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112701-多部分对象集合02%20.png)\n\n`HTTP` 报文使用这个多部分对象集合的时候，需要在首部添加 `Content-type` 字段。\n使用 `boundary` 字符串来划分多部分\n在 `boundary` 字符串指定的各个实体的起始行之前插入`--`标记（`--AaB03x`、`--THis_STRING_SEPARATES`)\n在多部分对象集合对应的字符串的最后插入`--`标记（`--AaB03x--`）\n\n多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在部分中潜逃使用多部分对象集合。\n\n## 4、获取部分内容的范围请求\n\n过去，用户下载东西中断了必须要从头下载，为了解决这问题，要实现该功能需要指定下载的实体范围，指定范围发送的请求叫做范围请求（`Range` `Request`)\n对一份 10000 字节大小的资源，如果使用范围请求，可以只请求 5001~10000 字节内的资源。这样就算中断了，也可以向服务端指明自己需要的资源字节范围，这些需要在首部字段中表名。\n形式如下：\n\n`Range` : `bytes` = 5001 - 10000\n5001 到 10000 的\n`Range` : `bytes` = 5001 -\n5001 到之后全部的\n`Range` : `bytes` = -3000, 5000 - 7000\n从头到 3000， 5000 到 7000 的\n\n![20190526112648-HTTP范围请求](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112648-HTTP范围请求%20.png)\n\n针对范围请求，响应会返回状态码为 `206 Partial Content` 的响应报文，另外，对于多重范围的范围请求，响应会在首部字段 `Content-Type` 标明 `multipart`/`byteranges` 后返回响应报文，如果服务器无法响应请求，返回状态码 `200 OK `和完整的实体内容。\n\n##### 5、内容协商返回最合适的内容\n\n同一个 Web 网站可能有存着多分相同内容的页面，如中文版和英文版，内容虽然相同，单语言不同。当浏览器默认语言为哪种，访问相同的 `URI` 的 `Web` 页面时，会对应返回哪种语言的 Web 页面，这样的机制就叫做内容协商（`Content` `Negotiation`）。\n这协商的请求会包含在首部字段\n\n* `Accept`\n* `Accept-Charset`\n* `Accept-Encoding`\n* `Accept-Language`\n* `Content-Language`\n\n类型：\n服务器驱动协商（`Server-driven` `Negotiation`)\n服务器通过请求的首部字段为参考自动处理，但以浏览器直接发送的信息不一定能筛选出最优的内容。\n客户端驱动协商（`Agent-driven` `Negotiation`)\n用户从浏览器显示的可选项列表中选择， 还可以利用 JS 脚本在 Web 页面自动进行上述选择。\n透明协商（`Transparent` `Negotiation`)\n上两种方法的结合体。\n\n## 自我回顾\n\n1、`HTTP` 报文是什么？大致分为哪两部分？\n2、提升编码传输速率的方法有哪些？\n3、如何发送多部分对象集合？\n4、如何进行断点传输？\n5、内容协商机制是什么？","source":"_posts/网络通信-03_HTTP 报文内的 HTTP 信息.md","raw":"---\ntitle: 03-HTTP 报文内的 HTTP 信息\ncategories:\n  - 技术\n  - 网络通信\n  - TCP\ntags:\n  - HTTP\n  - TCP\ndate: 2019-05-09 19:56:09\n---\n\nHTTP 通信过程包括从客户端发往服务器端的请求以及从服务端返回客户端的响应。\n\n## 1、HTTP 报文\n\n就是一大串通信过程里经过 `HTTP` 处理后添加的报文。\n其大致分为报文首部和报文主体两块。两者由最初出现的空行（`CR+LF`）来划分，通常并不一定要有报文主体。\n\n![20190526112612-HTTP报文结构](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112612-HTTP报文结构%20.png)\n\n## 2、编码提升传输速率\n\n### 报文主体和实体主体的差异\n\n- **报文：**HTTP 通信的基本单位，8 位组字节流组成，通过 HTTP 通信传输。\n- **实体：**请求或响应的有效载荷数据被传输，内容由实体首部和实体主体组成。\n\nHTTP 报文主体用于传输请求或响应的实体主体。\n一般情况，报文主体等于实体主体，但是传输中进行编码操作的时候，实体主体内容发生变化。\n\n![20190526112620-HTTP报文结构02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112620-HTTP报文结构02%20.png)\n![20190526112630-HTTP报文实例](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112630-HTTP报文实例%20.png)\n\n### 压缩传输的内容编码\n\n`HTTP` 协议中的内容编码功能就像用压缩软件压缩东西一样，对实体内容进行编码压缩，内容编码后的实体由客户端接受并解码。这可以压缩传输内容，加快传输速度。\n常见的内容编码有 `gzip`、`compress`、`deflate`、`identity`（不编码）。\n\n### 分割发送的分块传输编码\n\n`HTTP` 通信过程中，请求的编码实体资源尚未传输完成之前，浏览器无法显示请求页面，传输大容量数据时候，通过数据分割成多块，能让浏览器逐步显示页面。这就是分块传输编码（`Chunked` `Transfer` `Coding`）。它将实体主体分成多个部分，每一块用十六进制来标记，最后一块使用`0（CR+LF)`来标记。传输给客户端，由客户端进行解码恢复。\n\n## 3、发送多种数据的多部分对象集合\n\n`MIME`（`Multipurpose` `Internet` `Mail` `Extensions`, 多用途因特网邮件扩展），它允许邮件处理文本，图片，视频等多个不同类型的数据，这使我们可以在邮件里写入文字并添加多分附件成为了现实。例如：图片等二进制数据以 `ASCII` 码字符串编码方式表名，就是利用 `MIME` 来标记数据类型，在 `MIME` 扩展中会使用一种称为多部分对象集合（`Multipart`）的方法，来容纳多份不同类型的数据。\n相应的，`HTTP` 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体，通常在图片或文本文件等上传时使用。\n多部分对象集合包括：\n\n* `multipart`/`form-data` 在 `Web` 表单文件上传使用\n\n  ![20190526112655-多部分对象集合](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112655-多部分对象集合%20.png)\n\n* `multipart`/`byteranges` 状态码 206（`Partial` `Content`，部分内容）响应报文包含了多个范围的内容时使用。\n\n![20190526112701-多部分对象集合02](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112701-多部分对象集合02%20.png)\n\n`HTTP` 报文使用这个多部分对象集合的时候，需要在首部添加 `Content-type` 字段。\n使用 `boundary` 字符串来划分多部分\n在 `boundary` 字符串指定的各个实体的起始行之前插入`--`标记（`--AaB03x`、`--THis_STRING_SEPARATES`)\n在多部分对象集合对应的字符串的最后插入`--`标记（`--AaB03x--`）\n\n多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在部分中潜逃使用多部分对象集合。\n\n## 4、获取部分内容的范围请求\n\n过去，用户下载东西中断了必须要从头下载，为了解决这问题，要实现该功能需要指定下载的实体范围，指定范围发送的请求叫做范围请求（`Range` `Request`)\n对一份 10000 字节大小的资源，如果使用范围请求，可以只请求 5001~10000 字节内的资源。这样就算中断了，也可以向服务端指明自己需要的资源字节范围，这些需要在首部字段中表名。\n形式如下：\n\n`Range` : `bytes` = 5001 - 10000\n5001 到 10000 的\n`Range` : `bytes` = 5001 -\n5001 到之后全部的\n`Range` : `bytes` = -3000, 5000 - 7000\n从头到 3000， 5000 到 7000 的\n\n![20190526112648-HTTP范围请求](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112648-HTTP范围请求%20.png)\n\n针对范围请求，响应会返回状态码为 `206 Partial Content` 的响应报文，另外，对于多重范围的范围请求，响应会在首部字段 `Content-Type` 标明 `multipart`/`byteranges` 后返回响应报文，如果服务器无法响应请求，返回状态码 `200 OK `和完整的实体内容。\n\n##### 5、内容协商返回最合适的内容\n\n同一个 Web 网站可能有存着多分相同内容的页面，如中文版和英文版，内容虽然相同，单语言不同。当浏览器默认语言为哪种，访问相同的 `URI` 的 `Web` 页面时，会对应返回哪种语言的 Web 页面，这样的机制就叫做内容协商（`Content` `Negotiation`）。\n这协商的请求会包含在首部字段\n\n* `Accept`\n* `Accept-Charset`\n* `Accept-Encoding`\n* `Accept-Language`\n* `Content-Language`\n\n类型：\n服务器驱动协商（`Server-driven` `Negotiation`)\n服务器通过请求的首部字段为参考自动处理，但以浏览器直接发送的信息不一定能筛选出最优的内容。\n客户端驱动协商（`Agent-driven` `Negotiation`)\n用户从浏览器显示的可选项列表中选择， 还可以利用 JS 脚本在 Web 页面自动进行上述选择。\n透明协商（`Transparent` `Negotiation`)\n上两种方法的结合体。\n\n## 自我回顾\n\n1、`HTTP` 报文是什么？大致分为哪两部分？\n2、提升编码传输速率的方法有哪些？\n3、如何发送多部分对象集合？\n4、如何进行断点传输？\n5、内容协商机制是什么？","slug":"网络通信-03_HTTP 报文内的 HTTP 信息","published":1,"updated":"2021-01-21T07:07:06.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnudz0052jjlndiek84zz","content":"<p>HTTP 通信过程包括从客户端发往服务器端的请求以及从服务端返回客户端的响应。</p>\n<h2 id=\"1、HTTP-报文\"><a href=\"#1、HTTP-报文\" class=\"headerlink\" title=\"1、HTTP 报文\"></a>1、HTTP 报文</h2><p>就是一大串通信过程里经过 <code>HTTP</code> 处理后添加的报文。<br>其大致分为报文首部和报文主体两块。两者由最初出现的空行（<code>CR+LF</code>）来划分，通常并不一定要有报文主体。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112612-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%20.png\" alt=\"20190526112612-HTTP报文结构\"></p>\n<h2 id=\"2、编码提升传输速率\"><a href=\"#2、编码提升传输速率\" class=\"headerlink\" title=\"2、编码提升传输速率\"></a>2、编码提升传输速率</h2><h3 id=\"报文主体和实体主体的差异\"><a href=\"#报文主体和实体主体的差异\" class=\"headerlink\" title=\"报文主体和实体主体的差异\"></a>报文主体和实体主体的差异</h3><ul>\n<li><strong>报文：</strong>HTTP 通信的基本单位，8 位组字节流组成，通过 HTTP 通信传输。</li>\n<li><strong>实体：</strong>请求或响应的有效载荷数据被传输，内容由实体首部和实体主体组成。</li>\n</ul>\n<p>HTTP 报文主体用于传输请求或响应的实体主体。<br>一般情况，报文主体等于实体主体，但是传输中进行编码操作的时候，实体主体内容发生变化。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112620-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%8402%20.png\" alt=\"20190526112620-HTTP报文结构02\"><br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112630-HTTP%E6%8A%A5%E6%96%87%E5%AE%9E%E4%BE%8B%20.png\" alt=\"20190526112630-HTTP报文实例\"></p>\n<h3 id=\"压缩传输的内容编码\"><a href=\"#压缩传输的内容编码\" class=\"headerlink\" title=\"压缩传输的内容编码\"></a>压缩传输的内容编码</h3><p><code>HTTP</code> 协议中的内容编码功能就像用压缩软件压缩东西一样，对实体内容进行编码压缩，内容编码后的实体由客户端接受并解码。这可以压缩传输内容，加快传输速度。<br>常见的内容编码有 <code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>（不编码）。</p>\n<h3 id=\"分割发送的分块传输编码\"><a href=\"#分割发送的分块传输编码\" class=\"headerlink\" title=\"分割发送的分块传输编码\"></a>分割发送的分块传输编码</h3><p><code>HTTP</code> 通信过程中，请求的编码实体资源尚未传输完成之前，浏览器无法显示请求页面，传输大容量数据时候，通过数据分割成多块，能让浏览器逐步显示页面。这就是分块传输编码（<code>Chunked</code> <code>Transfer</code> <code>Coding</code>）。它将实体主体分成多个部分，每一块用十六进制来标记，最后一块使用<code>0（CR+LF)</code>来标记。传输给客户端，由客户端进行解码恢复。</p>\n<h2 id=\"3、发送多种数据的多部分对象集合\"><a href=\"#3、发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"3、发送多种数据的多部分对象集合\"></a>3、发送多种数据的多部分对象集合</h2><p><code>MIME</code>（<code>Multipurpose</code> <code>Internet</code> <code>Mail</code> <code>Extensions</code>, 多用途因特网邮件扩展），它允许邮件处理文本，图片，视频等多个不同类型的数据，这使我们可以在邮件里写入文字并添加多分附件成为了现实。例如：图片等二进制数据以 <code>ASCII</code> 码字符串编码方式表名，就是利用 <code>MIME</code> 来标记数据类型，在 <code>MIME</code> 扩展中会使用一种称为多部分对象集合（<code>Multipart</code>）的方法，来容纳多份不同类型的数据。<br>相应的，<code>HTTP</code> 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体，通常在图片或文本文件等上传时使用。<br>多部分对象集合包括：</p>\n<ul>\n<li><p><code>multipart</code>/<code>form-data</code> 在 <code>Web</code> 表单文件上传使用</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112655-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88%20.png\" alt=\"20190526112655-多部分对象集合\"></p>\n</li>\n<li><p><code>multipart</code>/<code>byteranges</code> 状态码 206（<code>Partial</code> <code>Content</code>，部分内容）响应报文包含了多个范围的内容时使用。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112701-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%8802%20.png\" alt=\"20190526112701-多部分对象集合02\"></p>\n<p><code>HTTP</code> 报文使用这个多部分对象集合的时候，需要在首部添加 <code>Content-type</code> 字段。<br>使用 <code>boundary</code> 字符串来划分多部分<br>在 <code>boundary</code> 字符串指定的各个实体的起始行之前插入<code>--</code>标记（<code>--AaB03x</code>、<code>--THis_STRING_SEPARATES</code>)<br>在多部分对象集合对应的字符串的最后插入<code>--</code>标记（<code>--AaB03x--</code>）</p>\n<p>多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在部分中潜逃使用多部分对象集合。</p>\n<h2 id=\"4、获取部分内容的范围请求\"><a href=\"#4、获取部分内容的范围请求\" class=\"headerlink\" title=\"4、获取部分内容的范围请求\"></a>4、获取部分内容的范围请求</h2><p>过去，用户下载东西中断了必须要从头下载，为了解决这问题，要实现该功能需要指定下载的实体范围，指定范围发送的请求叫做范围请求（<code>Range</code> <code>Request</code>)<br>对一份 10000 字节大小的资源，如果使用范围请求，可以只请求 5001~10000 字节内的资源。这样就算中断了，也可以向服务端指明自己需要的资源字节范围，这些需要在首部字段中表名。<br>形式如下：</p>\n<p><code>Range</code> : <code>bytes</code> = 5001 - 10000<br>5001 到 10000 的<br><code>Range</code> : <code>bytes</code> = 5001 -<br>5001 到之后全部的<br><code>Range</code> : <code>bytes</code> = -3000, 5000 - 7000<br>从头到 3000， 5000 到 7000 的</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112648-HTTP%E8%8C%83%E5%9B%B4%E8%AF%B7%E6%B1%82%20.png\" alt=\"20190526112648-HTTP范围请求\"></p>\n<p>针对范围请求，响应会返回状态码为 <code>206 Partial Content</code> 的响应报文，另外，对于多重范围的范围请求，响应会在首部字段 <code>Content-Type</code> 标明 <code>multipart</code>/<code>byteranges</code> 后返回响应报文，如果服务器无法响应请求，返回状态码 <code>200 OK</code>和完整的实体内容。</p>\n<h5 id=\"5、内容协商返回最合适的内容\"><a href=\"#5、内容协商返回最合适的内容\" class=\"headerlink\" title=\"5、内容协商返回最合适的内容\"></a>5、内容协商返回最合适的内容</h5><p>同一个 Web 网站可能有存着多分相同内容的页面，如中文版和英文版，内容虽然相同，单语言不同。当浏览器默认语言为哪种，访问相同的 <code>URI</code> 的 <code>Web</code> 页面时，会对应返回哪种语言的 Web 页面，这样的机制就叫做内容协商（<code>Content</code> <code>Negotiation</code>）。<br>这协商的请求会包含在首部字段</p>\n<ul>\n<li><code>Accept</code></li>\n<li><code>Accept-Charset</code></li>\n<li><code>Accept-Encoding</code></li>\n<li><code>Accept-Language</code></li>\n<li><code>Content-Language</code></li>\n</ul>\n<p>类型：<br>服务器驱动协商（<code>Server-driven</code> <code>Negotiation</code>)<br>服务器通过请求的首部字段为参考自动处理，但以浏览器直接发送的信息不一定能筛选出最优的内容。<br>客户端驱动协商（<code>Agent-driven</code> <code>Negotiation</code>)<br>用户从浏览器显示的可选项列表中选择， 还可以利用 JS 脚本在 Web 页面自动进行上述选择。<br>透明协商（<code>Transparent</code> <code>Negotiation</code>)<br>上两种方法的结合体。</p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、<code>HTTP</code> 报文是什么？大致分为哪两部分？<br>2、提升编码传输速率的方法有哪些？<br>3、如何发送多部分对象集合？<br>4、如何进行断点传输？<br>5、内容协商机制是什么？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP 通信过程包括从客户端发往服务器端的请求以及从服务端返回客户端的响应。</p>\n<h2 id=\"1、HTTP-报文\"><a href=\"#1、HTTP-报文\" class=\"headerlink\" title=\"1、HTTP 报文\"></a>1、HTTP 报文</h2><p>就是一大串通信过程里经过 <code>HTTP</code> 处理后添加的报文。<br>其大致分为报文首部和报文主体两块。两者由最初出现的空行（<code>CR+LF</code>）来划分，通常并不一定要有报文主体。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112612-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%20.png\" alt=\"20190526112612-HTTP报文结构\"></p>\n<h2 id=\"2、编码提升传输速率\"><a href=\"#2、编码提升传输速率\" class=\"headerlink\" title=\"2、编码提升传输速率\"></a>2、编码提升传输速率</h2><h3 id=\"报文主体和实体主体的差异\"><a href=\"#报文主体和实体主体的差异\" class=\"headerlink\" title=\"报文主体和实体主体的差异\"></a>报文主体和实体主体的差异</h3><ul>\n<li><strong>报文：</strong>HTTP 通信的基本单位，8 位组字节流组成，通过 HTTP 通信传输。</li>\n<li><strong>实体：</strong>请求或响应的有效载荷数据被传输，内容由实体首部和实体主体组成。</li>\n</ul>\n<p>HTTP 报文主体用于传输请求或响应的实体主体。<br>一般情况，报文主体等于实体主体，但是传输中进行编码操作的时候，实体主体内容发生变化。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112620-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%8402%20.png\" alt=\"20190526112620-HTTP报文结构02\"><br><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112630-HTTP%E6%8A%A5%E6%96%87%E5%AE%9E%E4%BE%8B%20.png\" alt=\"20190526112630-HTTP报文实例\"></p>\n<h3 id=\"压缩传输的内容编码\"><a href=\"#压缩传输的内容编码\" class=\"headerlink\" title=\"压缩传输的内容编码\"></a>压缩传输的内容编码</h3><p><code>HTTP</code> 协议中的内容编码功能就像用压缩软件压缩东西一样，对实体内容进行编码压缩，内容编码后的实体由客户端接受并解码。这可以压缩传输内容，加快传输速度。<br>常见的内容编码有 <code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>（不编码）。</p>\n<h3 id=\"分割发送的分块传输编码\"><a href=\"#分割发送的分块传输编码\" class=\"headerlink\" title=\"分割发送的分块传输编码\"></a>分割发送的分块传输编码</h3><p><code>HTTP</code> 通信过程中，请求的编码实体资源尚未传输完成之前，浏览器无法显示请求页面，传输大容量数据时候，通过数据分割成多块，能让浏览器逐步显示页面。这就是分块传输编码（<code>Chunked</code> <code>Transfer</code> <code>Coding</code>）。它将实体主体分成多个部分，每一块用十六进制来标记，最后一块使用<code>0（CR+LF)</code>来标记。传输给客户端，由客户端进行解码恢复。</p>\n<h2 id=\"3、发送多种数据的多部分对象集合\"><a href=\"#3、发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"3、发送多种数据的多部分对象集合\"></a>3、发送多种数据的多部分对象集合</h2><p><code>MIME</code>（<code>Multipurpose</code> <code>Internet</code> <code>Mail</code> <code>Extensions</code>, 多用途因特网邮件扩展），它允许邮件处理文本，图片，视频等多个不同类型的数据，这使我们可以在邮件里写入文字并添加多分附件成为了现实。例如：图片等二进制数据以 <code>ASCII</code> 码字符串编码方式表名，就是利用 <code>MIME</code> 来标记数据类型，在 <code>MIME</code> 扩展中会使用一种称为多部分对象集合（<code>Multipart</code>）的方法，来容纳多份不同类型的数据。<br>相应的，<code>HTTP</code> 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体，通常在图片或文本文件等上传时使用。<br>多部分对象集合包括：</p>\n<ul>\n<li><p><code>multipart</code>/<code>form-data</code> 在 <code>Web</code> 表单文件上传使用</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112655-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88%20.png\" alt=\"20190526112655-多部分对象集合\"></p>\n</li>\n<li><p><code>multipart</code>/<code>byteranges</code> 状态码 206（<code>Partial</code> <code>Content</code>，部分内容）响应报文包含了多个范围的内容时使用。</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112701-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%8802%20.png\" alt=\"20190526112701-多部分对象集合02\"></p>\n<p><code>HTTP</code> 报文使用这个多部分对象集合的时候，需要在首部添加 <code>Content-type</code> 字段。<br>使用 <code>boundary</code> 字符串来划分多部分<br>在 <code>boundary</code> 字符串指定的各个实体的起始行之前插入<code>--</code>标记（<code>--AaB03x</code>、<code>--THis_STRING_SEPARATES</code>)<br>在多部分对象集合对应的字符串的最后插入<code>--</code>标记（<code>--AaB03x--</code>）</p>\n<p>多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在部分中潜逃使用多部分对象集合。</p>\n<h2 id=\"4、获取部分内容的范围请求\"><a href=\"#4、获取部分内容的范围请求\" class=\"headerlink\" title=\"4、获取部分内容的范围请求\"></a>4、获取部分内容的范围请求</h2><p>过去，用户下载东西中断了必须要从头下载，为了解决这问题，要实现该功能需要指定下载的实体范围，指定范围发送的请求叫做范围请求（<code>Range</code> <code>Request</code>)<br>对一份 10000 字节大小的资源，如果使用范围请求，可以只请求 5001~10000 字节内的资源。这样就算中断了，也可以向服务端指明自己需要的资源字节范围，这些需要在首部字段中表名。<br>形式如下：</p>\n<p><code>Range</code> : <code>bytes</code> = 5001 - 10000<br>5001 到 10000 的<br><code>Range</code> : <code>bytes</code> = 5001 -<br>5001 到之后全部的<br><code>Range</code> : <code>bytes</code> = -3000, 5000 - 7000<br>从头到 3000， 5000 到 7000 的</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112648-HTTP%E8%8C%83%E5%9B%B4%E8%AF%B7%E6%B1%82%20.png\" alt=\"20190526112648-HTTP范围请求\"></p>\n<p>针对范围请求，响应会返回状态码为 <code>206 Partial Content</code> 的响应报文，另外，对于多重范围的范围请求，响应会在首部字段 <code>Content-Type</code> 标明 <code>multipart</code>/<code>byteranges</code> 后返回响应报文，如果服务器无法响应请求，返回状态码 <code>200 OK</code>和完整的实体内容。</p>\n<h5 id=\"5、内容协商返回最合适的内容\"><a href=\"#5、内容协商返回最合适的内容\" class=\"headerlink\" title=\"5、内容协商返回最合适的内容\"></a>5、内容协商返回最合适的内容</h5><p>同一个 Web 网站可能有存着多分相同内容的页面，如中文版和英文版，内容虽然相同，单语言不同。当浏览器默认语言为哪种，访问相同的 <code>URI</code> 的 <code>Web</code> 页面时，会对应返回哪种语言的 Web 页面，这样的机制就叫做内容协商（<code>Content</code> <code>Negotiation</code>）。<br>这协商的请求会包含在首部字段</p>\n<ul>\n<li><code>Accept</code></li>\n<li><code>Accept-Charset</code></li>\n<li><code>Accept-Encoding</code></li>\n<li><code>Accept-Language</code></li>\n<li><code>Content-Language</code></li>\n</ul>\n<p>类型：<br>服务器驱动协商（<code>Server-driven</code> <code>Negotiation</code>)<br>服务器通过请求的首部字段为参考自动处理，但以浏览器直接发送的信息不一定能筛选出最优的内容。<br>客户端驱动协商（<code>Agent-driven</code> <code>Negotiation</code>)<br>用户从浏览器显示的可选项列表中选择， 还可以利用 JS 脚本在 Web 页面自动进行上述选择。<br>透明协商（<code>Transparent</code> <code>Negotiation</code>)<br>上两种方法的结合体。</p>\n<h2 id=\"自我回顾\"><a href=\"#自我回顾\" class=\"headerlink\" title=\"自我回顾\"></a>自我回顾</h2><p>1、<code>HTTP</code> 报文是什么？大致分为哪两部分？<br>2、提升编码传输速率的方法有哪些？<br>3、如何发送多部分对象集合？<br>4、如何进行断点传输？<br>5、内容协商机制是什么？</p>\n"},{"title":"网络通信-简单WEB服务器","date":"2020-08-16T13:23:36.000Z","_content":"\n本篇文章介绍如何实现一个简单 的Web Server 以及对应的问题解决方案。\n\n## 一、如何使用Python实现一个返回固定页面的Web Server\n\n1. 使用socket创建一个TCP Server\n\n2. 接受来自浏览器的TCP链接，并接收HTTP请求\n\n3. 返回固定响应数据给浏览器\n\n<!--more-->\n\n```python\nimport socket, time\n\n\ndef handle_request(new_socket):\n    # 接收请求\n    recv_msg = new_socket.recv(1024)\n    print(recv_msg)\n    # 响应数据\n    response_msg = \"HTTP/1.1 200 OK\\r\\n\"\n    response_msg += \"\\r\\n\"\n    response_msg += \"<h1>Hello</h1>\"\n    # 返回响应数据（二进制数据）\n    time.sleep(1)\n    new_socket.send(response_msg.encode(\"utf-8\"))\n    # 关闭该次socket连接\n    new_socket.close()\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 8890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 缺陷：\n1. 这种简单的web server是阻塞的，同时只能处理一个请求。 \n\n## 二、解决服务器端口占用问题\n\n问题描述：当浏览器访问服务器时，服务器收到请求，马上返回响应数据，并且调用了`new_socket.close()`。此时，马上重启服务器的话，可能会提示端口被占用。\n\n这是因为TCP的四次挥手过程中，谁先发送`FIN`包，则谁会在发送最后一个`ACK`包后进入`TIME_WAIT`状态，此状态会等待`2MSL`的时间（大概2-4分钟）。在这个阶段，服务器绑定的端口资源是被占用的。等这个阶段过了，端口会进入`CLOSED`状态，则可以被再次利用。\n\n如何解决服务器重启端口被占用的问题：\n\n```python\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n```\n\n> 在创建`socket`实例之后，设置可以重用地址，就可以解决报错问题。\n\n## 三、TCP协议3次握手、4次挥手\n\n![fHQGzW](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/fHQGzW.jpg)\n\n### 三次握手：\n\n![三次握手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/三次握手.png)\n\n \n\n**三次握手流程和目的都相对简单：**\n\n1. 客户端向服务器发送`SYN flag`的包，并携带`seq`为`x`。\n\n2. 服务器收到`SYN`包后，开始准备对应的资源，准备好后，发送`SYN+ACK`包，这实际上是服务器回应客户端的`ACK`包，合并了服务器让客户端准备资源的`SYN`包。所以携带了对应`SYN`的`seq y`，以及`ACK=x+1`。\n\n3. 客户端收到服务器发来的`SYN`包，则回复`ACK`包，`ack=y+1`。\n\n这样3次握手就建立好了，客户端和服务器都进入`ESTABLISHED`状态，表示资源都准备完毕。所以TCP的三次握手实际上是客户端与服务器之间互相要求准备资源以及回复资源已准备好的过程。\n\n理论上应该是4次握手，但为了增加性能减小时间开销，中间的两次数据传输（服务器发送的`SYN`和`ACK`）合并在一起了。所以变成了3次握手。\n\n### 四次挥手：\n\n![四次挥手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/四次挥手.png)\n\n\n\n **四次挥手相对比较复杂：**\n\n1. 假设客户端在完成数据传输后，首先开始发送`FIN`包（也就是我们的客户端程序调用`socket.close()`的时候，系统底层会自动发送`FIN`包），则表示客户端已经没有需要发送给服务器的数据。由于`SOCKET`是全双工的，所以客户端发送`FIN`只是表示客户端以后都不在发送数据，但此时还可以接收数据。\n\n2. 客户端发送出`FIN`包后，就会进入`FIN WAIT-1`状态，该状态一般很难观测到，因为该状态只维持到服务器响应`ACK`包，一般情况下都是瞬间就返回了（注意这里和3次握手不同，这里的`ACK`包不能与服务器发送的FIN包合并，因为服务器可能还有数据要继续发送给客户端，所以服务器可能要等到数据传输完毕才会向客户端发送`FIN`包，这就是为什么是四次挥手）\n\n3. 服务器收到客户端发来的`FIN`包，则马上发送回应的ACK包，此包没有意外的话，会瞬间到达客户端。\n\n4. 客户端收到`ACK`包后，结束`FIN WAIT-1`状态，进入`FIN WAIT-2`状态，该状态的目的是等待服务器发送`FIN`包。\n\n5. 服务器完成了最后的数据发送，则向客户端发送`FIN`包（也就是服务器程序调用`socket.close()`的时候，系统底层会自动发送`FIN`包），表示服务器以后也没有数据要发送了，开始断开服务器的发送通道。\n\n6. 服务器在发送出`FIN`后，会进入`LAST-ACK`状态（例如等待4s）。这个状态是为了等待客户端恢复确认的`ACK`包，因为服务器发送出去的`FIN`包，他无法确认客户端是否收到，如果超出`waittime`还未收到`ACK`包，则重新发送FIN包。\n\n7. 客户端如果正确收到了服务器发送的`FIN`包，理论上应该释放资源，并发送`ACK`包。但是如果客户端发出的`ACK`包由于某些原因，服务器并未收到，那么服务器在几秒后会重新发送`FIN`包，但客户端已经把资源释放掉了，则就会出现问题。怎么解决这个问题呢？解决方案是，客户端收到服务器发送的`FIN`包，并不马上释放资源（例如绑定的端口等），而是先回复`ACK`包，并进入`TIME-WAIT`状态，这个状态要持续`2MSL`（2-3分钟）。如果在`2MSL`时间段中，服务器都没有重新发送FIN包，则表示服务器已经收到了自己发出的`ACK`包，这是客户端才放心的释放资源。\n\n8. 最终客户端在等待`2MSL`后，进入`CLOSED`状态。服务器在确认收到最后一个`ACK`包后直接进入`CLOSED`状态。\n\n \n\n**资源占用的解释：**\n\n我们知道，客户端是使用随机端口来发起`TCP`连接的，所以客户端首先发送`FIN`包的话，最后的`2MSL`是由客户端来等待，即使2-3分钟资源未被释放，也不会影响客户端另外发起新的请求（因为可用的随机端口很多，不会出现冲突）。\n\n但是如果由服务器来首先发起`FIN`，则最后的`2MSL`要由服务器来等待，则在2-3分钟内，服务器绑定的端口并未被释放，所以如果此时重启服务器，则会出现资源未释放、端口被占用的情况。\n\n**结论：尽量让客户端来发起断开连接的请求。如果要使服务器断开请求还不会出现占用端口的情况，则可以参考前面第二节的方法，为服务器SOCKET设置资源重用的属性。**\n\n## 四、改善简单WEB Server\n\n前面我们实现的简单Web Server不管客户端请求的`URI`是什么，我们都只能返回固定的`\"Hello`\"字符串。我们对其进行改善，让其根据接收到的请求，来返回不同的页面数据。\n\n```python\nimport socket\nimport re\n\n\ndef handle_request(new_socket):\n    # 接收请求\n    recv_msg = \"\"\n    recv_msg = new_socket.recv(1024).decode(\"utf-8\")\n    if recv_msg == \"\":\n        print(\"recv null\")\n        new_socket.close()\n        return\n\n    # 从请求中解析出URI\n    recv_lines = recv_msg.splitlines()\n    print(recv_lines)\n    # 使用正则表达式提取出URI\n    ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n    if ret:\n        # 获取URI字符串\n        file_name = ret.group(1)\n        # 如果URI是/，则默认返回index.html的内容\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n\n    try:\n        # 根据请求的URI，读取相应的文件\n        fp = open(\".\" + file_name, \"rb\")\n    except:\n        # 找不到文件，响应404\n        response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n        response_msg += \"\\r\\n\"\n        response_msg += \"<h1>----file not found----</h1>\"\n        new_socket.send(response_msg.encode(\"utf-8\"))\n    else:\n        html_content = fp.read()\n        fp.close()\n        # 响应正确 200 OK\n        response_msg = \"HTTP/1.1 200 OK\\r\\n\"\n        response_msg += \"\\r\\n\"\n\n        # 返回响应头\n        new_socket.send(response_msg.encode(\"utf-8\"))\n        # 返回响应体\n        new_socket.send(html_content)\n\n    # 关闭该次socket连接\n    new_socket.close()\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n以上代码重点在于解析出`GET /index.html HTTP/1.1`中的`/index.html`部分，知道服务器要请求什么内容，然后按需找到对应的文件，已二进制方式读取文件内容并返回给客户端即可。\n\n如果客户端没有指定访问的内容，则默认返回`index.html`页面。\n\n注意异常的处理。","source":"_posts/网络通信-Simple Web Server.md","raw":"---\ntitle: 网络通信-简单WEB服务器\ndate: 2020-08-16 21:23:36\ncategories:\n    - 技术\n    - 网络通信\n    - TCP\ntags:\n    - TCP\n    - WEB Server \n---\n\n本篇文章介绍如何实现一个简单 的Web Server 以及对应的问题解决方案。\n\n## 一、如何使用Python实现一个返回固定页面的Web Server\n\n1. 使用socket创建一个TCP Server\n\n2. 接受来自浏览器的TCP链接，并接收HTTP请求\n\n3. 返回固定响应数据给浏览器\n\n<!--more-->\n\n```python\nimport socket, time\n\n\ndef handle_request(new_socket):\n    # 接收请求\n    recv_msg = new_socket.recv(1024)\n    print(recv_msg)\n    # 响应数据\n    response_msg = \"HTTP/1.1 200 OK\\r\\n\"\n    response_msg += \"\\r\\n\"\n    response_msg += \"<h1>Hello</h1>\"\n    # 返回响应数据（二进制数据）\n    time.sleep(1)\n    new_socket.send(response_msg.encode(\"utf-8\"))\n    # 关闭该次socket连接\n    new_socket.close()\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 8890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 缺陷：\n1. 这种简单的web server是阻塞的，同时只能处理一个请求。 \n\n## 二、解决服务器端口占用问题\n\n问题描述：当浏览器访问服务器时，服务器收到请求，马上返回响应数据，并且调用了`new_socket.close()`。此时，马上重启服务器的话，可能会提示端口被占用。\n\n这是因为TCP的四次挥手过程中，谁先发送`FIN`包，则谁会在发送最后一个`ACK`包后进入`TIME_WAIT`状态，此状态会等待`2MSL`的时间（大概2-4分钟）。在这个阶段，服务器绑定的端口资源是被占用的。等这个阶段过了，端口会进入`CLOSED`状态，则可以被再次利用。\n\n如何解决服务器重启端口被占用的问题：\n\n```python\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n```\n\n> 在创建`socket`实例之后，设置可以重用地址，就可以解决报错问题。\n\n## 三、TCP协议3次握手、4次挥手\n\n![fHQGzW](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/fHQGzW.jpg)\n\n### 三次握手：\n\n![三次握手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/三次握手.png)\n\n \n\n**三次握手流程和目的都相对简单：**\n\n1. 客户端向服务器发送`SYN flag`的包，并携带`seq`为`x`。\n\n2. 服务器收到`SYN`包后，开始准备对应的资源，准备好后，发送`SYN+ACK`包，这实际上是服务器回应客户端的`ACK`包，合并了服务器让客户端准备资源的`SYN`包。所以携带了对应`SYN`的`seq y`，以及`ACK=x+1`。\n\n3. 客户端收到服务器发来的`SYN`包，则回复`ACK`包，`ack=y+1`。\n\n这样3次握手就建立好了，客户端和服务器都进入`ESTABLISHED`状态，表示资源都准备完毕。所以TCP的三次握手实际上是客户端与服务器之间互相要求准备资源以及回复资源已准备好的过程。\n\n理论上应该是4次握手，但为了增加性能减小时间开销，中间的两次数据传输（服务器发送的`SYN`和`ACK`）合并在一起了。所以变成了3次握手。\n\n### 四次挥手：\n\n![四次挥手](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/四次挥手.png)\n\n\n\n **四次挥手相对比较复杂：**\n\n1. 假设客户端在完成数据传输后，首先开始发送`FIN`包（也就是我们的客户端程序调用`socket.close()`的时候，系统底层会自动发送`FIN`包），则表示客户端已经没有需要发送给服务器的数据。由于`SOCKET`是全双工的，所以客户端发送`FIN`只是表示客户端以后都不在发送数据，但此时还可以接收数据。\n\n2. 客户端发送出`FIN`包后，就会进入`FIN WAIT-1`状态，该状态一般很难观测到，因为该状态只维持到服务器响应`ACK`包，一般情况下都是瞬间就返回了（注意这里和3次握手不同，这里的`ACK`包不能与服务器发送的FIN包合并，因为服务器可能还有数据要继续发送给客户端，所以服务器可能要等到数据传输完毕才会向客户端发送`FIN`包，这就是为什么是四次挥手）\n\n3. 服务器收到客户端发来的`FIN`包，则马上发送回应的ACK包，此包没有意外的话，会瞬间到达客户端。\n\n4. 客户端收到`ACK`包后，结束`FIN WAIT-1`状态，进入`FIN WAIT-2`状态，该状态的目的是等待服务器发送`FIN`包。\n\n5. 服务器完成了最后的数据发送，则向客户端发送`FIN`包（也就是服务器程序调用`socket.close()`的时候，系统底层会自动发送`FIN`包），表示服务器以后也没有数据要发送了，开始断开服务器的发送通道。\n\n6. 服务器在发送出`FIN`后，会进入`LAST-ACK`状态（例如等待4s）。这个状态是为了等待客户端恢复确认的`ACK`包，因为服务器发送出去的`FIN`包，他无法确认客户端是否收到，如果超出`waittime`还未收到`ACK`包，则重新发送FIN包。\n\n7. 客户端如果正确收到了服务器发送的`FIN`包，理论上应该释放资源，并发送`ACK`包。但是如果客户端发出的`ACK`包由于某些原因，服务器并未收到，那么服务器在几秒后会重新发送`FIN`包，但客户端已经把资源释放掉了，则就会出现问题。怎么解决这个问题呢？解决方案是，客户端收到服务器发送的`FIN`包，并不马上释放资源（例如绑定的端口等），而是先回复`ACK`包，并进入`TIME-WAIT`状态，这个状态要持续`2MSL`（2-3分钟）。如果在`2MSL`时间段中，服务器都没有重新发送FIN包，则表示服务器已经收到了自己发出的`ACK`包，这是客户端才放心的释放资源。\n\n8. 最终客户端在等待`2MSL`后，进入`CLOSED`状态。服务器在确认收到最后一个`ACK`包后直接进入`CLOSED`状态。\n\n \n\n**资源占用的解释：**\n\n我们知道，客户端是使用随机端口来发起`TCP`连接的，所以客户端首先发送`FIN`包的话，最后的`2MSL`是由客户端来等待，即使2-3分钟资源未被释放，也不会影响客户端另外发起新的请求（因为可用的随机端口很多，不会出现冲突）。\n\n但是如果由服务器来首先发起`FIN`，则最后的`2MSL`要由服务器来等待，则在2-3分钟内，服务器绑定的端口并未被释放，所以如果此时重启服务器，则会出现资源未释放、端口被占用的情况。\n\n**结论：尽量让客户端来发起断开连接的请求。如果要使服务器断开请求还不会出现占用端口的情况，则可以参考前面第二节的方法，为服务器SOCKET设置资源重用的属性。**\n\n## 四、改善简单WEB Server\n\n前面我们实现的简单Web Server不管客户端请求的`URI`是什么，我们都只能返回固定的`\"Hello`\"字符串。我们对其进行改善，让其根据接收到的请求，来返回不同的页面数据。\n\n```python\nimport socket\nimport re\n\n\ndef handle_request(new_socket):\n    # 接收请求\n    recv_msg = \"\"\n    recv_msg = new_socket.recv(1024).decode(\"utf-8\")\n    if recv_msg == \"\":\n        print(\"recv null\")\n        new_socket.close()\n        return\n\n    # 从请求中解析出URI\n    recv_lines = recv_msg.splitlines()\n    print(recv_lines)\n    # 使用正则表达式提取出URI\n    ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n    if ret:\n        # 获取URI字符串\n        file_name = ret.group(1)\n        # 如果URI是/，则默认返回index.html的内容\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n\n    try:\n        # 根据请求的URI，读取相应的文件\n        fp = open(\".\" + file_name, \"rb\")\n    except:\n        # 找不到文件，响应404\n        response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n        response_msg += \"\\r\\n\"\n        response_msg += \"<h1>----file not found----</h1>\"\n        new_socket.send(response_msg.encode(\"utf-8\"))\n    else:\n        html_content = fp.read()\n        fp.close()\n        # 响应正确 200 OK\n        response_msg = \"HTTP/1.1 200 OK\\r\\n\"\n        response_msg += \"\\r\\n\"\n\n        # 返回响应头\n        new_socket.send(response_msg.encode(\"utf-8\"))\n        # 返回响应体\n        new_socket.send(html_content)\n\n    # 关闭该次socket连接\n    new_socket.close()\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 处理每个客户端的请求\n        handle_request(new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n以上代码重点在于解析出`GET /index.html HTTP/1.1`中的`/index.html`部分，知道服务器要请求什么内容，然后按需找到对应的文件，已二进制方式读取文件内容并返回给客户端即可。\n\n如果客户端没有指定访问的内容，则默认返回`index.html`页面。\n\n注意异常的处理。","slug":"网络通信-Simple Web Server","published":1,"updated":"2021-01-25T02:59:22.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnue20055jjln5gfo867i","content":"<p>本篇文章介绍如何实现一个简单 的Web Server 以及对应的问题解决方案。</p>\n<h2 id=\"一、如何使用Python实现一个返回固定页面的Web-Server\"><a href=\"#一、如何使用Python实现一个返回固定页面的Web-Server\" class=\"headerlink\" title=\"一、如何使用Python实现一个返回固定页面的Web Server\"></a>一、如何使用Python实现一个返回固定页面的Web Server</h2><ol>\n<li><p>使用socket创建一个TCP Server</p>\n</li>\n<li><p>接受来自浏览器的TCP链接，并接收HTTP请求</p>\n</li>\n<li><p>返回固定响应数据给浏览器</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket, time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-comment\"># 接收请求</span><br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>)<br>    print(recv_msg)<br>    <span class=\"hljs-comment\"># 响应数据</span><br>    response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>    response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>    response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span><br>    <span class=\"hljs-comment\"># 返回响应数据（二进制数据）</span><br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-comment\"># 关闭该次socket连接</span><br>    new_socket.close()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"缺陷：\"><a href=\"#缺陷：\" class=\"headerlink\" title=\"缺陷：\"></a>缺陷：</h3><ol>\n<li>这种简单的web server是阻塞的，同时只能处理一个请求。 </li>\n</ol>\n<h2 id=\"二、解决服务器端口占用问题\"><a href=\"#二、解决服务器端口占用问题\" class=\"headerlink\" title=\"二、解决服务器端口占用问题\"></a>二、解决服务器端口占用问题</h2><p>问题描述：当浏览器访问服务器时，服务器收到请求，马上返回响应数据，并且调用了<code>new_socket.close()</code>。此时，马上重启服务器的话，可能会提示端口被占用。</p>\n<p>这是因为TCP的四次挥手过程中，谁先发送<code>FIN</code>包，则谁会在发送最后一个<code>ACK</code>包后进入<code>TIME_WAIT</code>状态，此状态会等待<code>2MSL</code>的时间（大概2-4分钟）。在这个阶段，服务器绑定的端口资源是被占用的。等这个阶段过了，端口会进入<code>CLOSED</code>状态，则可以被再次利用。</p>\n<p>如何解决服务器重启端口被占用的问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>在创建<code>socket</code>实例之后，设置可以重用地址，就可以解决报错问题。</p>\n</blockquote>\n<h2 id=\"三、TCP协议3次握手、4次挥手\"><a href=\"#三、TCP协议3次握手、4次挥手\" class=\"headerlink\" title=\"三、TCP协议3次握手、4次挥手\"></a>三、TCP协议3次握手、4次挥手</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/fHQGzW.jpg\" alt=\"fHQGzW\"></p>\n<h3 id=\"三次握手：\"><a href=\"#三次握手：\" class=\"headerlink\" title=\"三次握手：\"></a>三次握手：</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"三次握手\"></p>\n<p><strong>三次握手流程和目的都相对简单：</strong></p>\n<ol>\n<li><p>客户端向服务器发送<code>SYN flag</code>的包，并携带<code>seq</code>为<code>x</code>。</p>\n</li>\n<li><p>服务器收到<code>SYN</code>包后，开始准备对应的资源，准备好后，发送<code>SYN+ACK</code>包，这实际上是服务器回应客户端的<code>ACK</code>包，合并了服务器让客户端准备资源的<code>SYN</code>包。所以携带了对应<code>SYN</code>的<code>seq y</code>，以及<code>ACK=x+1</code>。</p>\n</li>\n<li><p>客户端收到服务器发来的<code>SYN</code>包，则回复<code>ACK</code>包，<code>ack=y+1</code>。</p>\n</li>\n</ol>\n<p>这样3次握手就建立好了，客户端和服务器都进入<code>ESTABLISHED</code>状态，表示资源都准备完毕。所以TCP的三次握手实际上是客户端与服务器之间互相要求准备资源以及回复资源已准备好的过程。</p>\n<p>理论上应该是4次握手，但为了增加性能减小时间开销，中间的两次数据传输（服务器发送的<code>SYN</code>和<code>ACK</code>）合并在一起了。所以变成了3次握手。</p>\n<h3 id=\"四次挥手：\"><a href=\"#四次挥手：\" class=\"headerlink\" title=\"四次挥手：\"></a>四次挥手：</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"四次挥手\"></p>\n<p> <strong>四次挥手相对比较复杂：</strong></p>\n<ol>\n<li><p>假设客户端在完成数据传输后，首先开始发送<code>FIN</code>包（也就是我们的客户端程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），则表示客户端已经没有需要发送给服务器的数据。由于<code>SOCKET</code>是全双工的，所以客户端发送<code>FIN</code>只是表示客户端以后都不在发送数据，但此时还可以接收数据。</p>\n</li>\n<li><p>客户端发送出<code>FIN</code>包后，就会进入<code>FIN WAIT-1</code>状态，该状态一般很难观测到，因为该状态只维持到服务器响应<code>ACK</code>包，一般情况下都是瞬间就返回了（注意这里和3次握手不同，这里的<code>ACK</code>包不能与服务器发送的FIN包合并，因为服务器可能还有数据要继续发送给客户端，所以服务器可能要等到数据传输完毕才会向客户端发送<code>FIN</code>包，这就是为什么是四次挥手）</p>\n</li>\n<li><p>服务器收到客户端发来的<code>FIN</code>包，则马上发送回应的ACK包，此包没有意外的话，会瞬间到达客户端。</p>\n</li>\n<li><p>客户端收到<code>ACK</code>包后，结束<code>FIN WAIT-1</code>状态，进入<code>FIN WAIT-2</code>状态，该状态的目的是等待服务器发送<code>FIN</code>包。</p>\n</li>\n<li><p>服务器完成了最后的数据发送，则向客户端发送<code>FIN</code>包（也就是服务器程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），表示服务器以后也没有数据要发送了，开始断开服务器的发送通道。</p>\n</li>\n<li><p>服务器在发送出<code>FIN</code>后，会进入<code>LAST-ACK</code>状态（例如等待4s）。这个状态是为了等待客户端恢复确认的<code>ACK</code>包，因为服务器发送出去的<code>FIN</code>包，他无法确认客户端是否收到，如果超出<code>waittime</code>还未收到<code>ACK</code>包，则重新发送FIN包。</p>\n</li>\n<li><p>客户端如果正确收到了服务器发送的<code>FIN</code>包，理论上应该释放资源，并发送<code>ACK</code>包。但是如果客户端发出的<code>ACK</code>包由于某些原因，服务器并未收到，那么服务器在几秒后会重新发送<code>FIN</code>包，但客户端已经把资源释放掉了，则就会出现问题。怎么解决这个问题呢？解决方案是，客户端收到服务器发送的<code>FIN</code>包，并不马上释放资源（例如绑定的端口等），而是先回复<code>ACK</code>包，并进入<code>TIME-WAIT</code>状态，这个状态要持续<code>2MSL</code>（2-3分钟）。如果在<code>2MSL</code>时间段中，服务器都没有重新发送FIN包，则表示服务器已经收到了自己发出的<code>ACK</code>包，这是客户端才放心的释放资源。</p>\n</li>\n<li><p>最终客户端在等待<code>2MSL</code>后，进入<code>CLOSED</code>状态。服务器在确认收到最后一个<code>ACK</code>包后直接进入<code>CLOSED</code>状态。</p>\n</li>\n</ol>\n<p><strong>资源占用的解释：</strong></p>\n<p>我们知道，客户端是使用随机端口来发起<code>TCP</code>连接的，所以客户端首先发送<code>FIN</code>包的话，最后的<code>2MSL</code>是由客户端来等待，即使2-3分钟资源未被释放，也不会影响客户端另外发起新的请求（因为可用的随机端口很多，不会出现冲突）。</p>\n<p>但是如果由服务器来首先发起<code>FIN</code>，则最后的<code>2MSL</code>要由服务器来等待，则在2-3分钟内，服务器绑定的端口并未被释放，所以如果此时重启服务器，则会出现资源未释放、端口被占用的情况。</p>\n<p><strong>结论：尽量让客户端来发起断开连接的请求。如果要使服务器断开请求还不会出现占用端口的情况，则可以参考前面第二节的方法，为服务器SOCKET设置资源重用的属性。</strong></p>\n<h2 id=\"四、改善简单WEB-Server\"><a href=\"#四、改善简单WEB-Server\" class=\"headerlink\" title=\"四、改善简单WEB Server\"></a>四、改善简单WEB Server</h2><p>前面我们实现的简单Web Server不管客户端请求的<code>URI</code>是什么，我们都只能返回固定的<code>&quot;Hello</code>“字符串。我们对其进行改善，让其根据接收到的请求，来返回不同的页面数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-comment\"># 接收请求</span><br>    recv_msg = <span class=\"hljs-string\">&quot;&quot;</span><br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>    <span class=\"hljs-keyword\">if</span> recv_msg == <span class=\"hljs-string\">&quot;&quot;</span>:<br>        print(<span class=\"hljs-string\">&quot;recv null&quot;</span>)<br>        new_socket.close()<br>        <span class=\"hljs-keyword\">return</span><br><br>    <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>    recv_lines = recv_msg.splitlines()<br>    print(recv_lines)<br>    <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>    ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br>    <span class=\"hljs-keyword\">if</span> ret:<br>        <span class=\"hljs-comment\"># 获取URI字符串</span><br>        file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>        <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>            file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">try</span>:<br>        <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>        fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span>:<br>        <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>        html_content = fp.read()<br>        fp.close()<br>        <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>        <span class=\"hljs-comment\"># 返回响应头</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>        <span class=\"hljs-comment\"># 返回响应体</span><br>        new_socket.send(html_content)<br><br>    <span class=\"hljs-comment\"># 关闭该次socket连接</span><br>    new_socket.close()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></div></td></tr></table></figure>\n<p>以上代码重点在于解析出<code>GET /index.html HTTP/1.1</code>中的<code>/index.html</code>部分，知道服务器要请求什么内容，然后按需找到对应的文件，已二进制方式读取文件内容并返回给客户端即可。</p>\n<p>如果客户端没有指定访问的内容，则默认返回<code>index.html</code>页面。</p>\n<p>注意异常的处理。</p>\n","site":{"data":{}},"excerpt":"<p>本篇文章介绍如何实现一个简单 的Web Server 以及对应的问题解决方案。</p>\n<h2 id=\"一、如何使用Python实现一个返回固定页面的Web-Server\"><a href=\"#一、如何使用Python实现一个返回固定页面的Web-Server\" class=\"headerlink\" title=\"一、如何使用Python实现一个返回固定页面的Web Server\"></a>一、如何使用Python实现一个返回固定页面的Web Server</h2><ol>\n<li><p>使用socket创建一个TCP Server</p>\n</li>\n<li><p>接受来自浏览器的TCP链接，并接收HTTP请求</p>\n</li>\n<li><p>返回固定响应数据给浏览器</p>\n</li>\n</ol>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket, time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-comment\"># 接收请求</span><br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>)<br>    print(recv_msg)<br>    <span class=\"hljs-comment\"># 响应数据</span><br>    response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>    response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>    response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span><br>    <span class=\"hljs-comment\"># 返回响应数据（二进制数据）</span><br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-comment\"># 关闭该次socket连接</span><br>    new_socket.close()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>\n<h3 id=\"缺陷：\"><a href=\"#缺陷：\" class=\"headerlink\" title=\"缺陷：\"></a>缺陷：</h3><ol>\n<li>这种简单的web server是阻塞的，同时只能处理一个请求。 </li>\n</ol>\n<h2 id=\"二、解决服务器端口占用问题\"><a href=\"#二、解决服务器端口占用问题\" class=\"headerlink\" title=\"二、解决服务器端口占用问题\"></a>二、解决服务器端口占用问题</h2><p>问题描述：当浏览器访问服务器时，服务器收到请求，马上返回响应数据，并且调用了<code>new_socket.close()</code>。此时，马上重启服务器的话，可能会提示端口被占用。</p>\n<p>这是因为TCP的四次挥手过程中，谁先发送<code>FIN</code>包，则谁会在发送最后一个<code>ACK</code>包后进入<code>TIME_WAIT</code>状态，此状态会等待<code>2MSL</code>的时间（大概2-4分钟）。在这个阶段，服务器绑定的端口资源是被占用的。等这个阶段过了，端口会进入<code>CLOSED</code>状态，则可以被再次利用。</p>\n<p>如何解决服务器重启端口被占用的问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在创建<code>socket</code>实例之后，设置可以重用地址，就可以解决报错问题。</p>\n</blockquote>\n<h2 id=\"三、TCP协议3次握手、4次挥手\"><a href=\"#三、TCP协议3次握手、4次挥手\" class=\"headerlink\" title=\"三、TCP协议3次握手、4次挥手\"></a>三、TCP协议3次握手、4次挥手</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/fHQGzW.jpg\" alt=\"fHQGzW\"></p>\n<h3 id=\"三次握手：\"><a href=\"#三次握手：\" class=\"headerlink\" title=\"三次握手：\"></a>三次握手：</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"三次握手\"></p>\n<p><strong>三次握手流程和目的都相对简单：</strong></p>\n<ol>\n<li><p>客户端向服务器发送<code>SYN flag</code>的包，并携带<code>seq</code>为<code>x</code>。</p>\n</li>\n<li><p>服务器收到<code>SYN</code>包后，开始准备对应的资源，准备好后，发送<code>SYN+ACK</code>包，这实际上是服务器回应客户端的<code>ACK</code>包，合并了服务器让客户端准备资源的<code>SYN</code>包。所以携带了对应<code>SYN</code>的<code>seq y</code>，以及<code>ACK=x+1</code>。</p>\n</li>\n<li><p>客户端收到服务器发来的<code>SYN</code>包，则回复<code>ACK</code>包，<code>ack=y+1</code>。</p>\n</li>\n</ol>\n<p>这样3次握手就建立好了，客户端和服务器都进入<code>ESTABLISHED</code>状态，表示资源都准备完毕。所以TCP的三次握手实际上是客户端与服务器之间互相要求准备资源以及回复资源已准备好的过程。</p>\n<p>理论上应该是4次握手，但为了增加性能减小时间开销，中间的两次数据传输（服务器发送的<code>SYN</code>和<code>ACK</code>）合并在一起了。所以变成了3次握手。</p>\n<h3 id=\"四次挥手：\"><a href=\"#四次挥手：\" class=\"headerlink\" title=\"四次挥手：\"></a>四次挥手：</h3><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"四次挥手\"></p>\n<p> <strong>四次挥手相对比较复杂：</strong></p>\n<ol>\n<li><p>假设客户端在完成数据传输后，首先开始发送<code>FIN</code>包（也就是我们的客户端程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），则表示客户端已经没有需要发送给服务器的数据。由于<code>SOCKET</code>是全双工的，所以客户端发送<code>FIN</code>只是表示客户端以后都不在发送数据，但此时还可以接收数据。</p>\n</li>\n<li><p>客户端发送出<code>FIN</code>包后，就会进入<code>FIN WAIT-1</code>状态，该状态一般很难观测到，因为该状态只维持到服务器响应<code>ACK</code>包，一般情况下都是瞬间就返回了（注意这里和3次握手不同，这里的<code>ACK</code>包不能与服务器发送的FIN包合并，因为服务器可能还有数据要继续发送给客户端，所以服务器可能要等到数据传输完毕才会向客户端发送<code>FIN</code>包，这就是为什么是四次挥手）</p>\n</li>\n<li><p>服务器收到客户端发来的<code>FIN</code>包，则马上发送回应的ACK包，此包没有意外的话，会瞬间到达客户端。</p>\n</li>\n<li><p>客户端收到<code>ACK</code>包后，结束<code>FIN WAIT-1</code>状态，进入<code>FIN WAIT-2</code>状态，该状态的目的是等待服务器发送<code>FIN</code>包。</p>\n</li>\n<li><p>服务器完成了最后的数据发送，则向客户端发送<code>FIN</code>包（也就是服务器程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），表示服务器以后也没有数据要发送了，开始断开服务器的发送通道。</p>\n</li>\n<li><p>服务器在发送出<code>FIN</code>后，会进入<code>LAST-ACK</code>状态（例如等待4s）。这个状态是为了等待客户端恢复确认的<code>ACK</code>包，因为服务器发送出去的<code>FIN</code>包，他无法确认客户端是否收到，如果超出<code>waittime</code>还未收到<code>ACK</code>包，则重新发送FIN包。</p>\n</li>\n<li><p>客户端如果正确收到了服务器发送的<code>FIN</code>包，理论上应该释放资源，并发送<code>ACK</code>包。但是如果客户端发出的<code>ACK</code>包由于某些原因，服务器并未收到，那么服务器在几秒后会重新发送<code>FIN</code>包，但客户端已经把资源释放掉了，则就会出现问题。怎么解决这个问题呢？解决方案是，客户端收到服务器发送的<code>FIN</code>包，并不马上释放资源（例如绑定的端口等），而是先回复<code>ACK</code>包，并进入<code>TIME-WAIT</code>状态，这个状态要持续<code>2MSL</code>（2-3分钟）。如果在<code>2MSL</code>时间段中，服务器都没有重新发送FIN包，则表示服务器已经收到了自己发出的<code>ACK</code>包，这是客户端才放心的释放资源。</p>\n</li>\n<li><p>最终客户端在等待<code>2MSL</code>后，进入<code>CLOSED</code>状态。服务器在确认收到最后一个<code>ACK</code>包后直接进入<code>CLOSED</code>状态。</p>\n</li>\n</ol>\n<p><strong>资源占用的解释：</strong></p>\n<p>我们知道，客户端是使用随机端口来发起<code>TCP</code>连接的，所以客户端首先发送<code>FIN</code>包的话，最后的<code>2MSL</code>是由客户端来等待，即使2-3分钟资源未被释放，也不会影响客户端另外发起新的请求（因为可用的随机端口很多，不会出现冲突）。</p>\n<p>但是如果由服务器来首先发起<code>FIN</code>，则最后的<code>2MSL</code>要由服务器来等待，则在2-3分钟内，服务器绑定的端口并未被释放，所以如果此时重启服务器，则会出现资源未释放、端口被占用的情况。</p>\n<p><strong>结论：尽量让客户端来发起断开连接的请求。如果要使服务器断开请求还不会出现占用端口的情况，则可以参考前面第二节的方法，为服务器SOCKET设置资源重用的属性。</strong></p>\n<h2 id=\"四、改善简单WEB-Server\"><a href=\"#四、改善简单WEB-Server\" class=\"headerlink\" title=\"四、改善简单WEB Server\"></a>四、改善简单WEB Server</h2><p>前面我们实现的简单Web Server不管客户端请求的<code>URI</code>是什么，我们都只能返回固定的<code>&quot;Hello</code>“字符串。我们对其进行改善，让其根据接收到的请求，来返回不同的页面数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-comment\"># 接收请求</span><br>    recv_msg = <span class=\"hljs-string\">&quot;&quot;</span><br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>    <span class=\"hljs-keyword\">if</span> recv_msg == <span class=\"hljs-string\">&quot;&quot;</span>:<br>        print(<span class=\"hljs-string\">&quot;recv null&quot;</span>)<br>        new_socket.close()<br>        <span class=\"hljs-keyword\">return</span><br><br>    <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>    recv_lines = recv_msg.splitlines()<br>    print(recv_lines)<br>    <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>    ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br>    <span class=\"hljs-keyword\">if</span> ret:<br>        <span class=\"hljs-comment\"># 获取URI字符串</span><br>        file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>        <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>            file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">try</span>:<br>        <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>        fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span>:<br>        <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>        html_content = fp.read()<br>        fp.close()<br>        <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>        <span class=\"hljs-comment\"># 返回响应头</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>        <span class=\"hljs-comment\"># 返回响应体</span><br>        new_socket.send(html_content)<br><br>    <span class=\"hljs-comment\"># 关闭该次socket连接</span><br>    new_socket.close()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 处理每个客户端的请求</span><br>        handle_request(new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>\n<p>以上代码重点在于解析出<code>GET /index.html HTTP/1.1</code>中的<code>/index.html</code>部分，知道服务器要请求什么内容，然后按需找到对应的文件，已二进制方式读取文件内容并返回给客户端即可。</p>\n<p>如果客户端没有指定访问的内容，则默认返回<code>index.html</code>页面。</p>\n<p>注意异常的处理。</p>"},{"title":"网络通信-长连接与短连接","date":"2020-08-16T10:27:27.000Z","_content":"\n简单介绍长连接与短连接的优缺点。\n\n## 1. 短连接：\n\n![短连接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/短连接.png)  \n\n1. client 向 server 发起连接请求  \n2. server 接到请求，双方建立连接  \n3. client 向 server 发送消息  \n4. server 回应 client  \n5. 一次读写完成，此时双方任何一个都可以发起 close 操作\n\n## 2. 长连接：\n\n![长连接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/长连接.png)  \n\n1. client 向 server 发起连接  \n2. server 接到请求，双方建立连接  \n3. client 向 server 发送消息  \n4. server 回应 client  \n5. 一次读写完成，连接不关闭  \n6. 后续读写操作…  \n7. 长时间操作之后 client 发起关闭请求\n\n## 3. 优缺点分析\n\n1.  长连接可以省去较多的 TCP 建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用\n\n2.  短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢\n\n## 4. 总结\n\n1.  小的 WEB 网站的 http 服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字保持存活。\n\n2. 对于中大型 WEB 网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成 socket 错误。","source":"_posts/网络通信-长连接与短连接.md","raw":"---\ntitle: 网络通信-长连接与短连接\ndate: 2020-08-16 18:27:27\ncategories:\n  - 技术\n  - 网络通信\n  - TCP\ntags:\n  - TCP\n  - 短连接\n  - 长连接\n---\n\n简单介绍长连接与短连接的优缺点。\n\n## 1. 短连接：\n\n![短连接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/短连接.png)  \n\n1. client 向 server 发起连接请求  \n2. server 接到请求，双方建立连接  \n3. client 向 server 发送消息  \n4. server 回应 client  \n5. 一次读写完成，此时双方任何一个都可以发起 close 操作\n\n## 2. 长连接：\n\n![长连接](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/长连接.png)  \n\n1. client 向 server 发起连接  \n2. server 接到请求，双方建立连接  \n3. client 向 server 发送消息  \n4. server 回应 client  \n5. 一次读写完成，连接不关闭  \n6. 后续读写操作…  \n7. 长时间操作之后 client 发起关闭请求\n\n## 3. 优缺点分析\n\n1.  长连接可以省去较多的 TCP 建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用\n\n2.  短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢\n\n## 4. 总结\n\n1.  小的 WEB 网站的 http 服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字保持存活。\n\n2. 对于中大型 WEB 网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成 socket 错误。","slug":"网络通信-长连接与短连接","published":1,"updated":"2021-01-25T02:59:18.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnue30058jjlnei3w2jcv","content":"<p>简单介绍长连接与短连接的优缺点。</p>\n<h2 id=\"1-短连接：\"><a href=\"#1-短连接：\" class=\"headerlink\" title=\"1. 短连接：\"></a>1. 短连接：</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E7%9F%AD%E8%BF%9E%E6%8E%A5.png\" alt=\"短连接\">  </p>\n<ol>\n<li>client 向 server 发起连接请求  </li>\n<li>server 接到请求，双方建立连接  </li>\n<li>client 向 server 发送消息  </li>\n<li>server 回应 client  </li>\n<li>一次读写完成，此时双方任何一个都可以发起 close 操作</li>\n</ol>\n<h2 id=\"2-长连接：\"><a href=\"#2-长连接：\" class=\"headerlink\" title=\"2. 长连接：\"></a>2. 长连接：</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E9%95%BF%E8%BF%9E%E6%8E%A5.png\" alt=\"长连接\">  </p>\n<ol>\n<li>client 向 server 发起连接  </li>\n<li>server 接到请求，双方建立连接  </li>\n<li>client 向 server 发送消息  </li>\n<li>server 回应 client  </li>\n<li>一次读写完成，连接不关闭  </li>\n<li>后续读写操作…  </li>\n<li>长时间操作之后 client 发起关闭请求</li>\n</ol>\n<h2 id=\"3-优缺点分析\"><a href=\"#3-优缺点分析\" class=\"headerlink\" title=\"3. 优缺点分析\"></a>3. 优缺点分析</h2><ol>\n<li><p>长连接可以省去较多的 TCP 建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用</p>\n</li>\n<li><p>短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢</p>\n</li>\n</ol>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><ol>\n<li><p>小的 WEB 网站的 http 服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字保持存活。</p>\n</li>\n<li><p>对于中大型 WEB 网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成 socket 错误。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>简单介绍长连接与短连接的优缺点。</p>\n<h2 id=\"1-短连接：\"><a href=\"#1-短连接：\" class=\"headerlink\" title=\"1. 短连接：\"></a>1. 短连接：</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E7%9F%AD%E8%BF%9E%E6%8E%A5.png\" alt=\"短连接\">  </p>\n<ol>\n<li>client 向 server 发起连接请求  </li>\n<li>server 接到请求，双方建立连接  </li>\n<li>client 向 server 发送消息  </li>\n<li>server 回应 client  </li>\n<li>一次读写完成，此时双方任何一个都可以发起 close 操作</li>\n</ol>\n<h2 id=\"2-长连接：\"><a href=\"#2-长连接：\" class=\"headerlink\" title=\"2. 长连接：\"></a>2. 长连接：</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E9%95%BF%E8%BF%9E%E6%8E%A5.png\" alt=\"长连接\">  </p>\n<ol>\n<li>client 向 server 发起连接  </li>\n<li>server 接到请求，双方建立连接  </li>\n<li>client 向 server 发送消息  </li>\n<li>server 回应 client  </li>\n<li>一次读写完成，连接不关闭  </li>\n<li>后续读写操作…  </li>\n<li>长时间操作之后 client 发起关闭请求</li>\n</ol>\n<h2 id=\"3-优缺点分析\"><a href=\"#3-优缺点分析\" class=\"headerlink\" title=\"3. 优缺点分析\"></a>3. 优缺点分析</h2><ol>\n<li><p>长连接可以省去较多的 TCP 建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用</p>\n</li>\n<li><p>短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢</p>\n</li>\n</ol>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><ol>\n<li><p>小的 WEB 网站的 http 服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字保持存活。</p>\n</li>\n<li><p>对于中大型 WEB 网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成 socket 错误。</p>\n</li>\n</ol>\n"},{"title":"DRF-JWT认证、权限、限流","date":"2020-03-15T15:22:25.000Z","_content":"DRF框架的一系列功能：认证、权限、限流，都是依赖于JWT。\n\n整个流程就是这样的:\n\n-   客户端发送用户名和密码到服务端，\n-   验证通过，生成JWT\n-   返回JWT给客户端\n\n-   下次，客户端发送请求时，携带JWT，一般是在请求头里加入`Authorization`，并加上`JWT`标注：\n\n```js\n{\n  headers: {\n    'Authorization': 'JWT ' + token\n}\n```\n\n-   服务端会验证 token，如果验证通过就会返回相应的资源\n-   在此基础上，可以实现权限和限流\n\n流程图如下：\n\n![jwt-diagram](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/1821058-2e28fe6c997a60c9.png) \n\n\n\n## 以 Django 作为服务端\n\n### 环境搭建\n\n```python\npip install django  django-cors-headers djangorestframework djangorestframework-jwt\n```\n\n### 项目配置信息\n\n> `djangodemo/settings.py`\n\n```python\nINSTALLED_APPS = [\n   \t...,\n    'rest_framework',\n    'corsheaders',\n    'users'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# 跨域参数,允许所有源访问\nCORS_ORIGIN_ALLOW_ALL = True\n\n# 自定义用户模型类\nAUTH_USER_MODEL = 'users.UserModel'\n```\n\n### 用户模型类\n\n> `users/models.py`\n\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass UserModel(AbstractUser):\n    \"\"\"继承django内置的用户类，并重写，注意：必须在settings.py中指明\"\"\"\n    phone = models.CharField(max_length=11, unique=True, verbose_name='手机')\n\n    class Meta:\n        ordering = ['id']\n        db_table = 'db_user'\n        verbose_name = '用户'\n        verbose_name_plural = '用户'\n\n    def __str__(self):\n        return self.username\n```\n\n### 序列化类\n\n> `users/ser.py`\n\n```python\nfrom rest_framework import serializers\nfrom .models import UserModel\nfrom django.contrib.auth.hashers import make_password\nimport re\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    def create(self, validated_data):\n        return UserModel.objects.create_user(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.username = validated_data.get('username', instance.username)\n        instance.phone = validated_data.get('phone', instance.phone)\n        instance.email = validated_data.get('email', instance.email)\n\n        password = validated_data['password']\n        if not password:\n            instance.password = make_password(password)\n\n        instance.save()\n\n        return instance\n\n    def validate_password(self, value):\n        \"\"\"\n        验证密码不能全是小写字母，不能全是大写字母，也不能全是数字\n        \"\"\"\n        if not re.match(r'(?!^\\d*$)(?![a-z]$)(?![A-Z]$).{6,}$', value):\n            raise serializers.ValidationError('密码等级不够')\n        return value\n\n    def validate_phone(self, value):\n        \"\"\"\n        校验手机号是否合法\n        \"\"\"\n        if not re.match(r'1[3-7]\\d{9}$', value):\n            raise serializers.ValidationError('手机号不合法')\n        return value\n\n    class Meta:\n        model = UserModel\n        fields = ('id', 'username', 'phone', 'password', 'email')\n        read_only_fields = ('id',)\n        extra_kwargs = {\n            'password': {\n                'write_only': True\n            }\n        }\n```\n\n### 注册\n\n#### 视图\n\n>   `users/views.py`\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import CreateModelMixin\nfrom users.ser import UserSerializer, UserModel\n\n\n# 创建注册视图类\nclass RegisterView(GenericAPIView, CreateModelMixin):\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n```\n\n#### 路由\n\n```python\nfrom django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('register/', RegisterView.as_view()), # 注册路由  \n]\n```\n\n### 登录\n\n#### 自定义Django登录验证\n\n默认django只支持用户名和密码登录，想要支持多种方式登录，必须重写认证类\n\n> `users/utils.py`\n\n```python\nfrom .models import UserModel\nfrom django.contrib.auth.backends import ModelBackend\n\nclass UserModelBackend(ModelBackend):\n    \"\"\"user验证\"\"\"\n\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            if re.match(r'^1[3-9]\\d{9}$', username):\n                user = UserModel.objects.get(phone=username)\n            else:\n                user = UserModel.objects.get(username=username)\n        except UserModel.DoesNotExist:\n            return None\n        if user.check_password(password) and self.user_can_authenticate(user):\n            return user\n```\n\n#### 自定义返回数据\n\n> 登录成功，需要生成JWT，返回给客户端，之后的认证通过生成的jwt实现\n\n```python \n# rest_framework_jwt插件已经内置了登录视图，登录成功，返回JWT,注意，默认登录成功只会返回token，如果想要其他用户信息，必须自定义返回数据\nrest_framework_jwt.views.obtain_jwt_token \n\n# rest_framework_jwt插件已经内置了刷新jwt视图，在 jwt失效之前，返回新的jwt\nrest_framework_jwt.views.refresh_jwt_token\n```\n\n> `users/utils.py`\n\n```python\ndef jwt_response_payload_handler(token, user=None, request=None):\n    \"\"\"\n    自定义jwt认证成功返回数据\n    \"\"\"\n    return {\n        'token': token,\n        'id': user.id,\n        'username': user.username\n    }\n```\n\n#### 配置信息\n\n```python\nimport datetime\n\n# 多种方式登录验证\nAUTHENTICATION_BACKENDS = ['users.utils.UserModelBackend']\n\n# JWT配置信息\nJWT_AUTH = {\n    # 指明token的有效期， 默认5分\n    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=5),\n    'JWT_ALLOW_REFRESH': True,\n    # 在多久间隔内可以用它来刷新以便获取新的token，默认是7天\n    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),\n    # 客户端首先调用obtain_jwt_token进行登录操作，\n    # 之后必须每隔小于5分钟就刷新一次token，才能保证不掉线。\n    # 然而即使一直保持在线，上限也只有7天，7天过后必须重新登录，这才是5mins + 7days的确切含义\n\n    # 自定义jwt认证成功返回数据\n    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',\n}\n```\n\n#### 路由\n\n```python\nfrom django.urls import path\nfrom rest_framework_jwt.views import obtain_jwt_token, refresh_jwt_token\n\nurlpatterns = [\n    path('login/', obtain_jwt_token), # 登录路由\n    path('refresh/', refresh_jwt_token), # 刷新token\n]\n```\n\n### 认证\n\n当客户端请求时，会携带上一步生成的`token`，因此，需要在 服务端验证`token`，从而判断是否允许进行下一步操作\n\n#### 全局配置\n\n```python\nREST_FRAMEWORK = {\n    # 指定drf认证机制\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # JWT认证\n        # 'rest_framework.authentication.SessionAuthentication',  # session认证\n        # 'rest_framework.authentication.BasicAuthentication',  # 基本认证\n    ]\n}\n```\n\n#### 局部配置\n\n可以在具体的视图中通过`authentication_classes`属性来设置\n\n```python\n# 个人信息    \nclass UserInfoAPIView(APIView):\n    authentication_classes = [TokenAuthentication]  # 指明认证类\n\n    def get(self, request):\n        user = request.user  # 只要认证成功，请求对象中就会存在 user对象\n        ser = UserInfoSerializer(user)\n        return Response(ser.data)\n```\n\n### 权限\n\n上面的视图，仍然存在一个问题：客户端发送jwt，服务器可以正常解析出登录用户；但是，如果没有发送jwt，再通过`request.user`获取用户对象，就会出错。因此，需要对该功能进行权限验证，只有登录用户才可以访问，否则，就拒绝访问\n\n总而言之，权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。\n\n在执行视图的`dispatch()`方法前，会先进行视图访问权限的判断\n在通过`get_object()`获取具体对象时，会进行对象访问权限的判断\n\n权限分为四类：\n\n- `AllowAny`: 允许所有用户， 默认权限\n- `IsAuthenticated`: 仅通过认证的用户\n- `IsAdminUser`: 仅管理员用户\n- `IsAuthenticatedOrReadOnly`: 认证的用户可以完全操作，否则只能`get`读取\n\n#### 全局配置\n\n可以在项目的配置文件`settings.py`中设置默认的权限管理类\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    )\n}\n```\n\n如果未指明，则采用如下默认配置\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.AllowAny',\n    )\n}\n```\n\n#### 局部配置\n\n可以在具体的视图中通过`permission_classes`属性来设置\n\n```python\n# 个人信息    \nclass UserInfoAPIView(APIView):\n    authentication_classes = [JSONWebTokenAuthentication] # 指明认证类\n    permission_classes = [IsAuthenticated]  # 指明只有认证用户可以访问\n\n    def get(self, request):\n        user = request.user  # 只要认证成功，且权限校验通过，请求对象中就一定会存在 user对象\n        ser = UserInfoSerializer(user)\n        return Response(ser.data)\n    \n# 创建允许管理员查询所有用户的视图类\nclass UserView(GenericAPIView, ListModelMixin):\n  \t\"\"\"查询所有注册用户\"\"\"\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\n    authentication_classes = [JSONWebTokenAuthentication] # 指明认证类\n    permission_classes = [IsAdminUser]  # 指定权限验证,限制管理员才可以查询所有用户\n\n    def get(self, request, *args, **kwrags):\n        return self.list(request, *args, **kwrags)\n```\n\n\n\n### 限流Throttling\n\n可以对接口访问的频次进行限制，以减轻服务器压力。特别是限制爬虫的抓取。\n\n#### 针对用户进行限制\n\n>   可以在配置文件中，使用`DEFAULT_THROTTLE_CLASSES` 和 `DEFAULT_THROTTLE_RATES`进行全局配置\n\n##### 全局配置\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 限制所有匿名未认证用户，使用IP区分用户\n        'rest_framework.throttling.AnonRateThrottle',\n        # 限制认证用户，使用User id 来区分\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 可以使用 second, minute, hour 或day来指明周期\n        'anon': '3/minute',\n        'user': '5/minute'\n    }\n}\n```\n\n##### 局部配置\n\n视图中使用`throttle_classes`属性设置限流用户类型\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import ListModelMixin\nfrom rest_framework.throttling import UserRateThrottle, AnonRateThrottle\n\nfrom .serializer import UserSerializer, User\n\nclass UserView(GenericAPIView, ListModelMixin):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    throttle_classes = (UserRateThrottle, AnonRateThrottle)\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n```\n\n在项目配置文件中针对用户类型设置具体频率\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_RATES': {\n        # 可以使用 second, minute, hour 或day来指明周期\n        'anon': '3/minute',\n        'user': '5/minute'\n    }\n}\n```\n\n#### 针对视图限制\n\n视图中使用`throttle_scope`属性设置具体配置信息\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import ListModelMixin\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom .serializer import UserSerializer, User\n\nclass UserView(GenericAPIView, ListModelMixin):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    throttle_scope = 'downloads'\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n```\n\n在项目配置文件中设置具体频率\n\n```python\n'DEFAULT_THROTTLE_CLASSES': (\n    # 限制用户对于每个视图的访问频次，使用ip或user id\n    'rest_framework.throttling.ScopedRateThrottle',\n),\n'DEFAULT_THROTTLE_RATES': {\n    'downloads': '3/minute'\n}\n```\n\n## 以 Vue 作为前端\n\n#### 路由前置守卫\n\n> `router/index.js`\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Login from '@/components/Login'\nimport Users from '@/components/Users'\n\nVue.use(Router);\n\nlet router = new Router({\n  routes: [\n    {\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      path: '/Users',\n      name: 'Users',\n      component: Users\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  const isLogin = localStorage.getItem('token') ? true : false;\n  if (to.path == '/login' || to.path == '/register') {\n    //'login'和'register'相当于是路由白名单\n    localStorage.setItem(\"preRoute\", router.currentRoute.fullPath);\n    next();\n  } else {\n    //如果token存在，就正常跳转，如果不存在，则说明未登陆，则跳转到'login'\n    isLogin ? next() : next(\"/login\");\n  }\n})\n\nexport default router\n```\n\n#### axios拦截器\n\n> `main.js`\n\n```javascript\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/'\n\n// 添加请求拦截器\naxios.interceptors.request.use(function (config) {\n  // 在发送请求之前, 添加 token 到请求头\n  if (localStorage.token) {\n    config.headers['Authorization'] = 'JWT ' + localStorage.getItem('token');\n    config.headers['Accept'] = 'application/json';\n  }\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 自定义的 axios 响应拦截器\naxios.interceptors.response.use((response) => {\n  // 判断一下响应中是否有 token，如果有就直接使用此 token 替换掉本地的 token。你可以根据你的业务需求自己编写更新 token 的逻辑\n  var token = response.data.token;\n\n  if (token) {\n    localStorage.setItem('token', token);\n  }\n  return response\n}, (error) => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 这里写清除token的代码\n        console.log(\"401\")\n        localStorage.removeItem('token');\n        /* 普通401拦截直接返回到登录页面 */\n        router.push('/login');\n    }\n  }\n  return Promise.reject(error)\n});\n\nVue.prototype.$axios = axios\n```\n\n#### 登录页面\n\n```html\n<template>\n  <div>\n    用户名: <input type=\"text\" v-model=\"userInfo.username\"/> <br>\n    密码: <input type=\"text\" v-model=\"userInfo.password\"/> <br>\n    <button @click=\"login\">登录</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"login\",\n  data() {\n    return {\n      userInfo: {\n        username: \"\",\n        password: \"\",\n      },\n    };\n  },\n  methods: {\n    login() {\n      this.$axios\n        .post(\"users/login/\", this.userInfo)\n        .then((resp) => {\n          const curr = localStorage.getItem('preRoute');\n          if (curr == null) {\n            this.$router.push({path: \"/user_center\"});\n          } else {\n            this.$router.push({path: curr});\n          }\n          this.$router.push({path: decodeURIComponent(url)});\n        })\n        .catch((err) => {\n        });\n    },\n  },\n};\n</script>\n```\n\n#### 用户展示页面\n\n```html\n<template>\n  <div>\n    <table>\n      <tr>\n        <td> {{ user.id }}</td>\n        <td> {{ user.username }}</td>\n        <td> {{ user.phone }}</td>\n      </tr>\n    </table>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: \"\"\n    }\n  },\n  methods: {\n    getData() {\n      this.$axios.get('/userinfo/')\n        .then(resp => {\n          console.log(resp.data)\n          this.user = resp.data\n        })\n    }\n  },\n  mounted() {\n    this.getData();\n  }\n}\n</script>\n```\n","source":"_posts/DRF-JWT认证、权限、限流.md","raw":"---\ntitle: DRF-JWT认证、权限、限流\ndate: 2020-03-15 23:22:25\ncategories:\n  - 技术\n  - python\n  - DRF\ntags:\n  - JWT\n  - 权限\n  - 认证\n  - 限流\n---\nDRF框架的一系列功能：认证、权限、限流，都是依赖于JWT。\n\n整个流程就是这样的:\n\n-   客户端发送用户名和密码到服务端，\n-   验证通过，生成JWT\n-   返回JWT给客户端\n\n-   下次，客户端发送请求时，携带JWT，一般是在请求头里加入`Authorization`，并加上`JWT`标注：\n\n```js\n{\n  headers: {\n    'Authorization': 'JWT ' + token\n}\n```\n\n-   服务端会验证 token，如果验证通过就会返回相应的资源\n-   在此基础上，可以实现权限和限流\n\n流程图如下：\n\n![jwt-diagram](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/1821058-2e28fe6c997a60c9.png) \n\n\n\n## 以 Django 作为服务端\n\n### 环境搭建\n\n```python\npip install django  django-cors-headers djangorestframework djangorestframework-jwt\n```\n\n### 项目配置信息\n\n> `djangodemo/settings.py`\n\n```python\nINSTALLED_APPS = [\n   \t...,\n    'rest_framework',\n    'corsheaders',\n    'users'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# 跨域参数,允许所有源访问\nCORS_ORIGIN_ALLOW_ALL = True\n\n# 自定义用户模型类\nAUTH_USER_MODEL = 'users.UserModel'\n```\n\n### 用户模型类\n\n> `users/models.py`\n\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass UserModel(AbstractUser):\n    \"\"\"继承django内置的用户类，并重写，注意：必须在settings.py中指明\"\"\"\n    phone = models.CharField(max_length=11, unique=True, verbose_name='手机')\n\n    class Meta:\n        ordering = ['id']\n        db_table = 'db_user'\n        verbose_name = '用户'\n        verbose_name_plural = '用户'\n\n    def __str__(self):\n        return self.username\n```\n\n### 序列化类\n\n> `users/ser.py`\n\n```python\nfrom rest_framework import serializers\nfrom .models import UserModel\nfrom django.contrib.auth.hashers import make_password\nimport re\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    def create(self, validated_data):\n        return UserModel.objects.create_user(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.username = validated_data.get('username', instance.username)\n        instance.phone = validated_data.get('phone', instance.phone)\n        instance.email = validated_data.get('email', instance.email)\n\n        password = validated_data['password']\n        if not password:\n            instance.password = make_password(password)\n\n        instance.save()\n\n        return instance\n\n    def validate_password(self, value):\n        \"\"\"\n        验证密码不能全是小写字母，不能全是大写字母，也不能全是数字\n        \"\"\"\n        if not re.match(r'(?!^\\d*$)(?![a-z]$)(?![A-Z]$).{6,}$', value):\n            raise serializers.ValidationError('密码等级不够')\n        return value\n\n    def validate_phone(self, value):\n        \"\"\"\n        校验手机号是否合法\n        \"\"\"\n        if not re.match(r'1[3-7]\\d{9}$', value):\n            raise serializers.ValidationError('手机号不合法')\n        return value\n\n    class Meta:\n        model = UserModel\n        fields = ('id', 'username', 'phone', 'password', 'email')\n        read_only_fields = ('id',)\n        extra_kwargs = {\n            'password': {\n                'write_only': True\n            }\n        }\n```\n\n### 注册\n\n#### 视图\n\n>   `users/views.py`\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import CreateModelMixin\nfrom users.ser import UserSerializer, UserModel\n\n\n# 创建注册视图类\nclass RegisterView(GenericAPIView, CreateModelMixin):\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n```\n\n#### 路由\n\n```python\nfrom django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('register/', RegisterView.as_view()), # 注册路由  \n]\n```\n\n### 登录\n\n#### 自定义Django登录验证\n\n默认django只支持用户名和密码登录，想要支持多种方式登录，必须重写认证类\n\n> `users/utils.py`\n\n```python\nfrom .models import UserModel\nfrom django.contrib.auth.backends import ModelBackend\n\nclass UserModelBackend(ModelBackend):\n    \"\"\"user验证\"\"\"\n\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            if re.match(r'^1[3-9]\\d{9}$', username):\n                user = UserModel.objects.get(phone=username)\n            else:\n                user = UserModel.objects.get(username=username)\n        except UserModel.DoesNotExist:\n            return None\n        if user.check_password(password) and self.user_can_authenticate(user):\n            return user\n```\n\n#### 自定义返回数据\n\n> 登录成功，需要生成JWT，返回给客户端，之后的认证通过生成的jwt实现\n\n```python \n# rest_framework_jwt插件已经内置了登录视图，登录成功，返回JWT,注意，默认登录成功只会返回token，如果想要其他用户信息，必须自定义返回数据\nrest_framework_jwt.views.obtain_jwt_token \n\n# rest_framework_jwt插件已经内置了刷新jwt视图，在 jwt失效之前，返回新的jwt\nrest_framework_jwt.views.refresh_jwt_token\n```\n\n> `users/utils.py`\n\n```python\ndef jwt_response_payload_handler(token, user=None, request=None):\n    \"\"\"\n    自定义jwt认证成功返回数据\n    \"\"\"\n    return {\n        'token': token,\n        'id': user.id,\n        'username': user.username\n    }\n```\n\n#### 配置信息\n\n```python\nimport datetime\n\n# 多种方式登录验证\nAUTHENTICATION_BACKENDS = ['users.utils.UserModelBackend']\n\n# JWT配置信息\nJWT_AUTH = {\n    # 指明token的有效期， 默认5分\n    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=5),\n    'JWT_ALLOW_REFRESH': True,\n    # 在多久间隔内可以用它来刷新以便获取新的token，默认是7天\n    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),\n    # 客户端首先调用obtain_jwt_token进行登录操作，\n    # 之后必须每隔小于5分钟就刷新一次token，才能保证不掉线。\n    # 然而即使一直保持在线，上限也只有7天，7天过后必须重新登录，这才是5mins + 7days的确切含义\n\n    # 自定义jwt认证成功返回数据\n    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',\n}\n```\n\n#### 路由\n\n```python\nfrom django.urls import path\nfrom rest_framework_jwt.views import obtain_jwt_token, refresh_jwt_token\n\nurlpatterns = [\n    path('login/', obtain_jwt_token), # 登录路由\n    path('refresh/', refresh_jwt_token), # 刷新token\n]\n```\n\n### 认证\n\n当客户端请求时，会携带上一步生成的`token`，因此，需要在 服务端验证`token`，从而判断是否允许进行下一步操作\n\n#### 全局配置\n\n```python\nREST_FRAMEWORK = {\n    # 指定drf认证机制\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # JWT认证\n        # 'rest_framework.authentication.SessionAuthentication',  # session认证\n        # 'rest_framework.authentication.BasicAuthentication',  # 基本认证\n    ]\n}\n```\n\n#### 局部配置\n\n可以在具体的视图中通过`authentication_classes`属性来设置\n\n```python\n# 个人信息    \nclass UserInfoAPIView(APIView):\n    authentication_classes = [TokenAuthentication]  # 指明认证类\n\n    def get(self, request):\n        user = request.user  # 只要认证成功，请求对象中就会存在 user对象\n        ser = UserInfoSerializer(user)\n        return Response(ser.data)\n```\n\n### 权限\n\n上面的视图，仍然存在一个问题：客户端发送jwt，服务器可以正常解析出登录用户；但是，如果没有发送jwt，再通过`request.user`获取用户对象，就会出错。因此，需要对该功能进行权限验证，只有登录用户才可以访问，否则，就拒绝访问\n\n总而言之，权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。\n\n在执行视图的`dispatch()`方法前，会先进行视图访问权限的判断\n在通过`get_object()`获取具体对象时，会进行对象访问权限的判断\n\n权限分为四类：\n\n- `AllowAny`: 允许所有用户， 默认权限\n- `IsAuthenticated`: 仅通过认证的用户\n- `IsAdminUser`: 仅管理员用户\n- `IsAuthenticatedOrReadOnly`: 认证的用户可以完全操作，否则只能`get`读取\n\n#### 全局配置\n\n可以在项目的配置文件`settings.py`中设置默认的权限管理类\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    )\n}\n```\n\n如果未指明，则采用如下默认配置\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.AllowAny',\n    )\n}\n```\n\n#### 局部配置\n\n可以在具体的视图中通过`permission_classes`属性来设置\n\n```python\n# 个人信息    \nclass UserInfoAPIView(APIView):\n    authentication_classes = [JSONWebTokenAuthentication] # 指明认证类\n    permission_classes = [IsAuthenticated]  # 指明只有认证用户可以访问\n\n    def get(self, request):\n        user = request.user  # 只要认证成功，且权限校验通过，请求对象中就一定会存在 user对象\n        ser = UserInfoSerializer(user)\n        return Response(ser.data)\n    \n# 创建允许管理员查询所有用户的视图类\nclass UserView(GenericAPIView, ListModelMixin):\n  \t\"\"\"查询所有注册用户\"\"\"\n    queryset = UserModel.objects.all()\n    serializer_class = UserSerializer\n    authentication_classes = [JSONWebTokenAuthentication] # 指明认证类\n    permission_classes = [IsAdminUser]  # 指定权限验证,限制管理员才可以查询所有用户\n\n    def get(self, request, *args, **kwrags):\n        return self.list(request, *args, **kwrags)\n```\n\n\n\n### 限流Throttling\n\n可以对接口访问的频次进行限制，以减轻服务器压力。特别是限制爬虫的抓取。\n\n#### 针对用户进行限制\n\n>   可以在配置文件中，使用`DEFAULT_THROTTLE_CLASSES` 和 `DEFAULT_THROTTLE_RATES`进行全局配置\n\n##### 全局配置\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 限制所有匿名未认证用户，使用IP区分用户\n        'rest_framework.throttling.AnonRateThrottle',\n        # 限制认证用户，使用User id 来区分\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 可以使用 second, minute, hour 或day来指明周期\n        'anon': '3/minute',\n        'user': '5/minute'\n    }\n}\n```\n\n##### 局部配置\n\n视图中使用`throttle_classes`属性设置限流用户类型\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import ListModelMixin\nfrom rest_framework.throttling import UserRateThrottle, AnonRateThrottle\n\nfrom .serializer import UserSerializer, User\n\nclass UserView(GenericAPIView, ListModelMixin):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    throttle_classes = (UserRateThrottle, AnonRateThrottle)\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n```\n\n在项目配置文件中针对用户类型设置具体频率\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_RATES': {\n        # 可以使用 second, minute, hour 或day来指明周期\n        'anon': '3/minute',\n        'user': '5/minute'\n    }\n}\n```\n\n#### 针对视图限制\n\n视图中使用`throttle_scope`属性设置具体配置信息\n\n```python\nfrom rest_framework.generics import GenericAPIView\nfrom rest_framework.mixins import ListModelMixin\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom .serializer import UserSerializer, User\n\nclass UserView(GenericAPIView, ListModelMixin):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    throttle_scope = 'downloads'\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n```\n\n在项目配置文件中设置具体频率\n\n```python\n'DEFAULT_THROTTLE_CLASSES': (\n    # 限制用户对于每个视图的访问频次，使用ip或user id\n    'rest_framework.throttling.ScopedRateThrottle',\n),\n'DEFAULT_THROTTLE_RATES': {\n    'downloads': '3/minute'\n}\n```\n\n## 以 Vue 作为前端\n\n#### 路由前置守卫\n\n> `router/index.js`\n\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Login from '@/components/Login'\nimport Users from '@/components/Users'\n\nVue.use(Router);\n\nlet router = new Router({\n  routes: [\n    {\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      path: '/Users',\n      name: 'Users',\n      component: Users\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  const isLogin = localStorage.getItem('token') ? true : false;\n  if (to.path == '/login' || to.path == '/register') {\n    //'login'和'register'相当于是路由白名单\n    localStorage.setItem(\"preRoute\", router.currentRoute.fullPath);\n    next();\n  } else {\n    //如果token存在，就正常跳转，如果不存在，则说明未登陆，则跳转到'login'\n    isLogin ? next() : next(\"/login\");\n  }\n})\n\nexport default router\n```\n\n#### axios拦截器\n\n> `main.js`\n\n```javascript\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000/'\n\n// 添加请求拦截器\naxios.interceptors.request.use(function (config) {\n  // 在发送请求之前, 添加 token 到请求头\n  if (localStorage.token) {\n    config.headers['Authorization'] = 'JWT ' + localStorage.getItem('token');\n    config.headers['Accept'] = 'application/json';\n  }\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 自定义的 axios 响应拦截器\naxios.interceptors.response.use((response) => {\n  // 判断一下响应中是否有 token，如果有就直接使用此 token 替换掉本地的 token。你可以根据你的业务需求自己编写更新 token 的逻辑\n  var token = response.data.token;\n\n  if (token) {\n    localStorage.setItem('token', token);\n  }\n  return response\n}, (error) => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 这里写清除token的代码\n        console.log(\"401\")\n        localStorage.removeItem('token');\n        /* 普通401拦截直接返回到登录页面 */\n        router.push('/login');\n    }\n  }\n  return Promise.reject(error)\n});\n\nVue.prototype.$axios = axios\n```\n\n#### 登录页面\n\n```html\n<template>\n  <div>\n    用户名: <input type=\"text\" v-model=\"userInfo.username\"/> <br>\n    密码: <input type=\"text\" v-model=\"userInfo.password\"/> <br>\n    <button @click=\"login\">登录</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"login\",\n  data() {\n    return {\n      userInfo: {\n        username: \"\",\n        password: \"\",\n      },\n    };\n  },\n  methods: {\n    login() {\n      this.$axios\n        .post(\"users/login/\", this.userInfo)\n        .then((resp) => {\n          const curr = localStorage.getItem('preRoute');\n          if (curr == null) {\n            this.$router.push({path: \"/user_center\"});\n          } else {\n            this.$router.push({path: curr});\n          }\n          this.$router.push({path: decodeURIComponent(url)});\n        })\n        .catch((err) => {\n        });\n    },\n  },\n};\n</script>\n```\n\n#### 用户展示页面\n\n```html\n<template>\n  <div>\n    <table>\n      <tr>\n        <td> {{ user.id }}</td>\n        <td> {{ user.username }}</td>\n        <td> {{ user.phone }}</td>\n      </tr>\n    </table>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: \"\"\n    }\n  },\n  methods: {\n    getData() {\n      this.$axios.get('/userinfo/')\n        .then(resp => {\n          console.log(resp.data)\n          this.user = resp.data\n        })\n    }\n  },\n  mounted() {\n    this.getData();\n  }\n}\n</script>\n```\n","slug":"DRF-JWT认证、权限、限流","published":1,"updated":"2021-01-25T07:46:38.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnugb00gzjjln8zpk8hwl","content":"<p>DRF框架的一系列功能：认证、权限、限流，都是依赖于JWT。</p>\n<p>整个流程就是这样的:</p>\n<ul>\n<li><p>客户端发送用户名和密码到服务端，</p>\n</li>\n<li><p>验证通过，生成JWT</p>\n</li>\n<li><p>返回JWT给客户端</p>\n</li>\n<li><p>下次，客户端发送请求时，携带JWT，一般是在请求头里加入<code>Authorization</code>，并加上<code>JWT</code>标注：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&#123;<br>  headers: &#123;<br>    <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>: <span class=\"hljs-string\">&#x27;JWT &#x27;</span> + token<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>服务端会验证 token，如果验证通过就会返回相应的资源</li>\n<li>在此基础上，可以实现权限和限流</li>\n</ul>\n<p>流程图如下：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/1821058-2e28fe6c997a60c9.png\" alt=\"jwt-diagram\"> </p>\n<h2 id=\"以-Django-作为服务端\"><a href=\"#以-Django-作为服务端\" class=\"headerlink\" title=\"以 Django 作为服务端\"></a>以 Django 作为服务端</h2><h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">pip install django  django-cors-headers djangorestframework djangorestframework-jwt<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"项目配置信息\"><a href=\"#项目配置信息\" class=\"headerlink\" title=\"项目配置信息\"></a>项目配置信息</h3><blockquote>\n<p><code>djangodemo/settings.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>   \t...,<br>    <span class=\"hljs-string\">&#x27;rest_framework&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;users&#x27;</span><br>]<br><br>MIDDLEWARE = [<br>    <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class=\"hljs-comment\"># 跨域参数,允许所有源访问</span><br>CORS_ORIGIN_ALLOW_ALL = <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-comment\"># 自定义用户模型类</span><br>AUTH_USER_MODEL = <span class=\"hljs-string\">&#x27;users.UserModel&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"用户模型类\"><a href=\"#用户模型类\" class=\"headerlink\" title=\"用户模型类\"></a>用户模型类</h3><blockquote>\n<p><code>users/models.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.models <span class=\"hljs-keyword\">import</span> AbstractUser<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserModel</span>(<span class=\"hljs-params\">AbstractUser</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;继承django内置的用户类，并重写，注意：必须在settings.py中指明&quot;&quot;&quot;</span><br>    phone = models.CharField(max_length=<span class=\"hljs-number\">11</span>, unique=<span class=\"hljs-literal\">True</span>, verbose_name=<span class=\"hljs-string\">&#x27;手机&#x27;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        ordering = [<span class=\"hljs-string\">&#x27;id&#x27;</span>]<br>        db_table = <span class=\"hljs-string\">&#x27;db_user&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;用户&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;用户&#x27;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.username<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"序列化类\"><a href=\"#序列化类\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h3><blockquote>\n<p><code>users/ser.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserModel<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.hashers <span class=\"hljs-keyword\">import</span> make_password<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserSerializer</span>(<span class=\"hljs-params\">serializers.ModelSerializer</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\">self, validated_data</span>):</span><br>        <span class=\"hljs-keyword\">return</span> UserModel.objects.create_user(**validated_data)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">self, instance, validated_data</span>):</span><br>        instance.username = validated_data.get(<span class=\"hljs-string\">&#x27;username&#x27;</span>, instance.username)<br>        instance.phone = validated_data.get(<span class=\"hljs-string\">&#x27;phone&#x27;</span>, instance.phone)<br>        instance.email = validated_data.get(<span class=\"hljs-string\">&#x27;email&#x27;</span>, instance.email)<br><br>        password = validated_data[<span class=\"hljs-string\">&#x27;password&#x27;</span>]<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> password:<br>            instance.password = make_password(password)<br><br>        instance.save()<br><br>        <span class=\"hljs-keyword\">return</span> instance<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_password</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        验证密码不能全是小写字母，不能全是大写字母，也不能全是数字</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> re.match(<span class=\"hljs-string\">r&#x27;(?!^\\d*$)(?![a-z]$)(?![A-Z]$).&#123;6,&#125;$&#x27;</span>, value):<br>            <span class=\"hljs-keyword\">raise</span> serializers.ValidationError(<span class=\"hljs-string\">&#x27;密码等级不够&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> value<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_phone</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        校验手机号是否合法</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> re.match(<span class=\"hljs-string\">r&#x27;1[3-7]\\d&#123;9&#125;$&#x27;</span>, value):<br>            <span class=\"hljs-keyword\">raise</span> serializers.ValidationError(<span class=\"hljs-string\">&#x27;手机号不合法&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> value<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = UserModel<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>, <span class=\"hljs-string\">&#x27;phone&#x27;</span>, <span class=\"hljs-string\">&#x27;password&#x27;</span>, <span class=\"hljs-string\">&#x27;email&#x27;</span>)<br>        read_only_fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>,)<br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;password&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><blockquote>\n<p>  <code>users/views.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> CreateModelMixin<br><span class=\"hljs-keyword\">from</span> users.ser <span class=\"hljs-keyword\">import</span> UserSerializer, UserModel<br><br><br><span class=\"hljs-comment\"># 创建注册视图类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RegisterView</span>(<span class=\"hljs-params\">GenericAPIView, CreateModelMixin</span>):</span><br>    queryset = UserModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.create(request, *args, **kwargs)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> .views <span class=\"hljs-keyword\">import</span> *<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;register/&#x27;</span>, RegisterView.as_view()), <span class=\"hljs-comment\"># 注册路由  </span><br>]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><h4 id=\"自定义Django登录验证\"><a href=\"#自定义Django登录验证\" class=\"headerlink\" title=\"自定义Django登录验证\"></a>自定义Django登录验证</h4><p>默认django只支持用户名和密码登录，想要支持多种方式登录，必须重写认证类</p>\n<blockquote>\n<p><code>users/utils.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserModel<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.backends <span class=\"hljs-keyword\">import</span> ModelBackend<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserModelBackend</span>(<span class=\"hljs-params\">ModelBackend</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;user验证&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">authenticate</span>(<span class=\"hljs-params\">self, request, username=<span class=\"hljs-literal\">None</span>, password=<span class=\"hljs-literal\">None</span>, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&#x27;^1[3-9]\\d&#123;9&#125;$&#x27;</span>, username):<br>                user = UserModel.objects.get(phone=username)<br>            <span class=\"hljs-keyword\">else</span>:<br>                user = UserModel.objects.get(username=username)<br>        <span class=\"hljs-keyword\">except</span> UserModel.DoesNotExist:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span><br>        <span class=\"hljs-keyword\">if</span> user.check_password(password) <span class=\"hljs-keyword\">and</span> self.user_can_authenticate(user):<br>            <span class=\"hljs-keyword\">return</span> user<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"自定义返回数据\"><a href=\"#自定义返回数据\" class=\"headerlink\" title=\"自定义返回数据\"></a>自定义返回数据</h4><blockquote>\n<p>登录成功，需要生成JWT，返回给客户端，之后的认证通过生成的jwt实现</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># rest_framework_jwt插件已经内置了登录视图，登录成功，返回JWT,注意，默认登录成功只会返回token，如果想要其他用户信息，必须自定义返回数据</span><br>rest_framework_jwt.views.obtain_jwt_token <br><br><span class=\"hljs-comment\"># rest_framework_jwt插件已经内置了刷新jwt视图，在 jwt失效之前，返回新的jwt</span><br>rest_framework_jwt.views.refresh_jwt_token<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><code>users/utils.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jwt_response_payload_handler</span>(<span class=\"hljs-params\">token, user=<span class=\"hljs-literal\">None</span>, request=<span class=\"hljs-literal\">None</span></span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    自定义jwt认证成功返回数据</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-string\">&#x27;token&#x27;</span>: token,<br>        <span class=\"hljs-string\">&#x27;id&#x27;</span>: user.<span class=\"hljs-built_in\">id</span>,<br>        <span class=\"hljs-string\">&#x27;username&#x27;</span>: user.username<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> datetime<br><br><span class=\"hljs-comment\"># 多种方式登录验证</span><br>AUTHENTICATION_BACKENDS = [<span class=\"hljs-string\">&#x27;users.utils.UserModelBackend&#x27;</span>]<br><br><span class=\"hljs-comment\"># JWT配置信息</span><br>JWT_AUTH = &#123;<br>    <span class=\"hljs-comment\"># 指明token的有效期， 默认5分</span><br>    <span class=\"hljs-string\">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(minutes=<span class=\"hljs-number\">5</span>),<br>    <span class=\"hljs-string\">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>    <span class=\"hljs-comment\"># 在多久间隔内可以用它来刷新以便获取新的token，默认是7天</span><br>    <span class=\"hljs-string\">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class=\"hljs-number\">7</span>),<br>    <span class=\"hljs-comment\"># 客户端首先调用obtain_jwt_token进行登录操作，</span><br>    <span class=\"hljs-comment\"># 之后必须每隔小于5分钟就刷新一次token，才能保证不掉线。</span><br>    <span class=\"hljs-comment\"># 然而即使一直保持在线，上限也只有7天，7天过后必须重新登录，这才是5mins + 7days的确切含义</span><br><br>    <span class=\"hljs-comment\"># 自定义jwt认证成功返回数据</span><br>    <span class=\"hljs-string\">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class=\"hljs-string\">&#x27;users.utils.jwt_response_payload_handler&#x27;</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"路由-1\"><a href=\"#路由-1\" class=\"headerlink\" title=\"路由\"></a>路由</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> rest_framework_jwt.views <span class=\"hljs-keyword\">import</span> obtain_jwt_token, refresh_jwt_token<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;login/&#x27;</span>, obtain_jwt_token), <span class=\"hljs-comment\"># 登录路由</span><br>    path(<span class=\"hljs-string\">&#x27;refresh/&#x27;</span>, refresh_jwt_token), <span class=\"hljs-comment\"># 刷新token</span><br>]<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>当客户端请求时，会携带上一步生成的<code>token</code>，因此，需要在 服务端验证<code>token</code>，从而判断是否允许进行下一步操作</p>\n<h4 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-comment\"># 指定drf认证机制</span><br>    <span class=\"hljs-string\">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class=\"hljs-string\">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,  <span class=\"hljs-comment\"># JWT认证</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;,  # 基本认证</span><br>    ]<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"局部配置\"><a href=\"#局部配置\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h4><p>可以在具体的视图中通过<code>authentication_classes</code>属性来设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 个人信息    </span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfoAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    authentication_classes = [TokenAuthentication]  <span class=\"hljs-comment\"># 指明认证类</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        user = request.user  <span class=\"hljs-comment\"># 只要认证成功，请求对象中就会存在 user对象</span><br>        ser = UserInfoSerializer(user)<br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>上面的视图，仍然存在一个问题：客户端发送jwt，服务器可以正常解析出登录用户；但是，如果没有发送jwt，再通过<code>request.user</code>获取用户对象，就会出错。因此，需要对该功能进行权限验证，只有登录用户才可以访问，否则，就拒绝访问</p>\n<p>总而言之，权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p>\n<p>在执行视图的<code>dispatch()</code>方法前，会先进行视图访问权限的判断<br>在通过<code>get_object()</code>获取具体对象时，会进行对象访问权限的判断</p>\n<p>权限分为四类：</p>\n<ul>\n<li><code>AllowAny</code>: 允许所有用户， 默认权限</li>\n<li><code>IsAuthenticated</code>: 仅通过认证的用户</li>\n<li><code>IsAdminUser</code>: 仅管理员用户</li>\n<li><code>IsAuthenticatedOrReadOnly</code>: 认证的用户可以完全操作，否则只能<code>get</code>读取</li>\n</ul>\n<h4 id=\"全局配置-1\"><a href=\"#全局配置-1\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><p>可以在项目的配置文件<code>settings.py</code>中设置默认的权限管理类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-string\">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>如果未指明，则采用如下默认配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-string\">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"局部配置-1\"><a href=\"#局部配置-1\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h4><p>可以在具体的视图中通过<code>permission_classes</code>属性来设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 个人信息    </span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfoAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    authentication_classes = [JSONWebTokenAuthentication] <span class=\"hljs-comment\"># 指明认证类</span><br>    permission_classes = [IsAuthenticated]  <span class=\"hljs-comment\"># 指明只有认证用户可以访问</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        user = request.user  <span class=\"hljs-comment\"># 只要认证成功，且权限校验通过，请求对象中就一定会存在 user对象</span><br>        ser = UserInfoSerializer(user)<br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br>    <br><span class=\"hljs-comment\"># 创建允许管理员查询所有用户的视图类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>  \t<span class=\"hljs-string\">&quot;&quot;&quot;查询所有注册用户&quot;&quot;&quot;</span><br>    queryset = UserModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    authentication_classes = [JSONWebTokenAuthentication] <span class=\"hljs-comment\"># 指明认证类</span><br>    permission_classes = [IsAdminUser]  <span class=\"hljs-comment\"># 指定权限验证,限制管理员才可以查询所有用户</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwrags</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwrags)<br></code></pre></div></td></tr></table></figure>\n\n\n<h3 id=\"限流Throttling\"><a href=\"#限流Throttling\" class=\"headerlink\" title=\"限流Throttling\"></a>限流Throttling</h3><p>可以对接口访问的频次进行限制，以减轻服务器压力。特别是限制爬虫的抓取。</p>\n<h4 id=\"针对用户进行限制\"><a href=\"#针对用户进行限制\" class=\"headerlink\" title=\"针对用户进行限制\"></a>针对用户进行限制</h4><blockquote>\n<p>  可以在配置文件中，使用<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>进行全局配置</p>\n</blockquote>\n<h5 id=\"全局配置-2\"><a href=\"#全局配置-2\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-comment\"># 限制所有匿名未认证用户，使用IP区分用户</span><br>        <span class=\"hljs-string\">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,<br>        <span class=\"hljs-comment\"># 限制认证用户，使用User id 来区分</span><br>        <span class=\"hljs-string\">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span><br>    ),<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class=\"hljs-comment\"># 可以使用 second, minute, hour 或day来指明周期</span><br>        <span class=\"hljs-string\">&#x27;anon&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;5/minute&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"局部配置-2\"><a href=\"#局部配置-2\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h5><p>视图中使用<code>throttle_classes</code>属性设置限流用户类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> ListModelMixin<br><span class=\"hljs-keyword\">from</span> rest_framework.throttling <span class=\"hljs-keyword\">import</span> UserRateThrottle, AnonRateThrottle<br><br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> UserSerializer, User<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>    queryset = User.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    throttle_classes = (UserRateThrottle, AnonRateThrottle)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwargs)<br></code></pre></div></td></tr></table></figure>\n<p>在项目配置文件中针对用户类型设置具体频率</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class=\"hljs-comment\"># 可以使用 second, minute, hour 或day来指明周期</span><br>        <span class=\"hljs-string\">&#x27;anon&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;5/minute&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"针对视图限制\"><a href=\"#针对视图限制\" class=\"headerlink\" title=\"针对视图限制\"></a>针对视图限制</h4><p>视图中使用<code>throttle_scope</code>属性设置具体配置信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> ListModelMixin<br><span class=\"hljs-keyword\">from</span> rest_framework.permissions <span class=\"hljs-keyword\">import</span> IsAuthenticated<br><br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> UserSerializer, User<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>    queryset = User.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    throttle_scope = <span class=\"hljs-string\">&#x27;downloads&#x27;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwargs)<br></code></pre></div></td></tr></table></figure>\n<p>在项目配置文件中设置具体频率</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (<br>    <span class=\"hljs-comment\"># 限制用户对于每个视图的访问频次，使用ip或user id</span><br>    <span class=\"hljs-string\">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>,<br>),<br><span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>    <span class=\"hljs-string\">&#x27;downloads&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"以-Vue-作为前端\"><a href=\"#以-Vue-作为前端\" class=\"headerlink\" title=\"以 Vue 作为前端\"></a>以 Vue 作为前端</h2><h4 id=\"路由前置守卫\"><a href=\"#路由前置守卫\" class=\"headerlink\" title=\"路由前置守卫\"></a>路由前置守卫</h4><blockquote>\n<p><code>router/index.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><span class=\"hljs-keyword\">import</span> Login <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/Login&#x27;</span><br><span class=\"hljs-keyword\">import</span> Users <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/Users&#x27;</span><br><br>Vue.use(Router);<br><br><span class=\"hljs-keyword\">let</span> router = <span class=\"hljs-keyword\">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,<br>      component: Login<br>    &#125;,<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/Users&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Users&#x27;</span>,<br>      component: Users<br>    &#125;<br>  ]<br>&#125;)<br><br>router.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> isLogin = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>) ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">if</span> (to.path == <span class=\"hljs-string\">&#x27;/login&#x27;</span> || to.path == <span class=\"hljs-string\">&#x27;/register&#x27;</span>) &#123;<br>    <span class=\"hljs-comment\">//&#x27;login&#x27;和&#x27;register&#x27;相当于是路由白名单</span><br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&quot;preRoute&quot;</span>, router.currentRoute.fullPath);<br>    next();<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">//如果token存在，就正常跳转，如果不存在，则说明未登陆，则跳转到&#x27;login&#x27;</span><br>    isLogin ? next() : next(<span class=\"hljs-string\">&quot;/login&quot;</span>);<br>  &#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"axios拦截器\"><a href=\"#axios拦截器\" class=\"headerlink\" title=\"axios拦截器\"></a>axios拦截器</h4><blockquote>\n<p><code>main.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;http://127.0.0.1:8000/&#x27;</span><br><br><span class=\"hljs-comment\">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 在发送请求之前, 添加 token 到请求头</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">localStorage</span>.token) &#123;<br>    config.headers[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-string\">&#x27;JWT &#x27;</span> + <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>);<br>    config.headers[<span class=\"hljs-string\">&#x27;Accept&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/json&#x27;</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> config;<br>&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 对请求错误做些什么</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>&#125;);<br><br><span class=\"hljs-comment\">// 自定义的 axios 响应拦截器</span><br>axios.interceptors.response.use(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 判断一下响应中是否有 token，如果有就直接使用此 token 替换掉本地的 token。你可以根据你的业务需求自己编写更新 token 的逻辑</span><br>  <span class=\"hljs-keyword\">var</span> token = response.data.token;<br><br>  <span class=\"hljs-keyword\">if</span> (token) &#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>, token);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> response<br>&#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (error.response) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (error.response.status) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">401</span>:<br>        <span class=\"hljs-comment\">// 这里写清除token的代码</span><br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;401&quot;</span>)<br>        <span class=\"hljs-built_in\">localStorage</span>.removeItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>);<br>        <span class=\"hljs-comment\">/* 普通401拦截直接返回到登录页面 */</span><br>        router.push(<span class=\"hljs-string\">&#x27;/login&#x27;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error)<br>&#125;);<br><br>Vue.prototype.$axios = axios<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    用户名: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;userInfo.username&quot;</span>/&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;userInfo.password&quot;</span>/&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">  name: <span class=\"hljs-string\">&quot;login&quot;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br>      userInfo: &#123;<br><span class=\"javascript\">        username: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br><span class=\"javascript\">        password: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$axios</span><br><span class=\"javascript\">        .post(<span class=\"hljs-string\">&quot;users/login/&quot;</span>, <span class=\"hljs-built_in\">this</span>.userInfo)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">const</span> curr = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;preRoute&#x27;</span>);</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (curr == <span class=\"hljs-literal\">null</span>) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/user_center&quot;</span>&#125;);</span><br><span class=\"javascript\">          &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: curr&#125;);</span><br>          &#125;<br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">decodeURIComponent</span>(url)&#125;);</span><br>        &#125;)<br><span class=\"javascript\">        .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;</span><br>        &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"用户展示页面\"><a href=\"#用户展示页面\" class=\"headerlink\" title=\"用户展示页面\"></a>用户展示页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.username &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.phone &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">      user: <span class=\"hljs-string\">&quot;&quot;</span></span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">getData</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$axios.get(<span class=\"hljs-string\">&#x27;/userinfo/&#x27;</span>)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">console</span>.log(resp.data)</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.user = resp.data</span><br>        &#125;)<br>    &#125;<br>  &#125;,<br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">this</span>.getData();</span><br>  &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>DRF框架的一系列功能：认证、权限、限流，都是依赖于JWT。</p>\n<p>整个流程就是这样的:</p>\n<ul>\n<li><p>客户端发送用户名和密码到服务端，</p>\n</li>\n<li><p>验证通过，生成JWT</p>\n</li>\n<li><p>返回JWT给客户端</p>\n</li>\n<li><p>下次，客户端发送请求时，携带JWT，一般是在请求头里加入<code>Authorization</code>，并加上<code>JWT</code>标注：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  headers: &#123;<br>    <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>: <span class=\"hljs-string\">&#x27;JWT &#x27;</span> + token<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>服务端会验证 token，如果验证通过就会返回相应的资源</li>\n<li>在此基础上，可以实现权限和限流</li>\n</ul>\n<p>流程图如下：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/1821058-2e28fe6c997a60c9.png\" alt=\"jwt-diagram\"> </p>\n<h2 id=\"以-Django-作为服务端\"><a href=\"#以-Django-作为服务端\" class=\"headerlink\" title=\"以 Django 作为服务端\"></a>以 Django 作为服务端</h2><h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">pip install django  django-cors-headers djangorestframework djangorestframework-jwt<br></code></pre></td></tr></table></figure>\n<h3 id=\"项目配置信息\"><a href=\"#项目配置信息\" class=\"headerlink\" title=\"项目配置信息\"></a>项目配置信息</h3><blockquote>\n<p><code>djangodemo/settings.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>   \t...,<br>    <span class=\"hljs-string\">&#x27;rest_framework&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;users&#x27;</span><br>]<br><br>MIDDLEWARE = [<br>    <span class=\"hljs-string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class=\"hljs-comment\"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class=\"hljs-string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class=\"hljs-comment\"># 跨域参数,允许所有源访问</span><br>CORS_ORIGIN_ALLOW_ALL = <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-comment\"># 自定义用户模型类</span><br>AUTH_USER_MODEL = <span class=\"hljs-string\">&#x27;users.UserModel&#x27;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"用户模型类\"><a href=\"#用户模型类\" class=\"headerlink\" title=\"用户模型类\"></a>用户模型类</h3><blockquote>\n<p><code>users/models.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.models <span class=\"hljs-keyword\">import</span> AbstractUser<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserModel</span>(<span class=\"hljs-params\">AbstractUser</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;继承django内置的用户类，并重写，注意：必须在settings.py中指明&quot;&quot;&quot;</span><br>    phone = models.CharField(max_length=<span class=\"hljs-number\">11</span>, unique=<span class=\"hljs-literal\">True</span>, verbose_name=<span class=\"hljs-string\">&#x27;手机&#x27;</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        ordering = [<span class=\"hljs-string\">&#x27;id&#x27;</span>]<br>        db_table = <span class=\"hljs-string\">&#x27;db_user&#x27;</span><br>        verbose_name = <span class=\"hljs-string\">&#x27;用户&#x27;</span><br>        verbose_name_plural = <span class=\"hljs-string\">&#x27;用户&#x27;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__str__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.username<br></code></pre></td></tr></table></figure>\n<h3 id=\"序列化类\"><a href=\"#序列化类\" class=\"headerlink\" title=\"序列化类\"></a>序列化类</h3><blockquote>\n<p><code>users/ser.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework <span class=\"hljs-keyword\">import</span> serializers<br><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserModel<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.hashers <span class=\"hljs-keyword\">import</span> make_password<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserSerializer</span>(<span class=\"hljs-params\">serializers.ModelSerializer</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\">self, validated_data</span>):</span><br>        <span class=\"hljs-keyword\">return</span> UserModel.objects.create_user(**validated_data)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">self, instance, validated_data</span>):</span><br>        instance.username = validated_data.get(<span class=\"hljs-string\">&#x27;username&#x27;</span>, instance.username)<br>        instance.phone = validated_data.get(<span class=\"hljs-string\">&#x27;phone&#x27;</span>, instance.phone)<br>        instance.email = validated_data.get(<span class=\"hljs-string\">&#x27;email&#x27;</span>, instance.email)<br><br>        password = validated_data[<span class=\"hljs-string\">&#x27;password&#x27;</span>]<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> password:<br>            instance.password = make_password(password)<br><br>        instance.save()<br><br>        <span class=\"hljs-keyword\">return</span> instance<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_password</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        验证密码不能全是小写字母，不能全是大写字母，也不能全是数字</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> re.match(<span class=\"hljs-string\">r&#x27;(?!^\\d*$)(?![a-z]$)(?![A-Z]$).&#123;6,&#125;$&#x27;</span>, value):<br>            <span class=\"hljs-keyword\">raise</span> serializers.ValidationError(<span class=\"hljs-string\">&#x27;密码等级不够&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> value<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_phone</span>(<span class=\"hljs-params\">self, value</span>):</span><br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        校验手机号是否合法</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> re.match(<span class=\"hljs-string\">r&#x27;1[3-7]\\d&#123;9&#125;$&#x27;</span>, value):<br>            <span class=\"hljs-keyword\">raise</span> serializers.ValidationError(<span class=\"hljs-string\">&#x27;手机号不合法&#x27;</span>)<br>        <span class=\"hljs-keyword\">return</span> value<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        model = UserModel<br>        fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;username&#x27;</span>, <span class=\"hljs-string\">&#x27;phone&#x27;</span>, <span class=\"hljs-string\">&#x27;password&#x27;</span>, <span class=\"hljs-string\">&#x27;email&#x27;</span>)<br>        read_only_fields = (<span class=\"hljs-string\">&#x27;id&#x27;</span>,)<br>        extra_kwargs = &#123;<br>            <span class=\"hljs-string\">&#x27;password&#x27;</span>: &#123;<br>                <span class=\"hljs-string\">&#x27;write_only&#x27;</span>: <span class=\"hljs-literal\">True</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><blockquote>\n<p>  <code>users/views.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> CreateModelMixin<br><span class=\"hljs-keyword\">from</span> users.ser <span class=\"hljs-keyword\">import</span> UserSerializer, UserModel<br><br><br><span class=\"hljs-comment\"># 创建注册视图类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RegisterView</span>(<span class=\"hljs-params\">GenericAPIView, CreateModelMixin</span>):</span><br>    queryset = UserModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">post</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.create(request, *args, **kwargs)<br></code></pre></td></tr></table></figure>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> .views <span class=\"hljs-keyword\">import</span> *<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;register/&#x27;</span>, RegisterView.as_view()), <span class=\"hljs-comment\"># 注册路由  </span><br>]<br></code></pre></td></tr></table></figure>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><h4 id=\"自定义Django登录验证\"><a href=\"#自定义Django登录验证\" class=\"headerlink\" title=\"自定义Django登录验证\"></a>自定义Django登录验证</h4><p>默认django只支持用户名和密码登录，想要支持多种方式登录，必须重写认证类</p>\n<blockquote>\n<p><code>users/utils.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> .models <span class=\"hljs-keyword\">import</span> UserModel<br><span class=\"hljs-keyword\">from</span> django.contrib.auth.backends <span class=\"hljs-keyword\">import</span> ModelBackend<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserModelBackend</span>(<span class=\"hljs-params\">ModelBackend</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;user验证&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">authenticate</span>(<span class=\"hljs-params\">self, request, username=<span class=\"hljs-literal\">None</span>, password=<span class=\"hljs-literal\">None</span>, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            <span class=\"hljs-keyword\">if</span> re.match(<span class=\"hljs-string\">r&#x27;^1[3-9]\\d&#123;9&#125;$&#x27;</span>, username):<br>                user = UserModel.objects.get(phone=username)<br>            <span class=\"hljs-keyword\">else</span>:<br>                user = UserModel.objects.get(username=username)<br>        <span class=\"hljs-keyword\">except</span> UserModel.DoesNotExist:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span><br>        <span class=\"hljs-keyword\">if</span> user.check_password(password) <span class=\"hljs-keyword\">and</span> self.user_can_authenticate(user):<br>            <span class=\"hljs-keyword\">return</span> user<br></code></pre></td></tr></table></figure>\n<h4 id=\"自定义返回数据\"><a href=\"#自定义返回数据\" class=\"headerlink\" title=\"自定义返回数据\"></a>自定义返回数据</h4><blockquote>\n<p>登录成功，需要生成JWT，返回给客户端，之后的认证通过生成的jwt实现</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># rest_framework_jwt插件已经内置了登录视图，登录成功，返回JWT,注意，默认登录成功只会返回token，如果想要其他用户信息，必须自定义返回数据</span><br>rest_framework_jwt.views.obtain_jwt_token <br><br><span class=\"hljs-comment\"># rest_framework_jwt插件已经内置了刷新jwt视图，在 jwt失效之前，返回新的jwt</span><br>rest_framework_jwt.views.refresh_jwt_token<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>users/utils.py</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jwt_response_payload_handler</span>(<span class=\"hljs-params\">token, user=<span class=\"hljs-literal\">None</span>, request=<span class=\"hljs-literal\">None</span></span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    自定义jwt认证成功返回数据</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-string\">&#x27;token&#x27;</span>: token,<br>        <span class=\"hljs-string\">&#x27;id&#x27;</span>: user.<span class=\"hljs-built_in\">id</span>,<br>        <span class=\"hljs-string\">&#x27;username&#x27;</span>: user.username<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> datetime<br><br><span class=\"hljs-comment\"># 多种方式登录验证</span><br>AUTHENTICATION_BACKENDS = [<span class=\"hljs-string\">&#x27;users.utils.UserModelBackend&#x27;</span>]<br><br><span class=\"hljs-comment\"># JWT配置信息</span><br>JWT_AUTH = &#123;<br>    <span class=\"hljs-comment\"># 指明token的有效期， 默认5分</span><br>    <span class=\"hljs-string\">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(minutes=<span class=\"hljs-number\">5</span>),<br>    <span class=\"hljs-string\">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class=\"hljs-literal\">True</span>,<br>    <span class=\"hljs-comment\"># 在多久间隔内可以用它来刷新以便获取新的token，默认是7天</span><br>    <span class=\"hljs-string\">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class=\"hljs-number\">7</span>),<br>    <span class=\"hljs-comment\"># 客户端首先调用obtain_jwt_token进行登录操作，</span><br>    <span class=\"hljs-comment\"># 之后必须每隔小于5分钟就刷新一次token，才能保证不掉线。</span><br>    <span class=\"hljs-comment\"># 然而即使一直保持在线，上限也只有7天，7天过后必须重新登录，这才是5mins + 7days的确切含义</span><br><br>    <span class=\"hljs-comment\"># 自定义jwt认证成功返回数据</span><br>    <span class=\"hljs-string\">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>: <span class=\"hljs-string\">&#x27;users.utils.jwt_response_payload_handler&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"路由-1\"><a href=\"#路由-1\" class=\"headerlink\" title=\"路由\"></a>路由</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> rest_framework_jwt.views <span class=\"hljs-keyword\">import</span> obtain_jwt_token, refresh_jwt_token<br><br>urlpatterns = [<br>    path(<span class=\"hljs-string\">&#x27;login/&#x27;</span>, obtain_jwt_token), <span class=\"hljs-comment\"># 登录路由</span><br>    path(<span class=\"hljs-string\">&#x27;refresh/&#x27;</span>, refresh_jwt_token), <span class=\"hljs-comment\"># 刷新token</span><br>]<br></code></pre></td></tr></table></figure>\n<h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>当客户端请求时，会携带上一步生成的<code>token</code>，因此，需要在 服务端验证<code>token</code>，从而判断是否允许进行下一步操作</p>\n<h4 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-comment\"># 指定drf认证机制</span><br>    <span class=\"hljs-string\">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class=\"hljs-string\">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,  <span class=\"hljs-comment\"># JWT认证</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span><br>        <span class=\"hljs-comment\"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;,  # 基本认证</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"局部配置\"><a href=\"#局部配置\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h4><p>可以在具体的视图中通过<code>authentication_classes</code>属性来设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 个人信息    </span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfoAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    authentication_classes = [TokenAuthentication]  <span class=\"hljs-comment\"># 指明认证类</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        user = request.user  <span class=\"hljs-comment\"># 只要认证成功，请求对象中就会存在 user对象</span><br>        ser = UserInfoSerializer(user)<br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br></code></pre></td></tr></table></figure>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>上面的视图，仍然存在一个问题：客户端发送jwt，服务器可以正常解析出登录用户；但是，如果没有发送jwt，再通过<code>request.user</code>获取用户对象，就会出错。因此，需要对该功能进行权限验证，只有登录用户才可以访问，否则，就拒绝访问</p>\n<p>总而言之，权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p>\n<p>在执行视图的<code>dispatch()</code>方法前，会先进行视图访问权限的判断<br>在通过<code>get_object()</code>获取具体对象时，会进行对象访问权限的判断</p>\n<p>权限分为四类：</p>\n<ul>\n<li><code>AllowAny</code>: 允许所有用户， 默认权限</li>\n<li><code>IsAuthenticated</code>: 仅通过认证的用户</li>\n<li><code>IsAdminUser</code>: 仅管理员用户</li>\n<li><code>IsAuthenticatedOrReadOnly</code>: 认证的用户可以完全操作，否则只能<code>get</code>读取</li>\n</ul>\n<h4 id=\"全局配置-1\"><a href=\"#全局配置-1\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><p>可以在项目的配置文件<code>settings.py</code>中设置默认的权限管理类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-string\">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果未指明，则采用如下默认配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-string\">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"局部配置-1\"><a href=\"#局部配置-1\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h4><p>可以在具体的视图中通过<code>permission_classes</code>属性来设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 个人信息    </span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserInfoAPIView</span>(<span class=\"hljs-params\">APIView</span>):</span><br>    authentication_classes = [JSONWebTokenAuthentication] <span class=\"hljs-comment\"># 指明认证类</span><br>    permission_classes = [IsAuthenticated]  <span class=\"hljs-comment\"># 指明只有认证用户可以访问</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request</span>):</span><br>        user = request.user  <span class=\"hljs-comment\"># 只要认证成功，且权限校验通过，请求对象中就一定会存在 user对象</span><br>        ser = UserInfoSerializer(user)<br>        <span class=\"hljs-keyword\">return</span> Response(ser.data)<br>    <br><span class=\"hljs-comment\"># 创建允许管理员查询所有用户的视图类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>  \t<span class=\"hljs-string\">&quot;&quot;&quot;查询所有注册用户&quot;&quot;&quot;</span><br>    queryset = UserModel.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    authentication_classes = [JSONWebTokenAuthentication] <span class=\"hljs-comment\"># 指明认证类</span><br>    permission_classes = [IsAdminUser]  <span class=\"hljs-comment\"># 指定权限验证,限制管理员才可以查询所有用户</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwrags</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwrags)<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"限流Throttling\"><a href=\"#限流Throttling\" class=\"headerlink\" title=\"限流Throttling\"></a>限流Throttling</h3><p>可以对接口访问的频次进行限制，以减轻服务器压力。特别是限制爬虫的抓取。</p>\n<h4 id=\"针对用户进行限制\"><a href=\"#针对用户进行限制\" class=\"headerlink\" title=\"针对用户进行限制\"></a>针对用户进行限制</h4><blockquote>\n<p>  可以在配置文件中，使用<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>进行全局配置</p>\n</blockquote>\n<h5 id=\"全局配置-2\"><a href=\"#全局配置-2\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (<br>        <span class=\"hljs-comment\"># 限制所有匿名未认证用户，使用IP区分用户</span><br>        <span class=\"hljs-string\">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,<br>        <span class=\"hljs-comment\"># 限制认证用户，使用User id 来区分</span><br>        <span class=\"hljs-string\">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span><br>    ),<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class=\"hljs-comment\"># 可以使用 second, minute, hour 或day来指明周期</span><br>        <span class=\"hljs-string\">&#x27;anon&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;5/minute&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"局部配置-2\"><a href=\"#局部配置-2\" class=\"headerlink\" title=\"局部配置\"></a>局部配置</h5><p>视图中使用<code>throttle_classes</code>属性设置限流用户类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> ListModelMixin<br><span class=\"hljs-keyword\">from</span> rest_framework.throttling <span class=\"hljs-keyword\">import</span> UserRateThrottle, AnonRateThrottle<br><br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> UserSerializer, User<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>    queryset = User.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    throttle_classes = (UserRateThrottle, AnonRateThrottle)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwargs)<br></code></pre></td></tr></table></figure>\n<p>在项目配置文件中针对用户类型设置具体频率</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">REST_FRAMEWORK = &#123;<br>    <span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class=\"hljs-comment\"># 可以使用 second, minute, hour 或day来指明周期</span><br>        <span class=\"hljs-string\">&#x27;anon&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;5/minute&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"针对视图限制\"><a href=\"#针对视图限制\" class=\"headerlink\" title=\"针对视图限制\"></a>针对视图限制</h4><p>视图中使用<code>throttle_scope</code>属性设置具体配置信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> rest_framework.generics <span class=\"hljs-keyword\">import</span> GenericAPIView<br><span class=\"hljs-keyword\">from</span> rest_framework.mixins <span class=\"hljs-keyword\">import</span> ListModelMixin<br><span class=\"hljs-keyword\">from</span> rest_framework.permissions <span class=\"hljs-keyword\">import</span> IsAuthenticated<br><br><span class=\"hljs-keyword\">from</span> .serializer <span class=\"hljs-keyword\">import</span> UserSerializer, User<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserView</span>(<span class=\"hljs-params\">GenericAPIView, ListModelMixin</span>):</span><br>    queryset = User.objects.<span class=\"hljs-built_in\">all</span>()<br>    serializer_class = UserSerializer<br>    throttle_scope = <span class=\"hljs-string\">&#x27;downloads&#x27;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">self, request, *args, **kwargs</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">list</span>(request, *args, **kwargs)<br></code></pre></td></tr></table></figure>\n<p>在项目配置文件中设置具体频率</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (<br>    <span class=\"hljs-comment\"># 限制用户对于每个视图的访问频次，使用ip或user id</span><br>    <span class=\"hljs-string\">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>,<br>),<br><span class=\"hljs-string\">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>    <span class=\"hljs-string\">&#x27;downloads&#x27;</span>: <span class=\"hljs-string\">&#x27;3/minute&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"以-Vue-作为前端\"><a href=\"#以-Vue-作为前端\" class=\"headerlink\" title=\"以 Vue 作为前端\"></a>以 Vue 作为前端</h2><h4 id=\"路由前置守卫\"><a href=\"#路由前置守卫\" class=\"headerlink\" title=\"路由前置守卫\"></a>路由前置守卫</h4><blockquote>\n<p><code>router/index.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-router&#x27;</span><br><span class=\"hljs-keyword\">import</span> Login <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/Login&#x27;</span><br><span class=\"hljs-keyword\">import</span> Users <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/Users&#x27;</span><br><br>Vue.use(Router);<br><br><span class=\"hljs-keyword\">let</span> router = <span class=\"hljs-keyword\">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/login&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Login&#x27;</span>,<br>      component: Login<br>    &#125;,<br>    &#123;<br>      path: <span class=\"hljs-string\">&#x27;/Users&#x27;</span>,<br>      name: <span class=\"hljs-string\">&#x27;Users&#x27;</span>,<br>      component: Users<br>    &#125;<br>  ]<br>&#125;)<br><br>router.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> isLogin = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>) ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">if</span> (to.path == <span class=\"hljs-string\">&#x27;/login&#x27;</span> || to.path == <span class=\"hljs-string\">&#x27;/register&#x27;</span>) &#123;<br>    <span class=\"hljs-comment\">//&#x27;login&#x27;和&#x27;register&#x27;相当于是路由白名单</span><br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&quot;preRoute&quot;</span>, router.currentRoute.fullPath);<br>    next();<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">//如果token存在，就正常跳转，如果不存在，则说明未登陆，则跳转到&#x27;login&#x27;</span><br>    isLogin ? next() : next(<span class=\"hljs-string\">&quot;/login&quot;</span>);<br>  &#125;<br>&#125;)<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> router<br></code></pre></td></tr></table></figure>\n<h4 id=\"axios拦截器\"><a href=\"#axios拦截器\" class=\"headerlink\" title=\"axios拦截器\"></a>axios拦截器</h4><blockquote>\n<p><code>main.js</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span><br><span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span><br><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;axios&#x27;</span><br><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;http://127.0.0.1:8000/&#x27;</span><br><br><span class=\"hljs-comment\">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 在发送请求之前, 添加 token 到请求头</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">localStorage</span>.token) &#123;<br>    config.headers[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = <span class=\"hljs-string\">&#x27;JWT &#x27;</span> + <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>);<br>    config.headers[<span class=\"hljs-string\">&#x27;Accept&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/json&#x27;</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> config;<br>&#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 对请求错误做些什么</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>&#125;);<br><br><span class=\"hljs-comment\">// 自定义的 axios 响应拦截器</span><br>axios.interceptors.response.use(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 判断一下响应中是否有 token，如果有就直接使用此 token 替换掉本地的 token。你可以根据你的业务需求自己编写更新 token 的逻辑</span><br>  <span class=\"hljs-keyword\">var</span> token = response.data.token;<br><br>  <span class=\"hljs-keyword\">if</span> (token) &#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>, token);<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> response<br>&#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">if</span> (error.response) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (error.response.status) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">401</span>:<br>        <span class=\"hljs-comment\">// 这里写清除token的代码</span><br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;401&quot;</span>)<br>        <span class=\"hljs-built_in\">localStorage</span>.removeItem(<span class=\"hljs-string\">&#x27;token&#x27;</span>);<br>        <span class=\"hljs-comment\">/* 普通401拦截直接返回到登录页面 */</span><br>        router.push(<span class=\"hljs-string\">&#x27;/login&#x27;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error)<br>&#125;);<br><br>Vue.prototype.$axios = axios<br></code></pre></td></tr></table></figure>\n<h4 id=\"登录页面\"><a href=\"#登录页面\" class=\"headerlink\" title=\"登录页面\"></a>登录页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    用户名: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;userInfo.username&quot;</span>/&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;userInfo.password&quot;</span>/&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">  name: <span class=\"hljs-string\">&quot;login&quot;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br>      userInfo: &#123;<br><span class=\"javascript\">        username: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br><span class=\"javascript\">        password: <span class=\"hljs-string\">&quot;&quot;</span>,</span><br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$axios</span><br><span class=\"javascript\">        .post(<span class=\"hljs-string\">&quot;users/login/&quot;</span>, <span class=\"hljs-built_in\">this</span>.userInfo)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">const</span> curr = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;preRoute&#x27;</span>);</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (curr == <span class=\"hljs-literal\">null</span>) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/user_center&quot;</span>&#125;);</span><br><span class=\"javascript\">          &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: curr&#125;);</span><br>          &#125;<br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.$router.push(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">decodeURIComponent</span>(url)&#125;);</span><br>        &#125;)<br><span class=\"javascript\">        .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;</span><br>        &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"用户展示页面\"><a href=\"#用户展示页面\" class=\"headerlink\" title=\"用户展示页面\"></a>用户展示页面</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.username &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span> &#123;&#123; user.phone &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">      user: <span class=\"hljs-string\">&quot;&quot;</span></span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">getData</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$axios.get(<span class=\"hljs-string\">&#x27;/userinfo/&#x27;</span>)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">console</span>.log(resp.data)</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.user = resp.data</span><br>        &#125;)<br>    &#125;<br>  &#125;,<br><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">this</span>.getData();</span><br>  &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>"},{"title":"python面向对象","date":"2019-11-04T14:36:03.000Z","_content":"\n## 类与实例\n\n面向对象最重要的概念就是类（`Class`）和实例（`Instance`），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。\n\n仍以Student类为例，在Python中，定义类是通过`class`关键字：\n\n```python\nclass Student(object):\n    pass\n```\n\n`class`后面紧接着是类名，即`Student`，类名通常是大写开头的单词，紧接着是`(object)`，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用`object`类，这是所有类最终都会继承的类。\n\n定义好了`Student`类，就可以根据`Student`类创建出`Student`的实例，创建实例是通过`类名+()`实现的：\n\n```python\nIn [5]: s = Student()\n\nIn [6]: s\nOut[6]: <__main__.Student at 0x107615860>\n\nIn [7]: Student\nOut[7]: <class '__main__.Student'>\n```\n\n可以看到，变量`s`指向的就是一个`Student`的实例，后面的`0x107615860`是内存地址，每个object的地址都不一样，而`Student`本身则是一个类。\n\n可以自由地给一个实例变量绑定属性，比如，给实例`s`绑定一个`name`属性：\n\n```python\nIn [9]: s.name = 'Bart Simpson'\n\nIn [10]: s.name\nOut[10]: 'Bart Simpson'\n```\n\n 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的`__init__`方法，在创建实例的时候，就把`name`，`score`等属性绑上去：\n\n```python\nclass Student(object):\n\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n```\n\n> 注意：特殊方法“__init__”前后分别有两个下划线！！！\n\n注意到`__init__`方法的第一个参数永远是`self`，表示创建的实例本身，因此，在`__init__`方法内部，就可以把各种属性绑定到`self`，因为`self`就指向创建的实例本身。\n\n有了`__init__`方法，在创建实例的时候，就不能传入空的参数了，必须传入与`__init__`方法匹配的参数，但`self`不需要传，Python解释器自己会把实例变量传进去：\n\n```python\nIn [14]: class Student(object):\n    ...:\n    ...:     def __init__(self, name, score):\n    ...:         self.name = name\n    ...:         self.score = score\n    ...:\n\nIn [15]: s = Student('Bart Simpson', 59)\n\nIn [16]: s.name\nOut[16]: 'Bart Simpson'\n\nIn [17]: s.score\nOut[17]: 59\n```\n\n和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量`self`，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。\n\n## 数据封装\n\n面向对象编程的一个重要特点就是数据封装。在上面的`Student`类中，每个实例就拥有各自的`name`和`score`这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：\n\n```python\nIn [19]: def print_score(std):\n    ...:     print('%s: %s' % (std.name, std.score))\n    ...:\n\nIn [20]: print_score(s)\nBart Simpson: 59\n```\n\n但是，既然`Student`实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在`Student`类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和`Student`类本身是关联起来的，我们称之为类的方法：\n\n```python\nIn [23]: class Student(object):\n    ...:\n    ...:     def __init__(self, name, score):\n    ...:         self.name = name\n    ...:         self.score = score\n    ...:\n    ...:     def print_score(self):\n    ...:         print('%s: %s' % (self.name, self.score))\n    ...:\n```\n\n要定义一个方法，除了第一个参数是`self`外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了`self`不用传递，其他参数正常传入：\n\n```python\nIn [24]: s = Student('Bart Simpson', 59)\n\nIn [25]: s.print_score()\nBart Simpson: 59\n```\n\n这样一来，我们从外部看`Student`类，就只需要知道，创建实例需要给出`name`和`score`，而如何打印，都是在`Student`类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。\n\n封装的另一个好处是可以给`Student`类增加新的方法，比如`get_grade`：\n\n```python\nclass Student(object):\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def get_grade(self):\n        if self.score >= 90:\n            return 'A'\n        elif self.score >= 60:\n            return 'B'\n        else:\n            return 'C'\n \n```\n\n同样的，`get_grade`方法可以直接在实例变量上调用，不需要知道内部实现细节\n\n```python\nlisa = Student('Lisa', 99)\nbart = Student('Bart', 59)\nprint(lisa.name, lisa.get_grade())\nprint(bart.name, bart.get_grade())\n```\n\n## 继承\n\n- 在程序中，继承描述的是多个类之间的所属关系。\n- 如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。\n\n### 1. 单继承\n\n> 子类A只继承了一个父类B, 那么此时两者之间的关系就是单继承\n\n- 单继承，子类直接继承父类的`__init__`方法\n  \n    ```python\n    class User(object):  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        # 子类继承父类的__init__方法，添加name属性\n        pass\n\n    vip = VipUser(\"xw\")  # vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性\n    print(vip.name)\n    ```\n\n- 单继承，子类自己实现`__init__`方法\n  \n    ```python\n    class User():  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        # 子类自己实现__init__方法，并没有直接使用继承父类的__init__方法\n        def __init__(self, name):  # 给vip用户添加属性：name\n            self.name = name\n\n    vip = VipUser(\"xw\")  # vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性\n    print(vip.name)\n    ```\n\n- 单继承，子类在自己实现的`__init__`方法中，还调用了父类的`__init__`方法\n\n    ```python\n    # 对象初始化，__init__方法只会执行一次\n\n    class User():  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        def __init__(self, name, money):\n            # self.name = name\n            # User.__init__(self)   # 通过父类名直接调用父类的__init__方法实现name属性的添加\n            super().__init__(name)  # 通过super()调用父类的__init__方法添加name属性\n            self.money = money  # 自己添加money属性\n\n    vip = VipUser(\"xw\", 300)  # vip初始化时，__init__方法执行一次\n    print(vip.name, vip.money)\n\n    ```\n\n### 2. 多继承\n\n> 多继承可以继承多个父类，也继承了所有父类的属性和方法\n\n - 如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性`__mro__`的顺序来查找）\n - 多个父类中，不重名的属性和方法，不会有任何影响。\n\n    ```python\n    class A():\n        def __init__(self):\n            self.name = \"A\"\n\n    class B():\n        def __init__(self):\n            self.name = \"B\"\n\n    class C(A, B):\n        pass\n\n    c = C()\n    print(C.mro())  # [<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]\n    print(c.name)  # A\n    ```\n\n### 3. 多层继承\n\n>  多层继承主要说的是`super`的搜索顺序,而搜索顺序主要是根据类的魔法属性`__mro__`的顺序来查找\n\n- `super()`调用方法顺序示例\n\n    ```python\n    class A():\n        def run(self):\n            print(\">>>A<<<\")\n\n    class B1(A):\n        def run(self):\n            print(\">>>B1<<<\")\n            super().run()\n            \n    class B2(A):\n        def run(self):\n            print(\">>>B2<<<\")\n            super().run()\n            \n    class C(B1, B2):\n        def run(self):\n            print(\">>>C<<<\")\n            super().run()\n            \n    c= C()\n    print(C.mro())\n    c.run()\n    ```\n\n    > 程序运行结果：\n\n    ```shell\n    [<class '__main__.C'>, <class '__main__.B1'>, <class '__main__.B2'>, <class '__main__.A'>, <class 'object'>]\n    >>>C<<<\n    >>>B1<<<\n    >>>B2<<<\n    >>>A<<<\n    ```\n- 参数传递示例\n\n    ```python\n    class Father(object):\n        def __init__(self, name):\n            print('father')\n            self.name = name\n    \n    class Son1(Father):\n        def __init__(self, name, age, *args):\n            print('Son1')\n            self.age = age\n            super().__init__(name, *args)\n    \n    class Son2(Father):\n        def __init__(self, name, gender):\n            print('Son2')\n            self.gender = gender\n            super().__init__(name)\n    \n    class Grandson(Son1, Son2):\n        def __init__(self, name, age, gender):\n            print(\"Grandson\")\n            super().__init__(name, age, gender)\n    \n    print(Grandson.mro())\n    print(\"+\" * 30)\n    \n    grand_son = Grandson('王明', 14, '男')\n    \n    print(\"+\" * 30)\n    print(grand_son.name, grand_son.age, grand_son.gender)\n    ```\n    \n    > 程序运行结果：\n    \n    ```shell\n    ++++++++++++++++++++++++++++++\n    Grandson\n    Son1\n    Son2\n    father\n    ++++++++++++++++++++++++++++++\n    王明 14 男\n    ```\n\n## 多态\n\n### 1. 多态\n\n所谓的多态就是同一类事物有不同的形态,(一个抽象类有多个子类，因而多态的概念依赖于继承)\n\n  - 序列类型有多种形态：字符串，列表，元组\n  - 动物有多种形态：猫，狗\n\n```python\n# 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度）\nclass Animal():\n    def __init__(self, name, foods):\n        self.name = name\n        self.foods = foods\n\n    def eat(self):\n        print(\"%s的食物是%s\" % (self.name, self.foods))\n\n    def run(self):\n        print(\"%s跑的很快\" % self.name)\n\n    def call(self):\n        pass\n\n\nclass Dog(Animal):\n    def call(self):\n        print(\"%s:汪汪大叫\" % self.name)\n\n\nclass Cat(Animal):\n    def call(self):\n        print(\"%s:喵喵大叫\" % self.name)\n\n\ndog = Dog(\"哈士奇\", \"狗粮\")\ndog.eat()\ndog.call()\n\ncat = Cat(\"九命妖猫\", \"仙露\")\ncat.eat()\ncat.run()\n\n```\n\n### 2. 多态性\n\n> 什么是多态性（注意：多态与多态性是两种概念）\n\n- 多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。\n- 在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。\n- 也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。\n\n```python\n# 多态性依赖于：继承\n##多态性：定义统一的接口，\n#多态性：一种调用方式，不同的执行效果（多态性）\ndef func(obj): # obj这个参数没有类型限制，可以传入不同类型的值\n\tobj.eat()  #调用的逻辑都一样，执行的结果却不一样\n\nfunc(dog)\nfunc(cat)\n```\n> 为什么要用多态性（多态性的好处）\n\n其实大家从上面多态性的例子可以看出，我们并没有增加上面新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？\n\n-  增加了程序的灵活性\n以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)\n-  增加了程序额可扩展性\n通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用\n\n> - 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度） \n> - 多态性：一种调用方式，不同的执行效果（多态性）\n\n## 类型判断\n\n\n\n## 访问权限\n\n\n\n## 实例属性与类属性\n\n\n\n## 实例方法、静态方法与类方法\n\n### 1. 方法分类\n\n先看语法，`python` 类语法中有三种方法，实例方法，静态方法，类方法。\n\n> `python`中`self`，`cls`的区别:\n\n   - 普通实例方法，第一个参数需要是`self`，它表示一个具体的实例本身。\n   - 如果用了`staticmethod`，那么就可以无视这个`self`，而将这个方法当成一个普通的函数使用。\n   - 而对于`classmethod`，它的第一个参数不是`self`，是`cls`，它表示这个类本身。\n\n```python \n# coding:utf-8\nclass Foo(object):\n    \"\"\"类三种方法语法形式\"\"\"\n\n    def instance_method(self):\n        print(\"是类{}的实例方法，只能被实例对象调用\".format(Foo))\n\n    @staticmethod\n    def static_method():\n        print(\"是静态方法\")\n\n    @classmethod\n    def class_method(cls):\n        print(\"是类方法\")\n\n\nfoo = Foo()\nfoo.instance_method()\nfoo.static_method()\nfoo.class_method()\nprint('----------------')\nFoo.static_method()\nFoo.class_method()\n\n```\n\n运行结果：\n    \n```shell\n是类<class '__main__.Foo'>的实例方法，只能被实例对象调用\n是静态方法\n是类方法\n----------------\n是静态方法\n是类方法\n```\n\n> 说明\n\n- 调用\n    - 实例方法只能被实例对象调用\n    - 静态方法(由`@staticmethod`装饰的方法)、类方法(由`@classmethod`装饰的方法)，可以被类或类的实例对象调用。\n- 参数\n    - 实例方法，第一个参数必须要默认传实例对象，一般习惯用`self`。\n    - 静态方法，参数没有要求。\n    - 类方法，第一个参数必须要默认传类，一般习惯用`cls`。\n\n### 2. 方法调用\n\n> 静态方法调用另一个静态方法，如果改用类方法调用静态方法，可以让`cls`代替类，让代码看起来精简一些。也防止类名修改了，不用在类定义中修改原来的类名。\n\n```python\n# coding:utf-8\nclass Foo(object):\n    X = 1\n    Y = 2\n\n    @staticmethod\n    def averag(*mixes):\n        return sum(mixes) / len(mixes)\n\n    @staticmethod\n    def static_method():  # 在静态方法中调用静态方法\n        print(\"在静态方法中调用静态方法\")\n        return Foo.averag(Foo.X, Foo.Y)\n\n    @classmethod\n    def class_method(cls):  # 在类方法中使用静态方法\n        print(\"在类方法中使用静态方法\")\n        return cls.averag(cls.X, cls.Y)\n\nfoo = Foo()\nprint(foo.static_method())\nprint(foo.class_method())\n```\n> 运行结果：\n\n```shell\n在静态方法中调用静态方法\n1.5\n在类方法中使用静态方法\n1.5\n```\n\n### 3.继承类中的区别\n\n从下面代码可以看出，如果子类继承父类的方法，子类覆盖了父类的静态方法:\n\n- 子类的实例继承了父类的`static_method`静态方法，调用该方法，还是调用的父类的方法和类属性。\n- 子类的实例继承了父类的`class_method`类方法，调用该方法，调用的是子类的方法和子类的类属性。\n\n```python\nclass Foo(object):\n    X = 1\n    Y = 14\n\n    @staticmethod\n    def averag(*mixes):  # \"父类中的静态方法\"\n        return sum(mixes) / len(mixes)\n\n    @staticmethod\n    def static_method():  # \"父类中的静态方法\"\n        print(\"父类中的静态方法\")\n        return Foo.averag(Foo.X, Foo.Y)\n\n    @classmethod\n    def class_method(cls):  # 父类中的类方法\n        print(\"父类中的类方法\")\n        return cls.averag(cls.X, cls.Y)\n\n\nclass Son(Foo):\n    X = 3\n    Y = 5\n\n    @staticmethod\n    def averag(*mixes):  # \"子类中重载了父类的静态方法\"\n        print(\"子类中重载了父类的静态方法\")\n        return sum(mixes) / len(mixes)\n\n\np = Son()\nprint(\"result of p.averag(1,5)\")\nprint(p.averag(1, 5))\nprint(\"result of p.static_method()\")\nprint(p.static_method())\nprint(\"result of p.class_method()\")\nprint(p.class_method())\n```\n\n> 运行结果：\n\n```python\nresult of p.averag(1,5)\n子类中重载了父类的静态方法\n3.0\nresult of p.static_method()\n父类中的静态方法\n7.5\nresult of p.class_method()\n父类中的类方法\n子类中重载了父类的静态方法\n4.0\n```","source":"_posts/python面向对象-基础.md","raw":"---\ntitle: python面向对象\ndate: 2019-11-04 22:36:03\ncategories:\n  - 技术\n  - python\n  - 基础\ntags:\n  - 面向对象\n---\n\n## 类与实例\n\n面向对象最重要的概念就是类（`Class`）和实例（`Instance`），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。\n\n仍以Student类为例，在Python中，定义类是通过`class`关键字：\n\n```python\nclass Student(object):\n    pass\n```\n\n`class`后面紧接着是类名，即`Student`，类名通常是大写开头的单词，紧接着是`(object)`，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用`object`类，这是所有类最终都会继承的类。\n\n定义好了`Student`类，就可以根据`Student`类创建出`Student`的实例，创建实例是通过`类名+()`实现的：\n\n```python\nIn [5]: s = Student()\n\nIn [6]: s\nOut[6]: <__main__.Student at 0x107615860>\n\nIn [7]: Student\nOut[7]: <class '__main__.Student'>\n```\n\n可以看到，变量`s`指向的就是一个`Student`的实例，后面的`0x107615860`是内存地址，每个object的地址都不一样，而`Student`本身则是一个类。\n\n可以自由地给一个实例变量绑定属性，比如，给实例`s`绑定一个`name`属性：\n\n```python\nIn [9]: s.name = 'Bart Simpson'\n\nIn [10]: s.name\nOut[10]: 'Bart Simpson'\n```\n\n 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的`__init__`方法，在创建实例的时候，就把`name`，`score`等属性绑上去：\n\n```python\nclass Student(object):\n\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n```\n\n> 注意：特殊方法“__init__”前后分别有两个下划线！！！\n\n注意到`__init__`方法的第一个参数永远是`self`，表示创建的实例本身，因此，在`__init__`方法内部，就可以把各种属性绑定到`self`，因为`self`就指向创建的实例本身。\n\n有了`__init__`方法，在创建实例的时候，就不能传入空的参数了，必须传入与`__init__`方法匹配的参数，但`self`不需要传，Python解释器自己会把实例变量传进去：\n\n```python\nIn [14]: class Student(object):\n    ...:\n    ...:     def __init__(self, name, score):\n    ...:         self.name = name\n    ...:         self.score = score\n    ...:\n\nIn [15]: s = Student('Bart Simpson', 59)\n\nIn [16]: s.name\nOut[16]: 'Bart Simpson'\n\nIn [17]: s.score\nOut[17]: 59\n```\n\n和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量`self`，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。\n\n## 数据封装\n\n面向对象编程的一个重要特点就是数据封装。在上面的`Student`类中，每个实例就拥有各自的`name`和`score`这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：\n\n```python\nIn [19]: def print_score(std):\n    ...:     print('%s: %s' % (std.name, std.score))\n    ...:\n\nIn [20]: print_score(s)\nBart Simpson: 59\n```\n\n但是，既然`Student`实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在`Student`类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和`Student`类本身是关联起来的，我们称之为类的方法：\n\n```python\nIn [23]: class Student(object):\n    ...:\n    ...:     def __init__(self, name, score):\n    ...:         self.name = name\n    ...:         self.score = score\n    ...:\n    ...:     def print_score(self):\n    ...:         print('%s: %s' % (self.name, self.score))\n    ...:\n```\n\n要定义一个方法，除了第一个参数是`self`外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了`self`不用传递，其他参数正常传入：\n\n```python\nIn [24]: s = Student('Bart Simpson', 59)\n\nIn [25]: s.print_score()\nBart Simpson: 59\n```\n\n这样一来，我们从外部看`Student`类，就只需要知道，创建实例需要给出`name`和`score`，而如何打印，都是在`Student`类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。\n\n封装的另一个好处是可以给`Student`类增加新的方法，比如`get_grade`：\n\n```python\nclass Student(object):\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def get_grade(self):\n        if self.score >= 90:\n            return 'A'\n        elif self.score >= 60:\n            return 'B'\n        else:\n            return 'C'\n \n```\n\n同样的，`get_grade`方法可以直接在实例变量上调用，不需要知道内部实现细节\n\n```python\nlisa = Student('Lisa', 99)\nbart = Student('Bart', 59)\nprint(lisa.name, lisa.get_grade())\nprint(bart.name, bart.get_grade())\n```\n\n## 继承\n\n- 在程序中，继承描述的是多个类之间的所属关系。\n- 如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。\n\n### 1. 单继承\n\n> 子类A只继承了一个父类B, 那么此时两者之间的关系就是单继承\n\n- 单继承，子类直接继承父类的`__init__`方法\n  \n    ```python\n    class User(object):  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        # 子类继承父类的__init__方法，添加name属性\n        pass\n\n    vip = VipUser(\"xw\")  # vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性\n    print(vip.name)\n    ```\n\n- 单继承，子类自己实现`__init__`方法\n  \n    ```python\n    class User():  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        # 子类自己实现__init__方法，并没有直接使用继承父类的__init__方法\n        def __init__(self, name):  # 给vip用户添加属性：name\n            self.name = name\n\n    vip = VipUser(\"xw\")  # vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性\n    print(vip.name)\n    ```\n\n- 单继承，子类在自己实现的`__init__`方法中，还调用了父类的`__init__`方法\n\n    ```python\n    # 对象初始化，__init__方法只会执行一次\n\n    class User():  # 创建用户类\n        def __init__(self, name):  # 给用户添加属性：name\n            self.name = name\n\n    class VipUser(User):\n        def __init__(self, name, money):\n            # self.name = name\n            # User.__init__(self)   # 通过父类名直接调用父类的__init__方法实现name属性的添加\n            super().__init__(name)  # 通过super()调用父类的__init__方法添加name属性\n            self.money = money  # 自己添加money属性\n\n    vip = VipUser(\"xw\", 300)  # vip初始化时，__init__方法执行一次\n    print(vip.name, vip.money)\n\n    ```\n\n### 2. 多继承\n\n> 多继承可以继承多个父类，也继承了所有父类的属性和方法\n\n - 如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性`__mro__`的顺序来查找）\n - 多个父类中，不重名的属性和方法，不会有任何影响。\n\n    ```python\n    class A():\n        def __init__(self):\n            self.name = \"A\"\n\n    class B():\n        def __init__(self):\n            self.name = \"B\"\n\n    class C(A, B):\n        pass\n\n    c = C()\n    print(C.mro())  # [<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]\n    print(c.name)  # A\n    ```\n\n### 3. 多层继承\n\n>  多层继承主要说的是`super`的搜索顺序,而搜索顺序主要是根据类的魔法属性`__mro__`的顺序来查找\n\n- `super()`调用方法顺序示例\n\n    ```python\n    class A():\n        def run(self):\n            print(\">>>A<<<\")\n\n    class B1(A):\n        def run(self):\n            print(\">>>B1<<<\")\n            super().run()\n            \n    class B2(A):\n        def run(self):\n            print(\">>>B2<<<\")\n            super().run()\n            \n    class C(B1, B2):\n        def run(self):\n            print(\">>>C<<<\")\n            super().run()\n            \n    c= C()\n    print(C.mro())\n    c.run()\n    ```\n\n    > 程序运行结果：\n\n    ```shell\n    [<class '__main__.C'>, <class '__main__.B1'>, <class '__main__.B2'>, <class '__main__.A'>, <class 'object'>]\n    >>>C<<<\n    >>>B1<<<\n    >>>B2<<<\n    >>>A<<<\n    ```\n- 参数传递示例\n\n    ```python\n    class Father(object):\n        def __init__(self, name):\n            print('father')\n            self.name = name\n    \n    class Son1(Father):\n        def __init__(self, name, age, *args):\n            print('Son1')\n            self.age = age\n            super().__init__(name, *args)\n    \n    class Son2(Father):\n        def __init__(self, name, gender):\n            print('Son2')\n            self.gender = gender\n            super().__init__(name)\n    \n    class Grandson(Son1, Son2):\n        def __init__(self, name, age, gender):\n            print(\"Grandson\")\n            super().__init__(name, age, gender)\n    \n    print(Grandson.mro())\n    print(\"+\" * 30)\n    \n    grand_son = Grandson('王明', 14, '男')\n    \n    print(\"+\" * 30)\n    print(grand_son.name, grand_son.age, grand_son.gender)\n    ```\n    \n    > 程序运行结果：\n    \n    ```shell\n    ++++++++++++++++++++++++++++++\n    Grandson\n    Son1\n    Son2\n    father\n    ++++++++++++++++++++++++++++++\n    王明 14 男\n    ```\n\n## 多态\n\n### 1. 多态\n\n所谓的多态就是同一类事物有不同的形态,(一个抽象类有多个子类，因而多态的概念依赖于继承)\n\n  - 序列类型有多种形态：字符串，列表，元组\n  - 动物有多种形态：猫，狗\n\n```python\n# 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度）\nclass Animal():\n    def __init__(self, name, foods):\n        self.name = name\n        self.foods = foods\n\n    def eat(self):\n        print(\"%s的食物是%s\" % (self.name, self.foods))\n\n    def run(self):\n        print(\"%s跑的很快\" % self.name)\n\n    def call(self):\n        pass\n\n\nclass Dog(Animal):\n    def call(self):\n        print(\"%s:汪汪大叫\" % self.name)\n\n\nclass Cat(Animal):\n    def call(self):\n        print(\"%s:喵喵大叫\" % self.name)\n\n\ndog = Dog(\"哈士奇\", \"狗粮\")\ndog.eat()\ndog.call()\n\ncat = Cat(\"九命妖猫\", \"仙露\")\ncat.eat()\ncat.run()\n\n```\n\n### 2. 多态性\n\n> 什么是多态性（注意：多态与多态性是两种概念）\n\n- 多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。\n- 在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。\n- 也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。\n\n```python\n# 多态性依赖于：继承\n##多态性：定义统一的接口，\n#多态性：一种调用方式，不同的执行效果（多态性）\ndef func(obj): # obj这个参数没有类型限制，可以传入不同类型的值\n\tobj.eat()  #调用的逻辑都一样，执行的结果却不一样\n\nfunc(dog)\nfunc(cat)\n```\n> 为什么要用多态性（多态性的好处）\n\n其实大家从上面多态性的例子可以看出，我们并没有增加上面新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？\n\n-  增加了程序的灵活性\n以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)\n-  增加了程序额可扩展性\n通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用\n\n> - 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度） \n> - 多态性：一种调用方式，不同的执行效果（多态性）\n\n## 类型判断\n\n\n\n## 访问权限\n\n\n\n## 实例属性与类属性\n\n\n\n## 实例方法、静态方法与类方法\n\n### 1. 方法分类\n\n先看语法，`python` 类语法中有三种方法，实例方法，静态方法，类方法。\n\n> `python`中`self`，`cls`的区别:\n\n   - 普通实例方法，第一个参数需要是`self`，它表示一个具体的实例本身。\n   - 如果用了`staticmethod`，那么就可以无视这个`self`，而将这个方法当成一个普通的函数使用。\n   - 而对于`classmethod`，它的第一个参数不是`self`，是`cls`，它表示这个类本身。\n\n```python \n# coding:utf-8\nclass Foo(object):\n    \"\"\"类三种方法语法形式\"\"\"\n\n    def instance_method(self):\n        print(\"是类{}的实例方法，只能被实例对象调用\".format(Foo))\n\n    @staticmethod\n    def static_method():\n        print(\"是静态方法\")\n\n    @classmethod\n    def class_method(cls):\n        print(\"是类方法\")\n\n\nfoo = Foo()\nfoo.instance_method()\nfoo.static_method()\nfoo.class_method()\nprint('----------------')\nFoo.static_method()\nFoo.class_method()\n\n```\n\n运行结果：\n    \n```shell\n是类<class '__main__.Foo'>的实例方法，只能被实例对象调用\n是静态方法\n是类方法\n----------------\n是静态方法\n是类方法\n```\n\n> 说明\n\n- 调用\n    - 实例方法只能被实例对象调用\n    - 静态方法(由`@staticmethod`装饰的方法)、类方法(由`@classmethod`装饰的方法)，可以被类或类的实例对象调用。\n- 参数\n    - 实例方法，第一个参数必须要默认传实例对象，一般习惯用`self`。\n    - 静态方法，参数没有要求。\n    - 类方法，第一个参数必须要默认传类，一般习惯用`cls`。\n\n### 2. 方法调用\n\n> 静态方法调用另一个静态方法，如果改用类方法调用静态方法，可以让`cls`代替类，让代码看起来精简一些。也防止类名修改了，不用在类定义中修改原来的类名。\n\n```python\n# coding:utf-8\nclass Foo(object):\n    X = 1\n    Y = 2\n\n    @staticmethod\n    def averag(*mixes):\n        return sum(mixes) / len(mixes)\n\n    @staticmethod\n    def static_method():  # 在静态方法中调用静态方法\n        print(\"在静态方法中调用静态方法\")\n        return Foo.averag(Foo.X, Foo.Y)\n\n    @classmethod\n    def class_method(cls):  # 在类方法中使用静态方法\n        print(\"在类方法中使用静态方法\")\n        return cls.averag(cls.X, cls.Y)\n\nfoo = Foo()\nprint(foo.static_method())\nprint(foo.class_method())\n```\n> 运行结果：\n\n```shell\n在静态方法中调用静态方法\n1.5\n在类方法中使用静态方法\n1.5\n```\n\n### 3.继承类中的区别\n\n从下面代码可以看出，如果子类继承父类的方法，子类覆盖了父类的静态方法:\n\n- 子类的实例继承了父类的`static_method`静态方法，调用该方法，还是调用的父类的方法和类属性。\n- 子类的实例继承了父类的`class_method`类方法，调用该方法，调用的是子类的方法和子类的类属性。\n\n```python\nclass Foo(object):\n    X = 1\n    Y = 14\n\n    @staticmethod\n    def averag(*mixes):  # \"父类中的静态方法\"\n        return sum(mixes) / len(mixes)\n\n    @staticmethod\n    def static_method():  # \"父类中的静态方法\"\n        print(\"父类中的静态方法\")\n        return Foo.averag(Foo.X, Foo.Y)\n\n    @classmethod\n    def class_method(cls):  # 父类中的类方法\n        print(\"父类中的类方法\")\n        return cls.averag(cls.X, cls.Y)\n\n\nclass Son(Foo):\n    X = 3\n    Y = 5\n\n    @staticmethod\n    def averag(*mixes):  # \"子类中重载了父类的静态方法\"\n        print(\"子类中重载了父类的静态方法\")\n        return sum(mixes) / len(mixes)\n\n\np = Son()\nprint(\"result of p.averag(1,5)\")\nprint(p.averag(1, 5))\nprint(\"result of p.static_method()\")\nprint(p.static_method())\nprint(\"result of p.class_method()\")\nprint(p.class_method())\n```\n\n> 运行结果：\n\n```python\nresult of p.averag(1,5)\n子类中重载了父类的静态方法\n3.0\nresult of p.static_method()\n父类中的静态方法\n7.5\nresult of p.class_method()\n父类中的类方法\n子类中重载了父类的静态方法\n4.0\n```","slug":"python面向对象-基础","published":1,"updated":"2021-01-23T15:10:50.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnugc00h0jjln8c5922e8","content":"<h2 id=\"类与实例\"><a href=\"#类与实例\" class=\"headerlink\" title=\"类与实例\"></a>类与实例</h2><p>面向对象最重要的概念就是类（<code>Class</code>）和实例（<code>Instance</code>），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-keyword\">pass</span><br></code></pre></div></td></tr></table></figure>\n<p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p>\n<p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过<code>类名+()</code>实现的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">5</span>]: s = Student()<br><br>In [<span class=\"hljs-number\">6</span>]: s<br>Out[<span class=\"hljs-number\">6</span>]: &lt;__main__.Student at <span class=\"hljs-number\">0x107615860</span>&gt;<br><br>In [<span class=\"hljs-number\">7</span>]: Student<br>Out[<span class=\"hljs-number\">7</span>]: &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &#x27;<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Student</span>&#x27;&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>可以看到，变量<code>s</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x107615860</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p>\n<p>可以自由地给一个实例变量绑定属性，比如，给实例<code>s</code>绑定一个<code>name</code>属性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">9</span>]: s.name = <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br><br>In [<span class=\"hljs-number\">10</span>]: s.name<br>Out[<span class=\"hljs-number\">10</span>]: <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p> 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意：特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p>\n</blockquote>\n<p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p>\n<p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">14</span>]: <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>    ...:         self.name = name<br>    ...:         self.score = score<br>    ...:<br><br>In [<span class=\"hljs-number\">15</span>]: s = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br><br>In [<span class=\"hljs-number\">16</span>]: s.name<br>Out[<span class=\"hljs-number\">16</span>]: <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br><br>In [<span class=\"hljs-number\">17</span>]: s.score<br>Out[<span class=\"hljs-number\">17</span>]: <span class=\"hljs-number\">59</span><br></code></pre></div></td></tr></table></figure>\n<p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>\n<h2 id=\"数据封装\"><a href=\"#数据封装\" class=\"headerlink\" title=\"数据封装\"></a>数据封装</h2><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">19</span>]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_score</span>(<span class=\"hljs-params\">std</span>):</span><br>    ...:     print(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (std.name, std.score))<br>    ...:<br><br>In [<span class=\"hljs-number\">20</span>]: print_score(s)<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></div></td></tr></table></figure>\n<p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">23</span>]: <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>    ...:         self.name = name<br>    ...:         self.score = score<br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_score</span>(<span class=\"hljs-params\">self</span>):</span><br>    ...:         print(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (self.name, self.score))<br>    ...:<br></code></pre></div></td></tr></table></figure>\n<p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">24</span>]: s = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br><br>In [<span class=\"hljs-number\">25</span>]: s.print_score()<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></div></td></tr></table></figure>\n<p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p>\n<p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_grade</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">if</span> self.score &gt;= <span class=\"hljs-number\">90</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;A&#x27;</span><br>        <span class=\"hljs-keyword\">elif</span> self.score &gt;= <span class=\"hljs-number\">60</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;B&#x27;</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;C&#x27;</span><br> <br></code></pre></div></td></tr></table></figure>\n<p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">lisa = Student(<span class=\"hljs-string\">&#x27;Lisa&#x27;</span>, <span class=\"hljs-number\">99</span>)<br>bart = Student(<span class=\"hljs-string\">&#x27;Bart&#x27;</span>, <span class=\"hljs-number\">59</span>)<br>print(lisa.name, lisa.get_grade())<br>print(bart.name, bart.get_grade())<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>在程序中，继承描述的是多个类之间的所属关系。</li>\n<li>如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。</li>\n</ul>\n<h3 id=\"1-单继承\"><a href=\"#1-单继承\" class=\"headerlink\" title=\"1. 单继承\"></a>1. 单继承</h3><blockquote>\n<p>子类A只继承了一个父类B, 那么此时两者之间的关系就是单继承</p>\n</blockquote>\n<ul>\n<li><p>单继承，子类直接继承父类的<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-comment\"># 子类继承父类的__init__方法，添加name属性</span><br>    <span class=\"hljs-keyword\">pass</span><br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>)  <span class=\"hljs-comment\"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span><br>print(vip.name)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>单继承，子类自己实现<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>():</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-comment\"># 子类自己实现__init__方法，并没有直接使用继承父类的__init__方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给vip用户添加属性：name</span><br>        self.name = name<br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>)  <span class=\"hljs-comment\"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span><br>print(vip.name)<br></code></pre></div></td></tr></table></figure></li>\n<li><p>单继承，子类在自己实现的<code>__init__</code>方法中，还调用了父类的<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 对象初始化，__init__方法只会执行一次</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>():</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, money</span>):</span><br>        <span class=\"hljs-comment\"># self.name = name</span><br>        <span class=\"hljs-comment\"># User.__init__(self)   # 通过父类名直接调用父类的__init__方法实现name属性的添加</span><br>        <span class=\"hljs-built_in\">super</span>().__init__(name)  <span class=\"hljs-comment\"># 通过super()调用父类的__init__方法添加name属性</span><br>        self.money = money  <span class=\"hljs-comment\"># 自己添加money属性</span><br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>, <span class=\"hljs-number\">300</span>)  <span class=\"hljs-comment\"># vip初始化时，__init__方法执行一次</span><br>print(vip.name, vip.money)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-多继承\"><a href=\"#2-多继承\" class=\"headerlink\" title=\"2. 多继承\"></a>2. 多继承</h3></li>\n</ul>\n<blockquote>\n<p>多继承可以继承多个父类，也继承了所有父类的属性和方法</p>\n</blockquote>\n<ul>\n<li><p>如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性<code>__mro__</code>的顺序来查找）</p>\n</li>\n<li><p>多个父类中，不重名的属性和方法，不会有任何影响。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        self.name = <span class=\"hljs-string\">&quot;A&quot;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        self.name = <span class=\"hljs-string\">&quot;B&quot;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">A, B</span>):</span><br>    <span class=\"hljs-keyword\">pass</span><br><br>c = C()<br>print(C.mro())  <span class=\"hljs-comment\"># [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br>print(c.name)  <span class=\"hljs-comment\"># A</span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-多层继承\"><a href=\"#3-多层继承\" class=\"headerlink\" title=\"3. 多层继承\"></a>3. 多层继承</h3></li>\n</ul>\n<blockquote>\n<p> 多层继承主要说的是<code>super</code>的搜索顺序,而搜索顺序主要是根据类的魔法属性<code>__mro__</code>的顺序来查找</p>\n</blockquote>\n<ul>\n<li><p><code>super()</code>调用方法顺序示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;A&lt;&lt;&lt;&quot;</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B1</span>(<span class=\"hljs-params\">A</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;B1&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B2</span>(<span class=\"hljs-params\">A</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;B2&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">B1, B2</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;C&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br>c= C()<br>print(C.mro())<br>c.run()<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>程序运行结果：</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B1&#x27;&gt;, &lt;class &#x27;__main__.B2&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;C&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;B1&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;B2&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;A&lt;&lt;&lt;</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p>参数传递示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;father&#x27;</span>)<br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son1</span>(<span class=\"hljs-params\">Father</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, age, *args</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;Son1&#x27;</span>)<br>        self.age = age<br>        <span class=\"hljs-built_in\">super</span>().__init__(name, *args)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son2</span>(<span class=\"hljs-params\">Father</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, gender</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;Son2&#x27;</span>)<br>        self.gender = gender<br>        <span class=\"hljs-built_in\">super</span>().__init__(name)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grandson</span>(<span class=\"hljs-params\">Son1, Son2</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, age, gender</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Grandson&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().__init__(name, age, gender)<br><br>print(Grandson.mro())<br>print(<span class=\"hljs-string\">&quot;+&quot;</span> * <span class=\"hljs-number\">30</span>)<br><br>grand_son = Grandson(<span class=\"hljs-string\">&#x27;王明&#x27;</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>)<br><br>print(<span class=\"hljs-string\">&quot;+&quot;</span> * <span class=\"hljs-number\">30</span>)<br>print(grand_son.name, grand_son.age, grand_son.gender)<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>程序运行结果：</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">++++++++++++++++++++++++++++++<br>Grandson<br>Son1<br>Son2<br>father<br>++++++++++++++++++++++++++++++<br>王明 14 男<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2></li>\n</ul>\n<h3 id=\"1-多态\"><a href=\"#1-多态\" class=\"headerlink\" title=\"1. 多态\"></a>1. 多态</h3><p>所谓的多态就是同一类事物有不同的形态,(一个抽象类有多个子类，因而多态的概念依赖于继承)</p>\n<ul>\n<li>序列类型有多种形态：字符串，列表，元组</li>\n<li>动物有多种形态：猫，狗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度）</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, foods</span>):</span><br>        self.name = name<br>        self.foods = foods<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">eat</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s的食物是%s&quot;</span> % (self.name, self.foods))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s跑的很快&quot;</span> % self.name)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">pass</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">Animal</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s:汪汪大叫&quot;</span> % self.name)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">Animal</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s:喵喵大叫&quot;</span> % self.name)<br><br><br>dog = Dog(<span class=\"hljs-string\">&quot;哈士奇&quot;</span>, <span class=\"hljs-string\">&quot;狗粮&quot;</span>)<br>dog.eat()<br>dog.call()<br><br>cat = Cat(<span class=\"hljs-string\">&quot;九命妖猫&quot;</span>, <span class=\"hljs-string\">&quot;仙露&quot;</span>)<br>cat.eat()<br>cat.run()<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-多态性\"><a href=\"#2-多态性\" class=\"headerlink\" title=\"2. 多态性\"></a>2. 多态性</h3><blockquote>\n<p>什么是多态性（注意：多态与多态性是两种概念）</p>\n</blockquote>\n<ul>\n<li>多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。</li>\n<li>在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。</li>\n<li>也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多态性依赖于：继承</span><br><span class=\"hljs-comment\">##多态性：定义统一的接口，</span><br><span class=\"hljs-comment\">#多态性：一种调用方式，不同的执行效果（多态性）</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">obj</span>):</span> <span class=\"hljs-comment\"># obj这个参数没有类型限制，可以传入不同类型的值</span><br>\tobj.eat()  <span class=\"hljs-comment\">#调用的逻辑都一样，执行的结果却不一样</span><br><br>func(dog)<br>func(cat)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>为什么要用多态性（多态性的好处）</p>\n</blockquote>\n<p>其实大家从上面多态性的例子可以看出，我们并没有增加上面新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？</p>\n<ul>\n<li>增加了程序的灵活性<br>以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)</li>\n<li>增加了程序额可扩展性<br>通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用</li>\n</ul>\n<blockquote>\n<ul>\n<li>多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度） </li>\n<li>多态性：一种调用方式，不同的执行效果（多态性）</li>\n</ul>\n</blockquote>\n<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><h2 id=\"访问权限\"><a href=\"#访问权限\" class=\"headerlink\" title=\"访问权限\"></a>访问权限</h2><h2 id=\"实例属性与类属性\"><a href=\"#实例属性与类属性\" class=\"headerlink\" title=\"实例属性与类属性\"></a>实例属性与类属性</h2><h2 id=\"实例方法、静态方法与类方法\"><a href=\"#实例方法、静态方法与类方法\" class=\"headerlink\" title=\"实例方法、静态方法与类方法\"></a>实例方法、静态方法与类方法</h2><h3 id=\"1-方法分类\"><a href=\"#1-方法分类\" class=\"headerlink\" title=\"1. 方法分类\"></a>1. 方法分类</h3><p>先看语法，<code>python</code> 类语法中有三种方法，实例方法，静态方法，类方法。</p>\n<blockquote>\n<p><code>python</code>中<code>self</code>，<code>cls</code>的区别:</p>\n</blockquote>\n<ul>\n<li>普通实例方法，第一个参数需要是<code>self</code>，它表示一个具体的实例本身。</li>\n<li>如果用了<code>staticmethod</code>，那么就可以无视这个<code>self</code>，而将这个方法当成一个普通的函数使用。</li>\n<li>而对于<code>classmethod</code>，它的第一个参数不是<code>self</code>，是<code>cls</code>，它表示这个类本身。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;类三种方法语法形式&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">instance_method</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;是类&#123;&#125;的实例方法，只能被实例对象调用&quot;</span>.<span class=\"hljs-built_in\">format</span>(Foo))<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span><br>        print(<span class=\"hljs-string\">&quot;是静态方法&quot;</span>)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span><br>        print(<span class=\"hljs-string\">&quot;是类方法&quot;</span>)<br><br><br>foo = Foo()<br>foo.instance_method()<br>foo.static_method()<br>foo.class_method()<br>print(<span class=\"hljs-string\">&#x27;----------------&#x27;</span>)<br>Foo.static_method()<br>Foo.class_method()<br><br></code></pre></div></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">是类&lt;class &#x27;__main__.Foo&#x27;&gt;的实例方法，只能被实例对象调用<br>是静态方法<br>是类方法<br>----------------<br>是静态方法<br>是类方法<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n<ul>\n<li>调用<ul>\n<li>实例方法只能被实例对象调用</li>\n<li>静态方法(由<code>@staticmethod</code>装饰的方法)、类方法(由<code>@classmethod</code>装饰的方法)，可以被类或类的实例对象调用。</li>\n</ul>\n</li>\n<li>参数<ul>\n<li>实例方法，第一个参数必须要默认传实例对象，一般习惯用<code>self</code>。</li>\n<li>静态方法，参数没有要求。</li>\n<li>类方法，第一个参数必须要默认传类，一般习惯用<code>cls</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-方法调用\"><a href=\"#2-方法调用\" class=\"headerlink\" title=\"2. 方法调用\"></a>2. 方法调用</h3><blockquote>\n<p>静态方法调用另一个静态方法，如果改用类方法调用静态方法，可以让<code>cls</code>代替类，让代码看起来精简一些。也防止类名修改了，不用在类定义中修改原来的类名。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    X = <span class=\"hljs-number\">1</span><br>    Y = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span>  <span class=\"hljs-comment\"># 在静态方法中调用静态方法</span><br>        print(<span class=\"hljs-string\">&quot;在静态方法中调用静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> Foo.averag(Foo.X, Foo.Y)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span>  <span class=\"hljs-comment\"># 在类方法中使用静态方法</span><br>        print(<span class=\"hljs-string\">&quot;在类方法中使用静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> cls.averag(cls.X, cls.Y)<br><br>foo = Foo()<br>print(foo.static_method())<br>print(foo.class_method())<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>运行结果：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">在静态方法中调用静态方法<br>1.5<br>在类方法中使用静态方法<br>1.5<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-继承类中的区别\"><a href=\"#3-继承类中的区别\" class=\"headerlink\" title=\"3.继承类中的区别\"></a>3.继承类中的区别</h3><p>从下面代码可以看出，如果子类继承父类的方法，子类覆盖了父类的静态方法:</p>\n<ul>\n<li>子类的实例继承了父类的<code>static_method</code>静态方法，调用该方法，还是调用的父类的方法和类属性。</li>\n<li>子类的实例继承了父类的<code>class_method</code>类方法，调用该方法，调用的是子类的方法和子类的类属性。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    X = <span class=\"hljs-number\">1</span><br>    Y = <span class=\"hljs-number\">14</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span>  <span class=\"hljs-comment\"># &quot;父类中的静态方法&quot;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span>  <span class=\"hljs-comment\"># &quot;父类中的静态方法&quot;</span><br>        print(<span class=\"hljs-string\">&quot;父类中的静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> Foo.averag(Foo.X, Foo.Y)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span>  <span class=\"hljs-comment\"># 父类中的类方法</span><br>        print(<span class=\"hljs-string\">&quot;父类中的类方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> cls.averag(cls.X, cls.Y)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span>(<span class=\"hljs-params\">Foo</span>):</span><br>    X = <span class=\"hljs-number\">3</span><br>    Y = <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span>  <span class=\"hljs-comment\"># &quot;子类中重载了父类的静态方法&quot;</span><br>        print(<span class=\"hljs-string\">&quot;子类中重载了父类的静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><br>p = Son()<br>print(<span class=\"hljs-string\">&quot;result of p.averag(1,5)&quot;</span>)<br>print(p.averag(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>))<br>print(<span class=\"hljs-string\">&quot;result of p.static_method()&quot;</span>)<br>print(p.static_method())<br>print(<span class=\"hljs-string\">&quot;result of p.class_method()&quot;</span>)<br>print(p.class_method())<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>运行结果：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">result of p.averag(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>)<br>子类中重载了父类的静态方法<br><span class=\"hljs-number\">3.0</span><br>result of p.static_method()<br>父类中的静态方法<br><span class=\"hljs-number\">7.5</span><br>result of p.class_method()<br>父类中的类方法<br>子类中重载了父类的静态方法<br><span class=\"hljs-number\">4.0</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类与实例\"><a href=\"#类与实例\" class=\"headerlink\" title=\"类与实例\"></a>类与实例</h2><p>面向对象最重要的概念就是类（<code>Class</code>）和实例（<code>Instance</code>），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n<p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p>\n<p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过<code>类名+()</code>实现的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">5</span>]: s = Student()<br><br>In [<span class=\"hljs-number\">6</span>]: s<br>Out[<span class=\"hljs-number\">6</span>]: &lt;__main__.Student at <span class=\"hljs-number\">0x107615860</span>&gt;<br><br>In [<span class=\"hljs-number\">7</span>]: Student<br>Out[<span class=\"hljs-number\">7</span>]: &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &#x27;<span class=\"hljs-title\">__main__</span>.<span class=\"hljs-title\">Student</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure>\n<p>可以看到，变量<code>s</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x107615860</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p>\n<p>可以自由地给一个实例变量绑定属性，比如，给实例<code>s</code>绑定一个<code>name</code>属性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">9</span>]: s.name = <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br><br>In [<span class=\"hljs-number\">10</span>]: s.name<br>Out[<span class=\"hljs-number\">10</span>]: <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br></code></pre></td></tr></table></figure>\n<p> 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p>\n</blockquote>\n<p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p>\n<p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">14</span>]: <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>    ...:         self.name = name<br>    ...:         self.score = score<br>    ...:<br><br>In [<span class=\"hljs-number\">15</span>]: s = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br><br>In [<span class=\"hljs-number\">16</span>]: s.name<br>Out[<span class=\"hljs-number\">16</span>]: <span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span><br><br>In [<span class=\"hljs-number\">17</span>]: s.score<br>Out[<span class=\"hljs-number\">17</span>]: <span class=\"hljs-number\">59</span><br></code></pre></td></tr></table></figure>\n<p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>\n<h2 id=\"数据封装\"><a href=\"#数据封装\" class=\"headerlink\" title=\"数据封装\"></a>数据封装</h2><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">19</span>]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_score</span>(<span class=\"hljs-params\">std</span>):</span><br>    ...:     print(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (std.name, std.score))<br>    ...:<br><br>In [<span class=\"hljs-number\">20</span>]: print_score(s)<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></td></tr></table></figure>\n<p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">23</span>]: <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>    ...:         self.name = name<br>    ...:         self.score = score<br>    ...:<br>    ...:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_score</span>(<span class=\"hljs-params\">self</span>):</span><br>    ...:         print(<span class=\"hljs-string\">&#x27;%s: %s&#x27;</span> % (self.name, self.score))<br>    ...:<br></code></pre></td></tr></table></figure>\n<p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">In [<span class=\"hljs-number\">24</span>]: s = Student(<span class=\"hljs-string\">&#x27;Bart Simpson&#x27;</span>, <span class=\"hljs-number\">59</span>)<br><br>In [<span class=\"hljs-number\">25</span>]: s.print_score()<br>Bart Simpson: <span class=\"hljs-number\">59</span><br></code></pre></td></tr></table></figure>\n<p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p>\n<p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_grade</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">if</span> self.score &gt;= <span class=\"hljs-number\">90</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;A&#x27;</span><br>        <span class=\"hljs-keyword\">elif</span> self.score &gt;= <span class=\"hljs-number\">60</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;B&#x27;</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;C&#x27;</span><br> <br></code></pre></td></tr></table></figure>\n<p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">lisa = Student(<span class=\"hljs-string\">&#x27;Lisa&#x27;</span>, <span class=\"hljs-number\">99</span>)<br>bart = Student(<span class=\"hljs-string\">&#x27;Bart&#x27;</span>, <span class=\"hljs-number\">59</span>)<br>print(lisa.name, lisa.get_grade())<br>print(bart.name, bart.get_grade())<br></code></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>在程序中，继承描述的是多个类之间的所属关系。</li>\n<li>如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。</li>\n</ul>\n<h3 id=\"1-单继承\"><a href=\"#1-单继承\" class=\"headerlink\" title=\"1. 单继承\"></a>1. 单继承</h3><blockquote>\n<p>子类A只继承了一个父类B, 那么此时两者之间的关系就是单继承</p>\n</blockquote>\n<ul>\n<li><p>单继承，子类直接继承父类的<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-comment\"># 子类继承父类的__init__方法，添加name属性</span><br>    <span class=\"hljs-keyword\">pass</span><br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>)  <span class=\"hljs-comment\"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span><br>print(vip.name)<br></code></pre></td></tr></table></figure></li>\n<li><p>单继承，子类自己实现<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>():</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-comment\"># 子类自己实现__init__方法，并没有直接使用继承父类的__init__方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给vip用户添加属性：name</span><br>        self.name = name<br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>)  <span class=\"hljs-comment\"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span><br>print(vip.name)<br></code></pre></td></tr></table></figure></li>\n<li><p>单继承，子类在自己实现的<code>__init__</code>方法中，还调用了父类的<code>__init__</code>方法</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 对象初始化，__init__方法只会执行一次</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span>():</span>  <span class=\"hljs-comment\"># 创建用户类</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span>  <span class=\"hljs-comment\"># 给用户添加属性：name</span><br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VipUser</span>(<span class=\"hljs-params\">User</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, money</span>):</span><br>        <span class=\"hljs-comment\"># self.name = name</span><br>        <span class=\"hljs-comment\"># User.__init__(self)   # 通过父类名直接调用父类的__init__方法实现name属性的添加</span><br>        <span class=\"hljs-built_in\">super</span>().__init__(name)  <span class=\"hljs-comment\"># 通过super()调用父类的__init__方法添加name属性</span><br>        self.money = money  <span class=\"hljs-comment\"># 自己添加money属性</span><br><br>vip = VipUser(<span class=\"hljs-string\">&quot;xw&quot;</span>, <span class=\"hljs-number\">300</span>)  <span class=\"hljs-comment\"># vip初始化时，__init__方法执行一次</span><br>print(vip.name, vip.money)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-多继承\"><a href=\"#2-多继承\" class=\"headerlink\" title=\"2. 多继承\"></a>2. 多继承</h3></li>\n</ul>\n<blockquote>\n<p>多继承可以继承多个父类，也继承了所有父类的属性和方法</p>\n</blockquote>\n<ul>\n<li><p>如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性<code>__mro__</code>的顺序来查找）</p>\n</li>\n<li><p>多个父类中，不重名的属性和方法，不会有任何影响。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        self.name = <span class=\"hljs-string\">&quot;A&quot;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        self.name = <span class=\"hljs-string\">&quot;B&quot;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">A, B</span>):</span><br>    <span class=\"hljs-keyword\">pass</span><br><br>c = C()<br>print(C.mro())  <span class=\"hljs-comment\"># [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br>print(c.name)  <span class=\"hljs-comment\"># A</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-多层继承\"><a href=\"#3-多层继承\" class=\"headerlink\" title=\"3. 多层继承\"></a>3. 多层继承</h3></li>\n</ul>\n<blockquote>\n<p> 多层继承主要说的是<code>super</code>的搜索顺序,而搜索顺序主要是根据类的魔法属性<code>__mro__</code>的顺序来查找</p>\n</blockquote>\n<ul>\n<li><p><code>super()</code>调用方法顺序示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;A&lt;&lt;&lt;&quot;</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B1</span>(<span class=\"hljs-params\">A</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;B1&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B2</span>(<span class=\"hljs-params\">A</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;B2&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">B1, B2</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;C&lt;&lt;&lt;&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().run()<br>        <br>c= C()<br>print(C.mro())<br>c.run()<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>程序运行结果：</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B1&#x27;&gt;, &lt;class &#x27;__main__.B2&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]<br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;C&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;B1&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;B2&lt;&lt;&lt;</span><br><span class=\"hljs-meta\">&gt;</span><span class=\"bash\">&gt;&gt;A&lt;&lt;&lt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>参数传递示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;father&#x27;</span>)<br>        self.name = name<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son1</span>(<span class=\"hljs-params\">Father</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, age, *args</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;Son1&#x27;</span>)<br>        self.age = age<br>        <span class=\"hljs-built_in\">super</span>().__init__(name, *args)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son2</span>(<span class=\"hljs-params\">Father</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, gender</span>):</span><br>        print(<span class=\"hljs-string\">&#x27;Son2&#x27;</span>)<br>        self.gender = gender<br>        <span class=\"hljs-built_in\">super</span>().__init__(name)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grandson</span>(<span class=\"hljs-params\">Son1, Son2</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, age, gender</span>):</span><br>        print(<span class=\"hljs-string\">&quot;Grandson&quot;</span>)<br>        <span class=\"hljs-built_in\">super</span>().__init__(name, age, gender)<br><br>print(Grandson.mro())<br>print(<span class=\"hljs-string\">&quot;+&quot;</span> * <span class=\"hljs-number\">30</span>)<br><br>grand_son = Grandson(<span class=\"hljs-string\">&#x27;王明&#x27;</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>)<br><br>print(<span class=\"hljs-string\">&quot;+&quot;</span> * <span class=\"hljs-number\">30</span>)<br>print(grand_son.name, grand_son.age, grand_son.gender)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>程序运行结果：</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">++++++++++++++++++++++++++++++<br>Grandson<br>Son1<br>Son2<br>father<br>++++++++++++++++++++++++++++++<br>王明 14 男<br></code></pre></td></tr></table></figure>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2></li>\n</ul>\n<h3 id=\"1-多态\"><a href=\"#1-多态\" class=\"headerlink\" title=\"1. 多态\"></a>1. 多态</h3><p>所谓的多态就是同一类事物有不同的形态,(一个抽象类有多个子类，因而多态的概念依赖于继承)</p>\n<ul>\n<li>序列类型有多种形态：字符串，列表，元组</li>\n<li>动物有多种形态：猫，狗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度）</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, name, foods</span>):</span><br>        self.name = name<br>        self.foods = foods<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">eat</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s的食物是%s&quot;</span> % (self.name, self.foods))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s跑的很快&quot;</span> % self.name)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">pass</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">Animal</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s:汪汪大叫&quot;</span> % self.name)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">Animal</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;%s:喵喵大叫&quot;</span> % self.name)<br><br><br>dog = Dog(<span class=\"hljs-string\">&quot;哈士奇&quot;</span>, <span class=\"hljs-string\">&quot;狗粮&quot;</span>)<br>dog.eat()<br>dog.call()<br><br>cat = Cat(<span class=\"hljs-string\">&quot;九命妖猫&quot;</span>, <span class=\"hljs-string\">&quot;仙露&quot;</span>)<br>cat.eat()<br>cat.run()<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-多态性\"><a href=\"#2-多态性\" class=\"headerlink\" title=\"2. 多态性\"></a>2. 多态性</h3><blockquote>\n<p>什么是多态性（注意：多态与多态性是两种概念）</p>\n</blockquote>\n<ul>\n<li>多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。</li>\n<li>在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。</li>\n<li>也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多态性依赖于：继承</span><br><span class=\"hljs-comment\">##多态性：定义统一的接口，</span><br><span class=\"hljs-comment\">#多态性：一种调用方式，不同的执行效果（多态性）</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">obj</span>):</span> <span class=\"hljs-comment\"># obj这个参数没有类型限制，可以传入不同类型的值</span><br>\tobj.eat()  <span class=\"hljs-comment\">#调用的逻辑都一样，执行的结果却不一样</span><br><br>func(dog)<br>func(cat)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么要用多态性（多态性的好处）</p>\n</blockquote>\n<p>其实大家从上面多态性的例子可以看出，我们并没有增加上面新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？</p>\n<ul>\n<li>增加了程序的灵活性<br>以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)</li>\n<li>增加了程序额可扩展性<br>通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用</li>\n</ul>\n<blockquote>\n<ul>\n<li>多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度） </li>\n<li>多态性：一种调用方式，不同的执行效果（多态性）</li>\n</ul>\n</blockquote>\n<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><h2 id=\"访问权限\"><a href=\"#访问权限\" class=\"headerlink\" title=\"访问权限\"></a>访问权限</h2><h2 id=\"实例属性与类属性\"><a href=\"#实例属性与类属性\" class=\"headerlink\" title=\"实例属性与类属性\"></a>实例属性与类属性</h2><h2 id=\"实例方法、静态方法与类方法\"><a href=\"#实例方法、静态方法与类方法\" class=\"headerlink\" title=\"实例方法、静态方法与类方法\"></a>实例方法、静态方法与类方法</h2><h3 id=\"1-方法分类\"><a href=\"#1-方法分类\" class=\"headerlink\" title=\"1. 方法分类\"></a>1. 方法分类</h3><p>先看语法，<code>python</code> 类语法中有三种方法，实例方法，静态方法，类方法。</p>\n<blockquote>\n<p><code>python</code>中<code>self</code>，<code>cls</code>的区别:</p>\n</blockquote>\n<ul>\n<li>普通实例方法，第一个参数需要是<code>self</code>，它表示一个具体的实例本身。</li>\n<li>如果用了<code>staticmethod</code>，那么就可以无视这个<code>self</code>，而将这个方法当成一个普通的函数使用。</li>\n<li>而对于<code>classmethod</code>，它的第一个参数不是<code>self</code>，是<code>cls</code>，它表示这个类本身。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;类三种方法语法形式&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">instance_method</span>(<span class=\"hljs-params\">self</span>):</span><br>        print(<span class=\"hljs-string\">&quot;是类&#123;&#125;的实例方法，只能被实例对象调用&quot;</span>.<span class=\"hljs-built_in\">format</span>(Foo))<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span><br>        print(<span class=\"hljs-string\">&quot;是静态方法&quot;</span>)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span><br>        print(<span class=\"hljs-string\">&quot;是类方法&quot;</span>)<br><br><br>foo = Foo()<br>foo.instance_method()<br>foo.static_method()<br>foo.class_method()<br>print(<span class=\"hljs-string\">&#x27;----------------&#x27;</span>)<br>Foo.static_method()<br>Foo.class_method()<br><br></code></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">是类&lt;class &#x27;__main__.Foo&#x27;&gt;的实例方法，只能被实例对象调用<br>是静态方法<br>是类方法<br>----------------<br>是静态方法<br>是类方法<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n<ul>\n<li>调用<ul>\n<li>实例方法只能被实例对象调用</li>\n<li>静态方法(由<code>@staticmethod</code>装饰的方法)、类方法(由<code>@classmethod</code>装饰的方法)，可以被类或类的实例对象调用。</li>\n</ul>\n</li>\n<li>参数<ul>\n<li>实例方法，第一个参数必须要默认传实例对象，一般习惯用<code>self</code>。</li>\n<li>静态方法，参数没有要求。</li>\n<li>类方法，第一个参数必须要默认传类，一般习惯用<code>cls</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-方法调用\"><a href=\"#2-方法调用\" class=\"headerlink\" title=\"2. 方法调用\"></a>2. 方法调用</h3><blockquote>\n<p>静态方法调用另一个静态方法，如果改用类方法调用静态方法，可以让<code>cls</code>代替类，让代码看起来精简一些。也防止类名修改了，不用在类定义中修改原来的类名。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># coding:utf-8</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    X = <span class=\"hljs-number\">1</span><br>    Y = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span>  <span class=\"hljs-comment\"># 在静态方法中调用静态方法</span><br>        print(<span class=\"hljs-string\">&quot;在静态方法中调用静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> Foo.averag(Foo.X, Foo.Y)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span>  <span class=\"hljs-comment\"># 在类方法中使用静态方法</span><br>        print(<span class=\"hljs-string\">&quot;在类方法中使用静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> cls.averag(cls.X, cls.Y)<br><br>foo = Foo()<br>print(foo.static_method())<br>print(foo.class_method())<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>运行结果：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">在静态方法中调用静态方法<br>1.5<br>在类方法中使用静态方法<br>1.5<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-继承类中的区别\"><a href=\"#3-继承类中的区别\" class=\"headerlink\" title=\"3.继承类中的区别\"></a>3.继承类中的区别</h3><p>从下面代码可以看出，如果子类继承父类的方法，子类覆盖了父类的静态方法:</p>\n<ul>\n<li>子类的实例继承了父类的<code>static_method</code>静态方法，调用该方法，还是调用的父类的方法和类属性。</li>\n<li>子类的实例继承了父类的<code>class_method</code>类方法，调用该方法，调用的是子类的方法和子类的类属性。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br>    X = <span class=\"hljs-number\">1</span><br>    Y = <span class=\"hljs-number\">14</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span>  <span class=\"hljs-comment\"># &quot;父类中的静态方法&quot;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">static_method</span>():</span>  <span class=\"hljs-comment\"># &quot;父类中的静态方法&quot;</span><br>        print(<span class=\"hljs-string\">&quot;父类中的静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> Foo.averag(Foo.X, Foo.Y)<br><br><span class=\"hljs-meta\">    @classmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">class_method</span>(<span class=\"hljs-params\">cls</span>):</span>  <span class=\"hljs-comment\"># 父类中的类方法</span><br>        print(<span class=\"hljs-string\">&quot;父类中的类方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> cls.averag(cls.X, cls.Y)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span>(<span class=\"hljs-params\">Foo</span>):</span><br>    X = <span class=\"hljs-number\">3</span><br>    Y = <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">averag</span>(<span class=\"hljs-params\">*mixes</span>):</span>  <span class=\"hljs-comment\"># &quot;子类中重载了父类的静态方法&quot;</span><br>        print(<span class=\"hljs-string\">&quot;子类中重载了父类的静态方法&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(mixes) / <span class=\"hljs-built_in\">len</span>(mixes)<br><br><br>p = Son()<br>print(<span class=\"hljs-string\">&quot;result of p.averag(1,5)&quot;</span>)<br>print(p.averag(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>))<br>print(<span class=\"hljs-string\">&quot;result of p.static_method()&quot;</span>)<br>print(p.static_method())<br>print(<span class=\"hljs-string\">&quot;result of p.class_method()&quot;</span>)<br>print(p.class_method())<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>运行结果：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">result of p.averag(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>)<br>子类中重载了父类的静态方法<br><span class=\"hljs-number\">3.0</span><br>result of p.static_method()<br>父类中的静态方法<br><span class=\"hljs-number\">7.5</span><br>result of p.class_method()<br>父类中的类方法<br>子类中重载了父类的静态方法<br><span class=\"hljs-number\">4.0</span><br></code></pre></td></tr></table></figure>"},{"title":"Vue组件间通信方式","date":"2020-12-27T13:56:48.000Z","_content":"\n前言\n--\n\n组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：\n\n![1460000019208629](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208629.png)  \n\n\n如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。\n\n针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如 `props`/`$emit`、`$emit`/`$on`、`vuex`、`$parent` / `$children`、`$attrs`/`$listeners`和 `provide`/`inject`，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。\n\n方法一、`props`/`$emit`\n-------------------\n\n父组件 A 通过 `props` 的方式向子组件 B 传递，B to A 通过在 B 组件中 `$emit`, A 组件中 `v-on` 的方式实现。\n\n### 1\\. 父组件向子组件传值\n\n接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 *Users.vue* 中如何获取父组件 *App.vue* 中的数据 `users:[\"Henry\",\"Bucky\",\"Emily\"]`\n\n#### 1.1 *App.vue*父组件\n\n```js\n<template>\n  <div id=\"app\">\n    <!-- 前者自定义名称便于子组件调用，后者要传递数据名 -->\n    <users v-bind:users=\"users\"></users>\n  </div>\n</template>\n<script>\nimport Users from \"./components/Users\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      users:[\"Henry\",\"Bucky\",\"Emily\"]\n    }\n  },\n  components:{\n    \"users\":Users\n  }\n}\n```\n#### 1.2 *Users.vue*子组件\n\n```js\n<template>\n  <div class=\"hello\">\n    <ul>\n      <li v-for=\"user in users\">{{user}}</li>//遍历传递过来的值，然后呈现到页面\n    </ul>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'HelloWorld',\n  props:{\n    users:{           //这个就是父组件中子标签自定义名字\n      type:Array,\n      required:true\n    }\n  }\n}\n</script>\n```\n\n> **总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：`data`、`props`、`computed`**\n\n### 2\\. 子组件向父组件传值（通过事件形式）\n\n接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击 “*Vue.js Demo*” 后，子组件向父组件传递值，文字由原来的 “传递的是一个值” 变成“子向父组件传值”，实现子组件向父组件值的传递。\n\n![1460000019208630](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208630.png)\n\n#### 2.1 *Header.vue* 子组件\n\n```js\n<template>\n  <header>\n    <h1 @click=\"changeTitle\">{{title}}</h1>//绑定一个点击事件\n  </header>\n</template>\n<script>\nexport default {\n  name: 'app-header',\n  data() {\n    return {\n      title:\"Vue.js Demo\"\n    }\n  },\n  methods:{\n    changeTitle() {\n      this.$emit(\"titleChanged\",\"子向父组件传值\");//自定义事件  传递值“子向父组件传值”\n    }\n  }\n}\n</script>\n```\n#### 2.2 *App.vue* 父组件\n\n```js\n<template>\n  <div id=\"app\">\n    <app-header v-on:titleChanged=\"updateTitle\" ></app-header>\n    <!-- 与子组件titleChanged自定义事件保持一致 -->\n    <!-- updateTitle($event)接受传递过来的文字 -->\n    <h2>{{title}}</h2>\n  </div>\n</template>\n<script>\nimport Header from \"./components/Header\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      title:\"传递的是一个值\"\n    }\n  },\n  methods:{\n    updateTitle(e){   //声明这个函数\n      this.title = e;\n    }\n  },\n  components:{\n   \"app-header\":Header,\n  }\n}\n</script>\n```\n\n> **总结：子组件通过 `events` 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。**\n\n方法二、`$emit`/`$on`\n-----------------\n\n**这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件, 巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级**。当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。\n\n#### 1\\. 具体实现方式：\n\n```js\nvar Event=new Vue();\nEvent.$emit(事件名,数据);\nEvent.$on(事件名,data => {});\n```\n\n#### 2\\. 举个例子\n\n假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据\n\n```js\n<div id=\"itany\">\n    <my-a></my-a>\n    <my-b></my-b>\n    <my-c></my-c>\n</div>\n<template id=\"a\">\n  <div>\n    <h3>A组件：{{name}}</h3>\n    <button @click=\"send\">将数据发送给C组件</button>\n  </div>\n</template>\n<template id=\"b\">\n  <div>\n    <h3>B组件：{{age}}</h3>\n    <button @click=\"send\">将数组发送给C组件</button>\n  </div>\n</template>\n<template id=\"c\">\n  <div>\n    <h3>C组件：{{name}}，{{age}}</h3>\n  </div>\n</template>\n<script>\nvar Event = new Vue(); //定义一个空的Vue实例\nvar A = {\n    template: '#a',\n    data() {\n      return {\n        name: 'tom'\n      }\n    },\n    methods: {\n      send() {\n        Event.$emit('data-a', this.name);\n      }\n    }\n}\nvar B = {\n    template: '#b',\n    data() {\n      return {\n        age: 20\n      }\n    },\n    methods: {\n      send() {\n        Event.$emit('data-b', this.age);\n      }\n    }\n}\nvar C = {\n    template: '#c',\n    data() {\n      return {\n        name: '',\n        age: \"\"\n      }\n    },\n    mounted() {//在模板编译完成后执行\n     Event.$on('data-a',name => {\n         this.name = name;//箭头函数内部不会产生新的this，这边如果不用=>,this指代Event\n     })\n     Event.$on('data-b',age => {\n         this.age = age;\n     })\n    }\n}\nvar vm = new Vue({\n    el: '#itany',\n    components: {\n      'my-a': A,\n      'my-b': B,\n      'my-c': C\n    }\n});    \n</script>\n```\n\n![1460000019208631](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208631.gif)  \n`$on` 监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。\n\n方法三、vuex\n--------\n\n![1460000019208632](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208632.png)\n\n### 1. 简要介绍 Vuex 原理\n\nVuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作 (常见于调用后端接口异步获取更新数据) 或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。\n\n### 2. 简要介绍各模块在流程中的功能：\n\n*   Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。\n*   dispatch：操作行为触发方法，是唯一能执行 action 的方法。\n*   actions：**操作行为处理模块, 由组件中的`$store.dispatch('action 名称', data1)`来触发。然后由 commit() 来触发 mutation 的调用 , 间接更新 state**。负责处理 Vue Components 接收到的所有交互行为。包含同步 / 异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。\n*   commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。\n*   mutations：**状态改变操作方法，由 actions 中的`commit('mutation 名称')`来触发**。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。\n*   state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。\n*   getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。\n\n### 3.Vuex 与 localStorage\n\nvuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，**具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。**\n\n```js\nlet defaultCity = \"上海\"\ntry {\n  // 用户关闭了本地存储功能，此时在外层加个try...catch\n  if (!defaultCity) {\n    defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))\n  }\n} catch (e) {\n}\nexport default new Vuex.Store({\n  state: {\n    city: defaultCity\n  },\n  mutations: {\n    changeCity(state, city) {\n      state.city = city\n      try {\n        window.localStorage.setItem('defaultCity', JSON.stringify(state.city));\n        // 数据改变的时候把数据拷贝一份保存到localStorage里面\n      } catch (e) {\n      }\n    }\n  }\n})\n```\n\n这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：\n\n```js\nJSON.stringify(state.subscribeList);   // array -> string\nJSON.parse(window.localStorage.getItem(\"subscribeList\"));    // string -> array\n```\n\n方法四、`$attrs`/`$listeners`\n-------------------------\n\n多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法 ----`$attrs`/`$listeners`\n\n*   `$attrs`：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$attrs\" 传入内部组件。通常配合 interitAttrs 选项一起使用。\n*   `$listeners`：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=\"$listeners\" 传入内部组件\n\n接下来我们看个跨级通信的例子：\n\n```js\n// index.vue\n<template>\n  <div>\n    <h2>浪里行舟</h2>\n    <child-com1\n      :foo=\"foo\"\n      :boo=\"boo\"\n      :coo=\"coo\"\n      :doo=\"doo\"\n      title=\"前端工匠\"\n    ></child-com1>\n  </div>\n</template>\n<script>\nconst childCom1 = () => import(\"./childCom1.vue\");\nexport default {\n  components: { childCom1 },\n  data() {\n    return {\n      foo: \"Javascript\",\n      boo: \"Html\",\n      coo: \"CSS\",\n      doo: \"Vue\"\n    };\n  }\n};\n</script>\n```\n\n```js\n// childCom1.vue\n<template class=\"border\">\n  <div>\n    <p>foo: {{ foo }}</p>\n    <p>childCom1的$attrs: {{ $attrs }}</p>\n    <child-com2 v-bind=\"$attrs\"></child-com2>\n  </div>\n</template>\n<script>\nconst childCom2 = () => import(\"./childCom2.vue\");\nexport default {\n  components: {\n    childCom2\n  },\n  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n  props: {\n    foo: String // foo作为props属性绑定\n  },\n  created() {\n    console.log(this.$attrs); // { \"boo\": \"Html\", \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n```\n\n```js\n// childCom2.vue\n<template>\n  <div class=\"border\">\n    <p>boo: {{ boo }}</p>\n    <p>childCom2: {{ $attrs }}</p>\n    <child-com3 v-bind=\"$attrs\"></child-com3>\n  </div>\n</template>\n<script>\nconst childCom3 = () => import(\"./childCom3.vue\");\nexport default {\n  components: {\n    childCom3\n  },\n  inheritAttrs: false,\n  props: {\n    boo: String\n  },\n  created() {\n    console.log(this.$attrs); // {\"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n```\n\n```js\n// childCom3.vue\n<template>\n  <div class=\"border\">\n    <p>childCom3: {{ $attrs }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    coo: String,\n    title: String\n  }\n};\n</script>\n```\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208633.png)  \n如上图所示`$attrs`表示没有继承数据的对象，格式为 {属性名：属性值}。Vue2.4 提供了`$attrs` , `$listeners` 来传递数据与事件，跨级组件之间的通讯变得更简单。\n\n简单来说：`$attrs`与`$listeners` 是两个对象，`$attrs` 里存放的是父组件中绑定的非 Props 属性，`$listeners`里存放的是父组件中绑定的非原生事件。\n\n方法五、provide/inject\n------------------\n\n#### 1\\. 简介\n\nVue2.2.0 新增 API, 这对选项需要一起使用，**以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效**。一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。  \n**provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系**。\n\n#### 2\\. 举个例子\n\n假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件\n\n```js\n// A.vue\nexport default {\n  provide: {\n    name: '浪里行舟'\n  }\n}\n```\n\n```js\n// B.vue\nexport default {\n  inject: \\['name'\\],\n  mounted () {\n    console.log(this.name);  // 浪里行舟\n  }\n}\n```\n\n可以看到，在 A.vue 里，我们设置了一个 **provide: name**，值为 浪里行舟，它的作用就是将 **name** 这个变量提供给它的所有子组件。而在 B.vue 中，通过 `inject` 注入了从 A 组件中提供的 **name** 变量，那么在组件 B 中，就可以直接通过 **this.name** 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。\n\n需要注意的是：**provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的** ----vue 官方文档  \n所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。\n\n#### 3.provide 与 inject 怎么实现数据响应式\n\n一般来说，有两种办法：\n\n*   provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods\n*   使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)\n\n我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208634.png)\n\n```js\n// A 组件 \n<div>\n      <h1>A 组件</h1>\n      <button @click=\"() => changeColor()\">改变color</button>\n      <ChildrenB />\n      <ChildrenC />\n</div>\n......\n  data() {\n    return {\n      color: \"blue\"\n    };\n  },\n  // provide() {\n  //   return {\n  //     theme: {\n  //       color: this.color //这种方式绑定的数据并不是可响应的\n  //     } // 即A组件的color变化后，组件D、E、F不会跟着变\n  //   };\n  // },\n  provide() {\n    return {\n      theme: this//方法一：提供祖先组件的实例\n    };\n  },\n  methods: {\n    changeColor(color) {\n      if (color) {\n        this.color = color;\n      } else {\n        this.color = this.color === \"blue\" ? \"red\" : \"blue\";\n      }\n    }\n  }\n  // 方法二:使用2.6最新API Vue.observable 优化响应式 provide\n  // provide() {\n  //   this.theme = Vue.observable({\n  //     color: \"blue\"\n  //   });\n  //   return {\n  //     theme: this.theme\n  //   };\n  // },\n  // methods: {\n  //   changeColor(color) {\n  //     if (color) {\n  //       this.theme.color = color;\n  //     } else {\n  //       this.theme.color = this.theme.color === \"blue\" ? \"red\" : \"blue\";\n  //     }\n  //   }\n  // }\n```\n\n```js\n// F 组件 \n<template functional>\n  <div class=\"border2\">\n    <h3 :style=\"{ color: injections.theme.color }\">F 组件</h3>\n  </div>\n</template>\n<script>\nexport default {\n  inject: {\n    theme: {\n      //函数式组件取值不一样\n      default: () => ({})\n    }\n  }\n};\n</script>\n```\n\n虽说 provide 和 inject 主要为高阶插件 / 组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！\n\n方法六、`$parent` / `$children`与 `ref`\n----------------------------------\n\n*   `ref`：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n*   `$parent` / `$children`：访问父 / 子实例\n\n需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 `ref`来访问组件的例子：\n\n```js\n// component-a 子组件\nexport default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n```\n\n```js\n// 父组件\n<template>\n  <component-a ref=\"comA\"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);  // Vue.js\n      comA.sayHello();  // 弹窗\n    }\n  }\n</script>\n```\n\n不过，**这两种方法的弊端是，无法在跨级或兄弟间通信**。\n\n```js\n// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n```\n\n我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。\n\n总结\n--\n\n常见使用场景可以分为三类：\n\n*   父子通信：\n\n父向子传递数据是通过 props，子向父是通过 events（`$emit`）；通过父链 / 子链也可以通信（`$parent` / `$children`）；ref 也可以访问组件实例；provide / inject API；`$attrs/$listeners`\n\n*   兄弟通信：\n\nBus；Vuex\n\n*   跨级通信：\n\nBus；Vuex；provide / inject API、`$attrs/$listeners`\n\n参考文章\n----\n\n*   [Vue.js 组件精讲](https://juejin.im/book/5bc844166fb9a05cd676ebca)\n*   [Vue.js 官方文档](https://cn.vuejs.org/v2/api/#inheritAttrs)\n*   [Vue 开发实战](https://time.geekbang.org/course/detail/163-86419)\n*   [Vuex 数据本地储存](https://webcache.googleusercontent.com/search?q=cache:GCLcuCsGrVIJ:https://bingzhe.github.io/2017/08/27/vuex%25E6%2595%25B0%25E6%258D%25AE%25E6%259C%25AC%25E5%259C%25B0%25E5%2582%25A8%25E5%25AD%2598/+&cd=12&hl=zh-CN&ct=clnk&gl=us)\n*   [Vuex 框架原理与源码分析](https://tech.meituan.com/vuex_code_analysis.html)\n*   [Vue 组件通信方式全面详解](https://juejin.im/post/5c77c4ae518825407505e262)\n\n","source":"_posts/vue 组件间通信六种方式（完整版） .md","raw":"---\ntitle: Vue组件间通信方式\ndate: 2020-12-27 21:56:48\ncategories:\n    - 技术\n    - vue\ntags:\n    - Vue\n    - 组件\n---\n\n前言\n--\n\n组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：\n\n![1460000019208629](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208629.png)  \n\n\n如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。\n\n针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如 `props`/`$emit`、`$emit`/`$on`、`vuex`、`$parent` / `$children`、`$attrs`/`$listeners`和 `provide`/`inject`，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。\n\n方法一、`props`/`$emit`\n-------------------\n\n父组件 A 通过 `props` 的方式向子组件 B 传递，B to A 通过在 B 组件中 `$emit`, A 组件中 `v-on` 的方式实现。\n\n### 1\\. 父组件向子组件传值\n\n接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 *Users.vue* 中如何获取父组件 *App.vue* 中的数据 `users:[\"Henry\",\"Bucky\",\"Emily\"]`\n\n#### 1.1 *App.vue*父组件\n\n```js\n<template>\n  <div id=\"app\">\n    <!-- 前者自定义名称便于子组件调用，后者要传递数据名 -->\n    <users v-bind:users=\"users\"></users>\n  </div>\n</template>\n<script>\nimport Users from \"./components/Users\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      users:[\"Henry\",\"Bucky\",\"Emily\"]\n    }\n  },\n  components:{\n    \"users\":Users\n  }\n}\n```\n#### 1.2 *Users.vue*子组件\n\n```js\n<template>\n  <div class=\"hello\">\n    <ul>\n      <li v-for=\"user in users\">{{user}}</li>//遍历传递过来的值，然后呈现到页面\n    </ul>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'HelloWorld',\n  props:{\n    users:{           //这个就是父组件中子标签自定义名字\n      type:Array,\n      required:true\n    }\n  }\n}\n</script>\n```\n\n> **总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：`data`、`props`、`computed`**\n\n### 2\\. 子组件向父组件传值（通过事件形式）\n\n接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击 “*Vue.js Demo*” 后，子组件向父组件传递值，文字由原来的 “传递的是一个值” 变成“子向父组件传值”，实现子组件向父组件值的传递。\n\n![1460000019208630](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208630.png)\n\n#### 2.1 *Header.vue* 子组件\n\n```js\n<template>\n  <header>\n    <h1 @click=\"changeTitle\">{{title}}</h1>//绑定一个点击事件\n  </header>\n</template>\n<script>\nexport default {\n  name: 'app-header',\n  data() {\n    return {\n      title:\"Vue.js Demo\"\n    }\n  },\n  methods:{\n    changeTitle() {\n      this.$emit(\"titleChanged\",\"子向父组件传值\");//自定义事件  传递值“子向父组件传值”\n    }\n  }\n}\n</script>\n```\n#### 2.2 *App.vue* 父组件\n\n```js\n<template>\n  <div id=\"app\">\n    <app-header v-on:titleChanged=\"updateTitle\" ></app-header>\n    <!-- 与子组件titleChanged自定义事件保持一致 -->\n    <!-- updateTitle($event)接受传递过来的文字 -->\n    <h2>{{title}}</h2>\n  </div>\n</template>\n<script>\nimport Header from \"./components/Header\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      title:\"传递的是一个值\"\n    }\n  },\n  methods:{\n    updateTitle(e){   //声明这个函数\n      this.title = e;\n    }\n  },\n  components:{\n   \"app-header\":Header,\n  }\n}\n</script>\n```\n\n> **总结：子组件通过 `events` 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。**\n\n方法二、`$emit`/`$on`\n-----------------\n\n**这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件, 巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级**。当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。\n\n#### 1\\. 具体实现方式：\n\n```js\nvar Event=new Vue();\nEvent.$emit(事件名,数据);\nEvent.$on(事件名,data => {});\n```\n\n#### 2\\. 举个例子\n\n假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据\n\n```js\n<div id=\"itany\">\n    <my-a></my-a>\n    <my-b></my-b>\n    <my-c></my-c>\n</div>\n<template id=\"a\">\n  <div>\n    <h3>A组件：{{name}}</h3>\n    <button @click=\"send\">将数据发送给C组件</button>\n  </div>\n</template>\n<template id=\"b\">\n  <div>\n    <h3>B组件：{{age}}</h3>\n    <button @click=\"send\">将数组发送给C组件</button>\n  </div>\n</template>\n<template id=\"c\">\n  <div>\n    <h3>C组件：{{name}}，{{age}}</h3>\n  </div>\n</template>\n<script>\nvar Event = new Vue(); //定义一个空的Vue实例\nvar A = {\n    template: '#a',\n    data() {\n      return {\n        name: 'tom'\n      }\n    },\n    methods: {\n      send() {\n        Event.$emit('data-a', this.name);\n      }\n    }\n}\nvar B = {\n    template: '#b',\n    data() {\n      return {\n        age: 20\n      }\n    },\n    methods: {\n      send() {\n        Event.$emit('data-b', this.age);\n      }\n    }\n}\nvar C = {\n    template: '#c',\n    data() {\n      return {\n        name: '',\n        age: \"\"\n      }\n    },\n    mounted() {//在模板编译完成后执行\n     Event.$on('data-a',name => {\n         this.name = name;//箭头函数内部不会产生新的this，这边如果不用=>,this指代Event\n     })\n     Event.$on('data-b',age => {\n         this.age = age;\n     })\n    }\n}\nvar vm = new Vue({\n    el: '#itany',\n    components: {\n      'my-a': A,\n      'my-b': B,\n      'my-c': C\n    }\n});    \n</script>\n```\n\n![1460000019208631](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208631.gif)  \n`$on` 监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。\n\n方法三、vuex\n--------\n\n![1460000019208632](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208632.png)\n\n### 1. 简要介绍 Vuex 原理\n\nVuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作 (常见于调用后端接口异步获取更新数据) 或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。\n\n### 2. 简要介绍各模块在流程中的功能：\n\n*   Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。\n*   dispatch：操作行为触发方法，是唯一能执行 action 的方法。\n*   actions：**操作行为处理模块, 由组件中的`$store.dispatch('action 名称', data1)`来触发。然后由 commit() 来触发 mutation 的调用 , 间接更新 state**。负责处理 Vue Components 接收到的所有交互行为。包含同步 / 异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。\n*   commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。\n*   mutations：**状态改变操作方法，由 actions 中的`commit('mutation 名称')`来触发**。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。\n*   state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。\n*   getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。\n\n### 3.Vuex 与 localStorage\n\nvuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，**具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。**\n\n```js\nlet defaultCity = \"上海\"\ntry {\n  // 用户关闭了本地存储功能，此时在外层加个try...catch\n  if (!defaultCity) {\n    defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))\n  }\n} catch (e) {\n}\nexport default new Vuex.Store({\n  state: {\n    city: defaultCity\n  },\n  mutations: {\n    changeCity(state, city) {\n      state.city = city\n      try {\n        window.localStorage.setItem('defaultCity', JSON.stringify(state.city));\n        // 数据改变的时候把数据拷贝一份保存到localStorage里面\n      } catch (e) {\n      }\n    }\n  }\n})\n```\n\n这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：\n\n```js\nJSON.stringify(state.subscribeList);   // array -> string\nJSON.parse(window.localStorage.getItem(\"subscribeList\"));    // string -> array\n```\n\n方法四、`$attrs`/`$listeners`\n-------------------------\n\n多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法 ----`$attrs`/`$listeners`\n\n*   `$attrs`：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$attrs\" 传入内部组件。通常配合 interitAttrs 选项一起使用。\n*   `$listeners`：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=\"$listeners\" 传入内部组件\n\n接下来我们看个跨级通信的例子：\n\n```js\n// index.vue\n<template>\n  <div>\n    <h2>浪里行舟</h2>\n    <child-com1\n      :foo=\"foo\"\n      :boo=\"boo\"\n      :coo=\"coo\"\n      :doo=\"doo\"\n      title=\"前端工匠\"\n    ></child-com1>\n  </div>\n</template>\n<script>\nconst childCom1 = () => import(\"./childCom1.vue\");\nexport default {\n  components: { childCom1 },\n  data() {\n    return {\n      foo: \"Javascript\",\n      boo: \"Html\",\n      coo: \"CSS\",\n      doo: \"Vue\"\n    };\n  }\n};\n</script>\n```\n\n```js\n// childCom1.vue\n<template class=\"border\">\n  <div>\n    <p>foo: {{ foo }}</p>\n    <p>childCom1的$attrs: {{ $attrs }}</p>\n    <child-com2 v-bind=\"$attrs\"></child-com2>\n  </div>\n</template>\n<script>\nconst childCom2 = () => import(\"./childCom2.vue\");\nexport default {\n  components: {\n    childCom2\n  },\n  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n  props: {\n    foo: String // foo作为props属性绑定\n  },\n  created() {\n    console.log(this.$attrs); // { \"boo\": \"Html\", \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n```\n\n```js\n// childCom2.vue\n<template>\n  <div class=\"border\">\n    <p>boo: {{ boo }}</p>\n    <p>childCom2: {{ $attrs }}</p>\n    <child-com3 v-bind=\"$attrs\"></child-com3>\n  </div>\n</template>\n<script>\nconst childCom3 = () => import(\"./childCom3.vue\");\nexport default {\n  components: {\n    childCom3\n  },\n  inheritAttrs: false,\n  props: {\n    boo: String\n  },\n  created() {\n    console.log(this.$attrs); // {\"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n```\n\n```js\n// childCom3.vue\n<template>\n  <div class=\"border\">\n    <p>childCom3: {{ $attrs }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    coo: String,\n    title: String\n  }\n};\n</script>\n```\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208633.png)  \n如上图所示`$attrs`表示没有继承数据的对象，格式为 {属性名：属性值}。Vue2.4 提供了`$attrs` , `$listeners` 来传递数据与事件，跨级组件之间的通讯变得更简单。\n\n简单来说：`$attrs`与`$listeners` 是两个对象，`$attrs` 里存放的是父组件中绑定的非 Props 属性，`$listeners`里存放的是父组件中绑定的非原生事件。\n\n方法五、provide/inject\n------------------\n\n#### 1\\. 简介\n\nVue2.2.0 新增 API, 这对选项需要一起使用，**以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效**。一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。  \n**provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系**。\n\n#### 2\\. 举个例子\n\n假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件\n\n```js\n// A.vue\nexport default {\n  provide: {\n    name: '浪里行舟'\n  }\n}\n```\n\n```js\n// B.vue\nexport default {\n  inject: \\['name'\\],\n  mounted () {\n    console.log(this.name);  // 浪里行舟\n  }\n}\n```\n\n可以看到，在 A.vue 里，我们设置了一个 **provide: name**，值为 浪里行舟，它的作用就是将 **name** 这个变量提供给它的所有子组件。而在 B.vue 中，通过 `inject` 注入了从 A 组件中提供的 **name** 变量，那么在组件 B 中，就可以直接通过 **this.name** 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。\n\n需要注意的是：**provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的** ----vue 官方文档  \n所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。\n\n#### 3.provide 与 inject 怎么实现数据响应式\n\n一般来说，有两种办法：\n\n*   provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods\n*   使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)\n\n我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）\n\n![](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208634.png)\n\n```js\n// A 组件 \n<div>\n      <h1>A 组件</h1>\n      <button @click=\"() => changeColor()\">改变color</button>\n      <ChildrenB />\n      <ChildrenC />\n</div>\n......\n  data() {\n    return {\n      color: \"blue\"\n    };\n  },\n  // provide() {\n  //   return {\n  //     theme: {\n  //       color: this.color //这种方式绑定的数据并不是可响应的\n  //     } // 即A组件的color变化后，组件D、E、F不会跟着变\n  //   };\n  // },\n  provide() {\n    return {\n      theme: this//方法一：提供祖先组件的实例\n    };\n  },\n  methods: {\n    changeColor(color) {\n      if (color) {\n        this.color = color;\n      } else {\n        this.color = this.color === \"blue\" ? \"red\" : \"blue\";\n      }\n    }\n  }\n  // 方法二:使用2.6最新API Vue.observable 优化响应式 provide\n  // provide() {\n  //   this.theme = Vue.observable({\n  //     color: \"blue\"\n  //   });\n  //   return {\n  //     theme: this.theme\n  //   };\n  // },\n  // methods: {\n  //   changeColor(color) {\n  //     if (color) {\n  //       this.theme.color = color;\n  //     } else {\n  //       this.theme.color = this.theme.color === \"blue\" ? \"red\" : \"blue\";\n  //     }\n  //   }\n  // }\n```\n\n```js\n// F 组件 \n<template functional>\n  <div class=\"border2\">\n    <h3 :style=\"{ color: injections.theme.color }\">F 组件</h3>\n  </div>\n</template>\n<script>\nexport default {\n  inject: {\n    theme: {\n      //函数式组件取值不一样\n      default: () => ({})\n    }\n  }\n};\n</script>\n```\n\n虽说 provide 和 inject 主要为高阶插件 / 组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！\n\n方法六、`$parent` / `$children`与 `ref`\n----------------------------------\n\n*   `ref`：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n*   `$parent` / `$children`：访问父 / 子实例\n\n需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 `ref`来访问组件的例子：\n\n```js\n// component-a 子组件\nexport default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n```\n\n```js\n// 父组件\n<template>\n  <component-a ref=\"comA\"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);  // Vue.js\n      comA.sayHello();  // 弹窗\n    }\n  }\n</script>\n```\n\n不过，**这两种方法的弊端是，无法在跨级或兄弟间通信**。\n\n```js\n// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n```\n\n我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。\n\n总结\n--\n\n常见使用场景可以分为三类：\n\n*   父子通信：\n\n父向子传递数据是通过 props，子向父是通过 events（`$emit`）；通过父链 / 子链也可以通信（`$parent` / `$children`）；ref 也可以访问组件实例；provide / inject API；`$attrs/$listeners`\n\n*   兄弟通信：\n\nBus；Vuex\n\n*   跨级通信：\n\nBus；Vuex；provide / inject API、`$attrs/$listeners`\n\n参考文章\n----\n\n*   [Vue.js 组件精讲](https://juejin.im/book/5bc844166fb9a05cd676ebca)\n*   [Vue.js 官方文档](https://cn.vuejs.org/v2/api/#inheritAttrs)\n*   [Vue 开发实战](https://time.geekbang.org/course/detail/163-86419)\n*   [Vuex 数据本地储存](https://webcache.googleusercontent.com/search?q=cache:GCLcuCsGrVIJ:https://bingzhe.github.io/2017/08/27/vuex%25E6%2595%25B0%25E6%258D%25AE%25E6%259C%25AC%25E5%259C%25B0%25E5%2582%25A8%25E5%25AD%2598/+&cd=12&hl=zh-CN&ct=clnk&gl=us)\n*   [Vuex 框架原理与源码分析](https://tech.meituan.com/vuex_code_analysis.html)\n*   [Vue 组件通信方式全面详解](https://juejin.im/post/5c77c4ae518825407505e262)\n\n","slug":"vue 组件间通信六种方式（完整版） ","published":1,"updated":"2021-01-21T07:05:29.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnugd00h2jjln9mjggmfy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208629.png\" alt=\"1460000019208629\">  </p>\n<p>如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。</p>\n<p>针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如 <code>props</code>/<code>$emit</code>、<code>$emit</code>/<code>$on</code>、<code>vuex</code>、<code>$parent</code> / <code>$children</code>、<code>$attrs</code>/<code>$listeners</code>和 <code>provide</code>/<code>inject</code>，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。</p>\n<h2 id=\"方法一、props-emit\"><a href=\"#方法一、props-emit\" class=\"headerlink\" title=\"方法一、props/$emit\"></a>方法一、<code>props</code>/<code>$emit</code></h2><p>父组件 A 通过 <code>props</code> 的方式向子组件 B 传递，B to A 通过在 B 组件中 <code>$emit</code>, A 组件中 <code>v-on</code> 的方式实现。</p>\n<h3 id=\"1-父组件向子组件传值\"><a href=\"#1-父组件向子组件传值\" class=\"headerlink\" title=\"1. 父组件向子组件传值\"></a>1. 父组件向子组件传值</h3><p>接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 <em>Users.vue</em> 中如何获取父组件 <em>App.vue</em> 中的数据 <code>users:[&quot;Henry&quot;,&quot;Bucky&quot;,&quot;Emily&quot;]</code></p>\n<h4 id=\"1-1-App-vue父组件\"><a href=\"#1-1-App-vue父组件\" class=\"headerlink\" title=\"1.1 App.vue父组件\"></a>1.1 <em>App.vue</em>父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;!-- 前者自定义名称便于子组件调用，后者要传递数据名 --&gt;<br>    &lt;users v-bind:users=<span class=\"hljs-string\">&quot;users&quot;</span>&gt;&lt;/users&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> Users <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Users&quot;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;App&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>      users:[<span class=\"hljs-string\">&quot;Henry&quot;</span>,<span class=\"hljs-string\">&quot;Bucky&quot;</span>,<span class=\"hljs-string\">&quot;Emily&quot;</span>]<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>    <span class=\"hljs-string\">&quot;users&quot;</span>:Users<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"1-2-Users-vue子组件\"><a href=\"#1-2-Users-vue子组件\" class=\"headerlink\" title=\"1.2 Users.vue子组件\"></a>1.2 <em>Users.vue</em>子组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<br>    &lt;ul&gt;<br>      &lt;li v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;user in users&quot;</span>&gt;&#123;&#123;user&#125;&#125;&lt;<span class=\"hljs-regexp\">/li&gt;/</span><span class=\"hljs-regexp\">/遍历传递过来的值，然后呈现到页面</span><br><span class=\"hljs-regexp\">    &lt;/u</span>l&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;HelloWorld&#x27;</span>,<br>  props:&#123;<br>    users:&#123;           <span class=\"hljs-comment\">//这个就是父组件中子标签自定义名字</span><br>      type:<span class=\"hljs-built_in\">Array</span>,<br>      required:<span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><strong>总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：<code>data</code>、<code>props</code>、<code>computed</code></strong></p>\n</blockquote>\n<h3 id=\"2-子组件向父组件传值（通过事件形式）\"><a href=\"#2-子组件向父组件传值（通过事件形式）\" class=\"headerlink\" title=\"2. 子组件向父组件传值（通过事件形式）\"></a>2. 子组件向父组件传值（通过事件形式）</h3><p>接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击 “<em>Vue.js Demo</em>” 后，子组件向父组件传递值，文字由原来的 “传递的是一个值” 变成“子向父组件传值”，实现子组件向父组件值的传递。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208630.png\" alt=\"1460000019208630\"></p>\n<h4 id=\"2-1-Header-vue-子组件\"><a href=\"#2-1-Header-vue-子组件\" class=\"headerlink\" title=\"2.1 Header.vue 子组件\"></a>2.1 <em>Header.vue</em> 子组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;header&gt;<br>    &lt;h1 @click=<span class=\"hljs-string\">&quot;changeTitle&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;<span class=\"hljs-regexp\">/h1&gt;/</span><span class=\"hljs-regexp\">/绑定一个点击事件</span><br><span class=\"hljs-regexp\">  &lt;/</span>header&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;app-header&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      title:<span class=\"hljs-string\">&quot;Vue.js Demo&quot;</span><br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeTitle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&quot;titleChanged&quot;</span>,<span class=\"hljs-string\">&quot;子向父组件传值&quot;</span>);<span class=\"hljs-comment\">//自定义事件  传递值“子向父组件传值”</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"2-2-App-vue-父组件\"><a href=\"#2-2-App-vue-父组件\" class=\"headerlink\" title=\"2.2 App.vue 父组件\"></a>2.2 <em>App.vue</em> 父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;app-header v-on:titleChanged=<span class=\"hljs-string\">&quot;updateTitle&quot;</span> &gt;&lt;/app-header&gt;<br>    &lt;!-- 与子组件titleChanged自定义事件保持一致 --&gt;<br>    &lt;!-- updateTitle($event)接受传递过来的文字 --&gt;<br>    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> Header <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Header&quot;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;App&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>      title:<span class=\"hljs-string\">&quot;传递的是一个值&quot;</span><br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">updateTitle</span>(<span class=\"hljs-params\">e</span>)</span>&#123;   <span class=\"hljs-comment\">//声明这个函数</span><br>      <span class=\"hljs-built_in\">this</span>.title = e;<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>   <span class=\"hljs-string\">&quot;app-header&quot;</span>:Header,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p><strong>总结：子组件通过 <code>events</code> 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</strong></p>\n</blockquote>\n<h2 id=\"方法二、-emit-on\"><a href=\"#方法二、-emit-on\" class=\"headerlink\" title=\"方法二、$emit/$on\"></a>方法二、<code>$emit</code>/<code>$on</code></h2><p><strong>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件, 巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级</strong>。当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。</p>\n<h4 id=\"1-具体实现方式：\"><a href=\"#1-具体实现方式：\" class=\"headerlink\" title=\"1. 具体实现方式：\"></a>1. 具体实现方式：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> Event=<span class=\"hljs-keyword\">new</span> Vue();<br>Event.$emit(事件名,数据);<br>Event.$on(事件名,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;&#125;);<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"2-举个例子\"><a href=\"#2-举个例子\" class=\"headerlink\" title=\"2. 举个例子\"></a>2. 举个例子</h4><p>假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;div id=<span class=\"hljs-string\">&quot;itany&quot;</span>&gt;<br>    &lt;my-a&gt;&lt;/my-a&gt;<br>    &lt;my-b&gt;&lt;/my-b&gt;<br>    &lt;my-c&gt;&lt;/my-c&gt;<br>&lt;/div&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;A组件：&#123;&#123;name&#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=<span class=\"hljs-string\">&quot;send&quot;</span>&gt;将数据发送给C组件&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;B组件：&#123;&#123;age&#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=<span class=\"hljs-string\">&quot;send&quot;</span>&gt;将数组发送给C组件&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;C组件：&#123;&#123;name&#125;&#125;，&#123;&#123;age&#125;&#125;&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">var</span> Event = <span class=\"hljs-keyword\">new</span> Vue(); <span class=\"hljs-comment\">//定义一个空的Vue实例</span><br><span class=\"hljs-keyword\">var</span> A = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#a&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        name: <span class=\"hljs-string\">&#x27;tom&#x27;</span><br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        Event.$emit(<span class=\"hljs-string\">&#x27;data-a&#x27;</span>, <span class=\"hljs-built_in\">this</span>.name);<br>      &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> B = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#b&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        age: <span class=\"hljs-number\">20</span><br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        Event.$emit(<span class=\"hljs-string\">&#x27;data-b&#x27;</span>, <span class=\"hljs-built_in\">this</span>.age);<br>      &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> C = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#c&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        name: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        age: <span class=\"hljs-string\">&quot;&quot;</span><br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;<span class=\"hljs-comment\">//在模板编译完成后执行</span><br>     Event.$on(<span class=\"hljs-string\">&#x27;data-a&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.name = name;<span class=\"hljs-comment\">//箭头函数内部不会产生新的this，这边如果不用=&gt;,this指代Event</span><br>     &#125;)<br>     Event.$on(<span class=\"hljs-string\">&#x27;data-b&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">age</span> =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.age = age;<br>     &#125;)<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    el: <span class=\"hljs-string\">&#x27;#itany&#x27;</span>,<br>    components: &#123;<br>      <span class=\"hljs-string\">&#x27;my-a&#x27;</span>: A,<br>      <span class=\"hljs-string\">&#x27;my-b&#x27;</span>: B,<br>      <span class=\"hljs-string\">&#x27;my-c&#x27;</span>: C<br>    &#125;<br>&#125;);    <br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208631.gif\" alt=\"1460000019208631\"><br><code>$on</code> 监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。</p>\n<h2 id=\"方法三、vuex\"><a href=\"#方法三、vuex\" class=\"headerlink\" title=\"方法三、vuex\"></a>方法三、vuex</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208632.png\" alt=\"1460000019208632\"></p>\n<h3 id=\"1-简要介绍-Vuex-原理\"><a href=\"#1-简要介绍-Vuex-原理\" class=\"headerlink\" title=\"1. 简要介绍 Vuex 原理\"></a>1. 简要介绍 Vuex 原理</h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作 (常见于调用后端接口异步获取更新数据) 或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p>\n<h3 id=\"2-简要介绍各模块在流程中的功能：\"><a href=\"#2-简要介绍各模块在流程中的功能：\" class=\"headerlink\" title=\"2. 简要介绍各模块在流程中的功能：\"></a>2. 简要介绍各模块在流程中的功能：</h3><ul>\n<li>Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</li>\n<li>dispatch：操作行为触发方法，是唯一能执行 action 的方法。</li>\n<li>actions：<strong>操作行为处理模块, 由组件中的<code>$store.dispatch(&#39;action 名称&#39;, data1)</code>来触发。然后由 commit() 来触发 mutation 的调用 , 间接更新 state</strong>。负责处理 Vue Components 接收到的所有交互行为。包含同步 / 异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</li>\n<li>commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</li>\n<li>mutations：<strong>状态改变操作方法，由 actions 中的<code>commit(&#39;mutation 名称&#39;)</code>来触发</strong>。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</li>\n<li>state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</li>\n<li>getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</li>\n</ul>\n<h3 id=\"3-Vuex-与-localStorage\"><a href=\"#3-Vuex-与-localStorage\" class=\"headerlink\" title=\"3.Vuex 与 localStorage\"></a>3.Vuex 与 localStorage</h3><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，<strong>具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> defaultCity = <span class=\"hljs-string\">&quot;上海&quot;</span><br><span class=\"hljs-keyword\">try</span> &#123;<br>  <span class=\"hljs-comment\">// 用户关闭了本地存储功能，此时在外层加个try...catch</span><br>  <span class=\"hljs-keyword\">if</span> (!defaultCity) &#123;<br>    defaultCity = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">window</span>.localStorage.getItem(<span class=\"hljs-string\">&#x27;defaultCity&#x27;</span>))<br>  &#125;<br>&#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>  state: &#123;<br>    city: defaultCity<br>  &#125;,<br>  mutations: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeCity</span>(<span class=\"hljs-params\">state, city</span>)</span> &#123;<br>      state.city = city<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">window</span>.localStorage.setItem(<span class=\"hljs-string\">&#x27;defaultCity&#x27;</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(state.city));<br>        <span class=\"hljs-comment\">// 数据改变的时候把数据拷贝一份保存到localStorage里面</span><br>      &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<p>这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">JSON</span>.stringify(state.subscribeList);   <span class=\"hljs-comment\">// array -&gt; string</span><br><span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">window</span>.localStorage.getItem(<span class=\"hljs-string\">&quot;subscribeList&quot;</span>));    <span class=\"hljs-comment\">// string -&gt; array</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"方法四、-attrs-listeners\"><a href=\"#方法四、-attrs-listeners\" class=\"headerlink\" title=\"方法四、$attrs/$listeners\"></a>方法四、<code>$attrs</code>/<code>$listeners</code></h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法 —-<code>$attrs</code>/<code>$listeners</code></p>\n<ul>\n<li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 interitAttrs 选项一起使用。</li>\n<li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</li>\n</ul>\n<p>接下来我们看个跨级通信的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// index.vue</span><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;浪里行舟&lt;/h2&gt;<br>    &lt;child-com1<br>      :foo=<span class=\"hljs-string\">&quot;foo&quot;</span><br>      :boo=<span class=\"hljs-string\">&quot;boo&quot;</span><br>      :coo=<span class=\"hljs-string\">&quot;coo&quot;</span><br>      :doo=<span class=\"hljs-string\">&quot;doo&quot;</span><br>      title=<span class=\"hljs-string\">&quot;前端工匠&quot;</span><br>    &gt;&lt;/child-com1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom1 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom1.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123; childCom1 &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      foo: <span class=\"hljs-string\">&quot;Javascript&quot;</span>,<br>      boo: <span class=\"hljs-string\">&quot;Html&quot;</span>,<br>      coo: <span class=\"hljs-string\">&quot;CSS&quot;</span>,<br>      doo: <span class=\"hljs-string\">&quot;Vue&quot;</span><br>    &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom1.vue</span><br>&lt;template <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;foo: &#123;&#123; foo &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>    &lt;child-com2 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child-com2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom2 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom2.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123;<br>    childCom2<br>  &#125;,<br>  inheritAttrs: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span><br>  props: &#123;<br>    foo: <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// foo作为props属性绑定</span><br>  &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$attrs); <span class=\"hljs-comment\">// &#123; &quot;boo&quot;: &quot;Html&quot;, &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom2.vue</span><br>&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>    &lt;p&gt;boo: &#123;&#123; boo &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;childCom2: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>    &lt;child-com3 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child-com3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom3 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom3.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123;<br>    childCom3<br>  &#125;,<br>  inheritAttrs: <span class=\"hljs-literal\">false</span>,<br>  props: &#123;<br>    boo: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$attrs); <span class=\"hljs-comment\">// &#123;&quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom3.vue</span><br>&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>    &lt;p&gt;childCom3: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    coo: <span class=\"hljs-built_in\">String</span>,<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208633.png\" alt=\"\"><br>如上图所示<code>$attrs</code>表示没有继承数据的对象，格式为 {属性名：属性值}。Vue2.4 提供了<code>$attrs</code> , <code>$listeners</code> 来传递数据与事件，跨级组件之间的通讯变得更简单。</p>\n<p>简单来说：<code>$attrs</code>与<code>$listeners</code> 是两个对象，<code>$attrs</code> 里存放的是父组件中绑定的非 Props 属性，<code>$listeners</code>里存放的是父组件中绑定的非原生事件。</p>\n<h2 id=\"方法五、provide-inject\"><a href=\"#方法五、provide-inject\" class=\"headerlink\" title=\"方法五、provide/inject\"></a>方法五、provide/inject</h2><h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h4><p>Vue2.2.0 新增 API, 这对选项需要一起使用，<strong>以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</strong>。一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。<br><strong>provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</strong>。</p>\n<h4 id=\"2-举个例子-1\"><a href=\"#2-举个例子-1\" class=\"headerlink\" title=\"2. 举个例子\"></a>2. 举个例子</h4><p>假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// A.vue</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  provide: &#123;<br>    name: <span class=\"hljs-string\">&#x27;浪里行舟&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// B.vue</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  inject: \\[<span class=\"hljs-string\">&#x27;name&#x27;</span>\\],<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);  <span class=\"hljs-comment\">// 浪里行舟</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>可以看到，在 A.vue 里，我们设置了一个 <strong>provide: name</strong>，值为 浪里行舟，它的作用就是将 <strong>name</strong> 这个变量提供给它的所有子组件。而在 B.vue 中，通过 <code>inject</code> 注入了从 A 组件中提供的 <strong>name</strong> 变量，那么在组件 B 中，就可以直接通过 <strong>this.name</strong> 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。</p>\n<p>需要注意的是：<strong>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</strong> —-vue 官方文档<br>所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。</p>\n<h4 id=\"3-provide-与-inject-怎么实现数据响应式\"><a href=\"#3-provide-与-inject-怎么实现数据响应式\" class=\"headerlink\" title=\"3.provide 与 inject 怎么实现数据响应式\"></a>3.provide 与 inject 怎么实现数据响应式</h4><p>一般来说，有两种办法：</p>\n<ul>\n<li>provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods</li>\n<li>使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)</li>\n</ul>\n<p>我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208634.png\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// A 组件 </span><br>&lt;div&gt;<br>      &lt;h1&gt;A 组件&lt;/h1&gt;<br>      &lt;button @click=<span class=\"hljs-string\">&quot;() =&gt; changeColor()&quot;</span>&gt;改变color&lt;/button&gt;<br>      &lt;ChildrenB /&gt;<br>      &lt;ChildrenC /&gt;<br>&lt;/div&gt;<br>......<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      color: <span class=\"hljs-string\">&quot;blue&quot;</span><br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-comment\">// provide() &#123;</span><br>  <span class=\"hljs-comment\">//   return &#123;</span><br>  <span class=\"hljs-comment\">//     theme: &#123;</span><br>  <span class=\"hljs-comment\">//       color: this.color //这种方式绑定的数据并不是可响应的</span><br>  <span class=\"hljs-comment\">//     &#125; // 即A组件的color变化后，组件D、E、F不会跟着变</span><br>  <span class=\"hljs-comment\">//   &#125;;</span><br>  <span class=\"hljs-comment\">// &#125;,</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">provide</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      theme: <span class=\"hljs-built_in\">this</span><span class=\"hljs-comment\">//方法一：提供祖先组件的实例</span><br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeColor</span>(<span class=\"hljs-params\">color</span>)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (color) &#123;<br>        <span class=\"hljs-built_in\">this</span>.color = color;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.color = <span class=\"hljs-built_in\">this</span>.color === <span class=\"hljs-string\">&quot;blue&quot;</span> ? <span class=\"hljs-string\">&quot;red&quot;</span> : <span class=\"hljs-string\">&quot;blue&quot;</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 方法二:使用2.6最新API Vue.observable 优化响应式 provide</span><br>  <span class=\"hljs-comment\">// provide() &#123;</span><br>  <span class=\"hljs-comment\">//   this.theme = Vue.observable(&#123;</span><br>  <span class=\"hljs-comment\">//     color: &quot;blue&quot;</span><br>  <span class=\"hljs-comment\">//   &#125;);</span><br>  <span class=\"hljs-comment\">//   return &#123;</span><br>  <span class=\"hljs-comment\">//     theme: this.theme</span><br>  <span class=\"hljs-comment\">//   &#125;;</span><br>  <span class=\"hljs-comment\">// &#125;,</span><br>  <span class=\"hljs-comment\">// methods: &#123;</span><br>  <span class=\"hljs-comment\">//   changeColor(color) &#123;</span><br>  <span class=\"hljs-comment\">//     if (color) &#123;</span><br>  <span class=\"hljs-comment\">//       this.theme.color = color;</span><br>  <span class=\"hljs-comment\">//     &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//       this.theme.color = this.theme.color === &quot;blue&quot; ? &quot;red&quot; : &quot;blue&quot;;</span><br>  <span class=\"hljs-comment\">//     &#125;</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125;</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// F 组件 </span><br>&lt;template functional&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border2&quot;</span>&gt;<br>    &lt;h3 :style=<span class=\"hljs-string\">&quot;&#123; color: injections.theme.color &#125;&quot;</span>&gt;F 组件&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  inject: &#123;<br>    theme: &#123;<br>      <span class=\"hljs-comment\">//函数式组件取值不一样</span><br>      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;&#125;)<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<p>虽说 provide 和 inject 主要为高阶插件 / 组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p>\n<h2 id=\"方法六、-parent-children与-ref\"><a href=\"#方法六、-parent-children与-ref\" class=\"headerlink\" title=\"方法六、$parent / $children与 ref\"></a>方法六、<code>$parent</code> / <code>$children</code>与 <code>ref</code></h2><ul>\n<li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>\n<li><code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>\n</ul>\n<p>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 <code>ref</code>来访问组件的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// component-a 子组件</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      title: <span class=\"hljs-string\">&#x27;Vue.js&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    sayHello () &#123;<br>      <span class=\"hljs-built_in\">window</span>.alert(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 父组件</span><br>&lt;template&gt;<br>  &lt;component-a ref=<span class=\"hljs-string\">&quot;comA&quot;</span>&gt;&lt;/component-a&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    mounted () &#123;<br>      <span class=\"hljs-keyword\">const</span> comA = <span class=\"hljs-built_in\">this</span>.$refs.comA;<br>      <span class=\"hljs-built_in\">console</span>.log(comA.title);  <span class=\"hljs-comment\">// Vue.js</span><br>      comA.sayHello();  <span class=\"hljs-comment\">// 弹窗</span><br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>\n<p>不过，<strong>这两种方法的弊端是，无法在跨级或兄弟间通信</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// parent.vue</span><br>&lt;component-a&gt;&lt;/component-a&gt;<br>&lt;component-b&gt;&lt;/component-b&gt;<br>&lt;component-b&gt;&lt;/component-b&gt;<br></code></pre></div></td></tr></table></figure>\n<p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>常见使用场景可以分为三类：</p>\n<ul>\n<li>父子通信：</li>\n</ul>\n<p>父向子传递数据是通过 props，子向父是通过 events（<code>$emit</code>）；通过父链 / 子链也可以通信（<code>$parent</code> / <code>$children</code>）；ref 也可以访问组件实例；provide / inject API；<code>$attrs/$listeners</code></p>\n<ul>\n<li>兄弟通信：</li>\n</ul>\n<p>Bus；Vuex</p>\n<ul>\n<li>跨级通信：</li>\n</ul>\n<p>Bus；Vuex；provide / inject API、<code>$attrs/$listeners</code></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://juejin.im/book/5bc844166fb9a05cd676ebca\">Vue.js 组件精讲</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#inheritAttrs\">Vue.js 官方文档</a></li>\n<li><a href=\"https://time.geekbang.org/course/detail/163-86419\">Vue 开发实战</a></li>\n<li><a href=\"https://webcache.googleusercontent.com/search?q=cache:GCLcuCsGrVIJ:https://bingzhe.github.io/2017/08/27/vuex%25E6%2595%25B0%25E6%258D%25AE%25E6%259C%25AC%25E5%259C%25B0%25E5%2582%25A8%25E5%25AD%2598/+&cd=12&hl=zh-CN&ct=clnk&gl=us\">Vuex 数据本地储存</a></li>\n<li><a href=\"https://tech.meituan.com/vuex_code_analysis.html\">Vuex 框架原理与源码分析</a></li>\n<li><a href=\"https://juejin.im/post/5c77c4ae518825407505e262\">Vue 组件通信方式全面详解</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208629.png\" alt=\"1460000019208629\">  </p>\n<p>如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。</p>\n<p>针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如 <code>props</code>/<code>$emit</code>、<code>$emit</code>/<code>$on</code>、<code>vuex</code>、<code>$parent</code> / <code>$children</code>、<code>$attrs</code>/<code>$listeners</code>和 <code>provide</code>/<code>inject</code>，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。</p>\n<h2 id=\"方法一、props-emit\"><a href=\"#方法一、props-emit\" class=\"headerlink\" title=\"方法一、props/$emit\"></a>方法一、<code>props</code>/<code>$emit</code></h2><p>父组件 A 通过 <code>props</code> 的方式向子组件 B 传递，B to A 通过在 B 组件中 <code>$emit</code>, A 组件中 <code>v-on</code> 的方式实现。</p>\n<h3 id=\"1-父组件向子组件传值\"><a href=\"#1-父组件向子组件传值\" class=\"headerlink\" title=\"1. 父组件向子组件传值\"></a>1. 父组件向子组件传值</h3><p>接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 <em>Users.vue</em> 中如何获取父组件 <em>App.vue</em> 中的数据 <code>users:[&quot;Henry&quot;,&quot;Bucky&quot;,&quot;Emily&quot;]</code></p>\n<h4 id=\"1-1-App-vue父组件\"><a href=\"#1-1-App-vue父组件\" class=\"headerlink\" title=\"1.1 App.vue父组件\"></a>1.1 <em>App.vue</em>父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;!-- 前者自定义名称便于子组件调用，后者要传递数据名 --&gt;<br>    &lt;users v-bind:users=<span class=\"hljs-string\">&quot;users&quot;</span>&gt;&lt;/users&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> Users <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Users&quot;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;App&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>      users:[<span class=\"hljs-string\">&quot;Henry&quot;</span>,<span class=\"hljs-string\">&quot;Bucky&quot;</span>,<span class=\"hljs-string\">&quot;Emily&quot;</span>]<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>    <span class=\"hljs-string\">&quot;users&quot;</span>:Users<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"1-2-Users-vue子组件\"><a href=\"#1-2-Users-vue子组件\" class=\"headerlink\" title=\"1.2 Users.vue子组件\"></a>1.2 <em>Users.vue</em>子组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;<br>    &lt;ul&gt;<br>      &lt;li v-<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;user in users&quot;</span>&gt;&#123;&#123;user&#125;&#125;&lt;<span class=\"hljs-regexp\">/li&gt;/</span><span class=\"hljs-regexp\">/遍历传递过来的值，然后呈现到页面</span><br><span class=\"hljs-regexp\">    &lt;/u</span>l&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;HelloWorld&#x27;</span>,<br>  props:&#123;<br>    users:&#123;           <span class=\"hljs-comment\">//这个就是父组件中子标签自定义名字</span><br>      type:<span class=\"hljs-built_in\">Array</span>,<br>      required:<span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：<code>data</code>、<code>props</code>、<code>computed</code></strong></p>\n</blockquote>\n<h3 id=\"2-子组件向父组件传值（通过事件形式）\"><a href=\"#2-子组件向父组件传值（通过事件形式）\" class=\"headerlink\" title=\"2. 子组件向父组件传值（通过事件形式）\"></a>2. 子组件向父组件传值（通过事件形式）</h3><p>接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击 “<em>Vue.js Demo</em>” 后，子组件向父组件传递值，文字由原来的 “传递的是一个值” 变成“子向父组件传值”，实现子组件向父组件值的传递。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208630.png\" alt=\"1460000019208630\"></p>\n<h4 id=\"2-1-Header-vue-子组件\"><a href=\"#2-1-Header-vue-子组件\" class=\"headerlink\" title=\"2.1 Header.vue 子组件\"></a>2.1 <em>Header.vue</em> 子组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;header&gt;<br>    &lt;h1 @click=<span class=\"hljs-string\">&quot;changeTitle&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;<span class=\"hljs-regexp\">/h1&gt;/</span><span class=\"hljs-regexp\">/绑定一个点击事件</span><br><span class=\"hljs-regexp\">  &lt;/</span>header&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;app-header&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      title:<span class=\"hljs-string\">&quot;Vue.js Demo&quot;</span><br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeTitle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&quot;titleChanged&quot;</span>,<span class=\"hljs-string\">&quot;子向父组件传值&quot;</span>);<span class=\"hljs-comment\">//自定义事件  传递值“子向父组件传值”</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-App-vue-父组件\"><a href=\"#2-2-App-vue-父组件\" class=\"headerlink\" title=\"2.2 App.vue 父组件\"></a>2.2 <em>App.vue</em> 父组件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;template&gt;<br>  &lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<br>    &lt;app-header v-on:titleChanged=<span class=\"hljs-string\">&quot;updateTitle&quot;</span> &gt;&lt;/app-header&gt;<br>    &lt;!-- 与子组件titleChanged自定义事件保持一致 --&gt;<br>    &lt;!-- updateTitle($event)接受传递过来的文字 --&gt;<br>    &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">import</span> Header <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Header&quot;</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  name: <span class=\"hljs-string\">&#x27;App&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>      title:<span class=\"hljs-string\">&quot;传递的是一个值&quot;</span><br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">updateTitle</span>(<span class=\"hljs-params\">e</span>)</span>&#123;   <span class=\"hljs-comment\">//声明这个函数</span><br>      <span class=\"hljs-built_in\">this</span>.title = e;<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>   <span class=\"hljs-string\">&quot;app-header&quot;</span>:Header,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>总结：子组件通过 <code>events</code> 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</strong></p>\n</blockquote>\n<h2 id=\"方法二、-emit-on\"><a href=\"#方法二、-emit-on\" class=\"headerlink\" title=\"方法二、$emit/$on\"></a>方法二、<code>$emit</code>/<code>$on</code></h2><p><strong>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件, 巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级</strong>。当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。</p>\n<h4 id=\"1-具体实现方式：\"><a href=\"#1-具体实现方式：\" class=\"headerlink\" title=\"1. 具体实现方式：\"></a>1. 具体实现方式：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> Event=<span class=\"hljs-keyword\">new</span> Vue();<br>Event.$emit(事件名,数据);<br>Event.$on(事件名,<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-举个例子\"><a href=\"#2-举个例子\" class=\"headerlink\" title=\"2. 举个例子\"></a>2. 举个例子</h4><p>假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;div id=<span class=\"hljs-string\">&quot;itany&quot;</span>&gt;<br>    &lt;my-a&gt;&lt;/my-a&gt;<br>    &lt;my-b&gt;&lt;/my-b&gt;<br>    &lt;my-c&gt;&lt;/my-c&gt;<br>&lt;/div&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;A组件：&#123;&#123;name&#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=<span class=\"hljs-string\">&quot;send&quot;</span>&gt;将数据发送给C组件&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;B组件：&#123;&#123;age&#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=<span class=\"hljs-string\">&quot;send&quot;</span>&gt;将数组发送给C组件&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;template id=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;C组件：&#123;&#123;name&#125;&#125;，&#123;&#123;age&#125;&#125;&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">var</span> Event = <span class=\"hljs-keyword\">new</span> Vue(); <span class=\"hljs-comment\">//定义一个空的Vue实例</span><br><span class=\"hljs-keyword\">var</span> A = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#a&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        name: <span class=\"hljs-string\">&#x27;tom&#x27;</span><br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        Event.$emit(<span class=\"hljs-string\">&#x27;data-a&#x27;</span>, <span class=\"hljs-built_in\">this</span>.name);<br>      &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> B = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#b&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        age: <span class=\"hljs-number\">20</span><br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        Event.$emit(<span class=\"hljs-string\">&#x27;data-b&#x27;</span>, <span class=\"hljs-built_in\">this</span>.age);<br>      &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> C = &#123;<br>    template: <span class=\"hljs-string\">&#x27;#c&#x27;</span>,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        name: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        age: <span class=\"hljs-string\">&quot;&quot;</span><br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;<span class=\"hljs-comment\">//在模板编译完成后执行</span><br>     Event.$on(<span class=\"hljs-string\">&#x27;data-a&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.name = name;<span class=\"hljs-comment\">//箭头函数内部不会产生新的this，这边如果不用=&gt;,this指代Event</span><br>     &#125;)<br>     Event.$on(<span class=\"hljs-string\">&#x27;data-b&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">age</span> =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.age = age;<br>     &#125;)<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    el: <span class=\"hljs-string\">&#x27;#itany&#x27;</span>,<br>    components: &#123;<br>      <span class=\"hljs-string\">&#x27;my-a&#x27;</span>: A,<br>      <span class=\"hljs-string\">&#x27;my-b&#x27;</span>: B,<br>      <span class=\"hljs-string\">&#x27;my-c&#x27;</span>: C<br>    &#125;<br>&#125;);    <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208631.gif\" alt=\"1460000019208631\"><br><code>$on</code> 监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。</p>\n<h2 id=\"方法三、vuex\"><a href=\"#方法三、vuex\" class=\"headerlink\" title=\"方法三、vuex\"></a>方法三、vuex</h2><p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208632.png\" alt=\"1460000019208632\"></p>\n<h3 id=\"1-简要介绍-Vuex-原理\"><a href=\"#1-简要介绍-Vuex-原理\" class=\"headerlink\" title=\"1. 简要介绍 Vuex 原理\"></a>1. 简要介绍 Vuex 原理</h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作 (常见于调用后端接口异步获取更新数据) 或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p>\n<h3 id=\"2-简要介绍各模块在流程中的功能：\"><a href=\"#2-简要介绍各模块在流程中的功能：\" class=\"headerlink\" title=\"2. 简要介绍各模块在流程中的功能：\"></a>2. 简要介绍各模块在流程中的功能：</h3><ul>\n<li>Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</li>\n<li>dispatch：操作行为触发方法，是唯一能执行 action 的方法。</li>\n<li>actions：<strong>操作行为处理模块, 由组件中的<code>$store.dispatch(&#39;action 名称&#39;, data1)</code>来触发。然后由 commit() 来触发 mutation 的调用 , 间接更新 state</strong>。负责处理 Vue Components 接收到的所有交互行为。包含同步 / 异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</li>\n<li>commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</li>\n<li>mutations：<strong>状态改变操作方法，由 actions 中的<code>commit(&#39;mutation 名称&#39;)</code>来触发</strong>。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</li>\n<li>state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</li>\n<li>getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</li>\n</ul>\n<h3 id=\"3-Vuex-与-localStorage\"><a href=\"#3-Vuex-与-localStorage\" class=\"headerlink\" title=\"3.Vuex 与 localStorage\"></a>3.Vuex 与 localStorage</h3><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，<strong>具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> defaultCity = <span class=\"hljs-string\">&quot;上海&quot;</span><br><span class=\"hljs-keyword\">try</span> &#123;<br>  <span class=\"hljs-comment\">// 用户关闭了本地存储功能，此时在外层加个try...catch</span><br>  <span class=\"hljs-keyword\">if</span> (!defaultCity) &#123;<br>    defaultCity = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">window</span>.localStorage.getItem(<span class=\"hljs-string\">&#x27;defaultCity&#x27;</span>))<br>  &#125;<br>&#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>  state: &#123;<br>    city: defaultCity<br>  &#125;,<br>  mutations: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeCity</span>(<span class=\"hljs-params\">state, city</span>)</span> &#123;<br>      state.city = city<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-built_in\">window</span>.localStorage.setItem(<span class=\"hljs-string\">&#x27;defaultCity&#x27;</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(state.city));<br>        <span class=\"hljs-comment\">// 数据改变的时候把数据拷贝一份保存到localStorage里面</span><br>      &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">JSON</span>.stringify(state.subscribeList);   <span class=\"hljs-comment\">// array -&gt; string</span><br><span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">window</span>.localStorage.getItem(<span class=\"hljs-string\">&quot;subscribeList&quot;</span>));    <span class=\"hljs-comment\">// string -&gt; array</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"方法四、-attrs-listeners\"><a href=\"#方法四、-attrs-listeners\" class=\"headerlink\" title=\"方法四、$attrs/$listeners\"></a>方法四、<code>$attrs</code>/<code>$listeners</code></h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法 —-<code>$attrs</code>/<code>$listeners</code></p>\n<ul>\n<li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 interitAttrs 选项一起使用。</li>\n<li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</li>\n</ul>\n<p>接下来我们看个跨级通信的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// index.vue</span><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;浪里行舟&lt;/h2&gt;<br>    &lt;child-com1<br>      :foo=<span class=\"hljs-string\">&quot;foo&quot;</span><br>      :boo=<span class=\"hljs-string\">&quot;boo&quot;</span><br>      :coo=<span class=\"hljs-string\">&quot;coo&quot;</span><br>      :doo=<span class=\"hljs-string\">&quot;doo&quot;</span><br>      title=<span class=\"hljs-string\">&quot;前端工匠&quot;</span><br>    &gt;&lt;/child-com1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom1 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom1.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123; childCom1 &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      foo: <span class=\"hljs-string\">&quot;Javascript&quot;</span>,<br>      boo: <span class=\"hljs-string\">&quot;Html&quot;</span>,<br>      coo: <span class=\"hljs-string\">&quot;CSS&quot;</span>,<br>      doo: <span class=\"hljs-string\">&quot;Vue&quot;</span><br>    &#125;;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom1.vue</span><br>&lt;template <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;foo: &#123;&#123; foo &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>    &lt;child-com2 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child-com2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom2 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom2.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123;<br>    childCom2<br>  &#125;,<br>  inheritAttrs: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span><br>  props: &#123;<br>    foo: <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// foo作为props属性绑定</span><br>  &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$attrs); <span class=\"hljs-comment\">// &#123; &quot;boo&quot;: &quot;Html&quot;, &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom2.vue</span><br>&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>    &lt;p&gt;boo: &#123;&#123; boo &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;childCom2: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>    &lt;child-com3 v-bind=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;&lt;/child-com3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">const</span> childCom3 = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;./childCom3.vue&quot;</span>);<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  components: &#123;<br>    childCom3<br>  &#125;,<br>  inheritAttrs: <span class=\"hljs-literal\">false</span>,<br>  props: &#123;<br>    boo: <span class=\"hljs-built_in\">String</span><br>  &#125;,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$attrs); <span class=\"hljs-comment\">// &#123;&quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// childCom3.vue</span><br>&lt;template&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border&quot;</span>&gt;<br>    &lt;p&gt;childCom3: &#123;&#123; $attrs &#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  props: &#123;<br>    coo: <span class=\"hljs-built_in\">String</span>,<br>    title: <span class=\"hljs-built_in\">String</span><br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208633.png\" alt=\"\"><br>如上图所示<code>$attrs</code>表示没有继承数据的对象，格式为 {属性名：属性值}。Vue2.4 提供了<code>$attrs</code> , <code>$listeners</code> 来传递数据与事件，跨级组件之间的通讯变得更简单。</p>\n<p>简单来说：<code>$attrs</code>与<code>$listeners</code> 是两个对象，<code>$attrs</code> 里存放的是父组件中绑定的非 Props 属性，<code>$listeners</code>里存放的是父组件中绑定的非原生事件。</p>\n<h2 id=\"方法五、provide-inject\"><a href=\"#方法五、provide-inject\" class=\"headerlink\" title=\"方法五、provide/inject\"></a>方法五、provide/inject</h2><h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h4><p>Vue2.2.0 新增 API, 这对选项需要一起使用，<strong>以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</strong>。一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。<br><strong>provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</strong>。</p>\n<h4 id=\"2-举个例子-1\"><a href=\"#2-举个例子-1\" class=\"headerlink\" title=\"2. 举个例子\"></a>2. 举个例子</h4><p>假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// A.vue</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  provide: &#123;<br>    name: <span class=\"hljs-string\">&#x27;浪里行舟&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// B.vue</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  inject: \\[<span class=\"hljs-string\">&#x27;name&#x27;</span>\\],<br>  mounted () &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);  <span class=\"hljs-comment\">// 浪里行舟</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到，在 A.vue 里，我们设置了一个 <strong>provide: name</strong>，值为 浪里行舟，它的作用就是将 <strong>name</strong> 这个变量提供给它的所有子组件。而在 B.vue 中，通过 <code>inject</code> 注入了从 A 组件中提供的 <strong>name</strong> 变量，那么在组件 B 中，就可以直接通过 <strong>this.name</strong> 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。</p>\n<p>需要注意的是：<strong>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</strong> —-vue 官方文档<br>所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。</p>\n<h4 id=\"3-provide-与-inject-怎么实现数据响应式\"><a href=\"#3-provide-与-inject-怎么实现数据响应式\" class=\"headerlink\" title=\"3.provide 与 inject 怎么实现数据响应式\"></a>3.provide 与 inject 怎么实现数据响应式</h4><p>一般来说，有两种办法：</p>\n<ul>\n<li>provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods</li>\n<li>使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)</li>\n</ul>\n<p>我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208634.png\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// A 组件 </span><br>&lt;div&gt;<br>      &lt;h1&gt;A 组件&lt;/h1&gt;<br>      &lt;button @click=<span class=\"hljs-string\">&quot;() =&gt; changeColor()&quot;</span>&gt;改变color&lt;/button&gt;<br>      &lt;ChildrenB /&gt;<br>      &lt;ChildrenC /&gt;<br>&lt;/div&gt;<br>......<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      color: <span class=\"hljs-string\">&quot;blue&quot;</span><br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-comment\">// provide() &#123;</span><br>  <span class=\"hljs-comment\">//   return &#123;</span><br>  <span class=\"hljs-comment\">//     theme: &#123;</span><br>  <span class=\"hljs-comment\">//       color: this.color //这种方式绑定的数据并不是可响应的</span><br>  <span class=\"hljs-comment\">//     &#125; // 即A组件的color变化后，组件D、E、F不会跟着变</span><br>  <span class=\"hljs-comment\">//   &#125;;</span><br>  <span class=\"hljs-comment\">// &#125;,</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">provide</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      theme: <span class=\"hljs-built_in\">this</span><span class=\"hljs-comment\">//方法一：提供祖先组件的实例</span><br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">changeColor</span>(<span class=\"hljs-params\">color</span>)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (color) &#123;<br>        <span class=\"hljs-built_in\">this</span>.color = color;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.color = <span class=\"hljs-built_in\">this</span>.color === <span class=\"hljs-string\">&quot;blue&quot;</span> ? <span class=\"hljs-string\">&quot;red&quot;</span> : <span class=\"hljs-string\">&quot;blue&quot;</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 方法二:使用2.6最新API Vue.observable 优化响应式 provide</span><br>  <span class=\"hljs-comment\">// provide() &#123;</span><br>  <span class=\"hljs-comment\">//   this.theme = Vue.observable(&#123;</span><br>  <span class=\"hljs-comment\">//     color: &quot;blue&quot;</span><br>  <span class=\"hljs-comment\">//   &#125;);</span><br>  <span class=\"hljs-comment\">//   return &#123;</span><br>  <span class=\"hljs-comment\">//     theme: this.theme</span><br>  <span class=\"hljs-comment\">//   &#125;;</span><br>  <span class=\"hljs-comment\">// &#125;,</span><br>  <span class=\"hljs-comment\">// methods: &#123;</span><br>  <span class=\"hljs-comment\">//   changeColor(color) &#123;</span><br>  <span class=\"hljs-comment\">//     if (color) &#123;</span><br>  <span class=\"hljs-comment\">//       this.theme.color = color;</span><br>  <span class=\"hljs-comment\">//     &#125; else &#123;</span><br>  <span class=\"hljs-comment\">//       this.theme.color = this.theme.color === &quot;blue&quot; ? &quot;red&quot; : &quot;blue&quot;;</span><br>  <span class=\"hljs-comment\">//     &#125;</span><br>  <span class=\"hljs-comment\">//   &#125;</span><br>  <span class=\"hljs-comment\">// &#125;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// F 组件 </span><br>&lt;template functional&gt;<br>  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;border2&quot;</span>&gt;<br>    &lt;h3 :style=<span class=\"hljs-string\">&quot;&#123; color: injections.theme.color &#125;&quot;</span>&gt;F 组件&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  inject: &#123;<br>    theme: &#123;<br>      <span class=\"hljs-comment\">//函数式组件取值不一样</span><br>      <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-function\">() =&gt;</span> (&#123;&#125;)<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>虽说 provide 和 inject 主要为高阶插件 / 组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p>\n<h2 id=\"方法六、-parent-children与-ref\"><a href=\"#方法六、-parent-children与-ref\" class=\"headerlink\" title=\"方法六、$parent / $children与 ref\"></a>方法六、<code>$parent</code> / <code>$children</code>与 <code>ref</code></h2><ul>\n<li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>\n<li><code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>\n</ul>\n<p>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 <code>ref</code>来访问组件的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// component-a 子组件</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  data () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      title: <span class=\"hljs-string\">&#x27;Vue.js&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    sayHello () &#123;<br>      <span class=\"hljs-built_in\">window</span>.alert(<span class=\"hljs-string\">&#x27;Hello&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 父组件</span><br>&lt;template&gt;<br>  &lt;component-a ref=<span class=\"hljs-string\">&quot;comA&quot;</span>&gt;&lt;/component-a&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    mounted () &#123;<br>      <span class=\"hljs-keyword\">const</span> comA = <span class=\"hljs-built_in\">this</span>.$refs.comA;<br>      <span class=\"hljs-built_in\">console</span>.log(comA.title);  <span class=\"hljs-comment\">// Vue.js</span><br>      comA.sayHello();  <span class=\"hljs-comment\">// 弹窗</span><br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<p>不过，<strong>这两种方法的弊端是，无法在跨级或兄弟间通信</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// parent.vue</span><br>&lt;component-a&gt;&lt;/component-a&gt;<br>&lt;component-b&gt;&lt;/component-b&gt;<br>&lt;component-b&gt;&lt;/component-b&gt;<br></code></pre></td></tr></table></figure>\n<p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>常见使用场景可以分为三类：</p>\n<ul>\n<li>父子通信：</li>\n</ul>\n<p>父向子传递数据是通过 props，子向父是通过 events（<code>$emit</code>）；通过父链 / 子链也可以通信（<code>$parent</code> / <code>$children</code>）；ref 也可以访问组件实例；provide / inject API；<code>$attrs/$listeners</code></p>\n<ul>\n<li>兄弟通信：</li>\n</ul>\n<p>Bus；Vuex</p>\n<ul>\n<li>跨级通信：</li>\n</ul>\n<p>Bus；Vuex；provide / inject API、<code>$attrs/$listeners</code></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://juejin.im/book/5bc844166fb9a05cd676ebca\">Vue.js 组件精讲</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#inheritAttrs\">Vue.js 官方文档</a></li>\n<li><a href=\"https://time.geekbang.org/course/detail/163-86419\">Vue 开发实战</a></li>\n<li><a href=\"https://webcache.googleusercontent.com/search?q=cache:GCLcuCsGrVIJ:https://bingzhe.github.io/2017/08/27/vuex%25E6%2595%25B0%25E6%258D%25AE%25E6%259C%25AC%25E5%259C%25B0%25E5%2582%25A8%25E5%25AD%2598/+&cd=12&hl=zh-CN&ct=clnk&gl=us\">Vuex 数据本地储存</a></li>\n<li><a href=\"https://tech.meituan.com/vuex_code_analysis.html\">Vuex 框架原理与源码分析</a></li>\n<li><a href=\"https://juejin.im/post/5c77c4ae518825407505e262\">Vue 组件通信方式全面详解</a></li>\n</ul>\n"},{"title":"网络通信-多种方式实现并发 Web Server","date":"2020-08-16T13:40:36.000Z","_content":"\n下面我们使用 `Python` 来实现并发的 `Web Server`，其中采用了多进程、多线程、协程、单进程单线程非阻塞、`select`、`epoll`的方式。\n\n一、使用子进程来实现并发 Web Server\n---------------------------\n\n```python\nimport socket\nimport re\nimport multiprocessing\n\n#  注意： 不同的实现方式，但是对请求的处理方式相同，只是主函数中对客户端请求的接收方式不同 \ndef handle_request(new_socket):\n    while True:\n        # 接收请求\n        recv_msg = new_socket.recv(1024).decode(\"utf-8\")\n        if recv_msg == \"\":\n            print(\"recv null\")\n            new_socket.close()\n            return\n\n        # 从请求中解析出URI\n        recv_lines = recv_msg.splitlines()\n        print(recv_lines)\n        # 使用正则表达式提取出URI\n        ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n        if ret:\n            # 获取URI字符串\n            file_name = ret.group(1)\n            # 如果URI是/，则默认返回index.html的内容\n            if file_name == \"/\":\n                file_name = \"/index.html\"\n\n        try:\n            # 根据请求的URI，读取相应的文件\n            fp = open(\".\" + file_name, \"rb\")\n        except:\n            # 找不到文件，响应404\n            response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n            response_msg += \"\\r\\n\"\n            response_msg += \"<h1>----file not found----</h1>\"\n            new_socket.send(response_msg.encode(\"utf-8\"))\n        else:\n            html_content = fp.read()\n            fp.close()\n            response_body = html_content\n\n            # 响应正确 200 OK\n            response_header = \"HTTP/1.1 200 OK\\r\\n\"\n            response_header += \"Content-Length:%d\\r\\n\" % len(response_body)\n            response_header += \"\\r\\n\"\n\n            response = response_header.encode(\"utf-8\") + response_body\n\n            # 返回响应数据\n            new_socket.send(response)\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    # tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个子进程来处理客户端的请求\n        sub_p = multiprocessing.Process(target=handle_request, args=(new_socket,))\n        sub_p.start()\n        # 这里要关闭父进程中的new_socket，因为创建子进程会复制一份new_socket给子进程\n        new_socket.close()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n我们使用进程来实现并发的 Web Server，也就是将 `accept` 到 `new_socket` 传递给子进程去处理，处理函数还是 `handle_request`。\n\n但是这里注意，子进程会从父进程中将所有的变量**进行拷贝**，也就是说父进程和子进程中**各有一份 new_socket**，而在 `Linux` 下，`socket` 对应的也是一个文件描述符，而这两个 `new_socket` 实际上是指向同一个 `fd` 的。所以我们将 `new_socket` 交给子进程后，父进程就可以马上关闭自己的 `new_socket` 了，当子进程服务完毕后，关闭子进程中的 `new_socket`，这样**对应的 `FD` 才会正真关闭，此时才会触发四次挥手。所以父进程代码中的 `new_socket.close()` 非常重要。**\n\n二、使用线程来实现并发 Web Server\n--------------------------\n\n在第一节中，我们使用进程来实现并发，但是进程对资源消耗很大，一般不推荐使用。所以这里我们使用线程来实现并发，很简单，我们将 `multiprocessing.Process` 替换为 `threaing.Thread` 就可以了：\n\n```python\nimport socket\nimport re\nimport threading\nfrom web_server import handle_request\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个线程来处理客户端的请求\n        t = threading.Thread(target=handle_request, args=(new_socket,))\n        t.start()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n我们发现，除了将子进程的创建过程替换成了线程的创建过程，后面的 `new_socket.close(`) 也被删除了，这是因为线程是公用进程资源的，`new_socket` 不会被复制，所以 `socket` 对应的 FD，只有一个 new_socket 指向他。\n\n如果此时我们仍然在这里关闭 `new_socket`，那么在线程再使用 `new_socket` 就会报错。如下信息：\n\n```python\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 926, in _bootstrap_inner\n    self.run()\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 870, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/Users/mac/PycharmProjects/Month2/web_server.py\", line 9, in handle_request\n    recv_msg = new_socket.recv(1024).decode(\"utf-8\")\nOSError: [Errno 9] Bad file descriptor\n```\n\n三、使用协程来实现并发 Web Server\n------------------------------\n\n使用进程和线程来实现的并发 Web Server，当并发访问量很大时，资源消耗都很高。所以这里使用协程来实现并发服务器。\n\n```python\nimport socket\nimport re\nimport gevent\nfrom gevent import monkey\nmonkey.patch_all()\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    # tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个协程来处理客户端的请求\n        gevent.spawn(handle_request, new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n使用 gevent 来实现协程，并发处理请求。\n\n四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\n--------------------------\n\n前面我们使用的多进程和多线程来处理并发，是因为 `socket.recv()` 是阻塞的，每次 `accept` 一个连接，就需要交给一个新的进程或线程去处理，从而不影响下一个 `socket` 连接。\n\n但是我们可以通过单进程单线程和非阻塞的方式来完成并发 `socket` 的处理：\n\n```python\nimport socket\nimport time\nimport re\n\n\ndef handle_request(new_socket, recv_msg):\n    # 从请求中解析出URI\n    recv_lines = recv_msg.splitlines()\n\n    # 使用正则表达式提取出URI\n    ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n\n    if ret:\n        # 获取URI字符串\n        file_name = ret.group(1)\n        # 如果URI是/，则默认返回index.html的内容\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n\n    try:\n        # 根据请求的URI，读取相应的文件\n        fp = open(\".\" + file_name, \"rb\")\n    except:\n        # 找不到文件，响应404\n        response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n        response_msg += \"\\r\\n\"\n        response_msg += \"<h1>----file not found----</h1>\"\n        new_socket.send(response_msg.encode(\"utf-8\"))\n    else:\n        html_content = fp.read()\n        fp.close()\n\n        response_body = html_content\n\n        # 响应正确 200 OK\n        response_header = \"HTTP/1.1 200 OK\\r\\n\"\n        response_header += \"Content-Length:%d\\r\\n\" % len(response_body)\n        response_header += \"\\r\\n\"\n\n        response = response_header.encode(\"utf-8\") + response_body\n\n        # 返回响应数据\n        new_socket.send(response)\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n\n    # 将accept设置为非阻塞,这里设置一次，后面不管调多少次accept都是非阻塞的\n    tcp_server_socket.setblocking(False)\n    # 定义一个列表，将每次连接的socket加入该列表\n    client_socket_list = list()\n    fd_to_addr = {}\n\n    # 循环接收客户端连接\n    while True:\n        time.sleep(0.5)\n\n        try:\n            new_socket, client_addr = tcp_server_socket.accept()\n        except Exception as ret:\n            # 当没有客户端链接的时候，抛出异常\n            pass\n        else:\n            print(\"客户端{} OnLine。。。。\".format(client_addr))\n            # 当有客户端链接的时候\n            # 将new_socket.recv()设置为非阻塞的\n            new_socket.setblocking(False)\n            # 将new_socket加入列表\n            client_socket_list.append(new_socket)\n\n            # 将 conn 和 addr 信息分别保存起来\n            fd_to_addr[new_socket.fileno()] = client_addr\n\n        # 遍历socket列表，检查每一个socket是否有数据到达，或者客户端是否断开\n        for client_socket in client_socket_list:\n            try:\n                recv_content = client_socket.recv(1024).decode(\"utf-8\")\n            except Exception as ret:\n                # 异常，表示该客户端没有发数据过来\n                pass\n            else:\n                # 正常，表示客户端发了数据，或者客户端断开连接（断开连接会导致recv正常返回）\n                if recv_content:\n                    # 有数据，调用请求处理代码\n                    handle_request(client_socket, recv_content)\n                else:\n                    print(\"客户端{}OffLine。。。。\".format(fd_to_addr[client_socket.fileno()]))\n                    # recv正常返回，且数据为空，表示客户端断开了链接\n                    # 将该socket踢出列表\n                    client_socket_list.remove(client_socket)\n                    # 服务器也关闭连接\n                    client_socket.close()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n上面代码主要是说明在单进程单线程情况下，如何将 `accept` 和 `recv` 分开，并且都用非阻塞的方式来处理，这样每次查看是否有客户端链接进来的时候，都会去检查所有已链接的 `socket` 是否有数据发送过来。\n\n在这种方式中，我们使用单进程单线程模拟了并发处理 `socket` 连接的功能，但这些 `socket` 连接的处理不是并行的。当一个 `socket` 处理数据时间比较长时，也会**造成整个程序的等待。**\n\n特别注意的是，在请求处理函数 `handle_request` 中，我们将请求内容作为参数一并传递进去。然后在返回 `200 OK` 的时候，在响应头中添加了 `Content-Length` 字段，这个字段用于告诉客户端，此次发送的响应体有多大。当客户端收完指定大小的数据，就认为这次服务器发送的数据已经发送完毕。他就可以继续发送下一个新的请求。\n\n在 `handle_request` 中可以看到，`new_socket.close()` 已经被删除，也就是说服务器不会自动关闭连接，而直到客户端断开连接之前，服务器都保持`长连接`。断开连接由客户端来发起。\n\n## 五、使用select实现高并发HTTP服务器\n\n在编写了单进程非阻塞式服务器之后，还有另外种写服务器的方法，便是利用`select`。\n`select`是对底层操作系统的一个访问操作，因而效率较高，比单进程非阻塞中的`for`循环遍历效率要高，可以利用`select`进行选择，选择出来可以读取信息的套接字、可以发送信息的套接字、以及产生的异常（分别是三个返回值）。\n\n```python\nreadable, writable, exceptionable = select([], [], [])\n```\n\n以上即为`select`的使用方法，程序执行到该语句后进行阻塞等待，接收到新的套接字之后便解阻塞。\n程序思路便是利用`select`检测、选择出能读取的套接字（包括服务器套接字、客户端套接字），将接收到消息的客户端套接字存入列表（列表中本来只有服务器套接字），之后进行`for`循环遍历，读取套接字中的信息或者进行与客户端的连接。\n\n```python\nfrom socket import *\nfrom select import select\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建套接字\n    server_socket = socket(AF_INET, SOCK_STREAM)\n\n    # 设置可以重复使用绑定的信息\n    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n\n    # 绑定本机信息\n    server_socket.bind((\"\", 8080))\n\n    # 主动监听\n    server_socket.listen(128)\n    \n    # 将accept设置为非阻塞\n    server_socket.setblocking(False)\n\n    inputs = [server_socket]\n    fd_to_addr = {}\n\n    while True:\n        readable, writable, exceptionable = select(inputs, [], [])\n        for sock in readable:\n\n            if sock == server_socket:\n                clientSocket, clientAddr = server_socket.accept()\n                # 当有客户端链接的时候\n                # 将new_socket.recv()设置为非阻塞的\n                clientSocket.setblocking(False)\n\n                inputs.append(clientSocket)\n                # 将 addr 信息保存起来\n                fd_to_addr[clientSocket.fileno()] = clientAddr\n                print(\"客户端{} OnLine。。。。\".format(clientAddr))\n\n            else:\n                message = sock.recv(1024)\n                if message:\n                    # print('message from [%s] is %s' % (str(sock), message.decode('utf-8')))\n                    handle_request(sock, message.decode(\"utf8\"))\n                else:\n                    print('[%s] OffLine。。。。' % (fd_to_addr[sock.fileno()]))\n                    inputs.remove(sock)\n                    sock.close()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n`select`版服务器有一定的缺点，便是只能处理1024个并发客户端，因而其效率还是有一定的局限性。\n\n## 六、使用epoll实现高并发HTTP服务器\n\n我们在最后使用单进程+单线程+非阻塞+长连接实现了一个可并发处理客户端连接的服务器。他的原理可以用以下的图来描述：\n\n![P4p4aJ](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/P4p4aJ.png)\n\n**解释：**\n\n1. HTTP服务器是我们使用 单进程+单线程+非阻塞+长连接实现 的`web`服务器。\n\n2. 在实现的时候，我们创建了一个存放已接受`Socket`连接的列表，该列表是在应用程序的内存空间中的。如图中深蓝色部分\n\n3. 当有3个客户端接入的时候，列表中一共存在3个对应的`socket`句柄，分别对应三个小黄框。\n\n4. 灰色小框代表服务器接收请求的`socket`。\n\n5. 我们在进行无限循环的时候，首先是检查是否有新的客户端接入，相当于检查灰色小框是否有数据到达。然后轮询3个小黄框对应`socket`是否有数据到达。轮询的效率是很低的。\n\n6. 服务器在使用`accept`和`recv`时，实际上是委托操作系统帮他检查是否有数据到达，由于这个列表的`socket`都处于用户内存空间，所以需要将其复制到内核空间。操作系统检查完毕后，如果有数据就返回数据给应用程序，如果没有数据就以异常的方式通知应用程序。而且不光这样，操作系统可能还同时在运行其他的应用程序，这样效率会非常低。\n\n**我们再来看epoll的图：**\n\n![5TcU6B](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/5TcU6B.png)\n\n**解释：**\n\n1.我们可以看到，在结构上，最大的区别在于，存放`socket`的列表不处于应用程序内部。在`epoll`中，这个存放`socket`的列表处于一个**特殊的内存空间，这个内存空间是应用程序与内核共享的空间**。也就是说，当应用程序委托操作系统检查是否有数据到达时，无需将复制数据给内核空间，操作系统可以直接进行检查。\n\n2.操作系统检查到某个`socket`有数据到达，使用**事件通知**的形式，直接告诉应用程序，而不是以轮询的方式。打个比方，一个厨师挨个问50个人饿了没，如果饿了就给他东西吃，这是轮询。而50个人中，谁饿了谁举手，厨师就给吃的，这叫事件通知。很明显，事件通知的效率会特别高。\n\n```python\nfrom socket import *\nimport select\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建套接字\n    server_socket = socket(AF_INET, SOCK_STREAM)\n\n    # 设置可以重复使用绑定的信息\n    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n\n    # 绑定本机信息\n    server_socket.bind((\"\", 8080))\n\n    # 主动监听\n    server_socket.listen(128)\n    # 将accept设置为非阻塞\n    server_socket.setblocking(False)\n    # 创建epoll对象\n    epoll = select.epoll()\n\n    # 注册事件到epoll中\n    # epoll.register(fd[, eventmask])\n    # 注意，如果fd已经注册过，则会发生异常\n    # 将创建的套接字添加到epoll的事件监听中\n\n    # 注册tcp套接字\n    epoll.register(server_socket.fileno(), select.EPOLLIN)\n\n    '''因为epoll返回的触发事件对应的是套接字文件描述符，所以需要在字典中加入对应关系'''\n\n    # 定义一个字典，用于存放fd和套接字的对应关系，因为操作系统在事件通知的时候，使用的是fd，而不是套接字，我们需要使用fd来找到对应\n    # 的套接字，从而可以调用accept和recv\n    fd_to_socket = {}\n    fd_to_addr = {}\n\n    # 循环接收客户端连接\n    while True:\n        # 使用一个列表来接受操作系统的事件通知，poll()是阻塞的，当有数据到达时，poll才会解开阻塞\n        epoll_list = epoll.poll()\n\n        for fd, event in epoll_list:\n            # 首先判断事件通知中的fd是否对应监听套接字（监听套接字调用accept）\n            if fd == server_socket.fileno():\n\n                conn, addr = server_socket.accept()\n                # 监听到一个新的客户端连接，将conn也注册到epoll中\n                epoll.register(conn.fileno(), select.EPOLLIN)\n\n                print('有新的客户端到来%s' % str(addr))\n\n                # 将 conn 和 addr 信息分别保存起来\n                fd_to_socket[conn.fileno()] = conn\n                fd_to_addr[conn.fileno()] = addr\n\n            else:  # 如果不是监听套接字，那么都是客户端对应的套接字\n                # 接收数据\n                recvData = fd_to_socket[fd].recv(1024).decode('utf8')\n\n                if recvData:\n                    handle_request(fd_to_socket[fd], recvData)\n\n                # 如果没有数据，则表示客户端断开连接\n                else:\n                    # 从 epoll 中移除该 连接 fd\n                    epoll.unregister(fd)\n\n                    #  关闭fd对应的socket\n                    fd_to_socket[fd].close()\n\n                    print(\"%s---offline---\" % str(fd_to_addr[fd]))\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n","source":"_posts/网络通信-多种方式实现并发 Web Server.md","raw":"---\ntitle: 网络通信-多种方式实现并发 Web Server\ndate: 2020-08-16 21:40:36\ncategories:\n    - 技术\n    - 网络通信\n    - TCP\ntags:\n    - TCP\n    - WEB Server\n    - 高并发\n---\n\n下面我们使用 `Python` 来实现并发的 `Web Server`，其中采用了多进程、多线程、协程、单进程单线程非阻塞、`select`、`epoll`的方式。\n\n一、使用子进程来实现并发 Web Server\n---------------------------\n\n```python\nimport socket\nimport re\nimport multiprocessing\n\n#  注意： 不同的实现方式，但是对请求的处理方式相同，只是主函数中对客户端请求的接收方式不同 \ndef handle_request(new_socket):\n    while True:\n        # 接收请求\n        recv_msg = new_socket.recv(1024).decode(\"utf-8\")\n        if recv_msg == \"\":\n            print(\"recv null\")\n            new_socket.close()\n            return\n\n        # 从请求中解析出URI\n        recv_lines = recv_msg.splitlines()\n        print(recv_lines)\n        # 使用正则表达式提取出URI\n        ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n        if ret:\n            # 获取URI字符串\n            file_name = ret.group(1)\n            # 如果URI是/，则默认返回index.html的内容\n            if file_name == \"/\":\n                file_name = \"/index.html\"\n\n        try:\n            # 根据请求的URI，读取相应的文件\n            fp = open(\".\" + file_name, \"rb\")\n        except:\n            # 找不到文件，响应404\n            response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n            response_msg += \"\\r\\n\"\n            response_msg += \"<h1>----file not found----</h1>\"\n            new_socket.send(response_msg.encode(\"utf-8\"))\n        else:\n            html_content = fp.read()\n            fp.close()\n            response_body = html_content\n\n            # 响应正确 200 OK\n            response_header = \"HTTP/1.1 200 OK\\r\\n\"\n            response_header += \"Content-Length:%d\\r\\n\" % len(response_body)\n            response_header += \"\\r\\n\"\n\n            response = response_header.encode(\"utf-8\") + response_body\n\n            # 返回响应数据\n            new_socket.send(response)\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    # tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个子进程来处理客户端的请求\n        sub_p = multiprocessing.Process(target=handle_request, args=(new_socket,))\n        sub_p.start()\n        # 这里要关闭父进程中的new_socket，因为创建子进程会复制一份new_socket给子进程\n        new_socket.close()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n我们使用进程来实现并发的 Web Server，也就是将 `accept` 到 `new_socket` 传递给子进程去处理，处理函数还是 `handle_request`。\n\n但是这里注意，子进程会从父进程中将所有的变量**进行拷贝**，也就是说父进程和子进程中**各有一份 new_socket**，而在 `Linux` 下，`socket` 对应的也是一个文件描述符，而这两个 `new_socket` 实际上是指向同一个 `fd` 的。所以我们将 `new_socket` 交给子进程后，父进程就可以马上关闭自己的 `new_socket` 了，当子进程服务完毕后，关闭子进程中的 `new_socket`，这样**对应的 `FD` 才会正真关闭，此时才会触发四次挥手。所以父进程代码中的 `new_socket.close()` 非常重要。**\n\n二、使用线程来实现并发 Web Server\n--------------------------\n\n在第一节中，我们使用进程来实现并发，但是进程对资源消耗很大，一般不推荐使用。所以这里我们使用线程来实现并发，很简单，我们将 `multiprocessing.Process` 替换为 `threaing.Thread` 就可以了：\n\n```python\nimport socket\nimport re\nimport threading\nfrom web_server import handle_request\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个线程来处理客户端的请求\n        t = threading.Thread(target=handle_request, args=(new_socket,))\n        t.start()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n我们发现，除了将子进程的创建过程替换成了线程的创建过程，后面的 `new_socket.close(`) 也被删除了，这是因为线程是公用进程资源的，`new_socket` 不会被复制，所以 `socket` 对应的 FD，只有一个 new_socket 指向他。\n\n如果此时我们仍然在这里关闭 `new_socket`，那么在线程再使用 `new_socket` 就会报错。如下信息：\n\n```python\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 926, in _bootstrap_inner\n    self.run()\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 870, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/Users/mac/PycharmProjects/Month2/web_server.py\", line 9, in handle_request\n    recv_msg = new_socket.recv(1024).decode(\"utf-8\")\nOSError: [Errno 9] Bad file descriptor\n```\n\n三、使用协程来实现并发 Web Server\n------------------------------\n\n使用进程和线程来实现的并发 Web Server，当并发访问量很大时，资源消耗都很高。所以这里使用协程来实现并发服务器。\n\n```python\nimport socket\nimport re\nimport gevent\nfrom gevent import monkey\nmonkey.patch_all()\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # # 设置重用地址\n    # tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n    # 循环接收客户端连接\n    while True:\n        new_socket, client_addr = tcp_server_socket.accept()\n        # 启动一个协程来处理客户端的请求\n        gevent.spawn(handle_request, new_socket)\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n使用 gevent 来实现协程，并发处理请求。\n\n四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\n--------------------------\n\n前面我们使用的多进程和多线程来处理并发，是因为 `socket.recv()` 是阻塞的，每次 `accept` 一个连接，就需要交给一个新的进程或线程去处理，从而不影响下一个 `socket` 连接。\n\n但是我们可以通过单进程单线程和非阻塞的方式来完成并发 `socket` 的处理：\n\n```python\nimport socket\nimport time\nimport re\n\n\ndef handle_request(new_socket, recv_msg):\n    # 从请求中解析出URI\n    recv_lines = recv_msg.splitlines()\n\n    # 使用正则表达式提取出URI\n    ret = re.match(r\"[^/]+(/[^ ]*)\", recv_lines[0])\n\n    if ret:\n        # 获取URI字符串\n        file_name = ret.group(1)\n        # 如果URI是/，则默认返回index.html的内容\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n\n    try:\n        # 根据请求的URI，读取相应的文件\n        fp = open(\".\" + file_name, \"rb\")\n    except:\n        # 找不到文件，响应404\n        response_msg = \"HTTP/1.1 404 NOT FOUND\\r\\n\"\n        response_msg += \"\\r\\n\"\n        response_msg += \"<h1>----file not found----</h1>\"\n        new_socket.send(response_msg.encode(\"utf-8\"))\n    else:\n        html_content = fp.read()\n        fp.close()\n\n        response_body = html_content\n\n        # 响应正确 200 OK\n        response_header = \"HTTP/1.1 200 OK\\r\\n\"\n        response_header += \"Content-Length:%d\\r\\n\" % len(response_body)\n        response_header += \"\\r\\n\"\n\n        response = response_header.encode(\"utf-8\") + response_body\n\n        # 返回响应数据\n        new_socket.send(response)\n\n\ndef main():\n    # 创建TCP SOCKET实例\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置重用地址\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # 绑定地址（默认本机IP）和端口\n    tcp_server_socket.bind((\"\", 7890))\n    # 监听\n    tcp_server_socket.listen(128)\n\n    # 将accept设置为非阻塞,这里设置一次，后面不管调多少次accept都是非阻塞的\n    tcp_server_socket.setblocking(False)\n    # 定义一个列表，将每次连接的socket加入该列表\n    client_socket_list = list()\n    fd_to_addr = {}\n\n    # 循环接收客户端连接\n    while True:\n        time.sleep(0.5)\n\n        try:\n            new_socket, client_addr = tcp_server_socket.accept()\n        except Exception as ret:\n            # 当没有客户端链接的时候，抛出异常\n            pass\n        else:\n            print(\"客户端{} OnLine。。。。\".format(client_addr))\n            # 当有客户端链接的时候\n            # 将new_socket.recv()设置为非阻塞的\n            new_socket.setblocking(False)\n            # 将new_socket加入列表\n            client_socket_list.append(new_socket)\n\n            # 将 conn 和 addr 信息分别保存起来\n            fd_to_addr[new_socket.fileno()] = client_addr\n\n        # 遍历socket列表，检查每一个socket是否有数据到达，或者客户端是否断开\n        for client_socket in client_socket_list:\n            try:\n                recv_content = client_socket.recv(1024).decode(\"utf-8\")\n            except Exception as ret:\n                # 异常，表示该客户端没有发数据过来\n                pass\n            else:\n                # 正常，表示客户端发了数据，或者客户端断开连接（断开连接会导致recv正常返回）\n                if recv_content:\n                    # 有数据，调用请求处理代码\n                    handle_request(client_socket, recv_content)\n                else:\n                    print(\"客户端{}OffLine。。。。\".format(fd_to_addr[client_socket.fileno()]))\n                    # recv正常返回，且数据为空，表示客户端断开了链接\n                    # 将该socket踢出列表\n                    client_socket_list.remove(client_socket)\n                    # 服务器也关闭连接\n                    client_socket.close()\n\n    # 关闭整个SOCKET\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n上面代码主要是说明在单进程单线程情况下，如何将 `accept` 和 `recv` 分开，并且都用非阻塞的方式来处理，这样每次查看是否有客户端链接进来的时候，都会去检查所有已链接的 `socket` 是否有数据发送过来。\n\n在这种方式中，我们使用单进程单线程模拟了并发处理 `socket` 连接的功能，但这些 `socket` 连接的处理不是并行的。当一个 `socket` 处理数据时间比较长时，也会**造成整个程序的等待。**\n\n特别注意的是，在请求处理函数 `handle_request` 中，我们将请求内容作为参数一并传递进去。然后在返回 `200 OK` 的时候，在响应头中添加了 `Content-Length` 字段，这个字段用于告诉客户端，此次发送的响应体有多大。当客户端收完指定大小的数据，就认为这次服务器发送的数据已经发送完毕。他就可以继续发送下一个新的请求。\n\n在 `handle_request` 中可以看到，`new_socket.close()` 已经被删除，也就是说服务器不会自动关闭连接，而直到客户端断开连接之前，服务器都保持`长连接`。断开连接由客户端来发起。\n\n## 五、使用select实现高并发HTTP服务器\n\n在编写了单进程非阻塞式服务器之后，还有另外种写服务器的方法，便是利用`select`。\n`select`是对底层操作系统的一个访问操作，因而效率较高，比单进程非阻塞中的`for`循环遍历效率要高，可以利用`select`进行选择，选择出来可以读取信息的套接字、可以发送信息的套接字、以及产生的异常（分别是三个返回值）。\n\n```python\nreadable, writable, exceptionable = select([], [], [])\n```\n\n以上即为`select`的使用方法，程序执行到该语句后进行阻塞等待，接收到新的套接字之后便解阻塞。\n程序思路便是利用`select`检测、选择出能读取的套接字（包括服务器套接字、客户端套接字），将接收到消息的客户端套接字存入列表（列表中本来只有服务器套接字），之后进行`for`循环遍历，读取套接字中的信息或者进行与客户端的连接。\n\n```python\nfrom socket import *\nfrom select import select\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建套接字\n    server_socket = socket(AF_INET, SOCK_STREAM)\n\n    # 设置可以重复使用绑定的信息\n    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n\n    # 绑定本机信息\n    server_socket.bind((\"\", 8080))\n\n    # 主动监听\n    server_socket.listen(128)\n    \n    # 将accept设置为非阻塞\n    server_socket.setblocking(False)\n\n    inputs = [server_socket]\n    fd_to_addr = {}\n\n    while True:\n        readable, writable, exceptionable = select(inputs, [], [])\n        for sock in readable:\n\n            if sock == server_socket:\n                clientSocket, clientAddr = server_socket.accept()\n                # 当有客户端链接的时候\n                # 将new_socket.recv()设置为非阻塞的\n                clientSocket.setblocking(False)\n\n                inputs.append(clientSocket)\n                # 将 addr 信息保存起来\n                fd_to_addr[clientSocket.fileno()] = clientAddr\n                print(\"客户端{} OnLine。。。。\".format(clientAddr))\n\n            else:\n                message = sock.recv(1024)\n                if message:\n                    # print('message from [%s] is %s' % (str(sock), message.decode('utf-8')))\n                    handle_request(sock, message.decode(\"utf8\"))\n                else:\n                    print('[%s] OffLine。。。。' % (fd_to_addr[sock.fileno()]))\n                    inputs.remove(sock)\n                    sock.close()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n`select`版服务器有一定的缺点，便是只能处理1024个并发客户端，因而其效率还是有一定的局限性。\n\n## 六、使用epoll实现高并发HTTP服务器\n\n我们在最后使用单进程+单线程+非阻塞+长连接实现了一个可并发处理客户端连接的服务器。他的原理可以用以下的图来描述：\n\n![P4p4aJ](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/P4p4aJ.png)\n\n**解释：**\n\n1. HTTP服务器是我们使用 单进程+单线程+非阻塞+长连接实现 的`web`服务器。\n\n2. 在实现的时候，我们创建了一个存放已接受`Socket`连接的列表，该列表是在应用程序的内存空间中的。如图中深蓝色部分\n\n3. 当有3个客户端接入的时候，列表中一共存在3个对应的`socket`句柄，分别对应三个小黄框。\n\n4. 灰色小框代表服务器接收请求的`socket`。\n\n5. 我们在进行无限循环的时候，首先是检查是否有新的客户端接入，相当于检查灰色小框是否有数据到达。然后轮询3个小黄框对应`socket`是否有数据到达。轮询的效率是很低的。\n\n6. 服务器在使用`accept`和`recv`时，实际上是委托操作系统帮他检查是否有数据到达，由于这个列表的`socket`都处于用户内存空间，所以需要将其复制到内核空间。操作系统检查完毕后，如果有数据就返回数据给应用程序，如果没有数据就以异常的方式通知应用程序。而且不光这样，操作系统可能还同时在运行其他的应用程序，这样效率会非常低。\n\n**我们再来看epoll的图：**\n\n![5TcU6B](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/5TcU6B.png)\n\n**解释：**\n\n1.我们可以看到，在结构上，最大的区别在于，存放`socket`的列表不处于应用程序内部。在`epoll`中，这个存放`socket`的列表处于一个**特殊的内存空间，这个内存空间是应用程序与内核共享的空间**。也就是说，当应用程序委托操作系统检查是否有数据到达时，无需将复制数据给内核空间，操作系统可以直接进行检查。\n\n2.操作系统检查到某个`socket`有数据到达，使用**事件通知**的形式，直接告诉应用程序，而不是以轮询的方式。打个比方，一个厨师挨个问50个人饿了没，如果饿了就给他东西吃，这是轮询。而50个人中，谁饿了谁举手，厨师就给吃的，这叫事件通知。很明显，事件通知的效率会特别高。\n\n```python\nfrom socket import *\nimport select\nfrom web_server import handle_request\n\n\ndef main():\n    # 创建套接字\n    server_socket = socket(AF_INET, SOCK_STREAM)\n\n    # 设置可以重复使用绑定的信息\n    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\n\n    # 绑定本机信息\n    server_socket.bind((\"\", 8080))\n\n    # 主动监听\n    server_socket.listen(128)\n    # 将accept设置为非阻塞\n    server_socket.setblocking(False)\n    # 创建epoll对象\n    epoll = select.epoll()\n\n    # 注册事件到epoll中\n    # epoll.register(fd[, eventmask])\n    # 注意，如果fd已经注册过，则会发生异常\n    # 将创建的套接字添加到epoll的事件监听中\n\n    # 注册tcp套接字\n    epoll.register(server_socket.fileno(), select.EPOLLIN)\n\n    '''因为epoll返回的触发事件对应的是套接字文件描述符，所以需要在字典中加入对应关系'''\n\n    # 定义一个字典，用于存放fd和套接字的对应关系，因为操作系统在事件通知的时候，使用的是fd，而不是套接字，我们需要使用fd来找到对应\n    # 的套接字，从而可以调用accept和recv\n    fd_to_socket = {}\n    fd_to_addr = {}\n\n    # 循环接收客户端连接\n    while True:\n        # 使用一个列表来接受操作系统的事件通知，poll()是阻塞的，当有数据到达时，poll才会解开阻塞\n        epoll_list = epoll.poll()\n\n        for fd, event in epoll_list:\n            # 首先判断事件通知中的fd是否对应监听套接字（监听套接字调用accept）\n            if fd == server_socket.fileno():\n\n                conn, addr = server_socket.accept()\n                # 监听到一个新的客户端连接，将conn也注册到epoll中\n                epoll.register(conn.fileno(), select.EPOLLIN)\n\n                print('有新的客户端到来%s' % str(addr))\n\n                # 将 conn 和 addr 信息分别保存起来\n                fd_to_socket[conn.fileno()] = conn\n                fd_to_addr[conn.fileno()] = addr\n\n            else:  # 如果不是监听套接字，那么都是客户端对应的套接字\n                # 接收数据\n                recvData = fd_to_socket[fd].recv(1024).decode('utf8')\n\n                if recvData:\n                    handle_request(fd_to_socket[fd], recvData)\n\n                # 如果没有数据，则表示客户端断开连接\n                else:\n                    # 从 epoll 中移除该 连接 fd\n                    epoll.unregister(fd)\n\n                    #  关闭fd对应的socket\n                    fd_to_socket[fd].close()\n\n                    print(\"%s---offline---\" % str(fd_to_addr[fd]))\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n","slug":"网络通信-多种方式实现并发 Web Server","published":1,"updated":"2021-01-25T02:59:13.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuge00h3jjlnb53w6kxw","content":"<p>下面我们使用 <code>Python</code> 来实现并发的 <code>Web Server</code>，其中采用了多进程、多线程、协程、单进程单线程非阻塞、<code>select</code>、<code>epoll</code>的方式。</p>\n<h2 id=\"一、使用子进程来实现并发-Web-Server\"><a href=\"#一、使用子进程来实现并发-Web-Server\" class=\"headerlink\" title=\"一、使用子进程来实现并发 Web Server\"></a>一、使用子进程来实现并发 Web Server</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> multiprocessing<br><br><span class=\"hljs-comment\">#  注意： 不同的实现方式，但是对请求的处理方式相同，只是主函数中对客户端请求的接收方式不同 </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># 接收请求</span><br>        recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>        <span class=\"hljs-keyword\">if</span> recv_msg == <span class=\"hljs-string\">&quot;&quot;</span>:<br>            print(<span class=\"hljs-string\">&quot;recv null&quot;</span>)<br>            new_socket.close()<br>            <span class=\"hljs-keyword\">return</span><br><br>        <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>        recv_lines = recv_msg.splitlines()<br>        print(recv_lines)<br>        <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>        ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br>        <span class=\"hljs-keyword\">if</span> ret:<br>            <span class=\"hljs-comment\"># 获取URI字符串</span><br>            file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>            <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>            <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>                file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>        <span class=\"hljs-keyword\">try</span>:<br>            <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>            fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>        <span class=\"hljs-keyword\">except</span>:<br>            <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>            response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>            response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>            response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>            new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>        <span class=\"hljs-keyword\">else</span>:<br>            html_content = fp.read()<br>            fp.close()<br>            response_body = html_content<br><br>            <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>            response_header = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>            response_header += <span class=\"hljs-string\">&quot;Content-Length:%d\\r\\n&quot;</span> % <span class=\"hljs-built_in\">len</span>(response_body)<br>            response_header += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>            response = response_header.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>) + response_body<br><br>            <span class=\"hljs-comment\"># 返回响应数据</span><br>            new_socket.send(response)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    <span class=\"hljs-comment\"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个子进程来处理客户端的请求</span><br>        sub_p = multiprocessing.Process(target=handle_request, args=(new_socket,))<br>        sub_p.start()<br>        <span class=\"hljs-comment\"># 这里要关闭父进程中的new_socket，因为创建子进程会复制一份new_socket给子进程</span><br>        new_socket.close()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure>\n<p>我们使用进程来实现并发的 Web Server，也就是将 <code>accept</code> 到 <code>new_socket</code> 传递给子进程去处理，处理函数还是 <code>handle_request</code>。</p>\n<p>但是这里注意，子进程会从父进程中将所有的变量<strong>进行拷贝</strong>，也就是说父进程和子进程中<strong>各有一份 new_socket</strong>，而在 <code>Linux</code> 下，<code>socket</code> 对应的也是一个文件描述符，而这两个 <code>new_socket</code> 实际上是指向同一个 <code>fd</code> 的。所以我们将 <code>new_socket</code> 交给子进程后，父进程就可以马上关闭自己的 <code>new_socket</code> 了，当子进程服务完毕后，关闭子进程中的 <code>new_socket</code>，这样<strong>对应的 <code>FD</code> 才会正真关闭，此时才会触发四次挥手。所以父进程代码中的 <code>new_socket.close()</code> 非常重要。</strong></p>\n<h2 id=\"二、使用线程来实现并发-Web-Server\"><a href=\"#二、使用线程来实现并发-Web-Server\" class=\"headerlink\" title=\"二、使用线程来实现并发 Web Server\"></a>二、使用线程来实现并发 Web Server</h2><p>在第一节中，我们使用进程来实现并发，但是进程对资源消耗很大，一般不推荐使用。所以这里我们使用线程来实现并发，很简单，我们将 <code>multiprocessing.Process</code> 替换为 <code>threaing.Thread</code> 就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个线程来处理客户端的请求</span><br>        t = threading.Thread(target=handle_request, args=(new_socket,))<br>        t.start()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure>\n<p>我们发现，除了将子进程的创建过程替换成了线程的创建过程，后面的 <code>new_socket.close(</code>) 也被删除了，这是因为线程是公用进程资源的，<code>new_socket</code> 不会被复制，所以 <code>socket</code> 对应的 FD，只有一个 new_socket 指向他。</p>\n<p>如果此时我们仍然在这里关闭 <code>new_socket</code>，那么在线程再使用 <code>new_socket</code> 就会报错。如下信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">Exception <span class=\"hljs-keyword\">in</span> thread Thread-<span class=\"hljs-number\">1</span>:<br>Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class=\"hljs-number\">926</span>, <span class=\"hljs-keyword\">in</span> _bootstrap_inner<br>    self.run()<br>  File <span class=\"hljs-string\">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class=\"hljs-number\">870</span>, <span class=\"hljs-keyword\">in</span> run<br>    self._target(*self._args, **self._kwargs)<br>  File <span class=\"hljs-string\">&quot;/Users/mac/PycharmProjects/Month2/web_server.py&quot;</span>, line <span class=\"hljs-number\">9</span>, <span class=\"hljs-keyword\">in</span> handle_request<br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>OSError: [Errno <span class=\"hljs-number\">9</span>] Bad file descriptor<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"三、使用协程来实现并发-Web-Server\"><a href=\"#三、使用协程来实现并发-Web-Server\" class=\"headerlink\" title=\"三、使用协程来实现并发 Web Server\"></a>三、使用协程来实现并发 Web Server</h2><p>使用进程和线程来实现的并发 Web Server，当并发访问量很大时，资源消耗都很高。所以这里使用协程来实现并发服务器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> gevent<br><span class=\"hljs-keyword\">from</span> gevent <span class=\"hljs-keyword\">import</span> monkey<br>monkey.patch_all()<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    <span class=\"hljs-comment\"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个协程来处理客户端的请求</span><br>        gevent.spawn(handle_request, new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure>\n<p>使用 gevent 来实现协程，并发处理请求。</p>\n<h2 id=\"四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\"><a href=\"#四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\" class=\"headerlink\" title=\"四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\"></a>四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器</h2><p>前面我们使用的多进程和多线程来处理并发，是因为 <code>socket.recv()</code> 是阻塞的，每次 <code>accept</code> 一个连接，就需要交给一个新的进程或线程去处理，从而不影响下一个 <code>socket</code> 连接。</p>\n<p>但是我们可以通过单进程单线程和非阻塞的方式来完成并发 <code>socket</code> 的处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket, recv_msg</span>):</span><br>    <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>    recv_lines = recv_msg.splitlines()<br><br>    <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>    ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br><br>    <span class=\"hljs-keyword\">if</span> ret:<br>        <span class=\"hljs-comment\"># 获取URI字符串</span><br>        file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>        <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>            file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">try</span>:<br>        <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>        fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span>:<br>        <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>        html_content = fp.read()<br>        fp.close()<br><br>        response_body = html_content<br><br>        <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>        response_header = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>        response_header += <span class=\"hljs-string\">&quot;Content-Length:%d\\r\\n&quot;</span> % <span class=\"hljs-built_in\">len</span>(response_body)<br>        response_header += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>        response = response_header.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>) + response_body<br><br>        <span class=\"hljs-comment\"># 返回响应数据</span><br>        new_socket.send(response)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br><br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞,这里设置一次，后面不管调多少次accept都是非阻塞的</span><br>    tcp_server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 定义一个列表，将每次连接的socket加入该列表</span><br>    client_socket_list = <span class=\"hljs-built_in\">list</span>()<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br>        <span class=\"hljs-keyword\">try</span>:<br>            new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> ret:<br>            <span class=\"hljs-comment\"># 当没有客户端链接的时候，抛出异常</span><br>            <span class=\"hljs-keyword\">pass</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            print(<span class=\"hljs-string\">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(client_addr))<br>            <span class=\"hljs-comment\"># 当有客户端链接的时候</span><br>            <span class=\"hljs-comment\"># 将new_socket.recv()设置为非阻塞的</span><br>            new_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>            <span class=\"hljs-comment\"># 将new_socket加入列表</span><br>            client_socket_list.append(new_socket)<br><br>            <span class=\"hljs-comment\"># 将 conn 和 addr 信息分别保存起来</span><br>            fd_to_addr[new_socket.fileno()] = client_addr<br><br>        <span class=\"hljs-comment\"># 遍历socket列表，检查每一个socket是否有数据到达，或者客户端是否断开</span><br>        <span class=\"hljs-keyword\">for</span> client_socket <span class=\"hljs-keyword\">in</span> client_socket_list:<br>            <span class=\"hljs-keyword\">try</span>:<br>                recv_content = client_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>            <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> ret:<br>                <span class=\"hljs-comment\"># 异常，表示该客户端没有发数据过来</span><br>                <span class=\"hljs-keyword\">pass</span><br>            <span class=\"hljs-keyword\">else</span>:<br>                <span class=\"hljs-comment\"># 正常，表示客户端发了数据，或者客户端断开连接（断开连接会导致recv正常返回）</span><br>                <span class=\"hljs-keyword\">if</span> recv_content:<br>                    <span class=\"hljs-comment\"># 有数据，调用请求处理代码</span><br>                    handle_request(client_socket, recv_content)<br>                <span class=\"hljs-keyword\">else</span>:<br>                    print(<span class=\"hljs-string\">&quot;客户端&#123;&#125;OffLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(fd_to_addr[client_socket.fileno()]))<br>                    <span class=\"hljs-comment\"># recv正常返回，且数据为空，表示客户端断开了链接</span><br>                    <span class=\"hljs-comment\"># 将该socket踢出列表</span><br>                    client_socket_list.remove(client_socket)<br>                    <span class=\"hljs-comment\"># 服务器也关闭连接</span><br>                    client_socket.close()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></div></td></tr></table></figure>\n<p>上面代码主要是说明在单进程单线程情况下，如何将 <code>accept</code> 和 <code>recv</code> 分开，并且都用非阻塞的方式来处理，这样每次查看是否有客户端链接进来的时候，都会去检查所有已链接的 <code>socket</code> 是否有数据发送过来。</p>\n<p>在这种方式中，我们使用单进程单线程模拟了并发处理 <code>socket</code> 连接的功能，但这些 <code>socket</code> 连接的处理不是并行的。当一个 <code>socket</code> 处理数据时间比较长时，也会<strong>造成整个程序的等待。</strong></p>\n<p>特别注意的是，在请求处理函数 <code>handle_request</code> 中，我们将请求内容作为参数一并传递进去。然后在返回 <code>200 OK</code> 的时候，在响应头中添加了 <code>Content-Length</code> 字段，这个字段用于告诉客户端，此次发送的响应体有多大。当客户端收完指定大小的数据，就认为这次服务器发送的数据已经发送完毕。他就可以继续发送下一个新的请求。</p>\n<p>在 <code>handle_request</code> 中可以看到，<code>new_socket.close()</code> 已经被删除，也就是说服务器不会自动关闭连接，而直到客户端断开连接之前，服务器都保持<code>长连接</code>。断开连接由客户端来发起。</p>\n<h2 id=\"五、使用select实现高并发HTTP服务器\"><a href=\"#五、使用select实现高并发HTTP服务器\" class=\"headerlink\" title=\"五、使用select实现高并发HTTP服务器\"></a>五、使用select实现高并发HTTP服务器</h2><p>在编写了单进程非阻塞式服务器之后，还有另外种写服务器的方法，便是利用<code>select</code>。<br><code>select</code>是对底层操作系统的一个访问操作，因而效率较高，比单进程非阻塞中的<code>for</code>循环遍历效率要高，可以利用<code>select</code>进行选择，选择出来可以读取信息的套接字、可以发送信息的套接字、以及产生的异常（分别是三个返回值）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">readable, writable, exceptionable = select([], [], [])<br></code></pre></div></td></tr></table></figure>\n<p>以上即为<code>select</code>的使用方法，程序执行到该语句后进行阻塞等待，接收到新的套接字之后便解阻塞。<br>程序思路便是利用<code>select</code>检测、选择出能读取的套接字（包括服务器套接字、客户端套接字），将接收到消息的客户端套接字存入列表（列表中本来只有服务器套接字），之后进行<code>for</code>循环遍历，读取套接字中的信息或者进行与客户端的连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> socket <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> select <span class=\"hljs-keyword\">import</span> select<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建套接字</span><br>    server_socket = socket(AF_INET, SOCK_STREAM)<br><br>    <span class=\"hljs-comment\"># 设置可以重复使用绑定的信息</span><br>    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-comment\"># 绑定本机信息</span><br>    server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8080</span>))<br><br>    <span class=\"hljs-comment\"># 主动监听</span><br>    server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞</span><br>    server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br><br>    inputs = [server_socket]<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        readable, writable, exceptionable = select(inputs, [], [])<br>        <span class=\"hljs-keyword\">for</span> sock <span class=\"hljs-keyword\">in</span> readable:<br><br>            <span class=\"hljs-keyword\">if</span> sock == server_socket:<br>                clientSocket, clientAddr = server_socket.accept()<br>                <span class=\"hljs-comment\"># 当有客户端链接的时候</span><br>                <span class=\"hljs-comment\"># 将new_socket.recv()设置为非阻塞的</span><br>                clientSocket.setblocking(<span class=\"hljs-literal\">False</span>)<br><br>                inputs.append(clientSocket)<br>                <span class=\"hljs-comment\"># 将 addr 信息保存起来</span><br>                fd_to_addr[clientSocket.fileno()] = clientAddr<br>                print(<span class=\"hljs-string\">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(clientAddr))<br><br>            <span class=\"hljs-keyword\">else</span>:<br>                message = sock.recv(<span class=\"hljs-number\">1024</span>)<br>                <span class=\"hljs-keyword\">if</span> message:<br>                    <span class=\"hljs-comment\"># print(&#x27;message from [%s] is %s&#x27; % (str(sock), message.decode(&#x27;utf-8&#x27;)))</span><br>                    handle_request(sock, message.decode(<span class=\"hljs-string\">&quot;utf8&quot;</span>))<br>                <span class=\"hljs-keyword\">else</span>:<br>                    print(<span class=\"hljs-string\">&#x27;[%s] OffLine。。。。&#x27;</span> % (fd_to_addr[sock.fileno()]))<br>                    inputs.remove(sock)<br>                    sock.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></div></td></tr></table></figure>\n<p><code>select</code>版服务器有一定的缺点，便是只能处理1024个并发客户端，因而其效率还是有一定的局限性。</p>\n<h2 id=\"六、使用epoll实现高并发HTTP服务器\"><a href=\"#六、使用epoll实现高并发HTTP服务器\" class=\"headerlink\" title=\"六、使用epoll实现高并发HTTP服务器\"></a>六、使用epoll实现高并发HTTP服务器</h2><p>我们在最后使用单进程+单线程+非阻塞+长连接实现了一个可并发处理客户端连接的服务器。他的原理可以用以下的图来描述：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/P4p4aJ.png\" alt=\"P4p4aJ\"></p>\n<p><strong>解释：</strong></p>\n<ol>\n<li><p>HTTP服务器是我们使用 单进程+单线程+非阻塞+长连接实现 的<code>web</code>服务器。</p>\n</li>\n<li><p>在实现的时候，我们创建了一个存放已接受<code>Socket</code>连接的列表，该列表是在应用程序的内存空间中的。如图中深蓝色部分</p>\n</li>\n<li><p>当有3个客户端接入的时候，列表中一共存在3个对应的<code>socket</code>句柄，分别对应三个小黄框。</p>\n</li>\n<li><p>灰色小框代表服务器接收请求的<code>socket</code>。</p>\n</li>\n<li><p>我们在进行无限循环的时候，首先是检查是否有新的客户端接入，相当于检查灰色小框是否有数据到达。然后轮询3个小黄框对应<code>socket</code>是否有数据到达。轮询的效率是很低的。</p>\n</li>\n<li><p>服务器在使用<code>accept</code>和<code>recv</code>时，实际上是委托操作系统帮他检查是否有数据到达，由于这个列表的<code>socket</code>都处于用户内存空间，所以需要将其复制到内核空间。操作系统检查完毕后，如果有数据就返回数据给应用程序，如果没有数据就以异常的方式通知应用程序。而且不光这样，操作系统可能还同时在运行其他的应用程序，这样效率会非常低。</p>\n</li>\n</ol>\n<p><strong>我们再来看epoll的图：</strong></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/5TcU6B.png\" alt=\"5TcU6B\"></p>\n<p><strong>解释：</strong></p>\n<p>1.我们可以看到，在结构上，最大的区别在于，存放<code>socket</code>的列表不处于应用程序内部。在<code>epoll</code>中，这个存放<code>socket</code>的列表处于一个<strong>特殊的内存空间，这个内存空间是应用程序与内核共享的空间</strong>。也就是说，当应用程序委托操作系统检查是否有数据到达时，无需将复制数据给内核空间，操作系统可以直接进行检查。</p>\n<p>2.操作系统检查到某个<code>socket</code>有数据到达，使用<strong>事件通知</strong>的形式，直接告诉应用程序，而不是以轮询的方式。打个比方，一个厨师挨个问50个人饿了没，如果饿了就给他东西吃，这是轮询。而50个人中，谁饿了谁举手，厨师就给吃的，这叫事件通知。很明显，事件通知的效率会特别高。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> socket <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">import</span> select<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建套接字</span><br>    server_socket = socket(AF_INET, SOCK_STREAM)<br><br>    <span class=\"hljs-comment\"># 设置可以重复使用绑定的信息</span><br>    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-comment\"># 绑定本机信息</span><br>    server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8080</span>))<br><br>    <span class=\"hljs-comment\"># 主动监听</span><br>    server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞</span><br>    server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 创建epoll对象</span><br>    epoll = select.epoll()<br><br>    <span class=\"hljs-comment\"># 注册事件到epoll中</span><br>    <span class=\"hljs-comment\"># epoll.register(fd[, eventmask])</span><br>    <span class=\"hljs-comment\"># 注意，如果fd已经注册过，则会发生异常</span><br>    <span class=\"hljs-comment\"># 将创建的套接字添加到epoll的事件监听中</span><br><br>    <span class=\"hljs-comment\"># 注册tcp套接字</span><br>    epoll.register(server_socket.fileno(), select.EPOLLIN)<br><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;因为epoll返回的触发事件对应的是套接字文件描述符，所以需要在字典中加入对应关系&#x27;&#x27;&#x27;</span><br><br>    <span class=\"hljs-comment\"># 定义一个字典，用于存放fd和套接字的对应关系，因为操作系统在事件通知的时候，使用的是fd，而不是套接字，我们需要使用fd来找到对应</span><br>    <span class=\"hljs-comment\"># 的套接字，从而可以调用accept和recv</span><br>    fd_to_socket = &#123;&#125;<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># 使用一个列表来接受操作系统的事件通知，poll()是阻塞的，当有数据到达时，poll才会解开阻塞</span><br>        epoll_list = epoll.poll()<br><br>        <span class=\"hljs-keyword\">for</span> fd, event <span class=\"hljs-keyword\">in</span> epoll_list:<br>            <span class=\"hljs-comment\"># 首先判断事件通知中的fd是否对应监听套接字（监听套接字调用accept）</span><br>            <span class=\"hljs-keyword\">if</span> fd == server_socket.fileno():<br><br>                conn, addr = server_socket.accept()<br>                <span class=\"hljs-comment\"># 监听到一个新的客户端连接，将conn也注册到epoll中</span><br>                epoll.register(conn.fileno(), select.EPOLLIN)<br><br>                print(<span class=\"hljs-string\">&#x27;有新的客户端到来%s&#x27;</span> % <span class=\"hljs-built_in\">str</span>(addr))<br><br>                <span class=\"hljs-comment\"># 将 conn 和 addr 信息分别保存起来</span><br>                fd_to_socket[conn.fileno()] = conn<br>                fd_to_addr[conn.fileno()] = addr<br><br>            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># 如果不是监听套接字，那么都是客户端对应的套接字</span><br>                <span class=\"hljs-comment\"># 接收数据</span><br>                recvData = fd_to_socket[fd].recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>)<br><br>                <span class=\"hljs-keyword\">if</span> recvData:<br>                    handle_request(fd_to_socket[fd], recvData)<br><br>                <span class=\"hljs-comment\"># 如果没有数据，则表示客户端断开连接</span><br>                <span class=\"hljs-keyword\">else</span>:<br>                    <span class=\"hljs-comment\"># 从 epoll 中移除该 连接 fd</span><br>                    epoll.unregister(fd)<br><br>                    <span class=\"hljs-comment\">#  关闭fd对应的socket</span><br>                    fd_to_socket[fd].close()<br><br>                    print(<span class=\"hljs-string\">&quot;%s---offline---&quot;</span> % <span class=\"hljs-built_in\">str</span>(fd_to_addr[fd]))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>下面我们使用 <code>Python</code> 来实现并发的 <code>Web Server</code>，其中采用了多进程、多线程、协程、单进程单线程非阻塞、<code>select</code>、<code>epoll</code>的方式。</p>\n<h2 id=\"一、使用子进程来实现并发-Web-Server\"><a href=\"#一、使用子进程来实现并发-Web-Server\" class=\"headerlink\" title=\"一、使用子进程来实现并发 Web Server\"></a>一、使用子进程来实现并发 Web Server</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> multiprocessing<br><br><span class=\"hljs-comment\">#  注意： 不同的实现方式，但是对请求的处理方式相同，只是主函数中对客户端请求的接收方式不同 </span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket</span>):</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># 接收请求</span><br>        recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>        <span class=\"hljs-keyword\">if</span> recv_msg == <span class=\"hljs-string\">&quot;&quot;</span>:<br>            print(<span class=\"hljs-string\">&quot;recv null&quot;</span>)<br>            new_socket.close()<br>            <span class=\"hljs-keyword\">return</span><br><br>        <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>        recv_lines = recv_msg.splitlines()<br>        print(recv_lines)<br>        <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>        ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br>        <span class=\"hljs-keyword\">if</span> ret:<br>            <span class=\"hljs-comment\"># 获取URI字符串</span><br>            file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>            <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>            <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>                file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>        <span class=\"hljs-keyword\">try</span>:<br>            <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>            fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>        <span class=\"hljs-keyword\">except</span>:<br>            <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>            response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>            response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>            response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>            new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>        <span class=\"hljs-keyword\">else</span>:<br>            html_content = fp.read()<br>            fp.close()<br>            response_body = html_content<br><br>            <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>            response_header = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>            response_header += <span class=\"hljs-string\">&quot;Content-Length:%d\\r\\n&quot;</span> % <span class=\"hljs-built_in\">len</span>(response_body)<br>            response_header += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>            response = response_header.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>) + response_body<br><br>            <span class=\"hljs-comment\"># 返回响应数据</span><br>            new_socket.send(response)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    <span class=\"hljs-comment\"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个子进程来处理客户端的请求</span><br>        sub_p = multiprocessing.Process(target=handle_request, args=(new_socket,))<br>        sub_p.start()<br>        <span class=\"hljs-comment\"># 这里要关闭父进程中的new_socket，因为创建子进程会复制一份new_socket给子进程</span><br>        new_socket.close()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>\n<p>我们使用进程来实现并发的 Web Server，也就是将 <code>accept</code> 到 <code>new_socket</code> 传递给子进程去处理，处理函数还是 <code>handle_request</code>。</p>\n<p>但是这里注意，子进程会从父进程中将所有的变量<strong>进行拷贝</strong>，也就是说父进程和子进程中<strong>各有一份 new_socket</strong>，而在 <code>Linux</code> 下，<code>socket</code> 对应的也是一个文件描述符，而这两个 <code>new_socket</code> 实际上是指向同一个 <code>fd</code> 的。所以我们将 <code>new_socket</code> 交给子进程后，父进程就可以马上关闭自己的 <code>new_socket</code> 了，当子进程服务完毕后，关闭子进程中的 <code>new_socket</code>，这样<strong>对应的 <code>FD</code> 才会正真关闭，此时才会触发四次挥手。所以父进程代码中的 <code>new_socket.close()</code> 非常重要。</strong></p>\n<h2 id=\"二、使用线程来实现并发-Web-Server\"><a href=\"#二、使用线程来实现并发-Web-Server\" class=\"headerlink\" title=\"二、使用线程来实现并发 Web Server\"></a>二、使用线程来实现并发 Web Server</h2><p>在第一节中，我们使用进程来实现并发，但是进程对资源消耗很大，一般不推荐使用。所以这里我们使用线程来实现并发，很简单，我们将 <code>multiprocessing.Process</code> 替换为 <code>threaing.Thread</code> 就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个线程来处理客户端的请求</span><br>        t = threading.Thread(target=handle_request, args=(new_socket,))<br>        t.start()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>\n<p>我们发现，除了将子进程的创建过程替换成了线程的创建过程，后面的 <code>new_socket.close(</code>) 也被删除了，这是因为线程是公用进程资源的，<code>new_socket</code> 不会被复制，所以 <code>socket</code> 对应的 FD，只有一个 new_socket 指向他。</p>\n<p>如果此时我们仍然在这里关闭 <code>new_socket</code>，那么在线程再使用 <code>new_socket</code> 就会报错。如下信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Exception <span class=\"hljs-keyword\">in</span> thread Thread-<span class=\"hljs-number\">1</span>:<br>Traceback (most recent call last):<br>  File <span class=\"hljs-string\">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class=\"hljs-number\">926</span>, <span class=\"hljs-keyword\">in</span> _bootstrap_inner<br>    self.run()<br>  File <span class=\"hljs-string\">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class=\"hljs-number\">870</span>, <span class=\"hljs-keyword\">in</span> run<br>    self._target(*self._args, **self._kwargs)<br>  File <span class=\"hljs-string\">&quot;/Users/mac/PycharmProjects/Month2/web_server.py&quot;</span>, line <span class=\"hljs-number\">9</span>, <span class=\"hljs-keyword\">in</span> handle_request<br>    recv_msg = new_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>OSError: [Errno <span class=\"hljs-number\">9</span>] Bad file descriptor<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、使用协程来实现并发-Web-Server\"><a href=\"#三、使用协程来实现并发-Web-Server\" class=\"headerlink\" title=\"三、使用协程来实现并发 Web Server\"></a>三、使用协程来实现并发 Web Server</h2><p>使用进程和线程来实现的并发 Web Server，当并发访问量很大时，资源消耗都很高。所以这里使用协程来实现并发服务器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> gevent<br><span class=\"hljs-keyword\">from</span> gevent <span class=\"hljs-keyword\">import</span> monkey<br>monkey.patch_all()<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># # 设置重用地址</span><br>    <span class=\"hljs-comment\"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-comment\"># 启动一个协程来处理客户端的请求</span><br>        gevent.spawn(handle_request, new_socket)<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>\n<p>使用 gevent 来实现协程，并发处理请求。</p>\n<h2 id=\"四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\"><a href=\"#四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\" class=\"headerlink\" title=\"四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器\"></a>四、使用单进程单线程非阻塞模拟实现高并发HTTP服务器</h2><p>前面我们使用的多进程和多线程来处理并发，是因为 <code>socket.recv()</code> 是阻塞的，每次 <code>accept</code> 一个连接，就需要交给一个新的进程或线程去处理，从而不影响下一个 <code>socket</code> 连接。</p>\n<p>但是我们可以通过单进程单线程和非阻塞的方式来完成并发 <code>socket</code> 的处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> re<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle_request</span>(<span class=\"hljs-params\">new_socket, recv_msg</span>):</span><br>    <span class=\"hljs-comment\"># 从请求中解析出URI</span><br>    recv_lines = recv_msg.splitlines()<br><br>    <span class=\"hljs-comment\"># 使用正则表达式提取出URI</span><br>    ret = re.match(<span class=\"hljs-string\">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class=\"hljs-number\">0</span>])<br><br>    <span class=\"hljs-keyword\">if</span> ret:<br>        <span class=\"hljs-comment\"># 获取URI字符串</span><br>        file_name = ret.group(<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-comment\"># 如果URI是/，则默认返回index.html的内容</span><br>        <span class=\"hljs-keyword\">if</span> file_name == <span class=\"hljs-string\">&quot;/&quot;</span>:<br>            file_name = <span class=\"hljs-string\">&quot;/index.html&quot;</span><br><br>    <span class=\"hljs-keyword\">try</span>:<br>        <span class=\"hljs-comment\"># 根据请求的URI，读取相应的文件</span><br>        fp = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;.&quot;</span> + file_name, <span class=\"hljs-string\">&quot;rb&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span>:<br>        <span class=\"hljs-comment\"># 找不到文件，响应404</span><br>        response_msg = <span class=\"hljs-string\">&quot;HTTP/1.1 404 NOT FOUND\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br>        response_msg += <span class=\"hljs-string\">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span><br>        new_socket.send(response_msg.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>))<br>    <span class=\"hljs-keyword\">else</span>:<br>        html_content = fp.read()<br>        fp.close()<br><br>        response_body = html_content<br><br>        <span class=\"hljs-comment\"># 响应正确 200 OK</span><br>        response_header = <span class=\"hljs-string\">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span><br>        response_header += <span class=\"hljs-string\">&quot;Content-Length:%d\\r\\n&quot;</span> % <span class=\"hljs-built_in\">len</span>(response_body)<br>        response_header += <span class=\"hljs-string\">&quot;\\r\\n&quot;</span><br><br>        response = response_header.encode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>) + response_body<br><br>        <span class=\"hljs-comment\"># 返回响应数据</span><br>        new_socket.send(response)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建TCP SOCKET实例</span><br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class=\"hljs-comment\"># 设置重用地址</span><br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-comment\"># 绑定地址（默认本机IP）和端口</span><br>    tcp_server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">7890</span>))<br>    <span class=\"hljs-comment\"># 监听</span><br>    tcp_server_socket.listen(<span class=\"hljs-number\">128</span>)<br><br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞,这里设置一次，后面不管调多少次accept都是非阻塞的</span><br>    tcp_server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 定义一个列表，将每次连接的socket加入该列表</span><br>    client_socket_list = <span class=\"hljs-built_in\">list</span>()<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br>        <span class=\"hljs-keyword\">try</span>:<br>            new_socket, client_addr = tcp_server_socket.accept()<br>        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> ret:<br>            <span class=\"hljs-comment\"># 当没有客户端链接的时候，抛出异常</span><br>            <span class=\"hljs-keyword\">pass</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            print(<span class=\"hljs-string\">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(client_addr))<br>            <span class=\"hljs-comment\"># 当有客户端链接的时候</span><br>            <span class=\"hljs-comment\"># 将new_socket.recv()设置为非阻塞的</span><br>            new_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>            <span class=\"hljs-comment\"># 将new_socket加入列表</span><br>            client_socket_list.append(new_socket)<br><br>            <span class=\"hljs-comment\"># 将 conn 和 addr 信息分别保存起来</span><br>            fd_to_addr[new_socket.fileno()] = client_addr<br><br>        <span class=\"hljs-comment\"># 遍历socket列表，检查每一个socket是否有数据到达，或者客户端是否断开</span><br>        <span class=\"hljs-keyword\">for</span> client_socket <span class=\"hljs-keyword\">in</span> client_socket_list:<br>            <span class=\"hljs-keyword\">try</span>:<br>                recv_content = client_socket.recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)<br>            <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> ret:<br>                <span class=\"hljs-comment\"># 异常，表示该客户端没有发数据过来</span><br>                <span class=\"hljs-keyword\">pass</span><br>            <span class=\"hljs-keyword\">else</span>:<br>                <span class=\"hljs-comment\"># 正常，表示客户端发了数据，或者客户端断开连接（断开连接会导致recv正常返回）</span><br>                <span class=\"hljs-keyword\">if</span> recv_content:<br>                    <span class=\"hljs-comment\"># 有数据，调用请求处理代码</span><br>                    handle_request(client_socket, recv_content)<br>                <span class=\"hljs-keyword\">else</span>:<br>                    print(<span class=\"hljs-string\">&quot;客户端&#123;&#125;OffLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(fd_to_addr[client_socket.fileno()]))<br>                    <span class=\"hljs-comment\"># recv正常返回，且数据为空，表示客户端断开了链接</span><br>                    <span class=\"hljs-comment\"># 将该socket踢出列表</span><br>                    client_socket_list.remove(client_socket)<br>                    <span class=\"hljs-comment\"># 服务器也关闭连接</span><br>                    client_socket.close()<br><br>    <span class=\"hljs-comment\"># 关闭整个SOCKET</span><br>    tcp_server_socket.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>\n<p>上面代码主要是说明在单进程单线程情况下，如何将 <code>accept</code> 和 <code>recv</code> 分开，并且都用非阻塞的方式来处理，这样每次查看是否有客户端链接进来的时候，都会去检查所有已链接的 <code>socket</code> 是否有数据发送过来。</p>\n<p>在这种方式中，我们使用单进程单线程模拟了并发处理 <code>socket</code> 连接的功能，但这些 <code>socket</code> 连接的处理不是并行的。当一个 <code>socket</code> 处理数据时间比较长时，也会<strong>造成整个程序的等待。</strong></p>\n<p>特别注意的是，在请求处理函数 <code>handle_request</code> 中，我们将请求内容作为参数一并传递进去。然后在返回 <code>200 OK</code> 的时候，在响应头中添加了 <code>Content-Length</code> 字段，这个字段用于告诉客户端，此次发送的响应体有多大。当客户端收完指定大小的数据，就认为这次服务器发送的数据已经发送完毕。他就可以继续发送下一个新的请求。</p>\n<p>在 <code>handle_request</code> 中可以看到，<code>new_socket.close()</code> 已经被删除，也就是说服务器不会自动关闭连接，而直到客户端断开连接之前，服务器都保持<code>长连接</code>。断开连接由客户端来发起。</p>\n<h2 id=\"五、使用select实现高并发HTTP服务器\"><a href=\"#五、使用select实现高并发HTTP服务器\" class=\"headerlink\" title=\"五、使用select实现高并发HTTP服务器\"></a>五、使用select实现高并发HTTP服务器</h2><p>在编写了单进程非阻塞式服务器之后，还有另外种写服务器的方法，便是利用<code>select</code>。<br><code>select</code>是对底层操作系统的一个访问操作，因而效率较高，比单进程非阻塞中的<code>for</code>循环遍历效率要高，可以利用<code>select</code>进行选择，选择出来可以读取信息的套接字、可以发送信息的套接字、以及产生的异常（分别是三个返回值）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">readable, writable, exceptionable = select([], [], [])<br></code></pre></td></tr></table></figure>\n<p>以上即为<code>select</code>的使用方法，程序执行到该语句后进行阻塞等待，接收到新的套接字之后便解阻塞。<br>程序思路便是利用<code>select</code>检测、选择出能读取的套接字（包括服务器套接字、客户端套接字），将接收到消息的客户端套接字存入列表（列表中本来只有服务器套接字），之后进行<code>for</code>循环遍历，读取套接字中的信息或者进行与客户端的连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> socket <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> select <span class=\"hljs-keyword\">import</span> select<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建套接字</span><br>    server_socket = socket(AF_INET, SOCK_STREAM)<br><br>    <span class=\"hljs-comment\"># 设置可以重复使用绑定的信息</span><br>    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-comment\"># 绑定本机信息</span><br>    server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8080</span>))<br><br>    <span class=\"hljs-comment\"># 主动监听</span><br>    server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞</span><br>    server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br><br>    inputs = [server_socket]<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        readable, writable, exceptionable = select(inputs, [], [])<br>        <span class=\"hljs-keyword\">for</span> sock <span class=\"hljs-keyword\">in</span> readable:<br><br>            <span class=\"hljs-keyword\">if</span> sock == server_socket:<br>                clientSocket, clientAddr = server_socket.accept()<br>                <span class=\"hljs-comment\"># 当有客户端链接的时候</span><br>                <span class=\"hljs-comment\"># 将new_socket.recv()设置为非阻塞的</span><br>                clientSocket.setblocking(<span class=\"hljs-literal\">False</span>)<br><br>                inputs.append(clientSocket)<br>                <span class=\"hljs-comment\"># 将 addr 信息保存起来</span><br>                fd_to_addr[clientSocket.fileno()] = clientAddr<br>                print(<span class=\"hljs-string\">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class=\"hljs-built_in\">format</span>(clientAddr))<br><br>            <span class=\"hljs-keyword\">else</span>:<br>                message = sock.recv(<span class=\"hljs-number\">1024</span>)<br>                <span class=\"hljs-keyword\">if</span> message:<br>                    <span class=\"hljs-comment\"># print(&#x27;message from [%s] is %s&#x27; % (str(sock), message.decode(&#x27;utf-8&#x27;)))</span><br>                    handle_request(sock, message.decode(<span class=\"hljs-string\">&quot;utf8&quot;</span>))<br>                <span class=\"hljs-keyword\">else</span>:<br>                    print(<span class=\"hljs-string\">&#x27;[%s] OffLine。。。。&#x27;</span> % (fd_to_addr[sock.fileno()]))<br>                    inputs.remove(sock)<br>                    sock.close()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>\n<p><code>select</code>版服务器有一定的缺点，便是只能处理1024个并发客户端，因而其效率还是有一定的局限性。</p>\n<h2 id=\"六、使用epoll实现高并发HTTP服务器\"><a href=\"#六、使用epoll实现高并发HTTP服务器\" class=\"headerlink\" title=\"六、使用epoll实现高并发HTTP服务器\"></a>六、使用epoll实现高并发HTTP服务器</h2><p>我们在最后使用单进程+单线程+非阻塞+长连接实现了一个可并发处理客户端连接的服务器。他的原理可以用以下的图来描述：</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/P4p4aJ.png\" alt=\"P4p4aJ\"></p>\n<p><strong>解释：</strong></p>\n<ol>\n<li><p>HTTP服务器是我们使用 单进程+单线程+非阻塞+长连接实现 的<code>web</code>服务器。</p>\n</li>\n<li><p>在实现的时候，我们创建了一个存放已接受<code>Socket</code>连接的列表，该列表是在应用程序的内存空间中的。如图中深蓝色部分</p>\n</li>\n<li><p>当有3个客户端接入的时候，列表中一共存在3个对应的<code>socket</code>句柄，分别对应三个小黄框。</p>\n</li>\n<li><p>灰色小框代表服务器接收请求的<code>socket</code>。</p>\n</li>\n<li><p>我们在进行无限循环的时候，首先是检查是否有新的客户端接入，相当于检查灰色小框是否有数据到达。然后轮询3个小黄框对应<code>socket</code>是否有数据到达。轮询的效率是很低的。</p>\n</li>\n<li><p>服务器在使用<code>accept</code>和<code>recv</code>时，实际上是委托操作系统帮他检查是否有数据到达，由于这个列表的<code>socket</code>都处于用户内存空间，所以需要将其复制到内核空间。操作系统检查完毕后，如果有数据就返回数据给应用程序，如果没有数据就以异常的方式通知应用程序。而且不光这样，操作系统可能还同时在运行其他的应用程序，这样效率会非常低。</p>\n</li>\n</ol>\n<p><strong>我们再来看epoll的图：</strong></p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/5TcU6B.png\" alt=\"5TcU6B\"></p>\n<p><strong>解释：</strong></p>\n<p>1.我们可以看到，在结构上，最大的区别在于，存放<code>socket</code>的列表不处于应用程序内部。在<code>epoll</code>中，这个存放<code>socket</code>的列表处于一个<strong>特殊的内存空间，这个内存空间是应用程序与内核共享的空间</strong>。也就是说，当应用程序委托操作系统检查是否有数据到达时，无需将复制数据给内核空间，操作系统可以直接进行检查。</p>\n<p>2.操作系统检查到某个<code>socket</code>有数据到达，使用<strong>事件通知</strong>的形式，直接告诉应用程序，而不是以轮询的方式。打个比方，一个厨师挨个问50个人饿了没，如果饿了就给他东西吃，这是轮询。而50个人中，谁饿了谁举手，厨师就给吃的，这叫事件通知。很明显，事件通知的效率会特别高。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> socket <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">import</span> select<br><span class=\"hljs-keyword\">from</span> web_server <span class=\"hljs-keyword\">import</span> handle_request<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    <span class=\"hljs-comment\"># 创建套接字</span><br>    server_socket = socket(AF_INET, SOCK_STREAM)<br><br>    <span class=\"hljs-comment\"># 设置可以重复使用绑定的信息</span><br>    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-comment\"># 绑定本机信息</span><br>    server_socket.bind((<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">8080</span>))<br><br>    <span class=\"hljs-comment\"># 主动监听</span><br>    server_socket.listen(<span class=\"hljs-number\">128</span>)<br>    <span class=\"hljs-comment\"># 将accept设置为非阻塞</span><br>    server_socket.setblocking(<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 创建epoll对象</span><br>    epoll = select.epoll()<br><br>    <span class=\"hljs-comment\"># 注册事件到epoll中</span><br>    <span class=\"hljs-comment\"># epoll.register(fd[, eventmask])</span><br>    <span class=\"hljs-comment\"># 注意，如果fd已经注册过，则会发生异常</span><br>    <span class=\"hljs-comment\"># 将创建的套接字添加到epoll的事件监听中</span><br><br>    <span class=\"hljs-comment\"># 注册tcp套接字</span><br>    epoll.register(server_socket.fileno(), select.EPOLLIN)<br><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;因为epoll返回的触发事件对应的是套接字文件描述符，所以需要在字典中加入对应关系&#x27;&#x27;&#x27;</span><br><br>    <span class=\"hljs-comment\"># 定义一个字典，用于存放fd和套接字的对应关系，因为操作系统在事件通知的时候，使用的是fd，而不是套接字，我们需要使用fd来找到对应</span><br>    <span class=\"hljs-comment\"># 的套接字，从而可以调用accept和recv</span><br>    fd_to_socket = &#123;&#125;<br>    fd_to_addr = &#123;&#125;<br><br>    <span class=\"hljs-comment\"># 循环接收客户端连接</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># 使用一个列表来接受操作系统的事件通知，poll()是阻塞的，当有数据到达时，poll才会解开阻塞</span><br>        epoll_list = epoll.poll()<br><br>        <span class=\"hljs-keyword\">for</span> fd, event <span class=\"hljs-keyword\">in</span> epoll_list:<br>            <span class=\"hljs-comment\"># 首先判断事件通知中的fd是否对应监听套接字（监听套接字调用accept）</span><br>            <span class=\"hljs-keyword\">if</span> fd == server_socket.fileno():<br><br>                conn, addr = server_socket.accept()<br>                <span class=\"hljs-comment\"># 监听到一个新的客户端连接，将conn也注册到epoll中</span><br>                epoll.register(conn.fileno(), select.EPOLLIN)<br><br>                print(<span class=\"hljs-string\">&#x27;有新的客户端到来%s&#x27;</span> % <span class=\"hljs-built_in\">str</span>(addr))<br><br>                <span class=\"hljs-comment\"># 将 conn 和 addr 信息分别保存起来</span><br>                fd_to_socket[conn.fileno()] = conn<br>                fd_to_addr[conn.fileno()] = addr<br><br>            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># 如果不是监听套接字，那么都是客户端对应的套接字</span><br>                <span class=\"hljs-comment\"># 接收数据</span><br>                recvData = fd_to_socket[fd].recv(<span class=\"hljs-number\">1024</span>).decode(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>)<br><br>                <span class=\"hljs-keyword\">if</span> recvData:<br>                    handle_request(fd_to_socket[fd], recvData)<br><br>                <span class=\"hljs-comment\"># 如果没有数据，则表示客户端断开连接</span><br>                <span class=\"hljs-keyword\">else</span>:<br>                    <span class=\"hljs-comment\"># 从 epoll 中移除该 连接 fd</span><br>                    epoll.unregister(fd)<br><br>                    <span class=\"hljs-comment\">#  关闭fd对应的socket</span><br>                    fd_to_socket[fd].close()<br><br>                    print(<span class=\"hljs-string\">&quot;%s---offline---&quot;</span> % <span class=\"hljs-built_in\">str</span>(fd_to_addr[fd]))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>\n"},{"title":"Django基础(五)-ORM模型类","date":"2020-05-24T12:38:26.000Z","_content":"\n## 一、ORM介绍\n\n### 1. 什么是 ORM\n\n- **`ORM`** 全拼`Object-Relation Mapping`\n\n- 中文意为 **`对象-关系映射`**\n\n- 在`MVC`/`MVT`设计模式中的`Model`模块中都包括`ORM`\n\n### 2.ORM 优势\n\n（1）只需要面向对象编程, 不需要面向数据库编写代码.\n\n- 对数据库的操作都转化成对类属性和方法的操作.\n- 不用编写各种数据库的 sql 语句.\n\n（2）实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.\n\n- 不在关注用的是`mysql`、`oracle`... 等.\n- 通过简单的配置就可以轻松更换数据库, 而不需要修改代码.\n\n### 3.ORM 劣势\n\n- 相比较直接使用 SQL 语句操作数据库, 有性能损失.\n- 根据对象的操作转换成 SQL 语句, 根据查询的结果转化成对象, 在映射过程中有性能损失.\n\n### 4.ORM 和数据库关系：\n\n在 Django 中 model 是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.\n\n基本情况：\n\n每个模型都是一个 Python 类，它是 django.db.models.Model 的子类。\n\n模型的每个属性都代表一个数据库字段。\n\n综上所述，Django 为您提供了一个自动生成的数据库访问 API。\n\n![ORM示意图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ORM示意图%20.png)\n\n## 二、Django配置使用mysql数据库\n\n### `settings.py`配置`DATABASES`\n\n默认:`{}`(空字典)\n\n一个字典，包含Django使用的所有数据库的设置。它是一个嵌套的字典，其内容将数据库别名映射到包含单个数据库选项的字典。\n\n数据库设置必须配置一个默认数据库;还可以指定任意数量的其他数据库。\n\n最简单的设置文件是针对使用SQLite的单数据库设置的。这可以配置使用以下:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n\n当连接到其他数据库后端(如`MySQL`、`Oracle`或`PostgreSQL`)时，需要额外的连接参数。有关如何指定其他数据库类型，请参阅下面的引擎设置。这个例子是为`MySQL`:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_test',\n        'USER': 'root',\n        'PASSWORD': 'mysqlroot',\n        'HOST': '127.0.0.1',\n        'PORT': 3306\n    }\n}\n```\n\n### `MySQL`连接工具\n\n1. 需要安装`pymysql`模块\n\n    ```bash\n    pip install pymysql\n    ```\n\n2. 在项目的`__init__.py`初始化文件,添加如下信息:\n\n   ```python\n   import pymysql\n   pymysql.install_as_MySQLdb()\n   ```\n\n3. 在django最新版本中，提示\"Django需要mysqlclient 1.3.13或更高版本\"。要么在报错时，将抛出版本异常的代码注释掉,仍然使用`pymysql`；要么直接使用`mysqlclient`,不建议直接`pip`命令安装，可以使用`conda`创建虚拟环境，使用`conda`安装`mysqlclient`。\n\n## 三、字段属性和选项\n\n### 1.模型类属性命名限制\n\n- 不能是python的保留关键字。\n\n- **不允许使用连续的下划线，这是由django的查询方式决定的。**\n\n- 定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：\n\n  ```python\n    属性名=models.字段类型(选项)\n  ```\n\n### 2.字段类型\n\n#### 整数\n\n##### `AutoField`\n\n根据可用id自动递增的一个32位(`4 byte`)的整数(`Integer`)字段,它的适用范围为:`1`到`2147483647`之间。\n\n你通常不需要直接使用它;如果不进行其他指定，主键字段将自动添加到模型中。\n\n默认情况下， Django 会给每一个模型添加下面的字段：\n\n```python\nid = models.AutoField(primary_key=True)\n```\n\n这是一个自增的主键。\n\n如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 `primary_key=True`。如果 Django 看到你显式地设置了 `Field.primary_key`，将不会自动在表（模型）中添加 `id` 列。\n\n每个模型都需要拥有一个设置了 `primary_key=True` 的字段（无论是显式的设置还是 Django 自动设置）\n\n##### `BigAutoField`\n\n一个64位(`8 byte`)的整数，类似于`AutoField`，除了它的适用范围为:`1`到`9223372036854775807`之间。\n\n##### `IntegerField`\n\n一个32位(`4 byte`)的整数。在Django支持的所有数据库中，`-2147483648`到`2147483647`之间的值都是安全的。\n\n#####  `BigIntegerField`\n\n一个64位(`8 byte`)的整数，类似于`IntegerField`，除了它保证适合从`-9223372036854775808`到`9223372036854775807`的数字。\n\n##### `SmallIntegerField`\n\n一个8位(`2 byte`)的整数，类似于`IntegerField`,在Django支持的所有数据库中，`-32768`到`32767`之间的值都是安全的。\n\n##### `PositiveIntegerField`\n\n一个32位(`4 byte`)的整数，类似于`IntegerField`，但必须是正数或零(0)。在Django支持的所有数据库中，`0`到`2147483647`之间的值都是安全的。由于向后兼容的原因，接受值`0`。\n\n##### `PositiveSmallIntegerField`\n\n一个8位(`2 byte`)的整数，类似于`PositiveIntegerField`，在Django支持的所有数据库中，`0`到`32767`之间的值都是安全的\n\n#### 小数\n\n##### `FloatField`\n\n在Python中由 `float` 实例表示的浮点数。\n\n##### `DecimalField`\n\n一种固定精度的十进制数，在Python中用` Decimal`实例表示。它使用`DecimalValidator`验证输入。\n\n有两个必要的参数:\n\n###### `DecimalField.max_digits`\n\n数字中允许的最大位数。注意，这个数字必须大于或等于`decimal_places`。\n\n###### `DecimalField.decimal_places`\n\n要与该数字一起存储的小数位数。\n\n例如，要存储分辨率为两位小数的999以内的数字，需要使用\n\n```python\nmodels.DecimalField(..., max_digits=5, decimal_places=2)\n```\n\n\n> `FloatField` **vs.** `DecimalField`\n>\n> `FloatField`类有时会与`DecimalField`类混在一起。虽然它们都表示实数，但它们表示的是不同的数。`FloatField`在内部使用Python的`float`类型，而`DecimalField`使用Python的`Decimal`类型。有关两者之间差异的信息，请参阅Python的 [`decimal`](https://docs.python.org/3/library/decimal.html#module-decimal) 模块文档。\n\n#### 布尔\n\n##### `BooleanField`\n\n一个`true`/`false`字段。\n\n当`Field.default`未定义时，`BooleanField`的默认值为`None`\n\n> Django 2.1:\n> 在旧版本中，这个字段不允许`null=True`，因此必须使用`NullBooleanField`。现在不建议使用后者，因为在Django的未来版本中可能会弃用它。\n>\n> 在较早的版本中，该字段隐式地具有`blank=True`。您可以通过设置blank=True来恢复前面的行为。\n\n##### `NullBooleanField`\n\n类似`BooleanField`的`null=True`。使用`BooleanField`这个字段而不是`NullBooleanField`这个字段，因为在Django的未来版本中`NullBooleanField`可能会被弃用\n\n#### 字符\n\n##### `CharField`\n\n字符串字段，用于小型到大型字符串。`CharField`有一个额外的必要参数:\n\n###### `CharField.max_length`\n\n字段的最大长度(以字符为单位)。`max_length`在数据库标准和Django的验证中使用`MaxLengthValidator`执行。\n\n对于大量文本，使用`TextField`。\n\n##### `TextField`\n\n一个大的文本字段。这个字段的默认表单小部件是一个`Textarea`。\n\n如果指定max_length属性，它将反映在自动生成表单字段的`Textarea`小部件中。然而，它并没有在模型或数据库级别强制执行。\n\n##### `URLField`\n\n一个有关`URL`的`CharField`，由`URLValidator`验证该值是否为有效的`URL`地址。\n\n与所有`CharField`子类一样，`URLField`接受可选的`max_length`参数。如果不指定`max_length`，则使用默认值200。\n\n##### `EmailField`\n\n一个有关`Email`的`CharField`,由`EmailValidator`验证该值是否为有效的电子邮件地址。\n\n与所有`CharField`子类一样，`EmailField`接受可选的`max_length`参数。如果不指定`max_length`，则使用默认值254。\n\n##### `UUIDField`\n\n用于存储通用唯一标识符的字段。使用Python的`UUID`类。当在`PostgreSQL`上使用时，它以`uuid`数据类型存储，否则以`char(32)`存储。\n\n全局惟一标识符是`primary_key`的`AutoField`的一个很好的替代方案。数据库不会为你生成**UUID**，建议使用默认:\n\n```python\nimport uuid\nfrom django.db import models\n\nclass MyUUIDModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # other fields\n```\n\n> 注意，一个回调函数(省略括号)被传递到`default`，而不是**UUID**的一个实例。\n\n#### 文件\n\n##### `FileField`\n\n一个文件上传字段。有两个可选参数:\n\n###### `FileField.upload_to`\n\n这个属性提供了一种设置上传目录和文件名的方法，可以通过两种方式进行设置。在这两种情况下，值都被传递到`Storage.save()`方法。\n\n如果您指定一个字符串值，它可能包含`strftime()`格式，它将被文件上传的日期/时间所取代(这样上传的文件就不会填满给定的目录)。例如:\n\n```python\nclass MyModel(models.Model):\n    # 文件将被上传至 MEDIA_ROOT/uploads\n    upload = models.FileField(upload_to='uploads/')\n    # or...\n    # 文件将被上传至 MEDIA_ROOT/uploads/2015/01/30\n    upload = models.FileField(upload_to='uploads/%Y/%m/%d/')\n```\n\n如果使用默认的`FileSystemStorage`，字符串值将追加到`MEDIA_ROOT`路径，以形成本地文件系统上的位置，上传的文件将存储在此位置。如果使用不同的存储，请检查该存储的文档，以了解它如何处理`upload_to`。\n\n`upload_to`也可以是一个可调用的函数。这个函数将被调用以获得上传路径，包括文件名。这个可调用函数必须接受两个参数，并返回一个`unix`风格的路径(带有斜杠)，以便传递给存储系统。这两个参数是:\n\n| 参数       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| `instance` | 定义FileField的模型的一个实例。更具体地说，这是附加当前文件的特定实例。<br/>在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的`AutoField`，那么它的主键字段可能还没有值。 |\n| `filename` | 原给定给该文件的文件名。在确定最终目的地路径时，可能会考虑这一点，也可能不考虑这一点。 |\n\n例子:\n\n```python\ndef user_directory_path(instance, filename):\n    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>\n    return 'user_{0}/{1}'.format(instance.user.id, filename)\n\nclass MyModel(models.Model):\n    upload = models.FileField(upload_to=user_directory_path)\n```\n\n###### `FileField.storage`\n\n一个存储对象，它处理文件的存储和检索。有关如何提供此对象的详细信息，请参见 [管理文件](https://docs.djangoproject.com/en/2.2/topics/files/) 。\n\n在模型中使用`FileField`或`ImageField`需要几个步骤:\n\n1. 在设置文件中，需要将`MEDIA_ROOT`定义为一个目录的完整路径，您希望`Django`在这个目录中存储上传的文件。(为了提高性能，这些文件不存储在数据库中。)将`MEDIA_URL`定义为该目录的基本公共`URL`。确保此目录可由`Web`服务器的用户帐户写入。\n2. 将`FileField`或`ImageField`添加到模型中，定义`upload_to`选项，以指定`MEDIA_ROOT`的子目录，用于上传文件。\n3. 所有将存储在数据库中的内容都是文件的路径(相对于`MEDIA_ROOT`)。您很可能希望使用Django提供的便利url属性。例如，如果 `ImageField`被称为 `mug_shot` ，可以获取模板中图像的绝对路径 `{{ object.mug_shot.url }}` \n\n例如，假设`MEDIA_ROOT`设置为`'/home/media'`， `upload_to`设置为`'photos/%Y/%m/%d'`。`upload_to`的`'%Y/%m/%d'`部分是`strftime()`格式;`'%Y'`是四位数的年份，`'%m'是`两位数的月份，`'%d'`是两位数的日期。如果你在2007年1月15日上传了一个文件，它将被保存在`/home/media/photos/2007/01/15`目录下。\n\n如果要检索上传文件的磁盘上文件名或文件大小，可以分别使用[`名称`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.name) 和[`大小`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.size) 属性;有关可用属性和方法的更多信息，请参见 [`文件`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File)类引用和 [管理文件](https://docs.djangoproject.com/en/2.2/topics/files/)主题指南。\n\n> 文件作为模型保存在数据库中的一部分保存，因此在保存模型之前，不能依赖于磁盘上使用的实际文件名。\n\n请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传一个**CGI**或**PHP**脚本，并通过访问该脚本在您的站点上的**URL**来执行该脚本。不要允许这样的操作。\n\n还要注意，即使是上传的**HTML**文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于**XSS**或请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传到**CGI**或**PHP**脚本，并通过访问该脚本在您的站点上的URL来执行该脚本。不要允许这样的操作。\n\n还要注意，即使是上传的HTML文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于**XSS**或**CSRF**攻击的安全威胁。攻击的安全威胁。\n\n> `FileField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `ImageField`\n\n从`FileField`继承所有属性和方法，但也验证上传的对象是有效的图像。\n\n除了可用于`FileField`的特殊属性之外，`ImageField`还具有高度和宽度属性。\n\n为了方便查询这些属性，`ImageField`有两个额外的可选参数:\n\n###### `ImageField.height_field`\n\n一个模型字段的名称，该字段将在每次保存模型实例时自动填充映像的高度。\n\n###### `ImageField.width_field`\n\n一个模型字段的名称，该字段将在每次保存模型实例时自动填充图像的宽度。\n\n需要 [Pillow](https://pillow.readthedocs.io/en/latest/) 库。\n\n> `ImageField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `FilePathField`\n\n一个`CharField`，它的选择仅限于文件系统上某个目录中的文件名。有三个特殊的参数，其中第一个是必需的:\n\n###### `FilePathField.path`\n\n必需的。这个`FilePathField`应该从中获得其选择的目录的绝对文件系统路径。例如:`\"/ home /images\"`。\n\n###### `FilePathField.match`\n\n可选的。一个正则表达式，作为一个字符串，`FilePathField`将使用它来过滤文件名。注意，正则表达式将应用于基本文件名，而不是完整路径。示例:**`foo.*\\.txt$`**。它将匹配一个名为`foo23.txt`的文件，但不匹配`bar.txt`或`foo23.png`。\n\n###### `FilePathField.recursive`\n\n可选的。非真即假。默认是假的。指定是否应该包括`path`的所有子目录\n\n###### `FilePathField.allow_files`\n\n可选的。非真即假。默认是正确的。指定是否应包括位于指定位置的文件。这个或`allow_folders`必须为真。\n\n###### `FilePathField.allow_folders`\n\n可选的。非真即假。默认是假的。指定是否应包括指定位置的文件夹。这个或allow_files必须为真。\n\n当然，这些参数可以一起使用。\n\n一个潜在的问题是，match应用于基本文件名，而不是完整路径。所以,这个例子:\n\n```python\nFilePathField(path=\"/home/images\", match=\"foo.*\", recursive=True)\n```\n\n将匹配`/home/images/foo.png`，但不匹配`/home/images/foo/bar.png`，因为匹配应用于基本文件名(`foo.png`和`bar.png`)。\n\n> `FilePathField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `BinaryField`\n\n存储原始二进制数据的字段。可以为它分配字节、字节数组或内存视图。\n\n默认情况下，`BinaryField`将`editable`设置为`False`，在这种情况下，它不能包含在ModelForm中。\n\n`BinaryField`有一个额外的可选参数:\n\n###### `BinaryField.max_length`\n\n字段的最大长度(以字符为单位)。最大长度在Django的验证中使用MaxLengthValidator实现。\n\n> Django 2.1:\n> 旧版本不允许将editable设置为True。\n\n#### 时间\n\n##### `DateField`\n\n日期，在Python中用`datetime.date`实例表示。有一些额外的，可选的参数:\n\n###### `DateField.auto_now`\n\n每次保存对象时自动将字段值设置为当前时间，用于“最后修改”时间戳。\n\n该字段只在调用`Model.save()`时自动更新。当以其他方式(如`QuerySet.update()`)更新其他字段时，该字段不会更新，不过可以在这样的更新中为该字段指定自定义值。\n\n###### `DateField.auto_now_add`\n\n在第一次创建对象时自动将字段设置为当前时间。用于创建时间戳。\n\n即使在创建对象时为这个字段设置了值，它也会被忽略。如果您希望能够修改该字段，请将`auto_now_add=True`设置为以下内容:\n\n- For `DateField`: `default=date.today` - from `datetime.date.today()`\n- For `DateTimeField`: `default=timezone.now` - from `django.utils.timezone.now()`\n\n`auto_now_add`、`auto_now`和`default`选项是互斥的。这些选项的任何组合都将导致错误。\n\n##### `DateTimeField`\n\n日期和时间，在Python中用`datetime.datetime`实例表示。接受与`DateField`相同的额外参数。\n\n##### `TimeField`\n\n时间，在Python中用`datetime.time`实例表示。接受与`DateField`相同的额外参数。\n\n### 3.字段选项\n\n> 以下参数对所有字段类型均有效，且是可选的。\n\n#### `null`\n\n如果设置为 `True`， 当该字段为空时，Django 会将数据库中该字段设置为 `NULL`，默认为 `False`。\n\n避免在基于字符串的字段（例如 `CharField`和 `TextField`）上使用 `null`。如果字符串字段的 `null=True`，那意味着对于“无数据”有两个可能的值：`NULL` 和空字符串。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 `NULL`。 一个例外是当 `CharField`同时具有 `unique=True` 和 `blank=True` 时。 在这种情况下，需要设置 `null=True`，以便在使用空白值保存多个对象时避免唯一的约束违规。\n\n对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置`blank=True`，因为`null`参数只影响数据库存储(参见`blank`)。\n\n#### `blank`\n\n如果设置为 `True` ，该字段允许为空。默认为 `False` 。\n\n注意，这与`null`不同。`null`纯粹是与数据库相关的，而`blank`则是与验证相关的。如果字段为`blank=True`，表单验证将允许输入空值。\n\n> blank和null的用法区别\n\n- null纯粹是与数据库相关的，而blank则是与表单验证相关的。\n- 避免在基于字符串的字段（例如 `CharField`和 `TextField`）上使用 `null`。如果字符串字段的 `null=True`，那意味着对于“无数据”有两个可能的值：`NULL` 和`空字符串`。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 `NULL`。 一个例外是当 `CharField`同时具有 `unique=True` 和 `blank=True` 时。 在这种情况下，需要设置 `null=True`，以便在使用空白值保存多个对象时避免唯一的约束违规。\n- 当存在两个参数时，总共会有四种设定组合\n\n  - `blank=True`、`null=True`。统一的表明了该字段（列）是可以为空的。\n  - `blank=False`、`null=False`。统一的表面了该字段（列）不可以为空。\n  - `blank=True`、`null=False`。这个设定的意义在于，某些字段并不希望用户在表单中创建，而是通过在`save`方法中根据其他字段生成。\n  - `blank=False`、`null=True`。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。\n\n> 只设定了`blank=True`而没有设定`null=True`的时候，通过`Admin`站点表单创建模型实例并且表单在该字段上没有值时数据库不报错呢？？？\n\n- 当没有设定`null=True`时，该列在数据库中就存在`NOT NULL`的约束，如果插入数据时这一列没有值，按理说数据库应该会报错才对\n- 出现这种情况的原因在于，`django`在处理某些在数据库中实际的存储值为字符串的`Field`时（如`CharField`, `TextField`, `ImageField`（图片文件的路径）），永远不会向数据库中填入空值。如果表单中某个`CharField`或者`TextField`字段为空，那么`django`会在数据库中填入`\"\"`，而不是`null`. \n\n#### `choices`\n\n一个序列，它由两个元素(例如[(A, B)， (A, B)…])的迭代组成，作为这个字段的选择。如果提供了选择，则通过模型验证强制执行，默认的表单小部件将是一个包含这些选择的选择框，而不是标准的文本字段。\n\n每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。例如:\n\n```python\nYEAR_IN_SCHOOL_CHOICES = [\n    ('FR', 'Freshman'),\n    ('SO', 'Sophomore'),\n    ('JR', 'Junior'),\n    ('SR', 'Senior'),\n]\n```\n\n通常，最好在模型类中定义选项，并为每个值定义一个适当命名的常量:\n\n```python\nfrom django.db import models\n\nclass Student(models.Model):\n    FRESHMAN = 'FR'\n    SOPHOMORE = 'SO'\n    JUNIOR = 'JR'\n    SENIOR = 'SR'\n    YEAR_IN_SCHOOL_CHOICES = [\n        (FRESHMAN, 'Freshman'),\n        (SOPHOMORE, 'Sophomore'),\n        (JUNIOR, 'Junior'),\n        (SENIOR, 'Senior'),\n    ]\n    year_in_school = models.CharField(\n        max_length=2,\n        choices=YEAR_IN_SCHOOL_CHOICES,\n        default=FRESHMAN,\n    )\n\n    def is_upperclass(self):\n        return self.year_in_school in (self.JUNIOR, self.SENIOR)\n```\n\n虽然您可以在模型类的外部定义一个选择列表，然后引用它，但是在模型类内部定义每个选择的选择和名称，可以将所有信息与使用它的类一起保存，并使选择易于引用(例如：**Student.SOPHOMORE** 可以在导入**Student**模型类的任何地方使用)。\n\n您还可以将可用的选项收集到指定的组中，这些组可用于组织目的:\n\n```python\nfrom django.db import models\n\n\nclass Media(models.Model):\n    MEDIA_CHOICES = [\n        ('Audio', (\n            ('vinyl', 'Vinyl'),\n            ('cd', 'CD'),\n        )\n         ),\n        ('Video', (\n            ('vhs', 'VHS Tape'),\n            ('dvd', 'DVD'),\n        )\n         ),\n        ('unknown', 'Unknown'),\n    ]\n\n    media = models.CharField(\n        max_length=10,\n        choices=MEDIA_CHOICES,\n        default='cd'\n    )\n```\n\n每个元组中的第一个元素是应用于组的名称。第二个元素是二元组的迭代，每个二元组包含一个值和一个可读的选项名。分组选项可以与单个列表中的未分组选项组合在一起(例如本例中的未知选项)。\n\n注意，选择可以是任何序列对象--不一定是列表或元组。这允许您动态地构造选择。但是，如果您发现自己的选择是动态的，那么最好使用一个带有 `ForeignKey`的数据库表。但是静态数据不会有太大的变化。\n\n对于每个设置了选项的字段，对象都有一个`get_FOO_display()`方法，其中`FOO`是字段的名称。该方法返回字段的\"人易读\"值。\n\n例子:\n\n```python\nfrom django.db import models\n\nclass Person(models.Model):\n    SHIRT_SIZES = (\n        ('S', 'Small'),\n        ('M', 'Medium'),\n        ('L', 'Large'),\n    )\n    name = models.CharField(max_length=60)\n    shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)\n```\n\n```bash\n>>> p = Person(name=\"Fred Flintstone\", shirt_size=\"L\")\n>>> p.save()\n>>> p.shirt_size\n'L'\n>>> p.get_shirt_size_display()\n'Large'\n```\n\n#### `db_column`\n\n要用于此字段的数据库列的名称。如果没有给出，Django将使用字段的名称。\n\n#### `db_index`\n\n如果为真，将为此字段创建一个数据库索引。\n\n#### `default`\n\n该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。\n\n默认值不能是一个可变的对象(模型实例、列表、集合等)，因为对该对象的同一个实例的引用将被用作所有模型实例的默认值。反而，可以在回调函数中打包处理所需的默认值。例如，如果要为`JSONField`指定默认`dict`，可以使用一个函数:\n\n```python\ndef contact_default():\n    return {\"email\": \"to1@example.com\"}\n\ncontact_info = JSONField(\"ContactInfo\", default=contact_default)\n```\n\n**lambda**表达式不能用于像**default**这样的字段选项，因为它们不能被迁移序列化。\n\n对于像映射模型实例的`ForeignKey`这样的字段，默认值应该是它们引用的字段的值(`pk`，除非设置`to_field`)，而不是模型实例。\n\n当创建新的模型实例并且没有为字段提供值时，将使用默认值。当字段是主键时，当字段设置为`None`时也会使用默认值。\n\n#### `help_text`\n\n额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。\n\n注意，这个值不会在自动生成的表单中进行`html`转义的。如果您愿意，可以在`help_text`中包含**HTML**。例如:\n\n```python\nhelp_text=\"Please use the following format: <em>YYYY-MM-DD</em>.\"\n```\n\n或者，您可以使用纯文本和`django.utils.html.escape()`来转义任何**HTML**特殊字符。确保转义任何来自不可信用户的帮助文本，以避免跨站点脚本攻击。\n\n#### `primary_key`\n\n如果设置为 `True` ，将该字段设置为该模型的主键。\n\n如果您没有为模型中的任何字段指定`primary_key=True`, **Django**将自动添加一个`AutoField`来保存主键，所以您不需要在任何字段上设置`primary_key=True`，除非您想覆盖默认的主键行为。\n\n`primary_key=True`意味着`null=False`和`unique=True`。对象上只允许有一个主键。\n\n主键字段是只读的。如果更改现有对象上的主键值并保存它，则将在旧对象旁边创建一个新对象。\n\n#### `unique`\n\n如果设置为 `True`，这个字段必须在整个表中保持值唯一。\n\n这是在数据库级和通过模型验证实现的。如果试图在惟一字段中保存具有重复值的模型，则模型的`save()`方法会产生一个`django.db.IntegrityError`。\n\n这个选项对除了`ManyToManyField`和`OneToOneField`以外的所有字段类型都有效。\n\n注意，当`unique`为真时，不需要指定`db_index`，因为`unique`意味着创建索引。\n\n#### `verbose_name`\n\n字段的可读名称。如果没有给出详细的名称，Django将使用字段的属性名自动创建它，将下划线转换为空格。\n\n除了 `ForeignKey`， `ManyToManyField` 和 `OneToOneField`，任何字段类型都接收一个可选位置的参数 `verbose_name`，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。\n\n在该例中：备注名为 `\"person's first name\"`:\n\n```python\nfirst_name = models.CharField(\"person's first name\", max_length=30)\n```\n\n在该例中：备注名为 `\"first name\"`:\n\n```python\nfirst_name = models.CharField(max_length=30)\n```\n\n `ForeignKey`， `ManyToManyField` 和 `OneToOneField`接收的第一个参数为模型的类名，后面可以添加一个 `verbose_name`参数：\n\n```python\npoll = models.ForeignKey(\n    Poll,\n    on_delete=models.CASCADE,\n    verbose_name=\"the related poll\",\n)\nsites = models.ManyToManyField(Site, verbose_name=\"list of sites\")\nplace = models.OneToOneField(\n    Place,\n    on_delete=models.CASCADE,\n    verbose_name=\"related place\",\n)\n```\n\n惯例是不将`verbose_name` 的首字母大写，必要时 **Djanog** 会自动把首字母转换为大写。\n\n#### `validators`\n\n要为此字段运行的验证器列表。\n\n##### 编写验证器\n\n`validator`是一个可调用的函数，它接受一个值，如果它不满足某些条件，就会引发`ValidationError`。验证器对于在不同类型的字段之间重用验证逻辑非常有用。\n\n例如，这里有一个验证器，它只允许偶数:\n\n```python\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n\ndef validate_even(value):\n    if value % 2 != 0:\n        raise ValidationError(\n            _('%(value)s is not an even number'),\n            params={'value': value},\n        )\n```\n\n您可以通过字段的`validators`参数将其添加到模型字段:\n\n```python\nfrom django.db import models\n\nclass MyModel(models.Model):\n    even_field = models.IntegerField(validators=[validate_even])\n```\n\n因为值在运行验证器之前就转换成了Python，你甚至可以对表单使用相同的验证器:\n\n```python\nfrom django import forms\n\nclass MyForm(forms.Form):\n    even_field = forms.IntegerField(validators=[validate_even])\n```\n\n对于更复杂或可配置的验证器，您还可以使用带有`__call__()`方法的类。例如， `RegexValidator`这类验证器。如果在`validators` `model`字段选项中使用基于类的验证器,应该添加`deconstruct()`装饰器和 `__eq__()` 方法让它可以被迁移框架序列化。\n\n [`django.core.validators`](https://docs.djangoproject.com/zh-hans/2.2/ref/validators/#built-in-validators)模块包含一组可调用的验证器，用于模型和表单字段，可以在内部使用它们。\n\n### 4. `Meta` 选项\n\n使用内部 `Meta类` 来给模型赋予元数据，就像：\n\n```python\nfrom django.db import models\n\nclass Ox(models.Model):\n    horn_length = models.IntegerField()\n\n    class Meta:\n        ordering = [\"horn_length\"]\n        verbose_name_plural = \"oxen\"\n```\n\n#### `abstract`\n\n抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 **Meta** 类中填入 `abstract=True`。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。\n\n一个例子:\n\n```python\nfrom django.db import models\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n\nclass Student(CommonInfo):\n    home_group = models.CharField(max_length=5)\n```\n\n`Student` 模型拥有3个字段： `name`， `age` 和 `home_group`。 `CommonInfo` 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。\n\n从抽象基类继承来的字段可被其它字段或值重写，或用 `None` 删除。\n\n对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。\n\n#### `app_label`\n\n如果一个模型是在`INSTALLED_APPS`中注册的**APP**外部定义的，它必须声明它属于哪个应用程序:\n\n```python\napp_label = 'myapp'\n```\n\n#### `db_table`\n\n要用于模型的数据库表的名称:\n\n```python\ndb_table = 'music_album'\n```\n\n为了节省时间，Django自动从模型类和包含它的应用程序的名称派生数据库表的名称。模型的数据库表名是通过将模型的**\"app label\"**(您在`manage.py startapp`中使用的名称)与模型的类名连接在一起，并在它们之间加一个下划线来构造的。\n\n例如，如果您有一个应用**bookstore**(由 `manage.py startapp bookstore`创建)，定义为**Book**的模型类将有一个名为`bookstore_book`的数据库表。\n\n要覆盖数据库表名，请使用类元中的db_table参数。\n\n> 强烈建议在通过db_table覆盖表名时使用小写的表名，特别是在使用MySQL后端时。\n\n#### `ordering`\n\n对象的默认顺序，用于获取对象列表:\n\n```python\nordering = ['-order_date']\n```\n\n这是一个 包含由字符串和/或构成的查询表达式的元组或列表。每个字符串都是一个带有可选`\"-\"`前缀的字段名，表示按降序排列。没有前缀`\"-\"`的字段将按升序排列。使用字符串`\"?\"`随机排序。\n\n例如，要按`pub_date`字段升序排序，可以使用以下命令:\n\n```python\nordering = ['pub_date']\n```\n\n要按pub_date降序排列，请使用以下命令:\n\n```python\nordering = ['-pub_date']\n```\n\n按pub_date降序排列，然后按author升序排列，使用以下命令:\n\n```python\nordering = ['-pub_date', 'author']\n```\n\n您还可以使用查询表达式。要按作者升序排序并使空值排序持续，请使用以下命令:\n\n```python\nfrom django.db.models import F\n\nordering = [F('author').asc(nulls_last=True)]\n```\n\n#### `permissions`\n\n创建此对象时进入权限表的额外权限。为每个模型自动创建添加、更改、删除和视图权限。这个例子指定了一个额外的权限`can_deliver_pizzas`:\n\n```python\npermissions = [('can_deliver_pizzas', 'Can deliver pizzas')]\n```\n\n这是一个格式为**(permission_code,** **human_readable_permission_name)**的二元列表或元组。\n\n#### `indexes`\n\n要在模型上定义的索引列表:\n\n```python\nfrom django.db import models\n\nclass Customer(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['last_name', 'first_name']),\n            models.Index(fields=['first_name'], name='first_name_idx'),\n        ]\n```\n\n#### `verbose_name`\n\n模型对象的人类可读的单数名称:\n\n```python\nverbose_name = \"pizza\"\n```\n\n如果没有给出这个值，Django将使用类名的一个简化版本:`CamelCase`变成`camel case`。\n\n#### `verbose_name_plural`\n\n对象的复数名称:\n\n```python\nverbose_name_plural = \"stories\"\n```\n\n如果没有给出，Django将使用 `verbose_name`+ `\"s\"`\n\n### 5.关联关系\n\n显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：多对一，多对多，一对一。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n#### 1、多对一关联\n\n定义一个多对一的关联关系，使用 `django.db.models.ForeignKey` 类。就和其它 `Field`字段类型一样，只需要在你模型中添加一个值为该类的属性。\n\n`ForeignKey` 类需要添加一个位置参数，即你想要关联的模型类名。\n\n```python\n# 关键字ForeignKey\npublish = models.ForeignKey(to='Publish')  # to用来指代跟哪张表有关系 默认关联的就是表的主键字段\n# 外键字段名在创建时会自动加上_id后缀\n```\n\n##### 字段参数\n\n1. `to`:设置要关联的表\n\n2. `to_field`:设置要关联的表的字段(一般不设置，默认使用主键id关联)\n\n3. `related_name`:反向操作时，使用的字段名，用于代替原反向查询时的`'表名_set'`\n\n4. `related_query_name`:反向查询操作时，使用的连接前缀，用于替换表名\n\n5. `db_constraint`:是否在数据库中创建外键约束，默认为True。\n\n6. `on_delete`:当删除关联表中的数据时，当前表与其关联的行的行为。\n\n   1. `models.CASCADE`:删除关联数据，与之关联的数据也删联(`on_delete=models.CASCADE`)\n\n   2. 抛出异常(错误)\n\n      1. `models.DO_NOTHING`:删除关联数据，引发错误`IntegrityError`       \n      2. `models.PROTECT`\n         删除关联数据，引发错误`ProtectedError\n         `\n\n   3. `models.SET_NULL`:删除关联数据，与之关联的值设置为`null`（前提FK字段需要设置为可空）\n\n   4. `models.SET_DEFAULT`:删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）\n\n   5. `models.SET`:删除关联数据\n\n      1. 与之关联的值设置为指定值，设置：`models.SET(值)`\n      2. 与之关联的值设置为可执行对象的返回值，设置：`models.SET(可执行对象)`\n\n#### 2、OneToOneField(一对一)\n\n> 外键字段创建在任意一张表都可以，建议外键添加在查询频率较高的一方\n\n```python\n# 关键字OneToOneField\nauthor_detail = models.OneToOneField(to='Author_detail')  # 外键本质fk + unique\n```\n\n##### 字段参数\n\n1. `to` :设置要关联的表。\n\n2. `to_field`:设置要关联的字段。\n\n3. `on_delete`:同ForeignKey字段。\n\n#### 3、ManyToManyField(多对多)\n\n> 用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。\n\n```python\n# 关键字ManyToManyField\nauthor = models.ManyToManyField(to='Author')  \n# django orm会自动帮你创建第三张关系表，表名为两个关联的表名用_连接\n```\n\n##### 字段参数\n\n1. `to`:设置要关联的表\n\n2. `related_name`:同`ForeignKey`字段(反向操作时，使用的字段名，用于代替原反向查询时的`'表名_set'`)\n\n3. `related_query_name`:同`ForeignKey`字段(反向查询操作时，使用的连接前缀，用于替换表名)\n\n4. `symmetric`:仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为`True`。\n\n   ```python\n    class Person(models.Model):\n        name = models.CharField(max_length=16)\n        friends = models.ManyToManyField(\"self\")\n        # 此时，person对象就没有person_set属性。\n   \n    class Person(models.Model):\n        name = models.CharField(max_length=16)\n        friends = models.ManyToManyField(\"self\",symmetrical=False)\n        # 此时，person对象现在就可以使用person_set属性进行反向查询。\n   ```\n\n5. `through`:在使用`ManyToManyField`字段时，`Django`将自动生成一张表        来管理多对多的关联关系。但我们也可以手动创建第三张表来管理多对多关系，此时就需要通过`through`来指定第三张表的表名。\n\n6. `through_fields`:设置关联的字段。\n\n7. `db_table`:默认创建第三张表时，数据库中表的名称。\n\n##### 多对多的三种创建方式\n\n1. 自己建立第三张关系表，外键分别关联两个表\n\n   * 优点:可以扩充第三张关系标的字段\n\n   * 缺点:自己做连表查询\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n      class Author(models.Model):\n          name = models.CharField(max_length=12)\n     \n      # 1. 多对多第一种创建方式：自己创建第三张关系表\n      class Author2Book(models.Model):\n          id = models.AutoField(primary_key=True)\n          author_id = models.ForeignKey(to='Author')\n          book_id = models.ForeignKey(to='Book')\n          price = models.IntegerField()  # 可以自己扩充需要的字段\n     ```\n\n2. 通过ORM内置的ManyToManyField，自动创建第三张关系表\n\n   * 优点:提供了很多连表操作的快捷方法,`all()`, `add()`, `set()`, `clear()`, `remove()`\n\n   * 缺点:无法扩展第三张关系表\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n      class Author(models.Model):\n          name = models.CharField(max_length=12)\n          books = models.ManyToManyField(to='Book')  # 字段就这些，无法扩充其他字段\n     \n     ```\n\n3. 自己创建第三张关系表，通过ManyToManyField关联\n\n   * 优点：\n\n     * 既能够使用多对多查询的快捷方法all()(只能用all，不能使用add,set等)\n     * 还能够自己扩展第三张关系表的字段\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n     class Author(models.Model):\n          name = models.CharField(max_length=12)\n          # 告诉ManyToManyField通过(through)Author2Book这张表进行关联，不使用ORM自动创建的第三张表，而是使用我自己创建的表\n          # through_fields告诉ORM通过哪几个字段进行多对多关联\n          books = models.ManyToManyField(to='Book', through='Author2Book', through_fields=('author', 'book'))\n     \n      # 1. 多对多第三种创建方式：自己创建第三张关系表，此时外键不需要添加_id了，因为ORM会默认帮你在外键后面加_id\n      class Author2Book(models.Model):\n          id = models.AutoField(primary_key=True)\n          author = models.ForeignKey(to='Author')\n          book = models.ForeignKey(to='Book')\n          price = models.IntegerField(null=True)\n      \n          # author_id和book_id要联合唯一\n          class Meta:\n              unique_together = (('author', 'book'),)\n     ```\n\n    * 操作例子\n\n      ```python\n      # 多对多的第三张方式也支持all查询\n      author_obj = Author.objects.first()\n      # 第一个作者的所有书籍\n      ret = author_obj.books.all()\n       \n      # 给第一个作者添加一本书\n      # author_obj.books.add(4) # 报错\n      Author2Book.objects.create(author_id=1, book_id=4)\n      ```","source":"_posts/Django-5-ORM模型类.md","raw":"---\ntitle: Django基础(五)-ORM模型类\ndate: 2020-05-24 20:38:26\ncategories:\n  - 技术\n  - python\n  - Django\ntags:\n  - django\n  - ORM模型类\n---\n\n## 一、ORM介绍\n\n### 1. 什么是 ORM\n\n- **`ORM`** 全拼`Object-Relation Mapping`\n\n- 中文意为 **`对象-关系映射`**\n\n- 在`MVC`/`MVT`设计模式中的`Model`模块中都包括`ORM`\n\n### 2.ORM 优势\n\n（1）只需要面向对象编程, 不需要面向数据库编写代码.\n\n- 对数据库的操作都转化成对类属性和方法的操作.\n- 不用编写各种数据库的 sql 语句.\n\n（2）实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.\n\n- 不在关注用的是`mysql`、`oracle`... 等.\n- 通过简单的配置就可以轻松更换数据库, 而不需要修改代码.\n\n### 3.ORM 劣势\n\n- 相比较直接使用 SQL 语句操作数据库, 有性能损失.\n- 根据对象的操作转换成 SQL 语句, 根据查询的结果转化成对象, 在映射过程中有性能损失.\n\n### 4.ORM 和数据库关系：\n\n在 Django 中 model 是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.\n\n基本情况：\n\n每个模型都是一个 Python 类，它是 django.db.models.Model 的子类。\n\n模型的每个属性都代表一个数据库字段。\n\n综上所述，Django 为您提供了一个自动生成的数据库访问 API。\n\n![ORM示意图](https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ORM示意图%20.png)\n\n## 二、Django配置使用mysql数据库\n\n### `settings.py`配置`DATABASES`\n\n默认:`{}`(空字典)\n\n一个字典，包含Django使用的所有数据库的设置。它是一个嵌套的字典，其内容将数据库别名映射到包含单个数据库选项的字典。\n\n数据库设置必须配置一个默认数据库;还可以指定任意数量的其他数据库。\n\n最简单的设置文件是针对使用SQLite的单数据库设置的。这可以配置使用以下:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```\n\n当连接到其他数据库后端(如`MySQL`、`Oracle`或`PostgreSQL`)时，需要额外的连接参数。有关如何指定其他数据库类型，请参阅下面的引擎设置。这个例子是为`MySQL`:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_test',\n        'USER': 'root',\n        'PASSWORD': 'mysqlroot',\n        'HOST': '127.0.0.1',\n        'PORT': 3306\n    }\n}\n```\n\n### `MySQL`连接工具\n\n1. 需要安装`pymysql`模块\n\n    ```bash\n    pip install pymysql\n    ```\n\n2. 在项目的`__init__.py`初始化文件,添加如下信息:\n\n   ```python\n   import pymysql\n   pymysql.install_as_MySQLdb()\n   ```\n\n3. 在django最新版本中，提示\"Django需要mysqlclient 1.3.13或更高版本\"。要么在报错时，将抛出版本异常的代码注释掉,仍然使用`pymysql`；要么直接使用`mysqlclient`,不建议直接`pip`命令安装，可以使用`conda`创建虚拟环境，使用`conda`安装`mysqlclient`。\n\n## 三、字段属性和选项\n\n### 1.模型类属性命名限制\n\n- 不能是python的保留关键字。\n\n- **不允许使用连续的下划线，这是由django的查询方式决定的。**\n\n- 定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：\n\n  ```python\n    属性名=models.字段类型(选项)\n  ```\n\n### 2.字段类型\n\n#### 整数\n\n##### `AutoField`\n\n根据可用id自动递增的一个32位(`4 byte`)的整数(`Integer`)字段,它的适用范围为:`1`到`2147483647`之间。\n\n你通常不需要直接使用它;如果不进行其他指定，主键字段将自动添加到模型中。\n\n默认情况下， Django 会给每一个模型添加下面的字段：\n\n```python\nid = models.AutoField(primary_key=True)\n```\n\n这是一个自增的主键。\n\n如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 `primary_key=True`。如果 Django 看到你显式地设置了 `Field.primary_key`，将不会自动在表（模型）中添加 `id` 列。\n\n每个模型都需要拥有一个设置了 `primary_key=True` 的字段（无论是显式的设置还是 Django 自动设置）\n\n##### `BigAutoField`\n\n一个64位(`8 byte`)的整数，类似于`AutoField`，除了它的适用范围为:`1`到`9223372036854775807`之间。\n\n##### `IntegerField`\n\n一个32位(`4 byte`)的整数。在Django支持的所有数据库中，`-2147483648`到`2147483647`之间的值都是安全的。\n\n#####  `BigIntegerField`\n\n一个64位(`8 byte`)的整数，类似于`IntegerField`，除了它保证适合从`-9223372036854775808`到`9223372036854775807`的数字。\n\n##### `SmallIntegerField`\n\n一个8位(`2 byte`)的整数，类似于`IntegerField`,在Django支持的所有数据库中，`-32768`到`32767`之间的值都是安全的。\n\n##### `PositiveIntegerField`\n\n一个32位(`4 byte`)的整数，类似于`IntegerField`，但必须是正数或零(0)。在Django支持的所有数据库中，`0`到`2147483647`之间的值都是安全的。由于向后兼容的原因，接受值`0`。\n\n##### `PositiveSmallIntegerField`\n\n一个8位(`2 byte`)的整数，类似于`PositiveIntegerField`，在Django支持的所有数据库中，`0`到`32767`之间的值都是安全的\n\n#### 小数\n\n##### `FloatField`\n\n在Python中由 `float` 实例表示的浮点数。\n\n##### `DecimalField`\n\n一种固定精度的十进制数，在Python中用` Decimal`实例表示。它使用`DecimalValidator`验证输入。\n\n有两个必要的参数:\n\n###### `DecimalField.max_digits`\n\n数字中允许的最大位数。注意，这个数字必须大于或等于`decimal_places`。\n\n###### `DecimalField.decimal_places`\n\n要与该数字一起存储的小数位数。\n\n例如，要存储分辨率为两位小数的999以内的数字，需要使用\n\n```python\nmodels.DecimalField(..., max_digits=5, decimal_places=2)\n```\n\n\n> `FloatField` **vs.** `DecimalField`\n>\n> `FloatField`类有时会与`DecimalField`类混在一起。虽然它们都表示实数，但它们表示的是不同的数。`FloatField`在内部使用Python的`float`类型，而`DecimalField`使用Python的`Decimal`类型。有关两者之间差异的信息，请参阅Python的 [`decimal`](https://docs.python.org/3/library/decimal.html#module-decimal) 模块文档。\n\n#### 布尔\n\n##### `BooleanField`\n\n一个`true`/`false`字段。\n\n当`Field.default`未定义时，`BooleanField`的默认值为`None`\n\n> Django 2.1:\n> 在旧版本中，这个字段不允许`null=True`，因此必须使用`NullBooleanField`。现在不建议使用后者，因为在Django的未来版本中可能会弃用它。\n>\n> 在较早的版本中，该字段隐式地具有`blank=True`。您可以通过设置blank=True来恢复前面的行为。\n\n##### `NullBooleanField`\n\n类似`BooleanField`的`null=True`。使用`BooleanField`这个字段而不是`NullBooleanField`这个字段，因为在Django的未来版本中`NullBooleanField`可能会被弃用\n\n#### 字符\n\n##### `CharField`\n\n字符串字段，用于小型到大型字符串。`CharField`有一个额外的必要参数:\n\n###### `CharField.max_length`\n\n字段的最大长度(以字符为单位)。`max_length`在数据库标准和Django的验证中使用`MaxLengthValidator`执行。\n\n对于大量文本，使用`TextField`。\n\n##### `TextField`\n\n一个大的文本字段。这个字段的默认表单小部件是一个`Textarea`。\n\n如果指定max_length属性，它将反映在自动生成表单字段的`Textarea`小部件中。然而，它并没有在模型或数据库级别强制执行。\n\n##### `URLField`\n\n一个有关`URL`的`CharField`，由`URLValidator`验证该值是否为有效的`URL`地址。\n\n与所有`CharField`子类一样，`URLField`接受可选的`max_length`参数。如果不指定`max_length`，则使用默认值200。\n\n##### `EmailField`\n\n一个有关`Email`的`CharField`,由`EmailValidator`验证该值是否为有效的电子邮件地址。\n\n与所有`CharField`子类一样，`EmailField`接受可选的`max_length`参数。如果不指定`max_length`，则使用默认值254。\n\n##### `UUIDField`\n\n用于存储通用唯一标识符的字段。使用Python的`UUID`类。当在`PostgreSQL`上使用时，它以`uuid`数据类型存储，否则以`char(32)`存储。\n\n全局惟一标识符是`primary_key`的`AutoField`的一个很好的替代方案。数据库不会为你生成**UUID**，建议使用默认:\n\n```python\nimport uuid\nfrom django.db import models\n\nclass MyUUIDModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # other fields\n```\n\n> 注意，一个回调函数(省略括号)被传递到`default`，而不是**UUID**的一个实例。\n\n#### 文件\n\n##### `FileField`\n\n一个文件上传字段。有两个可选参数:\n\n###### `FileField.upload_to`\n\n这个属性提供了一种设置上传目录和文件名的方法，可以通过两种方式进行设置。在这两种情况下，值都被传递到`Storage.save()`方法。\n\n如果您指定一个字符串值，它可能包含`strftime()`格式，它将被文件上传的日期/时间所取代(这样上传的文件就不会填满给定的目录)。例如:\n\n```python\nclass MyModel(models.Model):\n    # 文件将被上传至 MEDIA_ROOT/uploads\n    upload = models.FileField(upload_to='uploads/')\n    # or...\n    # 文件将被上传至 MEDIA_ROOT/uploads/2015/01/30\n    upload = models.FileField(upload_to='uploads/%Y/%m/%d/')\n```\n\n如果使用默认的`FileSystemStorage`，字符串值将追加到`MEDIA_ROOT`路径，以形成本地文件系统上的位置，上传的文件将存储在此位置。如果使用不同的存储，请检查该存储的文档，以了解它如何处理`upload_to`。\n\n`upload_to`也可以是一个可调用的函数。这个函数将被调用以获得上传路径，包括文件名。这个可调用函数必须接受两个参数，并返回一个`unix`风格的路径(带有斜杠)，以便传递给存储系统。这两个参数是:\n\n| 参数       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| `instance` | 定义FileField的模型的一个实例。更具体地说，这是附加当前文件的特定实例。<br/>在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的`AutoField`，那么它的主键字段可能还没有值。 |\n| `filename` | 原给定给该文件的文件名。在确定最终目的地路径时，可能会考虑这一点，也可能不考虑这一点。 |\n\n例子:\n\n```python\ndef user_directory_path(instance, filename):\n    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>\n    return 'user_{0}/{1}'.format(instance.user.id, filename)\n\nclass MyModel(models.Model):\n    upload = models.FileField(upload_to=user_directory_path)\n```\n\n###### `FileField.storage`\n\n一个存储对象，它处理文件的存储和检索。有关如何提供此对象的详细信息，请参见 [管理文件](https://docs.djangoproject.com/en/2.2/topics/files/) 。\n\n在模型中使用`FileField`或`ImageField`需要几个步骤:\n\n1. 在设置文件中，需要将`MEDIA_ROOT`定义为一个目录的完整路径，您希望`Django`在这个目录中存储上传的文件。(为了提高性能，这些文件不存储在数据库中。)将`MEDIA_URL`定义为该目录的基本公共`URL`。确保此目录可由`Web`服务器的用户帐户写入。\n2. 将`FileField`或`ImageField`添加到模型中，定义`upload_to`选项，以指定`MEDIA_ROOT`的子目录，用于上传文件。\n3. 所有将存储在数据库中的内容都是文件的路径(相对于`MEDIA_ROOT`)。您很可能希望使用Django提供的便利url属性。例如，如果 `ImageField`被称为 `mug_shot` ，可以获取模板中图像的绝对路径 `{{ object.mug_shot.url }}` \n\n例如，假设`MEDIA_ROOT`设置为`'/home/media'`， `upload_to`设置为`'photos/%Y/%m/%d'`。`upload_to`的`'%Y/%m/%d'`部分是`strftime()`格式;`'%Y'`是四位数的年份，`'%m'是`两位数的月份，`'%d'`是两位数的日期。如果你在2007年1月15日上传了一个文件，它将被保存在`/home/media/photos/2007/01/15`目录下。\n\n如果要检索上传文件的磁盘上文件名或文件大小，可以分别使用[`名称`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.name) 和[`大小`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.size) 属性;有关可用属性和方法的更多信息，请参见 [`文件`](https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File)类引用和 [管理文件](https://docs.djangoproject.com/en/2.2/topics/files/)主题指南。\n\n> 文件作为模型保存在数据库中的一部分保存，因此在保存模型之前，不能依赖于磁盘上使用的实际文件名。\n\n请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传一个**CGI**或**PHP**脚本，并通过访问该脚本在您的站点上的**URL**来执行该脚本。不要允许这样的操作。\n\n还要注意，即使是上传的**HTML**文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于**XSS**或请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传到**CGI**或**PHP**脚本，并通过访问该脚本在您的站点上的URL来执行该脚本。不要允许这样的操作。\n\n还要注意，即使是上传的HTML文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于**XSS**或**CSRF**攻击的安全威胁。攻击的安全威胁。\n\n> `FileField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `ImageField`\n\n从`FileField`继承所有属性和方法，但也验证上传的对象是有效的图像。\n\n除了可用于`FileField`的特殊属性之外，`ImageField`还具有高度和宽度属性。\n\n为了方便查询这些属性，`ImageField`有两个额外的可选参数:\n\n###### `ImageField.height_field`\n\n一个模型字段的名称，该字段将在每次保存模型实例时自动填充映像的高度。\n\n###### `ImageField.width_field`\n\n一个模型字段的名称，该字段将在每次保存模型实例时自动填充图像的宽度。\n\n需要 [Pillow](https://pillow.readthedocs.io/en/latest/) 库。\n\n> `ImageField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `FilePathField`\n\n一个`CharField`，它的选择仅限于文件系统上某个目录中的文件名。有三个特殊的参数，其中第一个是必需的:\n\n###### `FilePathField.path`\n\n必需的。这个`FilePathField`应该从中获得其选择的目录的绝对文件系统路径。例如:`\"/ home /images\"`。\n\n###### `FilePathField.match`\n\n可选的。一个正则表达式，作为一个字符串，`FilePathField`将使用它来过滤文件名。注意，正则表达式将应用于基本文件名，而不是完整路径。示例:**`foo.*\\.txt$`**。它将匹配一个名为`foo23.txt`的文件，但不匹配`bar.txt`或`foo23.png`。\n\n###### `FilePathField.recursive`\n\n可选的。非真即假。默认是假的。指定是否应该包括`path`的所有子目录\n\n###### `FilePathField.allow_files`\n\n可选的。非真即假。默认是正确的。指定是否应包括位于指定位置的文件。这个或`allow_folders`必须为真。\n\n###### `FilePathField.allow_folders`\n\n可选的。非真即假。默认是假的。指定是否应包括指定位置的文件夹。这个或allow_files必须为真。\n\n当然，这些参数可以一起使用。\n\n一个潜在的问题是，match应用于基本文件名，而不是完整路径。所以,这个例子:\n\n```python\nFilePathField(path=\"/home/images\", match=\"foo.*\", recursive=True)\n```\n\n将匹配`/home/images/foo.png`，但不匹配`/home/images/foo/bar.png`，因为匹配应用于基本文件名(`foo.png`和`bar.png`)。\n\n> `FilePathField`实例在数据库中创建为`varchar`列，默认最大长度为100个字符。与其他字段一样，可以使用`max_length`参数更改最大长度。\n\n##### `BinaryField`\n\n存储原始二进制数据的字段。可以为它分配字节、字节数组或内存视图。\n\n默认情况下，`BinaryField`将`editable`设置为`False`，在这种情况下，它不能包含在ModelForm中。\n\n`BinaryField`有一个额外的可选参数:\n\n###### `BinaryField.max_length`\n\n字段的最大长度(以字符为单位)。最大长度在Django的验证中使用MaxLengthValidator实现。\n\n> Django 2.1:\n> 旧版本不允许将editable设置为True。\n\n#### 时间\n\n##### `DateField`\n\n日期，在Python中用`datetime.date`实例表示。有一些额外的，可选的参数:\n\n###### `DateField.auto_now`\n\n每次保存对象时自动将字段值设置为当前时间，用于“最后修改”时间戳。\n\n该字段只在调用`Model.save()`时自动更新。当以其他方式(如`QuerySet.update()`)更新其他字段时，该字段不会更新，不过可以在这样的更新中为该字段指定自定义值。\n\n###### `DateField.auto_now_add`\n\n在第一次创建对象时自动将字段设置为当前时间。用于创建时间戳。\n\n即使在创建对象时为这个字段设置了值，它也会被忽略。如果您希望能够修改该字段，请将`auto_now_add=True`设置为以下内容:\n\n- For `DateField`: `default=date.today` - from `datetime.date.today()`\n- For `DateTimeField`: `default=timezone.now` - from `django.utils.timezone.now()`\n\n`auto_now_add`、`auto_now`和`default`选项是互斥的。这些选项的任何组合都将导致错误。\n\n##### `DateTimeField`\n\n日期和时间，在Python中用`datetime.datetime`实例表示。接受与`DateField`相同的额外参数。\n\n##### `TimeField`\n\n时间，在Python中用`datetime.time`实例表示。接受与`DateField`相同的额外参数。\n\n### 3.字段选项\n\n> 以下参数对所有字段类型均有效，且是可选的。\n\n#### `null`\n\n如果设置为 `True`， 当该字段为空时，Django 会将数据库中该字段设置为 `NULL`，默认为 `False`。\n\n避免在基于字符串的字段（例如 `CharField`和 `TextField`）上使用 `null`。如果字符串字段的 `null=True`，那意味着对于“无数据”有两个可能的值：`NULL` 和空字符串。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 `NULL`。 一个例外是当 `CharField`同时具有 `unique=True` 和 `blank=True` 时。 在这种情况下，需要设置 `null=True`，以便在使用空白值保存多个对象时避免唯一的约束违规。\n\n对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置`blank=True`，因为`null`参数只影响数据库存储(参见`blank`)。\n\n#### `blank`\n\n如果设置为 `True` ，该字段允许为空。默认为 `False` 。\n\n注意，这与`null`不同。`null`纯粹是与数据库相关的，而`blank`则是与验证相关的。如果字段为`blank=True`，表单验证将允许输入空值。\n\n> blank和null的用法区别\n\n- null纯粹是与数据库相关的，而blank则是与表单验证相关的。\n- 避免在基于字符串的字段（例如 `CharField`和 `TextField`）上使用 `null`。如果字符串字段的 `null=True`，那意味着对于“无数据”有两个可能的值：`NULL` 和`空字符串`。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 `NULL`。 一个例外是当 `CharField`同时具有 `unique=True` 和 `blank=True` 时。 在这种情况下，需要设置 `null=True`，以便在使用空白值保存多个对象时避免唯一的约束违规。\n- 当存在两个参数时，总共会有四种设定组合\n\n  - `blank=True`、`null=True`。统一的表明了该字段（列）是可以为空的。\n  - `blank=False`、`null=False`。统一的表面了该字段（列）不可以为空。\n  - `blank=True`、`null=False`。这个设定的意义在于，某些字段并不希望用户在表单中创建，而是通过在`save`方法中根据其他字段生成。\n  - `blank=False`、`null=True`。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。\n\n> 只设定了`blank=True`而没有设定`null=True`的时候，通过`Admin`站点表单创建模型实例并且表单在该字段上没有值时数据库不报错呢？？？\n\n- 当没有设定`null=True`时，该列在数据库中就存在`NOT NULL`的约束，如果插入数据时这一列没有值，按理说数据库应该会报错才对\n- 出现这种情况的原因在于，`django`在处理某些在数据库中实际的存储值为字符串的`Field`时（如`CharField`, `TextField`, `ImageField`（图片文件的路径）），永远不会向数据库中填入空值。如果表单中某个`CharField`或者`TextField`字段为空，那么`django`会在数据库中填入`\"\"`，而不是`null`. \n\n#### `choices`\n\n一个序列，它由两个元素(例如[(A, B)， (A, B)…])的迭代组成，作为这个字段的选择。如果提供了选择，则通过模型验证强制执行，默认的表单小部件将是一个包含这些选择的选择框，而不是标准的文本字段。\n\n每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。例如:\n\n```python\nYEAR_IN_SCHOOL_CHOICES = [\n    ('FR', 'Freshman'),\n    ('SO', 'Sophomore'),\n    ('JR', 'Junior'),\n    ('SR', 'Senior'),\n]\n```\n\n通常，最好在模型类中定义选项，并为每个值定义一个适当命名的常量:\n\n```python\nfrom django.db import models\n\nclass Student(models.Model):\n    FRESHMAN = 'FR'\n    SOPHOMORE = 'SO'\n    JUNIOR = 'JR'\n    SENIOR = 'SR'\n    YEAR_IN_SCHOOL_CHOICES = [\n        (FRESHMAN, 'Freshman'),\n        (SOPHOMORE, 'Sophomore'),\n        (JUNIOR, 'Junior'),\n        (SENIOR, 'Senior'),\n    ]\n    year_in_school = models.CharField(\n        max_length=2,\n        choices=YEAR_IN_SCHOOL_CHOICES,\n        default=FRESHMAN,\n    )\n\n    def is_upperclass(self):\n        return self.year_in_school in (self.JUNIOR, self.SENIOR)\n```\n\n虽然您可以在模型类的外部定义一个选择列表，然后引用它，但是在模型类内部定义每个选择的选择和名称，可以将所有信息与使用它的类一起保存，并使选择易于引用(例如：**Student.SOPHOMORE** 可以在导入**Student**模型类的任何地方使用)。\n\n您还可以将可用的选项收集到指定的组中，这些组可用于组织目的:\n\n```python\nfrom django.db import models\n\n\nclass Media(models.Model):\n    MEDIA_CHOICES = [\n        ('Audio', (\n            ('vinyl', 'Vinyl'),\n            ('cd', 'CD'),\n        )\n         ),\n        ('Video', (\n            ('vhs', 'VHS Tape'),\n            ('dvd', 'DVD'),\n        )\n         ),\n        ('unknown', 'Unknown'),\n    ]\n\n    media = models.CharField(\n        max_length=10,\n        choices=MEDIA_CHOICES,\n        default='cd'\n    )\n```\n\n每个元组中的第一个元素是应用于组的名称。第二个元素是二元组的迭代，每个二元组包含一个值和一个可读的选项名。分组选项可以与单个列表中的未分组选项组合在一起(例如本例中的未知选项)。\n\n注意，选择可以是任何序列对象--不一定是列表或元组。这允许您动态地构造选择。但是，如果您发现自己的选择是动态的，那么最好使用一个带有 `ForeignKey`的数据库表。但是静态数据不会有太大的变化。\n\n对于每个设置了选项的字段，对象都有一个`get_FOO_display()`方法，其中`FOO`是字段的名称。该方法返回字段的\"人易读\"值。\n\n例子:\n\n```python\nfrom django.db import models\n\nclass Person(models.Model):\n    SHIRT_SIZES = (\n        ('S', 'Small'),\n        ('M', 'Medium'),\n        ('L', 'Large'),\n    )\n    name = models.CharField(max_length=60)\n    shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)\n```\n\n```bash\n>>> p = Person(name=\"Fred Flintstone\", shirt_size=\"L\")\n>>> p.save()\n>>> p.shirt_size\n'L'\n>>> p.get_shirt_size_display()\n'Large'\n```\n\n#### `db_column`\n\n要用于此字段的数据库列的名称。如果没有给出，Django将使用字段的名称。\n\n#### `db_index`\n\n如果为真，将为此字段创建一个数据库索引。\n\n#### `default`\n\n该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。\n\n默认值不能是一个可变的对象(模型实例、列表、集合等)，因为对该对象的同一个实例的引用将被用作所有模型实例的默认值。反而，可以在回调函数中打包处理所需的默认值。例如，如果要为`JSONField`指定默认`dict`，可以使用一个函数:\n\n```python\ndef contact_default():\n    return {\"email\": \"to1@example.com\"}\n\ncontact_info = JSONField(\"ContactInfo\", default=contact_default)\n```\n\n**lambda**表达式不能用于像**default**这样的字段选项，因为它们不能被迁移序列化。\n\n对于像映射模型实例的`ForeignKey`这样的字段，默认值应该是它们引用的字段的值(`pk`，除非设置`to_field`)，而不是模型实例。\n\n当创建新的模型实例并且没有为字段提供值时，将使用默认值。当字段是主键时，当字段设置为`None`时也会使用默认值。\n\n#### `help_text`\n\n额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。\n\n注意，这个值不会在自动生成的表单中进行`html`转义的。如果您愿意，可以在`help_text`中包含**HTML**。例如:\n\n```python\nhelp_text=\"Please use the following format: <em>YYYY-MM-DD</em>.\"\n```\n\n或者，您可以使用纯文本和`django.utils.html.escape()`来转义任何**HTML**特殊字符。确保转义任何来自不可信用户的帮助文本，以避免跨站点脚本攻击。\n\n#### `primary_key`\n\n如果设置为 `True` ，将该字段设置为该模型的主键。\n\n如果您没有为模型中的任何字段指定`primary_key=True`, **Django**将自动添加一个`AutoField`来保存主键，所以您不需要在任何字段上设置`primary_key=True`，除非您想覆盖默认的主键行为。\n\n`primary_key=True`意味着`null=False`和`unique=True`。对象上只允许有一个主键。\n\n主键字段是只读的。如果更改现有对象上的主键值并保存它，则将在旧对象旁边创建一个新对象。\n\n#### `unique`\n\n如果设置为 `True`，这个字段必须在整个表中保持值唯一。\n\n这是在数据库级和通过模型验证实现的。如果试图在惟一字段中保存具有重复值的模型，则模型的`save()`方法会产生一个`django.db.IntegrityError`。\n\n这个选项对除了`ManyToManyField`和`OneToOneField`以外的所有字段类型都有效。\n\n注意，当`unique`为真时，不需要指定`db_index`，因为`unique`意味着创建索引。\n\n#### `verbose_name`\n\n字段的可读名称。如果没有给出详细的名称，Django将使用字段的属性名自动创建它，将下划线转换为空格。\n\n除了 `ForeignKey`， `ManyToManyField` 和 `OneToOneField`，任何字段类型都接收一个可选位置的参数 `verbose_name`，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。\n\n在该例中：备注名为 `\"person's first name\"`:\n\n```python\nfirst_name = models.CharField(\"person's first name\", max_length=30)\n```\n\n在该例中：备注名为 `\"first name\"`:\n\n```python\nfirst_name = models.CharField(max_length=30)\n```\n\n `ForeignKey`， `ManyToManyField` 和 `OneToOneField`接收的第一个参数为模型的类名，后面可以添加一个 `verbose_name`参数：\n\n```python\npoll = models.ForeignKey(\n    Poll,\n    on_delete=models.CASCADE,\n    verbose_name=\"the related poll\",\n)\nsites = models.ManyToManyField(Site, verbose_name=\"list of sites\")\nplace = models.OneToOneField(\n    Place,\n    on_delete=models.CASCADE,\n    verbose_name=\"related place\",\n)\n```\n\n惯例是不将`verbose_name` 的首字母大写，必要时 **Djanog** 会自动把首字母转换为大写。\n\n#### `validators`\n\n要为此字段运行的验证器列表。\n\n##### 编写验证器\n\n`validator`是一个可调用的函数，它接受一个值，如果它不满足某些条件，就会引发`ValidationError`。验证器对于在不同类型的字段之间重用验证逻辑非常有用。\n\n例如，这里有一个验证器，它只允许偶数:\n\n```python\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n\ndef validate_even(value):\n    if value % 2 != 0:\n        raise ValidationError(\n            _('%(value)s is not an even number'),\n            params={'value': value},\n        )\n```\n\n您可以通过字段的`validators`参数将其添加到模型字段:\n\n```python\nfrom django.db import models\n\nclass MyModel(models.Model):\n    even_field = models.IntegerField(validators=[validate_even])\n```\n\n因为值在运行验证器之前就转换成了Python，你甚至可以对表单使用相同的验证器:\n\n```python\nfrom django import forms\n\nclass MyForm(forms.Form):\n    even_field = forms.IntegerField(validators=[validate_even])\n```\n\n对于更复杂或可配置的验证器，您还可以使用带有`__call__()`方法的类。例如， `RegexValidator`这类验证器。如果在`validators` `model`字段选项中使用基于类的验证器,应该添加`deconstruct()`装饰器和 `__eq__()` 方法让它可以被迁移框架序列化。\n\n [`django.core.validators`](https://docs.djangoproject.com/zh-hans/2.2/ref/validators/#built-in-validators)模块包含一组可调用的验证器，用于模型和表单字段，可以在内部使用它们。\n\n### 4. `Meta` 选项\n\n使用内部 `Meta类` 来给模型赋予元数据，就像：\n\n```python\nfrom django.db import models\n\nclass Ox(models.Model):\n    horn_length = models.IntegerField()\n\n    class Meta:\n        ordering = [\"horn_length\"]\n        verbose_name_plural = \"oxen\"\n```\n\n#### `abstract`\n\n抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 **Meta** 类中填入 `abstract=True`。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。\n\n一个例子:\n\n```python\nfrom django.db import models\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n\nclass Student(CommonInfo):\n    home_group = models.CharField(max_length=5)\n```\n\n`Student` 模型拥有3个字段： `name`， `age` 和 `home_group`。 `CommonInfo` 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。\n\n从抽象基类继承来的字段可被其它字段或值重写，或用 `None` 删除。\n\n对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。\n\n#### `app_label`\n\n如果一个模型是在`INSTALLED_APPS`中注册的**APP**外部定义的，它必须声明它属于哪个应用程序:\n\n```python\napp_label = 'myapp'\n```\n\n#### `db_table`\n\n要用于模型的数据库表的名称:\n\n```python\ndb_table = 'music_album'\n```\n\n为了节省时间，Django自动从模型类和包含它的应用程序的名称派生数据库表的名称。模型的数据库表名是通过将模型的**\"app label\"**(您在`manage.py startapp`中使用的名称)与模型的类名连接在一起，并在它们之间加一个下划线来构造的。\n\n例如，如果您有一个应用**bookstore**(由 `manage.py startapp bookstore`创建)，定义为**Book**的模型类将有一个名为`bookstore_book`的数据库表。\n\n要覆盖数据库表名，请使用类元中的db_table参数。\n\n> 强烈建议在通过db_table覆盖表名时使用小写的表名，特别是在使用MySQL后端时。\n\n#### `ordering`\n\n对象的默认顺序，用于获取对象列表:\n\n```python\nordering = ['-order_date']\n```\n\n这是一个 包含由字符串和/或构成的查询表达式的元组或列表。每个字符串都是一个带有可选`\"-\"`前缀的字段名，表示按降序排列。没有前缀`\"-\"`的字段将按升序排列。使用字符串`\"?\"`随机排序。\n\n例如，要按`pub_date`字段升序排序，可以使用以下命令:\n\n```python\nordering = ['pub_date']\n```\n\n要按pub_date降序排列，请使用以下命令:\n\n```python\nordering = ['-pub_date']\n```\n\n按pub_date降序排列，然后按author升序排列，使用以下命令:\n\n```python\nordering = ['-pub_date', 'author']\n```\n\n您还可以使用查询表达式。要按作者升序排序并使空值排序持续，请使用以下命令:\n\n```python\nfrom django.db.models import F\n\nordering = [F('author').asc(nulls_last=True)]\n```\n\n#### `permissions`\n\n创建此对象时进入权限表的额外权限。为每个模型自动创建添加、更改、删除和视图权限。这个例子指定了一个额外的权限`can_deliver_pizzas`:\n\n```python\npermissions = [('can_deliver_pizzas', 'Can deliver pizzas')]\n```\n\n这是一个格式为**(permission_code,** **human_readable_permission_name)**的二元列表或元组。\n\n#### `indexes`\n\n要在模型上定义的索引列表:\n\n```python\nfrom django.db import models\n\nclass Customer(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['last_name', 'first_name']),\n            models.Index(fields=['first_name'], name='first_name_idx'),\n        ]\n```\n\n#### `verbose_name`\n\n模型对象的人类可读的单数名称:\n\n```python\nverbose_name = \"pizza\"\n```\n\n如果没有给出这个值，Django将使用类名的一个简化版本:`CamelCase`变成`camel case`。\n\n#### `verbose_name_plural`\n\n对象的复数名称:\n\n```python\nverbose_name_plural = \"stories\"\n```\n\n如果没有给出，Django将使用 `verbose_name`+ `\"s\"`\n\n### 5.关联关系\n\n显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：多对一，多对多，一对一。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n#### 1、多对一关联\n\n定义一个多对一的关联关系，使用 `django.db.models.ForeignKey` 类。就和其它 `Field`字段类型一样，只需要在你模型中添加一个值为该类的属性。\n\n`ForeignKey` 类需要添加一个位置参数，即你想要关联的模型类名。\n\n```python\n# 关键字ForeignKey\npublish = models.ForeignKey(to='Publish')  # to用来指代跟哪张表有关系 默认关联的就是表的主键字段\n# 外键字段名在创建时会自动加上_id后缀\n```\n\n##### 字段参数\n\n1. `to`:设置要关联的表\n\n2. `to_field`:设置要关联的表的字段(一般不设置，默认使用主键id关联)\n\n3. `related_name`:反向操作时，使用的字段名，用于代替原反向查询时的`'表名_set'`\n\n4. `related_query_name`:反向查询操作时，使用的连接前缀，用于替换表名\n\n5. `db_constraint`:是否在数据库中创建外键约束，默认为True。\n\n6. `on_delete`:当删除关联表中的数据时，当前表与其关联的行的行为。\n\n   1. `models.CASCADE`:删除关联数据，与之关联的数据也删联(`on_delete=models.CASCADE`)\n\n   2. 抛出异常(错误)\n\n      1. `models.DO_NOTHING`:删除关联数据，引发错误`IntegrityError`       \n      2. `models.PROTECT`\n         删除关联数据，引发错误`ProtectedError\n         `\n\n   3. `models.SET_NULL`:删除关联数据，与之关联的值设置为`null`（前提FK字段需要设置为可空）\n\n   4. `models.SET_DEFAULT`:删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）\n\n   5. `models.SET`:删除关联数据\n\n      1. 与之关联的值设置为指定值，设置：`models.SET(值)`\n      2. 与之关联的值设置为可执行对象的返回值，设置：`models.SET(可执行对象)`\n\n#### 2、OneToOneField(一对一)\n\n> 外键字段创建在任意一张表都可以，建议外键添加在查询频率较高的一方\n\n```python\n# 关键字OneToOneField\nauthor_detail = models.OneToOneField(to='Author_detail')  # 外键本质fk + unique\n```\n\n##### 字段参数\n\n1. `to` :设置要关联的表。\n\n2. `to_field`:设置要关联的字段。\n\n3. `on_delete`:同ForeignKey字段。\n\n#### 3、ManyToManyField(多对多)\n\n> 用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。\n\n```python\n# 关键字ManyToManyField\nauthor = models.ManyToManyField(to='Author')  \n# django orm会自动帮你创建第三张关系表，表名为两个关联的表名用_连接\n```\n\n##### 字段参数\n\n1. `to`:设置要关联的表\n\n2. `related_name`:同`ForeignKey`字段(反向操作时，使用的字段名，用于代替原反向查询时的`'表名_set'`)\n\n3. `related_query_name`:同`ForeignKey`字段(反向查询操作时，使用的连接前缀，用于替换表名)\n\n4. `symmetric`:仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为`True`。\n\n   ```python\n    class Person(models.Model):\n        name = models.CharField(max_length=16)\n        friends = models.ManyToManyField(\"self\")\n        # 此时，person对象就没有person_set属性。\n   \n    class Person(models.Model):\n        name = models.CharField(max_length=16)\n        friends = models.ManyToManyField(\"self\",symmetrical=False)\n        # 此时，person对象现在就可以使用person_set属性进行反向查询。\n   ```\n\n5. `through`:在使用`ManyToManyField`字段时，`Django`将自动生成一张表        来管理多对多的关联关系。但我们也可以手动创建第三张表来管理多对多关系，此时就需要通过`through`来指定第三张表的表名。\n\n6. `through_fields`:设置关联的字段。\n\n7. `db_table`:默认创建第三张表时，数据库中表的名称。\n\n##### 多对多的三种创建方式\n\n1. 自己建立第三张关系表，外键分别关联两个表\n\n   * 优点:可以扩充第三张关系标的字段\n\n   * 缺点:自己做连表查询\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n      class Author(models.Model):\n          name = models.CharField(max_length=12)\n     \n      # 1. 多对多第一种创建方式：自己创建第三张关系表\n      class Author2Book(models.Model):\n          id = models.AutoField(primary_key=True)\n          author_id = models.ForeignKey(to='Author')\n          book_id = models.ForeignKey(to='Book')\n          price = models.IntegerField()  # 可以自己扩充需要的字段\n     ```\n\n2. 通过ORM内置的ManyToManyField，自动创建第三张关系表\n\n   * 优点:提供了很多连表操作的快捷方法,`all()`, `add()`, `set()`, `clear()`, `remove()`\n\n   * 缺点:无法扩展第三张关系表\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n      class Author(models.Model):\n          name = models.CharField(max_length=12)\n          books = models.ManyToManyField(to='Book')  # 字段就这些，无法扩充其他字段\n     \n     ```\n\n3. 自己创建第三张关系表，通过ManyToManyField关联\n\n   * 优点：\n\n     * 既能够使用多对多查询的快捷方法all()(只能用all，不能使用add,set等)\n     * 还能够自己扩展第三张关系表的字段\n\n   * 建表例子\n\n     ```python\n     class Book(models.Model):\n         title = models.CharField(max_length=12)\n     \n     class Author(models.Model):\n          name = models.CharField(max_length=12)\n          # 告诉ManyToManyField通过(through)Author2Book这张表进行关联，不使用ORM自动创建的第三张表，而是使用我自己创建的表\n          # through_fields告诉ORM通过哪几个字段进行多对多关联\n          books = models.ManyToManyField(to='Book', through='Author2Book', through_fields=('author', 'book'))\n     \n      # 1. 多对多第三种创建方式：自己创建第三张关系表，此时外键不需要添加_id了，因为ORM会默认帮你在外键后面加_id\n      class Author2Book(models.Model):\n          id = models.AutoField(primary_key=True)\n          author = models.ForeignKey(to='Author')\n          book = models.ForeignKey(to='Book')\n          price = models.IntegerField(null=True)\n      \n          # author_id和book_id要联合唯一\n          class Meta:\n              unique_together = (('author', 'book'),)\n     ```\n\n    * 操作例子\n\n      ```python\n      # 多对多的第三张方式也支持all查询\n      author_obj = Author.objects.first()\n      # 第一个作者的所有书籍\n      ret = author_obj.books.all()\n       \n      # 给第一个作者添加一本书\n      # author_obj.books.add(4) # 报错\n      Author2Book.objects.create(author_id=1, book_id=4)\n      ```","slug":"Django-5-ORM模型类","published":1,"updated":"2021-01-23T14:46:40.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnugr00hvjjlneigg1y3d","content":"<h2 id=\"一、ORM介绍\"><a href=\"#一、ORM介绍\" class=\"headerlink\" title=\"一、ORM介绍\"></a>一、ORM介绍</h2><h3 id=\"1-什么是-ORM\"><a href=\"#1-什么是-ORM\" class=\"headerlink\" title=\"1. 什么是 ORM\"></a>1. 什么是 ORM</h3><ul>\n<li><p><strong><code>ORM</code></strong> 全拼<code>Object-Relation Mapping</code></p>\n</li>\n<li><p>中文意为 <strong><code>对象-关系映射</code></strong></p>\n</li>\n<li><p>在<code>MVC</code>/<code>MVT</code>设计模式中的<code>Model</code>模块中都包括<code>ORM</code></p>\n</li>\n</ul>\n<h3 id=\"2-ORM-优势\"><a href=\"#2-ORM-优势\" class=\"headerlink\" title=\"2.ORM 优势\"></a>2.ORM 优势</h3><p>（1）只需要面向对象编程, 不需要面向数据库编写代码.</p>\n<ul>\n<li>对数据库的操作都转化成对类属性和方法的操作.</li>\n<li>不用编写各种数据库的 sql 语句.</li>\n</ul>\n<p>（2）实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.</p>\n<ul>\n<li>不在关注用的是<code>mysql</code>、<code>oracle</code>… 等.</li>\n<li>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</li>\n</ul>\n<h3 id=\"3-ORM-劣势\"><a href=\"#3-ORM-劣势\" class=\"headerlink\" title=\"3.ORM 劣势\"></a>3.ORM 劣势</h3><ul>\n<li>相比较直接使用 SQL 语句操作数据库, 有性能损失.</li>\n<li>根据对象的操作转换成 SQL 语句, 根据查询的结果转化成对象, 在映射过程中有性能损失.</li>\n</ul>\n<h3 id=\"4-ORM-和数据库关系：\"><a href=\"#4-ORM-和数据库关系：\" class=\"headerlink\" title=\"4.ORM 和数据库关系：\"></a>4.ORM 和数据库关系：</h3><p>在 Django 中 model 是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.</p>\n<p>基本情况：</p>\n<p>每个模型都是一个 Python 类，它是 django.db.models.Model 的子类。</p>\n<p>模型的每个属性都代表一个数据库字段。</p>\n<p>综上所述，Django 为您提供了一个自动生成的数据库访问 API。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ORM%E7%A4%BA%E6%84%8F%E5%9B%BE%20.png\" alt=\"ORM示意图\"></p>\n<h2 id=\"二、Django配置使用mysql数据库\"><a href=\"#二、Django配置使用mysql数据库\" class=\"headerlink\" title=\"二、Django配置使用mysql数据库\"></a>二、Django配置使用mysql数据库</h2><h3 id=\"settings-py配置DATABASES\"><a href=\"#settings-py配置DATABASES\" class=\"headerlink\" title=\"settings.py配置DATABASES\"></a><code>settings.py</code>配置<code>DATABASES</code></h3><p>默认:<code>&#123;&#125;</code>(空字典)</p>\n<p>一个字典，包含Django使用的所有数据库的设置。它是一个嵌套的字典，其内容将数据库别名映射到包含单个数据库选项的字典。</p>\n<p>数据库设置必须配置一个默认数据库;还可以指定任意数量的其他数据库。</p>\n<p>最简单的设置文件是针对使用SQLite的单数据库设置的。这可以配置使用以下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.sqlite3&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;db.sqlite3&#x27;</span>),<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>当连接到其他数据库后端(如<code>MySQL</code>、<code>Oracle</code>或<code>PostgreSQL</code>)时，需要额外的连接参数。有关如何指定其他数据库类型，请参阅下面的引擎设置。这个例子是为<code>MySQL</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;django_test&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;mysqlroot&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"MySQL连接工具\"><a href=\"#MySQL连接工具\" class=\"headerlink\" title=\"MySQL连接工具\"></a><code>MySQL</code>连接工具</h3><ol>\n<li><p>需要安装<code>pymysql</code>模块</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">pip install pymysql<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在项目的<code>__init__.py</code>初始化文件,添加如下信息:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br>pymysql.install_as_MySQLdb()<br></code></pre></div></td></tr></table></figure></li>\n<li><p>在django最新版本中，提示”Django需要mysqlclient 1.3.13或更高版本”。要么在报错时，将抛出版本异常的代码注释掉,仍然使用<code>pymysql</code>；要么直接使用<code>mysqlclient</code>,不建议直接<code>pip</code>命令安装，可以使用<code>conda</code>创建虚拟环境，使用<code>conda</code>安装<code>mysqlclient</code>。</p>\n</li>\n</ol>\n<h2 id=\"三、字段属性和选项\"><a href=\"#三、字段属性和选项\" class=\"headerlink\" title=\"三、字段属性和选项\"></a>三、字段属性和选项</h2><h3 id=\"1-模型类属性命名限制\"><a href=\"#1-模型类属性命名限制\" class=\"headerlink\" title=\"1.模型类属性命名限制\"></a>1.模型类属性命名限制</h3><ul>\n<li><p>不能是python的保留关键字。</p>\n</li>\n<li><p><strong>不允许使用连续的下划线，这是由django的查询方式决定的。</strong></p>\n</li>\n<li><p>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">属性名=models.字段类型(选项)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"2-字段类型\"><a href=\"#2-字段类型\" class=\"headerlink\" title=\"2.字段类型\"></a>2.字段类型</h3></li>\n</ul>\n<h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><h5 id=\"AutoField\"><a href=\"#AutoField\" class=\"headerlink\" title=\"AutoField\"></a><code>AutoField</code></h5><p>根据可用id自动递增的一个32位(<code>4 byte</code>)的整数(<code>Integer</code>)字段,它的适用范围为:<code>1</code>到<code>2147483647</code>之间。</p>\n<p>你通常不需要直接使用它;如果不进行其他指定，主键字段将自动添加到模型中。</p>\n<p>默认情况下， Django 会给每一个模型添加下面的字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br></code></pre></div></td></tr></table></figure>\n<p>这是一个自增的主键。</p>\n<p>如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 <code>primary_key=True</code>。如果 Django 看到你显式地设置了 <code>Field.primary_key</code>，将不会自动在表（模型）中添加 <code>id</code> 列。</p>\n<p>每个模型都需要拥有一个设置了 <code>primary_key=True</code> 的字段（无论是显式的设置还是 Django 自动设置）</p>\n<h5 id=\"BigAutoField\"><a href=\"#BigAutoField\" class=\"headerlink\" title=\"BigAutoField\"></a><code>BigAutoField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>AutoField</code>，除了它的适用范围为:<code>1</code>到<code>9223372036854775807</code>之间。</p>\n<h5 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数。在Django支持的所有数据库中，<code>-2147483648</code>到<code>2147483647</code>之间的值都是安全的。</p>\n<h5 id=\"BigIntegerField\"><a href=\"#BigIntegerField\" class=\"headerlink\" title=\"BigIntegerField\"></a><code>BigIntegerField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>IntegerField</code>，除了它保证适合从<code>-9223372036854775808</code>到<code>9223372036854775807</code>的数字。</p>\n<h5 id=\"SmallIntegerField\"><a href=\"#SmallIntegerField\" class=\"headerlink\" title=\"SmallIntegerField\"></a><code>SmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>IntegerField</code>,在Django支持的所有数据库中，<code>-32768</code>到<code>32767</code>之间的值都是安全的。</p>\n<h5 id=\"PositiveIntegerField\"><a href=\"#PositiveIntegerField\" class=\"headerlink\" title=\"PositiveIntegerField\"></a><code>PositiveIntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数，类似于<code>IntegerField</code>，但必须是正数或零(0)。在Django支持的所有数据库中，<code>0</code>到<code>2147483647</code>之间的值都是安全的。由于向后兼容的原因，接受值<code>0</code>。</p>\n<h5 id=\"PositiveSmallIntegerField\"><a href=\"#PositiveSmallIntegerField\" class=\"headerlink\" title=\"PositiveSmallIntegerField\"></a><code>PositiveSmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>PositiveIntegerField</code>，在Django支持的所有数据库中，<code>0</code>到<code>32767</code>之间的值都是安全的</p>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><h5 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h5><p>在Python中由 <code>float</code> 实例表示的浮点数。</p>\n<h5 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h5><p>一种固定精度的十进制数，在Python中用<code>Decimal</code>实例表示。它使用<code>DecimalValidator</code>验证输入。</p>\n<p>有两个必要的参数:</p>\n<h6 id=\"DecimalField-max-digits\"><a href=\"#DecimalField-max-digits\" class=\"headerlink\" title=\"DecimalField.max_digits\"></a><code>DecimalField.max_digits</code></h6><p>数字中允许的最大位数。注意，这个数字必须大于或等于<code>decimal_places</code>。</p>\n<h6 id=\"DecimalField-decimal-places\"><a href=\"#DecimalField-decimal-places\" class=\"headerlink\" title=\"DecimalField.decimal_places\"></a><code>DecimalField.decimal_places</code></h6><p>要与该数字一起存储的小数位数。</p>\n<p>例如，要存储分辨率为两位小数的999以内的数字，需要使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">models.DecimalField(..., max_digits=<span class=\"hljs-number\">5</span>, decimal_places=<span class=\"hljs-number\">2</span>)<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><code>FloatField</code> <strong>vs.</strong> <code>DecimalField</code></p>\n<p><code>FloatField</code>类有时会与<code>DecimalField</code>类混在一起。虽然它们都表示实数，但它们表示的是不同的数。<code>FloatField</code>在内部使用Python的<code>float</code>类型，而<code>DecimalField</code>使用Python的<code>Decimal</code>类型。有关两者之间差异的信息，请参阅Python的 <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\"><code>decimal</code></a> 模块文档。</p>\n</blockquote>\n<h4 id=\"布尔\"><a href=\"#布尔\" class=\"headerlink\" title=\"布尔\"></a>布尔</h4><h5 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h5><p>一个<code>true</code>/<code>false</code>字段。</p>\n<p>当<code>Field.default</code>未定义时，<code>BooleanField</code>的默认值为<code>None</code></p>\n<blockquote>\n<p>Django 2.1:<br>在旧版本中，这个字段不允许<code>null=True</code>，因此必须使用<code>NullBooleanField</code>。现在不建议使用后者，因为在Django的未来版本中可能会弃用它。</p>\n<p>在较早的版本中，该字段隐式地具有<code>blank=True</code>。您可以通过设置blank=True来恢复前面的行为。</p>\n</blockquote>\n<h5 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h5><p>类似<code>BooleanField</code>的<code>null=True</code>。使用<code>BooleanField</code>这个字段而不是<code>NullBooleanField</code>这个字段，因为在Django的未来版本中<code>NullBooleanField</code>可能会被弃用</p>\n<h4 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h4><h5 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h5><p>字符串字段，用于小型到大型字符串。<code>CharField</code>有一个额外的必要参数:</p>\n<h6 id=\"CharField-max-length\"><a href=\"#CharField-max-length\" class=\"headerlink\" title=\"CharField.max_length\"></a><code>CharField.max_length</code></h6><p>字段的最大长度(以字符为单位)。<code>max_length</code>在数据库标准和Django的验证中使用<code>MaxLengthValidator</code>执行。</p>\n<p>对于大量文本，使用<code>TextField</code>。</p>\n<h5 id=\"TextField\"><a href=\"#TextField\" class=\"headerlink\" title=\"TextField\"></a><code>TextField</code></h5><p>一个大的文本字段。这个字段的默认表单小部件是一个<code>Textarea</code>。</p>\n<p>如果指定max_length属性，它将反映在自动生成表单字段的<code>Textarea</code>小部件中。然而，它并没有在模型或数据库级别强制执行。</p>\n<h5 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h5><p>一个有关<code>URL</code>的<code>CharField</code>，由<code>URLValidator</code>验证该值是否为有效的<code>URL</code>地址。</p>\n<p>与所有<code>CharField</code>子类一样，<code>URLField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值200。</p>\n<h5 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h5><p>一个有关<code>Email</code>的<code>CharField</code>,由<code>EmailValidator</code>验证该值是否为有效的电子邮件地址。</p>\n<p>与所有<code>CharField</code>子类一样，<code>EmailField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值254。</p>\n<h5 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h5><p>用于存储通用唯一标识符的字段。使用Python的<code>UUID</code>类。当在<code>PostgreSQL</code>上使用时，它以<code>uuid</code>数据类型存储，否则以<code>char(32)</code>存储。</p>\n<p>全局惟一标识符是<code>primary_key</code>的<code>AutoField</code>的一个很好的替代方案。数据库不会为你生成<strong>UUID</strong>，建议使用默认:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> uuid<br><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyUUIDModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    <span class=\"hljs-built_in\">id</span> = models.UUIDField(primary_key=<span class=\"hljs-literal\">True</span>, default=uuid.uuid4, editable=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># other fields</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>注意，一个回调函数(省略括号)被传递到<code>default</code>，而不是<strong>UUID</strong>的一个实例。</p>\n</blockquote>\n<h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><h5 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h5><p>一个文件上传字段。有两个可选参数:</p>\n<h6 id=\"FileField-upload-to\"><a href=\"#FileField-upload-to\" class=\"headerlink\" title=\"FileField.upload_to\"></a><code>FileField.upload_to</code></h6><p>这个属性提供了一种设置上传目录和文件名的方法，可以通过两种方式进行设置。在这两种情况下，值都被传递到<code>Storage.save()</code>方法。</p>\n<p>如果您指定一个字符串值，它可能包含<code>strftime()</code>格式，它将被文件上传的日期/时间所取代(这样上传的文件就不会填满给定的目录)。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    <span class=\"hljs-comment\"># 文件将被上传至 MEDIA_ROOT/uploads</span><br>    upload = models.FileField(upload_to=<span class=\"hljs-string\">&#x27;uploads/&#x27;</span>)<br>    <span class=\"hljs-comment\"># or...</span><br>    <span class=\"hljs-comment\"># 文件将被上传至 MEDIA_ROOT/uploads/2015/01/30</span><br>    upload = models.FileField(upload_to=<span class=\"hljs-string\">&#x27;uploads/%Y/%m/%d/&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<p>如果使用默认的<code>FileSystemStorage</code>，字符串值将追加到<code>MEDIA_ROOT</code>路径，以形成本地文件系统上的位置，上传的文件将存储在此位置。如果使用不同的存储，请检查该存储的文档，以了解它如何处理<code>upload_to</code>。</p>\n<p><code>upload_to</code>也可以是一个可调用的函数。这个函数将被调用以获得上传路径，包括文件名。这个可调用函数必须接受两个参数，并返回一个<code>unix</code>风格的路径(带有斜杠)，以便传递给存储系统。这两个参数是:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>instance</code></td>\n<td>定义FileField的模型的一个实例。更具体地说，这是附加当前文件的特定实例。<br/>在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的<code>AutoField</code>，那么它的主键字段可能还没有值。</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>原给定给该文件的文件名。在确定最终目的地路径时，可能会考虑这一点，也可能不考虑这一点。</td>\n</tr>\n</tbody></table>\n<p>例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">user_directory_path</span>(<span class=\"hljs-params\">instance, filename</span>):</span><br>    <span class=\"hljs-comment\"># file will be uploaded to MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;user_&#123;0&#125;/&#123;1&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(instance.user.<span class=\"hljs-built_in\">id</span>, filename)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    upload = models.FileField(upload_to=user_directory_path)<br></code></pre></div></td></tr></table></figure>\n<h6 id=\"FileField-storage\"><a href=\"#FileField-storage\" class=\"headerlink\" title=\"FileField.storage\"></a><code>FileField.storage</code></h6><p>一个存储对象，它处理文件的存储和检索。有关如何提供此对象的详细信息，请参见 <a href=\"https://docs.djangoproject.com/en/2.2/topics/files/\">管理文件</a> 。</p>\n<p>在模型中使用<code>FileField</code>或<code>ImageField</code>需要几个步骤:</p>\n<ol>\n<li>在设置文件中，需要将<code>MEDIA_ROOT</code>定义为一个目录的完整路径，您希望<code>Django</code>在这个目录中存储上传的文件。(为了提高性能，这些文件不存储在数据库中。)将<code>MEDIA_URL</code>定义为该目录的基本公共<code>URL</code>。确保此目录可由<code>Web</code>服务器的用户帐户写入。</li>\n<li>将<code>FileField</code>或<code>ImageField</code>添加到模型中，定义<code>upload_to</code>选项，以指定<code>MEDIA_ROOT</code>的子目录，用于上传文件。</li>\n<li>所有将存储在数据库中的内容都是文件的路径(相对于<code>MEDIA_ROOT</code>)。您很可能希望使用Django提供的便利url属性。例如，如果 <code>ImageField</code>被称为 <code>mug_shot</code> ，可以获取模板中图像的绝对路径 <code>&#123;&#123; object.mug_shot.url &#125;&#125;</code> </li>\n</ol>\n<p>例如，假设<code>MEDIA_ROOT</code>设置为<code>&#39;/home/media&#39;</code>， <code>upload_to</code>设置为<code>&#39;photos/%Y/%m/%d&#39;</code>。<code>upload_to</code>的<code>&#39;%Y/%m/%d&#39;</code>部分是<code>strftime()</code>格式;<code>&#39;%Y&#39;</code>是四位数的年份，<code>&#39;%m&#39;是</code>两位数的月份，<code>&#39;%d&#39;</code>是两位数的日期。如果你在2007年1月15日上传了一个文件，它将被保存在<code>/home/media/photos/2007/01/15</code>目录下。</p>\n<p>如果要检索上传文件的磁盘上文件名或文件大小，可以分别使用<a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.name\"><code>名称</code></a> 和<a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.size\"><code>大小</code></a> 属性;有关可用属性和方法的更多信息，请参见 <a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File\"><code>文件</code></a>类引用和 <a href=\"https://docs.djangoproject.com/en/2.2/topics/files/\">管理文件</a>主题指南。</p>\n<blockquote>\n<p>文件作为模型保存在数据库中的一部分保存，因此在保存模型之前，不能依赖于磁盘上使用的实际文件名。</p>\n</blockquote>\n<p>请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传一个<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的<strong>URL</strong>来执行该脚本。不要允许这样的操作。</p>\n<p>还要注意，即使是上传的<strong>HTML</strong>文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传到<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的URL来执行该脚本。不要允许这样的操作。</p>\n<p>还要注意，即使是上传的HTML文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或<strong>CSRF</strong>攻击的安全威胁。攻击的安全威胁。</p>\n<blockquote>\n<p><code>FileField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h5><p>从<code>FileField</code>继承所有属性和方法，但也验证上传的对象是有效的图像。</p>\n<p>除了可用于<code>FileField</code>的特殊属性之外，<code>ImageField</code>还具有高度和宽度属性。</p>\n<p>为了方便查询这些属性，<code>ImageField</code>有两个额外的可选参数:</p>\n<h6 id=\"ImageField-height-field\"><a href=\"#ImageField-height-field\" class=\"headerlink\" title=\"ImageField.height_field\"></a><code>ImageField.height_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充映像的高度。</p>\n<h6 id=\"ImageField-width-field\"><a href=\"#ImageField-width-field\" class=\"headerlink\" title=\"ImageField.width_field\"></a><code>ImageField.width_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充图像的宽度。</p>\n<p>需要 <a href=\"https://pillow.readthedocs.io/en/latest/\">Pillow</a> 库。</p>\n<blockquote>\n<p><code>ImageField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h5><p>一个<code>CharField</code>，它的选择仅限于文件系统上某个目录中的文件名。有三个特殊的参数，其中第一个是必需的:</p>\n<h6 id=\"FilePathField-path\"><a href=\"#FilePathField-path\" class=\"headerlink\" title=\"FilePathField.path\"></a><code>FilePathField.path</code></h6><p>必需的。这个<code>FilePathField</code>应该从中获得其选择的目录的绝对文件系统路径。例如:<code>&quot;/ home /images&quot;</code>。</p>\n<h6 id=\"FilePathField-match\"><a href=\"#FilePathField-match\" class=\"headerlink\" title=\"FilePathField.match\"></a><code>FilePathField.match</code></h6><p>可选的。一个正则表达式，作为一个字符串，<code>FilePathField</code>将使用它来过滤文件名。注意，正则表达式将应用于基本文件名，而不是完整路径。示例:<strong><code>foo.*\\.txt$</code></strong>。它将匹配一个名为<code>foo23.txt</code>的文件，但不匹配<code>bar.txt</code>或<code>foo23.png</code>。</p>\n<h6 id=\"FilePathField-recursive\"><a href=\"#FilePathField-recursive\" class=\"headerlink\" title=\"FilePathField.recursive\"></a><code>FilePathField.recursive</code></h6><p>可选的。非真即假。默认是假的。指定是否应该包括<code>path</code>的所有子目录</p>\n<h6 id=\"FilePathField-allow-files\"><a href=\"#FilePathField-allow-files\" class=\"headerlink\" title=\"FilePathField.allow_files\"></a><code>FilePathField.allow_files</code></h6><p>可选的。非真即假。默认是正确的。指定是否应包括位于指定位置的文件。这个或<code>allow_folders</code>必须为真。</p>\n<h6 id=\"FilePathField-allow-folders\"><a href=\"#FilePathField-allow-folders\" class=\"headerlink\" title=\"FilePathField.allow_folders\"></a><code>FilePathField.allow_folders</code></h6><p>可选的。非真即假。默认是假的。指定是否应包括指定位置的文件夹。这个或allow_files必须为真。</p>\n<p>当然，这些参数可以一起使用。</p>\n<p>一个潜在的问题是，match应用于基本文件名，而不是完整路径。所以,这个例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">FilePathField(path=<span class=\"hljs-string\">&quot;/home/images&quot;</span>, match=<span class=\"hljs-string\">&quot;foo.*&quot;</span>, recursive=<span class=\"hljs-literal\">True</span>)<br></code></pre></div></td></tr></table></figure>\n<p>将匹配<code>/home/images/foo.png</code>，但不匹配<code>/home/images/foo/bar.png</code>，因为匹配应用于基本文件名(<code>foo.png</code>和<code>bar.png</code>)。</p>\n<blockquote>\n<p><code>FilePathField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"BinaryField\"><a href=\"#BinaryField\" class=\"headerlink\" title=\"BinaryField\"></a><code>BinaryField</code></h5><p>存储原始二进制数据的字段。可以为它分配字节、字节数组或内存视图。</p>\n<p>默认情况下，<code>BinaryField</code>将<code>editable</code>设置为<code>False</code>，在这种情况下，它不能包含在ModelForm中。</p>\n<p><code>BinaryField</code>有一个额外的可选参数:</p>\n<h6 id=\"BinaryField-max-length\"><a href=\"#BinaryField-max-length\" class=\"headerlink\" title=\"BinaryField.max_length\"></a><code>BinaryField.max_length</code></h6><p>字段的最大长度(以字符为单位)。最大长度在Django的验证中使用MaxLengthValidator实现。</p>\n<blockquote>\n<p>Django 2.1:<br>旧版本不允许将editable设置为True。</p>\n</blockquote>\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><h5 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h5><p>日期，在Python中用<code>datetime.date</code>实例表示。有一些额外的，可选的参数:</p>\n<h6 id=\"DateField-auto-now\"><a href=\"#DateField-auto-now\" class=\"headerlink\" title=\"DateField.auto_now\"></a><code>DateField.auto_now</code></h6><p>每次保存对象时自动将字段值设置为当前时间，用于“最后修改”时间戳。</p>\n<p>该字段只在调用<code>Model.save()</code>时自动更新。当以其他方式(如<code>QuerySet.update()</code>)更新其他字段时，该字段不会更新，不过可以在这样的更新中为该字段指定自定义值。</p>\n<h6 id=\"DateField-auto-now-add\"><a href=\"#DateField-auto-now-add\" class=\"headerlink\" title=\"DateField.auto_now_add\"></a><code>DateField.auto_now_add</code></h6><p>在第一次创建对象时自动将字段设置为当前时间。用于创建时间戳。</p>\n<p>即使在创建对象时为这个字段设置了值，它也会被忽略。如果您希望能够修改该字段，请将<code>auto_now_add=True</code>设置为以下内容:</p>\n<ul>\n<li>For <code>DateField</code>: <code>default=date.today</code> - from <code>datetime.date.today()</code></li>\n<li>For <code>DateTimeField</code>: <code>default=timezone.now</code> - from <code>django.utils.timezone.now()</code></li>\n</ul>\n<p><code>auto_now_add</code>、<code>auto_now</code>和<code>default</code>选项是互斥的。这些选项的任何组合都将导致错误。</p>\n<h5 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h5><p>日期和时间，在Python中用<code>datetime.datetime</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>\n<h5 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h5><p>时间，在Python中用<code>datetime.time</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>\n<h3 id=\"3-字段选项\"><a href=\"#3-字段选项\" class=\"headerlink\" title=\"3.字段选项\"></a>3.字段选项</h3><blockquote>\n<p>以下参数对所有字段类型均有效，且是可选的。</p>\n</blockquote>\n<h4 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a><code>null</code></h4><p>如果设置为 <code>True</code>， 当该字段为空时，Django 会将数据库中该字段设置为 <code>NULL</code>，默认为 <code>False</code>。</p>\n<p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和空字符串。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>\n<p>对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置<code>blank=True</code>，因为<code>null</code>参数只影响数据库存储(参见<code>blank</code>)。</p>\n<h4 id=\"blank\"><a href=\"#blank\" class=\"headerlink\" title=\"blank\"></a><code>blank</code></h4><p>如果设置为 <code>True</code> ，该字段允许为空。默认为 <code>False</code> 。</p>\n<p>注意，这与<code>null</code>不同。<code>null</code>纯粹是与数据库相关的，而<code>blank</code>则是与验证相关的。如果字段为<code>blank=True</code>，表单验证将允许输入空值。</p>\n<blockquote>\n<p>blank和null的用法区别</p>\n</blockquote>\n<ul>\n<li><p>null纯粹是与数据库相关的，而blank则是与表单验证相关的。</p>\n</li>\n<li><p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和<code>空字符串</code>。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>\n</li>\n<li><p>当存在两个参数时，总共会有四种设定组合</p>\n<ul>\n<li><code>blank=True</code>、<code>null=True</code>。统一的表明了该字段（列）是可以为空的。</li>\n<li><code>blank=False</code>、<code>null=False</code>。统一的表面了该字段（列）不可以为空。</li>\n<li><code>blank=True</code>、<code>null=False</code>。这个设定的意义在于，某些字段并不希望用户在表单中创建，而是通过在<code>save</code>方法中根据其他字段生成。</li>\n<li><code>blank=False</code>、<code>null=True</code>。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>只设定了<code>blank=True</code>而没有设定<code>null=True</code>的时候，通过<code>Admin</code>站点表单创建模型实例并且表单在该字段上没有值时数据库不报错呢？？？</p>\n</blockquote>\n<ul>\n<li>当没有设定<code>null=True</code>时，该列在数据库中就存在<code>NOT NULL</code>的约束，如果插入数据时这一列没有值，按理说数据库应该会报错才对</li>\n<li>出现这种情况的原因在于，<code>django</code>在处理某些在数据库中实际的存储值为字符串的<code>Field</code>时（如<code>CharField</code>, <code>TextField</code>, <code>ImageField</code>（图片文件的路径）），永远不会向数据库中填入空值。如果表单中某个<code>CharField</code>或者<code>TextField</code>字段为空，那么<code>django</code>会在数据库中填入<code>&quot;&quot;</code>，而不是<code>null</code>. </li>\n</ul>\n<h4 id=\"choices\"><a href=\"#choices\" class=\"headerlink\" title=\"choices\"></a><code>choices</code></h4><p>一个序列，它由两个元素(例如[(A, B)， (A, B)…])的迭代组成，作为这个字段的选择。如果提供了选择，则通过模型验证强制执行，默认的表单小部件将是一个包含这些选择的选择框，而不是标准的文本字段。</p>\n<p>每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">YEAR_IN_SCHOOL_CHOICES = [<br>    (<span class=\"hljs-string\">&#x27;FR&#x27;</span>, <span class=\"hljs-string\">&#x27;Freshman&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;SO&#x27;</span>, <span class=\"hljs-string\">&#x27;Sophomore&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;JR&#x27;</span>, <span class=\"hljs-string\">&#x27;Junior&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;SR&#x27;</span>, <span class=\"hljs-string\">&#x27;Senior&#x27;</span>),<br>]<br></code></pre></div></td></tr></table></figure>\n<p>通常，最好在模型类中定义选项，并为每个值定义一个适当命名的常量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    FRESHMAN = <span class=\"hljs-string\">&#x27;FR&#x27;</span><br>    SOPHOMORE = <span class=\"hljs-string\">&#x27;SO&#x27;</span><br>    JUNIOR = <span class=\"hljs-string\">&#x27;JR&#x27;</span><br>    SENIOR = <span class=\"hljs-string\">&#x27;SR&#x27;</span><br>    YEAR_IN_SCHOOL_CHOICES = [<br>        (FRESHMAN, <span class=\"hljs-string\">&#x27;Freshman&#x27;</span>),<br>        (SOPHOMORE, <span class=\"hljs-string\">&#x27;Sophomore&#x27;</span>),<br>        (JUNIOR, <span class=\"hljs-string\">&#x27;Junior&#x27;</span>),<br>        (SENIOR, <span class=\"hljs-string\">&#x27;Senior&#x27;</span>),<br>    ]<br>    year_in_school = models.CharField(<br>        max_length=<span class=\"hljs-number\">2</span>,<br>        choices=YEAR_IN_SCHOOL_CHOICES,<br>        default=FRESHMAN,<br>    )<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_upperclass</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.year_in_school <span class=\"hljs-keyword\">in</span> (self.JUNIOR, self.SENIOR)<br></code></pre></div></td></tr></table></figure>\n<p>虽然您可以在模型类的外部定义一个选择列表，然后引用它，但是在模型类内部定义每个选择的选择和名称，可以将所有信息与使用它的类一起保存，并使选择易于引用(例如：<strong>Student.SOPHOMORE</strong> 可以在导入<strong>Student</strong>模型类的任何地方使用)。</p>\n<p>您还可以将可用的选项收集到指定的组中，这些组可用于组织目的:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Media</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    MEDIA_CHOICES = [<br>        (<span class=\"hljs-string\">&#x27;Audio&#x27;</span>, (<br>            (<span class=\"hljs-string\">&#x27;vinyl&#x27;</span>, <span class=\"hljs-string\">&#x27;Vinyl&#x27;</span>),<br>            (<span class=\"hljs-string\">&#x27;cd&#x27;</span>, <span class=\"hljs-string\">&#x27;CD&#x27;</span>),<br>        )<br>         ),<br>        (<span class=\"hljs-string\">&#x27;Video&#x27;</span>, (<br>            (<span class=\"hljs-string\">&#x27;vhs&#x27;</span>, <span class=\"hljs-string\">&#x27;VHS Tape&#x27;</span>),<br>            (<span class=\"hljs-string\">&#x27;dvd&#x27;</span>, <span class=\"hljs-string\">&#x27;DVD&#x27;</span>),<br>        )<br>         ),<br>        (<span class=\"hljs-string\">&#x27;unknown&#x27;</span>, <span class=\"hljs-string\">&#x27;Unknown&#x27;</span>),<br>    ]<br><br>    media = models.CharField(<br>        max_length=<span class=\"hljs-number\">10</span>,<br>        choices=MEDIA_CHOICES,<br>        default=<span class=\"hljs-string\">&#x27;cd&#x27;</span><br>    )<br></code></pre></div></td></tr></table></figure>\n<p>每个元组中的第一个元素是应用于组的名称。第二个元素是二元组的迭代，每个二元组包含一个值和一个可读的选项名。分组选项可以与单个列表中的未分组选项组合在一起(例如本例中的未知选项)。</p>\n<p>注意，选择可以是任何序列对象–不一定是列表或元组。这允许您动态地构造选择。但是，如果您发现自己的选择是动态的，那么最好使用一个带有 <code>ForeignKey</code>的数据库表。但是静态数据不会有太大的变化。</p>\n<p>对于每个设置了选项的字段，对象都有一个<code>get_FOO_display()</code>方法，其中<code>FOO</code>是字段的名称。该方法返回字段的”人易读”值。</p>\n<p>例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    SHIRT_SIZES = (<br>        (<span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;Small&#x27;</span>),<br>        (<span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;Medium&#x27;</span>),<br>        (<span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;Large&#x27;</span>),<br>    )<br>    name = models.CharField(max_length=<span class=\"hljs-number\">60</span>)<br>    shirt_size = models.CharField(max_length=<span class=\"hljs-number\">2</span>, choices=SHIRT_SIZES)<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">&gt;&gt;&gt; p = Person(name=<span class=\"hljs-string\">&quot;Fred Flintstone&quot;</span>, shirt_size=<span class=\"hljs-string\">&quot;L&quot;</span>)<br>&gt;&gt;&gt; p.save()<br>&gt;&gt;&gt; p.shirt_size<br><span class=\"hljs-string\">&#x27;L&#x27;</span><br>&gt;&gt;&gt; p.get_shirt_size_display()<br><span class=\"hljs-string\">&#x27;Large&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"db-column\"><a href=\"#db-column\" class=\"headerlink\" title=\"db_column\"></a><code>db_column</code></h4><p>要用于此字段的数据库列的名称。如果没有给出，Django将使用字段的名称。</p>\n<h4 id=\"db-index\"><a href=\"#db-index\" class=\"headerlink\" title=\"db_index\"></a><code>db_index</code></h4><p>如果为真，将为此字段创建一个数据库索引。</p>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p>该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。</p>\n<p>默认值不能是一个可变的对象(模型实例、列表、集合等)，因为对该对象的同一个实例的引用将被用作所有模型实例的默认值。反而，可以在回调函数中打包处理所需的默认值。例如，如果要为<code>JSONField</code>指定默认<code>dict</code>，可以使用一个函数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">contact_default</span>():</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-string\">&quot;email&quot;</span>: <span class=\"hljs-string\">&quot;to1@example.com&quot;</span>&#125;<br><br>contact_info = JSONField(<span class=\"hljs-string\">&quot;ContactInfo&quot;</span>, default=contact_default)<br></code></pre></div></td></tr></table></figure>\n<p><strong>lambda</strong>表达式不能用于像<strong>default</strong>这样的字段选项，因为它们不能被迁移序列化。</p>\n<p>对于像映射模型实例的<code>ForeignKey</code>这样的字段，默认值应该是它们引用的字段的值(<code>pk</code>，除非设置<code>to_field</code>)，而不是模型实例。</p>\n<p>当创建新的模型实例并且没有为字段提供值时，将使用默认值。当字段是主键时，当字段设置为<code>None</code>时也会使用默认值。</p>\n<h4 id=\"help-text\"><a href=\"#help-text\" class=\"headerlink\" title=\"help_text\"></a><code>help_text</code></h4><p>额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。</p>\n<p>注意，这个值不会在自动生成的表单中进行<code>html</code>转义的。如果您愿意，可以在<code>help_text</code>中包含<strong>HTML</strong>。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">help_text=<span class=\"hljs-string\">&quot;Please use the following format: &lt;em&gt;YYYY-MM-DD&lt;/em&gt;.&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>或者，您可以使用纯文本和<code>django.utils.html.escape()</code>来转义任何<strong>HTML</strong>特殊字符。确保转义任何来自不可信用户的帮助文本，以避免跨站点脚本攻击。</p>\n<h4 id=\"primary-key\"><a href=\"#primary-key\" class=\"headerlink\" title=\"primary_key\"></a><code>primary_key</code></h4><p>如果设置为 <code>True</code> ，将该字段设置为该模型的主键。</p>\n<p>如果您没有为模型中的任何字段指定<code>primary_key=True</code>, <strong>Django</strong>将自动添加一个<code>AutoField</code>来保存主键，所以您不需要在任何字段上设置<code>primary_key=True</code>，除非您想覆盖默认的主键行为。</p>\n<p><code>primary_key=True</code>意味着<code>null=False</code>和<code>unique=True</code>。对象上只允许有一个主键。</p>\n<p>主键字段是只读的。如果更改现有对象上的主键值并保存它，则将在旧对象旁边创建一个新对象。</p>\n<h4 id=\"unique\"><a href=\"#unique\" class=\"headerlink\" title=\"unique\"></a><code>unique</code></h4><p>如果设置为 <code>True</code>，这个字段必须在整个表中保持值唯一。</p>\n<p>这是在数据库级和通过模型验证实现的。如果试图在惟一字段中保存具有重复值的模型，则模型的<code>save()</code>方法会产生一个<code>django.db.IntegrityError</code>。</p>\n<p>这个选项对除了<code>ManyToManyField</code>和<code>OneToOneField</code>以外的所有字段类型都有效。</p>\n<p>注意，当<code>unique</code>为真时，不需要指定<code>db_index</code>，因为<code>unique</code>意味着创建索引。</p>\n<h4 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a><code>verbose_name</code></h4><p>字段的可读名称。如果没有给出详细的名称，Django将使用字段的属性名自动创建它，将下划线转换为空格。</p>\n<p>除了 <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>，任何字段类型都接收一个可选位置的参数 <code>verbose_name</code>，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。</p>\n<p>在该例中：备注名为 <code>&quot;person&#39;s first name&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">first_name = models.CharField(<span class=\"hljs-string\">&quot;person&#x27;s first name&quot;</span>, max_length=<span class=\"hljs-number\">30</span>)<br></code></pre></div></td></tr></table></figure>\n<p>在该例中：备注名为 <code>&quot;first name&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">first_name = models.CharField(max_length=<span class=\"hljs-number\">30</span>)<br></code></pre></div></td></tr></table></figure>\n<p> <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>接收的第一个参数为模型的类名，后面可以添加一个 <code>verbose_name</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">poll = models.ForeignKey(<br>    Poll,<br>    on_delete=models.CASCADE,<br>    verbose_name=<span class=\"hljs-string\">&quot;the related poll&quot;</span>,<br>)<br>sites = models.ManyToManyField(Site, verbose_name=<span class=\"hljs-string\">&quot;list of sites&quot;</span>)<br>place = models.OneToOneField(<br>    Place,<br>    on_delete=models.CASCADE,<br>    verbose_name=<span class=\"hljs-string\">&quot;related place&quot;</span>,<br>)<br></code></pre></div></td></tr></table></figure>\n<p>惯例是不将<code>verbose_name</code> 的首字母大写，必要时 <strong>Djanog</strong> 会自动把首字母转换为大写。</p>\n<h4 id=\"validators\"><a href=\"#validators\" class=\"headerlink\" title=\"validators\"></a><code>validators</code></h4><p>要为此字段运行的验证器列表。</p>\n<h5 id=\"编写验证器\"><a href=\"#编写验证器\" class=\"headerlink\" title=\"编写验证器\"></a>编写验证器</h5><p><code>validator</code>是一个可调用的函数，它接受一个值，如果它不满足某些条件，就会引发<code>ValidationError</code>。验证器对于在不同类型的字段之间重用验证逻辑非常有用。</p>\n<p>例如，这里有一个验证器，它只允许偶数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.exceptions <span class=\"hljs-keyword\">import</span> ValidationError<br><span class=\"hljs-keyword\">from</span> django.utils.translation <span class=\"hljs-keyword\">import</span> gettext_lazy <span class=\"hljs-keyword\">as</span> _<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_even</span>(<span class=\"hljs-params\">value</span>):</span><br>    <span class=\"hljs-keyword\">if</span> value % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">raise</span> ValidationError(<br>            _(<span class=\"hljs-string\">&#x27;%(value)s is not an even number&#x27;</span>),<br>            params=&#123;<span class=\"hljs-string\">&#x27;value&#x27;</span>: value&#125;,<br>        )<br></code></pre></div></td></tr></table></figure>\n<p>您可以通过字段的<code>validators</code>参数将其添加到模型字段:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    even_field = models.IntegerField(validators=[validate_even])<br></code></pre></div></td></tr></table></figure>\n<p>因为值在运行验证器之前就转换成了Python，你甚至可以对表单使用相同的验证器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django <span class=\"hljs-keyword\">import</span> forms<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyForm</span>(<span class=\"hljs-params\">forms.Form</span>):</span><br>    even_field = forms.IntegerField(validators=[validate_even])<br></code></pre></div></td></tr></table></figure>\n<p>对于更复杂或可配置的验证器，您还可以使用带有<code>__call__()</code>方法的类。例如， <code>RegexValidator</code>这类验证器。如果在<code>validators</code> <code>model</code>字段选项中使用基于类的验证器,应该添加<code>deconstruct()</code>装饰器和 <code>__eq__()</code> 方法让它可以被迁移框架序列化。</p>\n<p> <a href=\"https://docs.djangoproject.com/zh-hans/2.2/ref/validators/#built-in-validators\"><code>django.core.validators</code></a>模块包含一组可调用的验证器，用于模型和表单字段，可以在内部使用它们。</p>\n<h3 id=\"4-Meta-选项\"><a href=\"#4-Meta-选项\" class=\"headerlink\" title=\"4. Meta 选项\"></a>4. <code>Meta</code> 选项</h3><p>使用内部 <code>Meta类</code> 来给模型赋予元数据，就像：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Ox</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    horn_length = models.IntegerField()<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        ordering = [<span class=\"hljs-string\">&quot;horn_length&quot;</span>]<br>        verbose_name_plural = <span class=\"hljs-string\">&quot;oxen&quot;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"abstract\"><a href=\"#abstract\" class=\"headerlink\" title=\"abstract\"></a><code>abstract</code></h4><p>抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 <strong>Meta</strong> 类中填入 <code>abstract=True</code>。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。</p>\n<p>一个例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommonInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br>    age = models.PositiveIntegerField()<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        abstract = <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">CommonInfo</span>):</span><br>    home_group = models.CharField(max_length=<span class=\"hljs-number\">5</span>)<br></code></pre></div></td></tr></table></figure>\n<p><code>Student</code> 模型拥有3个字段： <code>name</code>， <code>age</code> 和 <code>home_group</code>。 <code>CommonInfo</code> 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。</p>\n<p>从抽象基类继承来的字段可被其它字段或值重写，或用 <code>None</code> 删除。</p>\n<p>对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。</p>\n<h4 id=\"app-label\"><a href=\"#app-label\" class=\"headerlink\" title=\"app_label\"></a><code>app_label</code></h4><p>如果一个模型是在<code>INSTALLED_APPS</code>中注册的<strong>APP</strong>外部定义的，它必须声明它属于哪个应用程序:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">app_label = <span class=\"hljs-string\">&#x27;myapp&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a><code>db_table</code></h4><p>要用于模型的数据库表的名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">db_table = <span class=\"hljs-string\">&#x27;music_album&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<p>为了节省时间，Django自动从模型类和包含它的应用程序的名称派生数据库表的名称。模型的数据库表名是通过将模型的<strong>“app label”</strong>(您在<code>manage.py startapp</code>中使用的名称)与模型的类名连接在一起，并在它们之间加一个下划线来构造的。</p>\n<p>例如，如果您有一个应用<strong>bookstore</strong>(由 <code>manage.py startapp bookstore</code>创建)，定义为<strong>Book</strong>的模型类将有一个名为<code>bookstore_book</code>的数据库表。</p>\n<p>要覆盖数据库表名，请使用类元中的db_table参数。</p>\n<blockquote>\n<p>强烈建议在通过db_table覆盖表名时使用小写的表名，特别是在使用MySQL后端时。</p>\n</blockquote>\n<h4 id=\"ordering\"><a href=\"#ordering\" class=\"headerlink\" title=\"ordering\"></a><code>ordering</code></h4><p>对象的默认顺序，用于获取对象列表:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-order_date&#x27;</span>]<br></code></pre></div></td></tr></table></figure>\n<p>这是一个 包含由字符串和/或构成的查询表达式的元组或列表。每个字符串都是一个带有可选<code>&quot;-&quot;</code>前缀的字段名，表示按降序排列。没有前缀<code>&quot;-&quot;</code>的字段将按升序排列。使用字符串<code>&quot;?&quot;</code>随机排序。</p>\n<p>例如，要按<code>pub_date</code>字段升序排序，可以使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;pub_date&#x27;</span>]<br></code></pre></div></td></tr></table></figure>\n<p>要按pub_date降序排列，请使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-pub_date&#x27;</span>]<br></code></pre></div></td></tr></table></figure>\n<p>按pub_date降序排列，然后按author升序排列，使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-pub_date&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>]<br></code></pre></div></td></tr></table></figure>\n<p>您还可以使用查询表达式。要按作者升序排序并使空值排序持续，请使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db.models <span class=\"hljs-keyword\">import</span> F<br><br>ordering = [F(<span class=\"hljs-string\">&#x27;author&#x27;</span>).asc(nulls_last=<span class=\"hljs-literal\">True</span>)]<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"permissions\"><a href=\"#permissions\" class=\"headerlink\" title=\"permissions\"></a><code>permissions</code></h4><p>创建此对象时进入权限表的额外权限。为每个模型自动创建添加、更改、删除和视图权限。这个例子指定了一个额外的权限<code>can_deliver_pizzas</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">permissions = [(<span class=\"hljs-string\">&#x27;can_deliver_pizzas&#x27;</span>, <span class=\"hljs-string\">&#x27;Can deliver pizzas&#x27;</span>)]<br></code></pre></div></td></tr></table></figure>\n<p>这是一个格式为<strong>(permission_code,</strong> <strong>human_readable_permission_name)</strong>的二元列表或元组。</p>\n<h4 id=\"indexes\"><a href=\"#indexes\" class=\"headerlink\" title=\"indexes\"></a><code>indexes</code></h4><p>要在模型上定义的索引列表:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Customer</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    first_name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br>    last_name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        indexes = [<br>            models.Index(fields=[<span class=\"hljs-string\">&#x27;last_name&#x27;</span>, <span class=\"hljs-string\">&#x27;first_name&#x27;</span>]),<br>            models.Index(fields=[<span class=\"hljs-string\">&#x27;first_name&#x27;</span>], name=<span class=\"hljs-string\">&#x27;first_name_idx&#x27;</span>),<br>        ]<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"verbose-name-1\"><a href=\"#verbose-name-1\" class=\"headerlink\" title=\"verbose_name\"></a><code>verbose_name</code></h4><p>模型对象的人类可读的单数名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">verbose_name = <span class=\"hljs-string\">&quot;pizza&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>如果没有给出这个值，Django将使用类名的一个简化版本:<code>CamelCase</code>变成<code>camel case</code>。</p>\n<h4 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a><code>verbose_name_plural</code></h4><p>对象的复数名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\">verbose_name_plural = <span class=\"hljs-string\">&quot;stories&quot;</span><br></code></pre></div></td></tr></table></figure>\n<p>如果没有给出，Django将使用 <code>verbose_name</code>+ <code>&quot;s&quot;</code></p>\n<h3 id=\"5-关联关系\"><a href=\"#5-关联关系\" class=\"headerlink\" title=\"5.关联关系\"></a>5.关联关系</h3><p>显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：多对一，多对多，一对一。                                                                </p>\n<h4 id=\"1、多对一关联\"><a href=\"#1、多对一关联\" class=\"headerlink\" title=\"1、多对一关联\"></a>1、多对一关联</h4><p>定义一个多对一的关联关系，使用 <code>django.db.models.ForeignKey</code> 类。就和其它 <code>Field</code>字段类型一样，只需要在你模型中添加一个值为该类的属性。</p>\n<p><code>ForeignKey</code> 类需要添加一个位置参数，即你想要关联的模型类名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字ForeignKey</span><br>publish = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Publish&#x27;</span>)  <span class=\"hljs-comment\"># to用来指代跟哪张表有关系 默认关联的就是表的主键字段</span><br><span class=\"hljs-comment\"># 外键字段名在创建时会自动加上_id后缀</span><br></code></pre></div></td></tr></table></figure>\n<h5 id=\"字段参数\"><a href=\"#字段参数\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code>:设置要关联的表</p>\n</li>\n<li><p><code>to_field</code>:设置要关联的表的字段(一般不设置，默认使用主键id关联)</p>\n</li>\n<li><p><code>related_name</code>:反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code></p>\n</li>\n<li><p><code>related_query_name</code>:反向查询操作时，使用的连接前缀，用于替换表名</p>\n</li>\n<li><p><code>db_constraint</code>:是否在数据库中创建外键约束，默认为True。</p>\n</li>\n<li><p><code>on_delete</code>:当删除关联表中的数据时，当前表与其关联的行的行为。</p>\n<ol>\n<li><p><code>models.CASCADE</code>:删除关联数据，与之关联的数据也删联(<code>on_delete=models.CASCADE</code>)</p>\n</li>\n<li><p>抛出异常(错误)</p>\n<ol>\n<li><code>models.DO_NOTHING</code>:删除关联数据，引发错误<code>IntegrityError</code>       </li>\n<li><code>models.PROTECT</code><br>删除关联数据，引发错误<code>ProtectedError</code></li>\n</ol>\n</li>\n<li><p><code>models.SET_NULL</code>:删除关联数据，与之关联的值设置为<code>null</code>（前提FK字段需要设置为可空）</p>\n</li>\n<li><p><code>models.SET_DEFAULT</code>:删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）</p>\n</li>\n<li><p><code>models.SET</code>:删除关联数据</p>\n<ol>\n<li>与之关联的值设置为指定值，设置：<code>models.SET(值)</code></li>\n<li>与之关联的值设置为可执行对象的返回值，设置：<code>models.SET(可执行对象)</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"2、OneToOneField-一对一\"><a href=\"#2、OneToOneField-一对一\" class=\"headerlink\" title=\"2、OneToOneField(一对一)\"></a>2、OneToOneField(一对一)</h4><blockquote>\n<p>外键字段创建在任意一张表都可以，建议外键添加在查询频率较高的一方</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字OneToOneField</span><br>author_detail = models.OneToOneField(to=<span class=\"hljs-string\">&#x27;Author_detail&#x27;</span>)  <span class=\"hljs-comment\"># 外键本质fk + unique</span><br></code></pre></div></td></tr></table></figure>\n<h5 id=\"字段参数-1\"><a href=\"#字段参数-1\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code> :设置要关联的表。</p>\n</li>\n<li><p><code>to_field</code>:设置要关联的字段。</p>\n</li>\n<li><p><code>on_delete</code>:同ForeignKey字段。</p>\n</li>\n</ol>\n<h4 id=\"3、ManyToManyField-多对多\"><a href=\"#3、ManyToManyField-多对多\" class=\"headerlink\" title=\"3、ManyToManyField(多对多)\"></a>3、ManyToManyField(多对多)</h4><blockquote>\n<p>用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字ManyToManyField</span><br>author = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)  <br><span class=\"hljs-comment\"># django orm会自动帮你创建第三张关系表，表名为两个关联的表名用_连接</span><br></code></pre></div></td></tr></table></figure>\n<h5 id=\"字段参数-2\"><a href=\"#字段参数-2\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code>:设置要关联的表</p>\n</li>\n<li><p><code>related_name</code>:同<code>ForeignKey</code>字段(反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code>)</p>\n</li>\n<li><p><code>related_query_name</code>:同<code>ForeignKey</code>字段(反向查询操作时，使用的连接前缀，用于替换表名)</p>\n</li>\n<li><p><code>symmetric</code>:仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为<code>True</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br>    friends = models.ManyToManyField(<span class=\"hljs-string\">&quot;self&quot;</span>)<br>    <span class=\"hljs-comment\"># 此时，person对象就没有person_set属性。</span><br>   <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br>    friends = models.ManyToManyField(<span class=\"hljs-string\">&quot;self&quot;</span>,symmetrical=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 此时，person对象现在就可以使用person_set属性进行反向查询。</span><br></code></pre></div></td></tr></table></figure></li>\n<li><p><code>through</code>:在使用<code>ManyToManyField</code>字段时，<code>Django</code>将自动生成一张表        来管理多对多的关联关系。但我们也可以手动创建第三张表来管理多对多关系，此时就需要通过<code>through</code>来指定第三张表的表名。</p>\n</li>\n<li><p><code>through_fields</code>:设置关联的字段。</p>\n</li>\n<li><p><code>db_table</code>:默认创建第三张表时，数据库中表的名称。</p>\n</li>\n</ol>\n<h5 id=\"多对多的三种创建方式\"><a href=\"#多对多的三种创建方式\" class=\"headerlink\" title=\"多对多的三种创建方式\"></a>多对多的三种创建方式</h5><ol>\n<li><p>自己建立第三张关系表，外键分别关联两个表</p>\n<ul>\n<li><p>优点:可以扩充第三张关系标的字段</p>\n</li>\n<li><p>缺点:自己做连表查询</p>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-comment\"># 1. 多对多第一种创建方式：自己创建第三张关系表</span><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author2Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     <span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br>     author_id = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)<br>     book_id = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)<br>     price = models.IntegerField()  <span class=\"hljs-comment\"># 可以自己扩充需要的字段</span><br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过ORM内置的ManyToManyField，自动创建第三张关系表</p>\n<ul>\n<li><p>优点:提供了很多连表操作的快捷方法,<code>all()</code>, <code>add()</code>, <code>set()</code>, <code>clear()</code>, <code>remove()</code></p>\n</li>\n<li><p>缺点:无法扩展第三张关系表</p>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br>     books = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)  <span class=\"hljs-comment\"># 字段就这些，无法扩充其他字段</span><br><br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>自己创建第三张关系表，通过ManyToManyField关联</p>\n<ul>\n<li><p>优点：</p>\n<ul>\n<li>既能够使用多对多查询的快捷方法all()(只能用all，不能使用add,set等)</li>\n<li>还能够自己扩展第三张关系表的字段</li>\n</ul>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br>     <span class=\"hljs-comment\"># 告诉ManyToManyField通过(through)Author2Book这张表进行关联，不使用ORM自动创建的第三张表，而是使用我自己创建的表</span><br>     <span class=\"hljs-comment\"># through_fields告诉ORM通过哪几个字段进行多对多关联</span><br>     books = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>, through=<span class=\"hljs-string\">&#x27;Author2Book&#x27;</span>, through_fields=(<span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;book&#x27;</span>))<br><br> <span class=\"hljs-comment\"># 1. 多对多第三种创建方式：自己创建第三张关系表，此时外键不需要添加_id了，因为ORM会默认帮你在外键后面加_id</span><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author2Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     <span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br>     author = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)<br>     book = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)<br>     price = models.IntegerField(null=<span class=\"hljs-literal\">True</span>)<br> <br>     <span class=\"hljs-comment\"># author_id和book_id要联合唯一</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>         unique_together = ((<span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;book&#x27;</span>),)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li><p>操作例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多对多的第三张方式也支持all查询</span><br>author_obj = Author.objects.first()<br><span class=\"hljs-comment\"># 第一个作者的所有书籍</span><br>ret = author_obj.books.<span class=\"hljs-built_in\">all</span>()<br> <br><span class=\"hljs-comment\"># 给第一个作者添加一本书</span><br><span class=\"hljs-comment\"># author_obj.books.add(4) # 报错</span><br>Author2Book.objects.create(author_id=<span class=\"hljs-number\">1</span>, book_id=<span class=\"hljs-number\">4</span>)<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、ORM介绍\"><a href=\"#一、ORM介绍\" class=\"headerlink\" title=\"一、ORM介绍\"></a>一、ORM介绍</h2><h3 id=\"1-什么是-ORM\"><a href=\"#1-什么是-ORM\" class=\"headerlink\" title=\"1. 什么是 ORM\"></a>1. 什么是 ORM</h3><ul>\n<li><p><strong><code>ORM</code></strong> 全拼<code>Object-Relation Mapping</code></p>\n</li>\n<li><p>中文意为 <strong><code>对象-关系映射</code></strong></p>\n</li>\n<li><p>在<code>MVC</code>/<code>MVT</code>设计模式中的<code>Model</code>模块中都包括<code>ORM</code></p>\n</li>\n</ul>\n<h3 id=\"2-ORM-优势\"><a href=\"#2-ORM-优势\" class=\"headerlink\" title=\"2.ORM 优势\"></a>2.ORM 优势</h3><p>（1）只需要面向对象编程, 不需要面向数据库编写代码.</p>\n<ul>\n<li>对数据库的操作都转化成对类属性和方法的操作.</li>\n<li>不用编写各种数据库的 sql 语句.</li>\n</ul>\n<p>（2）实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.</p>\n<ul>\n<li>不在关注用的是<code>mysql</code>、<code>oracle</code>… 等.</li>\n<li>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</li>\n</ul>\n<h3 id=\"3-ORM-劣势\"><a href=\"#3-ORM-劣势\" class=\"headerlink\" title=\"3.ORM 劣势\"></a>3.ORM 劣势</h3><ul>\n<li>相比较直接使用 SQL 语句操作数据库, 有性能损失.</li>\n<li>根据对象的操作转换成 SQL 语句, 根据查询的结果转化成对象, 在映射过程中有性能损失.</li>\n</ul>\n<h3 id=\"4-ORM-和数据库关系：\"><a href=\"#4-ORM-和数据库关系：\" class=\"headerlink\" title=\"4.ORM 和数据库关系：\"></a>4.ORM 和数据库关系：</h3><p>在 Django 中 model 是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.</p>\n<p>基本情况：</p>\n<p>每个模型都是一个 Python 类，它是 django.db.models.Model 的子类。</p>\n<p>模型的每个属性都代表一个数据库字段。</p>\n<p>综上所述，Django 为您提供了一个自动生成的数据库访问 API。</p>\n<p><img src=\"https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ORM%E7%A4%BA%E6%84%8F%E5%9B%BE%20.png\" alt=\"ORM示意图\"></p>\n<h2 id=\"二、Django配置使用mysql数据库\"><a href=\"#二、Django配置使用mysql数据库\" class=\"headerlink\" title=\"二、Django配置使用mysql数据库\"></a>二、Django配置使用mysql数据库</h2><h3 id=\"settings-py配置DATABASES\"><a href=\"#settings-py配置DATABASES\" class=\"headerlink\" title=\"settings.py配置DATABASES\"></a><code>settings.py</code>配置<code>DATABASES</code></h3><p>默认:<code>&#123;&#125;</code>(空字典)</p>\n<p>一个字典，包含Django使用的所有数据库的设置。它是一个嵌套的字典，其内容将数据库别名映射到包含单个数据库选项的字典。</p>\n<p>数据库设置必须配置一个默认数据库;还可以指定任意数量的其他数据库。</p>\n<p>最简单的设置文件是针对使用SQLite的单数据库设置的。这可以配置使用以下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.sqlite3&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class=\"hljs-string\">&#x27;db.sqlite3&#x27;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当连接到其他数据库后端(如<code>MySQL</code>、<code>Oracle</code>或<code>PostgreSQL</code>)时，需要额外的连接参数。有关如何指定其他数据库类型，请参阅下面的引擎设置。这个例子是为<code>MySQL</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;django_test&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;mysqlroot&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,<br>        <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"MySQL连接工具\"><a href=\"#MySQL连接工具\" class=\"headerlink\" title=\"MySQL连接工具\"></a><code>MySQL</code>连接工具</h3><ol>\n<li><p>需要安装<code>pymysql</code>模块</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">pip install pymysql<br></code></pre></td></tr></table></figure></li>\n<li><p>在项目的<code>__init__.py</code>初始化文件,添加如下信息:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure></li>\n<li><p>在django最新版本中，提示”Django需要mysqlclient 1.3.13或更高版本”。要么在报错时，将抛出版本异常的代码注释掉,仍然使用<code>pymysql</code>；要么直接使用<code>mysqlclient</code>,不建议直接<code>pip</code>命令安装，可以使用<code>conda</code>创建虚拟环境，使用<code>conda</code>安装<code>mysqlclient</code>。</p>\n</li>\n</ol>\n<h2 id=\"三、字段属性和选项\"><a href=\"#三、字段属性和选项\" class=\"headerlink\" title=\"三、字段属性和选项\"></a>三、字段属性和选项</h2><h3 id=\"1-模型类属性命名限制\"><a href=\"#1-模型类属性命名限制\" class=\"headerlink\" title=\"1.模型类属性命名限制\"></a>1.模型类属性命名限制</h3><ul>\n<li><p>不能是python的保留关键字。</p>\n</li>\n<li><p><strong>不允许使用连续的下划线，这是由django的查询方式决定的。</strong></p>\n</li>\n<li><p>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">属性名=models.字段类型(选项)<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-字段类型\"><a href=\"#2-字段类型\" class=\"headerlink\" title=\"2.字段类型\"></a>2.字段类型</h3></li>\n</ul>\n<h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><h5 id=\"AutoField\"><a href=\"#AutoField\" class=\"headerlink\" title=\"AutoField\"></a><code>AutoField</code></h5><p>根据可用id自动递增的一个32位(<code>4 byte</code>)的整数(<code>Integer</code>)字段,它的适用范围为:<code>1</code>到<code>2147483647</code>之间。</p>\n<p>你通常不需要直接使用它;如果不进行其他指定，主键字段将自动添加到模型中。</p>\n<p>默认情况下， Django 会给每一个模型添加下面的字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<p>这是一个自增的主键。</p>\n<p>如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 <code>primary_key=True</code>。如果 Django 看到你显式地设置了 <code>Field.primary_key</code>，将不会自动在表（模型）中添加 <code>id</code> 列。</p>\n<p>每个模型都需要拥有一个设置了 <code>primary_key=True</code> 的字段（无论是显式的设置还是 Django 自动设置）</p>\n<h5 id=\"BigAutoField\"><a href=\"#BigAutoField\" class=\"headerlink\" title=\"BigAutoField\"></a><code>BigAutoField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>AutoField</code>，除了它的适用范围为:<code>1</code>到<code>9223372036854775807</code>之间。</p>\n<h5 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数。在Django支持的所有数据库中，<code>-2147483648</code>到<code>2147483647</code>之间的值都是安全的。</p>\n<h5 id=\"BigIntegerField\"><a href=\"#BigIntegerField\" class=\"headerlink\" title=\"BigIntegerField\"></a><code>BigIntegerField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>IntegerField</code>，除了它保证适合从<code>-9223372036854775808</code>到<code>9223372036854775807</code>的数字。</p>\n<h5 id=\"SmallIntegerField\"><a href=\"#SmallIntegerField\" class=\"headerlink\" title=\"SmallIntegerField\"></a><code>SmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>IntegerField</code>,在Django支持的所有数据库中，<code>-32768</code>到<code>32767</code>之间的值都是安全的。</p>\n<h5 id=\"PositiveIntegerField\"><a href=\"#PositiveIntegerField\" class=\"headerlink\" title=\"PositiveIntegerField\"></a><code>PositiveIntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数，类似于<code>IntegerField</code>，但必须是正数或零(0)。在Django支持的所有数据库中，<code>0</code>到<code>2147483647</code>之间的值都是安全的。由于向后兼容的原因，接受值<code>0</code>。</p>\n<h5 id=\"PositiveSmallIntegerField\"><a href=\"#PositiveSmallIntegerField\" class=\"headerlink\" title=\"PositiveSmallIntegerField\"></a><code>PositiveSmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>PositiveIntegerField</code>，在Django支持的所有数据库中，<code>0</code>到<code>32767</code>之间的值都是安全的</p>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><h5 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h5><p>在Python中由 <code>float</code> 实例表示的浮点数。</p>\n<h5 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h5><p>一种固定精度的十进制数，在Python中用<code>Decimal</code>实例表示。它使用<code>DecimalValidator</code>验证输入。</p>\n<p>有两个必要的参数:</p>\n<h6 id=\"DecimalField-max-digits\"><a href=\"#DecimalField-max-digits\" class=\"headerlink\" title=\"DecimalField.max_digits\"></a><code>DecimalField.max_digits</code></h6><p>数字中允许的最大位数。注意，这个数字必须大于或等于<code>decimal_places</code>。</p>\n<h6 id=\"DecimalField-decimal-places\"><a href=\"#DecimalField-decimal-places\" class=\"headerlink\" title=\"DecimalField.decimal_places\"></a><code>DecimalField.decimal_places</code></h6><p>要与该数字一起存储的小数位数。</p>\n<p>例如，要存储分辨率为两位小数的999以内的数字，需要使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">models.DecimalField(..., max_digits=<span class=\"hljs-number\">5</span>, decimal_places=<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>FloatField</code> <strong>vs.</strong> <code>DecimalField</code></p>\n<p><code>FloatField</code>类有时会与<code>DecimalField</code>类混在一起。虽然它们都表示实数，但它们表示的是不同的数。<code>FloatField</code>在内部使用Python的<code>float</code>类型，而<code>DecimalField</code>使用Python的<code>Decimal</code>类型。有关两者之间差异的信息，请参阅Python的 <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\"><code>decimal</code></a> 模块文档。</p>\n</blockquote>\n<h4 id=\"布尔\"><a href=\"#布尔\" class=\"headerlink\" title=\"布尔\"></a>布尔</h4><h5 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h5><p>一个<code>true</code>/<code>false</code>字段。</p>\n<p>当<code>Field.default</code>未定义时，<code>BooleanField</code>的默认值为<code>None</code></p>\n<blockquote>\n<p>Django 2.1:<br>在旧版本中，这个字段不允许<code>null=True</code>，因此必须使用<code>NullBooleanField</code>。现在不建议使用后者，因为在Django的未来版本中可能会弃用它。</p>\n<p>在较早的版本中，该字段隐式地具有<code>blank=True</code>。您可以通过设置blank=True来恢复前面的行为。</p>\n</blockquote>\n<h5 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h5><p>类似<code>BooleanField</code>的<code>null=True</code>。使用<code>BooleanField</code>这个字段而不是<code>NullBooleanField</code>这个字段，因为在Django的未来版本中<code>NullBooleanField</code>可能会被弃用</p>\n<h4 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h4><h5 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h5><p>字符串字段，用于小型到大型字符串。<code>CharField</code>有一个额外的必要参数:</p>\n<h6 id=\"CharField-max-length\"><a href=\"#CharField-max-length\" class=\"headerlink\" title=\"CharField.max_length\"></a><code>CharField.max_length</code></h6><p>字段的最大长度(以字符为单位)。<code>max_length</code>在数据库标准和Django的验证中使用<code>MaxLengthValidator</code>执行。</p>\n<p>对于大量文本，使用<code>TextField</code>。</p>\n<h5 id=\"TextField\"><a href=\"#TextField\" class=\"headerlink\" title=\"TextField\"></a><code>TextField</code></h5><p>一个大的文本字段。这个字段的默认表单小部件是一个<code>Textarea</code>。</p>\n<p>如果指定max_length属性，它将反映在自动生成表单字段的<code>Textarea</code>小部件中。然而，它并没有在模型或数据库级别强制执行。</p>\n<h5 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h5><p>一个有关<code>URL</code>的<code>CharField</code>，由<code>URLValidator</code>验证该值是否为有效的<code>URL</code>地址。</p>\n<p>与所有<code>CharField</code>子类一样，<code>URLField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值200。</p>\n<h5 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h5><p>一个有关<code>Email</code>的<code>CharField</code>,由<code>EmailValidator</code>验证该值是否为有效的电子邮件地址。</p>\n<p>与所有<code>CharField</code>子类一样，<code>EmailField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值254。</p>\n<h5 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h5><p>用于存储通用唯一标识符的字段。使用Python的<code>UUID</code>类。当在<code>PostgreSQL</code>上使用时，它以<code>uuid</code>数据类型存储，否则以<code>char(32)</code>存储。</p>\n<p>全局惟一标识符是<code>primary_key</code>的<code>AutoField</code>的一个很好的替代方案。数据库不会为你生成<strong>UUID</strong>，建议使用默认:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> uuid<br><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyUUIDModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    <span class=\"hljs-built_in\">id</span> = models.UUIDField(primary_key=<span class=\"hljs-literal\">True</span>, default=uuid.uuid4, editable=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># other fields</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，一个回调函数(省略括号)被传递到<code>default</code>，而不是<strong>UUID</strong>的一个实例。</p>\n</blockquote>\n<h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><h5 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h5><p>一个文件上传字段。有两个可选参数:</p>\n<h6 id=\"FileField-upload-to\"><a href=\"#FileField-upload-to\" class=\"headerlink\" title=\"FileField.upload_to\"></a><code>FileField.upload_to</code></h6><p>这个属性提供了一种设置上传目录和文件名的方法，可以通过两种方式进行设置。在这两种情况下，值都被传递到<code>Storage.save()</code>方法。</p>\n<p>如果您指定一个字符串值，它可能包含<code>strftime()</code>格式，它将被文件上传的日期/时间所取代(这样上传的文件就不会填满给定的目录)。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    <span class=\"hljs-comment\"># 文件将被上传至 MEDIA_ROOT/uploads</span><br>    upload = models.FileField(upload_to=<span class=\"hljs-string\">&#x27;uploads/&#x27;</span>)<br>    <span class=\"hljs-comment\"># or...</span><br>    <span class=\"hljs-comment\"># 文件将被上传至 MEDIA_ROOT/uploads/2015/01/30</span><br>    upload = models.FileField(upload_to=<span class=\"hljs-string\">&#x27;uploads/%Y/%m/%d/&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>如果使用默认的<code>FileSystemStorage</code>，字符串值将追加到<code>MEDIA_ROOT</code>路径，以形成本地文件系统上的位置，上传的文件将存储在此位置。如果使用不同的存储，请检查该存储的文档，以了解它如何处理<code>upload_to</code>。</p>\n<p><code>upload_to</code>也可以是一个可调用的函数。这个函数将被调用以获得上传路径，包括文件名。这个可调用函数必须接受两个参数，并返回一个<code>unix</code>风格的路径(带有斜杠)，以便传递给存储系统。这两个参数是:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>instance</code></td>\n<td>定义FileField的模型的一个实例。更具体地说，这是附加当前文件的特定实例。<br/>在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的<code>AutoField</code>，那么它的主键字段可能还没有值。</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>原给定给该文件的文件名。在确定最终目的地路径时，可能会考虑这一点，也可能不考虑这一点。</td>\n</tr>\n</tbody></table>\n<p>例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">user_directory_path</span>(<span class=\"hljs-params\">instance, filename</span>):</span><br>    <span class=\"hljs-comment\"># file will be uploaded to MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;user_&#123;0&#125;/&#123;1&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(instance.user.<span class=\"hljs-built_in\">id</span>, filename)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    upload = models.FileField(upload_to=user_directory_path)<br></code></pre></td></tr></table></figure>\n<h6 id=\"FileField-storage\"><a href=\"#FileField-storage\" class=\"headerlink\" title=\"FileField.storage\"></a><code>FileField.storage</code></h6><p>一个存储对象，它处理文件的存储和检索。有关如何提供此对象的详细信息，请参见 <a href=\"https://docs.djangoproject.com/en/2.2/topics/files/\">管理文件</a> 。</p>\n<p>在模型中使用<code>FileField</code>或<code>ImageField</code>需要几个步骤:</p>\n<ol>\n<li>在设置文件中，需要将<code>MEDIA_ROOT</code>定义为一个目录的完整路径，您希望<code>Django</code>在这个目录中存储上传的文件。(为了提高性能，这些文件不存储在数据库中。)将<code>MEDIA_URL</code>定义为该目录的基本公共<code>URL</code>。确保此目录可由<code>Web</code>服务器的用户帐户写入。</li>\n<li>将<code>FileField</code>或<code>ImageField</code>添加到模型中，定义<code>upload_to</code>选项，以指定<code>MEDIA_ROOT</code>的子目录，用于上传文件。</li>\n<li>所有将存储在数据库中的内容都是文件的路径(相对于<code>MEDIA_ROOT</code>)。您很可能希望使用Django提供的便利url属性。例如，如果 <code>ImageField</code>被称为 <code>mug_shot</code> ，可以获取模板中图像的绝对路径 <code>&#123;&#123; object.mug_shot.url &#125;&#125;</code> </li>\n</ol>\n<p>例如，假设<code>MEDIA_ROOT</code>设置为<code>&#39;/home/media&#39;</code>， <code>upload_to</code>设置为<code>&#39;photos/%Y/%m/%d&#39;</code>。<code>upload_to</code>的<code>&#39;%Y/%m/%d&#39;</code>部分是<code>strftime()</code>格式;<code>&#39;%Y&#39;</code>是四位数的年份，<code>&#39;%m&#39;是</code>两位数的月份，<code>&#39;%d&#39;</code>是两位数的日期。如果你在2007年1月15日上传了一个文件，它将被保存在<code>/home/media/photos/2007/01/15</code>目录下。</p>\n<p>如果要检索上传文件的磁盘上文件名或文件大小，可以分别使用<a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.name\"><code>名称</code></a> 和<a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.size\"><code>大小</code></a> 属性;有关可用属性和方法的更多信息，请参见 <a href=\"https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File\"><code>文件</code></a>类引用和 <a href=\"https://docs.djangoproject.com/en/2.2/topics/files/\">管理文件</a>主题指南。</p>\n<blockquote>\n<p>文件作为模型保存在数据库中的一部分保存，因此在保存模型之前，不能依赖于磁盘上使用的实际文件名。</p>\n</blockquote>\n<p>请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传一个<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的<strong>URL</strong>来执行该脚本。不要允许这样的操作。</p>\n<p>还要注意，即使是上传的<strong>HTML</strong>文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传到<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的URL来执行该脚本。不要允许这样的操作。</p>\n<p>还要注意，即使是上传的HTML文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或<strong>CSRF</strong>攻击的安全威胁。攻击的安全威胁。</p>\n<blockquote>\n<p><code>FileField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h5><p>从<code>FileField</code>继承所有属性和方法，但也验证上传的对象是有效的图像。</p>\n<p>除了可用于<code>FileField</code>的特殊属性之外，<code>ImageField</code>还具有高度和宽度属性。</p>\n<p>为了方便查询这些属性，<code>ImageField</code>有两个额外的可选参数:</p>\n<h6 id=\"ImageField-height-field\"><a href=\"#ImageField-height-field\" class=\"headerlink\" title=\"ImageField.height_field\"></a><code>ImageField.height_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充映像的高度。</p>\n<h6 id=\"ImageField-width-field\"><a href=\"#ImageField-width-field\" class=\"headerlink\" title=\"ImageField.width_field\"></a><code>ImageField.width_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充图像的宽度。</p>\n<p>需要 <a href=\"https://pillow.readthedocs.io/en/latest/\">Pillow</a> 库。</p>\n<blockquote>\n<p><code>ImageField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h5><p>一个<code>CharField</code>，它的选择仅限于文件系统上某个目录中的文件名。有三个特殊的参数，其中第一个是必需的:</p>\n<h6 id=\"FilePathField-path\"><a href=\"#FilePathField-path\" class=\"headerlink\" title=\"FilePathField.path\"></a><code>FilePathField.path</code></h6><p>必需的。这个<code>FilePathField</code>应该从中获得其选择的目录的绝对文件系统路径。例如:<code>&quot;/ home /images&quot;</code>。</p>\n<h6 id=\"FilePathField-match\"><a href=\"#FilePathField-match\" class=\"headerlink\" title=\"FilePathField.match\"></a><code>FilePathField.match</code></h6><p>可选的。一个正则表达式，作为一个字符串，<code>FilePathField</code>将使用它来过滤文件名。注意，正则表达式将应用于基本文件名，而不是完整路径。示例:<strong><code>foo.*\\.txt$</code></strong>。它将匹配一个名为<code>foo23.txt</code>的文件，但不匹配<code>bar.txt</code>或<code>foo23.png</code>。</p>\n<h6 id=\"FilePathField-recursive\"><a href=\"#FilePathField-recursive\" class=\"headerlink\" title=\"FilePathField.recursive\"></a><code>FilePathField.recursive</code></h6><p>可选的。非真即假。默认是假的。指定是否应该包括<code>path</code>的所有子目录</p>\n<h6 id=\"FilePathField-allow-files\"><a href=\"#FilePathField-allow-files\" class=\"headerlink\" title=\"FilePathField.allow_files\"></a><code>FilePathField.allow_files</code></h6><p>可选的。非真即假。默认是正确的。指定是否应包括位于指定位置的文件。这个或<code>allow_folders</code>必须为真。</p>\n<h6 id=\"FilePathField-allow-folders\"><a href=\"#FilePathField-allow-folders\" class=\"headerlink\" title=\"FilePathField.allow_folders\"></a><code>FilePathField.allow_folders</code></h6><p>可选的。非真即假。默认是假的。指定是否应包括指定位置的文件夹。这个或allow_files必须为真。</p>\n<p>当然，这些参数可以一起使用。</p>\n<p>一个潜在的问题是，match应用于基本文件名，而不是完整路径。所以,这个例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">FilePathField(path=<span class=\"hljs-string\">&quot;/home/images&quot;</span>, match=<span class=\"hljs-string\">&quot;foo.*&quot;</span>, recursive=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<p>将匹配<code>/home/images/foo.png</code>，但不匹配<code>/home/images/foo/bar.png</code>，因为匹配应用于基本文件名(<code>foo.png</code>和<code>bar.png</code>)。</p>\n<blockquote>\n<p><code>FilePathField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>\n</blockquote>\n<h5 id=\"BinaryField\"><a href=\"#BinaryField\" class=\"headerlink\" title=\"BinaryField\"></a><code>BinaryField</code></h5><p>存储原始二进制数据的字段。可以为它分配字节、字节数组或内存视图。</p>\n<p>默认情况下，<code>BinaryField</code>将<code>editable</code>设置为<code>False</code>，在这种情况下，它不能包含在ModelForm中。</p>\n<p><code>BinaryField</code>有一个额外的可选参数:</p>\n<h6 id=\"BinaryField-max-length\"><a href=\"#BinaryField-max-length\" class=\"headerlink\" title=\"BinaryField.max_length\"></a><code>BinaryField.max_length</code></h6><p>字段的最大长度(以字符为单位)。最大长度在Django的验证中使用MaxLengthValidator实现。</p>\n<blockquote>\n<p>Django 2.1:<br>旧版本不允许将editable设置为True。</p>\n</blockquote>\n<h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><h5 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h5><p>日期，在Python中用<code>datetime.date</code>实例表示。有一些额外的，可选的参数:</p>\n<h6 id=\"DateField-auto-now\"><a href=\"#DateField-auto-now\" class=\"headerlink\" title=\"DateField.auto_now\"></a><code>DateField.auto_now</code></h6><p>每次保存对象时自动将字段值设置为当前时间，用于“最后修改”时间戳。</p>\n<p>该字段只在调用<code>Model.save()</code>时自动更新。当以其他方式(如<code>QuerySet.update()</code>)更新其他字段时，该字段不会更新，不过可以在这样的更新中为该字段指定自定义值。</p>\n<h6 id=\"DateField-auto-now-add\"><a href=\"#DateField-auto-now-add\" class=\"headerlink\" title=\"DateField.auto_now_add\"></a><code>DateField.auto_now_add</code></h6><p>在第一次创建对象时自动将字段设置为当前时间。用于创建时间戳。</p>\n<p>即使在创建对象时为这个字段设置了值，它也会被忽略。如果您希望能够修改该字段，请将<code>auto_now_add=True</code>设置为以下内容:</p>\n<ul>\n<li>For <code>DateField</code>: <code>default=date.today</code> - from <code>datetime.date.today()</code></li>\n<li>For <code>DateTimeField</code>: <code>default=timezone.now</code> - from <code>django.utils.timezone.now()</code></li>\n</ul>\n<p><code>auto_now_add</code>、<code>auto_now</code>和<code>default</code>选项是互斥的。这些选项的任何组合都将导致错误。</p>\n<h5 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h5><p>日期和时间，在Python中用<code>datetime.datetime</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>\n<h5 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h5><p>时间，在Python中用<code>datetime.time</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>\n<h3 id=\"3-字段选项\"><a href=\"#3-字段选项\" class=\"headerlink\" title=\"3.字段选项\"></a>3.字段选项</h3><blockquote>\n<p>以下参数对所有字段类型均有效，且是可选的。</p>\n</blockquote>\n<h4 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a><code>null</code></h4><p>如果设置为 <code>True</code>， 当该字段为空时，Django 会将数据库中该字段设置为 <code>NULL</code>，默认为 <code>False</code>。</p>\n<p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和空字符串。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>\n<p>对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置<code>blank=True</code>，因为<code>null</code>参数只影响数据库存储(参见<code>blank</code>)。</p>\n<h4 id=\"blank\"><a href=\"#blank\" class=\"headerlink\" title=\"blank\"></a><code>blank</code></h4><p>如果设置为 <code>True</code> ，该字段允许为空。默认为 <code>False</code> 。</p>\n<p>注意，这与<code>null</code>不同。<code>null</code>纯粹是与数据库相关的，而<code>blank</code>则是与验证相关的。如果字段为<code>blank=True</code>，表单验证将允许输入空值。</p>\n<blockquote>\n<p>blank和null的用法区别</p>\n</blockquote>\n<ul>\n<li><p>null纯粹是与数据库相关的，而blank则是与表单验证相关的。</p>\n</li>\n<li><p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和<code>空字符串</code>。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>\n</li>\n<li><p>当存在两个参数时，总共会有四种设定组合</p>\n<ul>\n<li><code>blank=True</code>、<code>null=True</code>。统一的表明了该字段（列）是可以为空的。</li>\n<li><code>blank=False</code>、<code>null=False</code>。统一的表面了该字段（列）不可以为空。</li>\n<li><code>blank=True</code>、<code>null=False</code>。这个设定的意义在于，某些字段并不希望用户在表单中创建，而是通过在<code>save</code>方法中根据其他字段生成。</li>\n<li><code>blank=False</code>、<code>null=True</code>。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>只设定了<code>blank=True</code>而没有设定<code>null=True</code>的时候，通过<code>Admin</code>站点表单创建模型实例并且表单在该字段上没有值时数据库不报错呢？？？</p>\n</blockquote>\n<ul>\n<li>当没有设定<code>null=True</code>时，该列在数据库中就存在<code>NOT NULL</code>的约束，如果插入数据时这一列没有值，按理说数据库应该会报错才对</li>\n<li>出现这种情况的原因在于，<code>django</code>在处理某些在数据库中实际的存储值为字符串的<code>Field</code>时（如<code>CharField</code>, <code>TextField</code>, <code>ImageField</code>（图片文件的路径）），永远不会向数据库中填入空值。如果表单中某个<code>CharField</code>或者<code>TextField</code>字段为空，那么<code>django</code>会在数据库中填入<code>&quot;&quot;</code>，而不是<code>null</code>. </li>\n</ul>\n<h4 id=\"choices\"><a href=\"#choices\" class=\"headerlink\" title=\"choices\"></a><code>choices</code></h4><p>一个序列，它由两个元素(例如[(A, B)， (A, B)…])的迭代组成，作为这个字段的选择。如果提供了选择，则通过模型验证强制执行，默认的表单小部件将是一个包含这些选择的选择框，而不是标准的文本字段。</p>\n<p>每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">YEAR_IN_SCHOOL_CHOICES = [<br>    (<span class=\"hljs-string\">&#x27;FR&#x27;</span>, <span class=\"hljs-string\">&#x27;Freshman&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;SO&#x27;</span>, <span class=\"hljs-string\">&#x27;Sophomore&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;JR&#x27;</span>, <span class=\"hljs-string\">&#x27;Junior&#x27;</span>),<br>    (<span class=\"hljs-string\">&#x27;SR&#x27;</span>, <span class=\"hljs-string\">&#x27;Senior&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure>\n<p>通常，最好在模型类中定义选项，并为每个值定义一个适当命名的常量:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    FRESHMAN = <span class=\"hljs-string\">&#x27;FR&#x27;</span><br>    SOPHOMORE = <span class=\"hljs-string\">&#x27;SO&#x27;</span><br>    JUNIOR = <span class=\"hljs-string\">&#x27;JR&#x27;</span><br>    SENIOR = <span class=\"hljs-string\">&#x27;SR&#x27;</span><br>    YEAR_IN_SCHOOL_CHOICES = [<br>        (FRESHMAN, <span class=\"hljs-string\">&#x27;Freshman&#x27;</span>),<br>        (SOPHOMORE, <span class=\"hljs-string\">&#x27;Sophomore&#x27;</span>),<br>        (JUNIOR, <span class=\"hljs-string\">&#x27;Junior&#x27;</span>),<br>        (SENIOR, <span class=\"hljs-string\">&#x27;Senior&#x27;</span>),<br>    ]<br>    year_in_school = models.CharField(<br>        max_length=<span class=\"hljs-number\">2</span>,<br>        choices=YEAR_IN_SCHOOL_CHOICES,<br>        default=FRESHMAN,<br>    )<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_upperclass</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.year_in_school <span class=\"hljs-keyword\">in</span> (self.JUNIOR, self.SENIOR)<br></code></pre></td></tr></table></figure>\n<p>虽然您可以在模型类的外部定义一个选择列表，然后引用它，但是在模型类内部定义每个选择的选择和名称，可以将所有信息与使用它的类一起保存，并使选择易于引用(例如：<strong>Student.SOPHOMORE</strong> 可以在导入<strong>Student</strong>模型类的任何地方使用)。</p>\n<p>您还可以将可用的选项收集到指定的组中，这些组可用于组织目的:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Media</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    MEDIA_CHOICES = [<br>        (<span class=\"hljs-string\">&#x27;Audio&#x27;</span>, (<br>            (<span class=\"hljs-string\">&#x27;vinyl&#x27;</span>, <span class=\"hljs-string\">&#x27;Vinyl&#x27;</span>),<br>            (<span class=\"hljs-string\">&#x27;cd&#x27;</span>, <span class=\"hljs-string\">&#x27;CD&#x27;</span>),<br>        )<br>         ),<br>        (<span class=\"hljs-string\">&#x27;Video&#x27;</span>, (<br>            (<span class=\"hljs-string\">&#x27;vhs&#x27;</span>, <span class=\"hljs-string\">&#x27;VHS Tape&#x27;</span>),<br>            (<span class=\"hljs-string\">&#x27;dvd&#x27;</span>, <span class=\"hljs-string\">&#x27;DVD&#x27;</span>),<br>        )<br>         ),<br>        (<span class=\"hljs-string\">&#x27;unknown&#x27;</span>, <span class=\"hljs-string\">&#x27;Unknown&#x27;</span>),<br>    ]<br><br>    media = models.CharField(<br>        max_length=<span class=\"hljs-number\">10</span>,<br>        choices=MEDIA_CHOICES,<br>        default=<span class=\"hljs-string\">&#x27;cd&#x27;</span><br>    )<br></code></pre></td></tr></table></figure>\n<p>每个元组中的第一个元素是应用于组的名称。第二个元素是二元组的迭代，每个二元组包含一个值和一个可读的选项名。分组选项可以与单个列表中的未分组选项组合在一起(例如本例中的未知选项)。</p>\n<p>注意，选择可以是任何序列对象–不一定是列表或元组。这允许您动态地构造选择。但是，如果您发现自己的选择是动态的，那么最好使用一个带有 <code>ForeignKey</code>的数据库表。但是静态数据不会有太大的变化。</p>\n<p>对于每个设置了选项的字段，对象都有一个<code>get_FOO_display()</code>方法，其中<code>FOO</code>是字段的名称。该方法返回字段的”人易读”值。</p>\n<p>例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    SHIRT_SIZES = (<br>        (<span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;Small&#x27;</span>),<br>        (<span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;Medium&#x27;</span>),<br>        (<span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;Large&#x27;</span>),<br>    )<br>    name = models.CharField(max_length=<span class=\"hljs-number\">60</span>)<br>    shirt_size = models.CharField(max_length=<span class=\"hljs-number\">2</span>, choices=SHIRT_SIZES)<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">&gt;&gt;&gt; p = Person(name=<span class=\"hljs-string\">&quot;Fred Flintstone&quot;</span>, shirt_size=<span class=\"hljs-string\">&quot;L&quot;</span>)<br>&gt;&gt;&gt; p.save()<br>&gt;&gt;&gt; p.shirt_size<br><span class=\"hljs-string\">&#x27;L&#x27;</span><br>&gt;&gt;&gt; p.get_shirt_size_display()<br><span class=\"hljs-string\">&#x27;Large&#x27;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"db-column\"><a href=\"#db-column\" class=\"headerlink\" title=\"db_column\"></a><code>db_column</code></h4><p>要用于此字段的数据库列的名称。如果没有给出，Django将使用字段的名称。</p>\n<h4 id=\"db-index\"><a href=\"#db-index\" class=\"headerlink\" title=\"db_index\"></a><code>db_index</code></h4><p>如果为真，将为此字段创建一个数据库索引。</p>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p>该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。</p>\n<p>默认值不能是一个可变的对象(模型实例、列表、集合等)，因为对该对象的同一个实例的引用将被用作所有模型实例的默认值。反而，可以在回调函数中打包处理所需的默认值。例如，如果要为<code>JSONField</code>指定默认<code>dict</code>，可以使用一个函数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">contact_default</span>():</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-string\">&quot;email&quot;</span>: <span class=\"hljs-string\">&quot;to1@example.com&quot;</span>&#125;<br><br>contact_info = JSONField(<span class=\"hljs-string\">&quot;ContactInfo&quot;</span>, default=contact_default)<br></code></pre></td></tr></table></figure>\n<p><strong>lambda</strong>表达式不能用于像<strong>default</strong>这样的字段选项，因为它们不能被迁移序列化。</p>\n<p>对于像映射模型实例的<code>ForeignKey</code>这样的字段，默认值应该是它们引用的字段的值(<code>pk</code>，除非设置<code>to_field</code>)，而不是模型实例。</p>\n<p>当创建新的模型实例并且没有为字段提供值时，将使用默认值。当字段是主键时，当字段设置为<code>None</code>时也会使用默认值。</p>\n<h4 id=\"help-text\"><a href=\"#help-text\" class=\"headerlink\" title=\"help_text\"></a><code>help_text</code></h4><p>额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。</p>\n<p>注意，这个值不会在自动生成的表单中进行<code>html</code>转义的。如果您愿意，可以在<code>help_text</code>中包含<strong>HTML</strong>。例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">help_text=<span class=\"hljs-string\">&quot;Please use the following format: &lt;em&gt;YYYY-MM-DD&lt;/em&gt;.&quot;</span><br></code></pre></td></tr></table></figure>\n<p>或者，您可以使用纯文本和<code>django.utils.html.escape()</code>来转义任何<strong>HTML</strong>特殊字符。确保转义任何来自不可信用户的帮助文本，以避免跨站点脚本攻击。</p>\n<h4 id=\"primary-key\"><a href=\"#primary-key\" class=\"headerlink\" title=\"primary_key\"></a><code>primary_key</code></h4><p>如果设置为 <code>True</code> ，将该字段设置为该模型的主键。</p>\n<p>如果您没有为模型中的任何字段指定<code>primary_key=True</code>, <strong>Django</strong>将自动添加一个<code>AutoField</code>来保存主键，所以您不需要在任何字段上设置<code>primary_key=True</code>，除非您想覆盖默认的主键行为。</p>\n<p><code>primary_key=True</code>意味着<code>null=False</code>和<code>unique=True</code>。对象上只允许有一个主键。</p>\n<p>主键字段是只读的。如果更改现有对象上的主键值并保存它，则将在旧对象旁边创建一个新对象。</p>\n<h4 id=\"unique\"><a href=\"#unique\" class=\"headerlink\" title=\"unique\"></a><code>unique</code></h4><p>如果设置为 <code>True</code>，这个字段必须在整个表中保持值唯一。</p>\n<p>这是在数据库级和通过模型验证实现的。如果试图在惟一字段中保存具有重复值的模型，则模型的<code>save()</code>方法会产生一个<code>django.db.IntegrityError</code>。</p>\n<p>这个选项对除了<code>ManyToManyField</code>和<code>OneToOneField</code>以外的所有字段类型都有效。</p>\n<p>注意，当<code>unique</code>为真时，不需要指定<code>db_index</code>，因为<code>unique</code>意味着创建索引。</p>\n<h4 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a><code>verbose_name</code></h4><p>字段的可读名称。如果没有给出详细的名称，Django将使用字段的属性名自动创建它，将下划线转换为空格。</p>\n<p>除了 <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>，任何字段类型都接收一个可选位置的参数 <code>verbose_name</code>，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。</p>\n<p>在该例中：备注名为 <code>&quot;person&#39;s first name&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">first_name = models.CharField(<span class=\"hljs-string\">&quot;person&#x27;s first name&quot;</span>, max_length=<span class=\"hljs-number\">30</span>)<br></code></pre></td></tr></table></figure>\n<p>在该例中：备注名为 <code>&quot;first name&quot;</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">first_name = models.CharField(max_length=<span class=\"hljs-number\">30</span>)<br></code></pre></td></tr></table></figure>\n<p> <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>接收的第一个参数为模型的类名，后面可以添加一个 <code>verbose_name</code>参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">poll = models.ForeignKey(<br>    Poll,<br>    on_delete=models.CASCADE,<br>    verbose_name=<span class=\"hljs-string\">&quot;the related poll&quot;</span>,<br>)<br>sites = models.ManyToManyField(Site, verbose_name=<span class=\"hljs-string\">&quot;list of sites&quot;</span>)<br>place = models.OneToOneField(<br>    Place,<br>    on_delete=models.CASCADE,<br>    verbose_name=<span class=\"hljs-string\">&quot;related place&quot;</span>,<br>)<br></code></pre></td></tr></table></figure>\n<p>惯例是不将<code>verbose_name</code> 的首字母大写，必要时 <strong>Djanog</strong> 会自动把首字母转换为大写。</p>\n<h4 id=\"validators\"><a href=\"#validators\" class=\"headerlink\" title=\"validators\"></a><code>validators</code></h4><p>要为此字段运行的验证器列表。</p>\n<h5 id=\"编写验证器\"><a href=\"#编写验证器\" class=\"headerlink\" title=\"编写验证器\"></a>编写验证器</h5><p><code>validator</code>是一个可调用的函数，它接受一个值，如果它不满足某些条件，就会引发<code>ValidationError</code>。验证器对于在不同类型的字段之间重用验证逻辑非常有用。</p>\n<p>例如，这里有一个验证器，它只允许偶数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.core.exceptions <span class=\"hljs-keyword\">import</span> ValidationError<br><span class=\"hljs-keyword\">from</span> django.utils.translation <span class=\"hljs-keyword\">import</span> gettext_lazy <span class=\"hljs-keyword\">as</span> _<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">validate_even</span>(<span class=\"hljs-params\">value</span>):</span><br>    <span class=\"hljs-keyword\">if</span> value % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">raise</span> ValidationError(<br>            _(<span class=\"hljs-string\">&#x27;%(value)s is not an even number&#x27;</span>),<br>            params=&#123;<span class=\"hljs-string\">&#x27;value&#x27;</span>: value&#125;,<br>        )<br></code></pre></td></tr></table></figure>\n<p>您可以通过字段的<code>validators</code>参数将其添加到模型字段:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModel</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    even_field = models.IntegerField(validators=[validate_even])<br></code></pre></td></tr></table></figure>\n<p>因为值在运行验证器之前就转换成了Python，你甚至可以对表单使用相同的验证器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django <span class=\"hljs-keyword\">import</span> forms<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyForm</span>(<span class=\"hljs-params\">forms.Form</span>):</span><br>    even_field = forms.IntegerField(validators=[validate_even])<br></code></pre></td></tr></table></figure>\n<p>对于更复杂或可配置的验证器，您还可以使用带有<code>__call__()</code>方法的类。例如， <code>RegexValidator</code>这类验证器。如果在<code>validators</code> <code>model</code>字段选项中使用基于类的验证器,应该添加<code>deconstruct()</code>装饰器和 <code>__eq__()</code> 方法让它可以被迁移框架序列化。</p>\n<p> <a href=\"https://docs.djangoproject.com/zh-hans/2.2/ref/validators/#built-in-validators\"><code>django.core.validators</code></a>模块包含一组可调用的验证器，用于模型和表单字段，可以在内部使用它们。</p>\n<h3 id=\"4-Meta-选项\"><a href=\"#4-Meta-选项\" class=\"headerlink\" title=\"4. Meta 选项\"></a>4. <code>Meta</code> 选项</h3><p>使用内部 <code>Meta类</code> 来给模型赋予元数据，就像：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Ox</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    horn_length = models.IntegerField()<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        ordering = [<span class=\"hljs-string\">&quot;horn_length&quot;</span>]<br>        verbose_name_plural = <span class=\"hljs-string\">&quot;oxen&quot;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"abstract\"><a href=\"#abstract\" class=\"headerlink\" title=\"abstract\"></a><code>abstract</code></h4><p>抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 <strong>Meta</strong> 类中填入 <code>abstract=True</code>。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。</p>\n<p>一个例子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommonInfo</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br>    age = models.PositiveIntegerField()<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        abstract = <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\">CommonInfo</span>):</span><br>    home_group = models.CharField(max_length=<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n<p><code>Student</code> 模型拥有3个字段： <code>name</code>， <code>age</code> 和 <code>home_group</code>。 <code>CommonInfo</code> 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。</p>\n<p>从抽象基类继承来的字段可被其它字段或值重写，或用 <code>None</code> 删除。</p>\n<p>对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。</p>\n<h4 id=\"app-label\"><a href=\"#app-label\" class=\"headerlink\" title=\"app_label\"></a><code>app_label</code></h4><p>如果一个模型是在<code>INSTALLED_APPS</code>中注册的<strong>APP</strong>外部定义的，它必须声明它属于哪个应用程序:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">app_label = <span class=\"hljs-string\">&#x27;myapp&#x27;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a><code>db_table</code></h4><p>要用于模型的数据库表的名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">db_table = <span class=\"hljs-string\">&#x27;music_album&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>为了节省时间，Django自动从模型类和包含它的应用程序的名称派生数据库表的名称。模型的数据库表名是通过将模型的<strong>“app label”</strong>(您在<code>manage.py startapp</code>中使用的名称)与模型的类名连接在一起，并在它们之间加一个下划线来构造的。</p>\n<p>例如，如果您有一个应用<strong>bookstore</strong>(由 <code>manage.py startapp bookstore</code>创建)，定义为<strong>Book</strong>的模型类将有一个名为<code>bookstore_book</code>的数据库表。</p>\n<p>要覆盖数据库表名，请使用类元中的db_table参数。</p>\n<blockquote>\n<p>强烈建议在通过db_table覆盖表名时使用小写的表名，特别是在使用MySQL后端时。</p>\n</blockquote>\n<h4 id=\"ordering\"><a href=\"#ordering\" class=\"headerlink\" title=\"ordering\"></a><code>ordering</code></h4><p>对象的默认顺序，用于获取对象列表:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-order_date&#x27;</span>]<br></code></pre></td></tr></table></figure>\n<p>这是一个 包含由字符串和/或构成的查询表达式的元组或列表。每个字符串都是一个带有可选<code>&quot;-&quot;</code>前缀的字段名，表示按降序排列。没有前缀<code>&quot;-&quot;</code>的字段将按升序排列。使用字符串<code>&quot;?&quot;</code>随机排序。</p>\n<p>例如，要按<code>pub_date</code>字段升序排序，可以使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;pub_date&#x27;</span>]<br></code></pre></td></tr></table></figure>\n<p>要按pub_date降序排列，请使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-pub_date&#x27;</span>]<br></code></pre></td></tr></table></figure>\n<p>按pub_date降序排列，然后按author升序排列，使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">ordering = [<span class=\"hljs-string\">&#x27;-pub_date&#x27;</span>, <span class=\"hljs-string\">&#x27;author&#x27;</span>]<br></code></pre></td></tr></table></figure>\n<p>您还可以使用查询表达式。要按作者升序排序并使空值排序持续，请使用以下命令:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db.models <span class=\"hljs-keyword\">import</span> F<br><br>ordering = [F(<span class=\"hljs-string\">&#x27;author&#x27;</span>).asc(nulls_last=<span class=\"hljs-literal\">True</span>)]<br></code></pre></td></tr></table></figure>\n<h4 id=\"permissions\"><a href=\"#permissions\" class=\"headerlink\" title=\"permissions\"></a><code>permissions</code></h4><p>创建此对象时进入权限表的额外权限。为每个模型自动创建添加、更改、删除和视图权限。这个例子指定了一个额外的权限<code>can_deliver_pizzas</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">permissions = [(<span class=\"hljs-string\">&#x27;can_deliver_pizzas&#x27;</span>, <span class=\"hljs-string\">&#x27;Can deliver pizzas&#x27;</span>)]<br></code></pre></td></tr></table></figure>\n<p>这是一个格式为<strong>(permission_code,</strong> <strong>human_readable_permission_name)</strong>的二元列表或元组。</p>\n<h4 id=\"indexes\"><a href=\"#indexes\" class=\"headerlink\" title=\"indexes\"></a><code>indexes</code></h4><p>要在模型上定义的索引列表:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Customer</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    first_name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br>    last_name = models.CharField(max_length=<span class=\"hljs-number\">100</span>)<br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>        indexes = [<br>            models.Index(fields=[<span class=\"hljs-string\">&#x27;last_name&#x27;</span>, <span class=\"hljs-string\">&#x27;first_name&#x27;</span>]),<br>            models.Index(fields=[<span class=\"hljs-string\">&#x27;first_name&#x27;</span>], name=<span class=\"hljs-string\">&#x27;first_name_idx&#x27;</span>),<br>        ]<br></code></pre></td></tr></table></figure>\n<h4 id=\"verbose-name-1\"><a href=\"#verbose-name-1\" class=\"headerlink\" title=\"verbose_name\"></a><code>verbose_name</code></h4><p>模型对象的人类可读的单数名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">verbose_name = <span class=\"hljs-string\">&quot;pizza&quot;</span><br></code></pre></td></tr></table></figure>\n<p>如果没有给出这个值，Django将使用类名的一个简化版本:<code>CamelCase</code>变成<code>camel case</code>。</p>\n<h4 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a><code>verbose_name_plural</code></h4><p>对象的复数名称:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">verbose_name_plural = <span class=\"hljs-string\">&quot;stories&quot;</span><br></code></pre></td></tr></table></figure>\n<p>如果没有给出，Django将使用 <code>verbose_name</code>+ <code>&quot;s&quot;</code></p>\n<h3 id=\"5-关联关系\"><a href=\"#5-关联关系\" class=\"headerlink\" title=\"5.关联关系\"></a>5.关联关系</h3><p>显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：多对一，多对多，一对一。                                                                </p>\n<h4 id=\"1、多对一关联\"><a href=\"#1、多对一关联\" class=\"headerlink\" title=\"1、多对一关联\"></a>1、多对一关联</h4><p>定义一个多对一的关联关系，使用 <code>django.db.models.ForeignKey</code> 类。就和其它 <code>Field</code>字段类型一样，只需要在你模型中添加一个值为该类的属性。</p>\n<p><code>ForeignKey</code> 类需要添加一个位置参数，即你想要关联的模型类名。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字ForeignKey</span><br>publish = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Publish&#x27;</span>)  <span class=\"hljs-comment\"># to用来指代跟哪张表有关系 默认关联的就是表的主键字段</span><br><span class=\"hljs-comment\"># 外键字段名在创建时会自动加上_id后缀</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"字段参数\"><a href=\"#字段参数\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code>:设置要关联的表</p>\n</li>\n<li><p><code>to_field</code>:设置要关联的表的字段(一般不设置，默认使用主键id关联)</p>\n</li>\n<li><p><code>related_name</code>:反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code></p>\n</li>\n<li><p><code>related_query_name</code>:反向查询操作时，使用的连接前缀，用于替换表名</p>\n</li>\n<li><p><code>db_constraint</code>:是否在数据库中创建外键约束，默认为True。</p>\n</li>\n<li><p><code>on_delete</code>:当删除关联表中的数据时，当前表与其关联的行的行为。</p>\n<ol>\n<li><p><code>models.CASCADE</code>:删除关联数据，与之关联的数据也删联(<code>on_delete=models.CASCADE</code>)</p>\n</li>\n<li><p>抛出异常(错误)</p>\n<ol>\n<li><code>models.DO_NOTHING</code>:删除关联数据，引发错误<code>IntegrityError</code>       </li>\n<li><code>models.PROTECT</code><br>删除关联数据，引发错误<code>ProtectedError</code></li>\n</ol>\n</li>\n<li><p><code>models.SET_NULL</code>:删除关联数据，与之关联的值设置为<code>null</code>（前提FK字段需要设置为可空）</p>\n</li>\n<li><p><code>models.SET_DEFAULT</code>:删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）</p>\n</li>\n<li><p><code>models.SET</code>:删除关联数据</p>\n<ol>\n<li>与之关联的值设置为指定值，设置：<code>models.SET(值)</code></li>\n<li>与之关联的值设置为可执行对象的返回值，设置：<code>models.SET(可执行对象)</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"2、OneToOneField-一对一\"><a href=\"#2、OneToOneField-一对一\" class=\"headerlink\" title=\"2、OneToOneField(一对一)\"></a>2、OneToOneField(一对一)</h4><blockquote>\n<p>外键字段创建在任意一张表都可以，建议外键添加在查询频率较高的一方</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字OneToOneField</span><br>author_detail = models.OneToOneField(to=<span class=\"hljs-string\">&#x27;Author_detail&#x27;</span>)  <span class=\"hljs-comment\"># 外键本质fk + unique</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"字段参数-1\"><a href=\"#字段参数-1\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code> :设置要关联的表。</p>\n</li>\n<li><p><code>to_field</code>:设置要关联的字段。</p>\n</li>\n<li><p><code>on_delete</code>:同ForeignKey字段。</p>\n</li>\n</ol>\n<h4 id=\"3、ManyToManyField-多对多\"><a href=\"#3、ManyToManyField-多对多\" class=\"headerlink\" title=\"3、ManyToManyField(多对多)\"></a>3、ManyToManyField(多对多)</h4><blockquote>\n<p>用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 关键字ManyToManyField</span><br>author = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)  <br><span class=\"hljs-comment\"># django orm会自动帮你创建第三张关系表，表名为两个关联的表名用_连接</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"字段参数-2\"><a href=\"#字段参数-2\" class=\"headerlink\" title=\"字段参数\"></a>字段参数</h5><ol>\n<li><p><code>to</code>:设置要关联的表</p>\n</li>\n<li><p><code>related_name</code>:同<code>ForeignKey</code>字段(反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code>)</p>\n</li>\n<li><p><code>related_query_name</code>:同<code>ForeignKey</code>字段(反向查询操作时，使用的连接前缀，用于替换表名)</p>\n</li>\n<li><p><code>symmetric</code>:仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为<code>True</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br>    friends = models.ManyToManyField(<span class=\"hljs-string\">&quot;self&quot;</span>)<br>    <span class=\"hljs-comment\"># 此时，person对象就没有person_set属性。</span><br>   <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br>    friends = models.ManyToManyField(<span class=\"hljs-string\">&quot;self&quot;</span>,symmetrical=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-comment\"># 此时，person对象现在就可以使用person_set属性进行反向查询。</span><br></code></pre></td></tr></table></figure></li>\n<li><p><code>through</code>:在使用<code>ManyToManyField</code>字段时，<code>Django</code>将自动生成一张表        来管理多对多的关联关系。但我们也可以手动创建第三张表来管理多对多关系，此时就需要通过<code>through</code>来指定第三张表的表名。</p>\n</li>\n<li><p><code>through_fields</code>:设置关联的字段。</p>\n</li>\n<li><p><code>db_table</code>:默认创建第三张表时，数据库中表的名称。</p>\n</li>\n</ol>\n<h5 id=\"多对多的三种创建方式\"><a href=\"#多对多的三种创建方式\" class=\"headerlink\" title=\"多对多的三种创建方式\"></a>多对多的三种创建方式</h5><ol>\n<li><p>自己建立第三张关系表，外键分别关联两个表</p>\n<ul>\n<li><p>优点:可以扩充第三张关系标的字段</p>\n</li>\n<li><p>缺点:自己做连表查询</p>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-comment\"># 1. 多对多第一种创建方式：自己创建第三张关系表</span><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author2Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     <span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br>     author_id = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)<br>     book_id = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)<br>     price = models.IntegerField()  <span class=\"hljs-comment\"># 可以自己扩充需要的字段</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过ORM内置的ManyToManyField，自动创建第三张关系表</p>\n<ul>\n<li><p>优点:提供了很多连表操作的快捷方法,<code>all()</code>, <code>add()</code>, <code>set()</code>, <code>clear()</code>, <code>remove()</code></p>\n</li>\n<li><p>缺点:无法扩展第三张关系表</p>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br>     books = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)  <span class=\"hljs-comment\"># 字段就这些，无法扩充其他字段</span><br><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>自己创建第三张关系表，通过ManyToManyField关联</p>\n<ul>\n<li><p>优点：</p>\n<ul>\n<li>既能够使用多对多查询的快捷方法all()(只能用all，不能使用add,set等)</li>\n<li>还能够自己扩展第三张关系表的字段</li>\n</ul>\n</li>\n<li><p>建表例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>    title = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     name = models.CharField(max_length=<span class=\"hljs-number\">12</span>)<br>     <span class=\"hljs-comment\"># 告诉ManyToManyField通过(through)Author2Book这张表进行关联，不使用ORM自动创建的第三张表，而是使用我自己创建的表</span><br>     <span class=\"hljs-comment\"># through_fields告诉ORM通过哪几个字段进行多对多关联</span><br>     books = models.ManyToManyField(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>, through=<span class=\"hljs-string\">&#x27;Author2Book&#x27;</span>, through_fields=(<span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;book&#x27;</span>))<br><br> <span class=\"hljs-comment\"># 1. 多对多第三种创建方式：自己创建第三张关系表，此时外键不需要添加_id了，因为ORM会默认帮你在外键后面加_id</span><br> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author2Book</span>(<span class=\"hljs-params\">models.Model</span>):</span><br>     <span class=\"hljs-built_in\">id</span> = models.AutoField(primary_key=<span class=\"hljs-literal\">True</span>)<br>     author = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Author&#x27;</span>)<br>     book = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Book&#x27;</span>)<br>     price = models.IntegerField(null=<span class=\"hljs-literal\">True</span>)<br> <br>     <span class=\"hljs-comment\"># author_id和book_id要联合唯一</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meta</span>:</span><br>         unique_together = ((<span class=\"hljs-string\">&#x27;author&#x27;</span>, <span class=\"hljs-string\">&#x27;book&#x27;</span>),)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>操作例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 多对多的第三张方式也支持all查询</span><br>author_obj = Author.objects.first()<br><span class=\"hljs-comment\"># 第一个作者的所有书籍</span><br>ret = author_obj.books.<span class=\"hljs-built_in\">all</span>()<br> <br><span class=\"hljs-comment\"># 给第一个作者添加一本书</span><br><span class=\"hljs-comment\"># author_obj.books.add(4) # 报错</span><br>Author2Book.objects.create(author_id=<span class=\"hljs-number\">1</span>, book_id=<span class=\"hljs-number\">4</span>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"python多任务机制","date":"2019-05-17T12:53:32.000Z","_content":"\n### python 线程与进程简介\n\n#### 1. 进程与线程的历史\n\n我们都知道计算机是由**硬件**和**软件**组成的。\n\n- 硬件中的 CPU 是计算机的核心，它承担计算机的所有任务。\n- 操作系统是运行在硬件之上的软件，是计算机的管理者，它负责资源的管理和分配、任务的调度。\n- 程序是运行在系统上的具有某种功能的软件，比如说浏览器，音乐播放器等。\n\n每次执行程序的时候，都会完成一定的功能，比如说浏览器帮我们打开网页，为了保证其独立性，就需要一个专门的管理和控制执行程序的数据结构——**进程控制块**。\n\n进程就是一个程序在一个数据集上的一次动态执行过程。\n\n- 进程一般由程序、数据集、进程控制块三部分组成。\n  - 我们编写的程序用来描述进程要完成哪些功能以及如何完成；\n  - 数据集则是程序在执行过程中所需要使用的资源；\n  - 进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。\n\n- 在早期的操作系统里，计算机只有一个核心，进程是执行程序的最小单位，任务调度采用时间片轮转的抢占式方式进行进程调度。\n- 每个进程都有各自的一块独立的内存，保证进程彼此间的内存地址空间的隔离。\n\n随着计算机技术的发展，进程出现了很多弊端：\n\n- 一是进程的创建、撤销和切换的开销比较大\n- 二是由于对称多处理机（对称多处理机（SymmetricalMulti-Processing）又叫 SMP，是指在一个计算机上汇集了一组处理器 (多 CPU)，各 CPU 之间共享内存子系统以及总线结构）的出现，可以满足多个运行单位，而多进程并行开销过大。\n\n这个时候就引入了线程的概念。\n\n- 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合 和堆栈共同组成。\n- 线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。\n- 线程没有自己的系统资源，只拥有在运行时必不可少的资源。\n- 但线程可以与同属与同一进程的其他线程共享进程所拥有的其他资源。\n\n#### 2.  进程与线程之间的关系\n\n- 线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。\n- 线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息 (如程序计数器、一组寄存器和栈)。\n\n#### 3. 守护线程与守护进程的区别\n\n> 强调：运行完毕，并非是终止\n\n- 线程与进程运行完毕的区别：\n\n  - 主进程运行完毕指的是主进程代码运行完毕\n\n  - 主线程运行完毕指的是所在的进程内的所有非守护线程运行完毕后，主线程才算运行完毕\n\n- 守护进程：主进程代码运行完毕，守护进程也就结束 **(守护的是主进程)**\n\n  - 主进程要等非守护进程都运行完毕后再回收子进程的资源（否则会产生僵尸进程）才结束\n\n  - 主进程等子进程是因为主进程要给子进程收尸（代用wait方法向操作系统发起回收资源信号（pid号，状态信息））\n\n- 守护线程：非守护线程代码运行完毕，守护线程也就结束 **(守护的是非守护线程)**\n\n  - 主线程在其他非守护线程运行完毕后才算结束（守护线程在此时就会被回收）\n\n  - 强调：主线程也是非守护线程（进程包含了线程）\n\n> 总结:主线程的结束意味着进程结束，进程整体的资源都会被回收，而进程必须保证非守护线程都运行完毕后才能结束\n\n- 守护进程：主进程代码运行完毕，守护进程也就结束\n- 守护线程：非守护线程运行完毕，守护线程结束\n\n### python 线程\n\nThreading 用于提供线程相关的操作，线程是应用程序中工作的最小单元。\n\n#### 1、threading 模块\n\nthreading 模块建立在 _thread 模块之上。thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。\n\n```python\nimport threading\nimport time\n\n\ndef worker(num):\n    \"\"\"\n    thread worker function\n    :return:\n    \"\"\"\n    time.sleep(3)\n    print(\"The num is  %d\" % num)\n    return\n\n\nif __name__ == '__main__':\n    for i in range(5):\n        t = threading.Thread(target=worker, args=(i,), name=\"t.%d\" % i)\n        t.start()\n\n```\n\n上述代码创建了5个\"前台\"线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。\n\n> Thread参数介绍：\n\n- group：参数未使用，默认值为None。\n\n- target：表示调用对象，即子线程要执行的任务。\n\n- args：表示调用的位置参数元组。\n\n- kwargs：表示调用对象的字典。如kwargs = {'name':Jack, 'age':18}。\n\n- name：子进程名称。\n\n- daemon：设置为守护线程(True)或非守护线程(默认：False)\n\n>Thread属性方法说明\n\n|  方法/属性  | 说明                                                                                                                                                                                                             |\n| :---------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|   start()   | 激活线程。使用该方法启动一个子线程，线程名就是我们定义的name，想启动多线程，就必须使用此方法                                                                                                                     |\n|    run()    | 线程被cpu调度后自动执行线程对象的run方法,直接使用该方法并不启动一个新线程，就是在主线程中调用了一个普通函数而已                                                                                                  |\n|    ident    | 获取线程的标识符。线程标识符是一个非零整数，只有在调用了start()方法之后该属性才有效，否则它只返回None。                                                                                                          |\n|    name     | 获取或设置线程的名称                                                                                                                                                                                             |\n|  getName()  | 获取线程的名称                                                                                                                                                                                                   |\n|  setName()  | 设置线程的名称                                                                                                                                                                                                   |\n| is_alive()  | 判断线程是否为激活状态                                                                                                                                                                                           |\n|  isAlive()  | 判断线程是否为激活状态                                                                                                                                                                                           |\n| setDaemon() | 设置为守护线程或非守护线程；默认值为False，如果设置为True，代表该进程为后台守护线程；当非守护线程(不只是主线程)终止时，该线程也随之终止；并且设置为True后，该线程不能创建子线程，设置该属性设置必须在start()之前 |\n| isDaemon()  | 判断是否为守护线程                                                                                                                                                                                               |\n|   join()    | 阻塞等待该线程执行完毕，该方法主要让主线程阻塞等待所有子线程执行完毕                                                                                                                                             |\n\n#### 2、线程锁threading.RLock和threading.Lock\n\n由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。为了保证数据的准确性，引入了锁的概念。所以，可能出现如下问题：\n\n假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加1000000次，g_num的最终的结果应该为2000000。\n\n但是由于是多线程同时操作，有可能出现下面情况：\n\n在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0\n然后t2对得到的值进行加1并赋给g_num，使得g_num=1\n然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。\n这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1\n**如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确，锁的出现解决了这个问题。**\n\n```python\nimport threading\n\ng_num = 0\nlock = threading.Lock() #创建锁\n\n\ndef work1(num):\n    global g_num\n    for i in range(num):\n        lock.acquire() # 加锁\n        g_num += 1\n        lock.release() # 解锁\n    print(\"----in work1, g_num is %d---\" % g_num)\n\n\ndef work2(num):\n    global g_num\n    for i in range(num):\n        lock.acquire()\n        g_num += 1\n        lock.release()\n    print(\"----in work2, g_num is %d---\" % g_num)\n\n\nif __name__ == '__main__':\n    print(\"---线程创建之前g_num is %d---\" % g_num)\n    t1 = threading.Thread(target=work1, args=(1000000,))\n    t2 = threading.Thread(target=work2, args=(1000000,))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n\n    print(\"2个线程对同一个全局变量操作之后的最终结果是:%s\" % g_num)\n```\n\n#### 3、threading.RLock和threading.Lock 的区别\n\n  RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。 \n\n  如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的锁。\n\n- Lock多次加锁演示\n\n```python\nimport threading\nlock = threading.Lock()    #Lock对象\nlock.acquire()\nlock.acquire()  #产生了死锁。\nlock.release()\nlock.release()\n```\n\n- RLock多次加锁演示\n\n```python\nimport threading\nrLock = threading.RLock()  #RLock对象\nrLock.acquire()\nrLock.acquire()    #在同一线程内，程序不会堵塞。\nrLock.release()\nrLock.release()\n```\n\n#### 4、threading.Event\n\n通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：\n\n- event.wait(timeout=None)：调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行；\n- event.set()：将event的标志设置为True，调用wait方法的所有线程将被唤醒；\n- event.clear()：将event的标志设置为False，调用wait方法的所有线程将被阻塞；\n- event.isSet()：判断event的标志是否为True。\n\n```python\nimport threading\n\ndef do(event):\n    print('start')\n    event.wait()\n    print('execute')\n\nevent_obj = threading.Event()\nfor i in range(10):\n    t = threading.Thread(target=do, args=(event_obj,))\n    t.start()\n\nevent_obj.clear()\ninp = input('input:')\nif inp == 'true':\n    event_obj.set()\n```\n\n#### 5、threading.Condition\n\nPython提供的Condition对象提供了对复杂线程同步问题的支持。\n\n- Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。\n\n##### Condition的处理流程如下：\n\n- 首先acquire一个条件变量，然后判断一些条件。\n- 如果条件不满足则wait；\n- 如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。\n- 不断的重复这一过程，从而解决复杂的同步问题。\n\n##### Condition的基本原理如下：\n\n可以认为**Condition对象**维护了一个**锁（Lock/RLock)**和一个**waiting池**。线程通过acquire获得Condition对象，当调用wait方法时，线程会释放Condition内部的锁并进入blocked状态，同时在waiting池中记录这个线程。当调用notify方法时，Condition对象会从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁。\n\nCondition对象的构造函数可以接受一个Lock/RLock对象作为参数，如果没有指定，则Condition对象会在内部自行创建一个RLock。\n\n除了notify方法外，Condition对象还提供了notifyAll方法，可以通知waiting池中的所有线程尝试acquire内部锁。由于上述机制，**处于waiting状态的线程只能通过notify方法唤醒，所以notifyAll的作用在于防止有的线程永远处于沉默状态。**\n\n##### Condition的案例演示如下：\n\n演示条件变量同步的经典问题是生产者与消费者问题：假设有一群生产者(Producer)和一群消费者（Consumer）通过一个市场来交互产品。生产者的”策略“是如果市场上剩余的产品少于1000个，那么就生产100个产品放到市场上；而消费者的”策略“是如果市场上剩余产品的数量多余100个，那么就消费3个产品。\n\n用Condition解决生产者与消费者问题的代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Nov 28 17:15:29 2018\n\n@author: 18665\n\"\"\"\n\nimport threading\nimport time\n\nclass Producer(threading.Thread):\n    # 生产者函数\n    def run(self):\n        global count\n        while True:\n            if con.acquire():\n                # 当count 小于等于1000 的时候进行生产\n                if count > 1000:\n                    con.wait()\n                else:\n                    count = count+100\n                    msg = self.name+' produce 100, count=' + str(count)\n                    print(msg)\n                    # 完成生成后唤醒waiting状态的线程，\n                    # 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁\n                    con.notify()\n                con.release()\n                time.sleep(1)\n\nclass Consumer(threading.Thread):\n    # 消费者函数\n    def run(self):\n        global count\n        while True:\n            # 当count 大于等于100的时候进行消费\n            if con.acquire():\n                if count < 100:\n                    con.wait()\n\n                else:\n                    count = count-5\n                    msg = self.name+' consume 5, count='+str(count)\n                    print(msg)\n                    con.notify()\n                    # 完成生成后唤醒waiting状态的线程，\n                    # 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁\n                con.release()\n                time.sleep(1)\n\ncount = 500\ncon = threading.Condition()\n\ndef test():\n    for i in range(2):\n        p = Producer()\n        p.start()\n    for i in range(5):\n        c = Consumer()\n        c.start()\nif __name__ == '__main__':\n    test()\n```\n\n#### 6、queue模块\n\nqueue.Queue 就是消息队列，可以利用它实现线程间的安全通信。\n\n```python\nimport queue\n\nq = queue.Queue(maxsize=0)  # 构造一个先进显出队列，maxsize指定队列长度，为0 时，表示队列长度无限制。\n\nq.join()    # 等到队列为kong的时候，在执行别的操作\nq.qsize()   # 返回队列的大小 （不可靠）\nq.empty()   # 当队列为空的时候，返回True 否则返回False （不可靠）\nq.full()    # 当队列满的时候，返回True，否则返回False （不可靠）\nq.put(item, block=True, timeout=None) #  将item放入Queue尾部，item必须存在，可以参数block默认为True,表示当队列满时，会等待队列给出可用位置，为False时为非阻塞，此时如果队列已满，会引发queue.Full 异常。 可选参数timeout，表示 会阻塞设置的时间，过后，如果队列无法给出放入item的位置，则引发 queue.Full 异常\nq.get(block=True, timeout=None) #   移除并返回队列头部的一个值，可选参数block默认为True，表示获取值的时候，如果队列为空，则阻塞，为False时，不阻塞，若此时队列为空，则引发 queue.Empty异常。 可选参数timeout，表示会阻塞设置的时候，过后，如果队列为空，则引发Empty异常。\nq.put_nowait(item) #   等效于 put(item,block=False)\nq.get_nowait() #    等效于 get(item,block=False)\n```\n\n代码如下：\n\n```python\nimport queue\nimport threading\nimport time\n\nmessage = queue.Queue(3)\n\n\ndef producer():\n    for i in range(10):\n        message.put(i)\n        print(\"PUT>>>%d\" % i)\n\n\ndef consumer():\n    for i in range(10):\n        msg = message.get()\n        print(\"GET>>>%d\" % msg)\n        time.sleep(1)\n\n\nif __name__ == '__main__':\n    t1 = threading.Thread(target=producer)\n    t2 = threading.Thread(target=consumer)\n\n    t1.start()\n    t2.start()\n```\n\n### Python 进程\n\n#### 1、multiprocess模块\n\nprocess模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。\n\n```shell\n语法：Process([group [, target [, name [, args [, kwargs]]]]])\n```\n\n```python\nimport multiprocessing\nimport time\n\n\ndef worker(num):\n    \"\"\"\n    process worker function\n    :return:\n    \"\"\"\n    time.sleep(3)\n    print(\"The num is  %d\" % num)\n    return\n\n\nif __name__ == '__main__':\n    for i in range(5):\n        t = multiprocessing.Process(target=worker, args=(i,), name=\"t.%d\" % i)\n        t.start()\n```\n\n> Process参数介绍：\n\n- group：参数未使用，默认值为None。\n\n- target：表示调用对象，即子进程要执行的任务。\n\n- args：表示调用的位置参数元组。\n\n- kwargs：表示调用对象的字典。如kwargs = {'name':Jack, 'age':18}。\n\n- name：子进程名称。\n\n- daemon：设置为守护进程(True)或非守护进程(默认：False)\n\n> Process属性方法介绍\n\n|    方法/属性    | 说明                                                                                                                                                                                   |\n| :-------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|     start()     | 启动进程，调用进程中的run()方法。                                                                                                                                                      |\n|      run()      | 进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 。                                                                                              |\n|   terminate()   | 强制终止进程，不会进行任何清理操作。如果该进程终止前，创建了子进程，那么该子进程在其强制结束后变为僵尸进程；如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。使用时，要注意。 |\n|   is_alive()    | 判断某进程是否存活，存活返回True，否则False。                                                                                                                                          |\n| join([timeout]) | 主线程等待子线程终止。timeout为可选择超时时间；需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 。                                                             |\n|     daemon      | 默认值为False，如果设置为True，代表该进程为后台守护进程；当该进程的父进程终止时，该进程也随之终止；并且设置为True后，该进程不能创建子进程，设置该属性必须在start()之前                 |\n|      name       | 进程名称。                                                                                                                                                                             |\n|       pid       | 进程pid                                                                                                                                                                                |\n|    exitcode     | 进程运行时为None，如果为-N，表示被信号N结束了。                                                                                                                                        |\n|     authkey     | 进程身份验证，默认是由os.urandom()随机生成32字符的字符串。这个键的用途是设计涉及网络连接的底层进程间的通信提供安全性，这类连接只有在具有相同身份验证才能成功。                         |\n\n> 注意:\n\n- **在进程python的设计里面只有主进程可以接收input()的输入，子进程没有输入模式，运行直接报错**\n- **更坑的是进程池，表面上不会出错，但是input()函数一旦进入无法退出，一直在接收输入的数据**\n\n#### 2、消息队列multiprocess.Queue\n\n可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序\n\n> Queue属性方法说明\n\n|             方法/属性             | 说明                                                                                                                                                                                                                                                                                                                    |\n| :-------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|   get( [ block [ ,timeout ] ] )   | 返回q中的一个元素。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。                                            |\n|           get_nowait( )           | 同q.get(False)方法。                                                                                                                                                                                                                                                                                                    |\n| put(item [, block [,timeout ] ] ) | 将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。                                                                                   |\n|             q.qsize()             | 返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。                                                                                                                                         |\n|             q.empty()             | 如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。                                                                                                                                                                  |\n|             q.full()              | 如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。。                                                                                                                                                                                                                                  |\n|          其他方法(了解)           |\n|             q.close()             | 关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。 |\n|      q.cancel_join_thread()       | 不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。                                                                                                                                                                                                                                                     |\n|          q.join_thread()          | 连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。                                                                                                                                        |\n\n#### 3、进程池\n\n为什么要有进程池?进程池的概念。\n\n在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？\n\n在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。\n\n##### multiprocess.Pool模块\n\n```shell\n语法：Pool([numprocess  [,initializer [, initargs]]])\n```\n\n> Pool参数介绍\n\n- numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值\n\n- initializer：是每个工作进程启动时要执行的可调用对象，默认为None\n\n- initargs：是要传给initializer（可迭代）的参数组\n\n> Pool主要方法介绍\n\n|               方法/属性               | 说明                                                                                                                                                                                                                                         |\n| :-----------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|    apply(func [, args [, kwargs]])    | 在一个池工作进程中执行func(*args,**kwargs),然后返回结果。'需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用apply()函数或者使用p.apply_async()                             |\n| apply_async(func [, args [, kwargs]]) | 在一个池工作进程中执行func(*args,**kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。 |\n|                close()                | 关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成                                                                                                                                                                 |\n|              terminate()              | 不管任务是否完成，立即停止工作进程。在对pool对象进程垃圾回收的时候，会立即调用terminate()                                                                                                                                                    |\n|                jion()                 | 等待所有工作进程退出。此方法只能在close（）或teminate()之后调用                                                                                                                                                                              |\n|            其他方法(了解）            | 方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法                                                                                                                                                              |\n|               obj.get()               | 返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。                                                                                        |\n|              obj.ready()              | 如果调用完成，返回True                                                                                                                                                                                                                       |\n|           obj.successful()            | 如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常                                                                                                                                                                 |\n|          obj.wait([timeout])          | 等待结果变为可用。                                                                                                                                                                                                                           |\n|            obj.terminate()            | 立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数                                                                                                                                                |\n\n##### 进程池中的Queue\n\n如果要使用Pool创建进程，就需要使用`multiprocessing.Manager()`中的`Queue()`，而不是`multiprocessing.Queue()`\n\n### Python 协程\n\n协程，又称微线程，纤程。英文名Coroutine。协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。\n\n通俗的理解：**在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定**\n\n#### 1. 协程和线程差异\n\n在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。\n\n#### 2. 实现方式\n\n- yield\n\n  ```python\n  import time\n\n  def work1():\n      while True:\n          print(\"----work1---\")\n          yield\n          time.sleep(0.5)\n\n  def work2():\n      while True:\n          print(\"----work2---\")\n          yield\n          time.sleep(0.5)\n\n  def main():\n      w1 = work1()\n      w2 = work2()\n      while True:\n          next(w1)\n          next(w2)\n\n  if __name__ == \"__main__\":\n      main()\n\n  ```\n\n- greenlet\n\n为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单\n\n**安装方式**\n使用如下命令安装greenlet模块:\n\n```shell\nsudo pip3 install greenlet\n```\n\n```python\n#coding=utf-8\n\nfrom greenlet import greenlet\nimport time\n\ndef test1():\n    while True:\n        print \"---A--\"\n        gr2.switch()\n        time.sleep(0.5)\n\ndef test2():\n    while True:\n        print \"---B--\"\n        gr1.switch()\n        time.sleep(0.5)\n\ngr1 = greenlet(test1)\ngr2 = greenlet(test2)\n\n#切换到gr1中运行\ngr1.switch()\n```\n\n- gevent\n\ngreenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent\n\n其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。\n\n由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。\n\n**安装方式**\n使用如下命令安装gevent模块:\n\n```shell\npip3 install gevent\n```\n\n在gevent中不能直接使用time.sleep类似的方法，要么使用gevent.sleep，要么利用gevent.monkey打补丁\n\n```python\nfrom gevent import monkey\nimport gevent\nimport random\nimport time\n\ndef coroutine_work(coroutine_name):\n    for i in range(10):\n        print(coroutine_name, i)\n        time.sleep(random.random())\n\ngevent.joinall([\n        gevent.spawn(coroutine_work, \"work1\"),\n        gevent.spawn(coroutine_work, \"work2\")\n])\n\n```\n\n### 获得进程和线程信息\n\n想要获取线程和进程相关信息，代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\n获得线程, 进程 ID,NAME\n总结:\n\n\"\"\"\nimport threading\nimport psutil\nimport os\nimport datetime\n\n# 1 获取线程ID,NAME\nt = threading.currentThread()\n# 线程ID\nprint('Thread id : %d' % t.ident)\n# 线程NAME\nprint('Thread name : %s' % t.getName())\n\n# 2 获取线程ID,NAME\npid = os.getpid()\np = psutil.Process(pid)\nprint('----------------')\n# 进程ID\nprint('Process id : %d' % pid)\n# 进程NAME\nprint('Process name : %s' % p.name())\n# 获取进程bin路径\nprint('Process bin  path : %s' % p.exe())\n# 获取pid对应的路径\nprint('Process path : %s' % p.cwd())\n# 进程状态\nprint('Process status : %s' % p.status())\n# 进程运行时间\nprint('Process creation time : %s' % datetime.datetime.fromtimestamp(p.create_time()).strftime(\"%Y-%m-%d %H:%M:%S\"))\n# CPU使用情况\nprint(p.cpu_times())\n# 内存使用情况\nprint('Memory usage : %s%%' % p.memory_percent())\n# 硬盘读取信息\nprint(p.io_counters())\n# 打开进程socket的namedutples列表\nprint(p.connections())\n# 此进程的线程数\nprint('Process number of threads : %s' % p.num_threads())\n```","source":"_posts/python高级-进程、线程、协程.md","raw":"---\ntitle: python多任务机制\ndate: 2019-05-17 20:53:32\ncategories:\n  - 技术\n  - python\n  - 系统\ntags:\n  - 线程\n  - 进程\n  - 协程\n  - 多任务\n---\n\n### python 线程与进程简介\n\n#### 1. 进程与线程的历史\n\n我们都知道计算机是由**硬件**和**软件**组成的。\n\n- 硬件中的 CPU 是计算机的核心，它承担计算机的所有任务。\n- 操作系统是运行在硬件之上的软件，是计算机的管理者，它负责资源的管理和分配、任务的调度。\n- 程序是运行在系统上的具有某种功能的软件，比如说浏览器，音乐播放器等。\n\n每次执行程序的时候，都会完成一定的功能，比如说浏览器帮我们打开网页，为了保证其独立性，就需要一个专门的管理和控制执行程序的数据结构——**进程控制块**。\n\n进程就是一个程序在一个数据集上的一次动态执行过程。\n\n- 进程一般由程序、数据集、进程控制块三部分组成。\n  - 我们编写的程序用来描述进程要完成哪些功能以及如何完成；\n  - 数据集则是程序在执行过程中所需要使用的资源；\n  - 进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。\n\n- 在早期的操作系统里，计算机只有一个核心，进程是执行程序的最小单位，任务调度采用时间片轮转的抢占式方式进行进程调度。\n- 每个进程都有各自的一块独立的内存，保证进程彼此间的内存地址空间的隔离。\n\n随着计算机技术的发展，进程出现了很多弊端：\n\n- 一是进程的创建、撤销和切换的开销比较大\n- 二是由于对称多处理机（对称多处理机（SymmetricalMulti-Processing）又叫 SMP，是指在一个计算机上汇集了一组处理器 (多 CPU)，各 CPU 之间共享内存子系统以及总线结构）的出现，可以满足多个运行单位，而多进程并行开销过大。\n\n这个时候就引入了线程的概念。\n\n- 线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合 和堆栈共同组成。\n- 线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。\n- 线程没有自己的系统资源，只拥有在运行时必不可少的资源。\n- 但线程可以与同属与同一进程的其他线程共享进程所拥有的其他资源。\n\n#### 2.  进程与线程之间的关系\n\n- 线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。\n- 线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息 (如程序计数器、一组寄存器和栈)。\n\n#### 3. 守护线程与守护进程的区别\n\n> 强调：运行完毕，并非是终止\n\n- 线程与进程运行完毕的区别：\n\n  - 主进程运行完毕指的是主进程代码运行完毕\n\n  - 主线程运行完毕指的是所在的进程内的所有非守护线程运行完毕后，主线程才算运行完毕\n\n- 守护进程：主进程代码运行完毕，守护进程也就结束 **(守护的是主进程)**\n\n  - 主进程要等非守护进程都运行完毕后再回收子进程的资源（否则会产生僵尸进程）才结束\n\n  - 主进程等子进程是因为主进程要给子进程收尸（代用wait方法向操作系统发起回收资源信号（pid号，状态信息））\n\n- 守护线程：非守护线程代码运行完毕，守护线程也就结束 **(守护的是非守护线程)**\n\n  - 主线程在其他非守护线程运行完毕后才算结束（守护线程在此时就会被回收）\n\n  - 强调：主线程也是非守护线程（进程包含了线程）\n\n> 总结:主线程的结束意味着进程结束，进程整体的资源都会被回收，而进程必须保证非守护线程都运行完毕后才能结束\n\n- 守护进程：主进程代码运行完毕，守护进程也就结束\n- 守护线程：非守护线程运行完毕，守护线程结束\n\n### python 线程\n\nThreading 用于提供线程相关的操作，线程是应用程序中工作的最小单元。\n\n#### 1、threading 模块\n\nthreading 模块建立在 _thread 模块之上。thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。\n\n```python\nimport threading\nimport time\n\n\ndef worker(num):\n    \"\"\"\n    thread worker function\n    :return:\n    \"\"\"\n    time.sleep(3)\n    print(\"The num is  %d\" % num)\n    return\n\n\nif __name__ == '__main__':\n    for i in range(5):\n        t = threading.Thread(target=worker, args=(i,), name=\"t.%d\" % i)\n        t.start()\n\n```\n\n上述代码创建了5个\"前台\"线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。\n\n> Thread参数介绍：\n\n- group：参数未使用，默认值为None。\n\n- target：表示调用对象，即子线程要执行的任务。\n\n- args：表示调用的位置参数元组。\n\n- kwargs：表示调用对象的字典。如kwargs = {'name':Jack, 'age':18}。\n\n- name：子进程名称。\n\n- daemon：设置为守护线程(True)或非守护线程(默认：False)\n\n>Thread属性方法说明\n\n|  方法/属性  | 说明                                                                                                                                                                                                             |\n| :---------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|   start()   | 激活线程。使用该方法启动一个子线程，线程名就是我们定义的name，想启动多线程，就必须使用此方法                                                                                                                     |\n|    run()    | 线程被cpu调度后自动执行线程对象的run方法,直接使用该方法并不启动一个新线程，就是在主线程中调用了一个普通函数而已                                                                                                  |\n|    ident    | 获取线程的标识符。线程标识符是一个非零整数，只有在调用了start()方法之后该属性才有效，否则它只返回None。                                                                                                          |\n|    name     | 获取或设置线程的名称                                                                                                                                                                                             |\n|  getName()  | 获取线程的名称                                                                                                                                                                                                   |\n|  setName()  | 设置线程的名称                                                                                                                                                                                                   |\n| is_alive()  | 判断线程是否为激活状态                                                                                                                                                                                           |\n|  isAlive()  | 判断线程是否为激活状态                                                                                                                                                                                           |\n| setDaemon() | 设置为守护线程或非守护线程；默认值为False，如果设置为True，代表该进程为后台守护线程；当非守护线程(不只是主线程)终止时，该线程也随之终止；并且设置为True后，该线程不能创建子线程，设置该属性设置必须在start()之前 |\n| isDaemon()  | 判断是否为守护线程                                                                                                                                                                                               |\n|   join()    | 阻塞等待该线程执行完毕，该方法主要让主线程阻塞等待所有子线程执行完毕                                                                                                                                             |\n\n#### 2、线程锁threading.RLock和threading.Lock\n\n由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。为了保证数据的准确性，引入了锁的概念。所以，可能出现如下问题：\n\n假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加1000000次，g_num的最终的结果应该为2000000。\n\n但是由于是多线程同时操作，有可能出现下面情况：\n\n在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0\n然后t2对得到的值进行加1并赋给g_num，使得g_num=1\n然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。\n这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1\n**如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确，锁的出现解决了这个问题。**\n\n```python\nimport threading\n\ng_num = 0\nlock = threading.Lock() #创建锁\n\n\ndef work1(num):\n    global g_num\n    for i in range(num):\n        lock.acquire() # 加锁\n        g_num += 1\n        lock.release() # 解锁\n    print(\"----in work1, g_num is %d---\" % g_num)\n\n\ndef work2(num):\n    global g_num\n    for i in range(num):\n        lock.acquire()\n        g_num += 1\n        lock.release()\n    print(\"----in work2, g_num is %d---\" % g_num)\n\n\nif __name__ == '__main__':\n    print(\"---线程创建之前g_num is %d---\" % g_num)\n    t1 = threading.Thread(target=work1, args=(1000000,))\n    t2 = threading.Thread(target=work2, args=(1000000,))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n\n    print(\"2个线程对同一个全局变量操作之后的最终结果是:%s\" % g_num)\n```\n\n#### 3、threading.RLock和threading.Lock 的区别\n\n  RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。 \n\n  如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的锁。\n\n- Lock多次加锁演示\n\n```python\nimport threading\nlock = threading.Lock()    #Lock对象\nlock.acquire()\nlock.acquire()  #产生了死锁。\nlock.release()\nlock.release()\n```\n\n- RLock多次加锁演示\n\n```python\nimport threading\nrLock = threading.RLock()  #RLock对象\nrLock.acquire()\nrLock.acquire()    #在同一线程内，程序不会堵塞。\nrLock.release()\nrLock.release()\n```\n\n#### 4、threading.Event\n\n通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：\n\n- event.wait(timeout=None)：调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行；\n- event.set()：将event的标志设置为True，调用wait方法的所有线程将被唤醒；\n- event.clear()：将event的标志设置为False，调用wait方法的所有线程将被阻塞；\n- event.isSet()：判断event的标志是否为True。\n\n```python\nimport threading\n\ndef do(event):\n    print('start')\n    event.wait()\n    print('execute')\n\nevent_obj = threading.Event()\nfor i in range(10):\n    t = threading.Thread(target=do, args=(event_obj,))\n    t.start()\n\nevent_obj.clear()\ninp = input('input:')\nif inp == 'true':\n    event_obj.set()\n```\n\n#### 5、threading.Condition\n\nPython提供的Condition对象提供了对复杂线程同步问题的支持。\n\n- Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。\n\n##### Condition的处理流程如下：\n\n- 首先acquire一个条件变量，然后判断一些条件。\n- 如果条件不满足则wait；\n- 如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。\n- 不断的重复这一过程，从而解决复杂的同步问题。\n\n##### Condition的基本原理如下：\n\n可以认为**Condition对象**维护了一个**锁（Lock/RLock)**和一个**waiting池**。线程通过acquire获得Condition对象，当调用wait方法时，线程会释放Condition内部的锁并进入blocked状态，同时在waiting池中记录这个线程。当调用notify方法时，Condition对象会从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁。\n\nCondition对象的构造函数可以接受一个Lock/RLock对象作为参数，如果没有指定，则Condition对象会在内部自行创建一个RLock。\n\n除了notify方法外，Condition对象还提供了notifyAll方法，可以通知waiting池中的所有线程尝试acquire内部锁。由于上述机制，**处于waiting状态的线程只能通过notify方法唤醒，所以notifyAll的作用在于防止有的线程永远处于沉默状态。**\n\n##### Condition的案例演示如下：\n\n演示条件变量同步的经典问题是生产者与消费者问题：假设有一群生产者(Producer)和一群消费者（Consumer）通过一个市场来交互产品。生产者的”策略“是如果市场上剩余的产品少于1000个，那么就生产100个产品放到市场上；而消费者的”策略“是如果市场上剩余产品的数量多余100个，那么就消费3个产品。\n\n用Condition解决生产者与消费者问题的代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Nov 28 17:15:29 2018\n\n@author: 18665\n\"\"\"\n\nimport threading\nimport time\n\nclass Producer(threading.Thread):\n    # 生产者函数\n    def run(self):\n        global count\n        while True:\n            if con.acquire():\n                # 当count 小于等于1000 的时候进行生产\n                if count > 1000:\n                    con.wait()\n                else:\n                    count = count+100\n                    msg = self.name+' produce 100, count=' + str(count)\n                    print(msg)\n                    # 完成生成后唤醒waiting状态的线程，\n                    # 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁\n                    con.notify()\n                con.release()\n                time.sleep(1)\n\nclass Consumer(threading.Thread):\n    # 消费者函数\n    def run(self):\n        global count\n        while True:\n            # 当count 大于等于100的时候进行消费\n            if con.acquire():\n                if count < 100:\n                    con.wait()\n\n                else:\n                    count = count-5\n                    msg = self.name+' consume 5, count='+str(count)\n                    print(msg)\n                    con.notify()\n                    # 完成生成后唤醒waiting状态的线程，\n                    # 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁\n                con.release()\n                time.sleep(1)\n\ncount = 500\ncon = threading.Condition()\n\ndef test():\n    for i in range(2):\n        p = Producer()\n        p.start()\n    for i in range(5):\n        c = Consumer()\n        c.start()\nif __name__ == '__main__':\n    test()\n```\n\n#### 6、queue模块\n\nqueue.Queue 就是消息队列，可以利用它实现线程间的安全通信。\n\n```python\nimport queue\n\nq = queue.Queue(maxsize=0)  # 构造一个先进显出队列，maxsize指定队列长度，为0 时，表示队列长度无限制。\n\nq.join()    # 等到队列为kong的时候，在执行别的操作\nq.qsize()   # 返回队列的大小 （不可靠）\nq.empty()   # 当队列为空的时候，返回True 否则返回False （不可靠）\nq.full()    # 当队列满的时候，返回True，否则返回False （不可靠）\nq.put(item, block=True, timeout=None) #  将item放入Queue尾部，item必须存在，可以参数block默认为True,表示当队列满时，会等待队列给出可用位置，为False时为非阻塞，此时如果队列已满，会引发queue.Full 异常。 可选参数timeout，表示 会阻塞设置的时间，过后，如果队列无法给出放入item的位置，则引发 queue.Full 异常\nq.get(block=True, timeout=None) #   移除并返回队列头部的一个值，可选参数block默认为True，表示获取值的时候，如果队列为空，则阻塞，为False时，不阻塞，若此时队列为空，则引发 queue.Empty异常。 可选参数timeout，表示会阻塞设置的时候，过后，如果队列为空，则引发Empty异常。\nq.put_nowait(item) #   等效于 put(item,block=False)\nq.get_nowait() #    等效于 get(item,block=False)\n```\n\n代码如下：\n\n```python\nimport queue\nimport threading\nimport time\n\nmessage = queue.Queue(3)\n\n\ndef producer():\n    for i in range(10):\n        message.put(i)\n        print(\"PUT>>>%d\" % i)\n\n\ndef consumer():\n    for i in range(10):\n        msg = message.get()\n        print(\"GET>>>%d\" % msg)\n        time.sleep(1)\n\n\nif __name__ == '__main__':\n    t1 = threading.Thread(target=producer)\n    t2 = threading.Thread(target=consumer)\n\n    t1.start()\n    t2.start()\n```\n\n### Python 进程\n\n#### 1、multiprocess模块\n\nprocess模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。\n\n```shell\n语法：Process([group [, target [, name [, args [, kwargs]]]]])\n```\n\n```python\nimport multiprocessing\nimport time\n\n\ndef worker(num):\n    \"\"\"\n    process worker function\n    :return:\n    \"\"\"\n    time.sleep(3)\n    print(\"The num is  %d\" % num)\n    return\n\n\nif __name__ == '__main__':\n    for i in range(5):\n        t = multiprocessing.Process(target=worker, args=(i,), name=\"t.%d\" % i)\n        t.start()\n```\n\n> Process参数介绍：\n\n- group：参数未使用，默认值为None。\n\n- target：表示调用对象，即子进程要执行的任务。\n\n- args：表示调用的位置参数元组。\n\n- kwargs：表示调用对象的字典。如kwargs = {'name':Jack, 'age':18}。\n\n- name：子进程名称。\n\n- daemon：设置为守护进程(True)或非守护进程(默认：False)\n\n> Process属性方法介绍\n\n|    方法/属性    | 说明                                                                                                                                                                                   |\n| :-------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|     start()     | 启动进程，调用进程中的run()方法。                                                                                                                                                      |\n|      run()      | 进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 。                                                                                              |\n|   terminate()   | 强制终止进程，不会进行任何清理操作。如果该进程终止前，创建了子进程，那么该子进程在其强制结束后变为僵尸进程；如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。使用时，要注意。 |\n|   is_alive()    | 判断某进程是否存活，存活返回True，否则False。                                                                                                                                          |\n| join([timeout]) | 主线程等待子线程终止。timeout为可选择超时时间；需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 。                                                             |\n|     daemon      | 默认值为False，如果设置为True，代表该进程为后台守护进程；当该进程的父进程终止时，该进程也随之终止；并且设置为True后，该进程不能创建子进程，设置该属性必须在start()之前                 |\n|      name       | 进程名称。                                                                                                                                                                             |\n|       pid       | 进程pid                                                                                                                                                                                |\n|    exitcode     | 进程运行时为None，如果为-N，表示被信号N结束了。                                                                                                                                        |\n|     authkey     | 进程身份验证，默认是由os.urandom()随机生成32字符的字符串。这个键的用途是设计涉及网络连接的底层进程间的通信提供安全性，这类连接只有在具有相同身份验证才能成功。                         |\n\n> 注意:\n\n- **在进程python的设计里面只有主进程可以接收input()的输入，子进程没有输入模式，运行直接报错**\n- **更坑的是进程池，表面上不会出错，但是input()函数一旦进入无法退出，一直在接收输入的数据**\n\n#### 2、消息队列multiprocess.Queue\n\n可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序\n\n> Queue属性方法说明\n\n|             方法/属性             | 说明                                                                                                                                                                                                                                                                                                                    |\n| :-------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|   get( [ block [ ,timeout ] ] )   | 返回q中的一个元素。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。                                            |\n|           get_nowait( )           | 同q.get(False)方法。                                                                                                                                                                                                                                                                                                    |\n| put(item [, block [,timeout ] ] ) | 将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。                                                                                   |\n|             q.qsize()             | 返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。                                                                                                                                         |\n|             q.empty()             | 如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。                                                                                                                                                                  |\n|             q.full()              | 如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。。                                                                                                                                                                                                                                  |\n|          其他方法(了解)           |\n|             q.close()             | 关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。 |\n|      q.cancel_join_thread()       | 不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。                                                                                                                                                                                                                                                     |\n|          q.join_thread()          | 连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。                                                                                                                                        |\n\n#### 3、进程池\n\n为什么要有进程池?进程池的概念。\n\n在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？\n\n在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。\n\n##### multiprocess.Pool模块\n\n```shell\n语法：Pool([numprocess  [,initializer [, initargs]]])\n```\n\n> Pool参数介绍\n\n- numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值\n\n- initializer：是每个工作进程启动时要执行的可调用对象，默认为None\n\n- initargs：是要传给initializer（可迭代）的参数组\n\n> Pool主要方法介绍\n\n|               方法/属性               | 说明                                                                                                                                                                                                                                         |\n| :-----------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|    apply(func [, args [, kwargs]])    | 在一个池工作进程中执行func(*args,**kwargs),然后返回结果。'需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用apply()函数或者使用p.apply_async()                             |\n| apply_async(func [, args [, kwargs]]) | 在一个池工作进程中执行func(*args,**kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。 |\n|                close()                | 关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成                                                                                                                                                                 |\n|              terminate()              | 不管任务是否完成，立即停止工作进程。在对pool对象进程垃圾回收的时候，会立即调用terminate()                                                                                                                                                    |\n|                jion()                 | 等待所有工作进程退出。此方法只能在close（）或teminate()之后调用                                                                                                                                                                              |\n|            其他方法(了解）            | 方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法                                                                                                                                                              |\n|               obj.get()               | 返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。                                                                                        |\n|              obj.ready()              | 如果调用完成，返回True                                                                                                                                                                                                                       |\n|           obj.successful()            | 如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常                                                                                                                                                                 |\n|          obj.wait([timeout])          | 等待结果变为可用。                                                                                                                                                                                                                           |\n|            obj.terminate()            | 立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数                                                                                                                                                |\n\n##### 进程池中的Queue\n\n如果要使用Pool创建进程，就需要使用`multiprocessing.Manager()`中的`Queue()`，而不是`multiprocessing.Queue()`\n\n### Python 协程\n\n协程，又称微线程，纤程。英文名Coroutine。协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。\n\n通俗的理解：**在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定**\n\n#### 1. 协程和线程差异\n\n在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。\n\n#### 2. 实现方式\n\n- yield\n\n  ```python\n  import time\n\n  def work1():\n      while True:\n          print(\"----work1---\")\n          yield\n          time.sleep(0.5)\n\n  def work2():\n      while True:\n          print(\"----work2---\")\n          yield\n          time.sleep(0.5)\n\n  def main():\n      w1 = work1()\n      w2 = work2()\n      while True:\n          next(w1)\n          next(w2)\n\n  if __name__ == \"__main__\":\n      main()\n\n  ```\n\n- greenlet\n\n为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单\n\n**安装方式**\n使用如下命令安装greenlet模块:\n\n```shell\nsudo pip3 install greenlet\n```\n\n```python\n#coding=utf-8\n\nfrom greenlet import greenlet\nimport time\n\ndef test1():\n    while True:\n        print \"---A--\"\n        gr2.switch()\n        time.sleep(0.5)\n\ndef test2():\n    while True:\n        print \"---B--\"\n        gr1.switch()\n        time.sleep(0.5)\n\ngr1 = greenlet(test1)\ngr2 = greenlet(test2)\n\n#切换到gr1中运行\ngr1.switch()\n```\n\n- gevent\n\ngreenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent\n\n其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。\n\n由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。\n\n**安装方式**\n使用如下命令安装gevent模块:\n\n```shell\npip3 install gevent\n```\n\n在gevent中不能直接使用time.sleep类似的方法，要么使用gevent.sleep，要么利用gevent.monkey打补丁\n\n```python\nfrom gevent import monkey\nimport gevent\nimport random\nimport time\n\ndef coroutine_work(coroutine_name):\n    for i in range(10):\n        print(coroutine_name, i)\n        time.sleep(random.random())\n\ngevent.joinall([\n        gevent.spawn(coroutine_work, \"work1\"),\n        gevent.spawn(coroutine_work, \"work2\")\n])\n\n```\n\n### 获得进程和线程信息\n\n想要获取线程和进程相关信息，代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n\"\"\"\n获得线程, 进程 ID,NAME\n总结:\n\n\"\"\"\nimport threading\nimport psutil\nimport os\nimport datetime\n\n# 1 获取线程ID,NAME\nt = threading.currentThread()\n# 线程ID\nprint('Thread id : %d' % t.ident)\n# 线程NAME\nprint('Thread name : %s' % t.getName())\n\n# 2 获取线程ID,NAME\npid = os.getpid()\np = psutil.Process(pid)\nprint('----------------')\n# 进程ID\nprint('Process id : %d' % pid)\n# 进程NAME\nprint('Process name : %s' % p.name())\n# 获取进程bin路径\nprint('Process bin  path : %s' % p.exe())\n# 获取pid对应的路径\nprint('Process path : %s' % p.cwd())\n# 进程状态\nprint('Process status : %s' % p.status())\n# 进程运行时间\nprint('Process creation time : %s' % datetime.datetime.fromtimestamp(p.create_time()).strftime(\"%Y-%m-%d %H:%M:%S\"))\n# CPU使用情况\nprint(p.cpu_times())\n# 内存使用情况\nprint('Memory usage : %s%%' % p.memory_percent())\n# 硬盘读取信息\nprint(p.io_counters())\n# 打开进程socket的namedutples列表\nprint(p.connections())\n# 此进程的线程数\nprint('Process number of threads : %s' % p.num_threads())\n```","slug":"python高级-进程、线程、协程","published":1,"updated":"2021-01-23T14:53:36.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnugw00hwjjlngzw071oi","content":"<h3 id=\"python-线程与进程简介\"><a href=\"#python-线程与进程简介\" class=\"headerlink\" title=\"python 线程与进程简介\"></a>python 线程与进程简介</h3><h4 id=\"1-进程与线程的历史\"><a href=\"#1-进程与线程的历史\" class=\"headerlink\" title=\"1. 进程与线程的历史\"></a>1. 进程与线程的历史</h4><p>我们都知道计算机是由<strong>硬件</strong>和<strong>软件</strong>组成的。</p>\n<ul>\n<li>硬件中的 CPU 是计算机的核心，它承担计算机的所有任务。</li>\n<li>操作系统是运行在硬件之上的软件，是计算机的管理者，它负责资源的管理和分配、任务的调度。</li>\n<li>程序是运行在系统上的具有某种功能的软件，比如说浏览器，音乐播放器等。</li>\n</ul>\n<p>每次执行程序的时候，都会完成一定的功能，比如说浏览器帮我们打开网页，为了保证其独立性，就需要一个专门的管理和控制执行程序的数据结构——<strong>进程控制块</strong>。</p>\n<p>进程就是一个程序在一个数据集上的一次动态执行过程。</p>\n<ul>\n<li><p>进程一般由程序、数据集、进程控制块三部分组成。</p>\n<ul>\n<li>我们编写的程序用来描述进程要完成哪些功能以及如何完成；</li>\n<li>数据集则是程序在执行过程中所需要使用的资源；</li>\n<li>进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</li>\n</ul>\n</li>\n<li><p>在早期的操作系统里，计算机只有一个核心，进程是执行程序的最小单位，任务调度采用时间片轮转的抢占式方式进行进程调度。</p>\n</li>\n<li><p>每个进程都有各自的一块独立的内存，保证进程彼此间的内存地址空间的隔离。</p>\n</li>\n</ul>\n<p>随着计算机技术的发展，进程出现了很多弊端：</p>\n<ul>\n<li>一是进程的创建、撤销和切换的开销比较大</li>\n<li>二是由于对称多处理机（对称多处理机（SymmetricalMulti-Processing）又叫 SMP，是指在一个计算机上汇集了一组处理器 (多 CPU)，各 CPU 之间共享内存子系统以及总线结构）的出现，可以满足多个运行单位，而多进程并行开销过大。</li>\n</ul>\n<p>这个时候就引入了线程的概念。</p>\n<ul>\n<li>线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合 和堆栈共同组成。</li>\n<li>线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。</li>\n<li>线程没有自己的系统资源，只拥有在运行时必不可少的资源。</li>\n<li>但线程可以与同属与同一进程的其他线程共享进程所拥有的其他资源。</li>\n</ul>\n<h4 id=\"2-进程与线程之间的关系\"><a href=\"#2-进程与线程之间的关系\" class=\"headerlink\" title=\"2.  进程与线程之间的关系\"></a>2.  进程与线程之间的关系</h4><ul>\n<li>线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。</li>\n<li>线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息 (如程序计数器、一组寄存器和栈)。</li>\n</ul>\n<h4 id=\"3-守护线程与守护进程的区别\"><a href=\"#3-守护线程与守护进程的区别\" class=\"headerlink\" title=\"3. 守护线程与守护进程的区别\"></a>3. 守护线程与守护进程的区别</h4><blockquote>\n<p>强调：运行完毕，并非是终止</p>\n</blockquote>\n<ul>\n<li><p>线程与进程运行完毕的区别：</p>\n<ul>\n<li><p>主进程运行完毕指的是主进程代码运行完毕</p>\n</li>\n<li><p>主线程运行完毕指的是所在的进程内的所有非守护线程运行完毕后，主线程才算运行完毕</p>\n</li>\n</ul>\n</li>\n<li><p>守护进程：主进程代码运行完毕，守护进程也就结束 <strong>(守护的是主进程)</strong></p>\n<ul>\n<li><p>主进程要等非守护进程都运行完毕后再回收子进程的资源（否则会产生僵尸进程）才结束</p>\n</li>\n<li><p>主进程等子进程是因为主进程要给子进程收尸（代用wait方法向操作系统发起回收资源信号（pid号，状态信息））</p>\n</li>\n</ul>\n</li>\n<li><p>守护线程：非守护线程代码运行完毕，守护线程也就结束 <strong>(守护的是非守护线程)</strong></p>\n<ul>\n<li><p>主线程在其他非守护线程运行完毕后才算结束（守护线程在此时就会被回收）</p>\n</li>\n<li><p>强调：主线程也是非守护线程（进程包含了线程）</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>总结:主线程的结束意味着进程结束，进程整体的资源都会被回收，而进程必须保证非守护线程都运行完毕后才能结束</p>\n</blockquote>\n<ul>\n<li>守护进程：主进程代码运行完毕，守护进程也就结束</li>\n<li>守护线程：非守护线程运行完毕，守护线程结束</li>\n</ul>\n<h3 id=\"python-线程\"><a href=\"#python-线程\" class=\"headerlink\" title=\"python 线程\"></a>python 线程</h3><p>Threading 用于提供线程相关的操作，线程是应用程序中工作的最小单元。</p>\n<h4 id=\"1、threading-模块\"><a href=\"#1、threading-模块\" class=\"headerlink\" title=\"1、threading 模块\"></a>1、threading 模块</h4><p>threading 模块建立在 _thread 模块之上。thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">worker</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    thread worker function</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    print(<span class=\"hljs-string\">&quot;The num is  %d&quot;</span> % num)<br>    <span class=\"hljs-keyword\">return</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = threading.Thread(target=worker, args=(i,), name=<span class=\"hljs-string\">&quot;t.%d&quot;</span> % i)<br>        t.start()<br><br></code></pre></div></td></tr></table></figure>\n<p>上述代码创建了5个”前台”线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。</p>\n<blockquote>\n<p>Thread参数介绍：</p>\n</blockquote>\n<ul>\n<li><p>group：参数未使用，默认值为None。</p>\n</li>\n<li><p>target：表示调用对象，即子线程要执行的任务。</p>\n</li>\n<li><p>args：表示调用的位置参数元组。</p>\n</li>\n<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>\n</li>\n<li><p>name：子进程名称。</p>\n</li>\n<li><p>daemon：设置为守护线程(True)或非守护线程(默认：False)</p>\n</li>\n</ul>\n<blockquote>\n<p>Thread属性方法说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start()</td>\n<td align=\"left\">激活线程。使用该方法启动一个子线程，线程名就是我们定义的name，想启动多线程，就必须使用此方法</td>\n</tr>\n<tr>\n<td align=\"center\">run()</td>\n<td align=\"left\">线程被cpu调度后自动执行线程对象的run方法,直接使用该方法并不启动一个新线程，就是在主线程中调用了一个普通函数而已</td>\n</tr>\n<tr>\n<td align=\"center\">ident</td>\n<td align=\"left\">获取线程的标识符。线程标识符是一个非零整数，只有在调用了start()方法之后该属性才有效，否则它只返回None。</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"left\">获取或设置线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">getName()</td>\n<td align=\"left\">获取线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">setName()</td>\n<td align=\"left\">设置线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">is_alive()</td>\n<td align=\"left\">判断线程是否为激活状态</td>\n</tr>\n<tr>\n<td align=\"center\">isAlive()</td>\n<td align=\"left\">判断线程是否为激活状态</td>\n</tr>\n<tr>\n<td align=\"center\">setDaemon()</td>\n<td align=\"left\">设置为守护线程或非守护线程；默认值为False，如果设置为True，代表该进程为后台守护线程；当非守护线程(不只是主线程)终止时，该线程也随之终止；并且设置为True后，该线程不能创建子线程，设置该属性设置必须在start()之前</td>\n</tr>\n<tr>\n<td align=\"center\">isDaemon()</td>\n<td align=\"left\">判断是否为守护线程</td>\n</tr>\n<tr>\n<td align=\"center\">join()</td>\n<td align=\"left\">阻塞等待该线程执行完毕，该方法主要让主线程阻塞等待所有子线程执行完毕</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、线程锁threading-RLock和threading-Lock\"><a href=\"#2、线程锁threading-RLock和threading-Lock\" class=\"headerlink\" title=\"2、线程锁threading.RLock和threading.Lock\"></a>2、线程锁threading.RLock和threading.Lock</h4><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。为了保证数据的准确性，引入了锁的概念。所以，可能出现如下问题：</p>\n<p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加1000000次，g_num的最终的结果应该为2000000。</p>\n<p>但是由于是多线程同时操作，有可能出现下面情况：</p>\n<p>在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0<br>然后t2对得到的值进行加1并赋给g_num，使得g_num=1<br>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。<br>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1<br><strong>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确，锁的出现解决了这个问题。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br>g_num = <span class=\"hljs-number\">0</span><br>lock = threading.Lock() <span class=\"hljs-comment\">#创建锁</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work1</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-keyword\">global</span> g_num<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num):<br>        lock.acquire() <span class=\"hljs-comment\"># 加锁</span><br>        g_num += <span class=\"hljs-number\">1</span><br>        lock.release() <span class=\"hljs-comment\"># 解锁</span><br>    print(<span class=\"hljs-string\">&quot;----in work1, g_num is %d---&quot;</span> % g_num)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work2</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-keyword\">global</span> g_num<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num):<br>        lock.acquire()<br>        g_num += <span class=\"hljs-number\">1</span><br>        lock.release()<br>    print(<span class=\"hljs-string\">&quot;----in work2, g_num is %d---&quot;</span> % g_num)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    print(<span class=\"hljs-string\">&quot;---线程创建之前g_num is %d---&quot;</span> % g_num)<br>    t1 = threading.Thread(target=work1, args=(<span class=\"hljs-number\">1000000</span>,))<br>    t2 = threading.Thread(target=work2, args=(<span class=\"hljs-number\">1000000</span>,))<br><br>    t1.start()<br>    t2.start()<br><br>    t1.join()<br>    t2.join()<br><br>    print(<span class=\"hljs-string\">&quot;2个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"3、threading-RLock和threading-Lock-的区别\"><a href=\"#3、threading-RLock和threading-Lock-的区别\" class=\"headerlink\" title=\"3、threading.RLock和threading.Lock 的区别\"></a>3、threading.RLock和threading.Lock 的区别</h4><p>  RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。 </p>\n<p>  如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的锁。</p>\n<ul>\n<li>Lock多次加锁演示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br>lock = threading.Lock()    <span class=\"hljs-comment\">#Lock对象</span><br>lock.acquire()<br>lock.acquire()  <span class=\"hljs-comment\">#产生了死锁。</span><br>lock.release()<br>lock.release()<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>RLock多次加锁演示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br>rLock = threading.RLock()  <span class=\"hljs-comment\">#RLock对象</span><br>rLock.acquire()<br>rLock.acquire()    <span class=\"hljs-comment\">#在同一线程内，程序不会堵塞。</span><br>rLock.release()<br>rLock.release()<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"4、threading-Event\"><a href=\"#4、threading-Event\" class=\"headerlink\" title=\"4、threading.Event\"></a>4、threading.Event</h4><p>通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：</p>\n<ul>\n<li>event.wait(timeout=None)：调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行；</li>\n<li>event.set()：将event的标志设置为True，调用wait方法的所有线程将被唤醒；</li>\n<li>event.clear()：将event的标志设置为False，调用wait方法的所有线程将被阻塞；</li>\n<li>event.isSet()：判断event的标志是否为True。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do</span>(<span class=\"hljs-params\">event</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;start&#x27;</span>)<br>    event.wait()<br>    print(<span class=\"hljs-string\">&#x27;execute&#x27;</span>)<br><br>event_obj = threading.Event()<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>    t = threading.Thread(target=do, args=(event_obj,))<br>    t.start()<br><br>event_obj.clear()<br>inp = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&#x27;input:&#x27;</span>)<br><span class=\"hljs-keyword\">if</span> inp == <span class=\"hljs-string\">&#x27;true&#x27;</span>:<br>    event_obj.<span class=\"hljs-built_in\">set</span>()<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"5、threading-Condition\"><a href=\"#5、threading-Condition\" class=\"headerlink\" title=\"5、threading.Condition\"></a>5、threading.Condition</h4><p>Python提供的Condition对象提供了对复杂线程同步问题的支持。</p>\n<ul>\n<li>Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。</li>\n</ul>\n<h5 id=\"Condition的处理流程如下：\"><a href=\"#Condition的处理流程如下：\" class=\"headerlink\" title=\"Condition的处理流程如下：\"></a>Condition的处理流程如下：</h5><ul>\n<li>首先acquire一个条件变量，然后判断一些条件。</li>\n<li>如果条件不满足则wait；</li>\n<li>如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。</li>\n<li>不断的重复这一过程，从而解决复杂的同步问题。</li>\n</ul>\n<h5 id=\"Condition的基本原理如下：\"><a href=\"#Condition的基本原理如下：\" class=\"headerlink\" title=\"Condition的基本原理如下：\"></a>Condition的基本原理如下：</h5><p>可以认为<strong>Condition对象</strong>维护了一个<strong>锁（Lock/RLock)</strong>和一个<strong>waiting池</strong>。线程通过acquire获得Condition对象，当调用wait方法时，线程会释放Condition内部的锁并进入blocked状态，同时在waiting池中记录这个线程。当调用notify方法时，Condition对象会从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁。</p>\n<p>Condition对象的构造函数可以接受一个Lock/RLock对象作为参数，如果没有指定，则Condition对象会在内部自行创建一个RLock。</p>\n<p>除了notify方法外，Condition对象还提供了notifyAll方法，可以通知waiting池中的所有线程尝试acquire内部锁。由于上述机制，<strong>处于waiting状态的线程只能通过notify方法唤醒，所以notifyAll的作用在于防止有的线程永远处于沉默状态。</strong></p>\n<h5 id=\"Condition的案例演示如下：\"><a href=\"#Condition的案例演示如下：\" class=\"headerlink\" title=\"Condition的案例演示如下：\"></a>Condition的案例演示如下：</h5><p>演示条件变量同步的经典问题是生产者与消费者问题：假设有一群生产者(Producer)和一群消费者（Consumer）通过一个市场来交互产品。生产者的”策略“是如果市场上剩余的产品少于1000个，那么就生产100个产品放到市场上；而消费者的”策略“是如果市场上剩余产品的数量多余100个，那么就消费3个产品。</p>\n<p>用Condition解决生产者与消费者问题的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">Created on Wed Nov 28 17:15:29 2018</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">@author: 18665</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span>(<span class=\"hljs-params\">threading.Thread</span>):</span><br>    <span class=\"hljs-comment\"># 生产者函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">global</span> count<br>        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>            <span class=\"hljs-keyword\">if</span> con.acquire():<br>                <span class=\"hljs-comment\"># 当count 小于等于1000 的时候进行生产</span><br>                <span class=\"hljs-keyword\">if</span> count &gt; <span class=\"hljs-number\">1000</span>:<br>                    con.wait()<br>                <span class=\"hljs-keyword\">else</span>:<br>                    count = count+<span class=\"hljs-number\">100</span><br>                    msg = self.name+<span class=\"hljs-string\">&#x27; produce 100, count=&#x27;</span> + <span class=\"hljs-built_in\">str</span>(count)<br>                    print(msg)<br>                    <span class=\"hljs-comment\"># 完成生成后唤醒waiting状态的线程，</span><br>                    <span class=\"hljs-comment\"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span><br>                    con.notify()<br>                con.release()<br>                time.sleep(<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span>(<span class=\"hljs-params\">threading.Thread</span>):</span><br>    <span class=\"hljs-comment\"># 消费者函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">global</span> count<br>        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>            <span class=\"hljs-comment\"># 当count 大于等于100的时候进行消费</span><br>            <span class=\"hljs-keyword\">if</span> con.acquire():<br>                <span class=\"hljs-keyword\">if</span> count &lt; <span class=\"hljs-number\">100</span>:<br>                    con.wait()<br><br>                <span class=\"hljs-keyword\">else</span>:<br>                    count = count-<span class=\"hljs-number\">5</span><br>                    msg = self.name+<span class=\"hljs-string\">&#x27; consume 5, count=&#x27;</span>+<span class=\"hljs-built_in\">str</span>(count)<br>                    print(msg)<br>                    con.notify()<br>                    <span class=\"hljs-comment\"># 完成生成后唤醒waiting状态的线程，</span><br>                    <span class=\"hljs-comment\"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span><br>                con.release()<br>                time.sleep(<span class=\"hljs-number\">1</span>)<br><br>count = <span class=\"hljs-number\">500</span><br>con = threading.Condition()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>):<br>        p = Producer()<br>        p.start()<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        c = Consumer()<br>        c.start()<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    test()<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"6、queue模块\"><a href=\"#6、queue模块\" class=\"headerlink\" title=\"6、queue模块\"></a>6、queue模块</h4><p>queue.Queue 就是消息队列，可以利用它实现线程间的安全通信。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> queue<br><br>q = queue.Queue(maxsize=<span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\"># 构造一个先进显出队列，maxsize指定队列长度，为0 时，表示队列长度无限制。</span><br><br>q.join()    <span class=\"hljs-comment\"># 等到队列为kong的时候，在执行别的操作</span><br>q.qsize()   <span class=\"hljs-comment\"># 返回队列的大小 （不可靠）</span><br>q.empty()   <span class=\"hljs-comment\"># 当队列为空的时候，返回True 否则返回False （不可靠）</span><br>q.full()    <span class=\"hljs-comment\"># 当队列满的时候，返回True，否则返回False （不可靠）</span><br>q.put(item, block=<span class=\"hljs-literal\">True</span>, timeout=<span class=\"hljs-literal\">None</span>) <span class=\"hljs-comment\">#  将item放入Queue尾部，item必须存在，可以参数block默认为True,表示当队列满时，会等待队列给出可用位置，为False时为非阻塞，此时如果队列已满，会引发queue.Full 异常。 可选参数timeout，表示 会阻塞设置的时间，过后，如果队列无法给出放入item的位置，则引发 queue.Full 异常</span><br>q.get(block=<span class=\"hljs-literal\">True</span>, timeout=<span class=\"hljs-literal\">None</span>) <span class=\"hljs-comment\">#   移除并返回队列头部的一个值，可选参数block默认为True，表示获取值的时候，如果队列为空，则阻塞，为False时，不阻塞，若此时队列为空，则引发 queue.Empty异常。 可选参数timeout，表示会阻塞设置的时候，过后，如果队列为空，则引发Empty异常。</span><br>q.put_nowait(item) <span class=\"hljs-comment\">#   等效于 put(item,block=False)</span><br>q.get_nowait() <span class=\"hljs-comment\">#    等效于 get(item,block=False)</span><br></code></pre></div></td></tr></table></figure>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> queue<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>message = queue.Queue(<span class=\"hljs-number\">3</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">producer</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        message.put(i)<br>        print(<span class=\"hljs-string\">&quot;PUT&gt;&gt;&gt;%d&quot;</span> % i)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">consumer</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        msg = message.get()<br>        print(<span class=\"hljs-string\">&quot;GET&gt;&gt;&gt;%d&quot;</span> % msg)<br>        time.sleep(<span class=\"hljs-number\">1</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    t1 = threading.Thread(target=producer)<br>    t2 = threading.Thread(target=consumer)<br><br>    t1.start()<br>    t2.start()<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"Python-进程\"><a href=\"#Python-进程\" class=\"headerlink\" title=\"Python 进程\"></a>Python 进程</h3><h4 id=\"1、multiprocess模块\"><a href=\"#1、multiprocess模块\" class=\"headerlink\" title=\"1、multiprocess模块\"></a>1、multiprocess模块</h4><p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">语法：Process([group [, target [, name [, args [, kwargs]]]]])<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> multiprocessing<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">worker</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    process worker function</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    print(<span class=\"hljs-string\">&quot;The num is  %d&quot;</span> % num)<br>    <span class=\"hljs-keyword\">return</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = multiprocessing.Process(target=worker, args=(i,), name=<span class=\"hljs-string\">&quot;t.%d&quot;</span> % i)<br>        t.start()<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>Process参数介绍：</p>\n</blockquote>\n<ul>\n<li><p>group：参数未使用，默认值为None。</p>\n</li>\n<li><p>target：表示调用对象，即子进程要执行的任务。</p>\n</li>\n<li><p>args：表示调用的位置参数元组。</p>\n</li>\n<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>\n</li>\n<li><p>name：子进程名称。</p>\n</li>\n<li><p>daemon：设置为守护进程(True)或非守护进程(默认：False)</p>\n</li>\n</ul>\n<blockquote>\n<p>Process属性方法介绍</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start()</td>\n<td align=\"left\">启动进程，调用进程中的run()方法。</td>\n</tr>\n<tr>\n<td align=\"center\">run()</td>\n<td align=\"left\">进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 。</td>\n</tr>\n<tr>\n<td align=\"center\">terminate()</td>\n<td align=\"left\">强制终止进程，不会进行任何清理操作。如果该进程终止前，创建了子进程，那么该子进程在其强制结束后变为僵尸进程；如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。使用时，要注意。</td>\n</tr>\n<tr>\n<td align=\"center\">is_alive()</td>\n<td align=\"left\">判断某进程是否存活，存活返回True，否则False。</td>\n</tr>\n<tr>\n<td align=\"center\">join([timeout])</td>\n<td align=\"left\">主线程等待子线程终止。timeout为可选择超时时间；需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 。</td>\n</tr>\n<tr>\n<td align=\"center\">daemon</td>\n<td align=\"left\">默认值为False，如果设置为True，代表该进程为后台守护进程；当该进程的父进程终止时，该进程也随之终止；并且设置为True后，该进程不能创建子进程，设置该属性必须在start()之前</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"left\">进程名称。</td>\n</tr>\n<tr>\n<td align=\"center\">pid</td>\n<td align=\"left\">进程pid</td>\n</tr>\n<tr>\n<td align=\"center\">exitcode</td>\n<td align=\"left\">进程运行时为None，如果为-N，表示被信号N结束了。</td>\n</tr>\n<tr>\n<td align=\"center\">authkey</td>\n<td align=\"left\">进程身份验证，默认是由os.urandom()随机生成32字符的字符串。这个键的用途是设计涉及网络连接的底层进程间的通信提供安全性，这类连接只有在具有相同身份验证才能成功。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意:</p>\n</blockquote>\n<ul>\n<li><strong>在进程python的设计里面只有主进程可以接收input()的输入，子进程没有输入模式，运行直接报错</strong></li>\n<li><strong>更坑的是进程池，表面上不会出错，但是input()函数一旦进入无法退出，一直在接收输入的数据</strong></li>\n</ul>\n<h4 id=\"2、消息队列multiprocess-Queue\"><a href=\"#2、消息队列multiprocess-Queue\" class=\"headerlink\" title=\"2、消息队列multiprocess.Queue\"></a>2、消息队列multiprocess.Queue</h4><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序</p>\n<blockquote>\n<p>Queue属性方法说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">get( [ block [ ,timeout ] ] )</td>\n<td align=\"left\">返回q中的一个元素。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。</td>\n</tr>\n<tr>\n<td align=\"center\">get_nowait( )</td>\n<td align=\"left\">同q.get(False)方法。</td>\n</tr>\n<tr>\n<td align=\"center\">put(item [, block [,timeout ] ] )</td>\n<td align=\"left\">将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。</td>\n</tr>\n<tr>\n<td align=\"center\">q.qsize()</td>\n<td align=\"left\">返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。</td>\n</tr>\n<tr>\n<td align=\"center\">q.empty()</td>\n<td align=\"left\">如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。</td>\n</tr>\n<tr>\n<td align=\"center\">q.full()</td>\n<td align=\"left\">如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。。</td>\n</tr>\n<tr>\n<td align=\"center\">其他方法(了解)</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">q.close()</td>\n<td align=\"left\">关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。</td>\n</tr>\n<tr>\n<td align=\"center\">q.cancel_join_thread()</td>\n<td align=\"left\">不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。</td>\n</tr>\n<tr>\n<td align=\"center\">q.join_thread()</td>\n<td align=\"left\">连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。</td>\n</tr>\n</tbody></table>\n<h4 id=\"3、进程池\"><a href=\"#3、进程池\" class=\"headerlink\" title=\"3、进程池\"></a>3、进程池</h4><p>为什么要有进程池?进程池的概念。</p>\n<p>在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？</p>\n<p>在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。</p>\n<h5 id=\"multiprocess-Pool模块\"><a href=\"#multiprocess-Pool模块\" class=\"headerlink\" title=\"multiprocess.Pool模块\"></a>multiprocess.Pool模块</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">语法：Pool([numprocess  [,initializer [, initargs]]])<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>Pool参数介绍</p>\n</blockquote>\n<ul>\n<li><p>numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</p>\n</li>\n<li><p>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</p>\n</li>\n<li><p>initargs：是要传给initializer（可迭代）的参数组</p>\n</li>\n</ul>\n<blockquote>\n<p>Pool主要方法介绍</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">apply(func [, args [, kwargs]])</td>\n<td align=\"left\">在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。’需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用apply()函数或者使用p.apply_async()</td>\n</tr>\n<tr>\n<td align=\"center\">apply_async(func [, args [, kwargs]])</td>\n<td align=\"left\">在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</td>\n</tr>\n<tr>\n<td align=\"center\">close()</td>\n<td align=\"left\">关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</td>\n</tr>\n<tr>\n<td align=\"center\">terminate()</td>\n<td align=\"left\">不管任务是否完成，立即停止工作进程。在对pool对象进程垃圾回收的时候，会立即调用terminate()</td>\n</tr>\n<tr>\n<td align=\"center\">jion()</td>\n<td align=\"left\">等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</td>\n</tr>\n<tr>\n<td align=\"center\">其他方法(了解）</td>\n<td align=\"left\">方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</td>\n</tr>\n<tr>\n<td align=\"center\">obj.get()</td>\n<td align=\"left\">返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</td>\n</tr>\n<tr>\n<td align=\"center\">obj.ready()</td>\n<td align=\"left\">如果调用完成，返回True</td>\n</tr>\n<tr>\n<td align=\"center\">obj.successful()</td>\n<td align=\"left\">如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</td>\n</tr>\n<tr>\n<td align=\"center\">obj.wait([timeout])</td>\n<td align=\"left\">等待结果变为可用。</td>\n</tr>\n<tr>\n<td align=\"center\">obj.terminate()</td>\n<td align=\"left\">立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</td>\n</tr>\n</tbody></table>\n<h5 id=\"进程池中的Queue\"><a href=\"#进程池中的Queue\" class=\"headerlink\" title=\"进程池中的Queue\"></a>进程池中的Queue</h5><p>如果要使用Pool创建进程，就需要使用<code>multiprocessing.Manager()</code>中的<code>Queue()</code>，而不是<code>multiprocessing.Queue()</code></p>\n<h3 id=\"Python-协程\"><a href=\"#Python-协程\" class=\"headerlink\" title=\"Python 协程\"></a>Python 协程</h3><p>协程，又称微线程，纤程。英文名Coroutine。协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p>\n<p>通俗的理解：<strong>在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</strong></p>\n<h4 id=\"1-协程和线程差异\"><a href=\"#1-协程和线程差异\" class=\"headerlink\" title=\"1. 协程和线程差异\"></a>1. 协程和线程差异</h4><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p>\n<h4 id=\"2-实现方式\"><a href=\"#2-实现方式\" class=\"headerlink\" title=\"2. 实现方式\"></a>2. 实现方式</h4><ul>\n<li><p>yield</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work1</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        print(<span class=\"hljs-string\">&quot;----work1---&quot;</span>)<br>        <span class=\"hljs-keyword\">yield</span><br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work2</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        print(<span class=\"hljs-string\">&quot;----work2---&quot;</span>)<br>        <span class=\"hljs-keyword\">yield</span><br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    w1 = work1()<br>    w2 = work2()<br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">next</span>(w1)<br>        <span class=\"hljs-built_in\">next</span>(w2)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></div></td></tr></table></figure></li>\n<li><p>greenlet</p>\n</li>\n</ul>\n<p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p>\n<p><strong>安装方式</strong><br>使用如下命令安装greenlet模块:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">sudo pip3 install greenlet<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#coding=utf-8</span><br><br><span class=\"hljs-keyword\">from</span> greenlet <span class=\"hljs-keyword\">import</span> greenlet<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test1</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;---A--&quot;</span><br>        gr2.switch()<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test2</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;---B--&quot;</span><br>        gr1.switch()<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br>gr1 = greenlet(test1)<br>gr2 = greenlet(test2)<br><br><span class=\"hljs-comment\">#切换到gr1中运行</span><br>gr1.switch()<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>gevent</li>\n</ul>\n<p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent</p>\n<p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p>\n<p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p>\n<p><strong>安装方式</strong><br>使用如下命令安装gevent模块:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">pip3 install gevent<br></code></pre></div></td></tr></table></figure>\n<p>在gevent中不能直接使用time.sleep类似的方法，要么使用gevent.sleep，要么利用gevent.monkey打补丁</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> gevent <span class=\"hljs-keyword\">import</span> monkey<br><span class=\"hljs-keyword\">import</span> gevent<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coroutine_work</span>(<span class=\"hljs-params\">coroutine_name</span>):</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        print(coroutine_name, i)<br>        time.sleep(random.random())<br><br>gevent.joinall([<br>        gevent.spawn(coroutine_work, <span class=\"hljs-string\">&quot;work1&quot;</span>),<br>        gevent.spawn(coroutine_work, <span class=\"hljs-string\">&quot;work2&quot;</span>)<br>])<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"获得进程和线程信息\"><a href=\"#获得进程和线程信息\" class=\"headerlink\" title=\"获得进程和线程信息\"></a>获得进程和线程信息</h3><p>想要获取线程和进程相关信息，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">获得线程, 进程 ID,NAME</span><br><span class=\"hljs-string\">总结:</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> psutil<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> datetime<br><br><span class=\"hljs-comment\"># 1 获取线程ID,NAME</span><br>t = threading.currentThread()<br><span class=\"hljs-comment\"># 线程ID</span><br>print(<span class=\"hljs-string\">&#x27;Thread id : %d&#x27;</span> % t.ident)<br><span class=\"hljs-comment\"># 线程NAME</span><br>print(<span class=\"hljs-string\">&#x27;Thread name : %s&#x27;</span> % t.getName())<br><br><span class=\"hljs-comment\"># 2 获取线程ID,NAME</span><br>pid = os.getpid()<br>p = psutil.Process(pid)<br>print(<span class=\"hljs-string\">&#x27;----------------&#x27;</span>)<br><span class=\"hljs-comment\"># 进程ID</span><br>print(<span class=\"hljs-string\">&#x27;Process id : %d&#x27;</span> % pid)<br><span class=\"hljs-comment\"># 进程NAME</span><br>print(<span class=\"hljs-string\">&#x27;Process name : %s&#x27;</span> % p.name())<br><span class=\"hljs-comment\"># 获取进程bin路径</span><br>print(<span class=\"hljs-string\">&#x27;Process bin  path : %s&#x27;</span> % p.exe())<br><span class=\"hljs-comment\"># 获取pid对应的路径</span><br>print(<span class=\"hljs-string\">&#x27;Process path : %s&#x27;</span> % p.cwd())<br><span class=\"hljs-comment\"># 进程状态</span><br>print(<span class=\"hljs-string\">&#x27;Process status : %s&#x27;</span> % p.status())<br><span class=\"hljs-comment\"># 进程运行时间</span><br>print(<span class=\"hljs-string\">&#x27;Process creation time : %s&#x27;</span> % datetime.datetime.fromtimestamp(p.create_time()).strftime(<span class=\"hljs-string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br><span class=\"hljs-comment\"># CPU使用情况</span><br>print(p.cpu_times())<br><span class=\"hljs-comment\"># 内存使用情况</span><br>print(<span class=\"hljs-string\">&#x27;Memory usage : %s%%&#x27;</span> % p.memory_percent())<br><span class=\"hljs-comment\"># 硬盘读取信息</span><br>print(p.io_counters())<br><span class=\"hljs-comment\"># 打开进程socket的namedutples列表</span><br>print(p.connections())<br><span class=\"hljs-comment\"># 此进程的线程数</span><br>print(<span class=\"hljs-string\">&#x27;Process number of threads : %s&#x27;</span> % p.num_threads())<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"python-线程与进程简介\"><a href=\"#python-线程与进程简介\" class=\"headerlink\" title=\"python 线程与进程简介\"></a>python 线程与进程简介</h3><h4 id=\"1-进程与线程的历史\"><a href=\"#1-进程与线程的历史\" class=\"headerlink\" title=\"1. 进程与线程的历史\"></a>1. 进程与线程的历史</h4><p>我们都知道计算机是由<strong>硬件</strong>和<strong>软件</strong>组成的。</p>\n<ul>\n<li>硬件中的 CPU 是计算机的核心，它承担计算机的所有任务。</li>\n<li>操作系统是运行在硬件之上的软件，是计算机的管理者，它负责资源的管理和分配、任务的调度。</li>\n<li>程序是运行在系统上的具有某种功能的软件，比如说浏览器，音乐播放器等。</li>\n</ul>\n<p>每次执行程序的时候，都会完成一定的功能，比如说浏览器帮我们打开网页，为了保证其独立性，就需要一个专门的管理和控制执行程序的数据结构——<strong>进程控制块</strong>。</p>\n<p>进程就是一个程序在一个数据集上的一次动态执行过程。</p>\n<ul>\n<li><p>进程一般由程序、数据集、进程控制块三部分组成。</p>\n<ul>\n<li>我们编写的程序用来描述进程要完成哪些功能以及如何完成；</li>\n<li>数据集则是程序在执行过程中所需要使用的资源；</li>\n<li>进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</li>\n</ul>\n</li>\n<li><p>在早期的操作系统里，计算机只有一个核心，进程是执行程序的最小单位，任务调度采用时间片轮转的抢占式方式进行进程调度。</p>\n</li>\n<li><p>每个进程都有各自的一块独立的内存，保证进程彼此间的内存地址空间的隔离。</p>\n</li>\n</ul>\n<p>随着计算机技术的发展，进程出现了很多弊端：</p>\n<ul>\n<li>一是进程的创建、撤销和切换的开销比较大</li>\n<li>二是由于对称多处理机（对称多处理机（SymmetricalMulti-Processing）又叫 SMP，是指在一个计算机上汇集了一组处理器 (多 CPU)，各 CPU 之间共享内存子系统以及总线结构）的出现，可以满足多个运行单位，而多进程并行开销过大。</li>\n</ul>\n<p>这个时候就引入了线程的概念。</p>\n<ul>\n<li>线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合 和堆栈共同组成。</li>\n<li>线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。</li>\n<li>线程没有自己的系统资源，只拥有在运行时必不可少的资源。</li>\n<li>但线程可以与同属与同一进程的其他线程共享进程所拥有的其他资源。</li>\n</ul>\n<h4 id=\"2-进程与线程之间的关系\"><a href=\"#2-进程与线程之间的关系\" class=\"headerlink\" title=\"2.  进程与线程之间的关系\"></a>2.  进程与线程之间的关系</h4><ul>\n<li>线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。</li>\n<li>线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息 (如程序计数器、一组寄存器和栈)。</li>\n</ul>\n<h4 id=\"3-守护线程与守护进程的区别\"><a href=\"#3-守护线程与守护进程的区别\" class=\"headerlink\" title=\"3. 守护线程与守护进程的区别\"></a>3. 守护线程与守护进程的区别</h4><blockquote>\n<p>强调：运行完毕，并非是终止</p>\n</blockquote>\n<ul>\n<li><p>线程与进程运行完毕的区别：</p>\n<ul>\n<li><p>主进程运行完毕指的是主进程代码运行完毕</p>\n</li>\n<li><p>主线程运行完毕指的是所在的进程内的所有非守护线程运行完毕后，主线程才算运行完毕</p>\n</li>\n</ul>\n</li>\n<li><p>守护进程：主进程代码运行完毕，守护进程也就结束 <strong>(守护的是主进程)</strong></p>\n<ul>\n<li><p>主进程要等非守护进程都运行完毕后再回收子进程的资源（否则会产生僵尸进程）才结束</p>\n</li>\n<li><p>主进程等子进程是因为主进程要给子进程收尸（代用wait方法向操作系统发起回收资源信号（pid号，状态信息））</p>\n</li>\n</ul>\n</li>\n<li><p>守护线程：非守护线程代码运行完毕，守护线程也就结束 <strong>(守护的是非守护线程)</strong></p>\n<ul>\n<li><p>主线程在其他非守护线程运行完毕后才算结束（守护线程在此时就会被回收）</p>\n</li>\n<li><p>强调：主线程也是非守护线程（进程包含了线程）</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>总结:主线程的结束意味着进程结束，进程整体的资源都会被回收，而进程必须保证非守护线程都运行完毕后才能结束</p>\n</blockquote>\n<ul>\n<li>守护进程：主进程代码运行完毕，守护进程也就结束</li>\n<li>守护线程：非守护线程运行完毕，守护线程结束</li>\n</ul>\n<h3 id=\"python-线程\"><a href=\"#python-线程\" class=\"headerlink\" title=\"python 线程\"></a>python 线程</h3><p>Threading 用于提供线程相关的操作，线程是应用程序中工作的最小单元。</p>\n<h4 id=\"1、threading-模块\"><a href=\"#1、threading-模块\" class=\"headerlink\" title=\"1、threading 模块\"></a>1、threading 模块</h4><p>threading 模块建立在 _thread 模块之上。thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">worker</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    thread worker function</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    print(<span class=\"hljs-string\">&quot;The num is  %d&quot;</span> % num)<br>    <span class=\"hljs-keyword\">return</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = threading.Thread(target=worker, args=(i,), name=<span class=\"hljs-string\">&quot;t.%d&quot;</span> % i)<br>        t.start()<br><br></code></pre></td></tr></table></figure>\n<p>上述代码创建了5个”前台”线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。</p>\n<blockquote>\n<p>Thread参数介绍：</p>\n</blockquote>\n<ul>\n<li><p>group：参数未使用，默认值为None。</p>\n</li>\n<li><p>target：表示调用对象，即子线程要执行的任务。</p>\n</li>\n<li><p>args：表示调用的位置参数元组。</p>\n</li>\n<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>\n</li>\n<li><p>name：子进程名称。</p>\n</li>\n<li><p>daemon：设置为守护线程(True)或非守护线程(默认：False)</p>\n</li>\n</ul>\n<blockquote>\n<p>Thread属性方法说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start()</td>\n<td align=\"left\">激活线程。使用该方法启动一个子线程，线程名就是我们定义的name，想启动多线程，就必须使用此方法</td>\n</tr>\n<tr>\n<td align=\"center\">run()</td>\n<td align=\"left\">线程被cpu调度后自动执行线程对象的run方法,直接使用该方法并不启动一个新线程，就是在主线程中调用了一个普通函数而已</td>\n</tr>\n<tr>\n<td align=\"center\">ident</td>\n<td align=\"left\">获取线程的标识符。线程标识符是一个非零整数，只有在调用了start()方法之后该属性才有效，否则它只返回None。</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"left\">获取或设置线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">getName()</td>\n<td align=\"left\">获取线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">setName()</td>\n<td align=\"left\">设置线程的名称</td>\n</tr>\n<tr>\n<td align=\"center\">is_alive()</td>\n<td align=\"left\">判断线程是否为激活状态</td>\n</tr>\n<tr>\n<td align=\"center\">isAlive()</td>\n<td align=\"left\">判断线程是否为激活状态</td>\n</tr>\n<tr>\n<td align=\"center\">setDaemon()</td>\n<td align=\"left\">设置为守护线程或非守护线程；默认值为False，如果设置为True，代表该进程为后台守护线程；当非守护线程(不只是主线程)终止时，该线程也随之终止；并且设置为True后，该线程不能创建子线程，设置该属性设置必须在start()之前</td>\n</tr>\n<tr>\n<td align=\"center\">isDaemon()</td>\n<td align=\"left\">判断是否为守护线程</td>\n</tr>\n<tr>\n<td align=\"center\">join()</td>\n<td align=\"left\">阻塞等待该线程执行完毕，该方法主要让主线程阻塞等待所有子线程执行完毕</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、线程锁threading-RLock和threading-Lock\"><a href=\"#2、线程锁threading-RLock和threading-Lock\" class=\"headerlink\" title=\"2、线程锁threading.RLock和threading.Lock\"></a>2、线程锁threading.RLock和threading.Lock</h4><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。为了保证数据的准确性，引入了锁的概念。所以，可能出现如下问题：</p>\n<p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加1000000次，g_num的最终的结果应该为2000000。</p>\n<p>但是由于是多线程同时操作，有可能出现下面情况：</p>\n<p>在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0<br>然后t2对得到的值进行加1并赋给g_num，使得g_num=1<br>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。<br>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1<br><strong>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确，锁的出现解决了这个问题。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br>g_num = <span class=\"hljs-number\">0</span><br>lock = threading.Lock() <span class=\"hljs-comment\">#创建锁</span><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work1</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-keyword\">global</span> g_num<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num):<br>        lock.acquire() <span class=\"hljs-comment\"># 加锁</span><br>        g_num += <span class=\"hljs-number\">1</span><br>        lock.release() <span class=\"hljs-comment\"># 解锁</span><br>    print(<span class=\"hljs-string\">&quot;----in work1, g_num is %d---&quot;</span> % g_num)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work2</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-keyword\">global</span> g_num<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num):<br>        lock.acquire()<br>        g_num += <span class=\"hljs-number\">1</span><br>        lock.release()<br>    print(<span class=\"hljs-string\">&quot;----in work2, g_num is %d---&quot;</span> % g_num)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    print(<span class=\"hljs-string\">&quot;---线程创建之前g_num is %d---&quot;</span> % g_num)<br>    t1 = threading.Thread(target=work1, args=(<span class=\"hljs-number\">1000000</span>,))<br>    t2 = threading.Thread(target=work2, args=(<span class=\"hljs-number\">1000000</span>,))<br><br>    t1.start()<br>    t2.start()<br><br>    t1.join()<br>    t2.join()<br><br>    print(<span class=\"hljs-string\">&quot;2个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)<br></code></pre></td></tr></table></figure>\n<h4 id=\"3、threading-RLock和threading-Lock-的区别\"><a href=\"#3、threading-RLock和threading-Lock-的区别\" class=\"headerlink\" title=\"3、threading.RLock和threading.Lock 的区别\"></a>3、threading.RLock和threading.Lock 的区别</h4><p>  RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。 </p>\n<p>  如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的锁。</p>\n<ul>\n<li>Lock多次加锁演示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br>lock = threading.Lock()    <span class=\"hljs-comment\">#Lock对象</span><br>lock.acquire()<br>lock.acquire()  <span class=\"hljs-comment\">#产生了死锁。</span><br>lock.release()<br>lock.release()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>RLock多次加锁演示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br>rLock = threading.RLock()  <span class=\"hljs-comment\">#RLock对象</span><br>rLock.acquire()<br>rLock.acquire()    <span class=\"hljs-comment\">#在同一线程内，程序不会堵塞。</span><br>rLock.release()<br>rLock.release()<br></code></pre></td></tr></table></figure>\n<h4 id=\"4、threading-Event\"><a href=\"#4、threading-Event\" class=\"headerlink\" title=\"4、threading.Event\"></a>4、threading.Event</h4><p>通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：</p>\n<ul>\n<li>event.wait(timeout=None)：调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行；</li>\n<li>event.set()：将event的标志设置为True，调用wait方法的所有线程将被唤醒；</li>\n<li>event.clear()：将event的标志设置为False，调用wait方法的所有线程将被阻塞；</li>\n<li>event.isSet()：判断event的标志是否为True。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do</span>(<span class=\"hljs-params\">event</span>):</span><br>    print(<span class=\"hljs-string\">&#x27;start&#x27;</span>)<br>    event.wait()<br>    print(<span class=\"hljs-string\">&#x27;execute&#x27;</span>)<br><br>event_obj = threading.Event()<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>    t = threading.Thread(target=do, args=(event_obj,))<br>    t.start()<br><br>event_obj.clear()<br>inp = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&#x27;input:&#x27;</span>)<br><span class=\"hljs-keyword\">if</span> inp == <span class=\"hljs-string\">&#x27;true&#x27;</span>:<br>    event_obj.<span class=\"hljs-built_in\">set</span>()<br></code></pre></td></tr></table></figure>\n<h4 id=\"5、threading-Condition\"><a href=\"#5、threading-Condition\" class=\"headerlink\" title=\"5、threading.Condition\"></a>5、threading.Condition</h4><p>Python提供的Condition对象提供了对复杂线程同步问题的支持。</p>\n<ul>\n<li>Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。</li>\n</ul>\n<h5 id=\"Condition的处理流程如下：\"><a href=\"#Condition的处理流程如下：\" class=\"headerlink\" title=\"Condition的处理流程如下：\"></a>Condition的处理流程如下：</h5><ul>\n<li>首先acquire一个条件变量，然后判断一些条件。</li>\n<li>如果条件不满足则wait；</li>\n<li>如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。</li>\n<li>不断的重复这一过程，从而解决复杂的同步问题。</li>\n</ul>\n<h5 id=\"Condition的基本原理如下：\"><a href=\"#Condition的基本原理如下：\" class=\"headerlink\" title=\"Condition的基本原理如下：\"></a>Condition的基本原理如下：</h5><p>可以认为<strong>Condition对象</strong>维护了一个<strong>锁（Lock/RLock)</strong>和一个<strong>waiting池</strong>。线程通过acquire获得Condition对象，当调用wait方法时，线程会释放Condition内部的锁并进入blocked状态，同时在waiting池中记录这个线程。当调用notify方法时，Condition对象会从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁。</p>\n<p>Condition对象的构造函数可以接受一个Lock/RLock对象作为参数，如果没有指定，则Condition对象会在内部自行创建一个RLock。</p>\n<p>除了notify方法外，Condition对象还提供了notifyAll方法，可以通知waiting池中的所有线程尝试acquire内部锁。由于上述机制，<strong>处于waiting状态的线程只能通过notify方法唤醒，所以notifyAll的作用在于防止有的线程永远处于沉默状态。</strong></p>\n<h5 id=\"Condition的案例演示如下：\"><a href=\"#Condition的案例演示如下：\" class=\"headerlink\" title=\"Condition的案例演示如下：\"></a>Condition的案例演示如下：</h5><p>演示条件变量同步的经典问题是生产者与消费者问题：假设有一群生产者(Producer)和一群消费者（Consumer）通过一个市场来交互产品。生产者的”策略“是如果市场上剩余的产品少于1000个，那么就生产100个产品放到市场上；而消费者的”策略“是如果市场上剩余产品的数量多余100个，那么就消费3个产品。</p>\n<p>用Condition解决生产者与消费者问题的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">Created on Wed Nov 28 17:15:29 2018</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">@author: 18665</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span>(<span class=\"hljs-params\">threading.Thread</span>):</span><br>    <span class=\"hljs-comment\"># 生产者函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">global</span> count<br>        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>            <span class=\"hljs-keyword\">if</span> con.acquire():<br>                <span class=\"hljs-comment\"># 当count 小于等于1000 的时候进行生产</span><br>                <span class=\"hljs-keyword\">if</span> count &gt; <span class=\"hljs-number\">1000</span>:<br>                    con.wait()<br>                <span class=\"hljs-keyword\">else</span>:<br>                    count = count+<span class=\"hljs-number\">100</span><br>                    msg = self.name+<span class=\"hljs-string\">&#x27; produce 100, count=&#x27;</span> + <span class=\"hljs-built_in\">str</span>(count)<br>                    print(msg)<br>                    <span class=\"hljs-comment\"># 完成生成后唤醒waiting状态的线程，</span><br>                    <span class=\"hljs-comment\"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span><br>                    con.notify()<br>                con.release()<br>                time.sleep(<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span>(<span class=\"hljs-params\">threading.Thread</span>):</span><br>    <span class=\"hljs-comment\"># 消费者函数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">global</span> count<br>        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>            <span class=\"hljs-comment\"># 当count 大于等于100的时候进行消费</span><br>            <span class=\"hljs-keyword\">if</span> con.acquire():<br>                <span class=\"hljs-keyword\">if</span> count &lt; <span class=\"hljs-number\">100</span>:<br>                    con.wait()<br><br>                <span class=\"hljs-keyword\">else</span>:<br>                    count = count-<span class=\"hljs-number\">5</span><br>                    msg = self.name+<span class=\"hljs-string\">&#x27; consume 5, count=&#x27;</span>+<span class=\"hljs-built_in\">str</span>(count)<br>                    print(msg)<br>                    con.notify()<br>                    <span class=\"hljs-comment\"># 完成生成后唤醒waiting状态的线程，</span><br>                    <span class=\"hljs-comment\"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span><br>                con.release()<br>                time.sleep(<span class=\"hljs-number\">1</span>)<br><br>count = <span class=\"hljs-number\">500</span><br>con = threading.Condition()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>):<br>        p = Producer()<br>        p.start()<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        c = Consumer()<br>        c.start()<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    test()<br></code></pre></td></tr></table></figure>\n<h4 id=\"6、queue模块\"><a href=\"#6、queue模块\" class=\"headerlink\" title=\"6、queue模块\"></a>6、queue模块</h4><p>queue.Queue 就是消息队列，可以利用它实现线程间的安全通信。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> queue<br><br>q = queue.Queue(maxsize=<span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\"># 构造一个先进显出队列，maxsize指定队列长度，为0 时，表示队列长度无限制。</span><br><br>q.join()    <span class=\"hljs-comment\"># 等到队列为kong的时候，在执行别的操作</span><br>q.qsize()   <span class=\"hljs-comment\"># 返回队列的大小 （不可靠）</span><br>q.empty()   <span class=\"hljs-comment\"># 当队列为空的时候，返回True 否则返回False （不可靠）</span><br>q.full()    <span class=\"hljs-comment\"># 当队列满的时候，返回True，否则返回False （不可靠）</span><br>q.put(item, block=<span class=\"hljs-literal\">True</span>, timeout=<span class=\"hljs-literal\">None</span>) <span class=\"hljs-comment\">#  将item放入Queue尾部，item必须存在，可以参数block默认为True,表示当队列满时，会等待队列给出可用位置，为False时为非阻塞，此时如果队列已满，会引发queue.Full 异常。 可选参数timeout，表示 会阻塞设置的时间，过后，如果队列无法给出放入item的位置，则引发 queue.Full 异常</span><br>q.get(block=<span class=\"hljs-literal\">True</span>, timeout=<span class=\"hljs-literal\">None</span>) <span class=\"hljs-comment\">#   移除并返回队列头部的一个值，可选参数block默认为True，表示获取值的时候，如果队列为空，则阻塞，为False时，不阻塞，若此时队列为空，则引发 queue.Empty异常。 可选参数timeout，表示会阻塞设置的时候，过后，如果队列为空，则引发Empty异常。</span><br>q.put_nowait(item) <span class=\"hljs-comment\">#   等效于 put(item,block=False)</span><br>q.get_nowait() <span class=\"hljs-comment\">#    等效于 get(item,block=False)</span><br></code></pre></td></tr></table></figure>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> queue<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>message = queue.Queue(<span class=\"hljs-number\">3</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">producer</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        message.put(i)<br>        print(<span class=\"hljs-string\">&quot;PUT&gt;&gt;&gt;%d&quot;</span> % i)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">consumer</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        msg = message.get()<br>        print(<span class=\"hljs-string\">&quot;GET&gt;&gt;&gt;%d&quot;</span> % msg)<br>        time.sleep(<span class=\"hljs-number\">1</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    t1 = threading.Thread(target=producer)<br>    t2 = threading.Thread(target=consumer)<br><br>    t1.start()<br>    t2.start()<br></code></pre></td></tr></table></figure>\n<h3 id=\"Python-进程\"><a href=\"#Python-进程\" class=\"headerlink\" title=\"Python 进程\"></a>Python 进程</h3><h4 id=\"1、multiprocess模块\"><a href=\"#1、multiprocess模块\" class=\"headerlink\" title=\"1、multiprocess模块\"></a>1、multiprocess模块</h4><p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">语法：Process([group [, target [, name [, args [, kwargs]]]]])<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> multiprocessing<br><span class=\"hljs-keyword\">import</span> time<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">worker</span>(<span class=\"hljs-params\">num</span>):</span><br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    process worker function</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    print(<span class=\"hljs-string\">&quot;The num is  %d&quot;</span> % num)<br>    <span class=\"hljs-keyword\">return</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = multiprocessing.Process(target=worker, args=(i,), name=<span class=\"hljs-string\">&quot;t.%d&quot;</span> % i)<br>        t.start()<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Process参数介绍：</p>\n</blockquote>\n<ul>\n<li><p>group：参数未使用，默认值为None。</p>\n</li>\n<li><p>target：表示调用对象，即子进程要执行的任务。</p>\n</li>\n<li><p>args：表示调用的位置参数元组。</p>\n</li>\n<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>\n</li>\n<li><p>name：子进程名称。</p>\n</li>\n<li><p>daemon：设置为守护进程(True)或非守护进程(默认：False)</p>\n</li>\n</ul>\n<blockquote>\n<p>Process属性方法介绍</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">start()</td>\n<td align=\"left\">启动进程，调用进程中的run()方法。</td>\n</tr>\n<tr>\n<td align=\"center\">run()</td>\n<td align=\"left\">进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 。</td>\n</tr>\n<tr>\n<td align=\"center\">terminate()</td>\n<td align=\"left\">强制终止进程，不会进行任何清理操作。如果该进程终止前，创建了子进程，那么该子进程在其强制结束后变为僵尸进程；如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。使用时，要注意。</td>\n</tr>\n<tr>\n<td align=\"center\">is_alive()</td>\n<td align=\"left\">判断某进程是否存活，存活返回True，否则False。</td>\n</tr>\n<tr>\n<td align=\"center\">join([timeout])</td>\n<td align=\"left\">主线程等待子线程终止。timeout为可选择超时时间；需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 。</td>\n</tr>\n<tr>\n<td align=\"center\">daemon</td>\n<td align=\"left\">默认值为False，如果设置为True，代表该进程为后台守护进程；当该进程的父进程终止时，该进程也随之终止；并且设置为True后，该进程不能创建子进程，设置该属性必须在start()之前</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"left\">进程名称。</td>\n</tr>\n<tr>\n<td align=\"center\">pid</td>\n<td align=\"left\">进程pid</td>\n</tr>\n<tr>\n<td align=\"center\">exitcode</td>\n<td align=\"left\">进程运行时为None，如果为-N，表示被信号N结束了。</td>\n</tr>\n<tr>\n<td align=\"center\">authkey</td>\n<td align=\"left\">进程身份验证，默认是由os.urandom()随机生成32字符的字符串。这个键的用途是设计涉及网络连接的底层进程间的通信提供安全性，这类连接只有在具有相同身份验证才能成功。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意:</p>\n</blockquote>\n<ul>\n<li><strong>在进程python的设计里面只有主进程可以接收input()的输入，子进程没有输入模式，运行直接报错</strong></li>\n<li><strong>更坑的是进程池，表面上不会出错，但是input()函数一旦进入无法退出，一直在接收输入的数据</strong></li>\n</ul>\n<h4 id=\"2、消息队列multiprocess-Queue\"><a href=\"#2、消息队列multiprocess-Queue\" class=\"headerlink\" title=\"2、消息队列multiprocess.Queue\"></a>2、消息队列multiprocess.Queue</h4><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序</p>\n<blockquote>\n<p>Queue属性方法说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">get( [ block [ ,timeout ] ] )</td>\n<td align=\"left\">返回q中的一个元素。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。</td>\n</tr>\n<tr>\n<td align=\"center\">get_nowait( )</td>\n<td align=\"left\">同q.get(False)方法。</td>\n</tr>\n<tr>\n<td align=\"center\">put(item [, block [,timeout ] ] )</td>\n<td align=\"left\">将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。</td>\n</tr>\n<tr>\n<td align=\"center\">q.qsize()</td>\n<td align=\"left\">返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。</td>\n</tr>\n<tr>\n<td align=\"center\">q.empty()</td>\n<td align=\"left\">如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。</td>\n</tr>\n<tr>\n<td align=\"center\">q.full()</td>\n<td align=\"left\">如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。。</td>\n</tr>\n<tr>\n<td align=\"center\">其他方法(了解)</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">q.close()</td>\n<td align=\"left\">关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。</td>\n</tr>\n<tr>\n<td align=\"center\">q.cancel_join_thread()</td>\n<td align=\"left\">不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。</td>\n</tr>\n<tr>\n<td align=\"center\">q.join_thread()</td>\n<td align=\"left\">连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。</td>\n</tr>\n</tbody></table>\n<h4 id=\"3、进程池\"><a href=\"#3、进程池\" class=\"headerlink\" title=\"3、进程池\"></a>3、进程池</h4><p>为什么要有进程池?进程池的概念。</p>\n<p>在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？</p>\n<p>在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。</p>\n<h5 id=\"multiprocess-Pool模块\"><a href=\"#multiprocess-Pool模块\" class=\"headerlink\" title=\"multiprocess.Pool模块\"></a>multiprocess.Pool模块</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">语法：Pool([numprocess  [,initializer [, initargs]]])<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Pool参数介绍</p>\n</blockquote>\n<ul>\n<li><p>numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</p>\n</li>\n<li><p>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</p>\n</li>\n<li><p>initargs：是要传给initializer（可迭代）的参数组</p>\n</li>\n</ul>\n<blockquote>\n<p>Pool主要方法介绍</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法/属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">apply(func [, args [, kwargs]])</td>\n<td align=\"left\">在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。’需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用apply()函数或者使用p.apply_async()</td>\n</tr>\n<tr>\n<td align=\"center\">apply_async(func [, args [, kwargs]])</td>\n<td align=\"left\">在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</td>\n</tr>\n<tr>\n<td align=\"center\">close()</td>\n<td align=\"left\">关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</td>\n</tr>\n<tr>\n<td align=\"center\">terminate()</td>\n<td align=\"left\">不管任务是否完成，立即停止工作进程。在对pool对象进程垃圾回收的时候，会立即调用terminate()</td>\n</tr>\n<tr>\n<td align=\"center\">jion()</td>\n<td align=\"left\">等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</td>\n</tr>\n<tr>\n<td align=\"center\">其他方法(了解）</td>\n<td align=\"left\">方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</td>\n</tr>\n<tr>\n<td align=\"center\">obj.get()</td>\n<td align=\"left\">返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</td>\n</tr>\n<tr>\n<td align=\"center\">obj.ready()</td>\n<td align=\"left\">如果调用完成，返回True</td>\n</tr>\n<tr>\n<td align=\"center\">obj.successful()</td>\n<td align=\"left\">如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</td>\n</tr>\n<tr>\n<td align=\"center\">obj.wait([timeout])</td>\n<td align=\"left\">等待结果变为可用。</td>\n</tr>\n<tr>\n<td align=\"center\">obj.terminate()</td>\n<td align=\"left\">立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</td>\n</tr>\n</tbody></table>\n<h5 id=\"进程池中的Queue\"><a href=\"#进程池中的Queue\" class=\"headerlink\" title=\"进程池中的Queue\"></a>进程池中的Queue</h5><p>如果要使用Pool创建进程，就需要使用<code>multiprocessing.Manager()</code>中的<code>Queue()</code>，而不是<code>multiprocessing.Queue()</code></p>\n<h3 id=\"Python-协程\"><a href=\"#Python-协程\" class=\"headerlink\" title=\"Python 协程\"></a>Python 协程</h3><p>协程，又称微线程，纤程。英文名Coroutine。协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p>\n<p>通俗的理解：<strong>在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</strong></p>\n<h4 id=\"1-协程和线程差异\"><a href=\"#1-协程和线程差异\" class=\"headerlink\" title=\"1. 协程和线程差异\"></a>1. 协程和线程差异</h4><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p>\n<h4 id=\"2-实现方式\"><a href=\"#2-实现方式\" class=\"headerlink\" title=\"2. 实现方式\"></a>2. 实现方式</h4><ul>\n<li><p>yield</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work1</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        print(<span class=\"hljs-string\">&quot;----work1---&quot;</span>)<br>        <span class=\"hljs-keyword\">yield</span><br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">work2</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        print(<span class=\"hljs-string\">&quot;----work2---&quot;</span>)<br>        <span class=\"hljs-keyword\">yield</span><br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span><br>    w1 = work1()<br>    w2 = work2()<br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">next</span>(w1)<br>        <span class=\"hljs-built_in\">next</span>(w2)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure></li>\n<li><p>greenlet</p>\n</li>\n</ul>\n<p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p>\n<p><strong>安装方式</strong><br>使用如下命令安装greenlet模块:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo pip3 install greenlet<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#coding=utf-8</span><br><br><span class=\"hljs-keyword\">from</span> greenlet <span class=\"hljs-keyword\">import</span> greenlet<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test1</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;---A--&quot;</span><br>        gr2.switch()<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test2</span>():</span><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;---B--&quot;</span><br>        gr1.switch()<br>        time.sleep(<span class=\"hljs-number\">0.5</span>)<br><br>gr1 = greenlet(test1)<br>gr2 = greenlet(test2)<br><br><span class=\"hljs-comment\">#切换到gr1中运行</span><br>gr1.switch()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>gevent</li>\n</ul>\n<p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent</p>\n<p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p>\n<p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p>\n<p><strong>安装方式</strong><br>使用如下命令安装gevent模块:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">pip3 install gevent<br></code></pre></td></tr></table></figure>\n<p>在gevent中不能直接使用time.sleep类似的方法，要么使用gevent.sleep，要么利用gevent.monkey打补丁</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> gevent <span class=\"hljs-keyword\">import</span> monkey<br><span class=\"hljs-keyword\">import</span> gevent<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coroutine_work</span>(<span class=\"hljs-params\">coroutine_name</span>):</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>        print(coroutine_name, i)<br>        time.sleep(random.random())<br><br>gevent.joinall([<br>        gevent.spawn(coroutine_work, <span class=\"hljs-string\">&quot;work1&quot;</span>),<br>        gevent.spawn(coroutine_work, <span class=\"hljs-string\">&quot;work2&quot;</span>)<br>])<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"获得进程和线程信息\"><a href=\"#获得进程和线程信息\" class=\"headerlink\" title=\"获得进程和线程信息\"></a>获得进程和线程信息</h3><p>想要获取线程和进程相关信息，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">获得线程, 进程 ID,NAME</span><br><span class=\"hljs-string\">总结:</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> psutil<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> datetime<br><br><span class=\"hljs-comment\"># 1 获取线程ID,NAME</span><br>t = threading.currentThread()<br><span class=\"hljs-comment\"># 线程ID</span><br>print(<span class=\"hljs-string\">&#x27;Thread id : %d&#x27;</span> % t.ident)<br><span class=\"hljs-comment\"># 线程NAME</span><br>print(<span class=\"hljs-string\">&#x27;Thread name : %s&#x27;</span> % t.getName())<br><br><span class=\"hljs-comment\"># 2 获取线程ID,NAME</span><br>pid = os.getpid()<br>p = psutil.Process(pid)<br>print(<span class=\"hljs-string\">&#x27;----------------&#x27;</span>)<br><span class=\"hljs-comment\"># 进程ID</span><br>print(<span class=\"hljs-string\">&#x27;Process id : %d&#x27;</span> % pid)<br><span class=\"hljs-comment\"># 进程NAME</span><br>print(<span class=\"hljs-string\">&#x27;Process name : %s&#x27;</span> % p.name())<br><span class=\"hljs-comment\"># 获取进程bin路径</span><br>print(<span class=\"hljs-string\">&#x27;Process bin  path : %s&#x27;</span> % p.exe())<br><span class=\"hljs-comment\"># 获取pid对应的路径</span><br>print(<span class=\"hljs-string\">&#x27;Process path : %s&#x27;</span> % p.cwd())<br><span class=\"hljs-comment\"># 进程状态</span><br>print(<span class=\"hljs-string\">&#x27;Process status : %s&#x27;</span> % p.status())<br><span class=\"hljs-comment\"># 进程运行时间</span><br>print(<span class=\"hljs-string\">&#x27;Process creation time : %s&#x27;</span> % datetime.datetime.fromtimestamp(p.create_time()).strftime(<span class=\"hljs-string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br><span class=\"hljs-comment\"># CPU使用情况</span><br>print(p.cpu_times())<br><span class=\"hljs-comment\"># 内存使用情况</span><br>print(<span class=\"hljs-string\">&#x27;Memory usage : %s%%&#x27;</span> % p.memory_percent())<br><span class=\"hljs-comment\"># 硬盘读取信息</span><br>print(p.io_counters())<br><span class=\"hljs-comment\"># 打开进程socket的namedutples列表</span><br>print(p.connections())<br><span class=\"hljs-comment\"># 此进程的线程数</span><br>print(<span class=\"hljs-string\">&#x27;Process number of threads : %s&#x27;</span> % p.num_threads())<br></code></pre></td></tr></table></figure>"},{"title":"数据库笔记","date":"2019-05-27T13:23:45.000Z","_content":"\n学习数据库安装后，最重要的就是学习SQL语句。\n\n### 1. 数据语句操作类型\n\nSQL是操作数据库的核心，\n\n结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。\n\nSQL是最重要的关系数据库操作语言，并且它的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索等。\n\nSQL是关系模型的数据库应用语言，由IBM在20世纪70年代为其关系型数据库 System R 所开发。\n\nSQL 是1986年10 月由美国国家标准局（ANSI）通过的数据库语言美国标准，接着，国际标准化组织（ISO）颁布了SQL正式国际标准。1989年4月，ISO提出了具有完整性特征的SQL89标准，1992年11月又公布了SQL92标准。\n\n虽然各个数据库系统略有不同，但是他们基本均遵循SQL 92标准。或者在SQL 92上做了一些简单的扩展和变化。\n\n学好了MySQL 的SQL 语法，其他的SQL语法学习起来均是万变不离其中。\n\nSQL语句按照其功能范围不同可分为3个类别：\n\n1. **数据定义语言**(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。\n2. **数据操作语言**(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。\n3. **数据控制语言**(DCL， Data Control Language)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。\n\n### 2. 管理数据库命令\n\n#### 元数据\n\n以下命令语句可以在 MySQL 的命令提示符使用，获取服务器元数据\n\n命令| 描述\n:---:|:---\nselect version( ) | 服务器版本信息\nselect database( )|当前数据库名 (或者返回空)\nselect user( )|当前用户名\nshow status|服务器状态\nshow variables|服务器配置变量\n\n#### 创建数据库\n\n- create database 数据库名:\n  创建数据库\n\n```bash\nmysql> create database data_test;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n#### 删除数据库\n\n- drop database 数据库名:\n 删除数据库\n\n```bash\nmysql> drop database data_test;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 展示所有数据库\n\n- show databases:\n  列出 MySQL 数据库管理系统的数据库列表。\n\n```bash\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| data_test          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.01 sec)\n```\n\n#### 改变数据库\n\n- use 数据库名 :\n  选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n```bash\nmysql> use data_test;\nDatabase changed\n```\n\n#### 展示当前数据库中所有的表\n\n- show tables:\n显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n\n```bash\nmysql> show tables;\n+---------------------+\n| Tables_in_data_test |\n+---------------------+\n| customers           |\n| orderitems          |\n| orders              |\n| productnotes        |\n| products            |\n| vendors             |\n+---------------------+\n6 rows in set (0.00 sec)\n```\n\n#### 展示特定表中每列的信息\n\n- show columns from 数据表(desc 数据表):\n显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n\n```bash\nmysql> show columns from customers;\n+--------------+-----------+------+-----+---------+----------------+\n| Field        | Type      | Null | Key | Default | Extra          |\n+--------------+-----------+------+-----+---------+----------------+\n| cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |\n| cust_name    | char(50)  | NO   |     | NULL    |                |\n| cust_address | char(50)  | YES  |     | NULL    |                |\n| cust_city    | char(50)  | YES  |     | NULL    |                |\n| cust_state   | char(5)   | YES  |     | NULL    |                |\n| cust_zip     | char(10)  | YES  |     | NULL    |                |\n| cust_country | char(50)  | YES  |     | NULL    |                |\n| cust_contact | char(50)  | YES  |     | NULL    |                |\n| cust_email   | char(255) | YES  |     | NULL    |                |\n+--------------+-----------+------+-----+---------+----------------+\n9 rows in set (0.00 sec)\n```\n\n#### 展示数据表的详细索引信息\n\n- show index from 数据表:\n显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n\n```bash\nmysql> show index from customers;\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| customers |          0 | PRIMARY  |            1 | cust_id     | A         |           5 |  NULL    |   NULL |      | BTREE      |         |               | YES     | NULL       |\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n1 row in set (0.01 sec)\n\n```\n\n#### 展示数据库的性能及统计信息\n\n- show table status [from db_name] [like 'pattern'] \\G:\n  该命令将输出Mysql数据库管理系统的性能及统计信息。\n\n> 显示数据库 data_test 中所有表的信息\n\n```bash\nmysql> show table status from data_test;\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| Name         | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| customers    | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| orderitems   | InnoDB |      10 | Dynamic    |   11 |           1489 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |\n| orders       | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |        16384 |         0 |          20010 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| productnotes | MyISAM |      10 | Dynamic    |   14 |            135 |        1892 | 281474976710655 |         6144 |         0 |            115 | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |\n| products     | InnoDB |      10 | Dynamic    |   14 |           1170 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| vendors      | InnoDB |      10 | Dynamic    |    6 |           2730 |       16384 |               0 |            0 |         0 |           1007 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n6 rows in set (0.02 sec)\n```\n\n> 表名以cus开头的表的信息\n\n```bash\nmysql> show table status from data_test like \"cus%\";\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| Name      | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| customers | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n1 row in set (0.00 sec)\n```\n\n> 表名以cus开头的表的信息;\n> 加上 \\G，查询结果按列打印;\\G后面不能再加分号;\n> 因为\\G在功能上等同于;\n> 如果加了分号，那么就是;;(2个分号)，SQL语法错误`ERROR:No query specified`\n\n```bash\nmysql> show table status from data_test like \"cus%\"\\G\n*************************** 1. row ***************************\n           Name: customers\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 5\n Avg_row_length: 3276\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: 10006\n    Create_time: 2019-05-26 10:15:02\n    Update_time: 2019-05-26 10:15:25\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n```\n\n### 3. 数据类型\n\n#### 数值类型\n\nmysql支持所有标准sql数值数据类型。\n\n这些类型包括严格数值数据类型（integer、smallint、decimal和numeric），以及近似数值数据类型（float、real和double precisi键字int是integer的同义词，关键字dec是decimal的同义词。\n\nbit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。\n\n作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。\n\n|          类型          |     大小     | 范围（有符号）                                                                                                                      | 范围（无符号）                                                    |         用途         |\n| :--------------------: | :----------: | :---------------------------------------------------------------------------------------------------------------------------------- | :---------------------------------------------------------------- | :------------------: |\n|      **tinyint**       |    1 字节    | (-128，127)                                                                                                                         | (0，255)                                                          |       小整数值       |\n|        smallint        |    2 字节    | (-32 768，32 767)                                                                                                                   | (0，65 535)                                                       |       大整数值       |\n|       mediumint        |    3 字节    | (-8 388 608，8 388 607)                                                                                                             | (0，16 777 215)                                                   |       大整数值       |\n| **int** 或 **integer** |    4 字节    | (-2 147 483 648，2 147 483 647)                                                                                                     | (0，4 294 967 295)                                                |       大整数值       |\n|         bigint         |    8 字节    | (-9,223,372,036,854,775,808，9 223 372 036 854 775 807)                                                                             | (0，18 446 744 073 709 551 615)                                   |      极大整数值      |\n|       **float**        |    4 字节    | (-3.402 823 466 e+38，-1.175 494 351 e-38)，0，(1.175 494 351 e-38，3.402 823 466 351 e+38)                                         | 0，(1.175 494 351 e-38，3.402 823 466 e+38)                       | 单精度<br/>浮点数值  |\n|       **double**       |    8 字节    | (-1.797 693 134 862 315 7 e+308，-2.225 073 858 507 201 4 e-308)，0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308) | 0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308) | 双精度<br/> 浮点数值 |\n|      **decimal**       | decimal(m,d) | 依赖于 m 和 d 的值                                                                                                                  | 依赖于 m 和 d 的值                                                |        小数值        |\n\n* * *\n\n#### 日期和时间类型\n\n表示时间值的日期和时间类型为 datetime、date、timestamp、time 和 year。\n\n每个时间类型有一个有效值范围和一个 \"零\" 值，当指定不合法的 mysql 不能表示的值时使用 \"零\" 值。\n\ntimestamp 类型有专有的自动更新特性，将在后面描述。\n\n|     类型      | 大小(字节) | 范围                                                                                                                                   |        格式         |           用途           |\n| :-----------: | :--------: | :------------------------------------------------------------------------------------------------------------------------------------- | :-----------------: | :----------------------: |\n|   **date**    |     3      | 1000-01-01/9999-12-31                                                                                                                  |     yyyy-mm-dd      |          日期值          |\n|   **time**    |     3      | '-838:59:59'/'838:59:59'                                                                                                               |      hh:mm:ss       |     时间值或持续时间     |\n|     year      |     1      | 1901/2155                                                                                                                              |        yyyy         |          年份值          |\n| **datetime**  |     8      | 1000-01-01 00:00:00/9999-12-31 23:59:59                                                                                                | yyyy-mm-dd hh:mm:ss |     混合日期和时间值     |\n| **timestamp** |     4      | 1970-01-01 00:00:00/2038<br/>结束时间是第 **2147483647** 秒<br/>北京时间 **2038-1-19 11:14:07**<br/>格林尼治时间**2038-1-19 03:14:07** |   yyyymmdd hhmmss   | 混合日期和时间值，时间戳 |\n\n* * *\n\n#### 字符串类型\n\n字符串类型指 char、varchar、binary、varbinary、blob、text、enum 和 set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。\n\n| 类型        | 大小                 | 用途                            |\n| :---------- | :------------------- | :------------------------------ |\n| **char**    | 0-255 字节           | 定长字符串                      |\n| **varchar** | 0-65535 字节         | 变长字符串                      |\n| tinyblob    | 0-255 字节           | 不超过 255 个字符的二进制字符串 |\n| tinytext    | 0-255 字节           | 短文本字符串                    |\n| **blob**    | 0-65 535 字节        | 二进制形式的长文本数据          |\n| **text**    | 0-65 535 字节        | 长文本数据                      |\n| mediumblob  | 0-16 777 215 字节    | 二进制形式的中等长度文本数据    |\n| mediumtext  | 0-16 777 215 字节    | 中等长度文本数据                |\n| longblob    | 0-4 294 967 295 字节 | 二进制形式的极大文本数据        |\n| longtext    | 0-4 294 967 295 字节 | 极大文本数据                    |\n\nchar 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。\n\nbinary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。\n\nblob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。\n\n有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。\n\n> 注意：\n\n1、一个汉字占多少长度与编码有关：\n\nUTF－8：一个汉字＝3个字节\n\nGBK：一个汉字＝2个字节\n\n2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别\n\n3、MySQL 检查长度，可用 SQL 语言来查看：\n\n```bash\nselect length(fieldname) from table_name\n```\n\n### 4. 创建数据表\n\n创建MySQL数据表需要以下信息：\n\n- 表名\n- 表字段名\n- 定义每个表字段\n\n**语法**\n以下为创建MySQL数据表的SQL通用语法：\n\n```bash\ncreate table table_name (column_name column_type);\n```\n\n**实例**\n以下例子中我们将在 my_data 数据库中创建数据表students：\n\n```bash\nmysql> create table if not exists students(id int unsigned auto_increment, name varchar(40) not null, adress varchar(100) , birthday date not null, primary key(id)) engine=innodb default charset=utf8mb4;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> show columns from students;\n+----------+------------------+------+-----+---------+----------------+\n| Field    | Type             | Null | Key | Default | Extra          |\n+----------+------------------+------+-----+---------+----------------+\n| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(40)      | NO   |     | NULL    |                |\n| adress   | varchar(100)     | YES  |     | NULL    |                |\n| birthday | date             | NO   |     | NULL    |                |\n+----------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n```\n\n实例解析：\n\n- 如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为null ，就会报错。\n- auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。\n- primary key关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。\n- engine 设置存储引擎，charset 设置编码。\n\n### 5. 删除数据表\n\nMySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。\n\n**语法**\n以下为删除MySQL数据表的通用语法：\n\n```bash\ndrop table table_name;\n```\n\n**实例**\n以下实例中我们将删除 students 表:\n\n```bash\nmysql> drop table students;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\nEmpty set (0.00 sec)\n```\n\n### 6. 插入数据\n\nMySQL 表中使用 insert into SQL语句来插入数据。\n\n**语法**\n以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法：\n\n```bash\ninsert into table_name ( field1, field2,...fieldN ) values ( value1, value2,...valueN );\n```\n\ninsert 插入多条数据\n\n```bash\ninsert into table_name  (field1, field2,...fieldn)  values  (valuea1,valuea2,...valuean),(valueb1,valueb2,...valuebn),(valuec1,valuec2,...valuecn)......;\n```\n\n如果数据是字符型，必须使用单引号或者双引号，如：\"value\"。\n\n**实例**\n以下实例中我们将向 students 表插入数据:\n\n```bash\n# 主键默认从1开始\nmysql> insert into students (name,birthday) values(\"丽丽\",\"1996-05-06\");\nQuery OK, 1 row affected (0.00 sec)\n\n# 主键设为0，即从最后一个id值自动增长\nmysql> insert into students values(0,\"李明\",null,\"1993-12-16\");\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> insert into students values(10,\"张磊\",'北京市海淀区',\"1995-04-12\");\nQuery OK, 1 row affected (0.00 sec)\n\n# 主键不设置，从最后一个id值自动增长\nmysql> insert into students set name=\"孙雨\",adress='河北省石家庄市',birthday=\"1989-07-18\";\nQuery OK, 1 row affected (0.01 sec)\n\n```\n\n> 如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为0或者null，这样添加数据可以自增\n\n### 7. 条件语句\n\n- 查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用where语句来设定查询条件。\n- where 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。\n- 以下为操作符列表，可用于 where 子句中。\n- 你可以在 WHERE 子句中指定任何条件。\n- 你可以使用 and 或者 or 指定一个或多个条件。\n- WHERE 子句也可以运用于 SQL 的 delete 或者 update 命令。\n\n> 下表中实例假定 A 为 10, B 为 20\n\n| 操作符 | 描述                                                                                     | 实例                 |\n| :----: | :--------------------------------------------------------------------------------------- | :------------------- |\n|   =    | 等号，检测两个值是否相等，如果相等返回true                                               | (A = B) 返回false。  |\n|   !=   | 不等于，检测两个值是否相等，如果不相等返回true                                           | (A != B) 返回 true。 |\n|   >    | 大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true                   | (A > B) 返回false。  |\n|   <    | 小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true                   | (A < B) 返回 true。  |\n|   >=   | 大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true   | (A >= B) 返回false。 |\n|   <=   | 小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true | (A <= B) 返回 true。 |\n\n\n如果我们想在 MySQL 数据表中读取指定的数据，where 子句是非常有用的。\n\n使用主键来作为 where 子句的条件查询是非常快速的。\n\n如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。\n\n### 8. 查询数据\n\nMySQL 数据库使用SQL select语句来查询数据。\n\n**语法**\n以下为在MySQL数据库中查询数据通用的 select 语法\n\n```bash\nselect column_name,column_name\nfrom table_name\n[where Clause]\n[limit N][ offset M]\n```\n\n- 查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用where语句来设定查询条件。\n- select 命令可以读取一条或者多条记录。\n- 你可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据\n- 你可以使用 limit 属性来设定返回的记录数。\n- 你可以通过offset指定select语句开始查询的数据偏移量。默认情况下偏移量为0。\n\n**实例**\n以下实例我们将通过 SQL select 命令来获取 MySQL 数据表 students 的数据：\n\n```bash\nmysql> select * from students;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n|  1 | 丽丽 | NULL           | 1996-05-06 |\n|  2 | 李明 | NULL           | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区    | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市  | 1989-07-18 |\n+----+------+----------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name from students limit 2 offset 1;\n+----+------+\n| id | name |\n+----+------+\n|  2 | 李明 |\n| 10 | 张磊 |\n+----+------+\n2 rows in set (0.00 sec)\n\nmysql> select * from students where id>=10;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n2 rows in set (0.00 sec)\n\nmysql> select * from students where id>=10 limit 1 offset 1;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n1 row in set (0.00 sec)\n\nmysql> select * from students where name=\"李明\";\n+----+------+--------+------------+\n| id | name | adress | birthday   |\n+----+------+--------+------------+\n|  2 | 李明 | NULL   | 1993-12-16 |\n+----+------+--------+------------+\n1 row in set (0.00 sec)\n```\n\n### 9. 修改数据\n\n如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL update 命令来操作。\n\n**语法**\n以下是 update 命令修改 MySQL 数据表数据的通用 SQL 语法：\n\n```bash\nupdate table_name set field1=new-value1, field2=new-value2 [where clause]\n```\n\n当我们需要将字段中的特定字符串批量修改为其他字符串时，可已使用以下操作：\n\n```bash\nupdate table_name set field=replace(field, 'old-string', 'new-string') [where clause]\n```\n\n- 你可以同时更新一个或多个字段。\n- 你可以在 WHERE 子句中指定任何条件。\n- 你可以在一个单独表中同时更新数据。\n当你需要更新数据表中指定行的数据时 where 子句是非常有用的。\n\n**实例**\n以下我们将在 SQL update 命令使用 where 子句来更新 students 表中指定的数据：\n\n```bash\nmysql> update students set adress=\"北京市昌平区\" where adress is null;\nQuery OK, 2 rows affected (0.01 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select * from students;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n|  1 | 丽丽 | 北京市昌平区   | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区   | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> update students set adress=replace(adress, \"河北省石家庄\",\"湖北省武汉\") wh\nere id=11;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区 | 1995-04-12 |\n| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |\n+----+------+--------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> update students set id=id-7 where id=10;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |\n+----+------+--------------+------------+\n4 rows in set (0.00 sec)\n```\n\n### 10. 删除数据\n\n你可以使用 sql 的 delete from 命令来删除 mysql 数据表中的记录。\n\n**语法**\n以下是 sql delete 语句从 mysql 数据表中删除数据的通用语法：\n\n```bash\ndelete from table_name [where clause]\n```\n\n- 如果没有指定 where 子句，mysql 表中的所有记录将被删除。\n- 你可以在 where 子句中指定任何条件\n- 您可以在单个表中一次性删除记录。\n当你想删除数据表中指定的记录时 where 子句是非常有用的。\n\n**实例**\n这里我们将在 sql delete 命令中使用 where 子句来删除 mysql 数据表 students 所选的数据:\n\n```bash\nmysql> delete from students where id=11;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n> delete，drop，truncate 都有删除表的作用，区别在于：\n\n1、drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;\n\n实例，删除学生表：\n\n```bash\ndrop table students;\n```\n\n2、truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;\n\n实例，删除学生表：\n\n```bash\ntruncate table students;\n```\n\n3、delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;\n\n实例，删除学生表：\n\n```bash\ndelete from students;\n```\n\n4、delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;\n\n实例，删除学生表中姓名为 \"张三\" 的数据：\n\n```bash\ndelete from student where name = \"张三\";\n```\n\n5、delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;\n\n实例，删除学生表中姓名为 \"张三\" 的数据：\n\n```bash\ndelete from student where name = \"张三\";\n```\n\n实例，释放学生表的表空间：\n\n```bash\noptimize table students;\n```\n\n6、delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。\n\n### 11. 包含条件\n\n我们知道在 mysql 中使用 sql select 命令来读取数据， 同时我们可以在 select 语句中使用 where 子句来获取指定的记录。\n\nwhere 子句中可以使用等号 = 来设定获取数据的条件，如 \"adress = '北京市昌平区'\"。\n\n但是有时候我们需要获取 adress 字段含有 \"北京市\" 字符的所有记录，这时我们就需要在 where 子句中使用 sql like 子句。\n\n**语法**\n以下是 sql select 语句使用 like 子句从数据表中读取数据的通用语法：\n\n```bash\nselect field1, field2,...fieldn from table_name where field1 like condition1 [and [or]] filed2 = 'somevalue'\n```\n\n- sql like 子句中使用百分号 %字符来表示任意字符，类似于unix或正则表达式中的星号 *。\n- 如果没有使用百分号 %, like 子句与等号 = 的效果是一样的。\n- like 通常与 % 一同使用，类似于一个元字符的搜索。\n- 可以使用 and 或者 or 指定一个或多个条件。\n- 可以在 delete、select或 update 命令中使用 where...like 子句来指定条件。\n\n**实例**\n以下我们将在 sql select 命令中使用 where...like 子句来从mysql数据表 students 中读取数据。\n\n```bash\nmysql> select * from students where adress like \"北京市%\";\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n> 在 where like 的条件查询中，SQL 提供了四种匹配方式。\n\n- `%`：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。\n- `_`：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。\n- `[]`：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。\n- `[^]`：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。\n- 查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。\n\n> like 匹配/模糊匹配，会与 % 和 _ 结合使用。\n\n```bash\n'%a'     //以a结尾的数据\n'a%'     //以a开头的数据\n'%a%'    //含有a的数据\n'_a_'    //三位且中间字母是a的\n'_a'     //两位且结尾字母是a的\n'a_'     //两位且开头字母是a的\n```\n\n### 12. 关联查询\n\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\n\n**语法**\nmysql union 操作符语法格式：\n\n```bash\nselect expression1, expression2, ... expression_n\nfrom tables\n[where conditions]\nunion [all | distinct]\nselect expression1, expression2, ... expression_n\nfrom tables\n[where conditions];\n```\n\n**参数**\n\n- expression1, expression2, ... expression_n: 要检索的列。\n\n- tables: 要检索的数据表。\n\n- where conditions: 可选， 检索条件。\n\n- distinct: 可选，删除结果集中重复的数据。默认情况下 union 操作符已经删除了重复数据，所以 distinct 修饰符对结果没啥影响。\n\n- all: 可选，返回所有结果集，包含重复数据。\n\n**实例**\n下面的 SQL 语句从 \"students\" 和 \"teachers\" 表中选取所有不同的adress（只有不同的值）：\n\n```bash\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from teachers;\n+----+--------+--------------+----------+\n| id | name   | adress       | birthday |\n+----+--------+--------------+----------+\n|  1 | 刘老师 | 北京市海淀区 | NULL     |\n|  2 | 孙老师 | 北京市朝阳区 | NULL     |\n|  3 | 常老师 | 北京市昌平区 | NULL     |\n+----+--------+--------------+----------+\n3 rows in set (0.00 sec)\n\nmysql> select adress from students union select adress from teachers ;\n+--------------+\n| adress       |\n+--------------+\n| 北京市昌平区 |\n| 北京市海淀区 |\n| 北京市朝阳区 |\n+--------------+\n3 rows in set (0.00 sec)\n\nmysql> select name from students where adress like \"%昌平区\" union select name from teachers where adress like \"%昌平区\" ;\n+--------+\n| name   |\n+--------+\n| 丽丽   |\n| 李明   |\n| 常老师 |\n+--------+\n3 rows in set (0.00 sec)\n```\n\n> UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）\n> UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）\n\n### 13. 排序\n\n我们知道从 mysql 表中使用 sql select 语句来读取数据。\n\n如果我们需要对读取的数据进行排序，我们就可以使用 mysql 的 order by 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。\n\n**语法**\n以下是 sql select 语句使用 order by 子句将查询数据排序后再返回数据：\n\n```bash\nselect field1, field2,...fieldn table_name1, table_name2... order by field1 [asc [desc][默认 asc]], [field2...] [asc [desc][默认 asc]]\n```\n\n- 你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。\n- 你可以设定多个字段来排序。\n- 你可以使用 asc 或 desc 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。\n- 你可以添加 where...like 子句来设置条件。\n\n**实例**\n尝试以下实例，结果将按升序及降序排列。\n\n```bash\nmysql> select * from students where adress like \"北京市%\" order by birthday;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from students where adress like \"北京市%\" order by birthday desc;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from students where adress like \"北京市%\" order by birthday asc;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n### 14. 分组\n\ngroup by 语句根据一个或多个列对结果集进行分组。\n在分组的列上我们可以使用 count, sum, avg等函数。\n\n**语法**\n以下是gruop by语句的语法示例：\n\n```bash\nselect column_name, function(column_name) from table_name where column_name operator value group by column_name;\n```\n\n**实例**\n接下来我们使用 group by 语句 将数据表按名字进行分组，并统计每个商品有多少条记录：\n\n```bash\nmysql> select * from goods;\n+----+--------+------+\n| id | name   | nums |\n+----+--------+------+\n|  1 | 西瓜   |   50 |\n|  2 | 甜瓜   |   15 |\n|  3 | 甜瓜   |   15 |\n|  4 | 苹果   |   25 |\n|  5 | 西瓜   |   25 |\n|  6 | 西瓜   |   63 |\n+----+--------+------+\n6 rows in set (0.00 sec)\n\nmysql> select name, count(name) from goods group by name;\n+--------+-------------+\n| name   | count(name) |\n+--------+-------------+\n| 甜瓜   |           2 |\n| 苹果   |           1 |\n| 西瓜   |           3 |\n+--------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\nwith rollup 可以实现在分组统计数据基础上再进行相同的统计（sum,avg,count…）。\n\n例如我们将以上的数据表按商品名称进行分组，再统计每类商品的总数量，或者求其均值：\n\n```bash\nmysql> select name, sum(nums) as count_num from goods group by name;\n+--------+-----------+\n| name   | count_num |\n+--------+-----------+\n| 甜瓜   |        30 |\n| 苹果   |        25 |\n| 西瓜   |       138 |\n+--------+-----------+\n3 rows in set (0.00 sec)\n\nmysql> select name, avg(nums) as avg_num from goods group by name with rollup;\n+--------+---------+\n| name   | avg_num |\n+--------+---------+\n| 甜瓜   | 15.0000 |\n| 苹果   | 25.0000 |\n| 西瓜   | 46.0000 |\n| NULL   | 32.1667 |\n+--------+---------+\n4 rows in set (0.00 sec)\n\n```\n\n我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：\n\n```bash\nselect coalesce(a,b,c);\n```\n\n参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。\n\n以下实例中如果名字为空我们使用总数代替：\n\n```bash\nmysql> select coalesce(name, '总计') as 名称, sum(nums) as 数量 from goods group by name with rollup;\n+--------+--------+\n| 名称   | 数量   |\n+--------+--------+\n| 甜瓜   |     30 |\n| 苹果   |     25 |\n| 西瓜   |    138 |\n| 总计   |    193 |\n+--------+--------+\n4 rows in set (0.00 sec)\n\n```\n\n### 15. 连接\n\n在前面的章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。\n\n本章节我们将向大家介绍如何使用 mysql 的 join 在两个或多个表中查询数据。\n\n你可以在 select, update 和 delete 语句中使用 mysql 的 join 来联合多表查询。\n\njoin 按照功能大致分为如下三类：\n\n- inner join（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n- left join（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n- right join（右连接）： 与 left join 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n**实例**\n首先创建表，并添加测试数据\n\n```bash\nmysql> create table web_counts(id int unsigned auto_increment primary key, web_name varchar(20) not null, nums int unsigned default 0) default charset=utf8;\nQuery OK, 0 rows affected (0.10 sec)\n\nmysql> create table web_info(id int unsigned auto_increment primary key, web_name varchar(20) not null, web_info varchar(50), create_time date not null) default charset=utf8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> desc web_info;\n+-------------+------------------+------+-----+---------+----------------+\n| Field       | Type             | Null | Key | Default | Extra          |\n+-------------+------------------+------+-----+---------+----------------+\n| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| web_name    | varchar(20)      | NO   |     | NULL    |                |\n| web_info    | varchar(50)      | YES  |     | NULL    |                |\n| create_time | date             | NO   |     | NULL    |                |\n+-------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql> desc web_counts;\n+----------+------------------+------+-----+---------+----------------+\n| Field    | Type             | Null | Key | Default | Extra          |\n+----------+------------------+------+-----+---------+----------------+\n| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| web_name | varchar(20)      | NO   |     | NULL    |                |\n| nums     | int(10) unsigned | YES  |     | 0       |                |\n+----------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> insert into web_counts values(0, \" 淘宝\",1000);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> insert into web_counts values(0, \"百度\", 3000);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_counts values(0, \"腾讯\", 2000);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_counts values(0, \"网易\", 900);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from web_counts;\n+----+----------+------+\n| id | web_name | nums |\n+----+----------+------+\n|  1 | 淘宝     | 1000 |\n|  2 | 百度     | 3000 |\n|  3 | 腾讯     | 2000 |\n|  4 | 网易     |  900 |\n+----+----------+------+\n4 rows in set (0.00 sec)\n\nmysql> insert into web_info values(0, \"百度\", \"搜索网站\",\"1989-9-01\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"腾讯\", \"社交网站\",\"1991-02-05\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"网易\", \"门户网站\",\"1990-08-09\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"新浪\", \"社交网站\",\"1993-05-12\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from web_info;\n+----+----------+--------------+-------------+\n| id | web_name | web_info     | create_time |\n+----+----------+--------------+-------------+\n|  1 | 百度     | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 社交网站     | 1991-02-05  |\n|  3 | 网易     | 门户网站     | 1990-08-09  |\n|  4 | 新浪     | 社交网站     | 1993-05-12  |\n+----+----------+--------------+-------------+\n4 rows in set (0.01 sec)\n\n```\n\n接下来我们就使用mysql的inner join(也可以省略 inner 使用 join，效果一样)来连接以上两张表来读取web_counts表中所有web_name字段在web_info表对应的字段值：\n\n```bash\nmysql> select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a inner join web_info b on a.web_name=b.web_name;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\n以上 SQL 语句等价于：\n\n```bash\nmysql> select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a, web_info b where a.web_name=b.web_name;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\nmysql left join 与 join 有所不同。 mysql left join 会读取左边数据表的全部数据，即便右边表无对应数据。\n\n```bash\nmysql> select a.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a left join web_info b on a.web_name=b.web_name order by a.id;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 淘宝     | 1000 | NULL         | NULL        |\n|  2 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  3 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  4 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n4 rows in set (0.00 sec)\n\n```\n\nmysql right join 会读取右边数据表的全部数据，即便左边边表无对应数据。\n\n```bash\nmysql> select b.id, b.web_name, a.nums,b.web_info, b.create_time from web_counts a right join web_info b on a.web_name=b.web_name order by b.id;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n|  4 | 新浪     | NULL | 社交网站     | 1993-05-12  |\n+----+----------+------+--------------+-------------+\n4 rows in set (0.01 sec)\n\n```\n\n### 16. 正则表达式\n\nmysql 正则表达式\n在前面的章节我们已经了解到mysql可以通过 `like ...%` 来进行模糊匹配。\n\nmysql 同样也支持其他正则表达式的匹配， mysql中使用 regexp 操作符来进行正则表达式匹配。\n\n下表中的正则模式可应用于 `regexp` 操作符中。\n\n模式| 描述\n :---: | :---\n `^`     | 匹配输入字符串的开始位置。如果设置了 regexp 对象的 multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。\n`$`     | 匹配输入字符串的结束位置。如果设置了regexp 对象的 multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。\n `.`     | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用象 '[.\\n]' 的模式。\n`[...]`   | 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。\n`[^...]`  | 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'。\n`p1|p2`| 匹配 p1 或 p2。例如，`z|food` 能匹配 \"z\" 或 \"food\"。`(z | f)ood` 则匹配 \"zood\" 或 \"food\"。\n`*`     | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。\n`+`     | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。\n`{n}`    | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。\n`{n,m}`   | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。\n\n**实例**\n了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的sql语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：\n\n- 查找name字段中以'st'为开头的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp '^st';\n```\n\n- 查找name字段中以'ok'为结尾的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp 'ok$';\n```\n\n- 查找name字段中包含'mar'字符串的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp 'mar';\n```\n\n- 查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp '^[aeiou]|ok$';\n```\n\n### 17. NULL 值处理\n\n为了处理这种情况，mysql提供了三大运算符:\n\n- is null: 当列的值是 null,此运算符返回 true。\n- is not null: 当列的值不为 null, 运算符返回 true。\n- <=>: 比较操作符（不同于=运算符），当比较的的两个值为 null 时返回 true。\n\n> 关于 null 的条件比较运算是比较特殊的。你不能使用 = null 或 != null 在列中查找 null 值 。\n\n> 在 mysql 中，null 值与任何其它值的比较（即使是 null）永远返回 false，即 null = null 返回false 。\n\nmysql 中处理 null 使用 is null 和 is not null 运算符。\n\n**实例**\n在数据库my_data中创建student表，并插入相应数据\n\n```bash\nmysql> create table student(ID int unsigned auto_increment primary key,name varchar(10) not null,age int unsigned) default charset=utf8;\nQuery OK, 0 rows affected (0.25 sec)\n\nmysql> insert into student values(0, \"李华\",25);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"敏柔\",null);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"赵强\",null);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"罗晴\",23);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\n```\n\n以下实例中你可以看到 = 和 != 运算符是不起作用的：\n\n```bash\nmysql> select id,name,age=null from student;\n+----+--------+----------+\n| id | name   | age=null |\n+----+--------+----------+\n|  1 | 李华   |     NULL |\n|  2 | 敏柔   |     NULL |\n|  3 | 赵强   |     NULL |\n|  4 | 罗晴   |     NULL |\n+----+--------+----------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name,age!=null from student;\n+----+--------+-----------+\n| id | name   | age!=null |\n+----+--------+-----------+\n|  1 | 李华   |      NULL |\n|  2 | 敏柔   |      NULL |\n|  3 | 赵强   |      NULL |\n|  4 | 罗晴   |      NULL |\n+----+--------+-----------+\n4 rows in set (0.00 sec)\n```\n\n查找数据表中 age 列是否为 null，必须使用 <=> 、is null 和 is not null，如下实例：\n\n```bash\nmysql> select id,name,age is null from student;\n+----+--------+-------------+\n| id | name   | age is null |\n+----+--------+-------------+\n|  1 | 李华   |           0 |\n|  2 | 敏柔   |           1 |\n|  3 | 赵强   |           1 |\n|  4 | 罗晴   |           0 |\n+----+--------+-------------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name,age<=>null from student;\n+----+--------+------------+\n| id | name   | age<=>null |\n+----+--------+------------+\n|  1 | 李华   |          0 |\n|  2 | 敏柔   |          1 |\n|  3 | 赵强   |          1 |\n|  4 | 罗晴   |          0 |\n+----+--------+------------+\n4 rows in set (0.00 sec)\n\n```\n\n### 18.事务\n\nmysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！\n\n- 在 mysql 中只有使用了 innodb 数据库引擎的数据库或表才支持事务。\n- 事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么全部执行，要么全部不执行。\n- 事务用来管理 insert,update,delete 语句\n\n一般来说，事务是必须满足4个条件（acid）：：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。\n\n- **原子性**：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\n\n- **一致性**：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。\n\n- **隔离性**：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。\n\n- **持久性**：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n> 在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。\n\n#### 事务控制语句：\n\n- begin 或 start transaction 显式地开启一个事务；\n\n- commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；\n\n- rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；\n\n- savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；\n\n- release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；\n\n- rollback to identifier 把事务回滚到标记点；\n\n- set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。\n\n#### mysql 事务处理主要有两种方法：\n\n1、用 begin, rollback, commit来实现\n\n- begin 开始一个事务\n- rollback 事务回滚\n- commit 事务确认\n\n2、直接用 set 来改变 mysql 的自动提交模式:\n\n- set autocommit=0 禁止自动提交\n- set autocommit=1 开启自动提交\n\n**实例**\n下面具体演示MySQL事务的使用\n\n```bash\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\nmysql> begin; # 开启事务\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into student values(0,\"寒梅\",28); # 插入数据\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 寒梅   |   28 |\n+----+--------+------+\n5 rows in set (0.00 sec)\n\nmysql> rollback; # 回滚\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\nmysql> insert into student values(0,\"寒梅\",28); # 插入数据\nQuery OK, 1 row affected (0.15 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  6 | 寒梅   |   28 |\n+----+--------+------+\n5 rows in set (0.00 sec)\n\nmysql> insert into student values(5,\"李磊\",26);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0,\"张雷\",20);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> set autocommit=0; # 禁止自动提交\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into student values(0,\"韩美美\",20);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+-----------+------+\n| ID | name      | age  |\n+----+-----------+------+\n|  1 | 李华      |   25 |\n|  2 | 敏柔      | NULL |\n|  3 | 赵强      | NULL |\n|  4 | 罗晴      |   23 |\n|  5 | 李磊      |   26 |\n|  6 | 寒梅      |   28 |\n|  7 | 张雷      |   20 |\n|  8 | 莉莉      |   20 |\n|  9 | 韩美美    |   20 |\n+----+-----------+------+\n9 rows in set (0.00 sec)\n\nmysql> rollback; # 回滚\nQuery OK, 0 rows affected (0.16 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> update student set age=23 where name=\"敏柔\"; # 修改数据\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> savepoint point1; # 创建保存点\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update student set age=22 where name=\"赵强\";\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   |   22 |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> rollback to point1; # 回滚到保存点\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> commit; # 事务提交\nQuery OK, 0 rows affected (0.04 sec)\n\n```\n\n### 19. ALTER命令\n\n当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL alter命令。\n\n#### 删除表字段\n\n如下命令使用了 alter 命令及 drop 子句来删除以上创建表的 age 字段：\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | YES  |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> alter table table_name  drop field_name;\nQuery OK, 0 rows affected (0.92 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n2 rows in set (0.00 sec)\n\n```\n\n如果数据表中只剩余一个字段则无法使用drop来删除字段。\n\n#### 增加表字段\n\nmysql 中使用 add 子句来向数据表中添加列，如下实例在表 student 中添加 age 字段，并定义数据类型:\n\n```bash\nmysql> alter table student add age int unsigned not null;\nQuery OK, 0 rows affected (0.53 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n```\n\n执行以上命令后，field_name 字段会自动添加到数据表字段的末尾。\n\n如果你需要指定新增字段的位置，可以使用mysql提供的关键字 first (设定位第一列)， after 字段名（设定位于某个字段之后）。\n\n尝试以下 alter table 语句, 在执行成功后，使用 show columns 查看表结构的变化：\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+-------+\n| Field | Type             | Null | Key | Default | Extra |\n+-------+------------------+------+-----+---------+-------+\n| name  | varchar(10)      | NO   |     | NULL    |       |\n| age   | int(10) unsigned | NO   |     | NULL    |       |\n+-------+------------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n\nmysql> alter table student add id int unsigned auto_increment primary key first;\nQuery OK, 0 rows affected (0.56 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> alter table student add class int unsigned after id;\nQuery OK, 0 rows affected (0.54 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | int(10) unsigned | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\nfirst 和 after 关键字可用于 add 与 modify 子句，所以如果你想重置数据表字段的位置就需要先使用 drop 删除字段然后使用 add 来添加字段并设置位置。\n\n#### 修改表字段\n\n如果需要修改字段类型及名称, 你可以在alter命令中使用 modify 或 change 子句 。\n\n例如，把字段 class 的类型从 int unsigned 改为 varchar(10)，可以执行以下命令:\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | int(10) unsigned | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql> alter table student modify class varchar(10);\nQuery OK, 8 rows affected (0.69 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | varchar(10)      | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n使用 change 子句, 语法有很大的不同。 在 change 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n\n当你修改字段时，你可以指定是否包含值或者是否设置默认值。\n\n如果你不设置默认值，mysql会自动设置该字段默认为 null。\n\n```bash\nmysql> alter table student change class class_room varchar(20) default \"203\";\nQuery OK, 0 rows affected (0.10 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | 203     |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n你可以使用 alter 来修改字段的默认值，尝试以下实例：\n\n```bash\nmysql> alter table student alter class_room set default \"205\";\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | 205     |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n你也可以使用 alter 命令及 drop子句来删除字段的默认值，如下实例：\n\n```bash\nmysql> alter table student alter class_room drop default;\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | NULL    |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n```\n\n#### 修改数据表\n\n修改数据表类型，可以使用 alter table 命令来完成。\n\n尝试以下实例，我们将表 student 的类型修改为 MyISAM ，然后再修改为 InnoDB：\n\n```bash\nmysql> alter table student engine=myisam;\nQuery OK, 8 rows affected (0.28 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> show table status like \"student\"\\G\n*************************** 1. row ***************************\n           Name: student\n         Engine: MyISAM\n        Version: 10\n     Row_format: Dynamic\n           Rows: 8\n Avg_row_length: 20\n    Data_length: 160\nMax_data_length: 281474976710655\n   Index_length: 2048\n      Data_free: 0\n Auto_increment: 9\n    Create_time: 2019-06-09 17:47:23\n    Update_time: 2019-06-09 17:47:23\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n\nmysql> alter table students engine=innodb;\nQuery OK, 8 rows affected (0.76 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> show table status where name=\"students\"\\G\n*************************** 1. row ***************************\n           Name: students\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 8\n Avg_row_length: 2048\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: 9\n    Create_time: 2019-06-09 17:54:53\n    Update_time: 2019-06-09 17:54:53\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n\n```\n\n如果需要修改数据表的名称，可以在 alter table 语句中使用 rename 子句来实现。\n\n尝试以下实例将数据表 student 重命名为 students：\n\n```bash\nmysql> alter table student rename to students;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show tables;\n+-------------------+\n| Tables_in_my_data |\n+-------------------+\n| students          |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n### 20. 临时表\n\nMySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。\n\n如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。\n\n#### 创建临时表\n\n使用temporary关键字创建临时表\n\n```bash\nmysql> create temporary table class_room(room_id int unsigned primary key, class varchar(20) ) default charset=utf8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into class_room values(205,\"九年级一班\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from class_room;\n+---------+-----------------+\n| room_id | class           |\n+---------+-----------------+\n|     205 | 九年级一班      |\n+---------+-----------------+\n1 row in set (0.00 sec)\n\nmysql> desc class_room;\n+---------+------------------+------+-----+---------+-------+\n| Field   | Type             | Null | Key | Default | Extra |\n+---------+------------------+------+-----+---------+-------+\n| room_id | int(10) unsigned | NO   | PRI | NULL    |       |\n| class   | varchar(20)      | YES  |     | NULL    |       |\n+---------+------------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n\nmysql> show tables;\n+-------------------+\n| Tables_in_my_data |\n+-------------------+\n| students          |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n当你使用 show tables命令显示数据表列表时，你将无法看到 class_room表。\n\n如果你退出当前mysql会话，再使用 select命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。\n\n#### 删除临时表\n\n默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。\n\n以下是手动删除临时表的实例：\n\n```bash\nmysql> drop table class_room;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from class_room;\nERROR 1146 (42S02): Table 'my_data.class_room' doesn't exist\n\n```\n\n### 21. 复制表\n\n如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用create table ... select 命令，是无法实现的。\n\n**实例**\n尝试以下实例来复制表 runoob_tbl 。\n\n步骤一：\n\n获取数据表的完整结构。\n\n```bash\nmysql> show create table students\\G;\n*************************** 1. row ***************************\n       Table: students\nCreate Table: CREATE TABLE `students` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) NOT NULL,\n  `class_room` varchar(20) DEFAULT '205',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR:\nNo query specified\n\n```\n\n步骤二：\n\n修改SQL语句的数据表名，并执行SQL语句。\n\n```bash\nmysql> create table `student` (`id` int(10) unsigned not null auto_increment,`name` varchar(10) not null,`class_room` varchar(20) default '205', primary key (`id`)) engine=innodb auto_increment=9 default charset=utf8;\nQuery OK, 0 rows affected (0.59 sec)\n\n```\n\n步骤三：\n\n执行完第二步骤后，你将在数据库中创建新的克隆表 student。 如果你想拷贝数据表的数据你可以使用 insert into... select 语句来实现。\n\n```bash\nmysql> insert into student(id,name,class_room) select * from students;\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------------+\n| id | name   | class_room |\n+----+--------+------------+\n|  1 | 李华   | 205        |\n|  2 | 敏柔   | 205        |\n|  3 | 赵强   | 205        |\n|  4 | 罗晴   | 205        |\n|  5 | 李磊   | 205        |\n|  6 | 寒梅   | 205        |\n|  7 | 张雷   | 205        |\n|  8 | 莉莉   | 205        |\n+----+--------+------------+\n8 rows in set (0.00 sec)\n\n```\n\n### 22. 处理重复数据\n\n有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。\n\n#### 防止表中出现重复数据\n\n你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。\n\n如果你想设置表中字段 id，name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：\n\n```bash\nmysql> create table teachers(id int unsigned auto_increment, name varchar(10), gender varchar(5), primary key(id,name));\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> desc teachers;\n+--------+------------------+------+-----+---------+----------------+\n| Field  | Type             | Null | Key | Default | Extra          |\n+--------+------------------+------+-----+---------+----------------+\n| id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name   | varchar(10)      | NO   | PRI | NULL    |                |\n| gender | varchar(5)       | YES  |     | NULL    |                |\n+--------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n```\n\n如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。\n\ninsert ignore into 与 insert into 的区别就是 insert ignore 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。\n\n```bash\nmysql> insert into teachers values(1, \"李磊\", \"男\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into teachers values(1, \"李磊\", \"男\");\nERROR 1062 (23000): Duplicate entry '1-李磊' for key 'PRIMARY'\n\nmysql> insert ignore into teachers values(1, \"李磊\", \"男\");\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n```\n\nINSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。\n\n```bash\nmysql> replace into teachers values(1, \"李磊\", \"女\");\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from teachers;\n+----+--------+--------+\n| id | name   | gender |\n+----+--------+--------+\n|  1 | 李磊   | 女     |\n+----+--------+--------+\n1 row in set (0.00 sec)\n\n```\n\n另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：\n\n```bash\nmysql> create table person(first_name char(20) not null, last_name char(20) not null, gender char(10),unique (last_name, first_name)) charset=utf8;\nQuery OK, 0 rows affected (0.25 sec)\n\nmysql> insert ignore into person values(\"李\", \"雷\", \"男\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person values(\"李\", \"雷\", \"男\");\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert ignore into person values(\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from person;\n+------------+-----------+--------+\n| first_name | last_name | gender |\n+------------+-----------+--------+\n| 李         | 丽        | 女     |\n| 李         | 雷        | 男     |\n+------------+-----------+--------+\n2 rows in set (0.00 sec)\n\n```\n\n#### 统计重复数据\n\n以下我们将统计表中 first_name 和 last_name的重复记录数：\n\n- 创建person_info表，并插入3条重复数据\n\n```bash\nmysql> create table person_info(id int unsigned primary key auto_increment,first_name char(20) not null, last_name char(20) not null, gender char(10)) charset=utf8;\nQuery OK, 0 rows affected (0.29 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from person_info;\n+----+------------+-----------+--------+\n| id | first_name | last_name | gender |\n+----+------------+-----------+--------+\n|  1 | 李         | 丽        | 女     |\n|  2 | 李         | 丽        | 女     |\n|  3 | 李         | 丽        | 女     |\n+----+------------+-----------+--------+\n3 rows in set (0.00 sec)\n```\n\n- 查询重复数据\n\n```bash\nmysql> select count(*) as repetitions,last_name,first_name from person_info group by last_name, first_name having repetitions > 1;\n+-------------+-----------+------------+\n| repetitions | last_name | first_name |\n+-------------+-----------+------------+\n|           3 | 丽        | 李         |\n+-------------+-----------+------------+\n1 row in set (0.00 sec)\n\n```\n\n以上查询将返回 person_info 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：\n\n- 确定哪一列包含的值可能会重复。\n- 在列选择列表使用count(*)列出的那些列。\n- 在group by子句中列出的列。\n- having子句设置重复数大于1。\n\n#### 过滤重复数据\n\n如果你需要读取不重复的数据可以在 select 语句中使用 distinct 关键字来过滤重复数据。\n\n```bash\nmysql> select distinct first_name,last_name from person_info;\n+------------+-----------+\n| first_name | last_name |\n+------------+-----------+\n| 李         | 丽        |\n+------------+-----------+\n1 row in set (0.00 sec)\n\n```\n\n你也可以使用 group by 来读取数据表中不重复的数据：\n\n```bash\nmysql> select first_name, last_name  from person_info group by last_name, first_name;\n+------------+-----------+\n| first_name | last_name |\n+------------+-----------+\n| 李         | 丽        |\n+------------+-----------+\n1 row in set (0.01 sec)\n\n```\n\n#### 删除重复数据\n\n如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：\n\n##### 方法一\n\n先创建临时表tab,新表tab中的数据时从person_info表中分组查询出来的\n\n```bash\nmysql> create table tmp select last_name, first_name, gender from person_info  group by last_name, first_name, gender;\nQuery OK, 1 row affected (0.01 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n```\n\n在表的第一位添加主键\n\n```bash\nalter table tmp add column `id` bigint(20) primary key not null auto_increment comment 'id' first;\n```\n\n删除原表\n\n```bash\nmysql> drop table person_info;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n重命名为person_info\n\n```bash\nmysql> alter table tmp rename to person_info;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n","source":"_posts/数据库-MySQL笔记.md","raw":"---\ntitle: 数据库笔记\ncategories:\n  - 技术\n  - 数据库\n  - mysql\ntags:\n  - SQL语句\ndate: 2019-05-27 21:23:45\n---\n\n学习数据库安装后，最重要的就是学习SQL语句。\n\n### 1. 数据语句操作类型\n\nSQL是操作数据库的核心，\n\n结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。\n\nSQL是最重要的关系数据库操作语言，并且它的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索等。\n\nSQL是关系模型的数据库应用语言，由IBM在20世纪70年代为其关系型数据库 System R 所开发。\n\nSQL 是1986年10 月由美国国家标准局（ANSI）通过的数据库语言美国标准，接着，国际标准化组织（ISO）颁布了SQL正式国际标准。1989年4月，ISO提出了具有完整性特征的SQL89标准，1992年11月又公布了SQL92标准。\n\n虽然各个数据库系统略有不同，但是他们基本均遵循SQL 92标准。或者在SQL 92上做了一些简单的扩展和变化。\n\n学好了MySQL 的SQL 语法，其他的SQL语法学习起来均是万变不离其中。\n\nSQL语句按照其功能范围不同可分为3个类别：\n\n1. **数据定义语言**(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。\n2. **数据操作语言**(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。\n3. **数据控制语言**(DCL， Data Control Language)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。\n\n### 2. 管理数据库命令\n\n#### 元数据\n\n以下命令语句可以在 MySQL 的命令提示符使用，获取服务器元数据\n\n命令| 描述\n:---:|:---\nselect version( ) | 服务器版本信息\nselect database( )|当前数据库名 (或者返回空)\nselect user( )|当前用户名\nshow status|服务器状态\nshow variables|服务器配置变量\n\n#### 创建数据库\n\n- create database 数据库名:\n  创建数据库\n\n```bash\nmysql> create database data_test;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n#### 删除数据库\n\n- drop database 数据库名:\n 删除数据库\n\n```bash\nmysql> drop database data_test;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 展示所有数据库\n\n- show databases:\n  列出 MySQL 数据库管理系统的数据库列表。\n\n```bash\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| data_test          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.01 sec)\n```\n\n#### 改变数据库\n\n- use 数据库名 :\n  选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n```bash\nmysql> use data_test;\nDatabase changed\n```\n\n#### 展示当前数据库中所有的表\n\n- show tables:\n显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n\n```bash\nmysql> show tables;\n+---------------------+\n| Tables_in_data_test |\n+---------------------+\n| customers           |\n| orderitems          |\n| orders              |\n| productnotes        |\n| products            |\n| vendors             |\n+---------------------+\n6 rows in set (0.00 sec)\n```\n\n#### 展示特定表中每列的信息\n\n- show columns from 数据表(desc 数据表):\n显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n\n```bash\nmysql> show columns from customers;\n+--------------+-----------+------+-----+---------+----------------+\n| Field        | Type      | Null | Key | Default | Extra          |\n+--------------+-----------+------+-----+---------+----------------+\n| cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |\n| cust_name    | char(50)  | NO   |     | NULL    |                |\n| cust_address | char(50)  | YES  |     | NULL    |                |\n| cust_city    | char(50)  | YES  |     | NULL    |                |\n| cust_state   | char(5)   | YES  |     | NULL    |                |\n| cust_zip     | char(10)  | YES  |     | NULL    |                |\n| cust_country | char(50)  | YES  |     | NULL    |                |\n| cust_contact | char(50)  | YES  |     | NULL    |                |\n| cust_email   | char(255) | YES  |     | NULL    |                |\n+--------------+-----------+------+-----+---------+----------------+\n9 rows in set (0.00 sec)\n```\n\n#### 展示数据表的详细索引信息\n\n- show index from 数据表:\n显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n\n```bash\nmysql> show index from customers;\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| customers |          0 | PRIMARY  |            1 | cust_id     | A         |           5 |  NULL    |   NULL |      | BTREE      |         |               | YES     | NULL       |\n+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n1 row in set (0.01 sec)\n\n```\n\n#### 展示数据库的性能及统计信息\n\n- show table status [from db_name] [like 'pattern'] \\G:\n  该命令将输出Mysql数据库管理系统的性能及统计信息。\n\n> 显示数据库 data_test 中所有表的信息\n\n```bash\nmysql> show table status from data_test;\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| Name         | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| customers    | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| orderitems   | InnoDB |      10 | Dynamic    |   11 |           1489 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |\n| orders       | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |        16384 |         0 |          20010 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| productnotes | MyISAM |      10 | Dynamic    |   14 |            135 |        1892 | 281474976710655 |         6144 |         0 |            115 | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |\n| products     | InnoDB |      10 | Dynamic    |   14 |           1170 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n| vendors      | InnoDB |      10 | Dynamic    |    6 |           2730 |       16384 |               0 |            0 |         0 |           1007 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n6 rows in set (0.02 sec)\n```\n\n> 表名以cus开头的表的信息\n\n```bash\nmysql> show table status from data_test like \"cus%\";\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| Name      | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n| customers | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |\n+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+\n1 row in set (0.00 sec)\n```\n\n> 表名以cus开头的表的信息;\n> 加上 \\G，查询结果按列打印;\\G后面不能再加分号;\n> 因为\\G在功能上等同于;\n> 如果加了分号，那么就是;;(2个分号)，SQL语法错误`ERROR:No query specified`\n\n```bash\nmysql> show table status from data_test like \"cus%\"\\G\n*************************** 1. row ***************************\n           Name: customers\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 5\n Avg_row_length: 3276\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: 10006\n    Create_time: 2019-05-26 10:15:02\n    Update_time: 2019-05-26 10:15:25\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n```\n\n### 3. 数据类型\n\n#### 数值类型\n\nmysql支持所有标准sql数值数据类型。\n\n这些类型包括严格数值数据类型（integer、smallint、decimal和numeric），以及近似数值数据类型（float、real和double precisi键字int是integer的同义词，关键字dec是decimal的同义词。\n\nbit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。\n\n作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。\n\n|          类型          |     大小     | 范围（有符号）                                                                                                                      | 范围（无符号）                                                    |         用途         |\n| :--------------------: | :----------: | :---------------------------------------------------------------------------------------------------------------------------------- | :---------------------------------------------------------------- | :------------------: |\n|      **tinyint**       |    1 字节    | (-128，127)                                                                                                                         | (0，255)                                                          |       小整数值       |\n|        smallint        |    2 字节    | (-32 768，32 767)                                                                                                                   | (0，65 535)                                                       |       大整数值       |\n|       mediumint        |    3 字节    | (-8 388 608，8 388 607)                                                                                                             | (0，16 777 215)                                                   |       大整数值       |\n| **int** 或 **integer** |    4 字节    | (-2 147 483 648，2 147 483 647)                                                                                                     | (0，4 294 967 295)                                                |       大整数值       |\n|         bigint         |    8 字节    | (-9,223,372,036,854,775,808，9 223 372 036 854 775 807)                                                                             | (0，18 446 744 073 709 551 615)                                   |      极大整数值      |\n|       **float**        |    4 字节    | (-3.402 823 466 e+38，-1.175 494 351 e-38)，0，(1.175 494 351 e-38，3.402 823 466 351 e+38)                                         | 0，(1.175 494 351 e-38，3.402 823 466 e+38)                       | 单精度<br/>浮点数值  |\n|       **double**       |    8 字节    | (-1.797 693 134 862 315 7 e+308，-2.225 073 858 507 201 4 e-308)，0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308) | 0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308) | 双精度<br/> 浮点数值 |\n|      **decimal**       | decimal(m,d) | 依赖于 m 和 d 的值                                                                                                                  | 依赖于 m 和 d 的值                                                |        小数值        |\n\n* * *\n\n#### 日期和时间类型\n\n表示时间值的日期和时间类型为 datetime、date、timestamp、time 和 year。\n\n每个时间类型有一个有效值范围和一个 \"零\" 值，当指定不合法的 mysql 不能表示的值时使用 \"零\" 值。\n\ntimestamp 类型有专有的自动更新特性，将在后面描述。\n\n|     类型      | 大小(字节) | 范围                                                                                                                                   |        格式         |           用途           |\n| :-----------: | :--------: | :------------------------------------------------------------------------------------------------------------------------------------- | :-----------------: | :----------------------: |\n|   **date**    |     3      | 1000-01-01/9999-12-31                                                                                                                  |     yyyy-mm-dd      |          日期值          |\n|   **time**    |     3      | '-838:59:59'/'838:59:59'                                                                                                               |      hh:mm:ss       |     时间值或持续时间     |\n|     year      |     1      | 1901/2155                                                                                                                              |        yyyy         |          年份值          |\n| **datetime**  |     8      | 1000-01-01 00:00:00/9999-12-31 23:59:59                                                                                                | yyyy-mm-dd hh:mm:ss |     混合日期和时间值     |\n| **timestamp** |     4      | 1970-01-01 00:00:00/2038<br/>结束时间是第 **2147483647** 秒<br/>北京时间 **2038-1-19 11:14:07**<br/>格林尼治时间**2038-1-19 03:14:07** |   yyyymmdd hhmmss   | 混合日期和时间值，时间戳 |\n\n* * *\n\n#### 字符串类型\n\n字符串类型指 char、varchar、binary、varbinary、blob、text、enum 和 set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。\n\n| 类型        | 大小                 | 用途                            |\n| :---------- | :------------------- | :------------------------------ |\n| **char**    | 0-255 字节           | 定长字符串                      |\n| **varchar** | 0-65535 字节         | 变长字符串                      |\n| tinyblob    | 0-255 字节           | 不超过 255 个字符的二进制字符串 |\n| tinytext    | 0-255 字节           | 短文本字符串                    |\n| **blob**    | 0-65 535 字节        | 二进制形式的长文本数据          |\n| **text**    | 0-65 535 字节        | 长文本数据                      |\n| mediumblob  | 0-16 777 215 字节    | 二进制形式的中等长度文本数据    |\n| mediumtext  | 0-16 777 215 字节    | 中等长度文本数据                |\n| longblob    | 0-4 294 967 295 字节 | 二进制形式的极大文本数据        |\n| longtext    | 0-4 294 967 295 字节 | 极大文本数据                    |\n\nchar 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。\n\nbinary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。\n\nblob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。\n\n有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。\n\n> 注意：\n\n1、一个汉字占多少长度与编码有关：\n\nUTF－8：一个汉字＝3个字节\n\nGBK：一个汉字＝2个字节\n\n2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别\n\n3、MySQL 检查长度，可用 SQL 语言来查看：\n\n```bash\nselect length(fieldname) from table_name\n```\n\n### 4. 创建数据表\n\n创建MySQL数据表需要以下信息：\n\n- 表名\n- 表字段名\n- 定义每个表字段\n\n**语法**\n以下为创建MySQL数据表的SQL通用语法：\n\n```bash\ncreate table table_name (column_name column_type);\n```\n\n**实例**\n以下例子中我们将在 my_data 数据库中创建数据表students：\n\n```bash\nmysql> create table if not exists students(id int unsigned auto_increment, name varchar(40) not null, adress varchar(100) , birthday date not null, primary key(id)) engine=innodb default charset=utf8mb4;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> show columns from students;\n+----------+------------------+------+-----+---------+----------------+\n| Field    | Type             | Null | Key | Default | Extra          |\n+----------+------------------+------+-----+---------+----------------+\n| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(40)      | NO   |     | NULL    |                |\n| adress   | varchar(100)     | YES  |     | NULL    |                |\n| birthday | date             | NO   |     | NULL    |                |\n+----------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n```\n\n实例解析：\n\n- 如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为null ，就会报错。\n- auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。\n- primary key关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。\n- engine 设置存储引擎，charset 设置编码。\n\n### 5. 删除数据表\n\nMySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。\n\n**语法**\n以下为删除MySQL数据表的通用语法：\n\n```bash\ndrop table table_name;\n```\n\n**实例**\n以下实例中我们将删除 students 表:\n\n```bash\nmysql> drop table students;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\nEmpty set (0.00 sec)\n```\n\n### 6. 插入数据\n\nMySQL 表中使用 insert into SQL语句来插入数据。\n\n**语法**\n以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法：\n\n```bash\ninsert into table_name ( field1, field2,...fieldN ) values ( value1, value2,...valueN );\n```\n\ninsert 插入多条数据\n\n```bash\ninsert into table_name  (field1, field2,...fieldn)  values  (valuea1,valuea2,...valuean),(valueb1,valueb2,...valuebn),(valuec1,valuec2,...valuecn)......;\n```\n\n如果数据是字符型，必须使用单引号或者双引号，如：\"value\"。\n\n**实例**\n以下实例中我们将向 students 表插入数据:\n\n```bash\n# 主键默认从1开始\nmysql> insert into students (name,birthday) values(\"丽丽\",\"1996-05-06\");\nQuery OK, 1 row affected (0.00 sec)\n\n# 主键设为0，即从最后一个id值自动增长\nmysql> insert into students values(0,\"李明\",null,\"1993-12-16\");\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> insert into students values(10,\"张磊\",'北京市海淀区',\"1995-04-12\");\nQuery OK, 1 row affected (0.00 sec)\n\n# 主键不设置，从最后一个id值自动增长\nmysql> insert into students set name=\"孙雨\",adress='河北省石家庄市',birthday=\"1989-07-18\";\nQuery OK, 1 row affected (0.01 sec)\n\n```\n\n> 如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为0或者null，这样添加数据可以自增\n\n### 7. 条件语句\n\n- 查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用where语句来设定查询条件。\n- where 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。\n- 以下为操作符列表，可用于 where 子句中。\n- 你可以在 WHERE 子句中指定任何条件。\n- 你可以使用 and 或者 or 指定一个或多个条件。\n- WHERE 子句也可以运用于 SQL 的 delete 或者 update 命令。\n\n> 下表中实例假定 A 为 10, B 为 20\n\n| 操作符 | 描述                                                                                     | 实例                 |\n| :----: | :--------------------------------------------------------------------------------------- | :------------------- |\n|   =    | 等号，检测两个值是否相等，如果相等返回true                                               | (A = B) 返回false。  |\n|   !=   | 不等于，检测两个值是否相等，如果不相等返回true                                           | (A != B) 返回 true。 |\n|   >    | 大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true                   | (A > B) 返回false。  |\n|   <    | 小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true                   | (A < B) 返回 true。  |\n|   >=   | 大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true   | (A >= B) 返回false。 |\n|   <=   | 小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true | (A <= B) 返回 true。 |\n\n\n如果我们想在 MySQL 数据表中读取指定的数据，where 子句是非常有用的。\n\n使用主键来作为 where 子句的条件查询是非常快速的。\n\n如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。\n\n### 8. 查询数据\n\nMySQL 数据库使用SQL select语句来查询数据。\n\n**语法**\n以下为在MySQL数据库中查询数据通用的 select 语法\n\n```bash\nselect column_name,column_name\nfrom table_name\n[where Clause]\n[limit N][ offset M]\n```\n\n- 查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用where语句来设定查询条件。\n- select 命令可以读取一条或者多条记录。\n- 你可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据\n- 你可以使用 limit 属性来设定返回的记录数。\n- 你可以通过offset指定select语句开始查询的数据偏移量。默认情况下偏移量为0。\n\n**实例**\n以下实例我们将通过 SQL select 命令来获取 MySQL 数据表 students 的数据：\n\n```bash\nmysql> select * from students;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n|  1 | 丽丽 | NULL           | 1996-05-06 |\n|  2 | 李明 | NULL           | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区    | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市  | 1989-07-18 |\n+----+------+----------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name from students limit 2 offset 1;\n+----+------+\n| id | name |\n+----+------+\n|  2 | 李明 |\n| 10 | 张磊 |\n+----+------+\n2 rows in set (0.00 sec)\n\nmysql> select * from students where id>=10;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n2 rows in set (0.00 sec)\n\nmysql> select * from students where id>=10 limit 1 offset 1;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n1 row in set (0.00 sec)\n\nmysql> select * from students where name=\"李明\";\n+----+------+--------+------------+\n| id | name | adress | birthday   |\n+----+------+--------+------------+\n|  2 | 李明 | NULL   | 1993-12-16 |\n+----+------+--------+------------+\n1 row in set (0.00 sec)\n```\n\n### 9. 修改数据\n\n如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL update 命令来操作。\n\n**语法**\n以下是 update 命令修改 MySQL 数据表数据的通用 SQL 语法：\n\n```bash\nupdate table_name set field1=new-value1, field2=new-value2 [where clause]\n```\n\n当我们需要将字段中的特定字符串批量修改为其他字符串时，可已使用以下操作：\n\n```bash\nupdate table_name set field=replace(field, 'old-string', 'new-string') [where clause]\n```\n\n- 你可以同时更新一个或多个字段。\n- 你可以在 WHERE 子句中指定任何条件。\n- 你可以在一个单独表中同时更新数据。\n当你需要更新数据表中指定行的数据时 where 子句是非常有用的。\n\n**实例**\n以下我们将在 SQL update 命令使用 where 子句来更新 students 表中指定的数据：\n\n```bash\nmysql> update students set adress=\"北京市昌平区\" where adress is null;\nQuery OK, 2 rows affected (0.01 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n\nmysql> select * from students;\n+----+------+----------------+------------+\n| id | name | adress         | birthday   |\n+----+------+----------------+------------+\n|  1 | 丽丽 | 北京市昌平区   | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区   | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |\n| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |\n+----+------+----------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> update students set adress=replace(adress, \"河北省石家庄\",\"湖北省武汉\") wh\nere id=11;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n| 10 | 张磊 | 北京市海淀区 | 1995-04-12 |\n| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |\n+----+------+--------------+------------+\n4 rows in set (0.00 sec)\n\nmysql> update students set id=id-7 where id=10;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |\n+----+------+--------------+------------+\n4 rows in set (0.00 sec)\n```\n\n### 10. 删除数据\n\n你可以使用 sql 的 delete from 命令来删除 mysql 数据表中的记录。\n\n**语法**\n以下是 sql delete 语句从 mysql 数据表中删除数据的通用语法：\n\n```bash\ndelete from table_name [where clause]\n```\n\n- 如果没有指定 where 子句，mysql 表中的所有记录将被删除。\n- 你可以在 where 子句中指定任何条件\n- 您可以在单个表中一次性删除记录。\n当你想删除数据表中指定的记录时 where 子句是非常有用的。\n\n**实例**\n这里我们将在 sql delete 命令中使用 where 子句来删除 mysql 数据表 students 所选的数据:\n\n```bash\nmysql> delete from students where id=11;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n> delete，drop，truncate 都有删除表的作用，区别在于：\n\n1、drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;\n\n实例，删除学生表：\n\n```bash\ndrop table students;\n```\n\n2、truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;\n\n实例，删除学生表：\n\n```bash\ntruncate table students;\n```\n\n3、delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;\n\n实例，删除学生表：\n\n```bash\ndelete from students;\n```\n\n4、delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;\n\n实例，删除学生表中姓名为 \"张三\" 的数据：\n\n```bash\ndelete from student where name = \"张三\";\n```\n\n5、delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;\n\n实例，删除学生表中姓名为 \"张三\" 的数据：\n\n```bash\ndelete from student where name = \"张三\";\n```\n\n实例，释放学生表的表空间：\n\n```bash\noptimize table students;\n```\n\n6、delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。\n\n### 11. 包含条件\n\n我们知道在 mysql 中使用 sql select 命令来读取数据， 同时我们可以在 select 语句中使用 where 子句来获取指定的记录。\n\nwhere 子句中可以使用等号 = 来设定获取数据的条件，如 \"adress = '北京市昌平区'\"。\n\n但是有时候我们需要获取 adress 字段含有 \"北京市\" 字符的所有记录，这时我们就需要在 where 子句中使用 sql like 子句。\n\n**语法**\n以下是 sql select 语句使用 like 子句从数据表中读取数据的通用语法：\n\n```bash\nselect field1, field2,...fieldn from table_name where field1 like condition1 [and [or]] filed2 = 'somevalue'\n```\n\n- sql like 子句中使用百分号 %字符来表示任意字符，类似于unix或正则表达式中的星号 *。\n- 如果没有使用百分号 %, like 子句与等号 = 的效果是一样的。\n- like 通常与 % 一同使用，类似于一个元字符的搜索。\n- 可以使用 and 或者 or 指定一个或多个条件。\n- 可以在 delete、select或 update 命令中使用 where...like 子句来指定条件。\n\n**实例**\n以下我们将在 sql select 命令中使用 where...like 子句来从mysql数据表 students 中读取数据。\n\n```bash\nmysql> select * from students where adress like \"北京市%\";\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n> 在 where like 的条件查询中，SQL 提供了四种匹配方式。\n\n- `%`：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。\n- `_`：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。\n- `[]`：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。\n- `[^]`：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。\n- 查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。\n\n> like 匹配/模糊匹配，会与 % 和 _ 结合使用。\n\n```bash\n'%a'     //以a结尾的数据\n'a%'     //以a开头的数据\n'%a%'    //含有a的数据\n'_a_'    //三位且中间字母是a的\n'_a'     //两位且结尾字母是a的\n'a_'     //两位且开头字母是a的\n```\n\n### 12. 关联查询\n\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\n\n**语法**\nmysql union 操作符语法格式：\n\n```bash\nselect expression1, expression2, ... expression_n\nfrom tables\n[where conditions]\nunion [all | distinct]\nselect expression1, expression2, ... expression_n\nfrom tables\n[where conditions];\n```\n\n**参数**\n\n- expression1, expression2, ... expression_n: 要检索的列。\n\n- tables: 要检索的数据表。\n\n- where conditions: 可选， 检索条件。\n\n- distinct: 可选，删除结果集中重复的数据。默认情况下 union 操作符已经删除了重复数据，所以 distinct 修饰符对结果没啥影响。\n\n- all: 可选，返回所有结果集，包含重复数据。\n\n**实例**\n下面的 SQL 语句从 \"students\" 和 \"teachers\" 表中选取所有不同的adress（只有不同的值）：\n\n```bash\nmysql> select * from students;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from teachers;\n+----+--------+--------------+----------+\n| id | name   | adress       | birthday |\n+----+--------+--------------+----------+\n|  1 | 刘老师 | 北京市海淀区 | NULL     |\n|  2 | 孙老师 | 北京市朝阳区 | NULL     |\n|  3 | 常老师 | 北京市昌平区 | NULL     |\n+----+--------+--------------+----------+\n3 rows in set (0.00 sec)\n\nmysql> select adress from students union select adress from teachers ;\n+--------------+\n| adress       |\n+--------------+\n| 北京市昌平区 |\n| 北京市海淀区 |\n| 北京市朝阳区 |\n+--------------+\n3 rows in set (0.00 sec)\n\nmysql> select name from students where adress like \"%昌平区\" union select name from teachers where adress like \"%昌平区\" ;\n+--------+\n| name   |\n+--------+\n| 丽丽   |\n| 李明   |\n| 常老师 |\n+--------+\n3 rows in set (0.00 sec)\n```\n\n> UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）\n> UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）\n\n### 13. 排序\n\n我们知道从 mysql 表中使用 sql select 语句来读取数据。\n\n如果我们需要对读取的数据进行排序，我们就可以使用 mysql 的 order by 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。\n\n**语法**\n以下是 sql select 语句使用 order by 子句将查询数据排序后再返回数据：\n\n```bash\nselect field1, field2,...fieldn table_name1, table_name2... order by field1 [asc [desc][默认 asc]], [field2...] [asc [desc][默认 asc]]\n```\n\n- 你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。\n- 你可以设定多个字段来排序。\n- 你可以使用 asc 或 desc 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。\n- 你可以添加 where...like 子句来设置条件。\n\n**实例**\n尝试以下实例，结果将按升序及降序排列。\n\n```bash\nmysql> select * from students where adress like \"北京市%\" order by birthday;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from students where adress like \"北京市%\" order by birthday desc;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from students where adress like \"北京市%\" order by birthday asc;\n+----+------+--------------+------------+\n| id | name | adress       | birthday   |\n+----+------+--------------+------------+\n|  2 | 李明 | 北京市昌平区 | 1993-12-16 |\n|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |\n|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |\n+----+------+--------------+------------+\n3 rows in set (0.00 sec)\n```\n\n### 14. 分组\n\ngroup by 语句根据一个或多个列对结果集进行分组。\n在分组的列上我们可以使用 count, sum, avg等函数。\n\n**语法**\n以下是gruop by语句的语法示例：\n\n```bash\nselect column_name, function(column_name) from table_name where column_name operator value group by column_name;\n```\n\n**实例**\n接下来我们使用 group by 语句 将数据表按名字进行分组，并统计每个商品有多少条记录：\n\n```bash\nmysql> select * from goods;\n+----+--------+------+\n| id | name   | nums |\n+----+--------+------+\n|  1 | 西瓜   |   50 |\n|  2 | 甜瓜   |   15 |\n|  3 | 甜瓜   |   15 |\n|  4 | 苹果   |   25 |\n|  5 | 西瓜   |   25 |\n|  6 | 西瓜   |   63 |\n+----+--------+------+\n6 rows in set (0.00 sec)\n\nmysql> select name, count(name) from goods group by name;\n+--------+-------------+\n| name   | count(name) |\n+--------+-------------+\n| 甜瓜   |           2 |\n| 苹果   |           1 |\n| 西瓜   |           3 |\n+--------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\nwith rollup 可以实现在分组统计数据基础上再进行相同的统计（sum,avg,count…）。\n\n例如我们将以上的数据表按商品名称进行分组，再统计每类商品的总数量，或者求其均值：\n\n```bash\nmysql> select name, sum(nums) as count_num from goods group by name;\n+--------+-----------+\n| name   | count_num |\n+--------+-----------+\n| 甜瓜   |        30 |\n| 苹果   |        25 |\n| 西瓜   |       138 |\n+--------+-----------+\n3 rows in set (0.00 sec)\n\nmysql> select name, avg(nums) as avg_num from goods group by name with rollup;\n+--------+---------+\n| name   | avg_num |\n+--------+---------+\n| 甜瓜   | 15.0000 |\n| 苹果   | 25.0000 |\n| 西瓜   | 46.0000 |\n| NULL   | 32.1667 |\n+--------+---------+\n4 rows in set (0.00 sec)\n\n```\n\n我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：\n\n```bash\nselect coalesce(a,b,c);\n```\n\n参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。\n\n以下实例中如果名字为空我们使用总数代替：\n\n```bash\nmysql> select coalesce(name, '总计') as 名称, sum(nums) as 数量 from goods group by name with rollup;\n+--------+--------+\n| 名称   | 数量   |\n+--------+--------+\n| 甜瓜   |     30 |\n| 苹果   |     25 |\n| 西瓜   |    138 |\n| 总计   |    193 |\n+--------+--------+\n4 rows in set (0.00 sec)\n\n```\n\n### 15. 连接\n\n在前面的章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。\n\n本章节我们将向大家介绍如何使用 mysql 的 join 在两个或多个表中查询数据。\n\n你可以在 select, update 和 delete 语句中使用 mysql 的 join 来联合多表查询。\n\njoin 按照功能大致分为如下三类：\n\n- inner join（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n- left join（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n- right join（右连接）： 与 left join 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n**实例**\n首先创建表，并添加测试数据\n\n```bash\nmysql> create table web_counts(id int unsigned auto_increment primary key, web_name varchar(20) not null, nums int unsigned default 0) default charset=utf8;\nQuery OK, 0 rows affected (0.10 sec)\n\nmysql> create table web_info(id int unsigned auto_increment primary key, web_name varchar(20) not null, web_info varchar(50), create_time date not null) default charset=utf8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> desc web_info;\n+-------------+------------------+------+-----+---------+----------------+\n| Field       | Type             | Null | Key | Default | Extra          |\n+-------------+------------------+------+-----+---------+----------------+\n| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| web_name    | varchar(20)      | NO   |     | NULL    |                |\n| web_info    | varchar(50)      | YES  |     | NULL    |                |\n| create_time | date             | NO   |     | NULL    |                |\n+-------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql> desc web_counts;\n+----------+------------------+------+-----+---------+----------------+\n| Field    | Type             | Null | Key | Default | Extra          |\n+----------+------------------+------+-----+---------+----------------+\n| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| web_name | varchar(20)      | NO   |     | NULL    |                |\n| nums     | int(10) unsigned | YES  |     | 0       |                |\n+----------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> insert into web_counts values(0, \" 淘宝\",1000);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> insert into web_counts values(0, \"百度\", 3000);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_counts values(0, \"腾讯\", 2000);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_counts values(0, \"网易\", 900);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from web_counts;\n+----+----------+------+\n| id | web_name | nums |\n+----+----------+------+\n|  1 | 淘宝     | 1000 |\n|  2 | 百度     | 3000 |\n|  3 | 腾讯     | 2000 |\n|  4 | 网易     |  900 |\n+----+----------+------+\n4 rows in set (0.00 sec)\n\nmysql> insert into web_info values(0, \"百度\", \"搜索网站\",\"1989-9-01\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"腾讯\", \"社交网站\",\"1991-02-05\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"网易\", \"门户网站\",\"1990-08-09\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into web_info values(0, \"新浪\", \"社交网站\",\"1993-05-12\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from web_info;\n+----+----------+--------------+-------------+\n| id | web_name | web_info     | create_time |\n+----+----------+--------------+-------------+\n|  1 | 百度     | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 社交网站     | 1991-02-05  |\n|  3 | 网易     | 门户网站     | 1990-08-09  |\n|  4 | 新浪     | 社交网站     | 1993-05-12  |\n+----+----------+--------------+-------------+\n4 rows in set (0.01 sec)\n\n```\n\n接下来我们就使用mysql的inner join(也可以省略 inner 使用 join，效果一样)来连接以上两张表来读取web_counts表中所有web_name字段在web_info表对应的字段值：\n\n```bash\nmysql> select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a inner join web_info b on a.web_name=b.web_name;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\n以上 SQL 语句等价于：\n\n```bash\nmysql> select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a, web_info b where a.web_name=b.web_name;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n3 rows in set (0.00 sec)\n\n```\n\nmysql left join 与 join 有所不同。 mysql left join 会读取左边数据表的全部数据，即便右边表无对应数据。\n\n```bash\nmysql> select a.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a left join web_info b on a.web_name=b.web_name order by a.id;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 淘宝     | 1000 | NULL         | NULL        |\n|  2 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  3 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  4 | 网易     |  900 | 门户网站     | 1990-08-09  |\n+----+----------+------+--------------+-------------+\n4 rows in set (0.00 sec)\n\n```\n\nmysql right join 会读取右边数据表的全部数据，即便左边边表无对应数据。\n\n```bash\nmysql> select b.id, b.web_name, a.nums,b.web_info, b.create_time from web_counts a right join web_info b on a.web_name=b.web_name order by b.id;\n+----+----------+------+--------------+-------------+\n| id | web_name | nums | web_info     | create_time |\n+----+----------+------+--------------+-------------+\n|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |\n|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |\n|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |\n|  4 | 新浪     | NULL | 社交网站     | 1993-05-12  |\n+----+----------+------+--------------+-------------+\n4 rows in set (0.01 sec)\n\n```\n\n### 16. 正则表达式\n\nmysql 正则表达式\n在前面的章节我们已经了解到mysql可以通过 `like ...%` 来进行模糊匹配。\n\nmysql 同样也支持其他正则表达式的匹配， mysql中使用 regexp 操作符来进行正则表达式匹配。\n\n下表中的正则模式可应用于 `regexp` 操作符中。\n\n模式| 描述\n :---: | :---\n `^`     | 匹配输入字符串的开始位置。如果设置了 regexp 对象的 multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。\n`$`     | 匹配输入字符串的结束位置。如果设置了regexp 对象的 multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。\n `.`     | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用象 '[.\\n]' 的模式。\n`[...]`   | 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。\n`[^...]`  | 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'。\n`p1|p2`| 匹配 p1 或 p2。例如，`z|food` 能匹配 \"z\" 或 \"food\"。`(z | f)ood` 则匹配 \"zood\" 或 \"food\"。\n`*`     | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。\n`+`     | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。\n`{n}`    | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。\n`{n,m}`   | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。\n\n**实例**\n了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的sql语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：\n\n- 查找name字段中以'st'为开头的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp '^st';\n```\n\n- 查找name字段中以'ok'为结尾的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp 'ok$';\n```\n\n- 查找name字段中包含'mar'字符串的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp 'mar';\n```\n\n- 查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\n\n```bash\nmysql> select name from person_tbl where name regexp '^[aeiou]|ok$';\n```\n\n### 17. NULL 值处理\n\n为了处理这种情况，mysql提供了三大运算符:\n\n- is null: 当列的值是 null,此运算符返回 true。\n- is not null: 当列的值不为 null, 运算符返回 true。\n- <=>: 比较操作符（不同于=运算符），当比较的的两个值为 null 时返回 true。\n\n> 关于 null 的条件比较运算是比较特殊的。你不能使用 = null 或 != null 在列中查找 null 值 。\n\n> 在 mysql 中，null 值与任何其它值的比较（即使是 null）永远返回 false，即 null = null 返回false 。\n\nmysql 中处理 null 使用 is null 和 is not null 运算符。\n\n**实例**\n在数据库my_data中创建student表，并插入相应数据\n\n```bash\nmysql> create table student(ID int unsigned auto_increment primary key,name varchar(10) not null,age int unsigned) default charset=utf8;\nQuery OK, 0 rows affected (0.25 sec)\n\nmysql> insert into student values(0, \"李华\",25);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"敏柔\",null);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"赵强\",null);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0, \"罗晴\",23);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\n```\n\n以下实例中你可以看到 = 和 != 运算符是不起作用的：\n\n```bash\nmysql> select id,name,age=null from student;\n+----+--------+----------+\n| id | name   | age=null |\n+----+--------+----------+\n|  1 | 李华   |     NULL |\n|  2 | 敏柔   |     NULL |\n|  3 | 赵强   |     NULL |\n|  4 | 罗晴   |     NULL |\n+----+--------+----------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name,age!=null from student;\n+----+--------+-----------+\n| id | name   | age!=null |\n+----+--------+-----------+\n|  1 | 李华   |      NULL |\n|  2 | 敏柔   |      NULL |\n|  3 | 赵强   |      NULL |\n|  4 | 罗晴   |      NULL |\n+----+--------+-----------+\n4 rows in set (0.00 sec)\n```\n\n查找数据表中 age 列是否为 null，必须使用 <=> 、is null 和 is not null，如下实例：\n\n```bash\nmysql> select id,name,age is null from student;\n+----+--------+-------------+\n| id | name   | age is null |\n+----+--------+-------------+\n|  1 | 李华   |           0 |\n|  2 | 敏柔   |           1 |\n|  3 | 赵强   |           1 |\n|  4 | 罗晴   |           0 |\n+----+--------+-------------+\n4 rows in set (0.00 sec)\n\nmysql> select id,name,age<=>null from student;\n+----+--------+------------+\n| id | name   | age<=>null |\n+----+--------+------------+\n|  1 | 李华   |          0 |\n|  2 | 敏柔   |          1 |\n|  3 | 赵强   |          1 |\n|  4 | 罗晴   |          0 |\n+----+--------+------------+\n4 rows in set (0.00 sec)\n\n```\n\n### 18.事务\n\nmysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！\n\n- 在 mysql 中只有使用了 innodb 数据库引擎的数据库或表才支持事务。\n- 事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么全部执行，要么全部不执行。\n- 事务用来管理 insert,update,delete 语句\n\n一般来说，事务是必须满足4个条件（acid）：：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。\n\n- **原子性**：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\n\n- **一致性**：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。\n\n- **隔离性**：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。\n\n- **持久性**：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n> 在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。\n\n#### 事务控制语句：\n\n- begin 或 start transaction 显式地开启一个事务；\n\n- commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；\n\n- rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；\n\n- savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；\n\n- release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；\n\n- rollback to identifier 把事务回滚到标记点；\n\n- set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。\n\n#### mysql 事务处理主要有两种方法：\n\n1、用 begin, rollback, commit来实现\n\n- begin 开始一个事务\n- rollback 事务回滚\n- commit 事务确认\n\n2、直接用 set 来改变 mysql 的自动提交模式:\n\n- set autocommit=0 禁止自动提交\n- set autocommit=1 开启自动提交\n\n**实例**\n下面具体演示MySQL事务的使用\n\n```bash\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\nmysql> begin; # 开启事务\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into student values(0,\"寒梅\",28); # 插入数据\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 寒梅   |   28 |\n+----+--------+------+\n5 rows in set (0.00 sec)\n\nmysql> rollback; # 回滚\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n+----+--------+------+\n4 rows in set (0.00 sec)\n\nmysql> insert into student values(0,\"寒梅\",28); # 插入数据\nQuery OK, 1 row affected (0.15 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  6 | 寒梅   |   28 |\n+----+--------+------+\n5 rows in set (0.00 sec)\n\nmysql> insert into student values(5,\"李磊\",26);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> insert into student values(0,\"张雷\",20);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> set autocommit=0; # 禁止自动提交\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into student values(0,\"韩美美\",20);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+-----------+------+\n| ID | name      | age  |\n+----+-----------+------+\n|  1 | 李华      |   25 |\n|  2 | 敏柔      | NULL |\n|  3 | 赵强      | NULL |\n|  4 | 罗晴      |   23 |\n|  5 | 李磊      |   26 |\n|  6 | 寒梅      |   28 |\n|  7 | 张雷      |   20 |\n|  8 | 莉莉      |   20 |\n|  9 | 韩美美    |   20 |\n+----+-----------+------+\n9 rows in set (0.00 sec)\n\nmysql> rollback; # 回滚\nQuery OK, 0 rows affected (0.16 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   | NULL |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> update student set age=23 where name=\"敏柔\"; # 修改数据\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> savepoint point1; # 创建保存点\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> update student set age=22 where name=\"赵强\";\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   |   22 |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> rollback to point1; # 回滚到保存点\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------+------+\n| ID | name   | age  |\n+----+--------+------+\n|  1 | 李华   |   25 |\n|  2 | 敏柔   |   23 |\n|  3 | 赵强   | NULL |\n|  4 | 罗晴   |   23 |\n|  5 | 李磊   |   26 |\n|  6 | 寒梅   |   28 |\n|  7 | 张雷   |   20 |\n|  8 | 莉莉   |   20 |\n+----+--------+------+\n8 rows in set (0.00 sec)\n\nmysql> commit; # 事务提交\nQuery OK, 0 rows affected (0.04 sec)\n\n```\n\n### 19. ALTER命令\n\n当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL alter命令。\n\n#### 删除表字段\n\n如下命令使用了 alter 命令及 drop 子句来删除以上创建表的 age 字段：\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | YES  |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> alter table table_name  drop field_name;\nQuery OK, 0 rows affected (0.92 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n2 rows in set (0.00 sec)\n\n```\n\n如果数据表中只剩余一个字段则无法使用drop来删除字段。\n\n#### 增加表字段\n\nmysql 中使用 add 子句来向数据表中添加列，如下实例在表 student 中添加 age 字段，并定义数据类型:\n\n```bash\nmysql> alter table student add age int unsigned not null;\nQuery OK, 0 rows affected (0.53 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n```\n\n执行以上命令后，field_name 字段会自动添加到数据表字段的末尾。\n\n如果你需要指定新增字段的位置，可以使用mysql提供的关键字 first (设定位第一列)， after 字段名（设定位于某个字段之后）。\n\n尝试以下 alter table 语句, 在执行成功后，使用 show columns 查看表结构的变化：\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+-------+\n| Field | Type             | Null | Key | Default | Extra |\n+-------+------------------+------+-----+---------+-------+\n| name  | varchar(10)      | NO   |     | NULL    |       |\n| age   | int(10) unsigned | NO   |     | NULL    |       |\n+-------+------------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n\nmysql> alter table student add id int unsigned auto_increment primary key first;\nQuery OK, 0 rows affected (0.56 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\nmysql> alter table student add class int unsigned after id;\nQuery OK, 0 rows affected (0.54 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | int(10) unsigned | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\nfirst 和 after 关键字可用于 add 与 modify 子句，所以如果你想重置数据表字段的位置就需要先使用 drop 删除字段然后使用 add 来添加字段并设置位置。\n\n#### 修改表字段\n\n如果需要修改字段类型及名称, 你可以在alter命令中使用 modify 或 change 子句 。\n\n例如，把字段 class 的类型从 int unsigned 改为 varchar(10)，可以执行以下命令:\n\n```bash\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | int(10) unsigned | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql> alter table student modify class varchar(10);\nQuery OK, 8 rows affected (0.69 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+-------+------------------+------+-----+---------+----------------+\n| Field | Type             | Null | Key | Default | Extra          |\n+-------+------------------+------+-----+---------+----------------+\n| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class | varchar(10)      | YES  |     | NULL    |                |\n| name  | varchar(10)      | NO   |     | NULL    |                |\n| age   | int(10) unsigned | NO   |     | NULL    |                |\n+-------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n使用 change 子句, 语法有很大的不同。 在 change 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n\n当你修改字段时，你可以指定是否包含值或者是否设置默认值。\n\n如果你不设置默认值，mysql会自动设置该字段默认为 null。\n\n```bash\nmysql> alter table student change class class_room varchar(20) default \"203\";\nQuery OK, 0 rows affected (0.10 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | 203     |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n你可以使用 alter 来修改字段的默认值，尝试以下实例：\n\n```bash\nmysql> alter table student alter class_room set default \"205\";\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | 205     |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n```\n\n你也可以使用 alter 命令及 drop子句来删除字段的默认值，如下实例：\n\n```bash\nmysql> alter table student alter class_room drop default;\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc student;\n+------------+------------------+------+-----+---------+----------------+\n| Field      | Type             | Null | Key | Default | Extra          |\n+------------+------------------+------+-----+---------+----------------+\n| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| class_room | varchar(20)      | YES  |     | NULL    |                |\n| name       | varchar(10)      | NO   |     | NULL    |                |\n| age        | int(10) unsigned | NO   |     | NULL    |                |\n+------------+------------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n```\n\n#### 修改数据表\n\n修改数据表类型，可以使用 alter table 命令来完成。\n\n尝试以下实例，我们将表 student 的类型修改为 MyISAM ，然后再修改为 InnoDB：\n\n```bash\nmysql> alter table student engine=myisam;\nQuery OK, 8 rows affected (0.28 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> show table status like \"student\"\\G\n*************************** 1. row ***************************\n           Name: student\n         Engine: MyISAM\n        Version: 10\n     Row_format: Dynamic\n           Rows: 8\n Avg_row_length: 20\n    Data_length: 160\nMax_data_length: 281474976710655\n   Index_length: 2048\n      Data_free: 0\n Auto_increment: 9\n    Create_time: 2019-06-09 17:47:23\n    Update_time: 2019-06-09 17:47:23\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n\nmysql> alter table students engine=innodb;\nQuery OK, 8 rows affected (0.76 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> show table status where name=\"students\"\\G\n*************************** 1. row ***************************\n           Name: students\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 8\n Avg_row_length: 2048\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: 9\n    Create_time: 2019-06-09 17:54:53\n    Update_time: 2019-06-09 17:54:53\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n\n```\n\n如果需要修改数据表的名称，可以在 alter table 语句中使用 rename 子句来实现。\n\n尝试以下实例将数据表 student 重命名为 students：\n\n```bash\nmysql> alter table student rename to students;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show tables;\n+-------------------+\n| Tables_in_my_data |\n+-------------------+\n| students          |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n### 20. 临时表\n\nMySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。\n\n如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。\n\n#### 创建临时表\n\n使用temporary关键字创建临时表\n\n```bash\nmysql> create temporary table class_room(room_id int unsigned primary key, class varchar(20) ) default charset=utf8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into class_room values(205,\"九年级一班\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from class_room;\n+---------+-----------------+\n| room_id | class           |\n+---------+-----------------+\n|     205 | 九年级一班      |\n+---------+-----------------+\n1 row in set (0.00 sec)\n\nmysql> desc class_room;\n+---------+------------------+------+-----+---------+-------+\n| Field   | Type             | Null | Key | Default | Extra |\n+---------+------------------+------+-----+---------+-------+\n| room_id | int(10) unsigned | NO   | PRI | NULL    |       |\n| class   | varchar(20)      | YES  |     | NULL    |       |\n+---------+------------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n\nmysql> show tables;\n+-------------------+\n| Tables_in_my_data |\n+-------------------+\n| students          |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n当你使用 show tables命令显示数据表列表时，你将无法看到 class_room表。\n\n如果你退出当前mysql会话，再使用 select命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。\n\n#### 删除临时表\n\n默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。\n\n以下是手动删除临时表的实例：\n\n```bash\nmysql> drop table class_room;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from class_room;\nERROR 1146 (42S02): Table 'my_data.class_room' doesn't exist\n\n```\n\n### 21. 复制表\n\n如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用create table ... select 命令，是无法实现的。\n\n**实例**\n尝试以下实例来复制表 runoob_tbl 。\n\n步骤一：\n\n获取数据表的完整结构。\n\n```bash\nmysql> show create table students\\G;\n*************************** 1. row ***************************\n       Table: students\nCreate Table: CREATE TABLE `students` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) NOT NULL,\n  `class_room` varchar(20) DEFAULT '205',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR:\nNo query specified\n\n```\n\n步骤二：\n\n修改SQL语句的数据表名，并执行SQL语句。\n\n```bash\nmysql> create table `student` (`id` int(10) unsigned not null auto_increment,`name` varchar(10) not null,`class_room` varchar(20) default '205', primary key (`id`)) engine=innodb auto_increment=9 default charset=utf8;\nQuery OK, 0 rows affected (0.59 sec)\n\n```\n\n步骤三：\n\n执行完第二步骤后，你将在数据库中创建新的克隆表 student。 如果你想拷贝数据表的数据你可以使用 insert into... select 语句来实现。\n\n```bash\nmysql> insert into student(id,name,class_room) select * from students;\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Duplicates: 0  Warnings: 0\n\nmysql> select * from student;\n+----+--------+------------+\n| id | name   | class_room |\n+----+--------+------------+\n|  1 | 李华   | 205        |\n|  2 | 敏柔   | 205        |\n|  3 | 赵强   | 205        |\n|  4 | 罗晴   | 205        |\n|  5 | 李磊   | 205        |\n|  6 | 寒梅   | 205        |\n|  7 | 张雷   | 205        |\n|  8 | 莉莉   | 205        |\n+----+--------+------------+\n8 rows in set (0.00 sec)\n\n```\n\n### 22. 处理重复数据\n\n有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。\n\n#### 防止表中出现重复数据\n\n你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。\n\n如果你想设置表中字段 id，name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：\n\n```bash\nmysql> create table teachers(id int unsigned auto_increment, name varchar(10), gender varchar(5), primary key(id,name));\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> desc teachers;\n+--------+------------------+------+-----+---------+----------------+\n| Field  | Type             | Null | Key | Default | Extra          |\n+--------+------------------+------+-----+---------+----------------+\n| id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| name   | varchar(10)      | NO   | PRI | NULL    |                |\n| gender | varchar(5)       | YES  |     | NULL    |                |\n+--------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n```\n\n如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。\n\ninsert ignore into 与 insert into 的区别就是 insert ignore 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。\n\n```bash\nmysql> insert into teachers values(1, \"李磊\", \"男\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into teachers values(1, \"李磊\", \"男\");\nERROR 1062 (23000): Duplicate entry '1-李磊' for key 'PRIMARY'\n\nmysql> insert ignore into teachers values(1, \"李磊\", \"男\");\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n```\n\nINSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。\n\n```bash\nmysql> replace into teachers values(1, \"李磊\", \"女\");\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from teachers;\n+----+--------+--------+\n| id | name   | gender |\n+----+--------+--------+\n|  1 | 李磊   | 女     |\n+----+--------+--------+\n1 row in set (0.00 sec)\n\n```\n\n另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：\n\n```bash\nmysql> create table person(first_name char(20) not null, last_name char(20) not null, gender char(10),unique (last_name, first_name)) charset=utf8;\nQuery OK, 0 rows affected (0.25 sec)\n\nmysql> insert ignore into person values(\"李\", \"雷\", \"男\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person values(\"李\", \"雷\", \"男\");\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> insert ignore into person values(\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from person;\n+------------+-----------+--------+\n| first_name | last_name | gender |\n+------------+-----------+--------+\n| 李         | 丽        | 女     |\n| 李         | 雷        | 男     |\n+------------+-----------+--------+\n2 rows in set (0.00 sec)\n\n```\n\n#### 统计重复数据\n\n以下我们将统计表中 first_name 和 last_name的重复记录数：\n\n- 创建person_info表，并插入3条重复数据\n\n```bash\nmysql> create table person_info(id int unsigned primary key auto_increment,first_name char(20) not null, last_name char(20) not null, gender char(10)) charset=utf8;\nQuery OK, 0 rows affected (0.29 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert ignore into person_info values(0,\"李\", \"丽\", \"女\");\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from person_info;\n+----+------------+-----------+--------+\n| id | first_name | last_name | gender |\n+----+------------+-----------+--------+\n|  1 | 李         | 丽        | 女     |\n|  2 | 李         | 丽        | 女     |\n|  3 | 李         | 丽        | 女     |\n+----+------------+-----------+--------+\n3 rows in set (0.00 sec)\n```\n\n- 查询重复数据\n\n```bash\nmysql> select count(*) as repetitions,last_name,first_name from person_info group by last_name, first_name having repetitions > 1;\n+-------------+-----------+------------+\n| repetitions | last_name | first_name |\n+-------------+-----------+------------+\n|           3 | 丽        | 李         |\n+-------------+-----------+------------+\n1 row in set (0.00 sec)\n\n```\n\n以上查询将返回 person_info 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：\n\n- 确定哪一列包含的值可能会重复。\n- 在列选择列表使用count(*)列出的那些列。\n- 在group by子句中列出的列。\n- having子句设置重复数大于1。\n\n#### 过滤重复数据\n\n如果你需要读取不重复的数据可以在 select 语句中使用 distinct 关键字来过滤重复数据。\n\n```bash\nmysql> select distinct first_name,last_name from person_info;\n+------------+-----------+\n| first_name | last_name |\n+------------+-----------+\n| 李         | 丽        |\n+------------+-----------+\n1 row in set (0.00 sec)\n\n```\n\n你也可以使用 group by 来读取数据表中不重复的数据：\n\n```bash\nmysql> select first_name, last_name  from person_info group by last_name, first_name;\n+------------+-----------+\n| first_name | last_name |\n+------------+-----------+\n| 李         | 丽        |\n+------------+-----------+\n1 row in set (0.01 sec)\n\n```\n\n#### 删除重复数据\n\n如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：\n\n##### 方法一\n\n先创建临时表tab,新表tab中的数据时从person_info表中分组查询出来的\n\n```bash\nmysql> create table tmp select last_name, first_name, gender from person_info  group by last_name, first_name, gender;\nQuery OK, 1 row affected (0.01 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n```\n\n在表的第一位添加主键\n\n```bash\nalter table tmp add column `id` bigint(20) primary key not null auto_increment comment 'id' first;\n```\n\n删除原表\n\n```bash\nmysql> drop table person_info;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n重命名为person_info\n\n```bash\nmysql> alter table tmp rename to person_info;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n","slug":"数据库-MySQL笔记","published":1,"updated":"2021-01-23T15:14:19.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkcnnuhb00ifjjln3qeudy6w","content":"<p>学习数据库安装后，最重要的就是学习SQL语句。</p>\n<h3 id=\"1-数据语句操作类型\"><a href=\"#1-数据语句操作类型\" class=\"headerlink\" title=\"1. 数据语句操作类型\"></a>1. 数据语句操作类型</h3><p>SQL是操作数据库的核心，</p>\n<p>结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。</p>\n<p>SQL是最重要的关系数据库操作语言，并且它的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索等。</p>\n<p>SQL是关系模型的数据库应用语言，由IBM在20世纪70年代为其关系型数据库 System R 所开发。</p>\n<p>SQL 是1986年10 月由美国国家标准局（ANSI）通过的数据库语言美国标准，接着，国际标准化组织（ISO）颁布了SQL正式国际标准。1989年4月，ISO提出了具有完整性特征的SQL89标准，1992年11月又公布了SQL92标准。</p>\n<p>虽然各个数据库系统略有不同，但是他们基本均遵循SQL 92标准。或者在SQL 92上做了一些简单的扩展和变化。</p>\n<p>学好了MySQL 的SQL 语法，其他的SQL语法学习起来均是万变不离其中。</p>\n<p>SQL语句按照其功能范围不同可分为3个类别：</p>\n<ol>\n<li><strong>数据定义语言</strong>(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。</li>\n<li><strong>数据操作语言</strong>(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。</li>\n<li><strong>数据控制语言</strong>(DCL， Data Control Language)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。</li>\n</ol>\n<h3 id=\"2-管理数据库命令\"><a href=\"#2-管理数据库命令\" class=\"headerlink\" title=\"2. 管理数据库命令\"></a>2. 管理数据库命令</h3><h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>以下命令语句可以在 MySQL 的命令提示符使用，获取服务器元数据</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">select version( )</td>\n<td align=\"left\">服务器版本信息</td>\n</tr>\n<tr>\n<td align=\"center\">select database( )</td>\n<td align=\"left\">当前数据库名 (或者返回空)</td>\n</tr>\n<tr>\n<td align=\"center\">select user( )</td>\n<td align=\"left\">当前用户名</td>\n</tr>\n<tr>\n<td align=\"center\">show status</td>\n<td align=\"left\">服务器状态</td>\n</tr>\n<tr>\n<td align=\"center\">show variables</td>\n<td align=\"left\">服务器配置变量</td>\n</tr>\n</tbody></table>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><ul>\n<li>create database 数据库名:<br>创建数据库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create database data_test;<br>Query OK, 1 row affected (0.01 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h4><ul>\n<li>drop database 数据库名:<br>删除数据库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; drop database data_test;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示所有数据库\"><a href=\"#展示所有数据库\" class=\"headerlink\" title=\"展示所有数据库\"></a>展示所有数据库</h4><ul>\n<li>show databases:<br>列出 MySQL 数据库管理系统的数据库列表。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| data_test          |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"改变数据库\"><a href=\"#改变数据库\" class=\"headerlink\" title=\"改变数据库\"></a>改变数据库</h4><ul>\n<li>use 数据库名 :<br>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; use data_test;<br>Database changed<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示当前数据库中所有的表\"><a href=\"#展示当前数据库中所有的表\" class=\"headerlink\" title=\"展示当前数据库中所有的表\"></a>展示当前数据库中所有的表</h4><ul>\n<li>show tables:<br>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show tables;<br>+---------------------+<br>| Tables_in_data_test |<br>+---------------------+<br>| customers           |<br>| orderitems          |<br>| orders              |<br>| productnotes        |<br>| products            |<br>| vendors             |<br>+---------------------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示特定表中每列的信息\"><a href=\"#展示特定表中每列的信息\" class=\"headerlink\" title=\"展示特定表中每列的信息\"></a>展示特定表中每列的信息</h4><ul>\n<li>show columns from 数据表(desc 数据表):<br>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show columns from customers;<br>+--------------+-----------+------+-----+---------+----------------+<br>| Field        | Type      | Null | Key | Default | Extra          |<br>+--------------+-----------+------+-----+---------+----------------+<br>| cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |<br>| cust_name    | char(50)  | NO   |     | NULL    |                |<br>| cust_address | char(50)  | YES  |     | NULL    |                |<br>| cust_city    | char(50)  | YES  |     | NULL    |                |<br>| cust_state   | char(5)   | YES  |     | NULL    |                |<br>| cust_zip     | char(10)  | YES  |     | NULL    |                |<br>| cust_country | char(50)  | YES  |     | NULL    |                |<br>| cust_contact | char(50)  | YES  |     | NULL    |                |<br>| cust_email   | char(255) | YES  |     | NULL    |                |<br>+--------------+-----------+------+-----+---------+----------------+<br>9 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示数据表的详细索引信息\"><a href=\"#展示数据表的详细索引信息\" class=\"headerlink\" title=\"展示数据表的详细索引信息\"></a>展示数据表的详细索引信息</h4><ul>\n<li>show index from 数据表:<br>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show index from customers;<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| customers |          0 | PRIMARY  |            1 | cust_id     | A         |           5 |  NULL    |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"展示数据库的性能及统计信息\"><a href=\"#展示数据库的性能及统计信息\" class=\"headerlink\" title=\"展示数据库的性能及统计信息\"></a>展示数据库的性能及统计信息</h4><ul>\n<li>show table status [from db_name] [like ‘pattern’] \\G:<br>该命令将输出Mysql数据库管理系统的性能及统计信息。</li>\n</ul>\n<blockquote>\n<p>显示数据库 data_test 中所有表的信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test;<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| Name         | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| customers    | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| orderitems   | InnoDB |      10 | Dynamic    |   11 |           1489 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |<br>| orders       | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |        16384 |         0 |          20010 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| productnotes | MyISAM |      10 | Dynamic    |   14 |            135 |        1892 | 281474976710655 |         6144 |         0 |            115 | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |<br>| products     | InnoDB |      10 | Dynamic    |   14 |           1170 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| vendors      | InnoDB |      10 | Dynamic    |    6 |           2730 |       16384 |               0 |            0 |         0 |           1007 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.02 sec)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>表名以cus开头的表的信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test like <span class=\"hljs-string\">&quot;cus%&quot;</span>;<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| Name      | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| customers | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>表名以cus开头的表的信息;<br>加上 \\G，查询结果按列打印;\\G后面不能再加分号;<br>因为\\G在功能上等同于;<br>如果加了分号，那么就是;;(2个分号)，SQL语法错误<code>ERROR:No query specified</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test like <span class=\"hljs-string\">&quot;cus%&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: customers<br>         Engine: InnoDB<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 5<br> Avg_row_length: 3276<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 0<br>      Data_free: 0<br> Auto_increment: 10006<br>    Create_time: 2019-05-26 10:15:02<br>    Update_time: 2019-05-26 10:15:25<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h3><h4 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h4><p>mysql支持所有标准sql数值数据类型。</p>\n<p>这些类型包括严格数值数据类型（integer、smallint、decimal和numeric），以及近似数值数据类型（float、real和double precisi键字int是integer的同义词，关键字dec是decimal的同义词。</p>\n<p>bit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。</p>\n<p>作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">大小</th>\n<th align=\"left\">范围（有符号）</th>\n<th align=\"left\">范围（无符号）</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>tinyint</strong></td>\n<td align=\"center\">1 字节</td>\n<td align=\"left\">(-128，127)</td>\n<td align=\"left\">(0，255)</td>\n<td align=\"center\">小整数值</td>\n</tr>\n<tr>\n<td align=\"center\">smallint</td>\n<td align=\"center\">2 字节</td>\n<td align=\"left\">(-32 768，32 767)</td>\n<td align=\"left\">(0，65 535)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\">mediumint</td>\n<td align=\"center\">3 字节</td>\n<td align=\"left\">(-8 388 608，8 388 607)</td>\n<td align=\"left\">(0，16 777 215)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>int</strong> 或 <strong>integer</strong></td>\n<td align=\"center\">4 字节</td>\n<td align=\"left\">(-2 147 483 648，2 147 483 647)</td>\n<td align=\"left\">(0，4 294 967 295)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\">bigint</td>\n<td align=\"center\">8 字节</td>\n<td align=\"left\">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>\n<td align=\"left\">(0，18 446 744 073 709 551 615)</td>\n<td align=\"center\">极大整数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>float</strong></td>\n<td align=\"center\">4 字节</td>\n<td align=\"left\">(-3.402 823 466 e+38，-1.175 494 351 e-38)，0，(1.175 494 351 e-38，3.402 823 466 351 e+38)</td>\n<td align=\"left\">0，(1.175 494 351 e-38，3.402 823 466 e+38)</td>\n<td align=\"center\">单精度<br/>浮点数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>double</strong></td>\n<td align=\"center\">8 字节</td>\n<td align=\"left\">(-1.797 693 134 862 315 7 e+308，-2.225 073 858 507 201 4 e-308)，0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>\n<td align=\"left\">0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>\n<td align=\"center\">双精度<br/> 浮点数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>decimal</strong></td>\n<td align=\"center\">decimal(m,d)</td>\n<td align=\"left\">依赖于 m 和 d 的值</td>\n<td align=\"left\">依赖于 m 和 d 的值</td>\n<td align=\"center\">小数值</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"日期和时间类型\"><a href=\"#日期和时间类型\" class=\"headerlink\" title=\"日期和时间类型\"></a>日期和时间类型</h4><p>表示时间值的日期和时间类型为 datetime、date、timestamp、time 和 year。</p>\n<p>每个时间类型有一个有效值范围和一个 “零” 值，当指定不合法的 mysql 不能表示的值时使用 “零” 值。</p>\n<p>timestamp 类型有专有的自动更新特性，将在后面描述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">大小(字节)</th>\n<th align=\"left\">范围</th>\n<th align=\"center\">格式</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>date</strong></td>\n<td align=\"center\">3</td>\n<td align=\"left\">1000-01-01/9999-12-31</td>\n<td align=\"center\">yyyy-mm-dd</td>\n<td align=\"center\">日期值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>time</strong></td>\n<td align=\"center\">3</td>\n<td align=\"left\">‘-838:59:59’/‘838:59:59’</td>\n<td align=\"center\">hh:mm:ss</td>\n<td align=\"center\">时间值或持续时间</td>\n</tr>\n<tr>\n<td align=\"center\">year</td>\n<td align=\"center\">1</td>\n<td align=\"left\">1901/2155</td>\n<td align=\"center\">yyyy</td>\n<td align=\"center\">年份值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>datetime</strong></td>\n<td align=\"center\">8</td>\n<td align=\"left\">1000-01-01 00:00:00/9999-12-31 23:59:59</td>\n<td align=\"center\">yyyy-mm-dd hh:mm:ss</td>\n<td align=\"center\">混合日期和时间值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>timestamp</strong></td>\n<td align=\"center\">4</td>\n<td align=\"left\">1970-01-01 00:00:00/2038<br/>结束时间是第 <strong>2147483647</strong> 秒<br/>北京时间 <strong>2038-1-19 11:14:07</strong><br/>格林尼治时间<strong>2038-1-19 03:14:07</strong></td>\n<td align=\"center\">yyyymmdd hhmmss</td>\n<td align=\"center\">混合日期和时间值，时间戳</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h4><p>字符串类型指 char、varchar、binary、varbinary、blob、text、enum 和 set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">大小</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>char</strong></td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">定长字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>varchar</strong></td>\n<td align=\"left\">0-65535 字节</td>\n<td align=\"left\">变长字符串</td>\n</tr>\n<tr>\n<td align=\"left\">tinyblob</td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">不超过 255 个字符的二进制字符串</td>\n</tr>\n<tr>\n<td align=\"left\">tinytext</td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">短文本字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>blob</strong></td>\n<td align=\"left\">0-65 535 字节</td>\n<td align=\"left\">二进制形式的长文本数据</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>text</strong></td>\n<td align=\"left\">0-65 535 字节</td>\n<td align=\"left\">长文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">mediumblob</td>\n<td align=\"left\">0-16 777 215 字节</td>\n<td align=\"left\">二进制形式的中等长度文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">mediumtext</td>\n<td align=\"left\">0-16 777 215 字节</td>\n<td align=\"left\">中等长度文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">longblob</td>\n<td align=\"left\">0-4 294 967 295 字节</td>\n<td align=\"left\">二进制形式的极大文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">longtext</td>\n<td align=\"left\">0-4 294 967 295 字节</td>\n<td align=\"left\">极大文本数据</td>\n</tr>\n</tbody></table>\n<p>char 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n<p>binary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n<p>blob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。</p>\n<p>有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。</p>\n<blockquote>\n<p>注意：</p>\n</blockquote>\n<p>1、一个汉字占多少长度与编码有关：</p>\n<p>UTF－8：一个汉字＝3个字节</p>\n<p>GBK：一个汉字＝2个字节</p>\n<p>2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别</p>\n<p>3、MySQL 检查长度，可用 SQL 语言来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select length(fieldname) from table_name<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"4-创建数据表\"><a href=\"#4-创建数据表\" class=\"headerlink\" title=\"4. 创建数据表\"></a>4. 创建数据表</h3><p>创建MySQL数据表需要以下信息：</p>\n<ul>\n<li>表名</li>\n<li>表字段名</li>\n<li>定义每个表字段</li>\n</ul>\n<p><strong>语法</strong><br>以下为创建MySQL数据表的SQL通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">create table table_name (column_name column_type);<br></code></pre></div></td></tr></table></figure>\n<p><strong>实例</strong><br>以下例子中我们将在 my_data 数据库中创建数据表students：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table <span class=\"hljs-keyword\">if</span> not exists students(id int unsigned auto_increment, name varchar(40) not null, adress varchar(100) , birthday date not null, primary key(id)) engine=innodb default charset=utf8mb4;<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; show columns from students;<br>+----------+------------------+------+-----+---------+----------------+<br>| Field    | Type             | Null | Key | Default | Extra          |<br>+----------+------------------+------+-----+---------+----------------+<br>| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name     | varchar(40)      | NO   |     | NULL    |                |<br>| adress   | varchar(100)     | YES  |     | NULL    |                |<br>| birthday | date             | NO   |     | NULL    |                |<br>+----------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<p>实例解析：</p>\n<ul>\n<li>如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为null ，就会报错。</li>\n<li>auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。</li>\n<li>primary key关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>\n<li>engine 设置存储引擎，charset 设置编码。</li>\n</ul>\n<h3 id=\"5-删除数据表\"><a href=\"#5-删除数据表\" class=\"headerlink\" title=\"5. 删除数据表\"></a>5. 删除数据表</h3><p>MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p>\n<p><strong>语法</strong><br>以下为删除MySQL数据表的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">drop table table_name;<br></code></pre></div></td></tr></table></figure>\n<p><strong>实例</strong><br>以下实例中我们将删除 students 表:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; drop table students;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; show tables;<br>Empty <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"6-插入数据\"><a href=\"#6-插入数据\" class=\"headerlink\" title=\"6. 插入数据\"></a>6. 插入数据</h3><p>MySQL 表中使用 insert into SQL语句来插入数据。</p>\n<p><strong>语法</strong><br>以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">insert into table_name ( field1, field2,...fieldN ) values ( value1, value2,...valueN );<br></code></pre></div></td></tr></table></figure>\n<p>insert 插入多条数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">insert into table_name  (field1, field2,...fieldn)  values  (valuea1,valuea2,...valuean),(valueb1,valueb2,...valuebn),(valuec1,valuec2,...valuecn)......;<br></code></pre></div></td></tr></table></figure>\n<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>\n<p><strong>实例</strong><br>以下实例中我们将向 students 表插入数据:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 主键默认从1开始</span><br>mysql&gt; insert into students (name,birthday) values(<span class=\"hljs-string\">&quot;丽丽&quot;</span>,<span class=\"hljs-string\">&quot;1996-05-06&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class=\"hljs-comment\"># 主键设为0，即从最后一个id值自动增长</span><br>mysql&gt; insert into students values(0,<span class=\"hljs-string\">&quot;李明&quot;</span>,null,<span class=\"hljs-string\">&quot;1993-12-16&quot;</span>);<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; insert into students values(10,<span class=\"hljs-string\">&quot;张磊&quot;</span>,<span class=\"hljs-string\">&#x27;北京市海淀区&#x27;</span>,<span class=\"hljs-string\">&quot;1995-04-12&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class=\"hljs-comment\"># 主键不设置，从最后一个id值自动增长</span><br>mysql&gt; insert into students <span class=\"hljs-built_in\">set</span> name=<span class=\"hljs-string\">&quot;孙雨&quot;</span>,adress=<span class=\"hljs-string\">&#x27;河北省石家庄市&#x27;</span>,birthday=<span class=\"hljs-string\">&quot;1989-07-18&quot;</span>;<br>Query OK, 1 row affected (0.01 sec)<br><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为0或者null，这样添加数据可以自增</p>\n</blockquote>\n<h3 id=\"7-条件语句\"><a href=\"#7-条件语句\" class=\"headerlink\" title=\"7. 条件语句\"></a>7. 条件语句</h3><ul>\n<li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用where语句来设定查询条件。</li>\n<li>where 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>\n<li>以下为操作符列表，可用于 where 子句中。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以使用 and 或者 or 指定一个或多个条件。</li>\n<li>WHERE 子句也可以运用于 SQL 的 delete 或者 update 命令。</li>\n</ul>\n<blockquote>\n<p>下表中实例假定 A 为 10, B 为 20</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">=</td>\n<td align=\"left\">等号，检测两个值是否相等，如果相等返回true</td>\n<td align=\"left\">(A = B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"left\">不等于，检测两个值是否相等，如果不相等返回true</td>\n<td align=\"left\">(A != B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"left\">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td>\n<td align=\"left\">(A &gt; B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"left\">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td>\n<td align=\"left\">(A &lt; B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;=</td>\n<td align=\"left\">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td>\n<td align=\"left\">(A &gt;= B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;=</td>\n<td align=\"left\">小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td>\n<td align=\"left\">(A &lt;= B) 返回 true。</td>\n</tr>\n</tbody></table>\n<p>如果我们想在 MySQL 数据表中读取指定的数据，where 子句是非常有用的。</p>\n<p>使用主键来作为 where 子句的条件查询是非常快速的。</p>\n<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>\n<h3 id=\"8-查询数据\"><a href=\"#8-查询数据\" class=\"headerlink\" title=\"8. 查询数据\"></a>8. 查询数据</h3><p>MySQL 数据库使用SQL select语句来查询数据。</p>\n<p><strong>语法</strong><br>以下为在MySQL数据库中查询数据通用的 select 语法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select column_name,column_name<br>from table_name<br>[<span class=\"hljs-built_in\">where</span> Clause]<br>[<span class=\"hljs-built_in\">limit</span> N][ offset M]<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用where语句来设定查询条件。</li>\n<li>select 命令可以读取一条或者多条记录。</li>\n<li>你可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据</li>\n<li>你可以使用 limit 属性来设定返回的记录数。</li>\n<li>你可以通过offset指定select语句开始查询的数据偏移量。默认情况下偏移量为0。</li>\n</ul>\n<p><strong>实例</strong><br>以下实例我们将通过 SQL select 命令来获取 MySQL 数据表 students 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from students;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>|  1 | 丽丽 | NULL           | 1996-05-06 |<br>|  2 | 李明 | NULL           | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区    | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市  | 1989-07-18 |<br>+----+------+----------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name from students <span class=\"hljs-built_in\">limit</span> 2 offset 1;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  2 | 李明 |<br>| 10 | 张磊 |<br>+----+------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> id&gt;=10;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> id&gt;=10 <span class=\"hljs-built_in\">limit</span> 1 offset 1;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;李明&quot;</span>;<br>+----+------+--------+------------+<br>| id | name | adress | birthday   |<br>+----+------+--------+------------+<br>|  2 | 李明 | NULL   | 1993-12-16 |<br>+----+------+--------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"9-修改数据\"><a href=\"#9-修改数据\" class=\"headerlink\" title=\"9. 修改数据\"></a>9. 修改数据</h3><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL update 命令来操作。</p>\n<p><strong>语法</strong><br>以下是 update 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">update table_name <span class=\"hljs-built_in\">set</span> field1=new-value1, field2=new-value2 [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></div></td></tr></table></figure>\n<p>当我们需要将字段中的特定字符串批量修改为其他字符串时，可已使用以下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">update table_name <span class=\"hljs-built_in\">set</span> field=replace(field, <span class=\"hljs-string\">&#x27;old-string&#x27;</span>, <span class=\"hljs-string\">&#x27;new-string&#x27;</span>) [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。<br>当你需要更新数据表中指定行的数据时 where 子句是非常有用的。</li>\n</ul>\n<p><strong>实例</strong><br>以下我们将在 SQL update 命令使用 where 子句来更新 students 表中指定的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; update students <span class=\"hljs-built_in\">set</span> adress=<span class=\"hljs-string\">&quot;北京市昌平区&quot;</span> <span class=\"hljs-built_in\">where</span> adress is null;<br>Query OK, 2 rows affected (0.01 sec)<br>Rows matched: 2  Changed: 2  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>|  1 | 丽丽 | 北京市昌平区   | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区   | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update students <span class=\"hljs-built_in\">set</span> adress=replace(adress, <span class=\"hljs-string\">&quot;河北省石家庄&quot;</span>,<span class=\"hljs-string\">&quot;湖北省武汉&quot;</span>) wh<br>ere id=11;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |<br>+----+------+--------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update students <span class=\"hljs-built_in\">set</span> id=id-7 <span class=\"hljs-built_in\">where</span> id=10;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |<br>+----+------+--------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"10-删除数据\"><a href=\"#10-删除数据\" class=\"headerlink\" title=\"10. 删除数据\"></a>10. 删除数据</h3><p>你可以使用 sql 的 delete from 命令来删除 mysql 数据表中的记录。</p>\n<p><strong>语法</strong><br>以下是 sql delete 语句从 mysql 数据表中删除数据的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">delete from table_name [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>如果没有指定 where 子句，mysql 表中的所有记录将被删除。</li>\n<li>你可以在 where 子句中指定任何条件</li>\n<li>您可以在单个表中一次性删除记录。<br>当你想删除数据表中指定的记录时 where 子句是非常有用的。</li>\n</ul>\n<p><strong>实例</strong><br>这里我们将在 sql delete 命令中使用 where 子句来删除 mysql 数据表 students 所选的数据:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; delete from students <span class=\"hljs-built_in\">where</span> id=11;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>delete，drop，truncate 都有删除表的作用，区别在于：</p>\n</blockquote>\n<p>1、drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">drop table students;<br></code></pre></div></td></tr></table></figure>\n<p>2、truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">truncate table students;<br></code></pre></div></td></tr></table></figure>\n<p>3、delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">delete from students;<br></code></pre></div></td></tr></table></figure>\n<p>4、delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;</p>\n<p>实例，删除学生表中姓名为 “张三” 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">delete from student <span class=\"hljs-built_in\">where</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br></code></pre></div></td></tr></table></figure>\n<p>5、delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;</p>\n<p>实例，删除学生表中姓名为 “张三” 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">delete from student <span class=\"hljs-built_in\">where</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br></code></pre></div></td></tr></table></figure>\n<p>实例，释放学生表的表空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">optimize table students;<br></code></pre></div></td></tr></table></figure>\n<p>6、delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。</p>\n<h3 id=\"11-包含条件\"><a href=\"#11-包含条件\" class=\"headerlink\" title=\"11. 包含条件\"></a>11. 包含条件</h3><p>我们知道在 mysql 中使用 sql select 命令来读取数据， 同时我们可以在 select 语句中使用 where 子句来获取指定的记录。</p>\n<p>where 子句中可以使用等号 = 来设定获取数据的条件，如 “adress = ‘北京市昌平区’”。</p>\n<p>但是有时候我们需要获取 adress 字段含有 “北京市” 字符的所有记录，这时我们就需要在 where 子句中使用 sql like 子句。</p>\n<p><strong>语法</strong><br>以下是 sql select 语句使用 like 子句从数据表中读取数据的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select field1, field2,...fieldn from table_name <span class=\"hljs-built_in\">where</span> field1 like condition1 [and [or]] filed2 = <span class=\"hljs-string\">&#x27;somevalue&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>sql like 子句中使用百分号 %字符来表示任意字符，类似于unix或正则表达式中的星号 *。</li>\n<li>如果没有使用百分号 %, like 子句与等号 = 的效果是一样的。</li>\n<li>like 通常与 % 一同使用，类似于一个元字符的搜索。</li>\n<li>可以使用 and 或者 or 指定一个或多个条件。</li>\n<li>可以在 delete、select或 update 命令中使用 where…like 子句来指定条件。</li>\n</ul>\n<p><strong>实例</strong><br>以下我们将在 sql select 命令中使用 where…like 子句来从mysql数据表 students 中读取数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span>;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>在 where like 的条件查询中，SQL 提供了四种匹配方式。</p>\n</blockquote>\n<ul>\n<li><code>%</code>：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。</li>\n<li><code>_</code>：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。</li>\n<li><code>[]</code>：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</li>\n<li><code>[^]</code>：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。</li>\n<li>查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。</li>\n</ul>\n<blockquote>\n<p>like 匹配/模糊匹配，会与 % 和 _ 结合使用。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&#x27;%a&#x27;</span>     //以a结尾的数据<br><span class=\"hljs-string\">&#x27;a%&#x27;</span>     //以a开头的数据<br><span class=\"hljs-string\">&#x27;%a%&#x27;</span>    //含有a的数据<br><span class=\"hljs-string\">&#x27;_a_&#x27;</span>    //三位且中间字母是a的<br><span class=\"hljs-string\">&#x27;_a&#x27;</span>     //两位且结尾字母是a的<br><span class=\"hljs-string\">&#x27;a_&#x27;</span>     //两位且开头字母是a的<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"12-关联查询\"><a href=\"#12-关联查询\" class=\"headerlink\" title=\"12. 关联查询\"></a>12. 关联查询</h3><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p>\n<p><strong>语法</strong><br>mysql union 操作符语法格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select expression1, expression2, ... expression_n<br>from tables<br>[<span class=\"hljs-built_in\">where</span> conditions]<br>union [all | distinct]<br>select expression1, expression2, ... expression_n<br>from tables<br>[<span class=\"hljs-built_in\">where</span> conditions];<br></code></pre></div></td></tr></table></figure>\n<p><strong>参数</strong></p>\n<ul>\n<li><p>expression1, expression2, … expression_n: 要检索的列。</p>\n</li>\n<li><p>tables: 要检索的数据表。</p>\n</li>\n<li><p>where conditions: 可选， 检索条件。</p>\n</li>\n<li><p>distinct: 可选，删除结果集中重复的数据。默认情况下 union 操作符已经删除了重复数据，所以 distinct 修饰符对结果没啥影响。</p>\n</li>\n<li><p>all: 可选，返回所有结果集，包含重复数据。</p>\n</li>\n</ul>\n<p><strong>实例</strong><br>下面的 SQL 语句从 “students” 和 “teachers” 表中选取所有不同的adress（只有不同的值）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from teachers;<br>+----+--------+--------------+----------+<br>| id | name   | adress       | birthday |<br>+----+--------+--------------+----------+<br>|  1 | 刘老师 | 北京市海淀区 | NULL     |<br>|  2 | 孙老师 | 北京市朝阳区 | NULL     |<br>|  3 | 常老师 | 北京市昌平区 | NULL     |<br>+----+--------+--------------+----------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select adress from students union select adress from teachers ;<br>+--------------+<br>| adress       |<br>+--------------+<br>| 北京市昌平区 |<br>| 北京市海淀区 |<br>| 北京市朝阳区 |<br>+--------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;%昌平区&quot;</span> union select name from teachers <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;%昌平区&quot;</span> ;<br>+--------+<br>| name   |<br>+--------+<br>| 丽丽   |<br>| 李明   |<br>| 常老师 |<br>+--------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）<br>UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p>\n</blockquote>\n<h3 id=\"13-排序\"><a href=\"#13-排序\" class=\"headerlink\" title=\"13. 排序\"></a>13. 排序</h3><p>我们知道从 mysql 表中使用 sql select 语句来读取数据。</p>\n<p>如果我们需要对读取的数据进行排序，我们就可以使用 mysql 的 order by 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p>\n<p><strong>语法</strong><br>以下是 sql select 语句使用 order by 子句将查询数据排序后再返回数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select field1, field2,...fieldn table_name1, table_name2... order by field1 [asc [desc][默认 asc]], [field2...] [asc [desc][默认 asc]]<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>\n<li>你可以设定多个字段来排序。</li>\n<li>你可以使用 asc 或 desc 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>\n<li>你可以添加 where…like 子句来设置条件。</li>\n</ul>\n<p><strong>实例</strong><br>尝试以下实例，结果将按升序及降序排列。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday desc;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday asc;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"14-分组\"><a href=\"#14-分组\" class=\"headerlink\" title=\"14. 分组\"></a>14. 分组</h3><p>group by 语句根据一个或多个列对结果集进行分组。<br>在分组的列上我们可以使用 count, sum, avg等函数。</p>\n<p><strong>语法</strong><br>以下是gruop by语句的语法示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select column_name, <span class=\"hljs-keyword\">function</span>(column_name) from table_name <span class=\"hljs-built_in\">where</span> column_name operator value group by column_name;<br></code></pre></div></td></tr></table></figure>\n<p><strong>实例</strong><br>接下来我们使用 group by 语句 将数据表按名字进行分组，并统计每个商品有多少条记录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from goods;<br>+----+--------+------+<br>| id | name   | nums |<br>+----+--------+------+<br>|  1 | 西瓜   |   50 |<br>|  2 | 甜瓜   |   15 |<br>|  3 | 甜瓜   |   15 |<br>|  4 | 苹果   |   25 |<br>|  5 | 西瓜   |   25 |<br>|  6 | 西瓜   |   63 |<br>+----+--------+------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name, count(name) from goods group by name;<br>+--------+-------------+<br>| name   | count(name) |<br>+--------+-------------+<br>| 甜瓜   |           2 |<br>| 苹果   |           1 |<br>| 西瓜   |           3 |<br>+--------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>with rollup 可以实现在分组统计数据基础上再进行相同的统计（sum,avg,count…）。</p>\n<p>例如我们将以上的数据表按商品名称进行分组，再统计每类商品的总数量，或者求其均值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select name, sum(nums) as count_num from goods group by name;<br>+--------+-----------+<br>| name   | count_num |<br>+--------+-----------+<br>| 甜瓜   |        30 |<br>| 苹果   |        25 |<br>| 西瓜   |       138 |<br>+--------+-----------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name, avg(nums) as avg_num from goods group by name with rollup;<br>+--------+---------+<br>| name   | avg_num |<br>+--------+---------+<br>| 甜瓜   | 15.0000 |<br>| 苹果   | 25.0000 |<br>| 西瓜   | 46.0000 |<br>| NULL   | 32.1667 |<br>+--------+---------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">select coalesce(a,b,c);<br></code></pre></div></td></tr></table></figure>\n<p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p>\n<p>以下实例中如果名字为空我们使用总数代替：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select coalesce(name, <span class=\"hljs-string\">&#x27;总计&#x27;</span>) as 名称, sum(nums) as 数量 from goods group by name with rollup;<br>+--------+--------+<br>| 名称   | 数量   |<br>+--------+--------+<br>| 甜瓜   |     30 |<br>| 苹果   |     25 |<br>| 西瓜   |    138 |<br>| 总计   |    193 |<br>+--------+--------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"15-连接\"><a href=\"#15-连接\" class=\"headerlink\" title=\"15. 连接\"></a>15. 连接</h3><p>在前面的章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。</p>\n<p>本章节我们将向大家介绍如何使用 mysql 的 join 在两个或多个表中查询数据。</p>\n<p>你可以在 select, update 和 delete 语句中使用 mysql 的 join 来联合多表查询。</p>\n<p>join 按照功能大致分为如下三类：</p>\n<ul>\n<li>inner join（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>left join（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>right join（右连接）： 与 left join 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n<p><strong>实例</strong><br>首先创建表，并添加测试数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table web_counts(id int unsigned auto_increment primary key, web_name varchar(20) not null, nums int unsigned default 0) default charset=utf8;<br>Query OK, 0 rows affected (0.10 sec)<br><br>mysql&gt; create table web_info(id int unsigned auto_increment primary key, web_name varchar(20) not null, web_info varchar(50), create_time date not null) default charset=utf8;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; desc web_info;<br>+-------------+------------------+------+-----+---------+----------------+<br>| Field       | Type             | Null | Key | Default | Extra          |<br>+-------------+------------------+------+-----+---------+----------------+<br>| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| web_name    | varchar(20)      | NO   |     | NULL    |                |<br>| web_info    | varchar(50)      | YES  |     | NULL    |                |<br>| create_time | date             | NO   |     | NULL    |                |<br>+-------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; desc web_counts;<br>+----------+------------------+------+-----+---------+----------------+<br>| Field    | Type             | Null | Key | Default | Extra          |<br>+----------+------------------+------+-----+---------+----------------+<br>| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| web_name | varchar(20)      | NO   |     | NULL    |                |<br>| nums     | int(10) unsigned | YES  |     | 0       |                |<br>+----------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot; 淘宝&quot;</span>,1000);<br>Query OK, 1 row affected (0.03 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;百度&quot;</span>, 3000);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;腾讯&quot;</span>, 2000);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;网易&quot;</span>, 900);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from web_counts;<br>+----+----------+------+<br>| id | web_name | nums |<br>+----+----------+------+<br>|  1 | 淘宝     | 1000 |<br>|  2 | 百度     | 3000 |<br>|  3 | 腾讯     | 2000 |<br>|  4 | 网易     |  900 |<br>+----+----------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;百度&quot;</span>, <span class=\"hljs-string\">&quot;搜索网站&quot;</span>,<span class=\"hljs-string\">&quot;1989-9-01&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;腾讯&quot;</span>, <span class=\"hljs-string\">&quot;社交网站&quot;</span>,<span class=\"hljs-string\">&quot;1991-02-05&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;网易&quot;</span>, <span class=\"hljs-string\">&quot;门户网站&quot;</span>,<span class=\"hljs-string\">&quot;1990-08-09&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;新浪&quot;</span>, <span class=\"hljs-string\">&quot;社交网站&quot;</span>,<span class=\"hljs-string\">&quot;1993-05-12&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from web_info;<br>+----+----------+--------------+-------------+<br>| id | web_name | web_info     | create_time |<br>+----+----------+--------------+-------------+<br>|  1 | 百度     | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 社交网站     | 1991-02-05  |<br>|  3 | 网易     | 门户网站     | 1990-08-09  |<br>|  4 | 新浪     | 社交网站     | 1993-05-12  |<br>+----+----------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>接下来我们就使用mysql的inner join(也可以省略 inner 使用 join，效果一样)来连接以上两张表来读取web_counts表中所有web_name字段在web_info表对应的字段值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a inner join web_info b on a.web_name=b.web_name;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>以上 SQL 语句等价于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a, web_info b <span class=\"hljs-built_in\">where</span> a.web_name=b.web_name;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>mysql left join 与 join 有所不同。 mysql left join 会读取左边数据表的全部数据，即便右边表无对应数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select a.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a left join web_info b on a.web_name=b.web_name order by a.id;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 淘宝     | 1000 | NULL         | NULL        |<br>|  2 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  3 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  4 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>mysql right join 会读取右边数据表的全部数据，即便左边边表无对应数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, b.web_name, a.nums,b.web_info, b.create_time from web_counts a right join web_info b on a.web_name=b.web_name order by b.id;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>|  4 | 新浪     | NULL | 社交网站     | 1993-05-12  |<br>+----+----------+------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"16-正则表达式\"><a href=\"#16-正则表达式\" class=\"headerlink\" title=\"16. 正则表达式\"></a>16. 正则表达式</h3><p>mysql 正则表达式<br>在前面的章节我们已经了解到mysql可以通过 <code>like ...%</code> 来进行模糊匹配。</p>\n<p>mysql 同样也支持其他正则表达式的匹配， mysql中使用 regexp 操作符来进行正则表达式匹配。</p>\n<p>下表中的正则模式可应用于 <code>regexp</code> 操作符中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>^</code></td>\n<td align=\"left\">匹配输入字符串的开始位置。如果设置了 regexp 对象的 multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>$</code></td>\n<td align=\"left\">匹配输入字符串的结束位置。如果设置了regexp 对象的 multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>.</code></td>\n<td align=\"left\">匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用象 ‘[.\\n]’ 的模式。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>[...]</code></td>\n<td align=\"left\">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>[^...]</code></td>\n<td align=\"left\">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td>\n</tr>\n<tr>\n<td align=\"center\">`p1</td>\n<td align=\"left\">p2`</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"left\">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"left\">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#123;n&#125;</code></td>\n<td align=\"left\">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#123;n,m&#125;</code></td>\n<td align=\"left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody></table>\n<p><strong>实例</strong><br>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的sql语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：</p>\n<ul>\n<li>查找name字段中以’st’为开头的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;^st&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>查找name字段中以’ok’为结尾的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;ok$&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>查找name字段中包含’mar’字符串的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;mar&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;^[aeiou]|ok$&#x27;</span>;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"17-NULL-值处理\"><a href=\"#17-NULL-值处理\" class=\"headerlink\" title=\"17. NULL 值处理\"></a>17. NULL 值处理</h3><p>为了处理这种情况，mysql提供了三大运算符:</p>\n<ul>\n<li>is null: 当列的值是 null,此运算符返回 true。</li>\n<li>is not null: 当列的值不为 null, 运算符返回 true。</li>\n<li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 null 时返回 true。</li>\n</ul>\n<blockquote>\n<p>关于 null 的条件比较运算是比较特殊的。你不能使用 = null 或 != null 在列中查找 null 值 。</p>\n</blockquote>\n<blockquote>\n<p>在 mysql 中，null 值与任何其它值的比较（即使是 null）永远返回 false，即 null = null 返回false 。</p>\n</blockquote>\n<p>mysql 中处理 null 使用 is null 和 is not null 运算符。</p>\n<p><strong>实例</strong><br>在数据库my_data中创建student表，并插入相应数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table student(ID int unsigned auto_increment primary key,name varchar(10) not null,age int unsigned) default charset=utf8;<br>Query OK, 0 rows affected (0.25 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;李华&quot;</span>,25);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;敏柔&quot;</span>,null);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;赵强&quot;</span>,null);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;罗晴&quot;</span>,23);<br>Query OK, 1 row affected (0.03 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>以下实例中你可以看到 = 和 != 运算符是不起作用的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select id,name,age=null from student;<br>+----+--------+----------+<br>| id | name   | age=null |<br>+----+--------+----------+<br>|  1 | 李华   |     NULL |<br>|  2 | 敏柔   |     NULL |<br>|  3 | 赵强   |     NULL |<br>|  4 | 罗晴   |     NULL |<br>+----+--------+----------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name,age!=null from student;<br>+----+--------+-----------+<br>| id | name   | age!=null |<br>+----+--------+-----------+<br>|  1 | 李华   |      NULL |<br>|  2 | 敏柔   |      NULL |<br>|  3 | 赵强   |      NULL |<br>|  4 | 罗晴   |      NULL |<br>+----+--------+-----------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<p>查找数据表中 age 列是否为 null，必须使用 &lt;=&gt; 、is null 和 is not null，如下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select id,name,age is null from student;<br>+----+--------+-------------+<br>| id | name   | age is null |<br>+----+--------+-------------+<br>|  1 | 李华   |           0 |<br>|  2 | 敏柔   |           1 |<br>|  3 | 赵强   |           1 |<br>|  4 | 罗晴   |           0 |<br>+----+--------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name,age&lt;=&gt;null from student;<br>+----+--------+------------+<br>| id | name   | age&lt;=&gt;null |<br>+----+--------+------------+<br>|  1 | 李华   |          0 |<br>|  2 | 敏柔   |          1 |<br>|  3 | 赵强   |          1 |<br>|  4 | 罗晴   |          0 |<br>+----+--------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"18-事务\"><a href=\"#18-事务\" class=\"headerlink\" title=\"18.事务\"></a>18.事务</h3><p>mysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>\n<ul>\n<li>在 mysql 中只有使用了 innodb 数据库引擎的数据库或表才支持事务。</li>\n<li>事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么全部执行，要么全部不执行。</li>\n<li>事务用来管理 insert,update,delete 语句</li>\n</ul>\n<p>一般来说，事务是必须满足4个条件（acid）：：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p>\n<ul>\n<li><p><strong>原子性</strong>：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>\n</li>\n<li><p><strong>一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>\n</li>\n<li><p><strong>隔离性</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。</p>\n</li>\n<li><p><strong>持久性</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>\n</li>\n</ul>\n<blockquote>\n<p>在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。</p>\n</blockquote>\n<h4 id=\"事务控制语句：\"><a href=\"#事务控制语句：\" class=\"headerlink\" title=\"事务控制语句：\"></a>事务控制语句：</h4><ul>\n<li><p>begin 或 start transaction 显式地开启一个事务；</p>\n</li>\n<li><p>commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；</p>\n</li>\n<li><p>rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p>\n</li>\n<li><p>savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；</p>\n</li>\n<li><p>release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p>\n</li>\n<li><p>rollback to identifier 把事务回滚到标记点；</p>\n</li>\n<li><p>set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。</p>\n</li>\n</ul>\n<h4 id=\"mysql-事务处理主要有两种方法：\"><a href=\"#mysql-事务处理主要有两种方法：\" class=\"headerlink\" title=\"mysql 事务处理主要有两种方法：\"></a>mysql 事务处理主要有两种方法：</h4><p>1、用 begin, rollback, commit来实现</p>\n<ul>\n<li>begin 开始一个事务</li>\n<li>rollback 事务回滚</li>\n<li>commit 事务确认</li>\n</ul>\n<p>2、直接用 set 来改变 mysql 的自动提交模式:</p>\n<ul>\n<li>set autocommit=0 禁止自动提交</li>\n<li>set autocommit=1 开启自动提交</li>\n</ul>\n<p><strong>实例</strong><br>下面具体演示MySQL事务的使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; begin; <span class=\"hljs-comment\"># 开启事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;寒梅&quot;</span>,28); <span class=\"hljs-comment\"># 插入数据</span><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 寒梅   |   28 |<br>+----+--------+------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback; <span class=\"hljs-comment\"># 回滚</span><br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;寒梅&quot;</span>,28); <span class=\"hljs-comment\"># 插入数据</span><br>Query OK, 1 row affected (0.15 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  6 | 寒梅   |   28 |<br>+----+--------+------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into student values(5,<span class=\"hljs-string\">&quot;李磊&quot;</span>,26);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;张雷&quot;</span>,20);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; <span class=\"hljs-built_in\">set</span> autocommit=0; <span class=\"hljs-comment\"># 禁止自动提交</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;韩美美&quot;</span>,20);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+-----------+------+<br>| ID | name      | age  |<br>+----+-----------+------+<br>|  1 | 李华      |   25 |<br>|  2 | 敏柔      | NULL |<br>|  3 | 赵强      | NULL |<br>|  4 | 罗晴      |   23 |<br>|  5 | 李磊      |   26 |<br>|  6 | 寒梅      |   28 |<br>|  7 | 张雷      |   20 |<br>|  8 | 莉莉      |   20 |<br>|  9 | 韩美美    |   20 |<br>+----+-----------+------+<br>9 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback; <span class=\"hljs-comment\"># 回滚</span><br>Query OK, 0 rows affected (0.16 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update student <span class=\"hljs-built_in\">set</span> age=23 <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;敏柔&quot;</span>; <span class=\"hljs-comment\"># 修改数据</span><br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; savepoint point1; <span class=\"hljs-comment\"># 创建保存点</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; update student <span class=\"hljs-built_in\">set</span> age=22 <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;赵强&quot;</span>;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   |   22 |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback to point1; <span class=\"hljs-comment\"># 回滚到保存点</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; commit; <span class=\"hljs-comment\"># 事务提交</span><br>Query OK, 0 rows affected (0.04 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"19-ALTER命令\"><a href=\"#19-ALTER命令\" class=\"headerlink\" title=\"19. ALTER命令\"></a>19. ALTER命令</h3><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL alter命令。</p>\n<h4 id=\"删除表字段\"><a href=\"#删除表字段\" class=\"headerlink\" title=\"删除表字段\"></a>删除表字段</h4><p>如下命令使用了 alter 命令及 drop 子句来删除以上创建表的 age 字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | YES  |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table table_name  drop field_name;<br>Query OK, 0 rows affected (0.92 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>如果数据表中只剩余一个字段则无法使用drop来删除字段。</p>\n<h4 id=\"增加表字段\"><a href=\"#增加表字段\" class=\"headerlink\" title=\"增加表字段\"></a>增加表字段</h4><p>mysql 中使用 add 子句来向数据表中添加列，如下实例在表 student 中添加 age 字段，并定义数据类型:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student add age int unsigned not null;<br>Query OK, 0 rows affected (0.53 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>执行以上命令后，field_name 字段会自动添加到数据表字段的末尾。</p>\n<p>如果你需要指定新增字段的位置，可以使用mysql提供的关键字 first (设定位第一列)， after 字段名（设定位于某个字段之后）。</p>\n<p>尝试以下 alter table 语句, 在执行成功后，使用 show columns 查看表结构的变化：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+-------+<br>| Field | Type             | Null | Key | Default | Extra |<br>+-------+------------------+------+-----+---------+-------+<br>| name  | varchar(10)      | NO   |     | NULL    |       |<br>| age   | int(10) unsigned | NO   |     | NULL    |       |<br>+-------+------------------+------+-----+---------+-------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student add id int unsigned auto_increment primary key first;<br>Query OK, 0 rows affected (0.56 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student add class int unsigned after id;<br>Query OK, 0 rows affected (0.54 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | int(10) unsigned | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>first 和 after 关键字可用于 add 与 modify 子句，所以如果你想重置数据表字段的位置就需要先使用 drop 删除字段然后使用 add 来添加字段并设置位置。</p>\n<h4 id=\"修改表字段\"><a href=\"#修改表字段\" class=\"headerlink\" title=\"修改表字段\"></a>修改表字段</h4><p>如果需要修改字段类型及名称, 你可以在alter命令中使用 modify 或 change 子句 。</p>\n<p>例如，把字段 class 的类型从 int unsigned 改为 varchar(10)，可以执行以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | int(10) unsigned | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student modify class varchar(10);<br>Query OK, 8 rows affected (0.69 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | varchar(10)      | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>使用 change 子句, 语法有很大的不同。 在 change 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</p>\n<p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p>\n<p>如果你不设置默认值，mysql会自动设置该字段默认为 null。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student change class class_room varchar(20) default <span class=\"hljs-string\">&quot;203&quot;</span>;<br>Query OK, 0 rows affected (0.10 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | 203     |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>你可以使用 alter 来修改字段的默认值，尝试以下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student alter class_room <span class=\"hljs-built_in\">set</span> default <span class=\"hljs-string\">&quot;205&quot;</span>;<br>Query OK, 0 rows affected (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | 205     |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>你也可以使用 alter 命令及 drop子句来删除字段的默认值，如下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student alter class_room drop default;<br>Query OK, 0 rows affected (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | NULL    |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<h4 id=\"修改数据表\"><a href=\"#修改数据表\" class=\"headerlink\" title=\"修改数据表\"></a>修改数据表</h4><p>修改数据表类型，可以使用 alter table 命令来完成。</p>\n<p>尝试以下实例，我们将表 student 的类型修改为 MyISAM ，然后再修改为 InnoDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student engine=myisam;<br>Query OK, 8 rows affected (0.28 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; show table status like <span class=\"hljs-string\">&quot;student&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: student<br>         Engine: MyISAM<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 8<br> Avg_row_length: 20<br>    Data_length: 160<br>Max_data_length: 281474976710655<br>   Index_length: 2048<br>      Data_free: 0<br> Auto_increment: 9<br>    Create_time: 2019-06-09 17:47:23<br>    Update_time: 2019-06-09 17:47:23<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table students engine=innodb;<br>Query OK, 8 rows affected (0.76 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; show table status <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;students&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: students<br>         Engine: InnoDB<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 8<br> Avg_row_length: 2048<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 0<br>      Data_free: 0<br> Auto_increment: 9<br>    Create_time: 2019-06-09 17:54:53<br>    Update_time: 2019-06-09 17:54:53<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>如果需要修改数据表的名称，可以在 alter table 语句中使用 rename 子句来实现。</p>\n<p>尝试以下实例将数据表 student 重命名为 students：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table student rename to students;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_my_data |<br>+-------------------+<br>| students          |<br>+-------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"20-临时表\"><a href=\"#20-临时表\" class=\"headerlink\" title=\"20. 临时表\"></a>20. 临时表</h3><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>\n<p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>\n<h4 id=\"创建临时表\"><a href=\"#创建临时表\" class=\"headerlink\" title=\"创建临时表\"></a>创建临时表</h4><p>使用temporary关键字创建临时表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create temporary table class_room(room_id int unsigned primary key, class varchar(20) ) default charset=utf8;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into class_room values(205,<span class=\"hljs-string\">&quot;九年级一班&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from class_room;<br>+---------+-----------------+<br>| room_id | class           |<br>+---------+-----------------+<br>|     205 | 九年级一班      |<br>+---------+-----------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; desc class_room;<br>+---------+------------------+------+-----+---------+-------+<br>| Field   | Type             | Null | Key | Default | Extra |<br>+---------+------------------+------+-----+---------+-------+<br>| room_id | int(10) unsigned | NO   | PRI | NULL    |       |<br>| class   | varchar(20)      | YES  |     | NULL    |       |<br>+---------+------------------+------+-----+---------+-------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_my_data |<br>+-------------------+<br>| students          |<br>+-------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>当你使用 show tables命令显示数据表列表时，你将无法看到 class_room表。</p>\n<p>如果你退出当前mysql会话，再使用 select命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p>\n<h4 id=\"删除临时表\"><a href=\"#删除临时表\" class=\"headerlink\" title=\"删除临时表\"></a>删除临时表</h4><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。</p>\n<p>以下是手动删除临时表的实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; drop table class_room;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from class_room;<br>ERROR 1146 (42S02): Table <span class=\"hljs-string\">&#x27;my_data.class_room&#x27;</span> doesn<span class=\"hljs-string\">&#x27;t exist</span><br><span class=\"hljs-string\"></span><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"21-复制表\"><a href=\"#21-复制表\" class=\"headerlink\" title=\"21. 复制表\"></a>21. 复制表</h3><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用create table … select 命令，是无法实现的。</p>\n<p><strong>实例</strong><br>尝试以下实例来复制表 runoob_tbl 。</p>\n<p>步骤一：</p>\n<p>获取数据表的完整结构。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; show create table students\\G;<br>*************************** 1. row ***************************<br>       Table: students<br>Create Table: CREATE TABLE `students` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `name` varchar(10) NOT NULL,<br>  `class_room` varchar(20) DEFAULT <span class=\"hljs-string\">&#x27;205&#x27;</span>,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>ERROR:<br>No query specified<br><br></code></pre></div></td></tr></table></figure>\n<p>步骤二：</p>\n<p>修改SQL语句的数据表名，并执行SQL语句。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table `student` (`id` int(10) unsigned not null auto_increment,`name` varchar(10) not null,`class_room` varchar(20) default <span class=\"hljs-string\">&#x27;205&#x27;</span>, primary key (`id`)) engine=innodb auto_increment=9 default charset=utf8;<br>Query OK, 0 rows affected (0.59 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>步骤三：</p>\n<p>执行完第二步骤后，你将在数据库中创建新的克隆表 student。 如果你想拷贝数据表的数据你可以使用 insert into… select 语句来实现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; insert into student(id,name,class_room) select * from students;<br>Query OK, 8 rows affected (0.00 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------------+<br>| id | name   | class_room |<br>+----+--------+------------+<br>|  1 | 李华   | 205        |<br>|  2 | 敏柔   | 205        |<br>|  3 | 赵强   | 205        |<br>|  4 | 罗晴   | 205        |<br>|  5 | 李磊   | 205        |<br>|  6 | 寒梅   | 205        |<br>|  7 | 张雷   | 205        |<br>|  8 | 莉莉   | 205        |<br>+----+--------+------------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h3 id=\"22-处理重复数据\"><a href=\"#22-处理重复数据\" class=\"headerlink\" title=\"22. 处理重复数据\"></a>22. 处理重复数据</h3><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p>\n<h4 id=\"防止表中出现重复数据\"><a href=\"#防止表中出现重复数据\" class=\"headerlink\" title=\"防止表中出现重复数据\"></a>防止表中出现重复数据</h4><p>你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</p>\n<p>如果你想设置表中字段 id，name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table teachers(id int unsigned auto_increment, name varchar(10), gender varchar(5), primary key(id,name));<br>Query OK, 0 rows affected (0.26 sec)<br><br>mysql&gt; desc teachers;<br>+--------+------------------+------+-----+---------+----------------+<br>| Field  | Type             | Null | Key | Default | Extra          |<br>+--------+------------------+------+-----+---------+----------------+<br>| id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name   | varchar(10)      | NO   | PRI | NULL    |                |<br>| gender | varchar(5)       | YES  |     | NULL    |                |<br>+--------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p>\n<p>insert ignore into 与 insert into 的区别就是 insert ignore 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; insert into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>ERROR 1062 (23000): Duplicate entry <span class=\"hljs-string\">&#x27;1-李磊&#x27;</span> <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-string\">&#x27;PRIMARY&#x27;</span><br><br>mysql&gt; insert ignore into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; replace into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 2 rows affected (0.00 sec)<br><br>mysql&gt; select * from teachers;<br>+----+--------+--------+<br>| id | name   | gender |<br>+----+--------+--------+<br>|  1 | 李磊   | 女     |<br>+----+--------+--------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table person(first_name char(20) not null, last_name char(20) not null, gender char(10),unique (last_name, first_name)) charset=utf8;<br>Query OK, 0 rows affected (0.25 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;雷&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;雷&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from person;<br>+------------+-----------+--------+<br>| first_name | last_name | gender |<br>+------------+-----------+--------+<br>| 李         | 丽        | 女     |<br>| 李         | 雷        | 男     |<br>+------------+-----------+--------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"统计重复数据\"><a href=\"#统计重复数据\" class=\"headerlink\" title=\"统计重复数据\"></a>统计重复数据</h4><p>以下我们将统计表中 first_name 和 last_name的重复记录数：</p>\n<ul>\n<li>创建person_info表，并插入3条重复数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table person_info(id int unsigned primary key auto_increment,first_name char(20) not null, last_name char(20) not null, gender char(10)) charset=utf8;<br>Query OK, 0 rows affected (0.29 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from person_info;<br>+----+------------+-----------+--------+<br>| id | first_name | last_name | gender |<br>+----+------------+-----------+--------+<br>|  1 | 李         | 丽        | 女     |<br>|  2 | 李         | 丽        | 女     |<br>|  3 | 李         | 丽        | 女     |<br>+----+------------+-----------+--------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>查询重复数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select count(*) as repetitions,last_name,first_name from person_info group by last_name, first_name having repetitions &gt; 1;<br>+-------------+-----------+------------+<br>| repetitions | last_name | first_name |<br>+-------------+-----------+------------+<br>|           3 | 丽        | 李         |<br>+-------------+-----------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>以上查询将返回 person_info 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p>\n<ul>\n<li>确定哪一列包含的值可能会重复。</li>\n<li>在列选择列表使用count(*)列出的那些列。</li>\n<li>在group by子句中列出的列。</li>\n<li>having子句设置重复数大于1。</li>\n</ul>\n<h4 id=\"过滤重复数据\"><a href=\"#过滤重复数据\" class=\"headerlink\" title=\"过滤重复数据\"></a>过滤重复数据</h4><p>如果你需要读取不重复的数据可以在 select 语句中使用 distinct 关键字来过滤重复数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select distinct first_name,last_name from person_info;<br>+------------+-----------+<br>| first_name | last_name |<br>+------------+-----------+<br>| 李         | 丽        |<br>+------------+-----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></div></td></tr></table></figure>\n<p>你也可以使用 group by 来读取数据表中不重复的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; select first_name, last_name  from person_info group by last_name, first_name;<br>+------------+-----------+<br>| first_name | last_name |<br>+------------+-----------+<br>| 李         | 丽        |<br>+------------+-----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></div></td></tr></table></figure>\n<h4 id=\"删除重复数据\"><a href=\"#删除重复数据\" class=\"headerlink\" title=\"删除重复数据\"></a>删除重复数据</h4><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p>\n<h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>先创建临时表tab,新表tab中的数据时从person_info表中分组查询出来的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; create table tmp select last_name, first_name, gender from person_info  group by last_name, first_name, gender;<br>Query OK, 1 row affected (0.01 sec)<br>Records: 1  Duplicates: 0  Warnings: 0<br></code></pre></div></td></tr></table></figure>\n<p>在表的第一位添加主键</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">alter table tmp add column `id` bigint(20) primary key not null auto_increment comment <span class=\"hljs-string\">&#x27;id&#x27;</span> first;<br></code></pre></div></td></tr></table></figure>\n<p>删除原表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; drop table person_info;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></div></td></tr></table></figure>\n<p>重命名为person_info</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">mysql&gt; alter table tmp rename to person_info;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>学习数据库安装后，最重要的就是学习SQL语句。</p>\n<h3 id=\"1-数据语句操作类型\"><a href=\"#1-数据语句操作类型\" class=\"headerlink\" title=\"1. 数据语句操作类型\"></a>1. 数据语句操作类型</h3><p>SQL是操作数据库的核心，</p>\n<p>结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。</p>\n<p>SQL是最重要的关系数据库操作语言，并且它的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索等。</p>\n<p>SQL是关系模型的数据库应用语言，由IBM在20世纪70年代为其关系型数据库 System R 所开发。</p>\n<p>SQL 是1986年10 月由美国国家标准局（ANSI）通过的数据库语言美国标准，接着，国际标准化组织（ISO）颁布了SQL正式国际标准。1989年4月，ISO提出了具有完整性特征的SQL89标准，1992年11月又公布了SQL92标准。</p>\n<p>虽然各个数据库系统略有不同，但是他们基本均遵循SQL 92标准。或者在SQL 92上做了一些简单的扩展和变化。</p>\n<p>学好了MySQL 的SQL 语法，其他的SQL语法学习起来均是万变不离其中。</p>\n<p>SQL语句按照其功能范围不同可分为3个类别：</p>\n<ol>\n<li><strong>数据定义语言</strong>(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。</li>\n<li><strong>数据操作语言</strong>(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。</li>\n<li><strong>数据控制语言</strong>(DCL， Data Control Language)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。</li>\n</ol>\n<h3 id=\"2-管理数据库命令\"><a href=\"#2-管理数据库命令\" class=\"headerlink\" title=\"2. 管理数据库命令\"></a>2. 管理数据库命令</h3><h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>以下命令语句可以在 MySQL 的命令提示符使用，获取服务器元数据</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">select version( )</td>\n<td align=\"left\">服务器版本信息</td>\n</tr>\n<tr>\n<td align=\"center\">select database( )</td>\n<td align=\"left\">当前数据库名 (或者返回空)</td>\n</tr>\n<tr>\n<td align=\"center\">select user( )</td>\n<td align=\"left\">当前用户名</td>\n</tr>\n<tr>\n<td align=\"center\">show status</td>\n<td align=\"left\">服务器状态</td>\n</tr>\n<tr>\n<td align=\"center\">show variables</td>\n<td align=\"left\">服务器配置变量</td>\n</tr>\n</tbody></table>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><ul>\n<li>create database 数据库名:<br>创建数据库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create database data_test;<br>Query OK, 1 row affected (0.01 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h4><ul>\n<li>drop database 数据库名:<br>删除数据库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; drop database data_test;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"展示所有数据库\"><a href=\"#展示所有数据库\" class=\"headerlink\" title=\"展示所有数据库\"></a>展示所有数据库</h4><ul>\n<li>show databases:<br>列出 MySQL 数据库管理系统的数据库列表。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| data_test          |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"改变数据库\"><a href=\"#改变数据库\" class=\"headerlink\" title=\"改变数据库\"></a>改变数据库</h4><ul>\n<li>use 数据库名 :<br>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; use data_test;<br>Database changed<br></code></pre></td></tr></table></figure>\n<h4 id=\"展示当前数据库中所有的表\"><a href=\"#展示当前数据库中所有的表\" class=\"headerlink\" title=\"展示当前数据库中所有的表\"></a>展示当前数据库中所有的表</h4><ul>\n<li>show tables:<br>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show tables;<br>+---------------------+<br>| Tables_in_data_test |<br>+---------------------+<br>| customers           |<br>| orderitems          |<br>| orders              |<br>| productnotes        |<br>| products            |<br>| vendors             |<br>+---------------------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"展示特定表中每列的信息\"><a href=\"#展示特定表中每列的信息\" class=\"headerlink\" title=\"展示特定表中每列的信息\"></a>展示特定表中每列的信息</h4><ul>\n<li>show columns from 数据表(desc 数据表):<br>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show columns from customers;<br>+--------------+-----------+------+-----+---------+----------------+<br>| Field        | Type      | Null | Key | Default | Extra          |<br>+--------------+-----------+------+-----+---------+----------------+<br>| cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |<br>| cust_name    | char(50)  | NO   |     | NULL    |                |<br>| cust_address | char(50)  | YES  |     | NULL    |                |<br>| cust_city    | char(50)  | YES  |     | NULL    |                |<br>| cust_state   | char(5)   | YES  |     | NULL    |                |<br>| cust_zip     | char(10)  | YES  |     | NULL    |                |<br>| cust_country | char(50)  | YES  |     | NULL    |                |<br>| cust_contact | char(50)  | YES  |     | NULL    |                |<br>| cust_email   | char(255) | YES  |     | NULL    |                |<br>+--------------+-----------+------+-----+---------+----------------+<br>9 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"展示数据表的详细索引信息\"><a href=\"#展示数据表的详细索引信息\" class=\"headerlink\" title=\"展示数据表的详细索引信息\"></a>展示数据表的详细索引信息</h4><ul>\n<li>show index from 数据表:<br>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show index from customers;<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| customers |          0 | PRIMARY  |            1 | cust_id     | A         |           5 |  NULL    |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"展示数据库的性能及统计信息\"><a href=\"#展示数据库的性能及统计信息\" class=\"headerlink\" title=\"展示数据库的性能及统计信息\"></a>展示数据库的性能及统计信息</h4><ul>\n<li>show table status [from db_name] [like ‘pattern’] \\G:<br>该命令将输出Mysql数据库管理系统的性能及统计信息。</li>\n</ul>\n<blockquote>\n<p>显示数据库 data_test 中所有表的信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test;<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| Name         | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| customers    | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| orderitems   | InnoDB |      10 | Dynamic    |   11 |           1489 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |<br>| orders       | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |        16384 |         0 |          20010 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| productnotes | MyISAM |      10 | Dynamic    |   14 |            135 |        1892 | 281474976710655 |         6144 |         0 |            115 | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |<br>| products     | InnoDB |      10 | Dynamic    |   14 |           1170 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>| vendors      | InnoDB |      10 | Dynamic    |    6 |           2730 |       16384 |               0 |            0 |         0 |           1007 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.02 sec)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>表名以cus开头的表的信息</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test like <span class=\"hljs-string\">&quot;cus%&quot;</span>;<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| Name      | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>| customers | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |<br>+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>表名以cus开头的表的信息;<br>加上 \\G，查询结果按列打印;\\G后面不能再加分号;<br>因为\\G在功能上等同于;<br>如果加了分号，那么就是;;(2个分号)，SQL语法错误<code>ERROR:No query specified</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show table status from data_test like <span class=\"hljs-string\">&quot;cus%&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: customers<br>         Engine: InnoDB<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 5<br> Avg_row_length: 3276<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 0<br>      Data_free: 0<br> Auto_increment: 10006<br>    Create_time: 2019-05-26 10:15:02<br>    Update_time: 2019-05-26 10:15:25<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h3><h4 id=\"数值类型\"><a href=\"#数值类型\" class=\"headerlink\" title=\"数值类型\"></a>数值类型</h4><p>mysql支持所有标准sql数值数据类型。</p>\n<p>这些类型包括严格数值数据类型（integer、smallint、decimal和numeric），以及近似数值数据类型（float、real和double precisi键字int是integer的同义词，关键字dec是decimal的同义词。</p>\n<p>bit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。</p>\n<p>作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">大小</th>\n<th align=\"left\">范围（有符号）</th>\n<th align=\"left\">范围（无符号）</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>tinyint</strong></td>\n<td align=\"center\">1 字节</td>\n<td align=\"left\">(-128，127)</td>\n<td align=\"left\">(0，255)</td>\n<td align=\"center\">小整数值</td>\n</tr>\n<tr>\n<td align=\"center\">smallint</td>\n<td align=\"center\">2 字节</td>\n<td align=\"left\">(-32 768，32 767)</td>\n<td align=\"left\">(0，65 535)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\">mediumint</td>\n<td align=\"center\">3 字节</td>\n<td align=\"left\">(-8 388 608，8 388 607)</td>\n<td align=\"left\">(0，16 777 215)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>int</strong> 或 <strong>integer</strong></td>\n<td align=\"center\">4 字节</td>\n<td align=\"left\">(-2 147 483 648，2 147 483 647)</td>\n<td align=\"left\">(0，4 294 967 295)</td>\n<td align=\"center\">大整数值</td>\n</tr>\n<tr>\n<td align=\"center\">bigint</td>\n<td align=\"center\">8 字节</td>\n<td align=\"left\">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>\n<td align=\"left\">(0，18 446 744 073 709 551 615)</td>\n<td align=\"center\">极大整数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>float</strong></td>\n<td align=\"center\">4 字节</td>\n<td align=\"left\">(-3.402 823 466 e+38，-1.175 494 351 e-38)，0，(1.175 494 351 e-38，3.402 823 466 351 e+38)</td>\n<td align=\"left\">0，(1.175 494 351 e-38，3.402 823 466 e+38)</td>\n<td align=\"center\">单精度<br/>浮点数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>double</strong></td>\n<td align=\"center\">8 字节</td>\n<td align=\"left\">(-1.797 693 134 862 315 7 e+308，-2.225 073 858 507 201 4 e-308)，0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>\n<td align=\"left\">0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>\n<td align=\"center\">双精度<br/> 浮点数值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>decimal</strong></td>\n<td align=\"center\">decimal(m,d)</td>\n<td align=\"left\">依赖于 m 和 d 的值</td>\n<td align=\"left\">依赖于 m 和 d 的值</td>\n<td align=\"center\">小数值</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"日期和时间类型\"><a href=\"#日期和时间类型\" class=\"headerlink\" title=\"日期和时间类型\"></a>日期和时间类型</h4><p>表示时间值的日期和时间类型为 datetime、date、timestamp、time 和 year。</p>\n<p>每个时间类型有一个有效值范围和一个 “零” 值，当指定不合法的 mysql 不能表示的值时使用 “零” 值。</p>\n<p>timestamp 类型有专有的自动更新特性，将在后面描述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">大小(字节)</th>\n<th align=\"left\">范围</th>\n<th align=\"center\">格式</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>date</strong></td>\n<td align=\"center\">3</td>\n<td align=\"left\">1000-01-01/9999-12-31</td>\n<td align=\"center\">yyyy-mm-dd</td>\n<td align=\"center\">日期值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>time</strong></td>\n<td align=\"center\">3</td>\n<td align=\"left\">‘-838:59:59’/‘838:59:59’</td>\n<td align=\"center\">hh:mm:ss</td>\n<td align=\"center\">时间值或持续时间</td>\n</tr>\n<tr>\n<td align=\"center\">year</td>\n<td align=\"center\">1</td>\n<td align=\"left\">1901/2155</td>\n<td align=\"center\">yyyy</td>\n<td align=\"center\">年份值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>datetime</strong></td>\n<td align=\"center\">8</td>\n<td align=\"left\">1000-01-01 00:00:00/9999-12-31 23:59:59</td>\n<td align=\"center\">yyyy-mm-dd hh:mm:ss</td>\n<td align=\"center\">混合日期和时间值</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>timestamp</strong></td>\n<td align=\"center\">4</td>\n<td align=\"left\">1970-01-01 00:00:00/2038<br/>结束时间是第 <strong>2147483647</strong> 秒<br/>北京时间 <strong>2038-1-19 11:14:07</strong><br/>格林尼治时间<strong>2038-1-19 03:14:07</strong></td>\n<td align=\"center\">yyyymmdd hhmmss</td>\n<td align=\"center\">混合日期和时间值，时间戳</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h4><p>字符串类型指 char、varchar、binary、varbinary、blob、text、enum 和 set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">大小</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>char</strong></td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">定长字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>varchar</strong></td>\n<td align=\"left\">0-65535 字节</td>\n<td align=\"left\">变长字符串</td>\n</tr>\n<tr>\n<td align=\"left\">tinyblob</td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">不超过 255 个字符的二进制字符串</td>\n</tr>\n<tr>\n<td align=\"left\">tinytext</td>\n<td align=\"left\">0-255 字节</td>\n<td align=\"left\">短文本字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>blob</strong></td>\n<td align=\"left\">0-65 535 字节</td>\n<td align=\"left\">二进制形式的长文本数据</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>text</strong></td>\n<td align=\"left\">0-65 535 字节</td>\n<td align=\"left\">长文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">mediumblob</td>\n<td align=\"left\">0-16 777 215 字节</td>\n<td align=\"left\">二进制形式的中等长度文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">mediumtext</td>\n<td align=\"left\">0-16 777 215 字节</td>\n<td align=\"left\">中等长度文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">longblob</td>\n<td align=\"left\">0-4 294 967 295 字节</td>\n<td align=\"left\">二进制形式的极大文本数据</td>\n</tr>\n<tr>\n<td align=\"left\">longtext</td>\n<td align=\"left\">0-4 294 967 295 字节</td>\n<td align=\"left\">极大文本数据</td>\n</tr>\n</tbody></table>\n<p>char 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n<p>binary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n<p>blob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。</p>\n<p>有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。</p>\n<blockquote>\n<p>注意：</p>\n</blockquote>\n<p>1、一个汉字占多少长度与编码有关：</p>\n<p>UTF－8：一个汉字＝3个字节</p>\n<p>GBK：一个汉字＝2个字节</p>\n<p>2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别</p>\n<p>3、MySQL 检查长度，可用 SQL 语言来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select length(fieldname) from table_name<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-创建数据表\"><a href=\"#4-创建数据表\" class=\"headerlink\" title=\"4. 创建数据表\"></a>4. 创建数据表</h3><p>创建MySQL数据表需要以下信息：</p>\n<ul>\n<li>表名</li>\n<li>表字段名</li>\n<li>定义每个表字段</li>\n</ul>\n<p><strong>语法</strong><br>以下为创建MySQL数据表的SQL通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">create table table_name (column_name column_type);<br></code></pre></td></tr></table></figure>\n<p><strong>实例</strong><br>以下例子中我们将在 my_data 数据库中创建数据表students：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table <span class=\"hljs-keyword\">if</span> not exists students(id int unsigned auto_increment, name varchar(40) not null, adress varchar(100) , birthday date not null, primary key(id)) engine=innodb default charset=utf8mb4;<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; show columns from students;<br>+----------+------------------+------+-----+---------+----------------+<br>| Field    | Type             | Null | Key | Default | Extra          |<br>+----------+------------------+------+-----+---------+----------------+<br>| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name     | varchar(40)      | NO   |     | NULL    |                |<br>| adress   | varchar(100)     | YES  |     | NULL    |                |<br>| birthday | date             | NO   |     | NULL    |                |<br>+----------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<p>实例解析：</p>\n<ul>\n<li>如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为null ，就会报错。</li>\n<li>auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。</li>\n<li>primary key关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>\n<li>engine 设置存储引擎，charset 设置编码。</li>\n</ul>\n<h3 id=\"5-删除数据表\"><a href=\"#5-删除数据表\" class=\"headerlink\" title=\"5. 删除数据表\"></a>5. 删除数据表</h3><p>MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p>\n<p><strong>语法</strong><br>以下为删除MySQL数据表的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">drop table table_name;<br></code></pre></td></tr></table></figure>\n<p><strong>实例</strong><br>以下实例中我们将删除 students 表:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; drop table students;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; show tables;<br>Empty <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h3 id=\"6-插入数据\"><a href=\"#6-插入数据\" class=\"headerlink\" title=\"6. 插入数据\"></a>6. 插入数据</h3><p>MySQL 表中使用 insert into SQL语句来插入数据。</p>\n<p><strong>语法</strong><br>以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">insert into table_name ( field1, field2,...fieldN ) values ( value1, value2,...valueN );<br></code></pre></td></tr></table></figure>\n<p>insert 插入多条数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">insert into table_name  (field1, field2,...fieldn)  values  (valuea1,valuea2,...valuean),(valueb1,valueb2,...valuebn),(valuec1,valuec2,...valuecn)......;<br></code></pre></td></tr></table></figure>\n<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>\n<p><strong>实例</strong><br>以下实例中我们将向 students 表插入数据:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 主键默认从1开始</span><br>mysql&gt; insert into students (name,birthday) values(<span class=\"hljs-string\">&quot;丽丽&quot;</span>,<span class=\"hljs-string\">&quot;1996-05-06&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class=\"hljs-comment\"># 主键设为0，即从最后一个id值自动增长</span><br>mysql&gt; insert into students values(0,<span class=\"hljs-string\">&quot;李明&quot;</span>,null,<span class=\"hljs-string\">&quot;1993-12-16&quot;</span>);<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; insert into students values(10,<span class=\"hljs-string\">&quot;张磊&quot;</span>,<span class=\"hljs-string\">&#x27;北京市海淀区&#x27;</span>,<span class=\"hljs-string\">&quot;1995-04-12&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class=\"hljs-comment\"># 主键不设置，从最后一个id值自动增长</span><br>mysql&gt; insert into students <span class=\"hljs-built_in\">set</span> name=<span class=\"hljs-string\">&quot;孙雨&quot;</span>,adress=<span class=\"hljs-string\">&#x27;河北省石家庄市&#x27;</span>,birthday=<span class=\"hljs-string\">&quot;1989-07-18&quot;</span>;<br>Query OK, 1 row affected (0.01 sec)<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为0或者null，这样添加数据可以自增</p>\n</blockquote>\n<h3 id=\"7-条件语句\"><a href=\"#7-条件语句\" class=\"headerlink\" title=\"7. 条件语句\"></a>7. 条件语句</h3><ul>\n<li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用where语句来设定查询条件。</li>\n<li>where 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>\n<li>以下为操作符列表，可用于 where 子句中。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以使用 and 或者 or 指定一个或多个条件。</li>\n<li>WHERE 子句也可以运用于 SQL 的 delete 或者 update 命令。</li>\n</ul>\n<blockquote>\n<p>下表中实例假定 A 为 10, B 为 20</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">=</td>\n<td align=\"left\">等号，检测两个值是否相等，如果相等返回true</td>\n<td align=\"left\">(A = B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"left\">不等于，检测两个值是否相等，如果不相等返回true</td>\n<td align=\"left\">(A != B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"left\">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td>\n<td align=\"left\">(A &gt; B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"left\">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td>\n<td align=\"left\">(A &lt; B) 返回 true。</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;=</td>\n<td align=\"left\">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td>\n<td align=\"left\">(A &gt;= B) 返回false。</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;=</td>\n<td align=\"left\">小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td>\n<td align=\"left\">(A &lt;= B) 返回 true。</td>\n</tr>\n</tbody></table>\n<p>如果我们想在 MySQL 数据表中读取指定的数据，where 子句是非常有用的。</p>\n<p>使用主键来作为 where 子句的条件查询是非常快速的。</p>\n<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>\n<h3 id=\"8-查询数据\"><a href=\"#8-查询数据\" class=\"headerlink\" title=\"8. 查询数据\"></a>8. 查询数据</h3><p>MySQL 数据库使用SQL select语句来查询数据。</p>\n<p><strong>语法</strong><br>以下为在MySQL数据库中查询数据通用的 select 语法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select column_name,column_name<br>from table_name<br>[<span class=\"hljs-built_in\">where</span> Clause]<br>[<span class=\"hljs-built_in\">limit</span> N][ offset M]<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用where语句来设定查询条件。</li>\n<li>select 命令可以读取一条或者多条记录。</li>\n<li>你可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据</li>\n<li>你可以使用 limit 属性来设定返回的记录数。</li>\n<li>你可以通过offset指定select语句开始查询的数据偏移量。默认情况下偏移量为0。</li>\n</ul>\n<p><strong>实例</strong><br>以下实例我们将通过 SQL select 命令来获取 MySQL 数据表 students 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from students;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>|  1 | 丽丽 | NULL           | 1996-05-06 |<br>|  2 | 李明 | NULL           | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区    | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市  | 1989-07-18 |<br>+----+------+----------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name from students <span class=\"hljs-built_in\">limit</span> 2 offset 1;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  2 | 李明 |<br>| 10 | 张磊 |<br>+----+------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> id&gt;=10;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> id&gt;=10 <span class=\"hljs-built_in\">limit</span> 1 offset 1;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;李明&quot;</span>;<br>+----+------+--------+------------+<br>| id | name | adress | birthday   |<br>+----+------+--------+------------+<br>|  2 | 李明 | NULL   | 1993-12-16 |<br>+----+------+--------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h3 id=\"9-修改数据\"><a href=\"#9-修改数据\" class=\"headerlink\" title=\"9. 修改数据\"></a>9. 修改数据</h3><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL update 命令来操作。</p>\n<p><strong>语法</strong><br>以下是 update 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">update table_name <span class=\"hljs-built_in\">set</span> field1=new-value1, field2=new-value2 [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></td></tr></table></figure>\n<p>当我们需要将字段中的特定字符串批量修改为其他字符串时，可已使用以下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">update table_name <span class=\"hljs-built_in\">set</span> field=replace(field, <span class=\"hljs-string\">&#x27;old-string&#x27;</span>, <span class=\"hljs-string\">&#x27;new-string&#x27;</span>) [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></td></tr></table></figure>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。<br>当你需要更新数据表中指定行的数据时 where 子句是非常有用的。</li>\n</ul>\n<p><strong>实例</strong><br>以下我们将在 SQL update 命令使用 where 子句来更新 students 表中指定的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; update students <span class=\"hljs-built_in\">set</span> adress=<span class=\"hljs-string\">&quot;北京市昌平区&quot;</span> <span class=\"hljs-built_in\">where</span> adress is null;<br>Query OK, 2 rows affected (0.01 sec)<br>Rows matched: 2  Changed: 2  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+----------------+------------+<br>| id | name | adress         | birthday   |<br>+----+------+----------------+------------+<br>|  1 | 丽丽 | 北京市昌平区   | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区   | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |<br>| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |<br>+----+------+----------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update students <span class=\"hljs-built_in\">set</span> adress=replace(adress, <span class=\"hljs-string\">&quot;河北省石家庄&quot;</span>,<span class=\"hljs-string\">&quot;湖北省武汉&quot;</span>) wh<br>ere id=11;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>| 10 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |<br>+----+------+--------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update students <span class=\"hljs-built_in\">set</span> id=id-7 <span class=\"hljs-built_in\">where</span> id=10;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |<br>+----+------+--------------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h3 id=\"10-删除数据\"><a href=\"#10-删除数据\" class=\"headerlink\" title=\"10. 删除数据\"></a>10. 删除数据</h3><p>你可以使用 sql 的 delete from 命令来删除 mysql 数据表中的记录。</p>\n<p><strong>语法</strong><br>以下是 sql delete 语句从 mysql 数据表中删除数据的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">delete from table_name [<span class=\"hljs-built_in\">where</span> clause]<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果没有指定 where 子句，mysql 表中的所有记录将被删除。</li>\n<li>你可以在 where 子句中指定任何条件</li>\n<li>您可以在单个表中一次性删除记录。<br>当你想删除数据表中指定的记录时 where 子句是非常有用的。</li>\n</ul>\n<p><strong>实例</strong><br>这里我们将在 sql delete 命令中使用 where 子句来删除 mysql 数据表 students 所选的数据:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; delete from students <span class=\"hljs-built_in\">where</span> id=11;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>delete，drop，truncate 都有删除表的作用，区别在于：</p>\n</blockquote>\n<p>1、drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">drop table students;<br></code></pre></td></tr></table></figure>\n<p>2、truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">truncate table students;<br></code></pre></td></tr></table></figure>\n<p>3、delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;</p>\n<p>实例，删除学生表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">delete from students;<br></code></pre></td></tr></table></figure>\n<p>4、delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;</p>\n<p>实例，删除学生表中姓名为 “张三” 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">delete from student <span class=\"hljs-built_in\">where</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>5、delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;</p>\n<p>实例，删除学生表中姓名为 “张三” 的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">delete from student <span class=\"hljs-built_in\">where</span> name = <span class=\"hljs-string\">&quot;张三&quot;</span>;<br></code></pre></td></tr></table></figure>\n<p>实例，释放学生表的表空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">optimize table students;<br></code></pre></td></tr></table></figure>\n<p>6、delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。</p>\n<h3 id=\"11-包含条件\"><a href=\"#11-包含条件\" class=\"headerlink\" title=\"11. 包含条件\"></a>11. 包含条件</h3><p>我们知道在 mysql 中使用 sql select 命令来读取数据， 同时我们可以在 select 语句中使用 where 子句来获取指定的记录。</p>\n<p>where 子句中可以使用等号 = 来设定获取数据的条件，如 “adress = ‘北京市昌平区’”。</p>\n<p>但是有时候我们需要获取 adress 字段含有 “北京市” 字符的所有记录，这时我们就需要在 where 子句中使用 sql like 子句。</p>\n<p><strong>语法</strong><br>以下是 sql select 语句使用 like 子句从数据表中读取数据的通用语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select field1, field2,...fieldn from table_name <span class=\"hljs-built_in\">where</span> field1 like condition1 [and [or]] filed2 = <span class=\"hljs-string\">&#x27;somevalue&#x27;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>sql like 子句中使用百分号 %字符来表示任意字符，类似于unix或正则表达式中的星号 *。</li>\n<li>如果没有使用百分号 %, like 子句与等号 = 的效果是一样的。</li>\n<li>like 通常与 % 一同使用，类似于一个元字符的搜索。</li>\n<li>可以使用 and 或者 or 指定一个或多个条件。</li>\n<li>可以在 delete、select或 update 命令中使用 where…like 子句来指定条件。</li>\n</ul>\n<p><strong>实例</strong><br>以下我们将在 sql select 命令中使用 where…like 子句来从mysql数据表 students 中读取数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span>;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在 where like 的条件查询中，SQL 提供了四种匹配方式。</p>\n</blockquote>\n<ul>\n<li><code>%</code>：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。</li>\n<li><code>_</code>：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。</li>\n<li><code>[]</code>：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</li>\n<li><code>[^]</code>：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。</li>\n<li>查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。</li>\n</ul>\n<blockquote>\n<p>like 匹配/模糊匹配，会与 % 和 _ 结合使用。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&#x27;%a&#x27;</span>     //以a结尾的数据<br><span class=\"hljs-string\">&#x27;a%&#x27;</span>     //以a开头的数据<br><span class=\"hljs-string\">&#x27;%a%&#x27;</span>    //含有a的数据<br><span class=\"hljs-string\">&#x27;_a_&#x27;</span>    //三位且中间字母是a的<br><span class=\"hljs-string\">&#x27;_a&#x27;</span>     //两位且结尾字母是a的<br><span class=\"hljs-string\">&#x27;a_&#x27;</span>     //两位且开头字母是a的<br></code></pre></td></tr></table></figure>\n<h3 id=\"12-关联查询\"><a href=\"#12-关联查询\" class=\"headerlink\" title=\"12. 关联查询\"></a>12. 关联查询</h3><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p>\n<p><strong>语法</strong><br>mysql union 操作符语法格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select expression1, expression2, ... expression_n<br>from tables<br>[<span class=\"hljs-built_in\">where</span> conditions]<br>union [all | distinct]<br>select expression1, expression2, ... expression_n<br>from tables<br>[<span class=\"hljs-built_in\">where</span> conditions];<br></code></pre></td></tr></table></figure>\n<p><strong>参数</strong></p>\n<ul>\n<li><p>expression1, expression2, … expression_n: 要检索的列。</p>\n</li>\n<li><p>tables: 要检索的数据表。</p>\n</li>\n<li><p>where conditions: 可选， 检索条件。</p>\n</li>\n<li><p>distinct: 可选，删除结果集中重复的数据。默认情况下 union 操作符已经删除了重复数据，所以 distinct 修饰符对结果没啥影响。</p>\n</li>\n<li><p>all: 可选，返回所有结果集，包含重复数据。</p>\n</li>\n</ul>\n<p><strong>实例</strong><br>下面的 SQL 语句从 “students” 和 “teachers” 表中选取所有不同的adress（只有不同的值）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from students;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from teachers;<br>+----+--------+--------------+----------+<br>| id | name   | adress       | birthday |<br>+----+--------+--------------+----------+<br>|  1 | 刘老师 | 北京市海淀区 | NULL     |<br>|  2 | 孙老师 | 北京市朝阳区 | NULL     |<br>|  3 | 常老师 | 北京市昌平区 | NULL     |<br>+----+--------+--------------+----------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select adress from students union select adress from teachers ;<br>+--------------+<br>| adress       |<br>+--------------+<br>| 北京市昌平区 |<br>| 北京市海淀区 |<br>| 北京市朝阳区 |<br>+--------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;%昌平区&quot;</span> union select name from teachers <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;%昌平区&quot;</span> ;<br>+--------+<br>| name   |<br>+--------+<br>| 丽丽   |<br>| 李明   |<br>| 常老师 |<br>+--------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）<br>UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p>\n</blockquote>\n<h3 id=\"13-排序\"><a href=\"#13-排序\" class=\"headerlink\" title=\"13. 排序\"></a>13. 排序</h3><p>我们知道从 mysql 表中使用 sql select 语句来读取数据。</p>\n<p>如果我们需要对读取的数据进行排序，我们就可以使用 mysql 的 order by 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p>\n<p><strong>语法</strong><br>以下是 sql select 语句使用 order by 子句将查询数据排序后再返回数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select field1, field2,...fieldn table_name1, table_name2... order by field1 [asc [desc][默认 asc]], [field2...] [asc [desc][默认 asc]]<br></code></pre></td></tr></table></figure>\n<ul>\n<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>\n<li>你可以设定多个字段来排序。</li>\n<li>你可以使用 asc 或 desc 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>\n<li>你可以添加 where…like 子句来设置条件。</li>\n</ul>\n<p><strong>实例</strong><br>尝试以下实例，结果将按升序及降序排列。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday desc;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select * from students <span class=\"hljs-built_in\">where</span> adress like <span class=\"hljs-string\">&quot;北京市%&quot;</span> order by birthday asc;<br>+----+------+--------------+------------+<br>| id | name | adress       | birthday   |<br>+----+------+--------------+------------+<br>|  2 | 李明 | 北京市昌平区 | 1993-12-16 |<br>|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |<br>|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |<br>+----+------+--------------+------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h3 id=\"14-分组\"><a href=\"#14-分组\" class=\"headerlink\" title=\"14. 分组\"></a>14. 分组</h3><p>group by 语句根据一个或多个列对结果集进行分组。<br>在分组的列上我们可以使用 count, sum, avg等函数。</p>\n<p><strong>语法</strong><br>以下是gruop by语句的语法示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select column_name, <span class=\"hljs-keyword\">function</span>(column_name) from table_name <span class=\"hljs-built_in\">where</span> column_name operator value group by column_name;<br></code></pre></td></tr></table></figure>\n<p><strong>实例</strong><br>接下来我们使用 group by 语句 将数据表按名字进行分组，并统计每个商品有多少条记录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from goods;<br>+----+--------+------+<br>| id | name   | nums |<br>+----+--------+------+<br>|  1 | 西瓜   |   50 |<br>|  2 | 甜瓜   |   15 |<br>|  3 | 甜瓜   |   15 |<br>|  4 | 苹果   |   25 |<br>|  5 | 西瓜   |   25 |<br>|  6 | 西瓜   |   63 |<br>+----+--------+------+<br>6 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name, count(name) from goods group by name;<br>+--------+-------------+<br>| name   | count(name) |<br>+--------+-------------+<br>| 甜瓜   |           2 |<br>| 苹果   |           1 |<br>| 西瓜   |           3 |<br>+--------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>with rollup 可以实现在分组统计数据基础上再进行相同的统计（sum,avg,count…）。</p>\n<p>例如我们将以上的数据表按商品名称进行分组，再统计每类商品的总数量，或者求其均值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select name, sum(nums) as count_num from goods group by name;<br>+--------+-----------+<br>| name   | count_num |<br>+--------+-----------+<br>| 甜瓜   |        30 |<br>| 苹果   |        25 |<br>| 西瓜   |       138 |<br>+--------+-----------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select name, avg(nums) as avg_num from goods group by name with rollup;<br>+--------+---------+<br>| name   | avg_num |<br>+--------+---------+<br>| 甜瓜   | 15.0000 |<br>| 苹果   | 25.0000 |<br>| 西瓜   | 46.0000 |<br>| NULL   | 32.1667 |<br>+--------+---------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">select coalesce(a,b,c);<br></code></pre></td></tr></table></figure>\n<p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p>\n<p>以下实例中如果名字为空我们使用总数代替：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select coalesce(name, <span class=\"hljs-string\">&#x27;总计&#x27;</span>) as 名称, sum(nums) as 数量 from goods group by name with rollup;<br>+--------+--------+<br>| 名称   | 数量   |<br>+--------+--------+<br>| 甜瓜   |     30 |<br>| 苹果   |     25 |<br>| 西瓜   |    138 |<br>| 总计   |    193 |<br>+--------+--------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"15-连接\"><a href=\"#15-连接\" class=\"headerlink\" title=\"15. 连接\"></a>15. 连接</h3><p>在前面的章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。</p>\n<p>本章节我们将向大家介绍如何使用 mysql 的 join 在两个或多个表中查询数据。</p>\n<p>你可以在 select, update 和 delete 语句中使用 mysql 的 join 来联合多表查询。</p>\n<p>join 按照功能大致分为如下三类：</p>\n<ul>\n<li>inner join（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>left join（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>right join（右连接）： 与 left join 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n<p><strong>实例</strong><br>首先创建表，并添加测试数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table web_counts(id int unsigned auto_increment primary key, web_name varchar(20) not null, nums int unsigned default 0) default charset=utf8;<br>Query OK, 0 rows affected (0.10 sec)<br><br>mysql&gt; create table web_info(id int unsigned auto_increment primary key, web_name varchar(20) not null, web_info varchar(50), create_time date not null) default charset=utf8;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; desc web_info;<br>+-------------+------------------+------+-----+---------+----------------+<br>| Field       | Type             | Null | Key | Default | Extra          |<br>+-------------+------------------+------+-----+---------+----------------+<br>| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| web_name    | varchar(20)      | NO   |     | NULL    |                |<br>| web_info    | varchar(50)      | YES  |     | NULL    |                |<br>| create_time | date             | NO   |     | NULL    |                |<br>+-------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; desc web_counts;<br>+----------+------------------+------+-----+---------+----------------+<br>| Field    | Type             | Null | Key | Default | Extra          |<br>+----------+------------------+------+-----+---------+----------------+<br>| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| web_name | varchar(20)      | NO   |     | NULL    |                |<br>| nums     | int(10) unsigned | YES  |     | 0       |                |<br>+----------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot; 淘宝&quot;</span>,1000);<br>Query OK, 1 row affected (0.03 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;百度&quot;</span>, 3000);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;腾讯&quot;</span>, 2000);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_counts values(0, <span class=\"hljs-string\">&quot;网易&quot;</span>, 900);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from web_counts;<br>+----+----------+------+<br>| id | web_name | nums |<br>+----+----------+------+<br>|  1 | 淘宝     | 1000 |<br>|  2 | 百度     | 3000 |<br>|  3 | 腾讯     | 2000 |<br>|  4 | 网易     |  900 |<br>+----+----------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;百度&quot;</span>, <span class=\"hljs-string\">&quot;搜索网站&quot;</span>,<span class=\"hljs-string\">&quot;1989-9-01&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;腾讯&quot;</span>, <span class=\"hljs-string\">&quot;社交网站&quot;</span>,<span class=\"hljs-string\">&quot;1991-02-05&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;网易&quot;</span>, <span class=\"hljs-string\">&quot;门户网站&quot;</span>,<span class=\"hljs-string\">&quot;1990-08-09&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into web_info values(0, <span class=\"hljs-string\">&quot;新浪&quot;</span>, <span class=\"hljs-string\">&quot;社交网站&quot;</span>,<span class=\"hljs-string\">&quot;1993-05-12&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from web_info;<br>+----+----------+--------------+-------------+<br>| id | web_name | web_info     | create_time |<br>+----+----------+--------------+-------------+<br>|  1 | 百度     | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 社交网站     | 1991-02-05  |<br>|  3 | 网易     | 门户网站     | 1990-08-09  |<br>|  4 | 新浪     | 社交网站     | 1993-05-12  |<br>+----+----------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></td></tr></table></figure>\n<p>接下来我们就使用mysql的inner join(也可以省略 inner 使用 join，效果一样)来连接以上两张表来读取web_counts表中所有web_name字段在web_info表对应的字段值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a inner join web_info b on a.web_name=b.web_name;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>以上 SQL 语句等价于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a, web_info b <span class=\"hljs-built_in\">where</span> a.web_name=b.web_name;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>mysql left join 与 join 有所不同。 mysql left join 会读取左边数据表的全部数据，即便右边表无对应数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select a.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a left join web_info b on a.web_name=b.web_name order by a.id;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 淘宝     | 1000 | NULL         | NULL        |<br>|  2 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  3 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  4 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>+----+----------+------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>mysql right join 会读取右边数据表的全部数据，即便左边边表无对应数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select b.id, b.web_name, a.nums,b.web_info, b.create_time from web_counts a right join web_info b on a.web_name=b.web_name order by b.id;<br>+----+----------+------+--------------+-------------+<br>| id | web_name | nums | web_info     | create_time |<br>+----+----------+------+--------------+-------------+<br>|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |<br>|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |<br>|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |<br>|  4 | 新浪     | NULL | 社交网站     | 1993-05-12  |<br>+----+----------+------+--------------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"16-正则表达式\"><a href=\"#16-正则表达式\" class=\"headerlink\" title=\"16. 正则表达式\"></a>16. 正则表达式</h3><p>mysql 正则表达式<br>在前面的章节我们已经了解到mysql可以通过 <code>like ...%</code> 来进行模糊匹配。</p>\n<p>mysql 同样也支持其他正则表达式的匹配， mysql中使用 regexp 操作符来进行正则表达式匹配。</p>\n<p>下表中的正则模式可应用于 <code>regexp</code> 操作符中。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>^</code></td>\n<td align=\"left\">匹配输入字符串的开始位置。如果设置了 regexp 对象的 multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>$</code></td>\n<td align=\"left\">匹配输入字符串的结束位置。如果设置了regexp 对象的 multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>.</code></td>\n<td align=\"left\">匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用象 ‘[.\\n]’ 的模式。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>[...]</code></td>\n<td align=\"left\">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>[^...]</code></td>\n<td align=\"left\">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td>\n</tr>\n<tr>\n<td align=\"center\">`p1</td>\n<td align=\"left\">p2`</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"left\">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"left\">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#123;n&#125;</code></td>\n<td align=\"left\">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#123;n,m&#125;</code></td>\n<td align=\"left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody></table>\n<p><strong>实例</strong><br>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的sql语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：</p>\n<ul>\n<li>查找name字段中以’st’为开头的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;^st&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查找name字段中以’ok’为结尾的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;ok$&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查找name字段中包含’mar’字符串的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;mar&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select name from person_tbl <span class=\"hljs-built_in\">where</span> name regexp <span class=\"hljs-string\">&#x27;^[aeiou]|ok$&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"17-NULL-值处理\"><a href=\"#17-NULL-值处理\" class=\"headerlink\" title=\"17. NULL 值处理\"></a>17. NULL 值处理</h3><p>为了处理这种情况，mysql提供了三大运算符:</p>\n<ul>\n<li>is null: 当列的值是 null,此运算符返回 true。</li>\n<li>is not null: 当列的值不为 null, 运算符返回 true。</li>\n<li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 null 时返回 true。</li>\n</ul>\n<blockquote>\n<p>关于 null 的条件比较运算是比较特殊的。你不能使用 = null 或 != null 在列中查找 null 值 。</p>\n</blockquote>\n<blockquote>\n<p>在 mysql 中，null 值与任何其它值的比较（即使是 null）永远返回 false，即 null = null 返回false 。</p>\n</blockquote>\n<p>mysql 中处理 null 使用 is null 和 is not null 运算符。</p>\n<p><strong>实例</strong><br>在数据库my_data中创建student表，并插入相应数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table student(ID int unsigned auto_increment primary key,name varchar(10) not null,age int unsigned) default charset=utf8;<br>Query OK, 0 rows affected (0.25 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;李华&quot;</span>,25);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;敏柔&quot;</span>,null);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;赵强&quot;</span>,null);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0, <span class=\"hljs-string\">&quot;罗晴&quot;</span>,23);<br>Query OK, 1 row affected (0.03 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>以下实例中你可以看到 = 和 != 运算符是不起作用的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select id,name,age=null from student;<br>+----+--------+----------+<br>| id | name   | age=null |<br>+----+--------+----------+<br>|  1 | 李华   |     NULL |<br>|  2 | 敏柔   |     NULL |<br>|  3 | 赵强   |     NULL |<br>|  4 | 罗晴   |     NULL |<br>+----+--------+----------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name,age!=null from student;<br>+----+--------+-----------+<br>| id | name   | age!=null |<br>+----+--------+-----------+<br>|  1 | 李华   |      NULL |<br>|  2 | 敏柔   |      NULL |<br>|  3 | 赵强   |      NULL |<br>|  4 | 罗晴   |      NULL |<br>+----+--------+-----------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<p>查找数据表中 age 列是否为 null，必须使用 &lt;=&gt; 、is null 和 is not null，如下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select id,name,age is null from student;<br>+----+--------+-------------+<br>| id | name   | age is null |<br>+----+--------+-------------+<br>|  1 | 李华   |           0 |<br>|  2 | 敏柔   |           1 |<br>|  3 | 赵强   |           1 |<br>|  4 | 罗晴   |           0 |<br>+----+--------+-------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; select id,name,age&lt;=&gt;null from student;<br>+----+--------+------------+<br>| id | name   | age&lt;=&gt;null |<br>+----+--------+------------+<br>|  1 | 李华   |          0 |<br>|  2 | 敏柔   |          1 |<br>|  3 | 赵强   |          1 |<br>|  4 | 罗晴   |          0 |<br>+----+--------+------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"18-事务\"><a href=\"#18-事务\" class=\"headerlink\" title=\"18.事务\"></a>18.事务</h3><p>mysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>\n<ul>\n<li>在 mysql 中只有使用了 innodb 数据库引擎的数据库或表才支持事务。</li>\n<li>事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么全部执行，要么全部不执行。</li>\n<li>事务用来管理 insert,update,delete 语句</li>\n</ul>\n<p>一般来说，事务是必须满足4个条件（acid）：：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p>\n<ul>\n<li><p><strong>原子性</strong>：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>\n</li>\n<li><p><strong>一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>\n</li>\n<li><p><strong>隔离性</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。</p>\n</li>\n<li><p><strong>持久性</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>\n</li>\n</ul>\n<blockquote>\n<p>在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。</p>\n</blockquote>\n<h4 id=\"事务控制语句：\"><a href=\"#事务控制语句：\" class=\"headerlink\" title=\"事务控制语句：\"></a>事务控制语句：</h4><ul>\n<li><p>begin 或 start transaction 显式地开启一个事务；</p>\n</li>\n<li><p>commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；</p>\n</li>\n<li><p>rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p>\n</li>\n<li><p>savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；</p>\n</li>\n<li><p>release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p>\n</li>\n<li><p>rollback to identifier 把事务回滚到标记点；</p>\n</li>\n<li><p>set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。</p>\n</li>\n</ul>\n<h4 id=\"mysql-事务处理主要有两种方法：\"><a href=\"#mysql-事务处理主要有两种方法：\" class=\"headerlink\" title=\"mysql 事务处理主要有两种方法：\"></a>mysql 事务处理主要有两种方法：</h4><p>1、用 begin, rollback, commit来实现</p>\n<ul>\n<li>begin 开始一个事务</li>\n<li>rollback 事务回滚</li>\n<li>commit 事务确认</li>\n</ul>\n<p>2、直接用 set 来改变 mysql 的自动提交模式:</p>\n<ul>\n<li>set autocommit=0 禁止自动提交</li>\n<li>set autocommit=1 开启自动提交</li>\n</ul>\n<p><strong>实例</strong><br>下面具体演示MySQL事务的使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; begin; <span class=\"hljs-comment\"># 开启事务</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;寒梅&quot;</span>,28); <span class=\"hljs-comment\"># 插入数据</span><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 寒梅   |   28 |<br>+----+--------+------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback; <span class=\"hljs-comment\"># 回滚</span><br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>+----+--------+------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;寒梅&quot;</span>,28); <span class=\"hljs-comment\"># 插入数据</span><br>Query OK, 1 row affected (0.15 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  6 | 寒梅   |   28 |<br>+----+--------+------+<br>5 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; insert into student values(5,<span class=\"hljs-string\">&quot;李磊&quot;</span>,26);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;张雷&quot;</span>,20);<br>Query OK, 1 row affected (0.04 sec)<br><br>mysql&gt; <span class=\"hljs-built_in\">set</span> autocommit=0; <span class=\"hljs-comment\"># 禁止自动提交</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into student values(0,<span class=\"hljs-string\">&quot;韩美美&quot;</span>,20);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+-----------+------+<br>| ID | name      | age  |<br>+----+-----------+------+<br>|  1 | 李华      |   25 |<br>|  2 | 敏柔      | NULL |<br>|  3 | 赵强      | NULL |<br>|  4 | 罗晴      |   23 |<br>|  5 | 李磊      |   26 |<br>|  6 | 寒梅      |   28 |<br>|  7 | 张雷      |   20 |<br>|  8 | 莉莉      |   20 |<br>|  9 | 韩美美    |   20 |<br>+----+-----------+------+<br>9 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback; <span class=\"hljs-comment\"># 回滚</span><br>Query OK, 0 rows affected (0.16 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   | NULL |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; update student <span class=\"hljs-built_in\">set</span> age=23 <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;敏柔&quot;</span>; <span class=\"hljs-comment\"># 修改数据</span><br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; savepoint point1; <span class=\"hljs-comment\"># 创建保存点</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; update student <span class=\"hljs-built_in\">set</span> age=22 <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;赵强&quot;</span>;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   |   22 |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; rollback to point1; <span class=\"hljs-comment\"># 回滚到保存点</span><br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from student;<br>+----+--------+------+<br>| ID | name   | age  |<br>+----+--------+------+<br>|  1 | 李华   |   25 |<br>|  2 | 敏柔   |   23 |<br>|  3 | 赵强   | NULL |<br>|  4 | 罗晴   |   23 |<br>|  5 | 李磊   |   26 |<br>|  6 | 寒梅   |   28 |<br>|  7 | 张雷   |   20 |<br>|  8 | 莉莉   |   20 |<br>+----+--------+------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; commit; <span class=\"hljs-comment\"># 事务提交</span><br>Query OK, 0 rows affected (0.04 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"19-ALTER命令\"><a href=\"#19-ALTER命令\" class=\"headerlink\" title=\"19. ALTER命令\"></a>19. ALTER命令</h3><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL alter命令。</p>\n<h4 id=\"删除表字段\"><a href=\"#删除表字段\" class=\"headerlink\" title=\"删除表字段\"></a>删除表字段</h4><p>如下命令使用了 alter 命令及 drop 子句来删除以上创建表的 age 字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | YES  |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table table_name  drop field_name;<br>Query OK, 0 rows affected (0.92 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>如果数据表中只剩余一个字段则无法使用drop来删除字段。</p>\n<h4 id=\"增加表字段\"><a href=\"#增加表字段\" class=\"headerlink\" title=\"增加表字段\"></a>增加表字段</h4><p>mysql 中使用 add 子句来向数据表中添加列，如下实例在表 student 中添加 age 字段，并定义数据类型:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student add age int unsigned not null;<br>Query OK, 0 rows affected (0.53 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>执行以上命令后，field_name 字段会自动添加到数据表字段的末尾。</p>\n<p>如果你需要指定新增字段的位置，可以使用mysql提供的关键字 first (设定位第一列)， after 字段名（设定位于某个字段之后）。</p>\n<p>尝试以下 alter table 语句, 在执行成功后，使用 show columns 查看表结构的变化：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+-------+<br>| Field | Type             | Null | Key | Default | Extra |<br>+-------+------------------+------+-----+---------+-------+<br>| name  | varchar(10)      | NO   |     | NULL    |       |<br>| age   | int(10) unsigned | NO   |     | NULL    |       |<br>+-------+------------------+------+-----+---------+-------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student add id int unsigned auto_increment primary key first;<br>Query OK, 0 rows affected (0.56 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student add class int unsigned after id;<br>Query OK, 0 rows affected (0.54 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | int(10) unsigned | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>first 和 after 关键字可用于 add 与 modify 子句，所以如果你想重置数据表字段的位置就需要先使用 drop 删除字段然后使用 add 来添加字段并设置位置。</p>\n<h4 id=\"修改表字段\"><a href=\"#修改表字段\" class=\"headerlink\" title=\"修改表字段\"></a>修改表字段</h4><p>如果需要修改字段类型及名称, 你可以在alter命令中使用 modify 或 change 子句 。</p>\n<p>例如，把字段 class 的类型从 int unsigned 改为 varchar(10)，可以执行以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | int(10) unsigned | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table student modify class varchar(10);<br>Query OK, 8 rows affected (0.69 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+-------+------------------+------+-----+---------+----------------+<br>| Field | Type             | Null | Key | Default | Extra          |<br>+-------+------------------+------+-----+---------+----------------+<br>| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class | varchar(10)      | YES  |     | NULL    |                |<br>| name  | varchar(10)      | NO   |     | NULL    |                |<br>| age   | int(10) unsigned | NO   |     | NULL    |                |<br>+-------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>使用 change 子句, 语法有很大的不同。 在 change 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</p>\n<p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p>\n<p>如果你不设置默认值，mysql会自动设置该字段默认为 null。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student change class class_room varchar(20) default <span class=\"hljs-string\">&quot;203&quot;</span>;<br>Query OK, 0 rows affected (0.10 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | 203     |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>你可以使用 alter 来修改字段的默认值，尝试以下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student alter class_room <span class=\"hljs-built_in\">set</span> default <span class=\"hljs-string\">&quot;205&quot;</span>;<br>Query OK, 0 rows affected (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | 205     |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>你也可以使用 alter 命令及 drop子句来删除字段的默认值，如下实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student alter class_room drop default;<br>Query OK, 0 rows affected (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc student;<br>+------------+------------------+------+-----+---------+----------------+<br>| Field      | Type             | Null | Key | Default | Extra          |<br>+------------+------------------+------+-----+---------+----------------+<br>| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| class_room | varchar(20)      | YES  |     | NULL    |                |<br>| name       | varchar(10)      | NO   |     | NULL    |                |<br>| age        | int(10) unsigned | NO   |     | NULL    |                |<br>+------------+------------------+------+-----+---------+----------------+<br>4 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改数据表\"><a href=\"#修改数据表\" class=\"headerlink\" title=\"修改数据表\"></a>修改数据表</h4><p>修改数据表类型，可以使用 alter table 命令来完成。</p>\n<p>尝试以下实例，我们将表 student 的类型修改为 MyISAM ，然后再修改为 InnoDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student engine=myisam;<br>Query OK, 8 rows affected (0.28 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; show table status like <span class=\"hljs-string\">&quot;student&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: student<br>         Engine: MyISAM<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 8<br> Avg_row_length: 20<br>    Data_length: 160<br>Max_data_length: 281474976710655<br>   Index_length: 2048<br>      Data_free: 0<br> Auto_increment: 9<br>    Create_time: 2019-06-09 17:47:23<br>    Update_time: 2019-06-09 17:47:23<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; alter table students engine=innodb;<br>Query OK, 8 rows affected (0.76 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; show table status <span class=\"hljs-built_in\">where</span> name=<span class=\"hljs-string\">&quot;students&quot;</span>\\G<br>*************************** 1. row ***************************<br>           Name: students<br>         Engine: InnoDB<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 8<br> Avg_row_length: 2048<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 0<br>      Data_free: 0<br> Auto_increment: 9<br>    Create_time: 2019-06-09 17:54:53<br>    Update_time: 2019-06-09 17:54:53<br>     Check_time: NULL<br>      Collation: utf8_general_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>如果需要修改数据表的名称，可以在 alter table 语句中使用 rename 子句来实现。</p>\n<p>尝试以下实例将数据表 student 重命名为 students：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table student rename to students;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_my_data |<br>+-------------------+<br>| students          |<br>+-------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"20-临时表\"><a href=\"#20-临时表\" class=\"headerlink\" title=\"20. 临时表\"></a>20. 临时表</h3><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>\n<p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>\n<h4 id=\"创建临时表\"><a href=\"#创建临时表\" class=\"headerlink\" title=\"创建临时表\"></a>创建临时表</h4><p>使用temporary关键字创建临时表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create temporary table class_room(room_id int unsigned primary key, class varchar(20) ) default charset=utf8;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into class_room values(205,<span class=\"hljs-string\">&quot;九年级一班&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from class_room;<br>+---------+-----------------+<br>| room_id | class           |<br>+---------+-----------------+<br>|     205 | 九年级一班      |<br>+---------+-----------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; desc class_room;<br>+---------+------------------+------+-----+---------+-------+<br>| Field   | Type             | Null | Key | Default | Extra |<br>+---------+------------------+------+-----+---------+-------+<br>| room_id | int(10) unsigned | NO   | PRI | NULL    |       |<br>| class   | varchar(20)      | YES  |     | NULL    |       |<br>+---------+------------------+------+-----+---------+-------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_my_data |<br>+-------------------+<br>| students          |<br>+-------------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>当你使用 show tables命令显示数据表列表时，你将无法看到 class_room表。</p>\n<p>如果你退出当前mysql会话，再使用 select命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p>\n<h4 id=\"删除临时表\"><a href=\"#删除临时表\" class=\"headerlink\" title=\"删除临时表\"></a>删除临时表</h4><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。</p>\n<p>以下是手动删除临时表的实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; drop table class_room;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from class_room;<br>ERROR 1146 (42S02): Table <span class=\"hljs-string\">&#x27;my_data.class_room&#x27;</span> doesn<span class=\"hljs-string\">&#x27;t exist</span><br><span class=\"hljs-string\"></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"21-复制表\"><a href=\"#21-复制表\" class=\"headerlink\" title=\"21. 复制表\"></a>21. 复制表</h3><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用create table … select 命令，是无法实现的。</p>\n<p><strong>实例</strong><br>尝试以下实例来复制表 runoob_tbl 。</p>\n<p>步骤一：</p>\n<p>获取数据表的完整结构。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; show create table students\\G;<br>*************************** 1. row ***************************<br>       Table: students<br>Create Table: CREATE TABLE `students` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `name` varchar(10) NOT NULL,<br>  `class_room` varchar(20) DEFAULT <span class=\"hljs-string\">&#x27;205&#x27;</span>,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br>ERROR:<br>No query specified<br><br></code></pre></td></tr></table></figure>\n<p>步骤二：</p>\n<p>修改SQL语句的数据表名，并执行SQL语句。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table `student` (`id` int(10) unsigned not null auto_increment,`name` varchar(10) not null,`class_room` varchar(20) default <span class=\"hljs-string\">&#x27;205&#x27;</span>, primary key (`id`)) engine=innodb auto_increment=9 default charset=utf8;<br>Query OK, 0 rows affected (0.59 sec)<br><br></code></pre></td></tr></table></figure>\n<p>步骤三：</p>\n<p>执行完第二步骤后，你将在数据库中创建新的克隆表 student。 如果你想拷贝数据表的数据你可以使用 insert into… select 语句来实现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; insert into student(id,name,class_room) select * from students;<br>Query OK, 8 rows affected (0.00 sec)<br>Records: 8  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from student;<br>+----+--------+------------+<br>| id | name   | class_room |<br>+----+--------+------------+<br>|  1 | 李华   | 205        |<br>|  2 | 敏柔   | 205        |<br>|  3 | 赵强   | 205        |<br>|  4 | 罗晴   | 205        |<br>|  5 | 李磊   | 205        |<br>|  6 | 寒梅   | 205        |<br>|  7 | 张雷   | 205        |<br>|  8 | 莉莉   | 205        |<br>+----+--------+------------+<br>8 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"22-处理重复数据\"><a href=\"#22-处理重复数据\" class=\"headerlink\" title=\"22. 处理重复数据\"></a>22. 处理重复数据</h3><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p>\n<h4 id=\"防止表中出现重复数据\"><a href=\"#防止表中出现重复数据\" class=\"headerlink\" title=\"防止表中出现重复数据\"></a>防止表中出现重复数据</h4><p>你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</p>\n<p>如果你想设置表中字段 id，name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table teachers(id int unsigned auto_increment, name varchar(10), gender varchar(5), primary key(id,name));<br>Query OK, 0 rows affected (0.26 sec)<br><br>mysql&gt; desc teachers;<br>+--------+------------------+------+-----+---------+----------------+<br>| Field  | Type             | Null | Key | Default | Extra          |<br>+--------+------------------+------+-----+---------+----------------+<br>| id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| name   | varchar(10)      | NO   | PRI | NULL    |                |<br>| gender | varchar(5)       | YES  |     | NULL    |                |<br>+--------+------------------+------+-----+---------+----------------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p>\n<p>insert ignore into 与 insert into 的区别就是 insert ignore 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; insert into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>ERROR 1062 (23000): Duplicate entry <span class=\"hljs-string\">&#x27;1-李磊&#x27;</span> <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-string\">&#x27;PRIMARY&#x27;</span><br><br>mysql&gt; insert ignore into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; replace into teachers values(1, <span class=\"hljs-string\">&quot;李磊&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 2 rows affected (0.00 sec)<br><br>mysql&gt; select * from teachers;<br>+----+--------+--------+<br>| id | name   | gender |<br>+----+--------+--------+<br>|  1 | 李磊   | 女     |<br>+----+--------+--------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table person(first_name char(20) not null, last_name char(20) not null, gender char(10),unique (last_name, first_name)) charset=utf8;<br>Query OK, 0 rows affected (0.25 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;雷&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;雷&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>);<br>Query OK, 0 rows affected, 1 warning (0.00 sec)<br><br>mysql&gt; insert ignore into person values(<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from person;<br>+------------+-----------+--------+<br>| first_name | last_name | gender |<br>+------------+-----------+--------+<br>| 李         | 丽        | 女     |<br>| 李         | 雷        | 男     |<br>+------------+-----------+--------+<br>2 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"统计重复数据\"><a href=\"#统计重复数据\" class=\"headerlink\" title=\"统计重复数据\"></a>统计重复数据</h4><p>以下我们将统计表中 first_name 和 last_name的重复记录数：</p>\n<ul>\n<li>创建person_info表，并插入3条重复数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table person_info(id int unsigned primary key auto_increment,first_name char(20) not null, last_name char(20) not null, gender char(10)) charset=utf8;<br>Query OK, 0 rows affected (0.29 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert ignore into person_info values(0,<span class=\"hljs-string\">&quot;李&quot;</span>, <span class=\"hljs-string\">&quot;丽&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from person_info;<br>+----+------------+-----------+--------+<br>| id | first_name | last_name | gender |<br>+----+------------+-----------+--------+<br>|  1 | 李         | 丽        | 女     |<br>|  2 | 李         | 丽        | 女     |<br>|  3 | 李         | 丽        | 女     |<br>+----+------------+-----------+--------+<br>3 rows <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查询重复数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select count(*) as repetitions,last_name,first_name from person_info group by last_name, first_name having repetitions &gt; 1;<br>+-------------+-----------+------------+<br>| repetitions | last_name | first_name |<br>+-------------+-----------+------------+<br>|           3 | 丽        | 李         |<br>+-------------+-----------+------------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>以上查询将返回 person_info 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p>\n<ul>\n<li>确定哪一列包含的值可能会重复。</li>\n<li>在列选择列表使用count(*)列出的那些列。</li>\n<li>在group by子句中列出的列。</li>\n<li>having子句设置重复数大于1。</li>\n</ul>\n<h4 id=\"过滤重复数据\"><a href=\"#过滤重复数据\" class=\"headerlink\" title=\"过滤重复数据\"></a>过滤重复数据</h4><p>如果你需要读取不重复的数据可以在 select 语句中使用 distinct 关键字来过滤重复数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select distinct first_name,last_name from person_info;<br>+------------+-----------+<br>| first_name | last_name |<br>+------------+-----------+<br>| 李         | 丽        |<br>+------------+-----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure>\n<p>你也可以使用 group by 来读取数据表中不重复的数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; select first_name, last_name  from person_info group by last_name, first_name;<br>+------------+-----------+<br>| first_name | last_name |<br>+------------+-----------+<br>| 李         | 丽        |<br>+------------+-----------+<br>1 row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">set</span> (0.01 sec)<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"删除重复数据\"><a href=\"#删除重复数据\" class=\"headerlink\" title=\"删除重复数据\"></a>删除重复数据</h4><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p>\n<h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>先创建临时表tab,新表tab中的数据时从person_info表中分组查询出来的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; create table tmp select last_name, first_name, gender from person_info  group by last_name, first_name, gender;<br>Query OK, 1 row affected (0.01 sec)<br>Records: 1  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure>\n<p>在表的第一位添加主键</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">alter table tmp add column `id` bigint(20) primary key not null auto_increment comment <span class=\"hljs-string\">&#x27;id&#x27;</span> first;<br></code></pre></td></tr></table></figure>\n<p>删除原表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; drop table person_info;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure>\n<p>重命名为person_info</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mysql&gt; alter table tmp rename to person_info;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckkcnnubo000mjjln3ctz5uce","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnucj001yjjlnbszc0u9x"},{"post_id":"ckkcnnubo000mjjln3ctz5uce","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnucp0023jjlncpl0fncn"},{"post_id":"ckkcnnubo000mjjln3ctz5uce","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnucq0026jjln5ffleotm"},{"post_id":"ckkcnnube0008jjln31ds08u1","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnucs002bjjln4jcf71uv"},{"post_id":"ckkcnnube0008jjln31ds08u1","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuct002ejjln8olle19w"},{"post_id":"ckkcnnube0008jjln31ds08u1","category_id":"ckkcnnucg001tjjlnbon2dn3f","_id":"ckkcnnucv002ijjln5w7webp4"},{"post_id":"ckkcnnubq000ojjlnbsnjeysq","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnucw002ljjlnelvy5nt0"},{"post_id":"ckkcnnubq000ojjlnbsnjeysq","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnucy002ojjln9an71se6"},{"post_id":"ckkcnnubq000ojjlnbsnjeysq","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnud1002sjjln21nvdvgv"},{"post_id":"ckkcnnubs000rjjlnd80363eq","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnud2002wjjlnc4ah7wyv"},{"post_id":"ckkcnnubs000rjjlnd80363eq","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnud30030jjlnbiywbyje"},{"post_id":"ckkcnnubs000rjjlnd80363eq","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnud40034jjln0rc15xj7"},{"post_id":"ckkcnnub10001jjlner6mfr5o","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnud70037jjln7hw85uwn"},{"post_id":"ckkcnnub10001jjlner6mfr5o","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnud9003ajjln36c8c1fh"},{"post_id":"ckkcnnub10001jjlner6mfr5o","category_id":"ckkcnnucg001tjjlnbon2dn3f","_id":"ckkcnnuda003djjln5bs74ai9"},{"post_id":"ckkcnnubt000sjjlng6a1d7bd","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudb003hjjln1dmb4pfd"},{"post_id":"ckkcnnubt000sjjlng6a1d7bd","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudc003ljjln21k0ftw7"},{"post_id":"ckkcnnubt000sjjlng6a1d7bd","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnude003pjjlnh3k57ti0"},{"post_id":"ckkcnnubu000ujjlnffvf4g6x","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudg003sjjlnc2j02fpz"},{"post_id":"ckkcnnubu000ujjlnffvf4g6x","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudh003vjjlnfxx94hhg"},{"post_id":"ckkcnnubu000ujjlnffvf4g6x","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnudi003xjjlne63d3i50"},{"post_id":"ckkcnnubf0009jjln5r3h7u7r","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudl0041jjln5gh423ft"},{"post_id":"ckkcnnubf0009jjln5r3h7u7r","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudm0043jjlnau6abcgw"},{"post_id":"ckkcnnubf0009jjln5r3h7u7r","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnudn0047jjln2btyha52"},{"post_id":"ckkcnnubv000xjjlngt287qps","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudp004ajjlngn9iet1z"},{"post_id":"ckkcnnubv000xjjlngt287qps","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudq004fjjln4o7t25nd"},{"post_id":"ckkcnnubv000xjjlngt287qps","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnudr004ijjlncynf94fp"},{"post_id":"ckkcnnubx0010jjln0qd08iu4","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuds004njjlnfyat5e2g"},{"post_id":"ckkcnnubx0010jjln0qd08iu4","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudu004pjjln58h9eb4d"},{"post_id":"ckkcnnubx0010jjln0qd08iu4","category_id":"ckkcnnuda003fjjln1kyo299y","_id":"ckkcnnudv004sjjln0cc177dq"},{"post_id":"ckkcnnubi000djjln8cuihjnp","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnudw004vjjlne9iy53fz"},{"post_id":"ckkcnnubi000djjln8cuihjnp","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnudx004yjjlnhr3cgvo5"},{"post_id":"ckkcnnubi000djjln8cuihjnp","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnudz0051jjln5u1943sz"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue20053jjln4l3baax1"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","category_id":"ckkcnnudg003ujjlne76vh9q5","_id":"ckkcnnue30057jjln4xou7pm6"},{"post_id":"ckkcnnuc20015jjln5xut5cab","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue40059jjln7ojy497c"},{"post_id":"ckkcnnuc20015jjln5xut5cab","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnue5005cjjln8pl69k9v"},{"post_id":"ckkcnnub90003jjln9mmx7dz4","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue5005djjln8zlu6ykp"},{"post_id":"ckkcnnub90003jjln9mmx7dz4","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnue5005fjjln36ych0xx"},{"post_id":"ckkcnnub90003jjln9mmx7dz4","category_id":"ckkcnnucg001tjjlnbon2dn3f","_id":"ckkcnnue6005ijjln6xjofri9"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue6005ljjlnc4m6bqa5"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnue7005ojjlneus464a5"},{"post_id":"ckkcnnuc4001ajjln405lgse0","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue8005rjjlnhlm43shb"},{"post_id":"ckkcnnuc4001ajjln405lgse0","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnue9005ujjln1nrbaddn"},{"post_id":"ckkcnnubj000ejjln1aqaagbn","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnue9005xjjlne8hj3az9"},{"post_id":"ckkcnnubj000ejjln1aqaagbn","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuea005zjjlnbv2p28jx"},{"post_id":"ckkcnnubj000ejjln1aqaagbn","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnuea0062jjln7am84uzv"},{"post_id":"ckkcnnuc6001cjjlngs6ch78a","category_id":"ckkcnnudx004xjjlngnqibr9q","_id":"ckkcnnueb0065jjln9boyc403"},{"post_id":"ckkcnnuc7001fjjln3jrv8hf5","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnueb0068jjlna7ecbzi6"},{"post_id":"ckkcnnuc7001fjjln3jrv8hf5","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuec006ajjln9t0bg0g1"},{"post_id":"ckkcnnuc7001fjjln3jrv8hf5","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuec006cjjln30356it9"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuec006djjln3u80g010"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnued006gjjlnarg9cjlt"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnued006hjjlnfmbn8utg"},{"post_id":"ckkcnnuc8001gjjln6c3k4gao","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuee006kjjln1rzma2o7"},{"post_id":"ckkcnnuc8001gjjln6c3k4gao","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuee006ljjln9e2t3l2d"},{"post_id":"ckkcnnuc8001gjjln6c3k4gao","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuef006ojjln1a3f2tpk"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuef006qjjlndpjf59xe"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuef006ujjlnat58f37g"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnueg006wjjln6n14147m"},{"post_id":"ckkcnnubd0007jjln3vm0bxo8","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnueg006zjjln46zu8zm6"},{"post_id":"ckkcnnubd0007jjln3vm0bxo8","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnueg0072jjlndl356qfc"},{"post_id":"ckkcnnubd0007jjln3vm0bxo8","category_id":"ckkcnnucg001tjjlnbon2dn3f","_id":"ckkcnnueh0075jjln8csu3b4s"},{"post_id":"ckkcnnucb001kjjlndamza7iw","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnueh0078jjln9q69ejmj"},{"post_id":"ckkcnnucb001kjjlndamza7iw","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuei007bjjln6j50gbhf"},{"post_id":"ckkcnnucb001kjjlndamza7iw","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuei007djjlncb87fx5n"},{"post_id":"ckkcnnucd001njjln17a76fhu","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuej007gjjln92yk99rj"},{"post_id":"ckkcnnucd001njjln17a76fhu","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuej007ijjln03u8dqoi"},{"post_id":"ckkcnnucd001njjln17a76fhu","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuej007kjjln0vrcfxbt"},{"post_id":"ckkcnnubl000jjjlnhkwlevry","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuek007ljjlncew4fx6j"},{"post_id":"ckkcnnubl000jjjlnhkwlevry","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuek007pjjlnfw0308l1"},{"post_id":"ckkcnnubl000jjjlnhkwlevry","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnuel007rjjln4mo963bt"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuel007ujjlnfs1g7rrc"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuel007vjjlnes71desk"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuem007xjjln8e81f7kc"},{"post_id":"ckkcnnucf001rjjln95x0aza7","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuem007zjjln6thr41ah"},{"post_id":"ckkcnnucf001rjjln95x0aza7","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuen0081jjlnapvz2qna"},{"post_id":"ckkcnnucf001rjjln95x0aza7","category_id":"ckkcnnued006fjjln4ncj13om","_id":"ckkcnnuen0083jjln2nxjgp1b"},{"post_id":"ckkcnnucg001sjjln85n5agru","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuen0084jjln1jp4ftf7"},{"post_id":"ckkcnnucg001sjjln85n5agru","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnueo0088jjlng5eu3g80"},{"post_id":"ckkcnnucg001sjjln85n5agru","category_id":"ckkcnnued006fjjln4ncj13om","_id":"ckkcnnueo008ajjln6vzkgw3n"},{"post_id":"ckkcnnuch001vjjln859p3d30","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuep008ejjln9ix85krg"},{"post_id":"ckkcnnuch001vjjln859p3d30","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuep008gjjln62xi8u9o"},{"post_id":"ckkcnnuch001vjjln859p3d30","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnueq008jjjlnd9blbzaj"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnueq008ljjln8k6qdao6"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuer008pjjln8v11g51m"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","category_id":"ckkcnnuef006sjjlnfsfgc95h","_id":"ckkcnnuer008rjjlna8rkajtz"},{"post_id":"ckkcnnucj0021jjlnbcnof2kc","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuer008tjjln1eas4ze4"},{"post_id":"ckkcnnucj0021jjlnbcnof2kc","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnues008vjjlnf90d42fo"},{"post_id":"ckkcnnucj0021jjlnbcnof2kc","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnues008xjjlngumf8u1m"},{"post_id":"ckkcnnucp0025jjlnemfn3bkv","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnues008zjjln98p39vtq"},{"post_id":"ckkcnnucp0025jjlnemfn3bkv","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuet0091jjlndbct3urp"},{"post_id":"ckkcnnucp0025jjlnemfn3bkv","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnuet0093jjln1g3366yb"},{"post_id":"ckkcnnucr0029jjlneh6d468i","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuet0095jjln5rbta8q4"},{"post_id":"ckkcnnucr0029jjlneh6d468i","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnueu0097jjln8kpe28m4"},{"post_id":"ckkcnnucs002djjln99nkbwlu","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnueu0098jjlndvhd2r70"},{"post_id":"ckkcnnucs002djjln99nkbwlu","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnueu009ajjln5r799a0x"},{"post_id":"ckkcnnuct002hjjln32l093z7","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuev009djjln7ai81ujt"},{"post_id":"ckkcnnuct002hjjln32l093z7","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnuev009gjjln1ygadfx5"},{"post_id":"ckkcnnucv002kjjlnbpdw2xs4","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuew009jjjlnbenaa4i9"},{"post_id":"ckkcnnucv002kjjlnbpdw2xs4","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnuew009mjjlnaycx67m7"},{"post_id":"ckkcnnucx002njjlnhya9and9","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuew009pjjlndn4h5bm2"},{"post_id":"ckkcnnucx002njjlnhya9and9","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuex009sjjlng3mghir8"},{"post_id":"ckkcnnucx002njjlnhya9and9","category_id":"ckkcnnuel007tjjlnalqa96jw","_id":"ckkcnnuex009vjjlnhz3vbmer"},{"post_id":"ckkcnnucz002qjjln8j108otp","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuey009yjjlndpcn5irl"},{"post_id":"ckkcnnucz002qjjln8j108otp","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuey009zjjln2my6conz"},{"post_id":"ckkcnnucz002qjjln8j108otp","category_id":"ckkcnnuel007tjjlnalqa96jw","_id":"ckkcnnuey00a2jjln6pla3sgi"},{"post_id":"ckkcnnud1002ujjln99f42pu0","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuey00a3jjlnft6t1mun"},{"post_id":"ckkcnnud1002ujjln99f42pu0","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnuez00a6jjln7qk6h00h"},{"post_id":"ckkcnnud1002ujjln99f42pu0","category_id":"ckkcnnuel007tjjlnalqa96jw","_id":"ckkcnnuez00a7jjlna04m0rkx"},{"post_id":"ckkcnnudb003gjjln7fha2edh","category_id":"ckkcnnues008wjjln8ktrgrc5","_id":"ckkcnnuf000aajjln2oz9bb2z"},{"post_id":"ckkcnnudc003jjjln3jmtgtnk","category_id":"ckkcnnues008wjjln8ktrgrc5","_id":"ckkcnnuf000acjjlnhngg3ezy"},{"post_id":"ckkcnnud2002yjjln3mwtcpuy","category_id":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnuf700bcjjln85ks12on"},{"post_id":"ckkcnnud2002yjjln3mwtcpuy","category_id":"ckkcnnuf600b6jjln1a3ndj5z","_id":"ckkcnnuf900bfjjln91dm8xdw"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","category_id":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnuf900bijjlnhtht7lc5"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","category_id":"ckkcnnuf700b8jjlnhbxjhotq","_id":"ckkcnnufa00bkjjlncxhyfu9u"},{"post_id":"ckkcnnud50036jjln0tnge65d","category_id":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnufa00bojjlne7or6eot"},{"post_id":"ckkcnnud50036jjln0tnge65d","category_id":"ckkcnnuf700bejjlnex6b1hms","_id":"ckkcnnufa00bqjjln3o8v4ege"},{"post_id":"ckkcnnud70039jjlnftyx6llx","category_id":"ckkcnnueo0086jjln8lv4ev6h","_id":"ckkcnnufb00btjjln6tku9qie"},{"post_id":"ckkcnnud70039jjlnftyx6llx","category_id":"ckkcnnuf700bejjlnex6b1hms","_id":"ckkcnnufb00bvjjlnd1wx31gn"},{"post_id":"ckkcnnud9003cjjlngq1pa45f","category_id":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufc00byjjlnfgeyfuey"},{"post_id":"ckkcnnud9003cjjlngq1pa45f","category_id":"ckkcnnufa00bnjjlngmt21x5z","_id":"ckkcnnufd00c1jjln84gcecw2"},{"post_id":"ckkcnnudd003njjln6lid9agk","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufe00c5jjln5lqbangs"},{"post_id":"ckkcnnudd003njjln6lid9agk","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufe00c6jjln0ggkfjru"},{"post_id":"ckkcnnudd003njjln6lid9agk","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnuff00cajjln38506y4a"},{"post_id":"ckkcnnude003qjjln70py16xg","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuff00ccjjlnbjuc4vy4"},{"post_id":"ckkcnnude003qjjln70py16xg","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufg00cfjjln1wfo24ho"},{"post_id":"ckkcnnude003qjjln70py16xg","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnufg00cgjjln7zg42cu6"},{"post_id":"ckkcnnudg003tjjln2shea6nf","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufh00cjjjlnfmjq8zy4"},{"post_id":"ckkcnnudg003tjjln2shea6nf","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufh00cljjln7us53udq"},{"post_id":"ckkcnnudg003tjjln2shea6nf","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnufh00cojjlng1dlem9l"},{"post_id":"ckkcnnudh003wjjln8a68ae9z","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufi00crjjlngsinh20h"},{"post_id":"ckkcnnudh003wjjln8a68ae9z","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufj00ctjjln4jegdcyb"},{"post_id":"ckkcnnudh003wjjln8a68ae9z","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnufj00cvjjlngzzj1bnt"},{"post_id":"ckkcnnudi003zjjlnbtwkhh66","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufk00cwjjln0rnk3v0e"},{"post_id":"ckkcnnudi003zjjlnbtwkhh66","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufk00czjjln7ulxfsq4"},{"post_id":"ckkcnnudi003zjjlnbtwkhh66","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnufk00d0jjlndvmtgerp"},{"post_id":"ckkcnnudl0042jjlnbd9gamfj","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufl00d3jjlndoyhed3p"},{"post_id":"ckkcnnudl0042jjlnbd9gamfj","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnufl00d5jjlncfkm1ywy"},{"post_id":"ckkcnnudl0042jjlnbd9gamfj","category_id":"ckkcnnufg00cijjln6mwacfeg","_id":"ckkcnnufm00d8jjln6d3s4y0i"},{"post_id":"ckkcnnudm0045jjlncexrfmr8","category_id":"ckkcnnuey00a1jjln4etv3t1r","_id":"ckkcnnufm00dbjjln48aqelrl"},{"post_id":"ckkcnnudm0045jjlncexrfmr8","category_id":"ckkcnnufh00cpjjlncr2a6wxx","_id":"ckkcnnufm00ddjjlnggkj3ww0"},{"post_id":"ckkcnnudo0049jjlnfvhbeh3f","category_id":"ckkcnnuey00a1jjln4etv3t1r","_id":"ckkcnnufn00dfjjln1djd1ezq"},{"post_id":"ckkcnnudo0049jjlnfvhbeh3f","category_id":"ckkcnnufj00cujjln31y8ekx7","_id":"ckkcnnufo00dgjjln3bx639ue"},{"post_id":"ckkcnnudp004cjjln31cm6scc","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufp00djjjlng0eyclvj"},{"post_id":"ckkcnnudp004cjjln31cm6scc","category_id":"ckkcnnuez00a8jjlnb6c04sgx","_id":"ckkcnnufp00dkjjlnhk76gd0n"},{"post_id":"ckkcnnudp004cjjln31cm6scc","category_id":"ckkcnnufk00cyjjlnh2dmfwrz","_id":"ckkcnnufq00dnjjlnhkyccix7"},{"post_id":"ckkcnnudq004hjjlna5nyfx2b","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufq00dpjjlnasvvgxud"},{"post_id":"ckkcnnudq004hjjlna5nyfx2b","category_id":"ckkcnnuez00a8jjlnb6c04sgx","_id":"ckkcnnufq00dtjjln57e5a152"},{"post_id":"ckkcnnudq004hjjlna5nyfx2b","category_id":"ckkcnnufl00d2jjln85up9rn1","_id":"ckkcnnufq00dvjjlnf4djejqp"},{"post_id":"ckkcnnudr004kjjlnh41v5v5f","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufr00dzjjlnfrsncqx0"},{"post_id":"ckkcnnudr004kjjlnh41v5v5f","category_id":"ckkcnnuez00a8jjlnb6c04sgx","_id":"ckkcnnufr00e0jjln3j15behx"},{"post_id":"ckkcnnudr004kjjlnh41v5v5f","category_id":"ckkcnnufl00d2jjln85up9rn1","_id":"ckkcnnufr00e2jjlncog7dl8y"},{"post_id":"ckkcnnudt004ojjln0zdf57g9","category_id":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufs00e4jjln3hhpfqtq"},{"post_id":"ckkcnnudt004ojjln0zdf57g9","category_id":"ckkcnnufa00bnjjlngmt21x5z","_id":"ckkcnnufs00e6jjlngd736i94"},{"post_id":"ckkcnnudu004qjjlngpg192ip","category_id":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnuft00e8jjlnd9vc8vpp"},{"post_id":"ckkcnnudu004qjjlngpg192ip","category_id":"ckkcnnufo00dijjln8xmnhbhq","_id":"ckkcnnuft00eajjln0gzs5yqw"},{"post_id":"ckkcnnudw004ujjln1hwo5drm","category_id":"ckkcnnuer008sjjlnao693yap","_id":"ckkcnnufu00ecjjln18bzce8e"},{"post_id":"ckkcnnudw004ujjln1hwo5drm","category_id":"ckkcnnufp00dmjjlng2hnape2","_id":"ckkcnnufu00eejjlna2kzd0lb"},{"post_id":"ckkcnnudw004wjjln511l27jx","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufu00ehjjln72psbp09"},{"post_id":"ckkcnnudw004wjjln511l27jx","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufv00ejjjln8gr00hy7"},{"post_id":"ckkcnnudw004wjjln511l27jx","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnufv00eljjln8ah81yh9"},{"post_id":"ckkcnnudy0050jjlngghb3iye","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufv00eojjln5rw120ic"},{"post_id":"ckkcnnudy0050jjlngghb3iye","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufv00eqjjln94nv1484"},{"post_id":"ckkcnnudy0050jjlngghb3iye","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnufv00esjjln7uyyawhf"},{"post_id":"ckkcnnudz0052jjlndiek84zz","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufv00eujjln00xvesmm"},{"post_id":"ckkcnnudz0052jjlndiek84zz","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufw00exjjln4n358yyg"},{"post_id":"ckkcnnudz0052jjlndiek84zz","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnufw00ezjjlne2g01gs1"},{"post_id":"ckkcnnue20055jjln5gfo867i","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufw00f1jjln48smgiji"},{"post_id":"ckkcnnue20055jjln5gfo867i","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufw00f3jjln8vx89ru9"},{"post_id":"ckkcnnue20055jjln5gfo867i","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnufw00f4jjln4jkocrdq"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnufx00f6jjln0ln33gd5"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnufx00f7jjlnead0at6l"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnufx00f9jjln4n38b4bn"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugf00h4jjln0ois0o6a"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnugf00h6jjln6x1eg8td"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","category_id":"ckkcnnucg001tjjlnbon2dn3f","_id":"ckkcnnugg00h7jjlnbim98c3t"},{"post_id":"ckkcnnugc00h0jjln8c5922e8","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugg00h9jjln783jbgm1"},{"post_id":"ckkcnnugc00h0jjln8c5922e8","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnugg00hajjln6ltce3yi"},{"post_id":"ckkcnnugc00h0jjln8c5922e8","category_id":"ckkcnnue20054jjln3ng9e85a","_id":"ckkcnnugg00hbjjlng11409me"},{"post_id":"ckkcnnugd00h2jjln9mjggmfy","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugh00hejjlndmf096to"},{"post_id":"ckkcnnugd00h2jjln9mjggmfy","category_id":"ckkcnnudl0040jjln9mgweylb","_id":"ckkcnnugh00hgjjln0znya6es"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugh00hjjjlnbvlg6ev1"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","category_id":"ckkcnnuf300arjjln1n4d69ng","_id":"ckkcnnugh00hljjln0qs0cdj9"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","category_id":"ckkcnnufq00dsjjlnbh80bit5","_id":"ckkcnnugi00hojjln9z0z2l9d"},{"post_id":"ckkcnnugr00hvjjlneigg1y3d","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugy00hyjjln4uhy9ylt"},{"post_id":"ckkcnnugr00hvjjlneigg1y3d","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnugy00i0jjln22373g0o"},{"post_id":"ckkcnnugr00hvjjlneigg1y3d","category_id":"ckkcnnuce001pjjlnecf86d93","_id":"ckkcnnugy00i1jjln79qk7a36"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnugy00i3jjln8m9a9ylr"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","category_id":"ckkcnnubm000kjjln3sy7b5jv","_id":"ckkcnnugy00i5jjlngfbvd78h"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","category_id":"ckkcnnuef006sjjlnfsfgc95h","_id":"ckkcnnugz00i7jjln54uk1xir"},{"post_id":"ckkcnnuhb00ifjjln3qeudy6w","category_id":"ckkcnnubb0004jjlna8d7h8lp","_id":"ckkcnnuhd00ihjjlnbu8a2ce7"},{"post_id":"ckkcnnuhb00ifjjln3qeudy6w","category_id":"ckkcnnuet0094jjln5h4ghspq","_id":"ckkcnnuhd00iijjln1vpj2yek"},{"post_id":"ckkcnnuhb00ifjjln3qeudy6w","category_id":"ckkcnnufb00bujjln4ktk06qn","_id":"ckkcnnuhd00ikjjlnewai8mfn"}],"PostTag":[{"post_id":"ckkcnnub10001jjlner6mfr5o","tag_id":"ckkcnnubc0005jjln3svl52u6","_id":"ckkcnnubi000cjjln7v9x4qx8"},{"post_id":"ckkcnnub90003jjln9mmx7dz4","tag_id":"ckkcnnubg000bjjlnc6wud804","_id":"ckkcnnubl000ijjln5eae3eci"},{"post_id":"ckkcnnubd0007jjln3vm0bxo8","tag_id":"ckkcnnubk000gjjln3buxaujf","_id":"ckkcnnubq000njjln8y2j19cu"},{"post_id":"ckkcnnube0008jjln31ds08u1","tag_id":"ckkcnnubn000ljjlngvt27dh3","_id":"ckkcnnubv000wjjlnbpe9bqwm"},{"post_id":"ckkcnnube0008jjln31ds08u1","tag_id":"ckkcnnubr000qjjln1n8lbrvw","_id":"ckkcnnubx000zjjln4qhx2438"},{"post_id":"ckkcnnubf0009jjln5r3h7u7r","tag_id":"ckkcnnubv000vjjlnfyss5v8d","_id":"ckkcnnuc10013jjlndsn682ya"},{"post_id":"ckkcnnubi000djjln8cuihjnp","tag_id":"ckkcnnuby0011jjln66de6u2t","_id":"ckkcnnuc40019jjln2l314l2o"},{"post_id":"ckkcnnubj000ejjln1aqaagbn","tag_id":"ckkcnnuc30016jjln7hvag2rw","_id":"ckkcnnuc7001ejjln0slk733e"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","tag_id":"ckkcnnuc5001bjjlncabv475d","_id":"ckkcnnuci001wjjln6ofj6bzw"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","tag_id":"ckkcnnuc9001hjjlnf39a5x9y","_id":"ckkcnnucj001zjjln9dsb6el7"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","tag_id":"ckkcnnucc001mjjln9yg8c1z4","_id":"ckkcnnucp0024jjln9k9y2vak"},{"post_id":"ckkcnnubk000hjjln07yn3h2z","tag_id":"ckkcnnuce001qjjln09zabkcy","_id":"ckkcnnucq0027jjln0kvt7aqz"},{"post_id":"ckkcnnubl000jjjlnhkwlevry","tag_id":"ckkcnnuch001ujjln51e90qc7","_id":"ckkcnnucs002cjjlnhc6gaczn"},{"post_id":"ckkcnnubo000mjjln3ctz5uce","tag_id":"ckkcnnucp0022jjln5wd1g1w6","_id":"ckkcnnuct002fjjln6b3y0y07"},{"post_id":"ckkcnnubq000ojjlnbsnjeysq","tag_id":"ckkcnnucr002ajjln26f6dkpo","_id":"ckkcnnud1002rjjln2yfihc25"},{"post_id":"ckkcnnubq000ojjlnbsnjeysq","tag_id":"ckkcnnuc30016jjln7hvag2rw","_id":"ckkcnnud2002vjjlncr9l9q65"},{"post_id":"ckkcnnubs000rjjlnd80363eq","tag_id":"ckkcnnubk000gjjln3buxaujf","_id":"ckkcnnud3002zjjlnbc949e2b"},{"post_id":"ckkcnnubs000rjjlnd80363eq","tag_id":"ckkcnnuc30016jjln7hvag2rw","_id":"ckkcnnud40033jjlnfcjiart9"},{"post_id":"ckkcnnubt000sjjlng6a1d7bd","tag_id":"ckkcnnud2002xjjlnfbf5ezy4","_id":"ckkcnnuda003ejjln3zu84le7"},{"post_id":"ckkcnnubt000sjjlng6a1d7bd","tag_id":"ckkcnnuc30016jjln7hvag2rw","_id":"ckkcnnudb003ijjln68e6hko7"},{"post_id":"ckkcnnubu000ujjlnffvf4g6x","tag_id":"ckkcnnud9003bjjln8tiu9l3p","_id":"ckkcnnudd003mjjln4yhp8nd9"},{"post_id":"ckkcnnubv000xjjlngt287qps","tag_id":"ckkcnnudc003kjjln2kxz8ipx","_id":"ckkcnnudn0048jjlneduuhern"},{"post_id":"ckkcnnubv000xjjlngt287qps","tag_id":"ckkcnnudf003rjjln4xdaaf1r","_id":"ckkcnnudp004bjjlnb9y38u17"},{"post_id":"ckkcnnubv000xjjlngt287qps","tag_id":"ckkcnnudi003yjjlndzw89q33","_id":"ckkcnnudq004gjjlncd4ogsen"},{"post_id":"ckkcnnubx0010jjln0qd08iu4","tag_id":"ckkcnnudm0044jjlneuepdzic","_id":"ckkcnnudr004jjjlnc1pl1loq"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnudq004djjlnajzfg8y8","_id":"ckkcnnue6005hjjlnfbxbfipv"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnuds004ljjln0ri37hfe","_id":"ckkcnnue6005kjjlnawssdep9"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnudv004tjjln5obp9xpz","_id":"ckkcnnue7005njjln3w719y7y"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnudx004zjjln03lb1dhe","_id":"ckkcnnue8005qjjln87g56wkc"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnue30056jjlnampx7dbp","_id":"ckkcnnue8005tjjlnfb659gry"},{"post_id":"ckkcnnuby0012jjln89dp6t6t","tag_id":"ckkcnnue4005bjjlncvvn1mxo","_id":"ckkcnnue9005wjjln5fb9b5p4"},{"post_id":"ckkcnnuc20015jjln5xut5cab","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnuea0060jjlndrqx0pe4"},{"post_id":"ckkcnnuc20015jjln5xut5cab","tag_id":"ckkcnnue6005mjjlnhth389wx","_id":"ckkcnnuea0063jjlnhcqq5kwg"},{"post_id":"ckkcnnuc20015jjln5xut5cab","tag_id":"ckkcnnuce001qjjln09zabkcy","_id":"ckkcnnueb0066jjlnhs7q5ylv"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnuef006pjjlnfmmhazkq"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","tag_id":"ckkcnnuea0064jjln24bkfk2k","_id":"ckkcnnuef006rjjlnaqz3hw5g"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","tag_id":"ckkcnnuec0069jjlnez1p2cku","_id":"ckkcnnueg006vjjlnb6ykb899"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","tag_id":"ckkcnnued006ejjln4gm91ors","_id":"ckkcnnueg006xjjlnhfz8feyv"},{"post_id":"ckkcnnuc30017jjln0gbf1pp0","tag_id":"ckkcnnued006ijjln5zkd7ekf","_id":"ckkcnnueg0071jjlnb4p916nx"},{"post_id":"ckkcnnuc4001ajjln405lgse0","tag_id":"ckkcnnuee006mjjlndmjtedxb","_id":"ckkcnnueg0073jjln8s8u5j6h"},{"post_id":"ckkcnnuc4001ajjln405lgse0","tag_id":"ckkcnnuef006tjjlnfh8x96i0","_id":"ckkcnnueh0077jjlnethk9od3"},{"post_id":"ckkcnnuc6001cjjlngs6ch78a","tag_id":"ckkcnnueg0070jjln2gj42beb","_id":"ckkcnnueh0079jjln2b5dhu7s"},{"post_id":"ckkcnnuc7001fjjln3jrv8hf5","tag_id":"ckkcnnueh0076jjln5eifbgog","_id":"ckkcnnuei007ejjlnh0kk202k"},{"post_id":"ckkcnnuc8001gjjln6c3k4gao","tag_id":"ckkcnnuei007cjjln34ych4yt","_id":"ckkcnnuek007njjlnfh6556et"},{"post_id":"ckkcnnuc8001gjjln6c3k4gao","tag_id":"ckkcnnuej007hjjlnaa3ebm8l","_id":"ckkcnnuek007qjjlncxypdhbm"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","tag_id":"ckkcnnuek007mjjln2oavco6c","_id":"ckkcnnueo0087jjln9f2x7e0c"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","tag_id":"ckkcnnuel007sjjln6dk907d0","_id":"ckkcnnueo0089jjln5bna81f9"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","tag_id":"ckkcnnuem007wjjlngdoy0luz","_id":"ckkcnnuep008djjln24di4wxy"},{"post_id":"ckkcnnuca001jjjln1cyj80ar","tag_id":"ckkcnnuen0080jjlnej1sfbur","_id":"ckkcnnuep008fjjlncvor2p7g"},{"post_id":"ckkcnnucb001kjjlndamza7iw","tag_id":"ckkcnnueo0085jjln2qn8bcys","_id":"ckkcnnueq008kjjln9a2kde1k"},{"post_id":"ckkcnnucb001kjjlndamza7iw","tag_id":"ckkcnnueo008bjjln51qiagba","_id":"ckkcnnueq008mjjln3yf28tom"},{"post_id":"ckkcnnucd001njjln17a76fhu","tag_id":"ckkcnnuep008ijjlne6sh02ko","_id":"ckkcnnuer008qjjln809uf1y6"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","tag_id":"ckkcnnueq008ojjlnhws1djb8","_id":"ckkcnnuev009cjjlnan73fic5"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","tag_id":"ckkcnnues008ujjln5ic4fnhi","_id":"ckkcnnuev009fjjlng8tk2pye"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","tag_id":"ckkcnnues008yjjlndytidge2","_id":"ckkcnnuew009ijjln9swwdwtt"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","tag_id":"ckkcnnuet0092jjlnhv3gfcin","_id":"ckkcnnuew009ljjln0wjp0q52"},{"post_id":"ckkcnnucd001ojjlndwgc2h8b","tag_id":"ckkcnnueu0096jjln6q2v5l26","_id":"ckkcnnuew009ojjln39fwg5xk"},{"post_id":"ckkcnnucf001rjjln95x0aza7","tag_id":"ckkcnnueu009bjjlnhdpk4wjd","_id":"ckkcnnuex009rjjlnccuv4zeo"},{"post_id":"ckkcnnucg001sjjln85n5agru","tag_id":"ckkcnnuev009hjjlngd8l3of2","_id":"ckkcnnuex009ujjln96e916l8"},{"post_id":"ckkcnnuch001vjjln859p3d30","tag_id":"ckkcnnuew009njjlncan4c738","_id":"ckkcnnuey009xjjln5joe3evt"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","tag_id":"ckkcnnuex009tjjln91it5efj","_id":"ckkcnnuf000abjjlncic00g0e"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","tag_id":"ckkcnnuey00a0jjlnfx2f31dj","_id":"ckkcnnuf000adjjlndbmtgmu6"},{"post_id":"ckkcnnuci001xjjlnfu2jg8mk","tag_id":"ckkcnnuey00a4jjln0n772nty","_id":"ckkcnnuf000agjjln9o3gfla1"},{"post_id":"ckkcnnucj0021jjlnbcnof2kc","tag_id":"ckkcnnuez00a9jjln7w6e3w1o","_id":"ckkcnnuf000ahjjlnfa9khbys"},{"post_id":"ckkcnnucp0025jjlnemfn3bkv","tag_id":"ckkcnnuf000afjjlnfpc68ngy","_id":"ckkcnnuf100akjjlnfxoy78jp"},{"post_id":"ckkcnnucr0029jjlneh6d468i","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnuf400avjjlnhce45e2z"},{"post_id":"ckkcnnucr0029jjlneh6d468i","tag_id":"ckkcnnuf100amjjlngvl954sq","_id":"ckkcnnuf400axjjln4wcqacvp"},{"post_id":"ckkcnnucr0029jjlneh6d468i","tag_id":"ckkcnnuf200aojjln9avu1r20","_id":"ckkcnnuf500azjjln5b0s3m40"},{"post_id":"ckkcnnucr0029jjlneh6d468i","tag_id":"ckkcnnuf200aqjjlnemayaliq","_id":"ckkcnnuf500b1jjln08lc2ttz"},{"post_id":"ckkcnnucr0029jjlneh6d468i","tag_id":"ckkcnnuf300asjjln46j83q2q","_id":"ckkcnnuf500b3jjln6wgo92mk"},{"post_id":"ckkcnnucs002djjln99nkbwlu","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnuf700b9jjlnh73l6jz8"},{"post_id":"ckkcnnucs002djjln99nkbwlu","tag_id":"ckkcnnuf100amjjlngvl954sq","_id":"ckkcnnuf700bajjlnc0vp5a6v"},{"post_id":"ckkcnnucs002djjln99nkbwlu","tag_id":"ckkcnnuf500b2jjlnep4b6chs","_id":"ckkcnnuf700bdjjln7s7i4og3"},{"post_id":"ckkcnnucs002djjln99nkbwlu","tag_id":"ckkcnnuf600b5jjln7z4qcuwe","_id":"ckkcnnuf900bgjjln9bl96z2b"},{"post_id":"ckkcnnuct002hjjln32l093z7","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnufa00bmjjlne9d67hoq"},{"post_id":"ckkcnnuct002hjjln32l093z7","tag_id":"ckkcnnuf100amjjlngvl954sq","_id":"ckkcnnufa00bpjjlng9az68st"},{"post_id":"ckkcnnuct002hjjln32l093z7","tag_id":"ckkcnnuf900bhjjln7w4718ds","_id":"ckkcnnufb00bsjjlnatoc8qfj"},{"post_id":"ckkcnnucv002kjjlnbpdw2xs4","tag_id":"ckkcnnue5005gjjlngpd61l1b","_id":"ckkcnnufc00bxjjln85w46akb"},{"post_id":"ckkcnnucv002kjjlnbpdw2xs4","tag_id":"ckkcnnuf100amjjlngvl954sq","_id":"ckkcnnufd00c0jjlne99i6uod"},{"post_id":"ckkcnnucv002kjjlnbpdw2xs4","tag_id":"ckkcnnubg000bjjlnc6wud804","_id":"ckkcnnufd00c3jjln1n0h9w4x"},{"post_id":"ckkcnnucx002njjlnhya9and9","tag_id":"ckkcnnufb00bwjjln2i7x8quy","_id":"ckkcnnuff00c8jjln5kv254pd"},{"post_id":"ckkcnnucx002njjlnhya9and9","tag_id":"ckkcnnufd00c2jjln2xgc2owg","_id":"ckkcnnuff00cbjjlng6jtgsmh"},{"post_id":"ckkcnnucz002qjjln8j108otp","tag_id":"ckkcnnufe00c7jjlnfdhs5ui0","_id":"ckkcnnufh00ckjjlngq4paj18"},{"post_id":"ckkcnnucz002qjjln8j108otp","tag_id":"ckkcnnuf900bhjjln7w4718ds","_id":"ckkcnnufh00cmjjln64nlbr17"},{"post_id":"ckkcnnud1002ujjln99f42pu0","tag_id":"ckkcnnufg00chjjln8rof2usx","_id":"ckkcnnufi00cqjjln1vzmfowj"},{"post_id":"ckkcnnud2002yjjln3mwtcpuy","tag_id":"ckkcnnufh00cnjjln6plj0j6x","_id":"ckkcnnufl00d4jjln9c4b0hzu"},{"post_id":"ckkcnnud2002yjjln3mwtcpuy","tag_id":"ckkcnnufj00csjjlndeby0ys7","_id":"ckkcnnufl00d6jjln9atr72md"},{"post_id":"ckkcnnud2002yjjln3mwtcpuy","tag_id":"ckkcnnufk00cxjjlncoovgb04","_id":"ckkcnnufm00d9jjlnb5ic17y3"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","tag_id":"ckkcnnufk00d1jjlnd4e27oya","_id":"ckkcnnufq00dojjln4rxzhp3m"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","tag_id":"ckkcnnufl00d7jjlnbgru5amd","_id":"ckkcnnufq00dqjjln6i2fbwtx"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","tag_id":"ckkcnnufm00dcjjlnggbhc568","_id":"ckkcnnufq00dujjln8dmihl44"},{"post_id":"ckkcnnud40032jjlncvoy5dgr","tag_id":"ckkcnnufo00dhjjln32vffgie","_id":"ckkcnnufq00dwjjln07bz5rcs"},{"post_id":"ckkcnnud50036jjln0tnge65d","tag_id":"ckkcnnufp00dljjlnfvo18es7","_id":"ckkcnnufu00edjjlnafu5apjo"},{"post_id":"ckkcnnud50036jjln0tnge65d","tag_id":"ckkcnnufq00drjjln6w9pft46","_id":"ckkcnnufu00efjjlncgzx4vd0"},{"post_id":"ckkcnnud50036jjln0tnge65d","tag_id":"ckkcnnufr00dxjjlnguz76t68","_id":"ckkcnnufu00eijjln5usodgt2"},{"post_id":"ckkcnnud50036jjln0tnge65d","tag_id":"ckkcnnufr00e3jjlnhziybo0x","_id":"ckkcnnufv00ekjjlncjvn8h3c"},{"post_id":"ckkcnnud50036jjln0tnge65d","tag_id":"ckkcnnufs00e7jjln7dcae14t","_id":"ckkcnnufv00enjjlncx52fasp"},{"post_id":"ckkcnnud70039jjlnftyx6llx","tag_id":"ckkcnnuft00ebjjln5dbidzz1","_id":"ckkcnnufv00epjjln7pq69xa6"},{"post_id":"ckkcnnud9003cjjlngq1pa45f","tag_id":"ckkcnnufu00egjjln46tjavmh","_id":"ckkcnnufv00etjjln3lik8lje"},{"post_id":"ckkcnnud9003cjjlngq1pa45f","tag_id":"ckkcnnufv00emjjlnevzwh7aa","_id":"ckkcnnufv00evjjln6u1ednka"},{"post_id":"ckkcnnudb003gjjln7fha2edh","tag_id":"ckkcnnufv00erjjlna3sw846r","_id":"ckkcnnufw00eyjjlndu6wc3w1"},{"post_id":"ckkcnnudc003jjjln3jmtgtnk","tag_id":"ckkcnnufw00ewjjlneqteh1z2","_id":"ckkcnnufw00f2jjln0d721d75"},{"post_id":"ckkcnnudd003njjln6lid9agk","tag_id":"ckkcnnufw00f0jjln91dge1yw","_id":"ckkcnnufx00fajjln4c1bao0n"},{"post_id":"ckkcnnudd003njjln6lid9agk","tag_id":"ckkcnnufw00f5jjlnb0ygha3z","_id":"ckkcnnufx00fbjjln7wnledcm"},{"post_id":"ckkcnnude003qjjln70py16xg","tag_id":"ckkcnnufx00f8jjlna9hq10k2","_id":"ckkcnnufy00fejjln2zi21p25"},{"post_id":"ckkcnnude003qjjln70py16xg","tag_id":"ckkcnnufx00fcjjlnfmo0clrb","_id":"ckkcnnufy00ffjjln8pseaq29"},{"post_id":"ckkcnnudg003tjjln2shea6nf","tag_id":"ckkcnnufx00fdjjln5uqqd4an","_id":"ckkcnnufz00fkjjlnhegtf474"},{"post_id":"ckkcnnudg003tjjln2shea6nf","tag_id":"ckkcnnufy00fgjjln0rwy8p7x","_id":"ckkcnnufz00fljjln6qwecw1e"},{"post_id":"ckkcnnudg003tjjln2shea6nf","tag_id":"ckkcnnufy00fhjjlnb9atblkn","_id":"ckkcnnufz00fnjjln2rnh3uz0"},{"post_id":"ckkcnnudg003tjjln2shea6nf","tag_id":"ckkcnnufy00fijjln8n472o2s","_id":"ckkcnnug000fojjln3r0e2x3d"},{"post_id":"ckkcnnudh003wjjln8a68ae9z","tag_id":"ckkcnnufz00fjjjln3elz1w6a","_id":"ckkcnnug000fqjjln9umf3jyf"},{"post_id":"ckkcnnudi003zjjlnbtwkhh66","tag_id":"ckkcnnufz00fmjjlnftq8fvc5","_id":"ckkcnnug000fsjjln62budsso"},{"post_id":"ckkcnnudi003zjjlnbtwkhh66","tag_id":"ckkcnnug000fpjjlnf7951snl","_id":"ckkcnnug000ftjjlndn0pbjjq"},{"post_id":"ckkcnnudl0042jjlnbd9gamfj","tag_id":"ckkcnnug000frjjlnhg1v3kuu","_id":"ckkcnnug100fvjjln8cs4a0nv"},{"post_id":"ckkcnnudm0045jjlncexrfmr8","tag_id":"ckkcnnug000fujjln929xcga4","_id":"ckkcnnug100fxjjln0piw6d12"},{"post_id":"ckkcnnudo0049jjlnfvhbeh3f","tag_id":"ckkcnnug100fwjjln0qvr06q7","_id":"ckkcnnug100fzjjln07qt3gck"},{"post_id":"ckkcnnudp004cjjln31cm6scc","tag_id":"ckkcnnug100fyjjln9s5322g7","_id":"ckkcnnug100g1jjln0ii24n5f"},{"post_id":"ckkcnnudq004hjjlna5nyfx2b","tag_id":"ckkcnnug100g0jjln4a90c4al","_id":"ckkcnnug200g3jjln84c4fpx1"},{"post_id":"ckkcnnudr004kjjlnh41v5v5f","tag_id":"ckkcnnug100g0jjln4a90c4al","_id":"ckkcnnug200g5jjln2va3gnwl"},{"post_id":"ckkcnnudt004ojjln0zdf57g9","tag_id":"ckkcnnug200g4jjln428d0uau","_id":"ckkcnnug300g7jjln5uikbv3v"},{"post_id":"ckkcnnudu004qjjlngpg192ip","tag_id":"ckkcnnug200g6jjlngjewbhmr","_id":"ckkcnnug300gajjlncoih6moj"},{"post_id":"ckkcnnudu004qjjlngpg192ip","tag_id":"ckkcnnug300g8jjln8c9t9mtm","_id":"ckkcnnug300gbjjlnd9tz02qq"},{"post_id":"ckkcnnudw004ujjln1hwo5drm","tag_id":"ckkcnnug300g9jjln9djbcmq4","_id":"ckkcnnug400gdjjln69p7aeez"},{"post_id":"ckkcnnudw004wjjln511l27jx","tag_id":"ckkcnnufd00c2jjln2xgc2owg","_id":"ckkcnnug400ggjjlnd7zq1bsb"},{"post_id":"ckkcnnudw004wjjln511l27jx","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnug400ghjjlnez5g3dvp"},{"post_id":"ckkcnnudy0050jjlngghb3iye","tag_id":"ckkcnnufd00c2jjln2xgc2owg","_id":"ckkcnnug500gkjjln915c8wmv"},{"post_id":"ckkcnnudy0050jjlngghb3iye","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnug600gljjln91krb6zv"},{"post_id":"ckkcnnudz0052jjlndiek84zz","tag_id":"ckkcnnufd00c2jjln2xgc2owg","_id":"ckkcnnug600gojjln4nft3jk0"},{"post_id":"ckkcnnudz0052jjlndiek84zz","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnug600gpjjln03kaapsy"},{"post_id":"ckkcnnue20055jjln5gfo867i","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnug700gsjjlnh6vxck03"},{"post_id":"ckkcnnue20055jjln5gfo867i","tag_id":"ckkcnnug600gqjjln3wl01cv6","_id":"ckkcnnug700gtjjln2yo13jg9"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnug800gwjjln54kh6wcn"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","tag_id":"ckkcnnug700gujjln56ga0pw0","_id":"ckkcnnug800gxjjln6kl68inq"},{"post_id":"ckkcnnue30058jjlnei3w2jcv","tag_id":"ckkcnnug800gvjjlndklbbi1c","_id":"ckkcnnug800gyjjln03172br8"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","tag_id":"ckkcnnubc0005jjln3svl52u6","_id":"ckkcnnugh00hdjjlngzipg7ic"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","tag_id":"ckkcnnugd00h1jjlna81f2xpy","_id":"ckkcnnugh00hfjjln6w76fsk4"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","tag_id":"ckkcnnugf00h5jjlndxhz0im6","_id":"ckkcnnugh00hijjlna0btafjg"},{"post_id":"ckkcnnugb00gzjjln8zpk8hwl","tag_id":"ckkcnnugg00h8jjlndu3b88cl","_id":"ckkcnnugh00hkjjln3oj8dywe"},{"post_id":"ckkcnnugc00h0jjln8c5922e8","tag_id":"ckkcnnugg00hcjjln9g738lhr","_id":"ckkcnnugi00hnjjln570tcdfe"},{"post_id":"ckkcnnugd00h2jjln9mjggmfy","tag_id":"ckkcnnugh00hhjjlnhjq97sal","_id":"ckkcnnugi00hqjjln8d0kf4rj"},{"post_id":"ckkcnnugd00h2jjln9mjggmfy","tag_id":"ckkcnnugh00hmjjln2ssr2lay","_id":"ckkcnnugi00hrjjlnguk30c8e"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","tag_id":"ckkcnnug400gejjln1lo52vgp","_id":"ckkcnnugi00hsjjlnchc9btbj"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","tag_id":"ckkcnnug600gqjjln3wl01cv6","_id":"ckkcnnugi00htjjlnfxuw3avc"},{"post_id":"ckkcnnuge00h3jjlnb53w6kxw","tag_id":"ckkcnnugi00hpjjln0lfv9pzo","_id":"ckkcnnugi00hujjln5qiqedq4"},{"post_id":"ckkcnnugr00hvjjlneigg1y3d","tag_id":"ckkcnnugx00hxjjln4thc1zva","_id":"ckkcnnugy00i4jjln5c8nff65"},{"post_id":"ckkcnnugr00hvjjlneigg1y3d","tag_id":"ckkcnnugy00hzjjlnejvw62cr","_id":"ckkcnnugy00i6jjlncmjegby3"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","tag_id":"ckkcnnugy00i2jjlnc0x1etb1","_id":"ckkcnnugz00ibjjln91dwfku4"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","tag_id":"ckkcnnugz00i8jjlnce5q8m5y","_id":"ckkcnnugz00icjjln5x47go25"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","tag_id":"ckkcnnugz00i9jjln1gbmcprw","_id":"ckkcnnugz00idjjln98k477o0"},{"post_id":"ckkcnnugw00hwjjlngzw071oi","tag_id":"ckkcnnugz00iajjln2liac6pf","_id":"ckkcnnugz00iejjlnbgt50xsf"},{"post_id":"ckkcnnuhb00ifjjln3qeudy6w","tag_id":"ckkcnnuhc00igjjln6whag0mm","_id":"ckkcnnuhd00ijjjln08gs107f"}],"Tag":[{"name":"JWT","_id":"ckkcnnubc0005jjln3svl52u6"},{"name":"跨域","_id":"ckkcnnubg000bjjlnc6wud804"},{"name":"分页","_id":"ckkcnnubk000gjjln3buxaujf"},{"name":"序列化","_id":"ckkcnnubn000ljjlngvt27dh3"},{"name":"反序列化","_id":"ckkcnnubr000qjjln1n8lbrvw"},{"name":"入门教程","_id":"ckkcnnubv000vjjlnfyss5v8d"},{"name":"视图","_id":"ckkcnnuby0011jjln66de6u2t"},{"name":"模板","_id":"ckkcnnuc30016jjln7hvag2rw"},{"name":"namespace","_id":"ckkcnnuc5001bjjlncabv475d"},{"name":"app_name","_id":"ckkcnnuc9001hjjlnf39a5x9y"},{"name":"reverse","_id":"ckkcnnucc001mjjln9yg8c1z4"},{"name":"路由","_id":"ckkcnnuce001qjjln09zabkcy"},{"name":"ORM操作","_id":"ckkcnnuch001ujjln51e90qc7"},{"name":"中间件","_id":"ckkcnnucp0022jjln5wd1g1w6"},{"name":"图片上传","_id":"ckkcnnucr002ajjln26f6dkpo"},{"name":"auth","_id":"ckkcnnud2002xjjlnfbf5ezy4"},{"name":"缓存","_id":"ckkcnnud9003bjjln8tiu9l3p"},{"name":"邮件","_id":"ckkcnnudc003kjjln2kxz8ipx"},{"name":"itsdangerous","_id":"ckkcnnudf003rjjln4xdaaf1r"},{"name":"临时身份令牌","_id":"ckkcnnudi003yjjlndzw89q33"},{"name":"易错点","_id":"ckkcnnudm0044jjlneuepdzic"},{"name":"JS","_id":"ckkcnnudq004djjlnajzfg8y8"},{"name":"ES6","_id":"ckkcnnuds004ljjln0ri37hfe"},{"name":"var","_id":"ckkcnnudv004tjjln5obp9xpz"},{"name":"let","_id":"ckkcnnudx004zjjln03lb1dhe"},{"name":"const","_id":"ckkcnnue30056jjlnampx7dbp"},{"name":"箭头函数","_id":"ckkcnnue4005bjjlncvvn1mxo"},{"name":"vue","_id":"ckkcnnue5005gjjlngpd61l1b"},{"name":"vue-router","_id":"ckkcnnue6005mjjlnhth389wx"},{"name":"v-on","_id":"ckkcnnuea0064jjln24bkfk2k"},{"name":"Js事件","_id":"ckkcnnuec0069jjlnez1p2cku"},{"name":"事件修饰符","_id":"ckkcnnued006ejjln4gm91ors"},{"name":"事件绑定","_id":"ckkcnnued006ijjln5zkd7ekf"},{"name":"图片","_id":"ckkcnnuee006mjjlndmjtedxb"},{"name":"样式","_id":"ckkcnnuef006tjjlnfh8x96i0"},{"name":"Ebook","_id":"ckkcnnueg0070jjln2gj42beb"},{"name":"内置函数","_id":"ckkcnnueh0076jjln5eifbgog"},{"name":"lambda","_id":"ckkcnnuei007cjjln34ych4yt"},{"name":"匿名函数","_id":"ckkcnnuej007hjjlnaa3ebm8l"},{"name":"LEGB","_id":"ckkcnnuek007mjjln2oavco6c"},{"name":"作用域","_id":"ckkcnnuel007sjjln6dk907d0"},{"name":"global","_id":"ckkcnnuem007wjjlngdoy0luz"},{"name":"nonlocal","_id":"ckkcnnuen0080jjlnej1sfbur"},{"name":"闭包","_id":"ckkcnnueo0085jjln2qn8bcys"},{"name":"装饰器","_id":"ckkcnnueo008bjjln51qiagba"},{"name":"递归函数","_id":"ckkcnnuep008ijjlne6sh02ko"},{"name":"高阶函数","_id":"ckkcnnueq008ojjlnhws1djb8"},{"name":"sorted","_id":"ckkcnnues008ujjln5ic4fnhi"},{"name":"map","_id":"ckkcnnues008yjjlndytidge2"},{"name":"reduce","_id":"ckkcnnuet0092jjlnhv3gfcin"},{"name":"filter","_id":"ckkcnnueu0096jjln6q2v5l26"},{"name":"Json","_id":"ckkcnnueu009bjjlnhdpk4wjd"},{"name":"时间模块","_id":"ckkcnnuev009hjjlngd8l3of2"},{"name":"魔法方法","_id":"ckkcnnuew009njjlncan4c738"},{"name":"引用计数","_id":"ckkcnnuex009tjjln91it5efj"},{"name":"分代回收","_id":"ckkcnnuey00a0jjlnfx2f31dj"},{"name":"标记清除","_id":"ckkcnnuey00a4jjln0n772nty"},{"name":"异常","_id":"ckkcnnuez00a9jjln7w6e3w1o"},{"name":"正则表达式","_id":"ckkcnnuf000afjjlnfpc68ngy"},{"name":"axios","_id":"ckkcnnuf100amjjlngvl954sq"},{"name":"vue-axios","_id":"ckkcnnuf200aojjln9avu1r20"},{"name":"局部axios","_id":"ckkcnnuf200aqjjlnemayaliq"},{"name":"全局axios","_id":"ckkcnnuf300asjjln46j83q2q"},{"name":"GET","_id":"ckkcnnuf500b2jjlnep4b6chs"},{"name":"POST","_id":"ckkcnnuf600b5jjln7z4qcuwe"},{"name":"API","_id":"ckkcnnuf900bhjjln7w4718ds"},{"name":"状态码","_id":"ckkcnnufb00bwjjln2i7x8quy"},{"name":"HTTP","_id":"ckkcnnufd00c2jjln2xgc2owg"},{"name":"RESTful","_id":"ckkcnnufe00c7jjlnfdhs5ui0"},{"name":"CSRF","_id":"ckkcnnufg00chjjln8rof2usx"},{"name":"Git","_id":"ckkcnnufh00cnjjln6plj0j6x"},{"name":"密钥","_id":"ckkcnnufj00csjjlndeby0ys7"},{"name":"远程仓库关联","_id":"ckkcnnufk00cxjjlncoovgb04"},{"name":"NodeJs","_id":"ckkcnnufk00d1jjlnd4e27oya"},{"name":"npm","_id":"ckkcnnufl00d7jjlnbgru5amd"},{"name":"nvm","_id":"ckkcnnufm00dcjjlnggbhc568"},{"name":"yarn","_id":"ckkcnnufo00dhjjln32vffgie"},{"name":"virtualenv","_id":"ckkcnnufp00dljjlnfvo18es7"},{"name":"pipenv","_id":"ckkcnnufq00drjjln6w9pft46"},{"name":"conda","_id":"ckkcnnufr00dxjjlnguz76t68"},{"name":"虚拟环境","_id":"ckkcnnufr00e3jjlnhziybo0x"},{"name":"pip","_id":"ckkcnnufs00e7jjln7dcae14t"},{"name":"Windows","_id":"ckkcnnuft00ebjjln5dbidzz1"},{"name":"CLI","_id":"ckkcnnufu00egjjln46tjavmh"},{"name":"终端工具","_id":"ckkcnnufv00emjjlnevzwh7aa"},{"name":"GitBook","_id":"ckkcnnufv00erjjlna3sw846r"},{"name":"Hexo","_id":"ckkcnnufw00ewjjlneqteh1z2"},{"name":"主键约束","_id":"ckkcnnufw00f0jjln91dge1yw"},{"name":"唯一约束","_id":"ckkcnnufw00f5jjlnb0ygha3z"},{"name":"float","_id":"ckkcnnufx00f8jjlna9hq10k2"},{"name":"decimal","_id":"ckkcnnufx00fcjjlnfmo0clrb"},{"name":"varbinary","_id":"ckkcnnufx00fdjjln5uqqd4an"},{"name":"binary","_id":"ckkcnnufy00fgjjln0rwy8p7x"},{"name":"char","_id":"ckkcnnufy00fhjjlnb9atblkn"},{"name":"varchar","_id":"ckkcnnufy00fijjln8n472o2s"},{"name":"错误说明","_id":"ckkcnnufz00fjjjln3elz1w6a"},{"name":"用户管理","_id":"ckkcnnufz00fmjjlnftq8fvc5"},{"name":"mysql软件操作","_id":"ckkcnnug000fpjjlnf7951snl"},{"name":"redis命令","_id":"ckkcnnug000frjjlnhg1v3kuu"},{"name":"感悟","_id":"ckkcnnug000fujjln929xcga4"},{"name":"笑话","_id":"ckkcnnug100fwjjln0qvr06q7"},{"name":"排序","_id":"ckkcnnug100fyjjln9s5322g7"},{"name":"时间复杂度","_id":"ckkcnnug100g0jjln4a90c4al"},{"name":"office","_id":"ckkcnnug200g4jjln428d0uau"},{"name":"deepin","_id":"ckkcnnug200g6jjlngjewbhmr"},{"name":"nvidia","_id":"ckkcnnug300g8jjln8c9t9mtm"},{"name":"开机自启","_id":"ckkcnnug300g9jjln9djbcmq4"},{"name":"TCP","_id":"ckkcnnug400gejjln1lo52vgp"},{"name":"WEB Server","_id":"ckkcnnug600gqjjln3wl01cv6"},{"name":"短连接","_id":"ckkcnnug700gujjln56ga0pw0"},{"name":"长连接","_id":"ckkcnnug800gvjjlndklbbi1c"},{"name":"权限","_id":"ckkcnnugd00h1jjlna81f2xpy"},{"name":"认证","_id":"ckkcnnugf00h5jjlndxhz0im6"},{"name":"限流","_id":"ckkcnnugg00h8jjlndu3b88cl"},{"name":"面向对象","_id":"ckkcnnugg00hcjjln9g738lhr"},{"name":"Vue","_id":"ckkcnnugh00hhjjlnhjq97sal"},{"name":"组件","_id":"ckkcnnugh00hmjjln2ssr2lay"},{"name":"高并发","_id":"ckkcnnugi00hpjjln0lfv9pzo"},{"name":"django","_id":"ckkcnnugx00hxjjln4thc1zva"},{"name":"ORM模型类","_id":"ckkcnnugy00hzjjlnejvw62cr"},{"name":"线程","_id":"ckkcnnugy00i2jjlnc0x1etb1"},{"name":"进程","_id":"ckkcnnugz00i8jjlnce5q8m5y"},{"name":"协程","_id":"ckkcnnugz00i9jjln1gbmcprw"},{"name":"多任务","_id":"ckkcnnugz00iajjln2liac6pf"},{"name":"SQL语句","_id":"ckkcnnuhc00igjjln6whag0mm"}]}}