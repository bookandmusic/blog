<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx入门</title>
    <url>/2021/09/25/-XZpuA7FB/</url>
    <content><![CDATA[<p>Nginx——Ngine X，是一款高性能的反向代理服务器；也是一个IMAP、POP3、SMTP代理服务器；也是一个Http服务器。</p>
<span id="more"></span>

<p>Nginx 是一款轻量级的 Web 服务器 / 反向代理服务器以及电子邮件代理服务器。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。</p>
<p>Nginx 相较于 Apache\lighttpd 具有占有内存少，稳定性高等优势，并且依靠并发能力强，丰富的模块库以及友好灵活的配置而闻名。在 Linux 操作系统下，nginx 使用 epoll 事件模型, 得益于此，nginx 在 Linux 操作系统下效率相当高。</p>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><p>代理服务器（Proxy Server）一般是指局域网内部的机器通过代理服务器发送请求到互联网上的服务器，代理服务器一般作用在客户端。</p>
<p>举个通俗的例子，比如本地网络无法直接访问一些网站或者服务器，必须通过一个代理点服务器，那个服务器和你的本地网络是可以直接 ping 通的，然后你就必须设置这个代理服务器的一些参数，比如 ip，端口，然后通过这个平台连接到其他网络区域。</p>
<p>一个完整的代理请求过程为：客户端首先与代理服务器创建连接，接着根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或者获得目标服务器的指定资源。 Web 代理（proxy）服务器是网络的中间实体。代理位于 Web 客户端和 Web 服务器之间，扮演 “中间人” 的角色。代理服务器是介于客户端和 Web 服务器之间的另一台服务器，有了它之后，浏览器不是直接到 Web 服务器去取回网页而是向代理服务器发出请求，信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p>
<p>代理服务器是一种重要的服务器安全功能，它的工作主要在开放系统互联 (OSI) 模型的会话层，起到防火墙的作用，保证其安全性。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。如</p>
<p>客户端（用户 A）向反向代理服务器 z 发送请求，接着反向代理服务器 Z 将判断将向何处（原始服务器 B）转交请求，获得原始服务器 B 返回的内容后，将获得的内容返回给客户端用户 A。而客户端始终认为它访问的是原始服务器 B 而不是服务器 Z。由于防火墙作用，只允许服务器 Z 进出，防火墙和反向代理共同作用保护了原始服务器 B。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/07/image-20210719214248766.png" alt="image-20210719214248766"></p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器获取内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。客户端才能使用正向代理。</p>
<p>如客户端 A（用户 A,B）和原始服务器（服务器 B）之间的服务器（代理服务器 Z），为了从原始服务器获取内容，用户 A 向代理服务器 Z 发送一个请求并指定目标（服务器 B），然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/07/iShot2021-07-19%2021.58.09.png" alt="iShot2021-07-1921.58.09"></p>
<p>正向代理为防火墙内的局域网客户端提供了访问 Internet 的途径。还可以使用缓冲特性减少网络使用率。</p>
<h3 id="反向代理VS正向代理"><a href="#反向代理VS正向代理" class="headerlink" title="反向代理VS正向代理"></a>反向代理VS正向代理</h3><h4 id="用途差异"><a href="#用途差异" class="headerlink" title="用途差异"></a>用途差异</h4><ul>
<li><p>  正向代理的典型用途是为在防火墙内的局域网客户端提供访问 Internet 的途径。正向代理还可以使用缓冲特性减少网络使用率；</p>
</li>
<li><p>  反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。</p>
</li>
<li><p>  另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。</p>
</li>
</ul>
<h4 id="安全差异"><a href="#安全差异" class="headerlink" title="安全差异"></a>安全差异</h4><ul>
<li><p>  正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此必须采取安全措施以确保仅为经过授权的客户端提供服务；</p>
</li>
<li><p>  反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p>
</li>
</ul>
<h3 id="Nginx-优势"><a href="#Nginx-优势" class="headerlink" title="Nginx 优势"></a>Nginx 优势</h3><ol>
<li> 作为 Web 服务器，Nginx 处理静态文件、索引文件，自动索引的效率非常高</li>
<li> 作为代理服务器，Nginx 可以实现无缓存的反向代理加速，提高网站运行速度</li>
<li> 作为负载均衡服务器，Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持 HTTP 代理服务器对外进行服务，同时还支持简单的容错和利用算法进行负载均衡</li>
<li> 在性能方面，Nginx 是专门为性能优化而开发的，实现上非常注重效率。它采用内核 Poll 模型，可以支持更多的并发连接，最大可以支持对 5 万个并发连接数的响应，而且只占用很低的内存资源</li>
<li> 在稳定性方面，Nginx 采取了分阶段资源分配技术，使得 CPU 与内存的占用率非常低。Nginx 官方表示，Nginx 保持 1 万个没有活动的连接，而这些连接只占用 2.5MB 内存，因此，类似 DOS 这样的攻击对 Nginx 来说基本上是没有任何作用的</li>
<li> 在高可用性方面，Nginx 支持热部署，启动速度特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到 7x24 小时不间断地运行</li>
<li> 总的来说 Nginx 具有很高的稳定性；支持热部署；代码质量非常高，代码很规范，手法成熟，模块扩展也很容易。</li>
</ol>
<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br><span class="line"></span><br><span class="line">apt install -y nginx</span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><blockquote>
<p>  nginx配置文件主要分为四块：</p>
</blockquote>
<ul>
<li><p>  <code>main</code>（全局设置）：main部分设置的指令将影响到其它所有部分设置；</p>
</li>
<li><p>  <code>server</code>（主机设置）：server部分的指令主要用于指定虚拟主机域名、IP和端口；</p>
</li>
<li><p>  <code>upstream</code>（上游服务器设置，主要为反向代理、负载均衡相关配置）：upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>
</li>
<li><p>  <code>location</code>（URL匹配特定位置后的设置）：location部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）；</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用的用户和组</span></span><br><span class="line">user nginx;</span><br><span class="line"><span class="comment"># 指定工作衍生进程数（一般等于CPU总核数或总核数的两倍）</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment"># 日志位置和日志级别</span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log; </span><br><span class="line"><span class="comment"># 指定PID存放的路径</span></span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件区块</span></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment"># 使用的网络I/O模型，linux平台推荐采用epoll模型，freebsd系统采用kqueue模型</span></span><br><span class="line">    use epoll;</span><br><span class="line">    <span class="comment"># 允许最大连接数</span></span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http区块</span></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 开启高效传输模式</span></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    <span class="comment"># 链接超时</span></span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># nginx支持的媒体类型库文件</span></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    <span class="comment"># 默认的媒体类型</span></span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    </span><br><span class="line">	<span class="comment"># 下面是server虚拟主机的配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">    	<span class="comment"># 提供服务的端口</span></span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        <span class="comment"># 提供服务的主机的域名</span></span><br><span class="line">        server_name  _;</span><br><span class="line">        <span class="comment"># 站点的根目录</span></span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        location / &#123; <span class="comment"># location区块</span></span><br><span class="line">        	<span class="comment"># 根路径</span></span><br><span class="line">        	root html;</span><br><span class="line">        	<span class="comment"># 默认的首页文件，多个用空格隔开</span></span><br><span class="line">        	index index.htm index.html;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment"># 出现对应的 http状态码时，返回对应的错误页面</span></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment"># 开启ssl加密传输,其余配置和上面类似</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;  # ssl加密证书, 证书其实是个公钥，它会被发送到连接服务器的每个客户端</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;  # ssl加密的私钥，私钥是用来解密的</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m; # 设置ssl/tls会话缓存的类型和大小</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m; # 客户端可以重用会话缓存中ssl参数的过期时间</span></span><br><span class="line"><span class="comment">#        ssl_ciphers PROFILE=SYSTEM; # 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        location / &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nginx文件结构"><a href="#Nginx文件结构" class="headerlink" title="Nginx文件结构"></a>Nginx文件结构</h3><p>1、全局块：配置影响nginx全局的指令。一般有运行<code>nginx</code>服务器的用户组，<code>nginx</code>进程<code>pid</code>存放路径，日志存放路径，配置文件引入，允许生成<code>worker process</code>数等。</p>
<p>2、<code>events</code>块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p>
<p>3、<code>http</code>块：可以嵌套多个<code>server</code>，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，<code>mime-type</code>定义，日志自定义，是否使用<code>sendfile</code>传输文件，连接超时时间，单连接请求数等。</p>
<p>4、<code>server</code>块：配置虚拟主机的相关参数，一个<code>http</code>中可以有多个<code>server</code>。</p>
<p>5、<code>location</code>块：配置请求的路由，以及各种页面的处理情况。</p>
<h3 id="Nginx常见的配置项"><a href="#Nginx常见的配置项" class="headerlink" title="Nginx常见的配置项"></a>Nginx常见的配置项</h3><ol>
<li><p> <code>$remote_addr</code> 与 <code>$http_x_forwarded_for</code> 用以记录客户端的ip地址；</p>
</li>
<li><p> <code>$remote_user</code> ：用来记录客户端用户名称；</p>
</li>
<li><p> <code>$time_local</code> ： 用来记录访问时间与时区；</p>
</li>
<li><p> <code>$request</code> ： 用来记录请求的url与http协议；</p>
</li>
<li><p> <code>$status</code> ： 用来记录请求状态；成功是200；</p>
</li>
<li><p> <code>$body_bytes_sent</code> ：记录发送给客户端文件主体内容大小；</p>
</li>
<li><p> <code>$http_referer</code> ：用来记录从那个页面链接访问过来的；</p>
</li>
<li><p> <code>$http_user_agent</code> ：记录客户端浏览器的相关信息；</p>
</li>
</ol>
<p>每个指令必须有分号结束。</p>
<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx <span class="comment"># 启动服务</span></span><br><span class="line"></span><br><span class="line">nginx -s stop <span class="comment"># 停止服务</span></span><br><span class="line"></span><br><span class="line">nginx -s reload <span class="comment"># 重新加载服务，一般是修改完配置文件，执行该命令</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql软件安装常见错误</title>
    <url>/2020/04/21/-yGKUuFtl/</url>
    <content><![CDATA[<p>简单对常见错误进行总结、归纳。</p>
<span id="more"></span>

<h2 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h2><h3 id="1819-Mysql密码等级问题"><a href="#1819-Mysql密码等级问题" class="headerlink" title="1819 Mysql密码等级问题"></a>1819 Mysql密码等级问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在修改MySQL密码时，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>MySQL 8.0 调整密码验证规则：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;      # 调整密码复杂性策略，<span class="number">0</span> LOW <span class="number">1</span> MEDIUM <span class="number">2</span> STRONG</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">1</span>;      # 设置密码复杂性要求密码最低长度为<span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@validate</span>_password.policy;          # 查看密码复杂性策略</span><br></pre></td></tr></table></figure>

<p>MySQL 5.7</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;       # 关闭密码复杂性策略</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">1</span>;      # 设置密码复杂性要求密码最低长度为<span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@validate</span>_password_policy;          # 查看密码复杂性策略</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="1698-只能root用户登录Mysql"><a href="#1698-只能root用户登录Mysql" class="headerlink" title="1698 只能root用户登录Mysql"></a>1698 只能root用户登录Mysql</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>如果mysql安装时，没有提示输入密码，则会随机分配密码，直接mysql -u root -p则无法登录，报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost</span><br></pre></td></tr></table></figure>

<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>  用管理员权限进入数据库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql -uroot -p</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  修改加密方式和密码</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>  刷新</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>  最后重启终端，就可通过 <code>mysql -u root -p</code> 免sudo登录mysql啦！</li>
</ol>
<h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h2><h3 id="1042服务启动异常"><a href="#1042服务启动异常" class="headerlink" title="1042服务启动异常"></a>1042服务启动异常</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>mysql已经发展到了8.0阶段，但是很多人在下载了安装了mysql8.0后，在快接近完成的阶段下出现了异常：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error 1042：Unable to connect to any of the specified MySQL hosts</span><br></pre></td></tr></table></figure>

<p>上述异常直接导致mysql无法正常Finish，如图所示：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql-1042.png" alt="Mysql-1042"></p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>windows端使用<code>Win+R</code> –&gt; 运行 <code>&quot;services.msc&quot;</code> –&gt; 打开service服务管理器，找到刚才安装mysql的服务名称</p>
</li>
<li><p>右键 –&gt; 属性 –&gt; 登录，更改成”本地系统账户” –&gt; 确定</p>
<p> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/Mysql%E7%99%BB%E5%BD%95%E8%BA%AB%E4%BB%BD%E4%BF%AE%E6%94%B9.png" alt="Mysql登录身份修改"></p>
</li>
<li><p>回到安装程序，在次点击Execute，会发现已经可以成功到Finish界面</p>
</li>
</ol>
<h3 id="1045用户密码错误"><a href="#1045用户密码错误" class="headerlink" title="1045用户密码错误"></a>1045用户密码错误</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>在数据库安装之后，使用<code>mysql -uroot -p</code>链接数据库时，出现以下异常:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1045    Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password:YES)</span><br></pre></td></tr></table></figure>

<p>这个意思是说：用户“root”@本地主机的访问被拒绝</p>
<p>那为什么会出现这种错误呢？</p>
<p>答案是这样：这种问题的本质是用户密码出现错误。</p>
<h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>  打开命令窗口cmd，停止MySQL服务，输入命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  开启跳过密码验证登录的MySQL服务,输入命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --console --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>  再打开一个新的cmd，无密码登录MySQL，输入登录命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>  重置用户名对应的密码，命令如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; <span class="comment">--修改密码为空</span></span><br><span class="line"></span><br><span class="line">flush privileges; <span class="comment">--刷新权限</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>  退出mysql</p>
</li>
<li><p>  关闭以<code>--console --skip-grant-tables --shared-memory</code> 启动的MySQL服务，</p>
</li>
<li><p>  打开命令框，启动MySQL服务。输入</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>  再次登录无密码登录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>  正确修改root密码</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>  退出，再次成功登录，到此，重置密码结束。</li>
</ol>
<h3 id="Mysql数据库初始化"><a href="#Mysql数据库初始化" class="headerlink" title="Mysql数据库初始化"></a>Mysql数据库初始化</h3><p>当Mysql数据库链接失败， 跳过用户名验证也失败， 需要先删除 安装目录下的<code>data</code>文件夹, 然后重新初始化,生成初始化密码</p>
<ol>
<li>  以管理员的身份打开cmd窗口跳转路径到<code>X:\xxx\mysql-8.0.11-winx64\bin</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user=mysql --console</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  按照上面的流程，就可以跳过用户名验证，重新设置mysql密码</li>
</ol>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-图片上传</title>
    <url>/2020/03/16/-zCK1qD29/</url>
    <content><![CDATA[<p>static 和 media 都是存放文件的地方，但是又有区别，以下是两个文件夹的区别和用法</p>
<span id="more"></span>

<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>static 是静态文件，主要存的是 CSS, JavaScript, 网站 logo 等不变的文件。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置 <code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 静态文件别名（相对路径） 和 绝对路径</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;app01/static&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># STATIC_ROOT 配置部署的时候才用</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在项目中将模板层用到的静态文件都放入该文件夹中</p>
<h3 id="media"><a href="#media" class="headerlink" title="media"></a>media</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>media 主要用来保存用户上传的文件，例如图片等</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>配置 <code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&quot;/media/&quot;</span>   <span class="comment"># 媒体文件别名(相对路径) 和 绝对路径</span></span><br><span class="line">MEDIA_ROOT = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;app01/media&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>配置路由</p>
<ul>
<li><p>在子应用正常配置路由</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> *</span><br><span class="line">app_name = <span class="string">&#x27;goods&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, GoodsCreateView.as_view(), name=<span class="string">&#x27;create&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>在项目的主路由中对图片上传的路径信息进行配置</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django01 <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"><span class="comment"># 对外展示图片的地址信息</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h3><ul>
<li>定义包含图片字段的模型类<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&quot;名称&quot;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&quot;单价&quot;</span>)</span><br><span class="line">    nums = models.IntegerField(verbose_name=<span class="string">&quot;数量&quot;</span>)</span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;img&#x27;</span>, verbose_name=<span class="string">&quot;图片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&quot;tb_goods&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;商品&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;goods:create&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    价格:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    数量:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nums&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    图片:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    &#123;% for good in goods %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;height: 200px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="添加商品"><a href="#添加商品" class="headerlink" title="添加商品"></a>添加商品</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCreateView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;goods.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">        nums = request.POST.get(<span class="string">&#x27;nums&#x27;</span>)</span><br><span class="line">        img = request.FILES.get(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([name, price, nums, img]):</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;goods:create&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Goods.objects.create(name=name, price=price, nums=nums, img=img)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;goods:create&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;goods:index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="展示商品"><a href="#展示商品" class="headerlink" title="展示商品"></a>展示商品</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        goods = Goods.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;goods&#x27;</span>: goods&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>图片上传</tag>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实例</title>
    <url>/2021/07/21/05fD5_2kL/</url>
    <content><![CDATA[<p>本文将以具体的实例演示使用Nginx搭建动态网站和静态网站的大体流程，注意：本文仅供参考。</p>
<span id="more"></span>

<h2 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h2><blockquote>
<p>  以下以<code>hexo</code>静态博客为例，演示部署流程</p>
</blockquote>
<ul>
<li><p>  将生成的静态资源文件夹放到 <code>/var/www/</code>中，起名为<code>blog</code></p>
</li>
<li><p>打开 <code>nginx</code>配置文件，添加 <code>server</code> 模块</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost:<span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        alias /usr/local/var/www/blog/;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>  <code>listen</code>指的是 后期可以在哪个端口中，访问博客，<code>http</code>协议默认端口是 80，hexo博客部署的也是顶级路径，也就是 如果服务器域名是 <code>http://www.bookandmusic.cn/</code>, hexo服务的主页路径也是 <code>http://www.bookandmusic.cn/</code></p>
</li>
</ul>
<h2 id="部署动态网站"><a href="#部署动态网站" class="headerlink" title="部署动态网站"></a>部署动态网站</h2><blockquote>
<p>  以下以 <code>django</code>项目为例，演示 部署流程</p>
</blockquote>
<ul>
<li><p>  确定 django项目中的静态资源路径以及 <code>supervisor</code> 启动的django服务的地址</p>
</li>
<li><p>打开 <code>nginx</code>配置文件，添加 <code>server</code> 模块</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name localhost:<span class="number">7003</span>;</span><br><span class="line">    # 静态文件配置</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        alias /Users/lsf/PycharmProjects/DjangoBlog/collectedstatic/;</span><br><span class="line">        expires max;</span><br><span class="line">        access_log        off;</span><br><span class="line">        log_not_found    off;</span><br><span class="line">    &#125;</span><br><span class="line">    location /media/ &#123;</span><br><span class="line">        # 静态文件配置</span><br><span class="line">        alias /Users/lsf/PycharmProjects/DjangoBlog/uploads/;</span><br><span class="line">        expires max;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.py$ &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        if (!-f $request_filename) &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:8000;</span></span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>  <code>https</code>协议默认的端口是443，此时默认部署的django项目的路径为 顶级路径，也就是 如果服务器域名是 <code>https://www.bookandmusic.cn/</code>, django服务的主页路径也是 <code>https://www.bookandmusic.cn/</code></p>
</li>
</ul>
<blockquote>
<p>  部署 <code>https://</code>协议对应的网站，需要指明 <code>ssl</code>证书和解密私钥</p>
</blockquote>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>现在有三个不同的服务：</p>
<ul>
<li><p>  <code>http://127.0.0.1:7000/</code>: 博客服务</p>
</li>
<li><p>  <code>http://127.0.0.1:7001/</code>: django文档服务</p>
</li>
<li><p>  <code>http://127.0.0.1:7002/</code>: flask文档服务</p>
</li>
</ul>
<p>此时，想要在同样的域名 <code>http://www.bookandmusic.cn/</code>下，通过不同的子路径来体现不同的服务</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//127.0.0.1:7000/;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /drf/ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//127.0.0.1:7001/;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /flask/ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//127.0.0.1:7002/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h3><blockquote>
<p>  如果想要将 django动态服务，部署到 子路径<code>/django/</code>下</p>
</blockquote>
<ul>
<li>  首先需要修改<code>django</code>项目的 主路由，在 所有的 路由地址前面，添加 <code>/django/</code>路由前缀</li>
<li>  其次，修改 静态资源的 <code>url</code>前缀，也就是 <code>MEDIA_URL</code> 和 <code>STATIC_URL</code>，添加 <code>/django/</code>前缀</li>
<li>  最后，才是 修改 <code>nginx</code>配置，添加前缀</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 7003;</span><br><span class="line">    server_name localhost:<span class="number">7003</span>;</span><br><span class="line">    location /django/static/ &#123;</span><br><span class="line">        alias /Users/lsf/PycharmProjects/DjangoBlog/collectedstatic/;</span><br><span class="line">        expires max;</span><br><span class="line">        access_log        off;</span><br><span class="line">        log_not_found    off;</span><br><span class="line">    &#125;</span><br><span class="line">    location /django/media/ &#123;</span><br><span class="line">        # 静态文件配置</span><br><span class="line">        alias /Users/lsf/PycharmProjects/DjangoBlog/uploads/;</span><br><span class="line">        expires max;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.py$ &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location /django/ &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        if (!-f $request_filename) &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:8000;</span></span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">   	</span><br><span class="line">    location /django/ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//127.0.0.1:7003/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  此时，就可以通过 <code>https://www.bookandmusic.cn/django/</code> 访问项目</li>
</ul>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>django项目，现在部署了多个服务</p>
<ul>
<li><p>  <code>http://127.0.0.1:7000/</code></p>
</li>
<li><p>  <code>http://127.0.0.1:7001/</code></p>
</li>
<li><p>  <code>http://127.0.0.1:7002/</code></p>
</li>
</ul>
<p>此时，为了分担压力，在访问 <code>https://www.bookandmusic.cn/</code>时，需要 分发到不同的服务中，也就是所谓的负载均衡</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    # 此时配置服务时，不需要要 http或https</span><br><span class="line">    server 127.0.0.1:<span class="number">7000</span>;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7001</span>;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7002</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//django/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router</title>
    <url>/2020/04/14/0-BP-32Qj/</url>
    <content><![CDATA[<p>Vue.js官方提供了一套专用的路由工具库 Vue Router,其使用和配置都非常简单。</p>
<span id="more"></span>

<h2 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h2><p>可以使用npm包的方式来安装路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-router --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实通过Vue-cli脚手架快速搭建项目时，命令行会询问是否安装路由功能，从而并不需要额外安装路由功能</p>
</blockquote>
<p>通过Vue-cli脚手架搭建的项目，在<code>src/router</code>文件夹内部有<code>index.js</code>文件，打开index.js文件会看到以下引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br></pre></td></tr></table></figure>

<p>在入口文件<code>src/main.js</code>中导入<code>src/router/index.js</code>文件，即可使用路由配置的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line"><span class="comment">//import router from &#x27;./router/index.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="建立路由模块"><a href="#建立路由模块" class="headerlink" title="建立路由模块"></a>建立路由模块</h2><p>先建立一个路由器模块,主要用来配置和绑定相关信息。</p>
<p>在<code>src/router/index.js</code>文件中使用<code>new Router</code>命令创建一个路由,一个路由是一个对象。</p>
<p>一条路由的实现需要三部分:<code>name</code> 、<code>path</code>和<code>component</code>。<code>name</code>是命名,<code>path</code>是路径,<code>component</code>是组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="comment">// 把对应的组件或页面引入进来</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;@/pages/login&#x27;</span> <span class="comment">// @指src根路径</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 这里默认是跳转到HelloWorld 组件， 后期会改为项目首页</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Login  <span class="comment">// 后续如果还有页面要跳转，就按照这样的格式继续书写</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>导入<code>HelloWorld</code>组件的时候，实际上导入的是<code>src/components/HelloWorld.vue</code>.因为在<code>Webpack</code>中配置了，所以可以省略vue后缀。<code>*.vue</code>文件是Vue的单文件组件格式，可以同时包括模板定义、样式定义和组件模块定义。</p>
</blockquote>
<h2 id="启动路由器"><a href="#启动路由器" class="headerlink" title="启动路由器"></a>启动路由器</h2><h3 id="配置路由器"><a href="#配置路由器" class="headerlink" title="配置路由器"></a>配置路由器</h3><p>在<code>main.js</code>入口文件中启用该路由器。</p>
<p><code>main.js</code>作为入口文件，使用<code>import</code>可以把所有要用到的包都导入到这里，然后在Vue项目中去运用它们。</p>
<p>创建和挂载根实例，通过<code>router</code>配置参数注入路由，从而让整个应用都有路由功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">router,</span><br><span class="line"><span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>==浅析 导包方式==</p>
</blockquote>
<p> 这个不是vue的规定而是node加载模块的方式,当require(‘./router’)(import会被转为require),node是这样的寻找目标的:</p>
<ol>
<li><p>首先寻找目录下有没有router.js或者router.node,如果有就导入</p>
</li>
<li><p>如果没有看是否有router目录,如果没有就require失败,抛出异常”Cannot find module ‘./router’”</p>
</li>
<li><p>如果有router目录会在其下寻找package.json文件,如果有则按照package的配置来导入</p>
</li>
<li><p>如果没有package.json,看是否有index.js或者index.node,如果有就导入没有就失败</p>
<p> 详细见node文档：<a href="https://nodejs.org/api/modules.html#modules_folders_as_module">https://nodejs.org/api/modules.html#modules_folders_as_module</a></p>
</li>
</ol>
<h3 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h3><p>配置之后，路由匹配到的组件将会渲染到<code>App.vue</code>的<code>＜router-view&gt;&lt;/router-view&gt;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/App.vue</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="首页加载"><a href="#首页加载" class="headerlink" title="首页加载"></a>首页加载</h3><p>最后App.vue 会渲染到<code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”app”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 这样就会把渲染出来的页面挂载到id为app的div里了</p>
<h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>项目应用通常都会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路径发生跳转。重定向也是通过<code>routes</code>配置来完成的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从&quot;/&quot;重定向到&quot;/index&quot;</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/index&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重定向的目标也可以是一个命名的路由</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/p1&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: &#123; <span class="attr">name</span>:<span class="string">&quot;index&quot;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重定向的目标甚至可以是一个方法，动态返回重定向目标</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/p2&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="function"><span class="params">to</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 方法接收 &quot;目标路由&quot; 作为参数</span></span><br><span class="line">        <span class="comment">// return 重定向的 &quot;字符串路径／路径对象&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return &#x27;/index&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="lt-router-link-gt"><a href="#lt-router-link-gt" class="headerlink" title="&lt;router-link&gt;"></a><code>&lt;router-link&gt;</code></h2><p><code>&lt;router-link＞</code>组件支持用户在具有路由功能的应用中单击导航。</p>
<p>通过<code>to</code>属性可以指定目标地址,默认渲染成带有正确链接的<code>＜a＞</code>标签,通过配置<code>tag</code>属性可以生成别的标签。</p>
<p>另外,当目标路由成功激活时,链接元素会自动设置一个表示激活的<code>css</code>类名。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接给to指定属性值, 不提倡使用，尽量使用属性绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/goods&#x27;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用v-bind 绑定 JS表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/goods&#x27;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定data中的变量path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;path&#x27;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定对象，自定义网址，携带查询参数 ==&gt; /goods?id=1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;&#x27;path&#x27;:&#x27;/goods&#x27;, , query:&#123;&#x27;id&#x27;:1&#125;&#125;&#125;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定 对象，命名路由，携带params参数 ==&gt; /goods/1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由对象属性"><a href="#路由对象属性" class="headerlink" title="路由对象属性"></a>路由对象属性</h2><blockquote>
<p><code>route</code>和<code>router</code>区别:<code>vue-router</code>中经常会操作的两个对象<code>router</code>和<code>route</code>两个</p>
</blockquote>
<h3 id="route"><a href="#route" class="headerlink" title="route"></a><code>route</code></h3><p><code>route</code>是一个跳转的路由对象，每一个路由都会有一个<code>route</code>对象，是一个局部的对象，可以获取对应的<code>name</code>,<code>path</code>,<code>params</code>,<code>query</code>等</p>
<p>下面列出了常用的路由信息对象属性</p>
<ul>
<li><code>$route.path</code>: 字符串，对应当前路由的路径，总是解析为绝对路径,如<code>&quot;/goods&quot;</code></li>
<li><code>$route.params</code>: 一个<code>key/value</code>对象, 包含了动态片段和全匹配片段，如果没有路由参数，就为空对象。</li>
<li><code>$route.query</code>: 一个<code>key/value</code>对象, 表示URL查询参数。例如: 对于路径<code>/goods?cate_id=1</code>,则有<code>$route.query.cate_id == 1</code>；如果没有查询参数,则为空对象</li>
<li><code>$route.hash</code>: 当前路由的<code>hash</code>值(不带#)，如果没有<code>hash</code>值，则为空字符串。</li>
<li><code>$route.ful1Path</code>: 完成解析后的URL，包含查询参数和hash的完整路径。</li>
<li><code>$route.matched</code>: 一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是<code>routes</code>配置数组中的对象副本(还有一些在children数组)。</li>
</ul>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a><code>router</code></h3><p><code>router</code>是<code>VueRouter</code>的一个对象，通过<code>Vue.use(VueRouter)</code>和<code>VueRouter</code>构造函数得到一个<code>router</code>的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p>
<p>下面列出了常用的路由信息对象方法</p>
<h4 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h4><p><code>router.push(location)</code>: 要导航到不同的URL，则使用<code>router.push</code>方法。该方法会向<code>history</code>栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.push(<span class="string">&#x27;/goods&#x27;</span>) <span class="comment">// 字符串</span></span><br><span class="line">router.push(&#123;<span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>&#125;) <span class="comment">// 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义网址，携带查询参数</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;) <span class="comment">// -&gt; /goods?id=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名路由，携带params参数</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">&quot;goods&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;) <span class="comment">// -&gt; /goods/1</span></span><br></pre></td></tr></table></figure>

<p>  由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式了。</p>
<blockquote>
<p>当单击<code>＜router-link＞</code>时，会在内部调用<code>router.push(...)</code>方法，所以说单击<code>＜router-link:to＝&quot;...&quot;&gt;</code>等同于调用<code>router.push(...)</code>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当跳转之前，两种方式可以携带params参数</span></span><br><span class="line"><span class="comment">// &lt;router-link :to=&quot;&#123;name:&#x27;goods&#x27;, params:&#123;&#x27;id&#x27;:1&#125;&#125;&quot;&gt;商品&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">// router.push(&#123; name: &quot;goods&quot;, params: &#123; id: 1 &#125; &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的路由配置有两种方式:</span></span><br><span class="line"><span class="comment">// 1. 将参数获取直接体现在网址上</span></span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;goods&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: goods</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 此时会导致之前的params参数拼接在网址上， 为&quot;/goods/1&quot;，刷新不丢失数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不在网址上体现</span></span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;goods&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: goods</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 此时会导致之前的参数不能表现出来，网址仍为&quot;/goods&quot;，刷新之后，参数丢失</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是不管怎么配置路由，参数获取方式相同</span></span><br></pre></td></tr></table></figure>

<h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a><code>replace</code></h4><p><code>router.replace(location)</code>: <code>router.replace</code>与<code>router.push</code>很像，唯一的不同是它不会向<code>history</code>栈添加新记录，而是跟它的方法名一样只替换掉当前的history 记录。<code>router.replace(...)</code>等价于<code>＜router-link :to＝&quot;...&quot; replace＞</code></p>
<h4 id="go"><a href="#go" class="headerlink" title="go"></a><code>go</code></h4><p><code>router.go(n)</code>: 参数是一个整数，表示在<code>history</code>记录中向前进多少步或向后退多少步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 后退一步，等同于history.back()</span></span><br><span class="line">router.go(-<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 前进三步</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 如果history记录不够，就会失败</span></span><br><span class="line">router.go(-<span class="number">100</span>)</span><br><span class="line">router.go(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>python变量作用域</title>
    <url>/2020/06/06/1H2TACG4d/</url>
    <content><![CDATA[<p>在Python程序中创建、改变、查找变量名时，都是在一个保存变量名的空间中进行，我们称之为命名空间，也被称之为作用域。</p>
<p>Python的作用域是静态的，在源代码中变量名被赋值的位置决定了该变量能被访问的范围。即Python变量的作用域由变量所在源代码中的位置决定。</p>
<span id="more"></span>

<h2 id="作用域的产生"><a href="#作用域的产生" class="headerlink" title="作用域的产生"></a>作用域的产生</h2><p>只有当变量在<code>Module(模块)</code>、<code>Class(类)</code>、<code>def(函数)</code>中定义的时候，才会有作用域的概念。</p>
<p>在作用域中定义的变量，一般只在该作用域中有效。</p>
<p>在<code>if-elif-else</code>、<code>for-else</code>、<code>while</code>、<code>try-except/try-finally</code>等关键字的语句块中并不会产生作用域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    variable = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(variable)</span><br><span class="line"><span class="built_in">print</span>(variable)</span><br></pre></td></tr></table></figure>

<p>代码执行到第二个<code>print(variable)</code>时会报错 <code>NameError: name &#39;variable&#39; is not defined</code>,变量<code>variable</code>只在函数<code>func()</code>的定义域内有效！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    variable = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(variable)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100     </span><br><span class="line">******</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<p>程序没有报错，因为if语句不产生作用域</p>
<h2 id="变量作用域的类型"><a href="#变量作用域的类型" class="headerlink" title="变量作用域的类型"></a>变量作用域的类型</h2><ul>
<li>L(local)局部作用域: 函数内的命名空间</li>
<li>E(enclosing)嵌套作用域: 外部嵌套函数的命名空间</li>
<li>G(global)全局作用域: 所在模块（文件）的命名空间</li>
<li>B(built-in)内置作用域: Python内置模块的命名空间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">globalVar = <span class="number">100</span>  <span class="comment"># 全局作用域     </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_scope</span>():</span></span><br><span class="line">    enclosingVar = <span class="number">200</span>  <span class="comment"># 嵌套作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">        localVar = enclosingVar + <span class="number">1</span>  <span class="comment"># 局部作用域</span></span><br><span class="line">        <span class="built_in">print</span>(localVar)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(__name__)  <span class="comment"># 内置作用域</span></span><br></pre></td></tr></table></figure>

<h2 id="LEGB法则"><a href="#LEGB法则" class="headerlink" title="LEGB法则"></a>LEGB法则</h2><p>当在函数中使用未确定的变量名时，<code>Python</code>会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。</p>
<ul>
<li><p>首先搜索局部作用域(L)，</p>
</li>
<li><p>之后是上一层嵌套结构中<code>def</code>或<code>lambda</code>函数的嵌套作用域(E)，</p>
</li>
<li><p>之后是全局作用域(G)，</p>
</li>
<li><p>最后是内置作用域(B)。</p>
</li>
</ul>
<p>按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发<code>NameError</code>错误。</p>
<p>也就是搜索变量名的优先级：局部作用域 &gt; 嵌套作用域 &gt; 全局作用域 &gt; 内置作用域</p>
<blockquote>
<p>  实例1</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    variable = <span class="number">300</span></span><br><span class="line">    <span class="built_in">print</span>(variable)  <span class="comment">#打印局部作用域的variable</span></span><br><span class="line"></span><br><span class="line">variable = <span class="number">100</span></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(variable) <span class="comment">#打印全局作用域的variable</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">300</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  实例2</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_scopt</span>():</span></span><br><span class="line">    variable = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(variable)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(variable) <span class="comment">#此处打印的是上层嵌套函数</span></span><br><span class="line">    func()              <span class="comment">#test_scopt()中的variable</span></span><br><span class="line">variable = <span class="number">100</span></span><br><span class="line">test_scopt()</span><br><span class="line"><span class="built_in">print</span>(variable)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">200</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  实例3</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">variable = <span class="number">300</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_scopt</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(variable) <span class="comment">#此处的变量variable绑定的是下一行  </span></span><br><span class="line">    variable = <span class="number">200</span>  <span class="comment">#语句中所声明的局部变量，但未被赋值所以报错</span></span><br><span class="line"></span><br><span class="line">test_scopt()</span><br><span class="line"><span class="built_in">print</span>(variable)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: local variable &#x27;variable&#x27; referenced before assignment</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  实例4</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">variable = <span class="number">300</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_scopt</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(variable)  <span class="comment">#此处打印的是全局变量variable</span></span><br><span class="line">    <span class="comment">#variable = 200  #如果这行未被注释，那么上一句print打印的应是</span></span><br><span class="line">                     <span class="comment">#此处定义的局部变量     </span></span><br><span class="line">test_scopt()</span><br><span class="line"><span class="built_in">print</span>(variable)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">300</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>仔细体会实例4和实例3的区别！</p>
<h2 id="global与nonlocal关键字"><a href="#global与nonlocal关键字" class="headerlink" title="global与nonlocal关键字"></a>global与nonlocal关键字</h2><ul>
<li><p>global适用于函数内部修改全局变量的值</p>
</li>
<li><p>nonlocal适用于嵌套函数中内部函数修改外部变量的值</p>
</li>
</ul>
<blockquote>
<p>  实例1（global关键字）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spam = <span class="number">99</span>   <span class="comment"># &lt;--</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tester</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nested</span>():</span></span><br><span class="line">        <span class="keyword">global</span> spam   <span class="comment">#绑定到了第一行定义的spam</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;current=&#x27;</span>,spam)</span><br><span class="line">        spam = <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> nested</span><br><span class="line">tester()()</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">current= 99</span><br><span class="line">200</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  实例2（nonlocal关键字）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    count = <span class="number">10</span> <span class="comment"># &lt;--</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count <span class="comment">#绑定到了第二行定义的count</span></span><br><span class="line">        count = <span class="number">20</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue事件绑定及事件修饰符</title>
    <url>/2020/05/16/2ROKr-9nk/</url>
    <content><![CDATA[<p>要理解事件绑定，就得先了解事件。</p>
<p>浏览器是事件驱动型的，根据用户的行为触发不同的事件，根据事件执行相应的操作。</p>
<span id="more"></span>

<h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p>我们较为熟悉的事件有三大类型：</p>
<h3 id="鼠标键盘事件"><a href="#鼠标键盘事件" class="headerlink" title="鼠标键盘事件"></a>鼠标键盘事件</h3><table>
<thead>
<tr>
<th align="left">鼠标键盘事件</th>
<th align="left">事件介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onclick</td>
<td align="left">鼠标点击某个对象</td>
</tr>
<tr>
<td align="left">ondbclick</td>
<td align="left">鼠标双击某个对象</td>
</tr>
<tr>
<td align="left">onmousedown</td>
<td align="left">某个鼠标按键被按下</td>
</tr>
<tr>
<td align="left">onmouseup</td>
<td align="left">某个鼠标按键被松开</td>
</tr>
<tr>
<td align="left">onmousemove</td>
<td align="left">鼠标被移动</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td align="left">鼠标被移到某元素之上</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td align="left">鼠标从某元素移开</td>
</tr>
<tr>
<td align="left">onkeypress</td>
<td align="left">某个键盘的键被按下或按住</td>
</tr>
<tr>
<td align="left">onkeydown</td>
<td align="left">某个键盘的键被按下</td>
</tr>
<tr>
<td align="left">onkeyup</td>
<td align="left">某个键盘的键被松开</td>
</tr>
</tbody></table>
<h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><table>
<thead>
<tr>
<th align="left">页面事件</th>
<th align="left">事件介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onload</td>
<td align="left">某个页面或图像被完成加载</td>
</tr>
<tr>
<td align="left">onunload</td>
<td align="left">用户退出页面</td>
</tr>
<tr>
<td align="left">onresize</td>
<td align="left">窗口或框架被调整尺寸</td>
</tr>
<tr>
<td align="left">onerror</td>
<td align="left">当加载文档或图像时发生某个错误</td>
</tr>
<tr>
<td align="left">onabort</td>
<td align="left">图像加载被中断</td>
</tr>
</tbody></table>
<h3 id="表单相关事件"><a href="#表单相关事件" class="headerlink" title="表单相关事件"></a>表单相关事件</h3><table>
<thead>
<tr>
<th align="left">表单相关事件</th>
<th align="left">事件介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onblur</td>
<td align="left">元素失去焦点</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td align="left">元素获得焦点</td>
</tr>
<tr>
<td align="left">onchange</td>
<td align="left">用户改变域的内容</td>
</tr>
<tr>
<td align="left">onreset</td>
<td align="left">重置按钮被点击</td>
</tr>
<tr>
<td align="left">onsubmit</td>
<td align="left">提交按钮被点击</td>
</tr>
<tr>
<td align="left">onselect</td>
<td align="left">文本被选定</td>
</tr>
</tbody></table>
<blockquote>
<p>需要注意的是事件处理程序中的变量<code>event</code>保留着事件对象的信息，包括比如<code>click</code>事件，事件属性里有点击位置相对于浏览器，以及页面的坐标信息，事件的类型（<code>click</code>）,触发事件的DOM节点信息等;可以将<code>evenet</code>作为参数传递，在函数内部获取具体的evenet对象信息。</p>
</blockquote>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>在Vue.js中<code>v-on</code>指令用来监听<code>DOM</code>事件，并在触发事件时运行一些<code>JavaScript</code>代码;当然<code>v-on</code>也可以简写为<code>@</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;func&#x27;</span>&gt;</span> 显示 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">func</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.msg = <span class="string">&#x27;这是一个大大的H1&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><blockquote>
<p><code>Vue.js</code> 为 <code>v-on</code> 提供了事件修饰符来处理 <code>DOM</code> 事件细节;<code>Vue.js</code>通过由点(<code>.</code>)表示的指令后缀来调用修饰符。</p>
</blockquote>
<h3 id="事件修饰符分类"><a href="#事件修饰符分类" class="headerlink" title="事件修饰符分类"></a>事件修饰符分类</h3><p>Vue.js提供的事件修饰符主要针对两类情况:</p>
<ul>
<li><p>冒泡机制修饰符</p>
<ul>
<li><code>.stop</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
</ul>
</li>
<li><p>事件本身修饰符</p>
<ul>
<li><code>.prevent</code></li>
<li><code>.once</code></li>
</ul>
</li>
</ul>
<h3 id="冒泡机制修饰符"><a href="#冒泡机制修饰符" class="headerlink" title="冒泡机制修饰符"></a>冒泡机制修饰符</h3><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p><code>DOM</code>中，树状结构决定了子元素肯定在父元素里，所以点击子元素，就同时点击了子元素和父元素，以及父元素的父元素，以此类推，当然最终的根节点都是文档，以及<code>window</code>。</p>
<p>试想，当一个子元素被点击的时候，不仅仅这个元素本身被点击了，因为这个元素也在其上一级父元素中(属于父级元素的地盘)，所以相当于其父元素也被点击了，以此类推，一层一层往外推，最终整个文档也是被点击了，如果每个层级的节点元素都绑定了<code>click</code>事件，那么每个节点的<code>click</code>事件函数都会被执行。举个形象的例子，一个村里的人被打了（<code>click</code>），首先就要按照村里的规矩处理，同时这个村属于某个乡镇，当然也是相当于这个乡镇的人被打了，那么也要按照这个乡镇的规矩处理，以此一层一层往上报。这个例子不准确的地方就是，现实中一个人因为一个事件只会被处理一次，不会因为同一件事情多次处理。</p>
<h4 id="冒泡带来的烦恼"><a href="#冒泡带来的烦恼" class="headerlink" title="冒泡带来的烦恼"></a>冒泡带来的烦恼</h4><p>当上层（以及上上层，直至<code>body</code>元素）父级有子元素同样的方法，但你子元素的事件后，所有父级元素的同名函数也会从下到上，由里往外，挨个执行，但是大多数情况下，我们只希望子当事元素事件执行，不希望层层执行，这就要想办法阻止这种冒泡的情况发生。比如我们点击<code>Child Span</code>的时候只显示 <code>Child Span</code>的内容。结合刚刚的例子就是，村里发生了打人事件，在村里解决了，就没必要一层一层往上报，在层层处理了。</p>
<h4 id="事件修饰符-1"><a href="#事件修饰符-1" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>在Vue.js中针对Js事件本身的冒泡机制提供一些事件修饰符以便使用</p>
<p><code>.stop</code>: 阻止冒泡事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>冒泡机制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#outer</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: darkcyan;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">35px</span> <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;outer&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;inner&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">inner</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;inner触发了&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">outer</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;outer触发了&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;btn触发了&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当点击按钮时，只会触发<code>button</code>本身的<code>click</code>事件,不会继续传递</p>
</blockquote>
<p><code>.self</code>:  只当事件在该元素本身（而不是子元素）触发时触发回调函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;outer&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click.self</span>=<span class="string">&#x27;inner&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当点击按钮时, 继续触发冒泡机制，因此<code>outter</code>盒子同样会触发对应的回调函数,但是<code>inner</code>盒子并不会触发回调函数，只有点击<code>inner</code>本身时，才会正常执行回调函数</p>
</blockquote>
<p><code>.capture</code>: 添加事件侦听器时使用事件捕获模式,即拥有该事件修饰符的元素会优先触发对应事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&#x27;outer&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;inner&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span>按钮 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当点击按钮时, 继续触发冒泡机制，但是会优先触发<code>outer</code>的回调函数,其次，按照正常的冒泡顺序，由内向外</p>
</blockquote>
<h3 id="事件本身修饰符"><a href="#事件本身修饰符" class="headerlink" title="事件本身修饰符"></a>事件本身修饰符</h3><p><code>.prevent</code>:阻止默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>VueDemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.user</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">5px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/userinfo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&#x27;onsubmit&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;user.name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名。。。&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;user.pwd&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码。。。&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">pwd</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">onsubmit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`表单信息:<span class="subst">$&#123;<span class="built_in">this</span>.user.name&#125;</span>和<span class="subst">$&#123;<span class="built_in">this</span>.user.pwd&#125;</span>提交`</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>表单本身的提交行为会进行页面跳转，现在使用<code>.prevent</code>修饰符之后，只执行绑定的方法，不跳转页面;类似的还有超链接等的默认行为都可以使用该修饰符阻止</p>
</blockquote>
<p><code>.once</code>: 事件只能触发一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>VueDemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span> 你只能评论一次 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;已评论&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-中间件</title>
    <url>/2020/12/10/1JwTilrvY/</url>
    <content><![CDATA[<p>Django中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出。</p>
<p>中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性。</p>
<p>我们可以使用中间件，在Django处理视图的不同阶段对输入或输出进行干预。</p>
<blockquote>
<p>因为改变的是全局，所以需要谨慎实用，用不好会影响到性能</p>
</blockquote>
<span id="more"></span>

<h2 id="中间件作用"><a href="#中间件作用" class="headerlink" title="中间件作用"></a>中间件作用</h2><p>如果你想修改请求，例如被传送到<em>view</em>中的**<code>HttpRequest</code><strong>对象。 或者你想修改<em>view</em>返回的</strong><code>HttpResponse</code>**对象，这些都可以通过中间件来实现。</p>
<p>可能你还想在<em>view</em>执行之前做一些操作，这种情况就可以用 <code>middleware</code>来实现。</p>
<p><strong><em>Django</em>默认的中间件</strong>：（在<em>django</em>项目的<em>settings</em>模块中，有一个 <code>MIDDLEWARE_CLASSES</code> 变量，其中每一个元素就是一个中间件，如下图）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 为request/response提供了几种xss脚本过滤的安全改进，无它不安全</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 开启session会话支持，无它无session</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 基于APPEND_SLASH和PREPEND_WWW的设置来重写URL，</span></span><br><span class="line">    <span class="comment"># 如果APPEND_SLASH设为True，并且初始URL 没有以斜线结尾以及在URLconf 中没找到对应定义，这时形成一个斜线结尾的新URL；</span></span><br><span class="line">    <span class="comment"># 如果PREPEND_WWW设为True，前面缺少 www.的url将会被重定向到相同但是以一个www.开头的ur</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 添加跨站点请求伪造的保护，通过向POST表单添加一个隐藏的表单字段，并检查请求中是否有正确的值，无它无csrf保护</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 在视图函数执行前向每个接收到的user对象添加HttpRequest属性，表示当前登录的用户，无它用不了request.user</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 开启基于Cookie和会话的消息支持，无它无message</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 对点击劫持的保护</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="中间件示意图"></p>
<h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><h3 id="创建中间件"><a href="#创建中间件" class="headerlink" title="创建中间件"></a>创建中间件</h3><p>创建中间件有两种方式：</p>
<h4 id="闭包函数构建"><a href="#闭包函数构建" class="headerlink" title="闭包函数构建"></a>闭包函数构建</h4><ul>
<li><p>定义一个中间件闭包函数，然后返回一个可以被调用的中间件。</p>
</li>
<li><p>中间件闭包函数需要接收一个可以调用的<code>get_response</code>对象。</p>
</li>
<li><p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个<code>request</code>对象参数，返回一个<code>response</code>对象。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_middleware</span>(<span class="params">get_response</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;init 被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleware</span>(<span class="params">request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before request 被调用&#x27;</span>)</span><br><span class="line">        response = get_response(request)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;after response 被调用&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> middleware</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="类构建"><a href="#类构建" class="headerlink" title="类构建"></a>类构建</h4><p>需要继承 <code>django.utils.deprecation.MiddlewareMixin</code>这个类</p>
<p>可以重写的5个方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、process_request(self,request)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、process_view(self, request, callback, callback_args, callback_kwargs)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、process_template_response(self,request,response)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、process_exception(self, request, exception)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、process_response(self, request, response)</span><br></pre></td></tr></table></figure>

<p>以上方法的返回值可以是<code>None</code>或一个<code>HttpResponse</code>对象，如果是<code>None</code>，则继续按照<em>django</em>定义的规则向后继续执行，如果是<code>HttpResponse</code>对象，则直接将该对象返回给用户。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init=====&#x27;</span>)</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        处理请求前: 在每个请求上，request对象产生之后，url匹配之前调用,返回None或HttpResponse对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before request=====&#x27;</span>, request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param view_func: Django即将使用的视图函数,它是实际的函数对象，而不是函数的名称作为字符串</span></span><br><span class="line"><span class="string">        :param view_args: 将传递给视图的位置参数的列表</span></span><br><span class="line"><span class="string">        :param view_kwargs: 将传递给视图的关键字参数的字典;</span></span><br><span class="line"><span class="string">                            view_args和view_kwargs都不包含第一个视图参数（request）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 处理视图前：在每个请求上，url匹配之后，视图函数调用之前调用，返回None或HttpResponse对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before view=======&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="comment"># 在视图函数执行完后立即执行的, 执行 该 函数有一个前提条件，那就是视图函数返回的对象要有一个 render() 方法</span></span><br><span class="line">        <span class="comment"># （或者表明该对象是一个 TemplateResponse 对象或等价方法）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;render template=======&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception</span>):</span></span><br><span class="line">        <span class="comment"># 这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;raise exception=======&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(exception)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="comment"># 处理响应后：视图函数调用之后，所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;after response=======&#x27;</span>, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h3><p>在<em>django</em>项目的<em>settings</em>模块中，在 <code>MIDDLEWARE_CLASSES</code> 变量中添加自定义中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">  	...</span><br><span class="line">		<span class="string">&#x27;book.middleware.my_middleware&#x27;</span>,  <span class="comment"># book为应用名,middleware为文件名</span></span><br><span class="line">    <span class="string">&#x27;book.middleware.SimMiddleware&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="中间件效果"><a href="#中间件效果" class="headerlink" title="中间件效果"></a>中间件效果</h3><blockquote>
<p>首先是 项目启动时，中间件的初始化</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init=====</span><br><span class="line">init 被调用</span><br></pre></td></tr></table></figure>

<h4 id="正常视图"><a href="#正常视图" class="headerlink" title="正常视图"></a>正常视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Index============&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;hello Django&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求会依次穿过所有中间件的<code>process_request</code>方法,最后到达<code>views</code>的函数中，<code>views</code>函数处理后，在依次穿过所有中间件的<code>process_response</code>方法,最后返回给请求者。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before request 被调用</span><br><span class="line">before request===== &lt;WSGIRequest: GET <span class="string">&#x27;/&#x27;</span>&gt;</span><br><span class="line">before view=======</span><br><span class="line">Index============</span><br><span class="line">after response======= &lt;HttpResponse status_code=<span class="number">200</span>, <span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">after response 被调用</span><br><span class="line">[<span class="number">21</span>/Sep/<span class="number">2020</span> <span class="number">14</span>:<span class="number">29</span>:<span class="number">59</span>] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h4 id="错误视图"><a href="#错误视图" class="headerlink" title="错误视图"></a>错误视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Index============&quot;</span>)</span><br><span class="line">        <span class="number">3</span>/<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;hello Django&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时，视图发生异常， 会执行中间件的 <code>process_exception</code>方法，而在该方法中，将异常信息作为响应返回，因此，页面显示<code>&quot;division by zero&quot;</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before request 被调用</span><br><span class="line">before request===== &lt;WSGIRequest: GET <span class="string">&#x27;/&#x27;</span>&gt;</span><br><span class="line">before view=======</span><br><span class="line">Index============</span><br><span class="line"><span class="keyword">raise</span> exception=======</span><br><span class="line">after response======= &lt;HttpResponse status_code=<span class="number">200</span>, <span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">after response 被调用</span><br><span class="line">[<span class="number">21</span>/Sep/<span class="number">2020</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">15</span>] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h4 id="模板视图"><a href="#模板视图" class="headerlink" title="模板视图"></a>模板视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Index============&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> TemplateResponse(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 只有返回的对象是<code>TemplateResponse</code> 对象或等价方法时，才执行中间件的 <code>process_template_response</code>方法，直接调用<code>render</code>方法无效。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before request 被调用</span><br><span class="line">before request===== &lt;WSGIRequest: GET <span class="string">&#x27;/&#x27;</span>&gt;</span><br><span class="line">before view=======</span><br><span class="line">Index============</span><br><span class="line">render template=======</span><br><span class="line">after response======= &lt;TemplateResponse status_code=<span class="number">200</span>, <span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">after response 被调用</span><br><span class="line">[<span class="number">21</span>/Sep/<span class="number">2020</span> <span class="number">14</span>:<span class="number">49</span>:05] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">149</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>TemplateResponse</code> <strong>VS</strong> <code>render</code></p>
<p><code>TemplateResponse</code>将模板的渲染延迟到视图完成之后。这允许任何模板响应中间件在响应上运行，并有可能在呈现模板之前更改模板或上下文数据。模板响应中间件运行后，将渲染模板，并在将响应返回给客户端之前对渲染的内容运行常规响应中间件。</p>
<p><code>render()</code>立即呈现模板，并返回<code>HttpResponse</code>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-后端跨域</title>
    <url>/2020/03/17/2i1TCdCOP/</url>
    <content><![CDATA[<p>前后端分离开发时，经常会遇到一个问题，那就是<code>跨域问题</code>,因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行ajax访问的时候浏览器就会报跨域相关的错误。</p>
<span id="more"></span>

<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>
<p>为了解决这个问题，在前端和后台配置均可，此时，以后台django配置为例</p>
<h2 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<h2 id="2-注册应用"><a href="#2-注册应用" class="headerlink" title="2. 注册应用"></a>2. 注册应用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="3-中间件设置"><a href="#3-中间件设置" class="headerlink" title="3. 中间件设置"></a>3. 中间件设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="comment"># 注意，位置有限制</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="4-配置跨域参数"><a href="#4-配置跨域参数" class="headerlink" title="4. 配置跨域参数"></a>4. 配置跨域参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span>  <span class="comment"># 允许所有host访问</span></span><br><span class="line"><span class="comment"># 添加白名单</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;localhost:8080&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 以上配置二选一即可</span></span><br><span class="line"></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie,不需要可以不设置</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基础教程</title>
    <url>/2021/06/16/35nW9iWbx/</url>
    <content><![CDATA[<blockquote>
<p>在<code>mongodb</code>中基本的概念是文档、集合、数据库</p>
</blockquote>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>通过下图实例，我们也可以更直观的了解Mongo中的一些概念：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/06/1myWPG.png" alt="1myWPG"></p>
<h2 id="库的操作"><a href="#库的操作" class="headerlink" title="库的操作"></a>库的操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use <span class="built_in">test</span>  <span class="comment"># use 库名， 创建库</span></span></span><br><span class="line">switched to db test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db  <span class="comment"># 当前正在使用的库</span></span></span><br><span class="line">test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs  <span class="comment"># 没有刚创建的库，因为该库中没有任何数据</span></span></span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.dropDatabase()  <span class="comment"># 删除当前正在使用的库</span></span></span><br><span class="line">&#123; &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><blockquote>
<p>  类似于MySQL的数据表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createCollection(<span class="string">&quot;class&quot;</span>)  <span class="comment"># 创建一个叫 class 的集合</span></span></span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections;  <span class="comment"># 查看所有集合</span></span></span><br><span class="line">class</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.drop()  <span class="comment"># 指明删除特定的集合</span></span></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote>
<ul>
<li><p>  一条数据在MongoDB中，被称为 <strong>文档</strong>, MySQL中被称为 <strong>记录</strong></p>
</li>
<li><p>  一列数据在MongoDB中，被称为 <strong>域</strong>, MySQL中被称为 <strong>字段</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.insert(&#123;name:<span class="string">&quot;H2009A&quot;</span>, number:42&#125;) <span class="comment"># 插入一条数据，不指定 _id,根据ObjectId自动生成</span></span></span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.insert(&#123;_id: <span class="string">&quot;212312313&quot;</span>, name:<span class="string">&quot;H2103A&quot;</span>, number:28&#125;) <span class="comment"># 插入一条数据,指定 _id, 重复，会抛出异常</span></span></span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.insertMany([&#123;name:<span class="string">&quot;H2102A&quot;</span>, number:18&#125;, &#123;name:<span class="string">&quot;H2101A&quot;</span>, number:54&#125;])  <span class="comment"># 一次插入多条数据</span></span></span><br><span class="line">&#123;</span><br><span class="line">	&quot;acknowledged&quot; : true,</span><br><span class="line">	&quot;insertedIds&quot; : [</span><br><span class="line">		ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;),</span><br><span class="line">		ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上实例中 <code>class</code> 是我们的集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><blockquote>
<p>  <code>find()</code>:类似于MySQL的 <code>all()</code>，查询全部</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find()</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;212312313&quot;, &quot;name&quot; : &quot;H2103A&quot;, &quot;number&quot; : 28 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <code>findOne(条件, &#123;字段:1, 字段: 0&#125;)</code>: 根据条件查询单个文档对象，指明文档对象中的哪个字段显示和不显示, 其中 <code>_id</code>字段,默认显示，不显示，指定为0即可。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt; db.students.findOne(&#123;name:<span class="string">&quot;小名&quot;</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;60d13f5f9f3bfc393f9489a5&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;小名&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;score&quot;</span> : <span class="number">90</span>,</span><br><span class="line">	<span class="attr">&quot;class&quot;</span> : <span class="string">&quot;H2009A&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; db.students.findOne(&#123;name:<span class="string">&quot;小名&quot;</span>&#125;, &#123;name:<span class="number">1</span>, class:<span class="number">1</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;60d13f5f9f3bfc393f9489a5&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;小名&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;class&quot;</span> : <span class="string">&quot;H2009A&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; db.students.findOne(&#123;name:<span class="string">&quot;小名&quot;</span>&#125;, &#123;_id:<span class="number">0</span>, name:<span class="number">1</span>, class:<span class="number">1</span>&#125;)</span><br><span class="line">&#123; <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;小名&quot;</span>, <span class="attr">&quot;class&quot;</span> : <span class="string">&quot;H2009A&quot;</span> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><blockquote>
<p>  <code>update（条件, &#123;$set: 文档&#125;）</code>: 根据条件，更新特定字段的值，字段不存在，则新增</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.update(&#123; <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;60c9dd57f08e1d893ea18d49&quot;</span>&#125;, &#123;<span class="variable">$set</span>:&#123;number:34&#125;&#125;)</span></span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote>
<p>  <code>remove(条件)</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.remove(&#123;_id: <span class="string">&quot;60c9dd57f08e1d893ea18d49&quot;</span>&#125;)</span></span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$lt</span>:32&#125;&#125;)  <span class="comment"># 小于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$lte</span>:42&#125;&#125;)  <span class="comment"># 小于等于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$gt</span>:42&#125;&#125;)  <span class="comment"># 大于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$gte</span>:42&#125;&#125;)  <span class="comment">#大于等于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:42&#125;)  <span class="comment"># 等于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$ne</span>:42&#125;&#125;)  <span class="comment"># 不等于</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑关系"><a href="#逻辑关系" class="headerlink" title="逻辑关系"></a>逻辑关系</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;<span class="variable">$or</span>:[&#123;number:&#123;<span class="variable">$gt</span>:42&#125;&#125;, &#123;number:&#123;<span class="variable">$lt</span>:32&#125;&#125;]&#125;) <span class="comment"># 大于42 或 小于32</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$lt</span>:42&#125;, name: <span class="string">&quot;H2008A&quot;</span>&#125;)  <span class="comment"># 两个条件且，也就是同时成立</span></span></span><br></pre></td></tr></table></figure>

<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$lt</span>:52,<span class="variable">$gt</span>:32&#125;&#125;)  <span class="comment"># 大于32且小于52</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$in</span>:[32, 34, 42]&#125;&#125;)  <span class="comment"># 任意一个值皆可</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;number:&#123;<span class="variable">$nin</span>:[32, 54, 42]&#125;&#125;)  <span class="comment"># 不是任意一个值</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find()  <span class="comment"># 查询全部</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find().<span class="built_in">limit</span>(2)  <span class="comment"># 限制查询两条，也就是每页2条</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find().<span class="built_in">limit</span>(2).skip(2)  <span class="comment"># 每页2条，第2页</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find().sort(&#123;number:1&#125;)  <span class="comment"># 指定按照 key 升序排序</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find().sort(&#123;number:-1&#125;)  <span class="comment"># 按照key降序排序</span></span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9dd57f08e1d893ea18d49&quot;), &quot;name&quot; : &quot;H2008A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4c&quot;), &quot;name&quot; : &quot;H2101A&quot;, &quot;number&quot; : 54 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e2e7f08e1d893ea18d4b&quot;), &quot;name&quot; : &quot;H2102A&quot;, &quot;number&quot; : 18 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用正则表达式匹配</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;name:/^.*09.*$/&#125;)</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.class.find(&#123;name:&#123;<span class="variable">$regex</span>:<span class="string">&#x27;^H.*09A$&#x27;</span>&#125;&#125;)</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60c9e0c6f08e1d893ea18d4a&quot;), &quot;name&quot; : &quot;H2009A&quot;, &quot;number&quot; : 42 &#125;</span><br></pre></td></tr></table></figure>

<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _id 字段， 指明 分组的字段， 当 _id 为 null时，默认不进行分组，直接聚合计算，有 max、min、sum、avg</span></span><br><span class="line"><span class="comment">// 对所有班级进行聚合计算</span></span><br><span class="line">&gt; db.class.aggregate([&#123;</span><br><span class="line">    $group:&#123;</span><br><span class="line">        _id:<span class="literal">null</span>,</span><br><span class="line">        num_avg:&#123;</span><br><span class="line">            $avg:&#x27;$number&#x27;</span><br><span class="line">        &#125;, </span><br><span class="line">        num_total:&#123;</span><br><span class="line">            $sum: &#x27;$number&#x27;</span><br><span class="line">        &#125;, </span><br><span class="line">        max_num:&#123;</span><br><span class="line">            $max: &#x27;$number&#x27;</span><br><span class="line">        &#125;, </span><br><span class="line">        min_num:&#123;</span><br><span class="line">            $min: &#x27;$number&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">&quot;num_avg&quot;</span> : <span class="number">42</span>, </span><br><span class="line">    <span class="attr">&quot;num_total&quot;</span> : <span class="number">168</span>, </span><br><span class="line">    <span class="attr">&quot;max_num&quot;</span> : <span class="number">54</span>, </span><br><span class="line">    <span class="attr">&quot;min_num&quot;</span> : <span class="number">18</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先按照班级分组，再进行聚合计算</span></span><br><span class="line">&gt; db.students.aggregate(&#123;$group: &#123;_id:<span class="string">&quot;$class&quot;</span>, avg_score:&#123;$avg: <span class="string">&quot;$score&quot;</span>&#125;,max_score:&#123;$max: <span class="string">&quot;$score&quot;</span>&#125;, min_score:&#123;$min: <span class="string">&quot;$score&quot;</span>&#125; &#125;&#125;)</span><br><span class="line">&#123; <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;H2008A&quot;</span>, <span class="attr">&quot;avg_score&quot;</span> : <span class="number">83.33333333333333</span>, <span class="attr">&quot;max_score&quot;</span> : <span class="number">100</span>, <span class="attr">&quot;min_score&quot;</span> : <span class="number">70</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;H2009A&quot;</span>, <span class="attr">&quot;avg_score&quot;</span> : <span class="number">95</span>, <span class="attr">&quot;max_score&quot;</span> : <span class="number">100</span>, <span class="attr">&quot;min_score&quot;</span> : <span class="number">90</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据关系"><a href="#数据关系" class="headerlink" title="数据关系"></a>数据关系</h2><p>关系数据库（<code>RDBMS</code>）维护表之间的关系，以有意义的方式组织数据。而<code>MongoDB</code> 并没有像 <code>RDBMS</code> 那样的关系。但是，虽然文档数据库不需要与关系数据库相同的预定义结构，但这并不意味着它们不支持。实际上，<code>MongoDB</code> 允许通过嵌入式和引用式方法对文档之间的关系建立联系。</p>
<p>MongoDB 中的关系可以是：</p>
<ul>
<li>  1对1：一位作者对应一篇文章；</li>
<li>  1对多：一位作者对应多篇文章；</li>
<li>  多对1：多位作者对应一篇文章；</li>
<li>  多对多：一位作者对应多篇文章，一篇文章对应多位作者；</li>
</ul>
<p>现在，我们根据以上对应关系，来看下作者跟文章的文档结构。</p>
<p>下面是表示作者“jack”的文档结构：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e046286b1432f3ebcfd57d5&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">&quot;gender&quot;</span> : <span class="string">&quot;boy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表示书籍信息的文档结构：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e0463f9b1432f3ebcfd57d7&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;book_name&quot;</span> : <span class="string">&quot;第一本书&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;published_date&quot;</span> : <span class="number">2019</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span> : <span class="number">99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌入式关系"><a href="#嵌入式关系" class="headerlink" title="嵌入式关系"></a>嵌入式关系</h3><p>现在使用嵌入式的方法，将书籍的文档嵌入到所属的作者文档中：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt; db.authors.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e046866b1432f3ebcfd57d8&quot;</span>),</span><br><span class="line">	<span class="attr">&quot;name&quot;</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;gender&quot;</span> : <span class="string">&quot;boy&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;books&quot;</span> : [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;book_name&quot;</span> : <span class="string">&quot;第一本书&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;published_date&quot;</span> : <span class="string">&quot;2019&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;price&quot;</span> : <span class="string">&quot;99&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;book_name&quot;</span> : <span class="string">&quot;第二本书&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;published_date&quot;</span> : <span class="string">&quot;2020&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;price&quot;</span> : <span class="string">&quot;199&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，现在多本书籍都跟其作者保存在同一个文档中。例如可以使用以下方式直接查询出这位作者的书籍信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt; db.authors.findOne(&#123;name:<span class="string">&quot;jack&quot;</span>&#125;).books</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">&quot;book_name&quot;</span> : <span class="string">&quot;第一本书&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;published_date&quot;</span> : <span class="string">&quot;2019&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;price&quot;</span> : <span class="string">&quot;99&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">&quot;book_name&quot;</span> : <span class="string">&quot;第二本书&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;published_date&quot;</span> : <span class="string">&quot;2020&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;price&quot;</span> : <span class="string">&quot;199&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>该数据结构的优缺点：</p>
<ul>
<li>  <strong>优点:</strong> 快速、高效、简单</li>
<li>  <strong>缺点:</strong> 如果数据量不断变大，会影响读写性能。需要定期去更新用户信息，该频度不好把握。（需要考虑原子性）</li>
<li>  <strong>使用场景:</strong> 小的子文档、数据不经常改变、当最终一致性是可以接受的、文档增长小、经常需要进行二次查询来获取数据、读快。</li>
</ul>
<h3 id="引用关系"><a href="#引用关系" class="headerlink" title="引用关系"></a>引用关系</h3><p>引用式关系是设计数据库时经常用到的方法，该方法把作者的数据文档和书籍的数据文档分开，再通过引用文档的“<code>_id</code>”字段来建立关系。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt; db.authors.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e046866b1432f3ebcfd57d8&quot;</span>),</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gender&quot;</span> : <span class="string">&quot;boy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;books_ids&quot;</span> : [</span><br><span class="line">        ObjectId(<span class="string">&quot;5e0463f9b1432f3ebcfd57d7&quot;</span>),</span><br><span class="line">        ObjectId(<span class="string">&quot;5e046ba3b1432f3ebcfd57dd&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上文档的<code>books_ids</code>字段保存每个书籍文档的对<code>_id</code>数组，而我们可以通过这些对象id获取每本书籍的信息。</p>
<p>该方法需要两次查询，首先找出作者的对象id，将其值先赋予到result上</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var result = db.author_book.findOne(&#123;name:<span class="string">&quot;jack&quot;</span>&#125;, &#123;books_ids:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>再根据查询出来的结果，在books数据库中再次进行查询，使用<code>$in</code>方法，查询出_id对象存在列表<code>result[&quot;books_ids&quot;]</code>中书籍数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var book = db.books.find(&#123;_id:&#123;<span class="attr">&quot;$in&quot;</span>: result[<span class="string">&quot;books_ids&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>该数据结构的优缺点：</p>
<ul>
<li>  <strong>优点:</strong> 文档大小更易于管理，两个文档的数据同步更新。</li>
<li>  <strong>缺点:</strong> 查询耗时。</li>
<li>  <strong>使用场景:</strong> 大的子文档、非易失性数据、当实时一致性是必要的、文档增长大、经常需要从结果中排除数据、写快。</li>
</ul>
]]></content>
      <tags>
        <tag>CRUD</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>常见函数的时间复杂度</title>
    <url>/2019/05/25/66tuBphUD/</url>
    <content><![CDATA[<p>很多函数都有自己的很多方法，其中有些方法的功能类似，但是其复杂度有时却大不相同</p>
<p>本节我们将引入一个新模块 <code>timeit</code> ，其功能是来测试一小段 <code>Python</code> 代码的执行速度。</p>
<span id="more"></span>

<h3 id="1、timeit"><a href="#1、timeit" class="headerlink" title="1、timeit"></a>1、timeit</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">timeit</span>.<span class="title">Timer</span>(<span class="params">stmt=<span class="string">&#x27;pass&#x27;</span>, setup=<span class="string">&#x27;pass&#x27;</span>,timer=&lt;timer function&gt;</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Timer</code> 是测量小段代码执行速度的类</p>
</li>
<li><p><code>stmt</code> 是要测试的代码语句 (<code>statment</code>), 字符串类型,</p>
</li>
<li><p><code>setup</code> 是运行代码时需要的设置 , 字符串类型, 就是从 <code>__main__</code> 引入需要的是的方法名</p>
</li>
<li><p><code>timer</code> 参数是一个定时器函数, 与平台有关, 不用去管</p>
</li>
<li><p><code>timeit.Timer.timeit(numer=1000000)</code>，<code>numer</code>-&gt; 测算次数, 返回平均耗时, 一个 <code>float</code> 类型的秒数</p>
</li>
</ul>
<h4 id="部分测试示例"><a href="#部分测试示例" class="headerlink" title="部分测试示例"></a>部分测试示例</h4><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105816-timeit%E6%B5%8B%E8%AF%95%E7%A4%BA%E4%BE%8B%20.png" alt="20190526105816-timeit测试示例"></p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105825-timeit%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%20.png" alt="20190526105825-timeit测试结果"></p>
<h3 id="2、list-的内置函数时间复杂度"><a href="#2、list-的内置函数时间复杂度" class="headerlink" title="2、list 的内置函数时间复杂度"></a>2、list 的内置函数时间复杂度</h3><table>
<thead>
<tr>
<th>方法</th>
<th>复杂度</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>index[x]</td>
<td>O(1)</td>
<td>索引</td>
</tr>
<tr>
<td>index assignment</td>
<td>O(1)</td>
<td>索引赋值</td>
</tr>
<tr>
<td>append</td>
<td>O(1)</td>
<td>尾部追加</td>
</tr>
<tr>
<td>pop()</td>
<td>O(1)</td>
<td>尾部弹出</td>
</tr>
<tr>
<td>pop(i)</td>
<td>O(n)</td>
<td>指定位置弹出 n 列表长度, 最坏时间复杂度</td>
</tr>
<tr>
<td>insert(i, item)</td>
<td>O(n)</td>
<td>指定位置添加</td>
</tr>
<tr>
<td>del operator</td>
<td>O(n)</td>
<td>删除, 代表一个一个元素去清空</td>
</tr>
<tr>
<td>iteration</td>
<td>O(n)</td>
<td>迭代</td>
</tr>
<tr>
<td>contains(in)</td>
<td>O(n)</td>
<td>看谁是否在列表中, 需要遍历</td>
</tr>
<tr>
<td>get slice[x:y]</td>
<td>O(k)</td>
<td>取切片, 从 x 取到 y, 一次定位到 x, 然后取到 y ,x 和 y 之间有多少就是 k</td>
</tr>
<tr>
<td>del slice</td>
<td>O(n)</td>
<td>删除切片 删除位置之后, 后面的元素都需要往前移动</td>
</tr>
<tr>
<td>set slice</td>
<td>O(k)</td>
<td>设置切片, li[0:3] = [1, 2, 3, 4]k 是补充的东西数量</td>
</tr>
<tr>
<td>reverse</td>
<td>O(n)</td>
<td>置返</td>
</tr>
<tr>
<td>concatenate</td>
<td>O(k)</td>
<td>代表使用的 +, 把两个列表加到一起, k 是第二个列表中的元素</td>
</tr>
<tr>
<td>sort</td>
<td>O(nlogn)</td>
<td>排序</td>
</tr>
<tr>
<td>multiply</td>
<td>O(nk)</td>
<td>相乘 li=[1, 2] -&gt; n li * 10 -&gt; k</td>
</tr>
</tbody></table>
<h3 id="3、dict-的内置函数时间复杂度"><a href="#3、dict-的内置函数时间复杂度" class="headerlink" title="3、dict 的内置函数时间复杂度"></a>3、dict 的内置函数时间复杂度</h3><table>
<thead>
<tr>
<th>方法</th>
<th>复杂度</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>copy</td>
<td>O(n)</td>
<td>复制</td>
</tr>
<tr>
<td>get item</td>
<td>O(1)</td>
<td>取</td>
</tr>
<tr>
<td>set item</td>
<td>O(1)</td>
<td>设置</td>
</tr>
<tr>
<td>delete item</td>
<td>O(1)</td>
<td>删除键</td>
</tr>
<tr>
<td>contains(in)</td>
<td>O(1)</td>
<td>包含</td>
</tr>
<tr>
<td>iteration</td>
<td>O(n)</td>
<td>迭代</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-cookie</title>
    <url>/2022/01/04/8ZOCplxOo/</url>
    <content><![CDATA[<blockquote>
<p><code>Cookie</code>，有时也用其复数形式<code>Cookies</code>，指某些网站为了辨别用户身份、进行<code>session</code>跟踪而储存在用户本地终端上的数据（通常经过加密）。</p>
</blockquote>
<span id="more"></span>

<p><code>Cookie</code>最早是网景公司的前雇员<em>Lou Montulli</em>在1993年3月的发明。<code>Cookie</code>是由服务器端生成，发送给<code>User-Agent</code>（一般是浏览器），浏览器会将<code>Cookie</code>的<code>key/value</code>保存到某个目录下的文本文件内，下次请求同一网站时就发送该<code>Cookie</code>给服务器（前提是浏览器设置为启用cookie）。<code>Cookie</code>名称和值可以由服务器端开发自己定义，这样服务器可以知道该用户是否是合法用户以及是否需要重新登录等。服务器可以利用<code>Cookies</code>包含信息的任意性来筛选并经常性维护这些信息，以判断在<code>HTTP</code>传输中的状态。<code>Cookies</code>最典型<strong>记住用户名</strong>。</p>
<p><code>Cookie</code>是存储在浏览器中的一段纯文本信息，建议不要存储敏感信息如密码，因为电脑上的浏览器可能被其它人使用。</p>
<h4 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a><code>Cookie</code>的特点</h4><ul>
<li><code>Cookie</code>以键值对<code>Key-Value</code>形势进行信息的存储。</li>
<li><code>Cookie</code>基于域名安全，不同域名的<code>Cookie</code>是不能互相访问的</li>
</ul>
<h1 id="cookie-操作"><a href="#cookie-操作" class="headerlink" title="cookie 操作"></a><code>cookie</code> 操作</h1><h2 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置<code>Cookie</code></h2><p>可以通过<code>HttpResponse</code>对象中的<code>set_cookie</code>方法来设置<code>cookie</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HttpResponse.set_cookie(cookie名, value=cookie值, max_age=cookie有效期)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>max_age</code> 单位为秒，默认为<code>None</code>。如果是临时<code>cookie</code>，可将<code>max_age</code>设置为<code>None</code>。</li>
</ul>
<h2 id="读取Cookie"><a href="#读取Cookie" class="headerlink" title="读取Cookie"></a>读取<code>Cookie</code></h2><p>可以通过<code>HttpRequest</code>对象的<code>COOKIES</code>属性来读取本次请求携带的<code>cookie</code>值。<code>request.COOKIES</code>为字典类型。</p>
<h1 id="cookie模拟用户登录"><a href="#cookie模拟用户登录" class="headerlink" title="cookie模拟用户登录"></a><code>cookie</code>模拟用户登录</h1><h2 id="登录及设置登录标识"><a href="#登录及设置登录标识" class="headerlink" title="登录及设置登录标识"></a>登录及设置登录标识</h2><ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        query_dict = request.POST  <span class="comment"># 获取form-data参数，得到django的查询字典</span></span><br><span class="line"></span><br><span class="line">        userName = query_dict.get(<span class="string">&#x27;userName&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = query_dict.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> userName == <span class="string">&quot;mac&quot;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123321&#x27;</span>:  <span class="comment"># 登录成功，设置cookie标识，过期时间为2小时</span></span><br><span class="line">            hp = JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;OK&quot;</span>&#125;)</span><br><span class="line">            hp.set_cookie(<span class="string">&#x27;userName&#x27;</span>, userName, max_age=<span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> hp</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 登录失败，返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;FAIL&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        cookie_dict = request.COOKIES</span><br><span class="line">        userName = cookie_dict.get(<span class="string">&#x27;userName&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> userName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(</span><br><span class="line">                &#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;userInfo&quot;</span>: &#123;<span class="string">&quot;userName&quot;</span>: userName, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;mac321@163.com&quot;</span>&#125;&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;FAIL&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CPython的内存概念:栈、堆和引用</title>
    <url>/2021/08/08/8lwaCQso0/</url>
    <content><![CDATA[<p>Python的实现版本有很多，例如Jython底层就是JVM,IronPython的底层是.Net，它们的内存管理千差万别取决于底层的运行时系统。在CPython实现中，堆和栈有各自的职责。</p>
<span id="more"></span>

<blockquote>
<p>  <strong>C语言</strong></p>
</blockquote>
<p>堆(<code>heap</code>)和栈(<code>stack</code>)原本是两种不同的数据结构，在C语言内存表述中，代表着用这两种数据结构管理的两种内存块。</p>
<p>堆由整个系统共享，各个进程拥有同一个堆。 栈由每个进程自行管理，也就是每个进程的栈是独立的，互不相关。</p>
<p><strong>具体区别如下：</strong></p>
<ol>
<li>  栈上的内存由系统自动管理分配，用于存储局部变量。 堆中的内存由编程人员主动申请，在C语言中申请内存的函数为malloc， 使用后需要编程人员自行调用free函数释放。</li>
<li>  从分配释放及访问速度上，栈内存的存取，申请释放速度要高于堆内存。</li>
<li>  栈内存相对于堆内存要小的多，所以在编程的时候，一般不建议使用占空间过大的局部变量。</li>
<li>  堆中所有数据均由编程人员申请使用。 栈中除了存放函数中可见的局部变量外，还有各种系统环境数据。</li>
</ol>
<blockquote>
<p>  <strong>python语言</strong></p>
</blockquote>
<p><strong>堆</strong>: 主要负责存储CPython运行时的所有对象实体(也就是Python对象的所有属性数据)，例如:<code>smt=&#39;Hello Word&#39;</code>这个字符串对象PyASCIIObject，<code>n=23</code>这是一个整数PyLongObject，它们都是Python对象,赋值符号<code>=</code>右边的数据值，CPython会将其存储到堆内存中。</p>
<p><strong>栈</strong>: 在CPython的语义中，又叫数据栈或值栈，它主要负责保存对堆中Python对象的引用，例如：当CPython在执行<code>smt=&#39;Hello Word&#39;</code>这个简单的Python语句，CPython会将<code>&#39;Hello Word&#39;</code>这个字符串实体所处的内存地址压入栈(对于Python语义级别理解，就是对<code>&quot;Hello Word&quot;</code>的引用)，而不是将<code>&#39;Hello Word&#39;</code>这个字符串值压入栈。</p>
<p><code>smt=&#39;Hello Word&#39;</code>这些简单的Python赋值语句，你不能单纯地认为将<code>&#39;Hello World&#39;</code>赋值给变量<code>smt</code>，这是大错特错的。</p>
<p>赋值符号右边的是Python对象实体(从C实现的理解，就是构成该PyObject子类对象的属性值，这些值有具体的字面量值表示)，并且CPython会为该Python对象在堆中分配内存并且存储它。</p>
<p>而变量<code>smt</code>仅持有该Python对象实体的引用(从C实现的理解，就是该PyObject对象的内存地址)，而不是实际的Python对象。</p>
<p>s1变量持有Python对象<code>&#39;Hello world&#39;</code>的引用，对于CPython虚拟机来说，就是在执行<code>s1=&#39;Hello Word&#39;</code>，将它的内存地址<code>0x71334</code>推入数据栈，那么当CPython碰到同样的语句<code>s2=&#39;Hello Word&#39;</code>，明显是指向同一个Python对象，那么变量s2和s1一样,它自然持有是<code>&#39;Hello Word&#39;</code>的引用,即s2实质上拥有的<code>&#39;Hello Word&#39;</code>的堆中的地址。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/08/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC.png" alt="变量赋值"></p>
<p>对于其他简易的数据类型，也是如出一辙的。那么现在给Python引用我们可以下一个定义。</p>
<p>Python对象的引用:就是Python变量持有Python对象在堆内存中的内存地址。</p>
<p>我们可以通过python的内置<code>id</code>函数或者关键字<code>is</code> 来判断两个变量是否对同一个对象的引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">id</span>(s1)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">4472932144</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">id</span>(s2)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">4472034928</span></span><br></pre></td></tr></table></figure>

<p>在Python中有两种类型的对象：可变对象和不可变对象。</p>
<p>可变对象: 比较典型的就是list，一个列表作为一个对象存储在堆内存中，如果我们要更改该列表的某些元素，它将仍然是内存中的同一个列表对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: [<span class="built_in">id</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> alist]</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">4439298464</span>, <span class="number">4439298496</span>, <span class="number">4439298528</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">id</span>(alist)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">4474113152</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: alist[<span class="number">1</span>]= <span class="number">22</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: [<span class="built_in">id</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> alist]</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">4439298464</span>, <span class="number">4439299136</span>, <span class="number">4439298528</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">id</span>(alist)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4474113152</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">id</span>(<span class="number">22</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">4439299136</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="built_in">id</span>(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">4439298464</span>    </span><br></pre></td></tr></table></figure>

<p>在列表<code>alist</code>中，通过列表表达式打印出列表每个对象元素的内存地址，以及列表对象<code>alist</code>本身的内存地址，然后在修改列表元素后，再次打印列表对象中的各个对象元素的内存地址，以及<code>alist</code>本身的内存地址。</p>
<p>这段代码告诉我们CPython在内存中有如下事实</p>
<p><code>list</code>类型的<code>alist</code>本身是一个Python对象，其对象实体就是在<strong>堆内存</strong>中。<br><code>list</code>类型的对象,作为一个容器级别的对象，其<strong>列表存储的是元素实体的引用，而非元素实体本身</strong>。</p>
<p>对<code>list</code>对象中的某个元素的修改的本质是<strong>令被修改元素指向其他元素的引用</strong>，而我们修改该元素时,实际上CPython在堆内存中创建了一个新的对象(本例中的整数22)分配新的内存空间，并且保存该新增的对象(整数22)。<code>alist</code>的第三个元素不再对2的引用，更新为对22的引用。</p>
<p><code>list</code>类型对象的在其元素修改前后,变量<code>alist</code>始终引用同一个<code>list</code>对象。</p>
<p>那么从上面的例子，我们得知：</p>
<p>**可变对象的实质:**其内部元素可修改是可变更对其他Python对象的引用。其可变对象的元素可以是数字、字符串，甚至可以是其他容器级别的可变对象。</p>
<p><strong>不可变对象</strong>：就非常容易理解了,上面示例中list的元素对象都是不可变对象。推而广之，Python中的原始数据类型,例如数字类型(int,float)、字符串(str)、字节数组(bytes)。</p>
<p>在Python中，一切事物都是对象,不论是整数，字符串，甚至是其他容器级别的数据类型,都由CPython的C底层由一个叫<code>struct PyObject</code>结构体所封装。PyObject的结构体在CPython运行时存储在堆内中。</p>
<blockquote>
<p>  <strong>小结</strong></p>
</blockquote>
<p>我们从堆内存的角度理解，为什么CPython要对Python对象分为：可变对象和不可变对象，初衷是尽可能低简化堆内存的分配。因为Python变量持有Python对象的引用(或者从C底层去理解，持有PyObject对象的指针)去访问Python对象实体本身，比持有一个Python对象实体的副本更高效，更节省堆和栈的内存开销。</p>
<p>那么当多个Python变量引用同一个Python对象就涉及到概念就引用计数器，引用计数器属于内存垃圾回收的范畴，由引用计数又会牵涉到CPython一个致命的诟病，GIL:全局解释器锁，为什么多年来CPython不能去掉GIL，很大原因跟引用计数器有关。</p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-路由</title>
    <url>/2019/05/25/AOiiztLHK/</url>
    <content><![CDATA[<p>在视图完成之后，想要让客户端的请求可以正常匹配到对应的视图函数，就需要给每个视图函数做对应的路由映射。</p>
<span id="more"></span>

<h2 id="路由匹配顺序"><a href="#路由匹配顺序" class="headerlink" title="路由匹配顺序"></a>路由匹配顺序</h2><h3 id="总分路由"><a href="#总分路由" class="headerlink" title="总分路由"></a>总分路由</h3><p>Django的主要路由信息定义在工程同名目录下的<em>urls.py</em>文件中，该文件是<em>Django</em>解析路由的入口。</p>
<p>每个子应用为了保持相对独立，可以在各个子应用中定义属于自己的<em>urls.py</em>来保存该应用的路由。然后用主路由文件包含各应用的子路由数据。</p>
<p>在任何时候，<code>urlpatterns</code>都可以<code>&quot;include&quot;</code>其他<code>URLconf</code>模块。这本质上是一组位于其他<code>url</code>之下的<code>&quot;roots&quot;</code>。</p>
<p>每当<em>Django</em>遇到时<code>include()</code>，它都会截断直到该处匹配的<em>URL</em>的任何部分，并将剩余的字符串发送到包含的<em>URLconf</em>中以进行进一步处理。</p>
<ul>
<li><code>djangodemo/urls.py</code>:项目总路由</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;book.urls&#x27;</span>))   <span class="comment"># 包含图书应用的子路由	</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>apps/book/urls.py</code>: 图书应用的子路由</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> Index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, Index.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="主路由"><a href="#主路由" class="headerlink" title="主路由"></a>主路由</h3><p>也可将工程的全部路由信息都定义在主路由文件中，子应用不再设置<em>urls.py</em>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> book.views <span class="keyword">import</span> Index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, Index.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h2><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><ul>
<li><p><code>path</code>: 写的非正则路由（<code>route</code>）</p>
</li>
<li><p>两个必须参数：<code>route</code> 和 <code>view</code>;两个可选参数：<code>kwargs</code> 和 <code>name</code>。即<strong>路由</strong>和<strong>视图</strong>是必填参数</p>
<ul>
<li><p> <code>route</code> 是一个匹配<em>URL</em>的准则（类似正则表达式）。当<em>Django</em>响应一个请求时，它会从<em>urlpatterns</em>的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。这些准则不会匹配GET和POST参数或域名。例如，URLconf在处理请求<code>https://www.example.com/myapp/</code>时，它会尝试匹配<code>myapp/</code>。处理请求<code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p>
</li>
<li><p> <code>view</code>:当 <em>Django</em> 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个<em>HttpRequest</em>对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。</p>
</li>
<li><p> <code>kwargs</code>:任意个关键字参数可以作为一个字典传递给目标视图函数。</p>
</li>
<li><p> <code>name</code>: 为你的<em>URL</em>取名能使你在 <em>Django</em> 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个<em>URL</em>模式</p>
</li>
</ul>
</li>
<li><p>正则捕获到的参数都是字符串，所以如果函数需要用的其他数据类型，可以在函数中直接转换，也可以在路由中直接转换。</p>
</li>
<li><p>转换器(<em>django2.0</em> 以上默认使用的是<em>path</em>转换器)</p>
<ul>
<li><code>str</code>,匹配除了路径分隔符（<code>/</code>）之外的非空字符串</li>
<li><code>int</code>,匹配正整数，包含0。</li>
<li><code>slug</code>,匹配字母、数字以及横杠、下划线组成的字符串。</li>
<li><code>uuid</code>,匹配格式化的<code>uuid</code>，如 <code>075194d3-6885-417e-a8a8-6c931e272f00</code>。</li>
<li><code>path</code>,匹配任何非空字符串，包含了路径分隔符（<code>/</code>）（不能用问号，因为问号在url地址有特殊含义。）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">  path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">  path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>, views.month_archive),</span><br><span class="line">  path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/articles/<span class="number">2005</span>/03/  <span class="comment"># 将匹配第三条，并调用views.month_archive(request, year=2005, month=3)；</span></span><br><span class="line">/articles/<span class="number">2003</span>/  <span class="comment"># 匹配第一条，并调用views.special_case_2003(request)；</span></span><br><span class="line">/articles/<span class="number">2003</span>  <span class="comment"># 将一条都匹配不上，因为它最后少了一个斜杠，而列表中的所有模式中都以斜杠结尾；</span></span><br><span class="line">/articles/<span class="number">2003</span>/03/building-a-django-site/  <span class="comment"># 将匹配最后一个，并调用views.article_detail(request, year=2003, month=3, slug=&quot;building-a-django-site&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li><p>要捕获一段url中的值，需要使用尖括号，而不是之前的圆括号；</p>
</li>
<li><p>可以转换捕获到的值为指定类型，比如例子中的<code>int</code>。默认情况下，捕获到的结果保存为字符串类型，不包含<code>/</code>这个特殊字符；</p>
</li>
<li><p>匹配模式的最开头不需要添加<code>/</code>，因为默认情况下，每个<code>url</code>都带一个最前面的<code>/</code>。</p>
</li>
</ul>
<h3 id="re-path"><a href="#re-path" class="headerlink" title="re_path"></a>re_path</h3><p>如果路径和转换器语法不足以定义URL模式，则也可以使用正则表达式。使用 <code>re_path()</code>代替<code>path()</code>。</p>
<p>在<em>Python</em>正则表达式中，已命名正则表达式组的语法为<code>(?P&lt;name&gt;pattern)</code>，其中<code>name</code>是组的名称，并且 <code>pattern</code>是要匹配的某种模式。</p>
<p>示例URLconf，使用正则表达式重写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>无论正则表达式进行哪种匹配，每个捕获的参数都将作为字符串发送到视图。</li>
<li>当从使用re_path()切换为使用path()， re_path()反之亦然时，特别重要的是要注意视图参数的类型可能会发生变化，因此您可能需要调整视图。</li>
<li>当命名的组与未命名的组两种样式混合使用时，任何未命名分组<code>path(&#39;(\d+)/&#39;,view)</code>都会被忽略，只有命名分组<code>path(&#39;(?P&lt;year&gt;\d+)/&#39;,view)</code>才会传递到视图函数。</li>
<li>未命名分组将正则表达式匹配到的内容当作位置参数，命名分组将正则表达式匹配到的内容当作关键字参数。</li>
</ul>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>asyncio -- 异步 I/O</title>
    <url>/2021/10/31/9zMFPlb0q/</url>
    <content><![CDATA[<p>asyncio 是用来编写 并发 代码的库，使用 async/await 语法。</p>
<p>asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。</p>
<p>asyncio 往往是构建 IO 密集型和高层级 结构化 网络代码的最佳选择。</p>
<span id="more"></span>

<p>asyncio 提供一组 高层级 API 用于:</p>
<ul>
<li><p>  并发地 运行 Python 协程 并对其执行过程实现完全控制;</p>
</li>
<li><p>  执行 网络 IO 和 IPC;</p>
</li>
<li><p>  控制 子进程;</p>
</li>
<li><p>  通过 队列 实现分布式任务;</p>
</li>
<li><p>  同步 并发代码;</p>
</li>
</ul>
<p>此外，还有一些 低层级 API 以支持 库和框架的开发者 实现:</p>
<ul>
<li><p>  创建和管理 事件循环，以提供异步 API 用于 网络化, 运行 子进程，处理 OS 信号 等等;</p>
</li>
<li><p>  使用 transports 实现高效率协议;</p>
</li>
<li><p>  通过 async/await 语法 桥接 基于回调的库和代码。</p>
</li>
</ul>
<h2 id="协程与任务"><a href="#协程与任务" class="headerlink" title="协程与任务"></a>协程与任务</h2><p>协程通过 <code>async</code>/<code>await</code> 语法进行声明，是编写异步应用的推荐方式。</p>
<p>要真正运行一个协程，asyncio 提供了以下主要机制:</p>
<h3 id="asyncio-run"><a href="#asyncio-run" class="headerlink" title="asyncio.run"></a>asyncio.run</h3><p><code>asyncio.run(coro, *, debug=False)</code>:执行 coroutine <em>coro</em> 并返回结果。</p>
<p>此函数运行传入的协程，负责管理 asyncio 事件循环并 <em>完结异步生成器</em>。</p>
<p>当有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。</p>
<p>如果 <em>debug</em> 为 <code>True</code>，事件循环将以调试模式运行。</p>
<p>此函数总是会创建一个新的事件循环并在结束时关闭之。它应当被用作 asyncio 程序的主入口点，理想情况下应当只被调用一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">started at <span class="number">12</span>:<span class="number">14</span>:<span class="number">28</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">finished at <span class="number">12</span>:<span class="number">14</span>:<span class="number">29</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  注意：简单地调用一个协程并不会将其加入执行日程:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main()  <span class="comment"># &lt;coroutine object main at 0x10cd11c20&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下代码段会在等待 1 秒后打印 “hello”，然后 <em>再次</em> 等待 2 秒后打印 “world”；也就是两个任务实际是同步执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">started at <span class="number">17</span>:<span class="number">13</span>:<span class="number">52</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">finished at <span class="number">17</span>:<span class="number">13</span>:<span class="number">55</span></span><br></pre></td></tr></table></figure>

<h3 id="asyncio-create-task"><a href="#asyncio-create-task" class="headerlink" title="asyncio.create_task"></a>asyncio.create_task</h3><p><code>asyncio.create_task(coro)</code>：将 <em>coro</em> 协程 打包为一个 <code>Task</code> 排入日程准备执行，返回 Task 对象。<strong>主要用来并发运行作为 asyncio <code>任务</code> 的多个协程</strong>。</p>
<p>该任务会在 <code>get_running_loop()</code> 返回的循环中执行，如果当前线程没有在运行的循环则会引发 <code>RuntimeError</code>。</p>
<p>此函数 <strong>在 Python 3.7 中被加入</strong>。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数，同样得到<code>Task</code>对象。</p>
<p>让我们修改以上示例，<em>并发</em> 运行两个 <code>say_after</code> 协程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># In Python 3.7+</span></span><br><span class="line">    task1 = asyncio.create_task(say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">	<span class="comment"># This works in all Python versions but is less readable</span></span><br><span class="line">    task2 = asyncio.ensure_future(say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wait until both tasks are completed (should take</span></span><br><span class="line">    <span class="comment"># around 2 seconds.)</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>注意，预期的输出显示代码段的运行时间比之前快了 1 秒:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">started at <span class="number">12</span>:03:07</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">finished at <span class="number">12</span>:03:09</span><br></pre></td></tr></table></figure>

<p>以下演示Task对象的一些常用属性和方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;what&#125;</span><span class="subst">&#123;delay&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># In Python 3.7+</span></span><br><span class="line">    task1 = asyncio.create_task(say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    <span class="comment"># This works in all Python versions but is less readable</span></span><br><span class="line">    task2 = asyncio.ensure_future(say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    task1.cancel()  <span class="comment"># 请求取消 Task 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main(): cancel_me is cancelled now&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;task1 cancel:<span class="subst">&#123;task1.cancelled()&#125;</span>&#x27;</span>)  <span class="comment"># 判断 Task 对象是否取消，取消则返回True，否则返回False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;task2 end:<span class="subst">&#123;task2.done()&#125;</span>&#x27;</span>)  <span class="comment"># 如果 Task 对象 已完成 则返回 True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;task2 result: <span class="subst">&#123;task2.result()&#125;</span>&#x27;</span>)  <span class="comment"># 返回 Task 任务的执行结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main(): cancel_me <span class="keyword">is</span> cancelled now</span><br><span class="line">task1 cancel:<span class="literal">True</span></span><br><span class="line">task2 end:<span class="literal">True</span></span><br><span class="line">task2 result: world2</span><br></pre></td></tr></table></figure>

<p><code>asyncio.current_task(loop=None)</code>:返回当前运行的 <code>Task</code> 实例，如果没有正在运行的任务则返回 <code>None</code>。</p>
<p><code>asyncio.all_tasks(loop=None)</code>: 返回事件循环所运行的未完成的 <code>Task</code> 对象的集合。</p>
<p>如果 <em>loop</em> 为 <code>None</code>，则会使用 <code>get_running_loop()</code> 获取当前事件循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(asyncio.current_task()) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;what&#125;</span><span class="subst">&#123;delay&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    task1 = asyncio.create_task(say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    task2 = asyncio.create_task(say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(asyncio.all_tasks()) </span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &lt;Task pending coro=&lt;say_after() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">4</span>&gt;&gt;, </span><br><span class="line">    &lt;Task pending coro=&lt;say_after() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">4</span>&gt;&gt;, </span><br><span class="line">    &lt;Task pending coro=&lt;main() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">16</span>&gt; cb=[_run_until_complete_cb() at /usr/local/opt/python@<span class="number">3.7</span>/Frameworks/Python.framework/Versions/<span class="number">3.7</span>/lib/python3<span class="number">.7</span>/asyncio/base_events.py:<span class="number">157</span>]&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;Task pending coro=&lt;say_after() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">6</span>&gt; cb=[&lt;TaskWakeupMethWrapper <span class="built_in">object</span> at <span class="number">0x109b65e10</span>&gt;()]&gt;</span><br><span class="line">&lt;Task pending coro=&lt;say_after() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">6</span>&gt; cb=[&lt;TaskWakeupMethWrapper <span class="built_in">object</span> at <span class="number">0x109b4c4d0</span>&gt;()]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="asyncio-sleep"><a href="#asyncio-sleep" class="headerlink" title="asyncio.sleep"></a>asyncio.sleep</h3><p> <code>asyncio.sleep(delay, result=None, *, loop=None)</code>: 阻塞 <em>delay</em> 指定的秒数。</p>
<p>如果指定了 <em>result</em>，则当协程完成时将其返回给调用者。</p>
<p><code>sleep()</code> 总是会挂起当前任务，以允许其他任务运行。</p>
<p>以下协程示例运行 5 秒，每秒显示一次当前日期:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    end_time = loop.time() + <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> loop.time() &gt; end_time:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h3 id="asyncio-gather"><a href="#asyncio-gather" class="headerlink" title="asyncio.gather"></a>asyncio.gather</h3><p><code>asyncio.gather(*aws, loop=None, return_exceptions=False)</code>: <em>并发</em> 运行 <em>aws</em> 序列中的 <strong>可等待对象</strong>。</p>
<p>如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。<strong>结果值的顺序与 <em>aws</em> 中可等待对象的顺序一致</strong>。</p>
<p>如果 <em>return_exceptions</em> 为 <code>False</code> (默认)，所引发的首个异常会立即传播给等待 <code>gather()</code> 的任务。<em>aws</em> 序列中的其他可等待对象 <strong>不会被取消</strong> 并将继续运行。</p>
<p>如果 <em>return_exceptions</em> 为 <code>True</code>，异常会和成功的结果一样处理，并聚合至结果列表。</p>
<p>如果 <code>gather()</code> <em>被取消</em>，所有被提交 (尚未完成) 的可等待对象也会 <em>被取消</em>。</p>
<p>如果 <em>aws</em> 序列中的任一 Task 或 Future 对象 <em>被取消</em>，它将被当作引发了 <a href="https://docs.python.org/zh-cn/3.7/library/asyncio-exceptions.html#asyncio.CancelledError"><code>CancelledError</code></a> 一样处理 – 在此情况下 <code>gather()</code> 调用 <strong>不会</strong> 被取消。这是为了防止一个已提交的 Task/Future 被取消导致其他 Tasks/Future 也被取消。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    end_time = loop.time() + <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> loop.time() &gt; end_time:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(datetime.datetime.now(), what)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;what&#125;</span><span class="subst">&#123;delay&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        say_after(<span class="number">1</span>, <span class="string">&#x27;AAA&#x27;</span>),</span><br><span class="line">        say_after(<span class="number">2</span>, <span class="string">&#x27;BBB&#x27;</span>),</span><br><span class="line">        say_after(<span class="number">3</span>, <span class="string">&#x27;CCC&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">started at <span class="number">14</span>:<span class="number">57</span>:<span class="number">10</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">10.341888</span> AAA</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">10.341930</span> BBB</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">10.341954</span> CCC</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">11.342177</span> AAA</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">12.342331</span> BBB</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">12.342488</span> AAA</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">13.345196</span> CCC</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">13.345289</span> AAA</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">14.342706</span> BBB</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">14.346219</span> AAA</span><br><span class="line">[<span class="string">&#x27;AAA1&#x27;</span>, <span class="string">&#x27;BBB2&#x27;</span>, <span class="string">&#x27;CCC3&#x27;</span>]</span><br><span class="line">finished at <span class="number">14</span>:<span class="number">57</span>:<span class="number">16</span></span><br></pre></td></tr></table></figure>

<h3 id="asyncio-wait-for"><a href="#asyncio-wait-for" class="headerlink" title="asyncio.wait_for"></a>asyncio.wait_for</h3><p><code>asyncio.wait_for(aw, timeout, *, loop=None)</code>：等待 <em>aw</em> <strong>可等待对象</strong> 完成，指定 timeout 秒数后超时。</p>
<p><em>timeout</em> 可以为 <code>None</code>，也可以为 float 或 int 型数值表示的等待秒数。如果 <em>timeout</em> 为 <code>None</code>，则等待直到完成。</p>
<p>如果发生超时，任务将取消并引发 <code>asyncio.TimeoutError</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">eternity</span>():</span></span><br><span class="line">    <span class="comment"># Sleep for one hour</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3600</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yay!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># Wait for at most 1 second</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(eternity(), timeout=<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.TimeoutError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;timeout!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h3 id="asyncio-wait"><a href="#asyncio-wait" class="headerlink" title="asyncio.wait"></a>asyncio.wait</h3><p><code>asyncio.wait(aws, *, loop=None, timeout=None, return_when=ALL_COMPLETED)</code>：并发运行 <em>aws</em> 指定的 可等待对象 并阻塞线程直到满足 <em>return_when</em> 指定的条件。</p>
<p>返回两个 Task/Future 集合: <code>(done, pending)</code>。</p>
<p>用法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">done, pending = await asyncio.wait(aws)</span><br></pre></td></tr></table></figure>

<p>如指定 <em>timeout</em> (float 或 int 类型) 则它将被用于控制返回之前等待的最长秒数。</p>
<p>请注意此函数不会引发 <code>asyncio.TimeoutError</code>。当超时发生时，未完成的 Future 或 Task 将在指定秒数后被返回。</p>
<p><em>return_when</em> 指定此函数应在何时返回。它必须为以下常数之一:</p>
<table>
<thead>
<tr>
<th align="left">常数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>FIRST_COMPLETED</code></td>
<td align="left">函数将在任意可等待对象结束或取消时返回。</td>
</tr>
<tr>
<td align="left"><code>FIRST_EXCEPTION</code></td>
<td align="left">函数将在任意可等待对象因引发异常而结束时返回。当没有引发任何异常时它就相当于 <code>ALL_COMPLETED</code>。</td>
</tr>
<tr>
<td align="left"><code>ALL_COMPLETED</code></td>
<td align="left">函数将在所有可等待对象结束或取消时返回。</td>
</tr>
</tbody></table>
<p>与 <code>wait_for()</code> 不同，<code>wait()</code> 在超时发生时不会取消可等待对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;what&#125;</span><span class="subst">&#123;delay&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    task1 = asyncio.create_task(say_after(<span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    task2 = asyncio.create_task(say_after(<span class="number">4</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait([task2, task1], timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line">    <span class="built_in">print</span>(pending)</span><br><span class="line">    <span class="keyword">if</span> task1 <span class="keyword">not</span> <span class="keyword">in</span> pending:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;task1 result: <span class="subst">&#123;task1.result()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> task2 <span class="keyword">in</span> done:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;task2 result: <span class="subst">&#123;task2.result()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(pending)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 end&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;task2 result: <span class="subst">&#123;task2.result()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&lt;Task finished coro=&lt;say_after() done, defined at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">4</span>&gt; result=<span class="string">&#x27;hello2&#x27;</span>&gt;&#125;</span><br><span class="line">&#123;&lt;Task pending coro=&lt;say_after() running at /Users/lsf/PycharmProjects/pythonProject/demo.py:<span class="number">5</span>&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper <span class="built_in">object</span> at <span class="number">0x10e72f150</span>&gt;()]&gt;&gt;&#125;</span><br><span class="line">task1 result: hello2</span><br><span class="line">task2 end</span><br><span class="line">task2 result: world4</span><br></pre></td></tr></table></figure>

<h3 id="asyncio-as-completed"><a href="#asyncio-as-completed" class="headerlink" title="asyncio.as_completed"></a>asyncio.as_completed</h3><p><code>asyncio.as_completed(aws, *, loop=None, timeout=None)</code></p>
<p> 并发地运行 <em>aws</em> 集合中的 可等待对象。返回一个 <code>Future</code> 对象的迭代器。返回的每个 Future 对象代表来自剩余可等待对象集合的最早结果。</p>
<p>如果在所有 Future 对象完成前发生超时则将引发 <code>asyncio.TimeoutError</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span>(<span class="params">delay, what</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;what&#125;</span><span class="subst">&#123;delay&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    task1 = asyncio.create_task(say_after(<span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    task2 = asyncio.create_task(say_after(<span class="number">4</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> asyncio.as_completed([task2, task1]):</span><br><span class="line">        earliest_result = <span class="keyword">await</span> f</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;task result: <span class="subst">&#123;earliest_result&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>预期的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task result: hello2</span><br><span class="line">task result: world4</span><br></pre></td></tr></table></figure>

<h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>爬取某个平台下的所有图片的时候，我们需要下载图片，如果你一个个地下载会出现这样的情况：</p>
<ol>
<li> <strong>如果某个请求堵塞，整个队列都会被堵塞</strong></li>
<li> <strong>如果是小文件，单线程下载太慢</strong></li>
</ol>
<p>这时候异步下载就派上用场了，<strong>在你请求第一个图片获得数据的时候，它会切换请求第二个图片或其他图片，等第一个图片获得所有数据后再切换回来</strong>。从而实现多线程批量下载的功能，速度超快，下载超清大图用这个方法可以一秒一张。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_img</span>(<span class="params">session, url</span>):</span></span><br><span class="line">    name = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    img = <span class="keyword">await</span> session.get(url)</span><br><span class="line"></span><br><span class="line">    imgcode = <span class="keyword">await</span> img.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img/&quot;</span> + <span class="built_in">str</span>(name), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(imgcode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_all_img</span>(<span class="params">URL</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [asyncio.create_task(download_img(session, url)) <span class="keyword">for</span> url <span class="keyword">in</span> URL]</span><br><span class="line">        all_results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = [</span><br><span class="line">        <span class="string">&#x27;http://pic1.win4000.com/wallpaper/2018-09-11/5b9784aa5ec31.jpg&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://pic1.win4000.com/wallpaper/2018-09-11/5b9784aaef17f.jpg&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.create_task(download_all_img(url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-邮件发送</title>
    <url>/2020/12/03/COvfcn4Hg/</url>
    <content><![CDATA[<p>我们常常会用到一些发送邮件的功能，比如：有人注册网站之后，需要向其邮箱中发送激活链接，只有点击激活链接，激活账户之后，才允许登录。</p>
<span id="more"></span>

<h2 id="配置相关参数"><a href="#配置相关参数" class="headerlink" title="配置相关参数"></a>配置相关参数</h2><p>在 settings.py 的最后面加上类似这些</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span></span><br><span class="line">EMAIL_USE_TLS = <span class="literal">False</span>   <span class="comment"># 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span>    <span class="comment"># 是否使用SSL加密，qq企业邮箱要求使用</span></span><br><span class="line">EMAIL_HOST = <span class="string">&#x27;smtp.163.com&#x27;</span>   <span class="comment"># 发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span>     <span class="comment"># 发件箱的SMTP服务器端口</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">&#x27;xxxxx@xmdaren.com&#x27;</span>    <span class="comment"># 发送邮件的邮箱地址</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">&#x27;*********&#x27;</span>         <span class="comment"># 发送邮件的邮箱密码(这里使用的是授权码)</span></span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  <span class="comment"># 默认的发送方</span></span><br></pre></td></tr></table></figure>

<p>DEFAULT_FROM_EMAIL 还可以写成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULT_FROM_EMAIL = <span class="string">&#x27;mac &lt;mac@163.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样别人收到的邮件中就会有你设定的名称。</p>
<p>下面是一些常用的邮箱：</p>
<p><a href="http://help.163.com/09/1223/14/5R7P3QI100753VB8.html">163 邮箱</a>   <a href="http://www.126.com/help/client_04.htm">126 邮箱</a>  <a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=166&&id=28">QQ 邮箱</a></p>
<p>其它邮箱参数可以登陆邮箱寻找帮助信息，也可以尝试在搜索引擎中搜索：”SMTP 邮箱名称”，比如：”163 SMTP” 进行查找。</p>
<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><p> 发送普通邮件可以使用<code>django.core.mail</code>模块下的<code>send_mail</code>函数进行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">send_mail(subject, message, from_email, recipient_list, fail_silently=<span class="literal">False</span>, html_message=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 将邮件发送至recipient_list中的每一个收件人</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">subject: 发送邮件标题</span></span><br><span class="line"><span class="string">message: 发送邮件正文</span></span><br><span class="line"><span class="string">from_email: 发件人邮箱地址</span></span><br><span class="line"><span class="string">recipient_list: 一个字符串列表，每一个数据为接收者的邮箱地址</span></span><br><span class="line"><span class="string">html_message: 如果指定该值，则发送的内容类型为text/html为一个html邮件内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_regiser_active_email</span>(<span class="params">to_email, username, token</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;发送激活邮件&#x27;&#x27;&#x27;</span></span><br><span class="line">    active_url = <span class="string">&quot;&#123;&#125;/user/active/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(settings.HOST_URL, token)</span><br><span class="line">    subject = <span class="string">&quot;xxx欢迎信息&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;邮件正文&#x27;</span></span><br><span class="line">    sender = settings.DEFAULT_FROM_EMAIL</span><br><span class="line">    receiver = [to_email]</span><br><span class="line">    html_message = <span class="string">&#x27;&lt;h1&gt;&#123;&#125;, 欢迎您成为xxx注册会员&lt;/h1&gt;请点击下面链接激活您的账户&lt;br/&gt;&lt;a href=&quot;&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&#x27;</span>.<span class="built_in">format</span>(username, active_url,</span><br><span class="line">                                                                                            active_url)</span><br><span class="line">    send_mail(subject, message, sender, receiver, html_message=html_message)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="邮件激活"><a href="#邮件激活" class="headerlink" title="邮件激活"></a>邮件激活</h2><p>注册成功，发送激活链接, <strong>注意：</strong>为了安全考虑，可以使用<code>itsdangerous</code>，根据用户信息加密生成 token</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 加密用户信息，生成token</span></span><br><span class="line">info = &#123;<span class="string">&#x27;confirm&#x27;</span>: user.<span class="built_in">id</span>&#125;</span><br><span class="line">serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">token = serializer.dumps(info).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line">send_regiser_active_email(email, username, token)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用户点击激活链接，进行账户激活</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行解密， 获取要激活的用户信息</span></span><br><span class="line">serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 获取用户id</span></span><br><span class="line">    info = serializer.loads(token)  <span class="comment"># 在路由匹配中，获取token</span></span><br><span class="line"><span class="keyword">except</span> (SignatureExpired, BadSignature) <span class="keyword">as</span> error:</span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">&quot;user:activeemail&quot;</span>))  <span class="comment"># 激活失败，重写跳转到邮箱激活页面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    user_id = info.get(<span class="string">&quot;confirm&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取用户信息</span></span><br><span class="line">    user = User.objects.get(<span class="built_in">id</span>=user_id)</span><br><span class="line">    user.is_active = <span class="number">1</span></span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 跳转到登录界面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;user:login&#x27;</span>))  <span class="comment"># 激活成功，跳转到登录页面      </span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>清除office最近文件</title>
    <url>/2020/05/23/BX2WnYMds/</url>
    <content><![CDATA[<p>批量删除Mac系统下office最近文件</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf ~/Library/Containers/com.microsoft.Word/Data/Library/Preferences/com.microsoft.Word.securebookmarks.plist</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Containers/com.microsoft.Excel/Data/Library/Preferences/com.microsoft.Excel.securebookmarks.plist</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Containers/com.microsoft.Powerpoint/Data/Library/Preferences/com.microsoft.Powerpoint.securebookmarks.plist</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadPoolExecutor和ProcessPoolExecutor</title>
    <url>/2021/10/24/CTYF2sYrE/</url>
    <content><![CDATA[<p>Python中已经有了threading模块，为什么还需要线程池呢，线程池又是什么东西呢？</p>
<p>在爬虫案例中，需要控制同时爬取的线程数，例子中创建了20个线程，而同时只允许3个线程在运行，但是20个线程都需要创建和销毁，线程的创建是需要消耗系统资源的，有没有更好的方案呢？其实只需要三个线程就行了，每个线程各分配一个任务，剩下的任务排队等待，当某个线程完成了任务的时候，排队任务就可以安排给这个线程继续执行。</p>
<p>这就是线程池的思想（当然没这么简单），但是自己编写线程池很难写的比较完美，还需要考虑复杂情况下的线程同步，很容易发生死锁。从Python3.2开始，标准库为我们提供了<code>concurrent.futures</code>模块，它提供了<code>ThreadPoolExecutor</code>和<code>ProcessPoolExecutor</code>两个类，实现了对<code>threading</code>和<code>multiprocessing</code>的进一步抽象。</p>
<span id="more"></span>

<p>这里主要关注线程池，不仅可以帮我们自动调度线程，还可以做到：</p>
<ul>
<li>  主线程可以获取某一个线程（或者任务的）的状态，以及返回值。</li>
<li>  当一个线程完成的时候，主线程能够立即知道。</li>
<li>  让多线程和多进程的编码接口一致。</li>
</ul>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数times用来模拟网络请求时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125;s finished&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 通过submit函数提交执行的函数到线程池中，submit函数立即返回,不阻塞</span></span><br><span class="line">    task1 = executor.submit(get_html, <span class="number">3</span>)</span><br><span class="line">    task2 = executor.submit(get_html, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># done方法用于判断某个任务是否完成</span></span><br><span class="line">    <span class="built_in">print</span>(task1.done())</span><br><span class="line">    <span class="comment"># cancel方法用于取消某个任务，该任务没有放到线程池中才能被取消</span></span><br><span class="line">    <span class="built_in">print</span>(task2.cancel())</span><br><span class="line">    <span class="built_in">print</span>(task1.done())</span><br><span class="line">    <span class="comment"># result方法可以获取task的执行结果</span></span><br><span class="line">    <span class="built_in">print</span>(task1.result())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  当创建的线程池大小为2时，即同一时刻允许两个线程运行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">get page 2s finished</span><br><span class="line">get page 3s finished</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  当创建的线程池大小为1时，即同一时刻只允许一个线程运行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">get page 3s finished</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>ThreadPoolExecutor</code> 构造实例的时候，传入 <code>max_workers</code> 参数来设置线程中最多能同时运行的线程数目</li>
<li>  使用 <code>submit</code> 函数来提交线程需要执行任务 (函数名和参数) 到线程池中，并返回该任务的句柄(类似于文件操作符)，注意 <strong><code>submit()</code> 不是阻塞的，而是立即返回</strong>。</li>
<li>  通过 <code>submit</code> 函数返回的任务句柄, 能够使用 <code>done()</code> 方法判断该任务是否结束</li>
<li>  使用 <code>result()</code> 方法可以获取任务的返回值，注意：<strong>这个方法是阻塞的</strong></li>
</ul>
<h3 id="as-completed"><a href="#as-completed" class="headerlink" title="as_completed"></a>as_completed</h3><p>上面虽然提供了判断任务是否结束的方法，但是不能在主线程中一直判断，有时候我们是得知某个任务结束了，就去获取结果，而不是一直判断每个任务有没有结束。这是就可以使用 <code>as_completed</code> 方法一次取出所有任务的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数times用来模拟网络请求时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125;s finished&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">times_list = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">all_task = [executor.submit(get_html, times) <span class="keyword">for</span> times <span class="keyword">in</span> times_list]</span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(all_task):</span><br><span class="line">    data = future.result()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in main:get page &#123;&#125;s success&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get page 2s finished</span><br><span class="line"><span class="keyword">in</span> main:get page 2s success</span><br><span class="line">get page 3s finished</span><br><span class="line"><span class="keyword">in</span> main:get page 3s success</span><br><span class="line">get page 4s finished</span><br><span class="line"><span class="keyword">in</span> main:get page 4s success</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>除了上面的 <code>as_completed</code> 方法, 还可以使用 <code>map</code> 方法，但是有一点不同, 使用 <code>map</code> 方法，不需提前使用 <code>submit</code> 方法，<code>map</code> 方法与 python 标准库中的 <code>map</code> 含义相同，都是将序列中的每个元素都执行同一个函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数times用来模拟网络请求时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125;s finished&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">times_list = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> executor.<span class="built_in">map</span>(get_html, times_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in main:get page &#123;&#125;s success&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">executor.shutdown()</span><br></pre></td></tr></table></figure>

<p>上面的代码就是对 <code>times_list</code> 的每个元素都执行 <code>get_html</code> 函数，并分配各线程池。</p>
<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get page 2s finished</span><br><span class="line">get page 3s finished</span><br><span class="line"><span class="keyword">in</span> main:get page 3s success</span><br><span class="line"><span class="keyword">in</span> main:get page 2s success</span><br><span class="line">get page 4s finished</span><br><span class="line"><span class="keyword">in</span> main:get page 4s success</span><br></pre></td></tr></table></figure>

<p>可以看到执行结果与上面的 <code>as_completed</code> 方法的结果不同，输出顺序和 <code>times_list</code> 列表的顺序相同，就算 2s 的任务先执行完成，也会先打印出 <code>3s</code> 的任务先完成，再打印 <code>2s</code> 的任务完成。</p>
<h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p><code>wait</code> 方法可以让主线程阻塞, 直到满足设定的要求。wait 方法接收 3 个参数：等待的任务序列、超时时间以及等待条件。等待条件 return_when 默认为 ALL_COMPLETED, 表明要等待所有的任务都结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED, FIRST_COMPLETED</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数times用来模拟网络请求时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125;s finished&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">time_list = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">all_task = [executor.submit(get_html, time) <span class="keyword">for</span> time <span class="keyword">in</span> time_list]</span><br><span class="line">wait(all_task, return_when=ALL_COMPLETED)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>)</span><br><span class="line"></span><br><span class="line">executor.shutdown()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get page 2s finished</span><br><span class="line">get page 3s finished</span><br><span class="line">get page 4s finished</span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<p>可以看到运行结果中，确实是所有任务都完成了，主线程才打印出 <code>main</code>, 等待条件还可以设置为 <code>FIRST_COMPLETED</code>, 表示第一个任务完成就停止等待。</p>
<h2 id="ProcessPoolExecutor"><a href="#ProcessPoolExecutor" class="headerlink" title="ProcessPoolExecutor"></a>ProcessPoolExecutor</h2><p>ProcessPoolExecutor已经做到让多线程和多进程的编码接口一致，屏蔽底层差异。因此，两者的调用方法基本一致。</p>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><blockquote>
<p>  下文以<code>ProcessPoolExecutor</code>为例，说明不同的调用方法产生的执行效率差异；而<code>ThreadPoolExecutor</code>性质相似，不再单独说明</p>
</blockquote>
<h3 id="同步等待"><a href="#同步等待" class="headerlink" title="同步等待"></a>同步等待</h3><p>提交任务，原地等待任务执行结束，拿到任务返回结果，再执行下一行代码，会导致任务串行执行。</p>
<p>优点：解耦合</p>
<p>缺点: 速度慢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    n = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s %s is running&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = ProcessPoolExecutor(<span class="number">4</span>)  <span class="comment"># 设置进程池内进程数</span></span><br><span class="line"></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 同步调用方式，调用和等值</span></span><br><span class="line">        obj = p.submit(task, <span class="string">&quot;进程pid：&quot;</span>)  <span class="comment"># 传参方式(任务名，参数),参数使用位置或者关键字参数</span></span><br><span class="line">        res = obj.result()</span><br><span class="line">        s += res</span><br><span class="line">    p.shutdown(wait=<span class="literal">True</span>)  <span class="comment"># 关闭进程池的入口，等待池内任务运行结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end - start, s, <span class="string">&quot;主&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">进程pid： <span class="number">38873</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38874</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38875</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38876</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38873</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38874</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38875</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38876</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38873</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">38874</span> <span class="keyword">is</span> running</span><br><span class="line"><span class="number">20.03743004798889</span> <span class="number">20</span> 主</span><br></pre></td></tr></table></figure>

<h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><p>缺点：存在耦合</p>
<p>优点：速度快</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    n = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s %s is running&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">future</span>):</span></span><br><span class="line">    results.append(future.result())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = ProcessPoolExecutor(<span class="number">4</span>)  <span class="comment"># 设置进程池内进程数</span></span><br><span class="line">    results = []</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        obj = p.submit(task, <span class="string">&quot;进程pid：&quot;</span>)  <span class="comment"># 传参方式(任务名，参数),参数使用位置或者关键字参数</span></span><br><span class="line">        obj.add_done_callback(parse)  <span class="comment"># 执行结束，异步执行回调函数</span></span><br><span class="line">    p.shutdown(wait=<span class="literal">True</span>)  <span class="comment"># 关闭进程池的入口，等待池内任务运行结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end - start, <span class="built_in">sum</span>(results), <span class="string">&quot;主&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid： <span class="number">39061</span> <span class="keyword">is</span> running</span><br><span class="line"><span class="number">7.007356882095337</span> <span class="number">23</span> 主</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  当然， 在多任务的执行过程中，往往使用<code>map</code>函数会更加方便</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    n = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s %s is running&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    results = []</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(<span class="number">4</span>) <span class="keyword">as</span> p:  <span class="comment"># 使用上下文管理器，等待池内任务运行结束，自动关闭进程池</span></span><br><span class="line">        obj = p.<span class="built_in">map</span>(task, [<span class="string">&quot;进程pid： &quot;</span>] * <span class="number">10</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(end - start, <span class="built_in">sum</span>(obj), <span class="string">&quot;主&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  执行结果为：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">进程pid：  <span class="number">39151</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39149</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39150</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39149</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39152</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39150</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39149</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39152</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39151</span> <span class="keyword">is</span> running</span><br><span class="line">进程pid：  <span class="number">39150</span> <span class="keyword">is</span> running</span><br><span class="line"><span class="number">4.018141269683838</span> <span class="number">15</span> 主</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li><p>  线程不是越多越好，会涉及 cpu 上下文的切换（会把上一次的记录保存）。</p>
</li>
<li><p>  进程比线程消耗资源，进程相当于一个工厂，工厂里有很多人，里面的人共同享受着福利资源，，一个进程里默认只有一个主线程，比如：开启程序是进程，里面执行的是线程，线程只是一个进程创建多个人同时去工作。</p>
</li>
<li><p>  线程里有 GIL 全局解锁器：不允许 cpu 调度</p>
</li>
<li><p>  计算密度型适用于多进程</p>
</li>
<li><p>  线程：线程是计算机中工作的最小单元</p>
</li>
<li><p>  进程：默认有主线程 (帮工作) 可以多线程共存</p>
</li>
<li><p>  协程：一个线程，一个进程做多个任务, 使用进程中一个线程去做多个任务，微线程</p>
</li>
<li><p>  GIL 全局解释器锁：保证同一时刻只有一个线程被 cpu 调度</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>简单介绍 HTTP 协议结构</title>
    <url>/2019/05/09/EPkgInV6X/</url>
    <content><![CDATA[<p>首先，应用 <code>HTTP</code> 协议时，必定有客户端和服务器端。<br>其中，发起请求的是客户端，响应请求并返回的是服务端。</p>
<span id="more"></span>

<h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p>请求报文是由请求方法、请求 <code>URI</code>、协议版本、可选的请求首部字段和内容实体构成的。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111207-%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%20.png" alt="20190526111207-请求报文"></p>
<h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>服务器以响应的形式返回处理结果。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111215-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20.png" alt="20190526111215-响应报文"></p>
<p><code>200 OK</code> 是状态码（<code>status</code> <code>code</code>）和 原因短语。<br>下一行是创建相应的日期，是首部字段 (<code>header</code> <code>field</code>) 的一个属性。<br>下一行是返回内容的总长度。<br>下一行是返回内容的类型。<br>空行后的是资源实体的主体内容。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111221-%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%8702%20.png" alt="20190526111221-响应报文02"></p>
<h2 id="HTTP-是无状态（stateless）"><a href="#HTTP-是无状态（stateless）" class="headerlink" title="HTTP 是无状态（stateless）"></a>HTTP 是无状态（stateless）</h2><p>  HTTP 自身不对请求和相应之间的通信状态进行保存，即不对发送过的请求或响应进行持久化处理。<br>  这是为了更快地处理大量事务，确保协议的可伸缩性。<br>  这一技术的<strong>问题</strong>就是当访问一家网站的多个页面时，无法保存其登陆状态，所以根据这一问题，引入了 <code>Cookie</code> 技术来管理状态。</p>
<h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><p>  下面就简单介绍一下常用的几种方法，<code>GET</code>、<code>POST</code> 和 <code>HEAD</code> 除此之外的还有 <code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code> 和 <code>CONNECT</code>，这些不太常用，所以不在这里赘述了。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a><code>GET</code></h3><p>  获取资源。请求已被 <code>URI</code> 识别的资源，就是经过服务器解析后返回的响应内容，文本就保持原样返回，如果是可执行程序，就返回结果。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111129-GET%E6%96%B9%E5%BC%8F%20.png" alt="20190526111129-GET方式"></p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a><code>POST</code></h3><p>  传输实体主体。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111137-POST%E6%96%B9%E5%BC%8F%20.png" alt="20190526111137-POST方式"></p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a><code>HEAD</code></h3><p>  获得报文首部。和 <code>GET</code> 一样，但是不返回主体部分，只用于确认 <code>URI</code> 的有效性和资源更新的日期等。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111155-%E6%8A%A5%E6%96%87%E5%A4%B4%20.png" alt="20190526111155-报文头"></p>
<blockquote>
<p><strong>注意：</strong>方法名区分大小写，注意要用<strong>大写字母</strong>。</p>
</blockquote>
<h2 id="持久化连接"><a href="#持久化连接" class="headerlink" title="持久化连接"></a>持久化连接</h2><p>  当请求的资源有很多时，会发生多次的 <code>TCP</code> 连接和断开过程，增加了通信量的开销。于是产生了持久链接（<code>HTTP</code> <code>Persistent</code> <code>connections</code>）。<br>  <strong>特点：</strong> 只要任意一端没有明确提出断开连接，则保持 <code>TCP</code> 连接状态。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111143-TCP%E9%93%BE%E6%8E%A5%20.png" alt="20190526111143-TCP链接"></p>
<h2 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h2><p>  持久化连接需要等待上一个发送请求得到响应之后才能发送下一个请求，但是管线化技术可以直接发送，这样就能同时并发发送多个请求。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111200-%E7%AE%A1%E7%BA%BF%E5%8C%96%20.png" alt="20190526111200-管线化"></p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>  状态管理。为了解决 <code>HTTP</code> 的无状态，<code>Cookie</code> 技术通过在请求和响应报文中写入 <code>Cookie</code> 信息来控制客户端的状态。具体实现是 <code>Cookie</code> 根据响应报文内 <code>Set-Cookie</code> 的首部字段信息，通知客户端保存 <code>Cookie</code>，当下一次再像<strong>该</strong>服务器发送请求，客户端会自动在请求报文中添加 <code>Cookie</code> 值后发送。服务端发现客户端发送的 <code>Cookie</code> 后，回去检查对比记录，得到状态信息。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526111108-Cookie%20.png" alt="20190526111108-Cookie"></p>
<h2 id="自我回顾"><a href="#自我回顾" class="headerlink" title="自我回顾"></a>自我回顾</h2><p>1、请求报文、响应报文的基本组成？<br>2、什么是无状态协议，怎么解决的？<br>3、<code>HTTP</code> 的基本方法？分别有什么功能？<br>4、为了加快资源访问速度出现了什么方法？</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器基础</title>
    <url>/2019/05/02/DX3g_pNLm/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="函数复习"><a href="#函数复习" class="headerlink" title="函数复习"></a>函数复习</h2><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><blockquote>
<p><code>python</code>的常识，函数和其他任何东西一样，都是对象。这意味着可以将<code>函数</code>当做<code>实参</code>传递给函数，或者在函数中将<code>函数</code>作为<code>返回值</code>返回。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是“返回函数”的一个典型应用</p>
<p>闭包的定义：</p>
<blockquote>
<ul>
<li><p>  在一个外函数(<code>outer</code>)中定义了一个内函数(<code>inner</code>)</p>
</li>
<li><p>   内函数里运用了外函数的临时变量</p>
</li>
<li><p>  并且外函数的返回值是内函数的引用</p>
</li>
</ul>
</blockquote>
<p>闭包的使用，可以隐藏内部函数的工作细节，只给外部使用者提供一个可以执行的内部函数的引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#闭包函数的实例</span></span><br><span class="line">  <span class="comment"># outer是外部函数 a和b都是外函数的临时变量</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params"> a </span>):</span></span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span>  <span class="comment"># inner是内函数</span></span><br><span class="line">        <span class="built_in">print</span>(a+b)  <span class="comment">#在内函数中 用到了外函数的临时变量</span></span><br><span class="line">    <span class="keyword">return</span> inner  <span class="comment"># 外函数的返回值是内函数的引用</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 在这里我们调用外函数传入参数5</span></span><br><span class="line">  <span class="comment">#此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo</span></span><br><span class="line">  <span class="comment"># 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span></span><br><span class="line">  demo = outer(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span></span><br><span class="line">  <span class="comment"># demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span></span><br><span class="line">  demo() <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>inner</code>函数修改<code>outer</code>函数变量</p>
</blockquote>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span>():</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">counter</span>():</span></span><br><span class="line">     <span class="keyword">nonlocal</span> i <span class="comment"># 指定外部函数的局部变量</span></span><br><span class="line">     i = i + <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> i</span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line">counterA = createCounter()</span><br><span class="line"><span class="built_in">print</span>(counterA(), counterA(), counterA(), counterA(), counterA()) <span class="comment"># 1 2 3 4 5</span></span><br><span class="line">counterB = createCounter()</span><br><span class="line"><span class="keyword">if</span> [counterB(), counterB(), counterB(), counterB()] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;测试通过!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;测试失败!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="装饰器介绍"><a href="#装饰器介绍" class="headerlink" title="装饰器介绍"></a>装饰器介绍</h2><p>要了解python中<code>@</code>装饰器的作用，首先要记住这么几点：</p>
<blockquote>
<p>  装饰器符号<code>@</code>属于语法糖</p>
</blockquote>
<p>什么意思呢？</p>
<ul>
<li>就是说，我不按照<code>@</code>装饰器的语法要求来写，而是按照一般<code>python</code>的语法要求来写完全可以。</li>
<li>那么用<code>@</code>装饰器的格式来写的目的就是为了书写简单方便</li>
</ul>
<p><strong>注意：装饰器是用于拓展已有函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，实际上就是利用闭包语法实现的。</strong></p>
<h2 id="装饰器语法"><a href="#装饰器语法" class="headerlink" title="装饰器语法"></a>装饰器语法</h2><p>装饰器的作用是什么呢？ 简单的理解就是：装饰原有的函数。什么意思呢？</p>
<p>比如有一个函数<code>func(a, b)</code>，它的功能是求<code>a</code>,<code>b</code>的差值</p>
<p>现在有一个新需求，就是想对函数功能再装饰下，求完差值后再取绝对值，但是不能能修改原有函数，这时候就需要装饰器装饰函数     </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数闭包实现求差值之后，再求绝对值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a- b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs_num</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">a, b</span>):</span></span><br><span class="line">        ret = func(a, b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(ret)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@abs_num</span></span><br><span class="line">func(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当<code>abs_num</code>装饰函数<code>func</code>时，类似于将函数<code>func</code>作为参数传给<code>abs_num</code>,并将返回值即内层函数(<code>inner</code>)名重新赋值给变量<code>func</code></p>
</li>
<li><p>当调用函数<code>func</code>时，实质是调用内层函数<code>inner</code>，在内层函数中执行<code>func</code>函数，即最原始的函数<code>func</code></p>
</li>
</ul>
<h2 id="装饰器分类"><a href="#装饰器分类" class="headerlink" title="装饰器分类"></a>装饰器分类</h2><h3 id="被装饰函数有参数"><a href="#被装饰函数有参数" class="headerlink" title="被装饰函数有参数"></a>被装饰函数有参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        func(x, y)  <span class="comment"># 新版的 func  才是 原来的 add</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 新版的 add  是 内层 inner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add(1, 2)   ====&gt;  inner(1, 2)  ====&gt;  func(1, 2)  ===&gt; 3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>被装饰函数 有参数，<code>inner</code>和 <code>func </code>需要同样的参数</p>
</blockquote>
<h3 id="被装饰的函数有不定长参数"><a href="#被装饰的函数有不定长参数" class="headerlink" title="被装饰的函数有不定长参数"></a>被装饰的函数有不定长参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_func</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># func(args, kwargs),此时得到的是元组和字典</span></span><br><span class="line">        <span class="comment"># func(*args, **kwargs),此时则是把元素拆包为单个数值和键值对</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">a, b, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a, b, args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s(<span class="number">12</span>, <span class="number">50</span>, <span class="number">34</span>, c=<span class="number">20</span>, d=<span class="number">56</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>形参<ul>
<li><code>*args</code>：接收多余的参数，得到元组(args)</li>
<li><code>**kwargs</code>:接收多余的关键字参数，得到字典(kwargs)</li>
</ul>
</li>
<li>实参<ul>
<li><code>*args</code>：对元组(args)进行拆包，得到单个数值</li>
<li><code>**kwargs</code>：对字典(kwargs)拆包，得到单个的键值对</li>
</ul>
</li>
</ul>
<h3 id="被装饰函数有返回值"><a href="#被装饰函数有返回值" class="headerlink" title="被装饰函数有返回值"></a>被装饰函数有返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">x, y</span>):</span></span><br><span class="line"></span><br><span class="line">        r = func(x, y)  <span class="comment"># 装饰器装饰之后， func才是真正的add求和函数</span></span><br><span class="line">        </span><br><span class="line">        r += <span class="number">10</span>  <span class="comment"># 将两数之和再加 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在装饰器中 对函数的执行结果 加10 处理</span></span><br><span class="line">r = add(<span class="number">10</span>, <span class="number">200</span>)  <span class="comment"># add实际是inner</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>被装饰函数有返回值， <code>inner</code>需要将 <code>func</code> 的结果 返回</p>
</blockquote>
<h3 id="多个装饰器装饰函数"><a href="#多个装饰器装饰函数" class="headerlink" title="多个装饰器装饰函数"></a>多个装饰器装饰函数</h3><ul>
<li><p>多个装饰器装饰同一个函数，装饰顺序和执行顺序正好相反</p>
</li>
<li><p>装饰器函数的执行顺序和装饰器的顺序有关</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_func1</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是测试1...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_func1</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是装饰器1...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> call_func1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_func2</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是测试2...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_func2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是装饰器2...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> call_func2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func1</span></span><br><span class="line"><span class="meta">@set_func2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>代码从上到下，依次执行，同时装饰器是用来装饰函数的</p>
<ul>
<li><p>执行到装饰器set_func1时，无法装饰，先跳过</p>
</li>
<li><p>执行装饰器set_func2时，装饰原始函数s，</p>
<ul>
<li>先执行set_func2,输出”这是测试2…”，</li>
<li>然后得到s = call_func2(s)，此时的s是原始函数s</li>
</ul>
</li>
<li><p>然后装饰器set_func1装饰新得到的函数s = call_func2(s)</p>
<ul>
<li>先执行set_func1,输出”这是测试1…”</li>
<li>然后得到s = call_func1(s)，此时的s是新得到的函数s = call_func2(s)</li>
</ul>
</li>
<li><p>最后得到函数s = call_func1(call_func(s))</p>
</li>
<li><p>最后执行函数s</p>
<ul>
<li>先执行call_func1,输出”这是装饰器1…”</li>
<li>再执行call_func2,输出”这是装饰器2…”</li>
<li>最后执行原始函数s，输出”hello…”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="装饰器带参"><a href="#装饰器带参" class="headerlink" title="装饰器带参"></a>装饰器带参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_pars</span>(<span class="params">pars</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_func</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call_func</span>():</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;這是測試級別%d&quot;</span> % pars)</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> call_func</span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_pars(<span class="params"><span class="number">10</span></span>) </span><span class="comment"># 装饰分两步</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello...&quot;</span>)</span><br><span class="line"></span><br><span class="line">s()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>装饰器带参时，装饰函数过程分两步：<ul>
<li>将参数传给函数set_pars，进行执行</li>
<li>将函数返回结果作为函数s的装饰器进行装饰</li>
</ul>
</li>
</ul>
<h3 id="类作为装饰器"><a href="#类作为装饰器" class="headerlink" title="类作为装饰器"></a>类作为装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span>  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        魔法方法__call__可以将对象设置为可调用对象（callable）,允许一个类的实例像函数一样被调用 </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是类装饰器...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test  </span><span class="comment"># s = Test(s)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello python...&quot;</span>)</span><br><span class="line"></span><br><span class="line">s()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号()应用到某个对象身上都可称之为可调用对象</li>
<li>判断对象是否为可调用对象可以用函数 callable</li>
<li>如果在类中实现了 <code>__call__</code> 方法，那么实例对象也将成为一个可调用对象</li>
</ul>
<h3 id="装饰类的装饰器"><a href="#装饰类的装饰器" class="headerlink" title="装饰类的装饰器"></a>装饰类的装饰器</h3><h4 id="装饰类方法"><a href="#装饰类方法" class="headerlink" title="装饰类方法"></a>装饰类方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">godme</span>(<span class="params">fun</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__godme</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">        fun(self,message)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> __godme</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="meta">    @godme</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"> </span><br><span class="line">person = Person()</span><br><span class="line">person.say(<span class="string">&#x27;happy&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时装饰器和一般的函数装饰器类似，只是多了一个参数：<code>self</code>， 并且<code>self</code>可以调用实例对象的属性和方法</p>
<h4 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instance</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;__instance&#x27;</span>):</span><br><span class="line">            <span class="built_in">setattr</span>(cls, <span class="string">&#x27;__instance&#x27;</span>, cls(*args, **kwargs))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(cls, <span class="string">&#x27;__instance&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br></pre></td></tr></table></figure>

<p>其实此时和普通的装饰函数的用法类似，就是将cls作为参数，传递给装饰器即可。</p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>主键约束和唯一性约束的区别</title>
    <url>/2020/02/26/EgOgbNSVu/</url>
    <content><![CDATA[<p>主键必然是唯一且不为空，但是唯一不一定是主键，而且主键只能有一个，但是唯一约束仅仅是为了保持某些列具有唯一性而已。所以可以有多列<br>一张表里只能有一个主键约束，可以有多个唯一约束<br>主键约束的字段不能为null，而唯一约束的字段可以为null值</p>
<span id="more"></span>

<h3 id="主键约束（PRIMARY-KEY）"><a href="#主键约束（PRIMARY-KEY）" class="headerlink" title="主键约束（PRIMARY KEY）"></a>主键约束（PRIMARY KEY）</h3><ol>
<li>主键用于唯一地标识表中的每一条记录，可以定义一列或多列为主键。</li>
<li>是不可能（或很难）更新．</li>
<li>主键列上没有任何两行具有相同值（即重复值），不允许空（NULL）．</li>
<li>主健可作外健，唯一索引不可；</li>
</ol>
<h3 id="唯一性约束（UNIQUE）"><a href="#唯一性约束（UNIQUE）" class="headerlink" title="唯一性约束（UNIQUE）"></a>唯一性约束（UNIQUE）</h3><ol>
<li>唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．</li>
<li>只要唯一就可以更新．</li>
<li>即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．</li>
<li>一个表上可以放置多个唯一性约束</li>
</ol>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中varbinary、binary、char、varchar异同</title>
    <url>/2019/06/01/EyYEluWEY/</url>
    <content><![CDATA[<p>binary 与 varbinary 类型和char与varchar类型是相似的，只是他们存储的是二进制数据，也就是说他们是包含字节流而不是字符流，他们有二进制字符的集合和顺序，他们的对比，排序是基于字节的数值进行的</p>
<p>binary与varbinary的最大长度和char与varchar是一样的，只不过他们是定义<strong>字节长度</strong>，而char和varchar对应的是<strong>字符长度</strong>。</p>
<span id="more"></span>

<h4 id="存储和取出时对尾部空格的处理"><a href="#存储和取出时对尾部空格的处理" class="headerlink" title="存储和取出时对尾部空格的处理"></a>存储和取出时对尾部空格的处理</h4><ul>
<li><p>char(N)用来存储非二进制字符串，插入时，对于少于N个字符的会自动在尾部加空格，查询时，尾部的空格就会被丢弃掉</p>
</li>
<li><p>vachar(N) 用来存储非二进制字符串，插入时，对于少于N个字符的不填补空格，查询时，尾部的空格不会被丢弃掉</p>
</li>
<li><p>binary(N)存储二进制字符串，插入进，少于N个字节的会自动在尾部加0x00，取出时，所有的字节都保留，返回定义长度的字节长度，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>
</li>
<li><p>varbinary在插入不会去填补0x00字节，查询的时候也不会丢弃任何字节，在比较的时候，所有的字节都是有效的，并且0x00&lt;space (space对应的是0x20)</p>
</li>
</ul>
<h4 id="大小比较时"><a href="#大小比较时" class="headerlink" title="大小比较时"></a>大小比较时</h4><p>char与varchar的字符比较中，是忽略大小写与最后的空格的，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;a &#x27;</span> , <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;A&#x27;</span> , <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;A &#x27;</span>;</span><br><span class="line"></span><br><span class="line">+----------+---------+----------+</span><br><span class="line">| <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;a &#x27;</span> | <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;A &#x27;</span> |</span><br><span class="line">+----------+---------+----------+</span><br><span class="line">|        1 |       1 |        1 |</span><br><span class="line">+----------+---------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>而binary及varbinary的字节比较中，所有的信息都不会被忽略，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t (c BINARY(3));</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t <span class="built_in">set</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select hex(c), c = <span class="string">&#x27;a&#x27;</span>, c = <span class="string">&#x27;a\0\0&#x27;</span> from t;</span><br><span class="line">+--------+---------+-------------+</span><br><span class="line">| HEX(c) | c = <span class="string">&#x27;a&#x27;</span> | c = <span class="string">&#x27;a\0\0&#x27;</span> |</span><br><span class="line">+--------+---------+-------------+</span><br><span class="line">| 610000 |       0 |           1 |</span><br><span class="line">+--------+---------+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.08 sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-图片上传到七牛云</title>
    <url>/2021/05/03/FSLoqo0KT/</url>
    <content><![CDATA[<p>在前后端分离开发中，当上传图片时，一般不会直接把图片等文件资源，直接传到django服务器, 而是使用云服务，此处以七牛云为例，简单演示图片上传的流程。</p>
<span id="more"></span>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/05/S6IoBG.png" alt="S6IoBG"></p>
<ul>
<li>  在Vue上传图片到七牛云时，需要验证身份，因此需要token，而token不建议在前端生成，因此，需要从django中请求token，可以参考七牛云官方文档： <a href="https://developer.qiniu.com/kodo/1242/python">生成上传token</a></li>
<li>  Vue获取到token之后，就可以使用post请求，发送图片文件到七牛云服务器</li>
<li>  上传成功之后，返回的响应，包含 该文件的key，将 服务器的域名和key拼接，即可得到图片的真正地址</li>
</ul>
<h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><p>django中，需要实现两个任务：</p>
<ul>
<li>  生成token，方便Vue上传图片</li>
<li>  接收Vue上传成功后的图片地址，保存到数据库</li>
</ul>
<h3 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brand</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">&#x27;品牌名&#x27;</span>)</span><br><span class="line">    logo = models.URLField(verbose_name=<span class="string">&#x27;logo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_brand&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;品牌&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrandSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Brand</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><blockquote>
<p>  定义方法：</p>
<ul>
<li>  生成一个随机字符串key，代表图片文件名</li>
<li>  根据key和其余参数，生成token</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要填写你的 Access Key 和 Secret Key</span></span><br><span class="line">access_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">secret_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 要上传的空间</span></span><br><span class="line">bucket_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 构建鉴权对象</span></span><br><span class="line">q = Auth(access_key, secret_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_token</span>():</span></span><br><span class="line">    <span class="comment"># 上传后保存的文件名</span></span><br><span class="line">    key = <span class="string">&#x27;%08d&#x27;</span> % random.randint(<span class="number">0</span>, <span class="number">99999999</span>) + datetime.datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成上传 Token，可以指定过期时间等</span></span><br><span class="line">    <span class="comment"># 3600为token过期时间，秒为单位。3600等于一小时</span></span><br><span class="line">    token = q.upload_token(bucket_name, key, <span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> key, token</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  每次请求，返回key和token</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> utils.qiniuyun <span class="keyword">import</span> generate_token</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiniuTokenAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        key, token = generate_token()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: key</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  图片上传成功，实现数据入库</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrandListCreateAPIView</span>(<span class="params">ListCreateAPIView</span>):</span></span><br><span class="line">    queryset = Brand.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BrandSerializer</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;qiniu/token/&#x27;</span>, QiniuTokenAPIView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;brand/&#x27;</span>, BrandListCreateAPIView.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="请求token"><a href="#请求token" class="headerlink" title="请求token"></a>请求token</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义变量，接收token和key</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">postData</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">token</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">key</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 定义方法，从django中请求token</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">get_qiniu_token</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$axios.get(<span class="string">&#x27;qiniu/token/&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.postData = resp.data</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 挂载执行</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.get_qiniu_token();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>七牛云服务器地址，参考  <a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">存储区域_产品简介_对象存储 - 七牛开发者中心 (qiniu.com)</a></td>
</tr>
<tr>
<td>data</td>
<td>需要验证的参数，有两个：<code>token</code>、<code>key</code></td>
</tr>
<tr>
<td>limit</td>
<td>最多上传个数</td>
</tr>
<tr>
<td>file-list</td>
<td>上传成功展示的图片列表</td>
</tr>
<tr>
<td>http-request</td>
<td>覆盖默认的上传行为，可以自定义上传的实现, <code>function(params)</code></td>
</tr>
<tr>
<td>on-success</td>
<td>文件上传成功时的钩子, <code>function(response, file, fileList)</code></td>
</tr>
</tbody></table>
<h4 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h4><blockquote>
<p>  使用<code>element-ui</code>默认的图片上传方式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">               <span class="attr">action</span>=<span class="string">&quot;http://upload-z1.qiniup.com&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span>    </span></span><br><span class="line"><span class="tag">               <span class="attr">:data</span>=<span class="string">&quot;postData&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:file-list</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>: [], <span class="comment">// 上传成功之后，展示的图片列表</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 上传图片的验证参数</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">postData</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">token</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">key</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 需要添加的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">brand</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">logo</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">		...</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">handleAvatarSuccess</span>(<span class="params">response, file, fileList</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.img = fileList</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.brand.logo = <span class="string">&#x27;http://qruzvm22h.hb-bkt.clouddn.com/&#x27;</span> + response.key</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.get_qiniu_token();</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        ...</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="自定义提交方式"><a href="#自定义提交方式" class="headerlink" title="自定义提交方式"></a>自定义提交方式</h4><blockquote>
<p>  覆盖<code>element-ui</code>默认的上传方式，自定义方法实现</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">               <span class="attr">action</span>=<span class="string">&quot;http://upload-z1.qiniup.com&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span>    </span></span><br><span class="line"><span class="tag">               <span class="attr">:data</span>=<span class="string">&quot;postData&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:http-request</span>=<span class="string">&quot;imgUpload&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:file-list</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>    </span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>: [], <span class="comment">// 上传成功之后，展示的图片列表</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 上传图片的验证参数</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">postData</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">token</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">key</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 需要添加的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">brand</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">logo</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">		...</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">imgUpload</span>(<span class="params">params</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第一步.将图片上传到服务器.</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">            formdata.append(<span class="string">&#x27;file&#x27;</span>, params.file);</span></span><br><span class="line"><span class="javascript">            formdata.append(<span class="string">&#x27;key&#x27;</span>, <span class="built_in">this</span>.postData.key);</span></span><br><span class="line"><span class="javascript">            formdata.append(<span class="string">&#x27;token&#x27;</span>, <span class="built_in">this</span>.postData.token);</span></span><br><span class="line"><span class="javascript">            axios(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://upload-z1.qiniup.com&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: formdata,</span></span><br><span class="line"><span class="javascript">                <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 第二步.将返回的响应中的key拼接为图片网址</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> url = <span class="string">&#x27;http://qruzvm22h.hb-bkt.clouddn.com/&#x27;</span> + file.data.key</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.img = [&#123;<span class="string">&quot;url&quot;</span>: url&#125;]</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.brand.logo = url</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.get_qiniu_token();</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        ...</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  自定义方法，使用axios提交表单数据</li>
<li>  提交成功，将返回的key拼接为网址</li>
</ul>
<h3 id="添加品牌"><a href="#添加品牌" class="headerlink" title="添加品牌"></a>添加品牌</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;品牌名称：&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 220px&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;brand.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;品牌logo：&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">action</span>=<span class="string">&quot;http://upload-z1.qiniup.com&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:http-request</span>=<span class="string">&quot;imgUpload&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:data</span>=<span class="string">&quot;postData&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                       <span class="attr">:file-list</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;restAddBrand&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addBrand&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">brand</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">logo</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>: [],</span></span><br><span class="line"><span class="javascript">            <span class="attr">postData</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">token</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">key</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 重置表单数据</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">restAddBrand</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.brand.name = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.brand.id = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.brand.logo = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.img = []</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 提交表单数据</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">addBrand</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.brand.logo)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$axios.post(<span class="string">&#x27;brand/&#x27;</span>, <span class="built_in">this</span>.brand)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(resp.data)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.get_brand_list();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(err.response.data)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 添加成功，同样重置表单</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.restAddBrand();</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>图片上传</tag>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios(一):axios在vue中的使用教程</title>
    <url>/2020/03/03/FBYpWqwfB/</url>
    <content><![CDATA[<p>在 vue项目中使用axios分为局部使用和全局使用</p>
<span id="more"></span>

<h2 id="在vue中局部使用"><a href="#在vue中局部使用" class="headerlink" title="在vue中局部使用"></a>在vue中局部使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="在vue中全部使用"><a href="#在vue中全部使用" class="headerlink" title="在vue中全部使用"></a>在vue中全部使用</h2><p>axios 是一个基于 promise 的 HTTP 库，所以是不能使用vue.use()方法的。<br>那么难道我们要在每个文件都要来引用一次axios吗？多繁琐！！！<br>☞解决方法有很多种：</p>
<h3 id="1-结合-vue-axios使用"><a href="#1-结合-vue-axios使用" class="headerlink" title="1.结合 vue-axios使用"></a>1.结合 vue-axios使用</h3><p>看了vue-axios的源码，它是按照vue插件的方式去写的。那么结合vue-axios，就可以去使用vue.use方法了</p>
<ol>
<li><p>首先在主入口文件main.js中引用：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios,axios);</span><br></pre></td></tr></table></figure></li>
<li><p>之后就可以使用了，在组件文件中的methods里去使用了：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getNewsList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.axios.get(<span class="string">&#x27;api/getNewsList&#x27;</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.newsList=response.data.data;</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-axios-改写为-Vue-的原型属性（不推荐这样用）"><a href="#2-axios-改写为-Vue-的原型属性（不推荐这样用）" class="headerlink" title="2.axios 改写为 Vue 的原型属性（不推荐这样用）"></a>2.axios 改写为 Vue 的原型属性（不推荐这样用）</h3><ol>
<li><p>首先在主入口文件main.js中引用，之后挂在vue的原型链上：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">Vue.prototype.$axios= axios</span><br></pre></td></tr></table></figure></li>
<li><p>在组件中使用</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$ajax.get(<span class="string">&#x27;api/getNewsList&#x27;</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.newsList=response.data.data;</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-结合Vuex的action"><a href="#3-结合Vuex的action" class="headerlink" title="3. 结合Vuex的action"></a>3. 结合Vuex的action</h3><ol>
<li><p>在vuex的仓库文件store.js中引用，使用action添加方法</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line"><span class="comment">// 定义状态</span></span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 封装一个 ajax 方法</span></span><br><span class="line">    login (context) &#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: context.state.user</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li>
<li><p>在组件中发送请求的时候，需要使用 this.$store.dispatch</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    submitForm () &#123;</span><br><span class="line">        <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>VUE</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>win10设置开机自启</title>
    <url>/2019/05/25/FmX7wRaIi/</url>
    <content><![CDATA[<p>刚开始接触 win10 的朋友肯定不知道在哪里把自己常用的软件设置成开机启动，因为你根本找不到前面的 xp、win7、win8，等里面的启动文件夹。</p>
<span id="more"></span>

<h2 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具 / 原料"></a>工具 / 原料</h2><ul>
<li>win10 系统电脑一台</li>
</ul>
<h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法 / 步骤"></a>方法 / 步骤</h2><ol>
<li><p>如果想要实现应用程序在所有的用户登录系统后都能自动启动，就把该应用程序的快捷方式放到 “系统启动文件夹” 里；<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103017-win10%E5%BC%80%E5%A7%8B_01%20.png" alt="20190526103017-win10开始_01"></p>
</li>
<li><p>上面的方法有的朋友可能找不到路径，没有关系，你可以把上面的路径直接复制到地址栏里面打开即可。如下图<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103044-win10%E5%BC%80%E5%A7%8B_02%20.png" alt="20190526103044-win10开始_02"></p>
</li>
<li><p>同样也可以用系统命令来打开 “启动文件夹”。在运行里面输入：<code>shell:startup</code><br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103052-win10%E5%BC%80%E5%A7%8B_03%20.png" alt="20190526103052-win10开始_03"></p>
</li>
<li><p>或者输入：<code>%programdata%\Microsoft\Windows\Start Menu\Programs\Startup</code><br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103102-win10%E5%BC%80%E5%A7%8B_04%20.png" alt="20190526103102-win10开始_04"></p>
</li>
<li><p>上面那种命令都可以打开系统启动文件夹的；同样，打开之后把要启动的软件放进去即可。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-缓存</title>
    <url>/2020/12/01/Gxf6x0QIt/</url>
    <content><![CDATA[<p>在动态网站中,用户所有的请求,服务器都会去数据库中进行相应的增,删,查,改,渲染模板,执行业务逻辑,最后生成用户看到的页面.</p>
<p>当一个网站的用户访问量很大的时候,每一次的的后台操作,都会消耗很多的服务端资源,所以必须使用<strong>缓存</strong>来减轻后端服务器的压力.</p>
<span id="more"></span>

<p>缓存是将一些常用的数据保存到<strong>内存</strong>或者<strong>memcache</strong>中,在一定的时间内有人来访问这些数据时,则不再去执行数据库及渲染等操作,而是直接从内存或memcache的缓存中去取得数据,然后返回给用户。</p>
<h2 id="Django缓存"><a href="#Django缓存" class="headerlink" title="Django缓存"></a>Django缓存</h2><h3 id="缓存方式"><a href="#缓存方式" class="headerlink" title="缓存方式"></a>缓存方式</h3><blockquote>
<p>  Django提供了6种缓存方式</p>
</blockquote>
<ul>
<li>  开发调试缓存</li>
<li>  内存缓存</li>
<li>  文件缓存</li>
<li>  数据库缓存</li>
<li>  Memcache缓存(使用<code>python-memcached</code>模块)</li>
<li>  Memcache缓存(使用<code>pylibmc</code>模块)</li>
</ul>
<p>经常使用的有<strong>文件缓存</strong>和<strong>Mencache</strong>缓存, 而选用不同的缓存方式，实际就是需要缓存的数据保存的位置不同。只需要修改django项目的配置文件<code>settings.py</code>，即可实现不同缓存方式的切换。</p>
<h4 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h4><blockquote>
<p>  此模式为开发调试使用,实际上不执行任何操作</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.dummy.DummyCache&#x27;</span>,  <span class="comment"># 缓存后台使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;TIMEOUT&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h4><blockquote>
<p>  将缓存内容保存至内存区域中</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.locmem.LocMemCache&#x27;</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;unique-snowflake&#x27;</span>,  <span class="comment"># 写在内存中的变量的唯一值 </span></span><br><span class="line">        <span class="string">&#x27;TIMEOUT&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 缓存超时时间(默认为300秒,None表示永不过期)</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h4><blockquote>
<p>  把缓存数据存储在文件中</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.filebased.FileBasedCache&#x27;</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;/var/tmp/django_cache&#x27;</span>,  <span class="comment"># 指定缓存的路径</span></span><br><span class="line">        <span class="string">&#x27;TIMEOUT&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 缓存超时时间(默认为300秒,None表示永不过期)</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h4><blockquote>
<p>  把缓存数据存储在数据库中</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.db.DatabaseCache&#x27;</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;cache_table&#x27;</span>,  <span class="comment"># 数据库表    </span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意,创建缓存的数据库表使用的语句:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createcachetable</span><br></pre></td></tr></table></figure>

<h4 id="Memcached缓存"><a href="#Memcached缓存" class="headerlink" title="Memcached缓存"></a>Memcached缓存</h4><p>Memcached是Django原生支持的缓存系统.要使用Memcached,需要下载Memcached的支持库<code>python-memcached</code>或<code>pylibmc</code>.</p>
<blockquote>
<p>  使用<code>python-memcached</code>模块连接memcache</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;192.168.10.100:11211&#x27;</span>,  <span class="comment"># 指定Memcache缓存服务器的IP地址和端口</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  使用<code>pylibmc</code>模块连接memcache</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;</span>,  <span class="comment"># 指定缓存使用的引擎</span></span><br><span class="line">        <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;192.168.10.100:11211&#x27;</span>,  <span class="comment"># 指定本机的11211端口为Memcache缓存服务器</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;MAX_ENTRIES&#x27;</span>: <span class="number">300</span>,  <span class="comment"># 最大缓存记录的数量（默认300）</span></span><br><span class="line">            <span class="string">&#x27;CULL_FREQUENCY&#x27;</span>: <span class="number">3</span>,  <span class="comment"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Memcached是基于内存的缓存,数据存储在内存中.所以如果服务器死机的话,数据就会丢失,所以Memcached一般与其他缓存配合使用</p>
<h3 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h3><blockquote>
<p>在使用缓存之前，必选先选择一种缓存方式，按照上面的配置信息在 <code>settings.py</code>中实现对应配置。</p>
</blockquote>
<h4 id="全站使用缓存"><a href="#全站使用缓存" class="headerlink" title="全站使用缓存"></a>全站使用缓存</h4><blockquote>
<p>如果想要对整个项目的<strong>所有</strong><code>GET</code>和<code>HEAD</code>方法的正常返回结果进行缓存，可以通过<strong>中间件</strong>实现</p>
</blockquote>
<ul>
<li>用户的请求通过中间件，经过一系列的认证等操作，如果请求的内容在缓存中存在，则使用<code>FetchFromCacheMiddleware</code>获取内容并返回给用户</li>
<li>当返回给用户之前，判断缓存中是否已经存在，如果不存在，则<code>UpdateCacheMiddleware</code>会将缓存保存至Django的缓存之中，以实现全站缓存</li>
<li>请求来了，是从上到下入走中间件；响应的时候是从下到上走中间件。因此，获取页面放在最后，保存页面放最前面</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line"> <span class="string">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span>,  <span class="comment"># 响应HttpResponse中设置几个headers</span></span><br><span class="line"> <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,  <span class="comment"># 用来缓存通过GET和HEAD方法获取的状态码为200的响应</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">CACHE__MIDDLEWARE_SECONDS=<span class="number">15</span>  <span class="comment"># 设定超时时间为15秒</span></span><br></pre></td></tr></table></figure>

<p>此时在中间件中已经设置过缓存，因此其余代码不变，视图中正常执行逻辑，即可实现全站缓存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视图函数被调用&#x27;</span>)</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        result += i</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ctime = time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ctime, result))</span><br></pre></td></tr></table></figure>



<h4 id="单独视图"><a href="#单独视图" class="headerlink" title="单独视图"></a>单独视图</h4><blockquote>
<p>  如果不想对所有的查询结果缓存，而只是为<strong>单个视图</strong>函数添加缓存，就可以使用<strong>装饰器</strong>实现</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache_page(<span class="params"><span class="number">10</span></span>)  </span><span class="comment"># 缓存10秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视图函数被调用&#x27;</span>)</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        result += i</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ctime = time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ctime, result))</span><br></pre></td></tr></table></figure>

<p>因为缓存的原因,不停的刷新浏览器时会发现：第一次请求页面时，会等待5秒，计算完全部数据数据， 才可以返回结果；在下一次请求时，利用缓存结果，可以很快得到响应数据；直到10秒之后，缓存过期，重新进行该过程。</p>
<h4 id="模板缓存"><a href="#模板缓存" class="headerlink" title="模板缓存"></a>模板缓存</h4><blockquote>
<p>如果并不想对页面的其余部分做任何处理，只是相对页面的<strong>一部分</strong> 进行缓存， 就可以使用 <strong>模板缓存</strong> 实现</p>
</blockquote>
<p>如果想对缓存进行更多的控制，可以使用 <code>cache</code>模板标签来缓存模板的一个片段。</p>
<p><code>views</code>视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视图函数被调用&#x27;</span>)</span><br><span class="line">    ctime = time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;page.html&#x27;</span>, &#123;<span class="string">&#x27;ctime&#x27;</span>: ctime&#125;)</span><br></pre></td></tr></table></figure>

<p> 前端网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% load cache %&#125;  <span class="comment"># 放在缓存片段的上面</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;模板缓存&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;这里是未缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将按给定的时间缓存包含块中的内容。 </span></span><br><span class="line"><span class="comment"># 它最少需要两个参数：缓存时间（以秒为单位）；给缓存片段起的名称,该名称将被视为是字符串，而不是变量</span></span><br><span class="line"><span class="comment"># 设定超时时间为10秒, 给缓存模板片段起名为 &quot;time&quot;</span></span><br><span class="line">&#123;% cache <span class="number">10</span> time %&#125;  </span><br><span class="line">    &lt;p&gt;这里是缓存的时间:&#123;&#123; ctime &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endcache %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>刷新浏览器可以看到,第一个时间实时变化,后面一个时间每10秒钟变化一次</p>
<h4 id="手动缓存"><a href="#手动缓存" class="headerlink" title="手动缓存"></a>手动缓存</h4><blockquote>
<p>如果不想为一个方法（页面）进行缓存，只想缓存<strong>某个字段</strong>的话，可以 <strong>手动缓存</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视图函数被调用&#x27;</span>)</span><br><span class="line">    result = cache.get(<span class="string">&#x27;result&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            result += i</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        cache.<span class="built_in">set</span>(<span class="string">&#x27;result&#x27;</span>, result, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    ctime = time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;时间&#123;&#125;的结果是:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ctime, result))</span><br></pre></td></tr></table></figure>

<h2 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h2><p><a href="https://www.cnblogs.com/believepd/p/10275384.html#%E4%BA%8C%E3%80%81redis%E7%BC%93%E5%AD%98">参考 二、Redis 缓存</a></p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-ORM高级操作</title>
    <url>/2021/01/23/GT6ktsEFn/</url>
    <content><![CDATA[<p>本文主要针对的是模型类查询中的高级操作(如：聚合、分组等)做简单介绍。</p>
<span id="more"></span>

<h2 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 品牌</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brand</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;品牌名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_brand&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cate</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;分类名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_cate&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品表： id、name、price、history、stock、 sales</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    cate = models.ForeignKey(null=<span class="literal">True</span>, to=Cate, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;分类&#x27;</span>)</span><br><span class="line">    brand = models.ForeignKey(null=<span class="literal">True</span>, to=Brand, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;品牌&#x27;</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;商品名&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;价格&#x27;</span>)</span><br><span class="line">    history = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;浏览量&#x27;</span>)</span><br><span class="line">    stock = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;库存&#x27;</span>)</span><br><span class="line">    sales = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;销量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_goods&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 订单：订单id、创建时间、更新时间、用户、总数、总价、实付金额、订单状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    status_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;未支付&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;未收货&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;未评价&#x27;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&#x27;已完成&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    order_id = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&#x27;订单号&#x27;</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;更新时间&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(to=User, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;用户&#x27;</span>)</span><br><span class="line">    total = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;商品总数&#x27;</span>)</span><br><span class="line">    total_amount = models.DecimalField(default=<span class="number">0</span>, max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;商品总价&#x27;</span>)</span><br><span class="line">    pay_amount = models.DecimalField(default=<span class="number">0</span>, max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;实付金额&#x27;</span>)</span><br><span class="line">    status = models.SmallIntegerField(choices=status_choices, verbose_name=<span class="string">&#x27;订单状态&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_order&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 订单商品表：id、 name、price、num、goods_id(外键)、order_id(外键)、amount</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderGoods</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    order = models.ForeignKey(to=Order, related_name=<span class="string">&#x27;order_goods&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;订单&#x27;</span>)</span><br><span class="line">    goods = models.ForeignKey(to=Goods, related_name=<span class="string">&#x27;orders&#x27;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;商品&#x27;</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;商品名&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;价格&#x27;</span>)</span><br><span class="line">    num = models.IntegerField(verbose_name=<span class="string">&#x27;数量&#x27;</span>)</span><br><span class="line">    amount = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;小计&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_order_goods&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合查询函数是对一组值执行计算，并返回单个值。</p>
<p>Django 使用聚合查询前要先从 <code>django.db.models</code> 引入 <code>Avg</code>、<code>Max</code>、<code>Min</code>、<code>Count</code>、<code>Sum</code>（首字母大写）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Min,Count,Sum  <span class="comment">#   引入函数</span></span><br></pre></td></tr></table></figure>

<p>聚合查询返回值的数据类型是字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aggregate(别名 = 聚合函数名(<span class="string">&quot;属性名称&quot;</span>))</span><br></pre></td></tr></table></figure>

<ol>
<li>  查询所有订单的总价</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Order.objects.aggregate(<span class="built_in">sum</span>=Sum(<span class="string">&quot;total_amount&quot;</span>))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  查询所有商品的平均价格</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Goods.objects.aggregate(avg=Avg(<span class="string">&quot;price&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组查询一般会用到聚合函数，所以使用前要先从 <code>django.db.models</code> 引入 <code>Avg</code>,<code>Max</code>,<code>Min</code>,<code>Count</code>,<code>Sum</code>（首字母大写）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Min,Count,Sum  <span class="comment">#   引入函数</span></span><br></pre></td></tr></table></figure>

<p><strong>返回值：</strong></p>
<ul>
<li>  分组后，用 <code>values</code> 取值，则返回值是 <code>QuerySet</code> ,数据类型里面为一个个字典；</li>
<li>  分组后，用 <code>values_list</code> 取值，则返回值是 <code>QuerySet</code> ,数据类型里面为一个个元组。</li>
</ul>
<p>MySQL 中的 <code>limit</code> 相当于 ORM 中的 <code>QuerySet</code> 数据类型的切片。</p>
<p>==注意==：</p>
<p><code>annotate</code> 里面放聚合函数。</p>
<ul>
<li>  <strong><code>values</code></strong>  或者  <strong><code>values_list</code></strong> 放在 annotate 前面 :values 或者 values_list 是声明以什么字段分组，annotate 执行分组。</li>
<li>  <strong><code>values</code></strong> 或者 <strong><code>values_list</code></strong> 放在annotate后面：annotate 表示直接以当前表的pk执行分组，values 或者 values_list 表示查询哪些字段， 并且要将 annotate 里的聚合函数起别名，在 values 或者 values_list 里写其别名。</li>
</ul>
<ol>
<li>  查询每天的订单量、销售额</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Order.objects.\</span><br><span class="line">annotate(day=TruncDay(<span class="string">&#x27;create_time&#x27;</span>)).\  <span class="comment"># 将订单对象，添加一个新字段</span></span><br><span class="line"><span class="comment"># 按照日期分组，然后对 分组结果 进行聚合计算</span></span><br><span class="line">values(<span class="string">&#x27;day&#x27;</span>).annotate(total=Count(<span class="string">&#x27;id&#x27;</span>),<span class="built_in">sum</span>=Sum(<span class="string">&#x27;total_amount&#x27;</span>)).\</span><br><span class="line"><span class="comment"># 从聚合结果中，查询哪些字段</span></span><br><span class="line">values(<span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;total&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  查询每天商品的销售额</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OrderGoods.objects.annotate(day=TruncDay(<span class="string">&#x27;order__create_time&#x27;</span>)).values(<span class="string">&#x27;day&#x27;</span>).annotate(<span class="built_in">sum</span>=Sum(<span class="string">&#x27;amount&#x27;</span>)).values(<span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>  查询每个品牌商品的销售额</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OrderGoods.objects.values(<span class="string">&#x27;goods__brand__name&#x27;</span>).annotate(<span class="built_in">sum</span>=Sum(<span class="string">&#x27;amount&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>  查询每类商品的销售额</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OrderGoods.objects.values(<span class="string">&#x27;goods__cate__name&#x27;</span>).annotate(<span class="built_in">sum</span>=Sum(<span class="string">&#x27;amount&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>  查询每天用户新增量</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">User.objects.annotate(day=TruncDay(<span class="string">&#x27;date_joined&#x27;</span>)).values(<span class="string">&#x27;day&#x27;</span>).annotate(n=Count(<span class="string">&#x27;id&#x27;</span>))</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-session</title>
    <url>/2022/01/04/HxkSKw_1S/</url>
    <content><![CDATA[<p><code>Session</code>:在计算机中，尤其是在网络应用中，称为<strong>“会话控制”</strong>。</p>
<p><code>Session</code> 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 <code>Session</code> 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>
<p>当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 <code>Session</code> 对象；当会话过期或被放弃后，服务器将终止该会话。</p>
<p><code>Session</code> 对象最常见的一个用法就是存储用户的首选项。</p>
<span id="more"></span>

<h1 id="Session的特点"><a href="#Session的特点" class="headerlink" title="Session的特点"></a>Session的特点</h1><ol>
<li>依赖<code>cookies</code></li>
<li>存储敏感、重要的信息</li>
<li>支持更多字节</li>
<li><code>Session</code>共享问题</li>
</ol>
<h1 id="Session配置和存储"><a href="#Session配置和存储" class="headerlink" title="Session配置和存储"></a>Session配置和存储</h1><h2 id="启用Session"><a href="#启用Session" class="headerlink" title="启用Session"></a>启用Session</h2><p><strong>Django项目默认启用<code>Session</code>。</strong></p>
<p>可以在<code>settings.py</code>文件中查看，如图所示</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/session_middleware.png" alt="session中间件"></p>
<p>如需禁用<code>session</code>，将上图中的<code>session</code>中间件注释掉即可。</p>
<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>在<code>settings.py</code>文件中，可以设置<code>session</code>数据的存储方式，可以保存在数据库、本地缓存等。</p>
<h3 id="2-2-1-数据库"><a href="#2-2-1-数据库" class="headerlink" title="2.2.1 数据库"></a>2.2.1 数据库</h3><p>存储在数据库中，如下设置可以写，也可以不写，<strong>这是默认存储方式</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SESSION_ENGINE=<span class="string">&#x27;django.contrib.sessions.backends.db&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果存储在数据库中，需要在项<code>INSTALLED_APPS</code>中安装<code>Session</code>应用。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/session_app.png" alt="session_app"></p>
<p>数据库中的表如图所示</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/session_database.png" alt="session数据库"></p>
<p>表结构如下</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/session_table.png" alt="session表结构"></p>
<p>由表结构可知，操作<code>Session</code>包括三个数据：<strong>键</strong>，<strong>值</strong>，<strong>过期时间</strong>。</p>
<h3 id="2-2-2-本地缓存"><a href="#2-2-2-本地缓存" class="headerlink" title="2.2.2 本地缓存"></a>2.2.2 本地缓存</h3><p>存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SESSION_ENGINE=<span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-混合存储"><a href="#2-2-3-混合存储" class="headerlink" title="2.2.3 混合存储"></a>2.2.3 混合存储</h3><p>优先从本机内存中存取，如果没有则从数据库中存取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SESSION_ENGINE=<span class="string">&#x27;django.contrib.sessions.backends.cached_db&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-Redis"><a href="#2-2-4-Redis" class="headerlink" title="2.2.4 Redis"></a>2.2.4 Redis</h3><p>在redis中保存session，需要引入第三方扩展，我们可以使用**<code>django-redis</code>**来解决。</p>
<p>1） 安装扩展</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-redis</span><br></pre></td></tr></table></figure>

<p>2）配置</p>
<p>在settings.py文件中做如下设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cache&quot;</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;default&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Session操作"><a href="#Session操作" class="headerlink" title="Session操作"></a>Session操作</h1><p>通过<code>HttpRequest</code>对象的<code>session</code>属性进行会话的读写操作。</p>
<p>1） 以键值对的格式写session。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">&#x27;键&#x27;</span>]=值</span><br></pre></td></tr></table></figure>

<p>2）根据键读取值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.get(<span class="string">&#x27;键&#x27;</span>,默认值)</span><br></pre></td></tr></table></figure>

<p>3）清除所有session，在存储中删除值部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.clear()</span><br></pre></td></tr></table></figure>

<p>4）清除session数据，在存储中删除session的整条数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flush()</span><br></pre></td></tr></table></figure>

<p>5）删除session中的指定键及值，在存储中只删除某个键及对应的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> request.session[<span class="string">&#x27;键&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>6）设置session的有效期</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果<code>value</code>是一个整数，<code>session</code>将在<code>value</code>秒没有活动后过期。</li>
<li>如果<code>value</code>为0，那么用户<code>session</code>的<code>Cookie</code>将在用户的浏览器关闭时过期。</li>
<li>如果<code>value</code>为<code>None</code>，那么<code>session</code>有效期将采用系统默认值，<strong>默认为两周</strong>，可以通过在<code>settings.py</code>中设置**<code>SESSION_COOKIE_AGE</code>**来设置全局默认值。</li>
</ul>
<h1 id="session模拟用户登录"><a href="#session模拟用户登录" class="headerlink" title="session模拟用户登录"></a><code>session</code>模拟用户登录</h1><h2 id="登录及设置登录标识"><a href="#登录及设置登录标识" class="headerlink" title="登录及设置登录标识"></a>登录及设置登录标识</h2><ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> Viewfrom django.http.response <span class="keyword">import</span> JsonResponseclass Login(View):    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span>        query_dict = request.POST  <span class="comment"># 获取表单参数        userName = query_dict.get(&#x27;userName&#x27;, None)        password = query_dict.get(&#x27;password&#x27;, None)        if userName == &quot;mac&quot; and password == &#x27;123321&#x27;:  # 校验用户是否登录成功            request.session[&#x27;userName&#x27;] = userName  # 登录成功，设置session            return JsonResponse(&#123;&quot;code&quot;: 200, &quot;msg&quot;: &quot;OK&quot;&#125;)        else:            return JsonResponse(&#123;&#x27;code&#x27;: 200, &#x27;msg&#x27;: &quot;FAIL&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">View</span>):</span>    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span>        userName = request.session.get(<span class="string">&#x27;userName&#x27;</span>, <span class="literal">None</span>)  <span class="comment"># 获取session，判断用户是否已经登录        if userName is not None:            return JsonResponse(                &#123;&quot;code&quot;: 200, &quot;msg&quot;: &quot;OK&quot;,                 &quot;userInfo&quot;: &#123;&quot;userName&quot;: userName, &quot;gender&quot;: &quot;男&quot;, &quot;email&quot;: &quot;mac321@163.com&quot;&#125;&#125;)        else:            return JsonResponse(&#123;&quot;code&quot;: 200, &quot;msg&quot;: &quot;FAIL&quot;&#125;)</span></span><br></pre></td></tr></table></figure>



<h1 id="Cookie-VS-Session"><a href="#Cookie-VS-Session" class="headerlink" title="Cookie VS Session"></a><code>Cookie</code> VS <code>Session</code></h1><p>Web应用程序是使用<code>HTTP</code>协议传输数据的。**<code>HTTP</code>协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话**。要跟踪该会话，必须引入一种机制。</p>
<h2 id="实现状态保持的方案："><a href="#实现状态保持的方案：" class="headerlink" title="实现状态保持的方案："></a>实现状态保持的方案：</h2><ul>
<li><p>修改<code>Http</code>协议，使得它支持状态保持(难做到) </p>
</li>
<li><p><code>Cookies</code>：通过客户端来保持状态信息</p>
<ul>
<li><code>Cookie</code>是服务器发给客户端的特殊信息</li>
<li><code>Cookie</code>是以文本的方式保存在客户端，每次请求时都带上它</li>
</ul>
</li>
<li><p><code>Session</code>：通过服务器端来保持状态信息</p>
<ul>
<li><p><code>Session</code>是服务器和客户端之间的一系列的交互动作</p>
</li>
<li><p>服务器为每个客户端开辟内存空间，从而保持状态信息</p>
</li>
<li><p>由于需要客户端也要持有一个标识(<code>id</code>)，因此，也要求服务器端和客户端传输该标识，</p>
</li>
<li><p>标识(<code>id</code>)可以借助<code>Cookie</code>机制或者其他的途径来保存</p>
</li>
</ul>
</li>
</ul>
<h2 id="COOKIE机制"><a href="#COOKIE机制" class="headerlink" title="COOKIE机制"></a><code>COOKIE</code>机制</h2><p><code>Cookie</code>意为“甜饼”，是<strong>由W3C组织提出</strong>，最早由<em>Netscape</em>社区发展的一种机制。目前<code>Cookie</code>已经成为标准，所有的主流浏览器如<em>IE</em>、<em>Netscape</em>、<em>Firefox</em>、<em>Opera</em>等都支持<code>Cookie</code>。</p>
<p>　　由于<em>HTTP</em>是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。</p>
<p>　　<code>Cookie</code>实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用**<code>response</code><strong>向客户端浏览器颁发一个</strong><code>Cookie</code>**。客户端浏览器会把<code>Cookie</code>保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该<code>Cookie</code>一同提交给服务器。服务器检查该<code>Cookie</code>，以此来辨认用户状态。服务器还可以根据需要修改<code>Cookie</code>的内容。</p>
<p><strong><code>Cookie</code>具有不可跨域名性</strong>。根据<em>Cookie</em>规范，浏览器访问<em>Google</em>只会携带<em>Google</em>的<code>Cookie</code>，而不会携带<em>Baidu</em>的<code>Cookie</code>。<em>Google</em>也只能操作<em>Google</em>的<code>Cookie</code>，而不能操作Baidu的<code>Cookie</code>。</p>
<h3 id="5-2-1-Cookie的基本特点"><a href="#5-2-1-Cookie的基本特点" class="headerlink" title="5.2.1 Cookie的基本特点"></a>5.2.1 <code>Cookie</code>的基本特点</h3><ul>
<li><p><code>Cookie</code>保存在客户端</p>
</li>
<li><p>只能保存字符串对象，不能保存对象类型</p>
</li>
<li><p>需要客户端浏览器的支持，浏览器用户可能会禁用<code>Cookie</code></p>
</li>
</ul>
<h3 id="5-2-2-采用Cookie需要解决的问题"><a href="#5-2-2-采用Cookie需要解决的问题" class="headerlink" title="5.2.2 采用Cookie需要解决的问题"></a>5.2.2 采用<code>Cookie</code>需要解决的问题</h3><ul>
<li><p><code>Cookie</code>的创建</p>
<ul>
<li><p>通常是在服务器端创建的</p>
</li>
<li><p>服务器通过在<code>http</code>的响应头加上特殊的指示，那么浏览器在读取这个指示后就会生成相应的<code>cookie</code></p>
</li>
</ul>
</li>
<li><p>Cookie存放的内容</p>
<ul>
<li><p>业务信息(<code>&quot;key&quot;</code>,<code>&quot;value&quot;</code>) </p>
</li>
<li><p>过期时间</p>
</li>
<li><p>域和路径</p>
</li>
</ul>
</li>
<li><p>浏览器是如何通过<code>Cookie</code>和服务器通信？</p>
<ul>
<li><p>通过请求与响应，<code>cookie</code>在服务器和客户端之间传递</p>
</li>
<li><p>每次请求和响应都把<code>cookie</code>信息加载到响应头中；依靠<code>cookie</code>的<code>key</code>传递。</p>
</li>
</ul>
</li>
</ul>
<h2 id="SESSION机制"><a href="#SESSION机制" class="headerlink" title="SESSION机制"></a><code>SESSION</code>机制</h2><p>   除了使用<code>Cookie</code>，<em>Web</em>应用程序中还经常使用<code>Session</code>来记录客户端状态。**<code>Session</code>是服务器端使用的一种记录客户端状态的机制<strong>，使用上比<code>Cookie</code>简单一些，相应的也</strong>增加了服务器的存储压力**。</p>
<p>如果说**<code>Cookie</code>机制是通过检查客户身上的“通行证”来确定客户身份的话，那么<code>Session</code>机制就是通过检查服务器上的“客户明细表”来确认客户身份。<code>Session</code>相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。**</p>
<p>每次客户端发送请求，服务断都检查是否含有<code>sessionId</code>。</p>
<p>   如果有，则根据<code>sessionId</code>检索出<code>session</code>并处理；如果没有，则创建一个<code>session</code>，并绑定一个不重复的<code>sessionId</code>。</p>
<h3 id="基本特点"><a href="#基本特点" class="headerlink" title="基本特点"></a>基本特点</h3><ul>
<li><p>状态信息保存在服务器端。这意味着安全性更高</p>
</li>
<li><p>通过类似与<code>Hashtable</code>的数据结构来保存，能支持任何类型的对象(<em><code>session</code>中可含有多个对象</em>) </p>
</li>
<li><p>保存会话id的技术,依赖于 <code>Cookie</code>。这是默认的方式，在客户端与服务器端传递 <code>SeesionId</code></p>
<p>  <strong>缺点：客户端可能禁用<code>Cookie</code></strong></p>
<ul>
<li><p><strong>表单隐藏字段</strong>，在被传递回客户端之前，在 <code>form</code> 里面加入一个<code>hidden</code>域，设置<code>SeesionId</code>：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">jsessionid</span> <span class="attr">value</span>=<span class="string">&quot;3948E432F90932A549D34532EE2394&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>URL重写</strong>，直接在URL后附加上<code>SeesionId</code>的信息</p>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种状态跟踪机制的比较</p>
<table>
<thead>
<tr>
<th></th>
<th><code>Cookie</code></th>
<th><code>Session</code></th>
</tr>
</thead>
<tbody><tr>
<td>存储位置</td>
<td>保持在客户端</td>
<td>保存在服务器端</td>
</tr>
<tr>
<td>存储类型</td>
<td>只能保持字符串对象</td>
<td>支持各种类型对象</td>
</tr>
<tr>
<td>实现机制</td>
<td>通过过期时间值区分<code>Cookie</code>的类型</td>
<td>需要<code>SeesionId</code>来维护与客户端的通信</td>
</tr>
<tr>
<td></td>
<td>会话<code>Cookie</code>——负数表示关闭浏览器销毁<code>Cookie</code></td>
<td><code>Cookie</code>(默认)</td>
</tr>
<tr>
<td></td>
<td>普通<code>Cookie</code>——正数是设置的销毁时间，单位是秒</td>
<td>表单隐藏字段</td>
</tr>
<tr>
<td></td>
<td>不支持<code>Cookie</code>——0表示立即销毁<code>Cookie</code></td>
<td>*<code>url</code>*重写</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Redis基础教程</title>
    <url>/2020/05/23/IvrKIAgvo/</url>
    <content><![CDATA[<p>简单对redis 命令进行总结、归纳。</p>
<span id="more"></span>

<h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/%E9%94%AE%20.png" alt="键"></p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/String%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%20.png" alt="String（字符串）"></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/List%EF%BC%88%E5%88%97%E8%A1%A8%EF%BC%89%20.png" alt="List（列表）"></p>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Hash%EF%BC%88%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%89%20.png" alt="Hash（哈希表）"></p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Set%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89%20.png" alt="Set（集合）"></p>
<h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ZSet%EF%BC%88SortedSet_%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%89%20.png" alt="ZSet（SortedSet_有序集合）"></p>
<p>更多命令参考<a href="https://cloud.tencent.com/developer/doc/1203">Redis教程</a></p>
]]></content>
      <tags>
        <tag>CRUD</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-视图</title>
    <url>/2021/01/23/JXWU5r2Zq/</url>
    <content><![CDATA[<p>django中的逻辑处理主要是在视图(<code>views</code>)中完成，而视图分为两类：函数视图（<code>FBV</code>）和类视图（<code>CBV</code>）。</p>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>一个视图函数（类），简称视图，是一个简单的Python 函数（类），它接受Web请求并且返回Web响应。</p>
<p>响应可以是一张网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片。</p>
<p>放置在项目（project）或应用程序（app）目录中的名为views.py的文件中。</p>
<blockquote>
<p>  下面是一个以 HTML 文档的形式返回当前日期和时间的视图：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_datetime</span>(<span class="params">request</span>):</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    html = <span class="string">&quot;&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;&quot;</span> % now</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  让我们来逐行解释下上面的代码：</p>
</blockquote>
<p>首先，我们从 <code>django.http</code>模块导入了<code>HttpResponse</code>类，以及Python的<code>datetime</code>库。</p>
<p>接着，我们定义了<code>current_datetime</code>函数。它就是<strong>视图函数</strong>。每个视图函数都使用<code>HttpRequest</code>对象作为第一个参数，并且通常称之为<code>request</code>。</p>
<p><em>注意，视图函数的名称并不重要</em>；不需要用一个统一的命名方式来命名，以便让Django识别它。<br>我们将其命名为<code>current_datetime</code>，是因为这个名称能够比较准确地反映出它实现的功能。</p>
<p>这个视图会返回一个<code>HttpResponse</code>对象，其中包含生成的响应。</p>
<p>Django使用请求和响应对象来通过系统传递状态。</p>
<p>当浏览器向服务端请求一个页面时，Django创建一个<code>HttpRequest</code>对象，该对象包含关于请求的元数据。然后，Django加载相应的视图，将这个<code>HttpRequest</code>对象作为第一个参数传递给视图函数。</p>
<p>每个视图负责返回一个<code>HttpResponse</code>对象。</p>
<h2 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul>
<li>  <em>function based view</em> 基于函数的视图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">request</span>):</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(now)</span><br></pre></td></tr></table></figure>

<ul>
<li>  路由映射</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    upathrl(<span class="string">r&#x27;mul/&#x27;</span>, views.mul),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>FBV 本身就是一个函数，所以和给普通的函数加装饰器无差：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;used:&quot;</span>, end_time-start_time)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># FBV版添加装饰器</span></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_class</span>(<span class="params">request</span>):</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(now)</span><br></pre></td></tr></table></figure>

<h4 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h4><p>如果客户端直接向服务器提交post请求，没有携带csrf_token参数，就会出现403，禁止提交。</p>
<p>如果想要绕过csrf验证，有两种选择，一种就是，直接关闭中间件；另一种，就是在视图中，使用csrf装饰器跳过验证。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(name)</span><br></pre></td></tr></table></figure>

<h2 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><ul>
<li>  <em>class based view</em> 基于类的视图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理不同请求方式的逻辑清晰明了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPublisher</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理get请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 请求&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理post请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 请求&quot;</span>)  </span><br></pre></td></tr></table></figure>

<ul>
<li>  路由映射</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#urls.py 文件</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">	path(<span class="string">r&#x27;add_publisher/&#x27;</span>, views.AddPublisher.as_view()),</span><br><span class="line">]  <span class="comment"># 固定写法注意.as_view()是要加括号的</span></span><br></pre></td></tr></table></figure>

<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><blockquote>
<p>  CBV 如何获取页面请求类型, 并响应的</p>
</blockquote>
<ol>
<li><p>项目启动，执行<code>AddPublisher.as_view()</code>     ——&gt;  view</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;add_publisher/&#x27;</span>,views.AddPublisher.as_view())</span><br></pre></td></tr></table></figure></li>
<li><p>请求到来时执行<code>view</code>函数：</p>
<ol>
<li><p>实例化<code>AddPublisher</code>   ——》 self</p>
</li>
<li><p>self.request = reqeust</p>
</li>
<li><p>执行<code>self.dispatch(request,*args,**kwargs)</code>  </p>
<ol>
<li><p>判断请求方式是否被允许     <code>http_method_names  = []</code></p>
<ol>
<li><p>允许：通过反射获取到当前请求方式对应的方法   ——&gt;  handler</p>
</li>
<li><p>不允许：<code>self.http_method_not_allowed</code>    ——&gt;  handler</p>
</li>
</ol>
</li>
<li><p>执行<code>handler(request,*args,**kwargs)</code>     ——&gt;  返回响应</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h3><ul>
<li>  类中的方法与独立函数不完全相同，因此不能直接将函数装饰器应用于类中的方法 ，我们需要先将其转换为方法装饰器。</li>
<li>  Django 中提供了 <code>method_decorator</code> 装饰器用于将函数装饰器转换为方法装饰器。</li>
</ul>
<h4 id="装饰器加在类方法上"><a href="#装饰器加在类方法上" class="headerlink" title="装饰器加在类方法上"></a>装饰器加在类方法上</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator   <span class="comment">#导入method_decorator装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行的时间是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddClass</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">timer</span>)  </span><span class="comment"># 将函数装饰器转换为方法装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理get请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 请求&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理post请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 请求&quot;</span>)  </span><br></pre></td></tr></table></figure>

<h4 id="dispatch-加装饰器"><a href="#dispatch-加装饰器" class="headerlink" title="dispatch() 加装饰器"></a>dispatch() 加装饰器</h4><p>使用CBV时要注意，请求过来后会先执行<code>dispatch()</code>这个方法，如果需要对该视图类的所有请求方法做批量处理，就可以在<code>dispatch()</code>方法上加装饰器，在所有的请求方法中都生效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator   <span class="comment">#导入方法装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行的时间是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">View</span>):</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">timer</span>) </span><span class="comment">#相当于给get,post请求都加上了装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        obj = <span class="built_in">super</span>(Login,self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理get请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 请求&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理post请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 请求&quot;</span>)  </span><br></pre></td></tr></table></figure>

<h4 id="装饰器加在类上"><a href="#装饰器加在类上" class="headerlink" title="装饰器加在类上"></a>装饰器加在类上</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行的时间是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">timer,name = <span class="string">&#x27;get&#x27;</span></span>)  </span><span class="comment"># 相当于给get请求,加上了装饰器</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">timer,name = <span class="string">&#x27;post&#x27;</span></span>)  </span><span class="comment"># 相当于给post请求,加上了装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">View</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理get请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 请求&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理post请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 请求&quot;</span>)  </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-response响应</title>
    <url>/2022/01/04/K7U-jJoBO/</url>
    <content><![CDATA[<blockquote>
<p>视图在接收请求并处理后，必须返回<code>HttpResponse</code>对象或子对象。<code>HttpRequest</code>对象由<code>Django</code>创建，<code>HttpResponse</code>对象由开发人员创建。</p>
</blockquote>
<span id="more"></span>

<h1 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a><code>HttpResponse</code></h1><p>可以使用<code>django.http.HttpResponse</code>来构造响应对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码)</span><br></pre></td></tr></table></figure>

<p>也可通过<code>HttpResponse</code>对象属性来设置响应体、状态码：</p>
<ul>
<li><code>content</code>：表示返回的内容。</li>
<li><code>status_code</code>：返回的HTTP响应状态码。</li>
</ul>
<h1 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h1><h2 id="状态码介绍"><a href="#状态码介绍" class="headerlink" title="状态码介绍"></a>状态码介绍</h2><p>HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/image-20200905173120732.png" alt="image-20200905173120732"></p>
<p><strong>图：响应的状态码可描述请求的处理结果</strong></p>
<p>状态码如 <code>200 OK</code>，以 3 位数字和原因短语组成。</p>
<p>数字中的第一位指定了响应类别，后两位无分类。响应类别有以下 5 种。</p>
<p><strong>表 3-2-1：状态码的类别</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>类别</strong></th>
<th><strong>原因短语</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>1XX</code></td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td><code>2XX</code></td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td><code>3XX</code></td>
<td>Redirection（重定向状态码）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td><code>4XX</code></td>
<td>Client Error（客户端错误状态码）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td><code>5XX</code></td>
<td>Server Error（服务器错误状态码）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<h2 id="常见状态码-1"><a href="#常见状态码-1" class="headerlink" title="常见状态码"></a>常见状态码</h2><ul>
<li><code>200 OK - [GET]</code>：（成功）服务器成功返回用户请求的数据</li>
<li><code>201 CREATED - [POST/PUT/PATCH]</code>：（已建立）用户新建或修改数据成功</li>
<li><code>204 NO CONTENT - [DELETE]</code>：(无内容) 用户删除数据成功</li>
<li><code>300 Multiple Choices</code>: （多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li>
<li><code>301 Permanently Moved</code> :（永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li>
<li><code>302 Temporarily Moved</code> :（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li>
<li><code>303 See Other</code>: （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li>
<li><code>304 Not Modified</code>: （未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</li>
<li><code>305 Use Proxy</code> （使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li>
<li><code>307 Temporary Redirect</code> （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li>
<li><code>400 INVALID REQUEST - [POST/PUT/PATCH]</code>：(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作</li>
<li><code>401 Unauthorized - [*]</code>:  (未授权) 表示用户没有权限（令牌、用户名、密码错误）</li>
<li><code>403 Forbidden - [*]</code>:  （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的</li>
<li><code>404 NOT FOUND - [*]</code>：（未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作</li>
<li><code>405 Method not allowed</code>: （方法不被允许）不支持该Request的方法</li>
<li><code>406 Not Acceptable</code>:（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析</li>
<li><code>407 Proxy Authentication Required</code>：（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器</li>
<li><code>408 Request Timeout</code>：(请求超时)   如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</li>
<li><code>410 Gone -[GET]</code>：（过去的）用户请求的资源被永久删除，且不会再得到的</li>
<li><code>422 Unprocesable entity - [POST/PUT/PATCH]</code> ：（不可处理）当创建一个对象时，发生一个验证错误</li>
<li><code>500 INTERNAL SERVER ERROR - [*]</code>：(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功</li>
</ul>
<blockquote>
<p><strong>重点</strong>: 200、201、204、400、401、403、404、405、500</p>
</blockquote>
<h2 id="状态码设置"><a href="#状态码设置" class="headerlink" title="状态码设置"></a>状态码设置</h2><p><em>Django</em>还提供了一系列<code>HttpResponse</code>的子类，可以快速设置状态码</p>
<ul>
<li><p><code>HttpResponseRedirect</code> 301</p>
</li>
<li><p><code>HttpResponsePermanentRedirect</code> 302</p>
</li>
<li><p><code>HttpResponseNotModified</code> 304</p>
</li>
<li><p><code>HttpResponseBadRequest</code> 400</p>
</li>
<li><p><code>HttpResponseNotFound</code> 404</p>
</li>
<li><p><code>HttpResponseForbidden</code> 403</p>
</li>
<li><p><code>HttpResponseNotAllowed</code> 405</p>
</li>
<li><p><code>HttpResponseGone</code> 410</p>
</li>
<li><p><code>HttpResponseServerError</code> 500</p>
</li>
</ul>
<h1 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h1><p>若要返回<code>json</code>数据，可以使用<code>JsonResponse</code>来构造响应对象，作用：</p>
<ul>
<li>帮助我们将数据转换为<code>json</code>字符串</li>
<li>设置响应头<code>Content-Type</code>为 <code>application/json</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;beijing&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>Django2.0 新增了在 urls.py 中 <code>app_name</code> 来指定 namespace。</p>
<p>我们可以通过 <code>reverse</code> 函数来反向获取 url，从而实现重定向。</p>
<p>reverse语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reverse(<span class="string">&quot;&lt;namespace&gt;:&lt;url-name&gt;&quot;</span>, kwargs=&#123;<span class="string">&quot;&lt;kwarg&gt;&quot;</span>: <span class="string">&quot;&lt;val&gt;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>现在我们仍然可以用 reverse 函数和模板中的 url 获取 URL</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reverse(<span class="string">&quot;users:index&quot;</span>)</span><br><span class="line">reverse(<span class="string">&quot;users:detail&quot;</span>, kwargs=&#123;<span class="string">&quot;uid&quot;</span>: <span class="number">2020</span>&#125;)</span><br><span class="line">&#123;% url <span class="string">&quot;users:index&quot;</span> %&#125;</span><br><span class="line">&#123;% url <span class="string">&quot;users:detail&quot;</span> uid=<span class="number">2020</span> %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h2><p>在项目的总路由中，可以通过指定namespace来确定应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, include((<span class="string">&#x27;users.urls&#x27;</span>, <span class="string">&#x27;userss&#x27;</span>)))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>更进一步,把 namespace 定义到被 include 的  子路由<code>users/urls.py</code> 中去使用 app_name 定义名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path, path</span><br><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> RegisterView, LoginView, DetailView, IndexView</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  path(<span class="string">&#x27;detail/&lt;int:uid&gt;/&#x27;</span>, DetailView.as_view(), name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">  path(<span class="string">&quot;&quot;</span>, IndexView, name=<span class="string">&quot;index&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="视图实现"><a href="#视图实现" class="headerlink" title="视图实现"></a>视图实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;图书列表页&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;books:bookList&#x27;</span>)  <span class="comment"># redirect(reverse(&#x27;books:bookList&#x27;))</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Django基础-request请求</title>
    <url>/2022/01/04/KAc88UmoL/</url>
    <content><![CDATA[<blockquote>
<p>回想一下，利用HTTP协议向服务器传参有几种途径？</p>
</blockquote>
<ul>
<li>提取URL的特定部分，如<code>/weather/beijing/2018</code>，可以在服务器端的路由中用正则表达式截取；</li>
<li>查询字符串（query string)，形如<code>key1=value1&amp;key2=value2</code>；</li>
<li>请求体(<code>body)</code>中发送的数据，比如表单数据、<code>json</code>  、 <code>xml</code>；</li>
<li>在http报文的头（<code>header</code>）中。</li>
</ul>
<span id="more"></span>


<h2 id="URL路径参数"><a href="#URL路径参数" class="headerlink" title="URL路径参数"></a>URL路径参数</h2><p>在路由匹配时，直接使用正则提取出对应参数，传递给视图函数</p>
<ul>
<li>路由匹配：<code>http://127.0.0.1:8000/weather/2018/beijing</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> weather</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;weather/&lt;int:year&gt;/&lt;str:city&gt;&#x27;</span>, weather)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weather</span>(<span class="params">request, city, year</span>):</span></span><br><span class="line">    data = <span class="string">&quot;&#123;&#125;年&#123;&#125;的平均气温是28℃&quot;</span>.<span class="built_in">format</span>(year, city)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(data)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者当django内置的<code>path</code>函数不能完成正则匹配的任务时，可以使用 <code>re_path</code> 函数，<strong>自定义正则表达式</strong> 实现参数获取</p>
</blockquote>
<ul>
<li>路由匹配： <code>http://127.0.0.1:8000/user/bookandmusic</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> userinfo</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^user/(?P&lt;username&gt;[a-zA-Z]\w&#123;7,11&#125;)$&#x27;</span>, userinfo)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userinfo</span>(<span class="params">request, username</span>):</span></span><br><span class="line">    user = &#123;<span class="string">&#x27;name&#x27;</span>: username, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;保密&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user)</span><br></pre></td></tr></table></figure>

<h2 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h2><blockquote>
<p>查询字符串不区分请求方式，即假使客户端进行<code>POST</code>方式的请求，依然可以通过<code>request.GET</code>获取请求中的查询字符串数据。</p>
</blockquote>
<ul>
<li>路由匹配：<code>http://127.0.0.1:8000/goods/?page=1&amp;num=10</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, goodsList)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodsList</span>(<span class="params">request</span>):</span></span><br><span class="line">    query_dict = request.GET <span class="comment"># 得到包含params参数的 query dict字典</span></span><br><span class="line"></span><br><span class="line">    page = query_dict.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    num = query_dict.get(<span class="string">&#x27;num&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;当前第&#123;&#125;页， 每页&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(page, num))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="请求体参数-表单数据"><a href="#请求体参数-表单数据" class="headerlink" title="请求体参数-表单数据"></a>请求体参数-表单数据</h2><ul>
<li>路由匹配： <code>http://127.0.0.1:8000/goods/</code>， 此时通过 <code>requset.POST</code> 获取请求体中的 <code>form-data</code>数据，注意：请求方式必须是 <code>POST</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, goodsList)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodsList</span>(<span class="params">request</span>):</span></span><br><span class="line">    query_dict = request.POST <span class="comment">#  得到包含form-data数据的django query dict字典</span></span><br><span class="line"></span><br><span class="line">    page = query_dict.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    num = query_dict.get(<span class="string">&#x27;num&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;当前第&#123;&#125;页， 每页&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(page, num))</span><br></pre></td></tr></table></figure>

<h2 id="请求体参数-非表单数据"><a href="#请求体参数-非表单数据" class="headerlink" title="请求体参数-非表单数据"></a>请求体参数-非表单数据</h2><ul>
<li>路由匹配： <code>http://127.0.0.1:8000/goods/</code>， 此时通过 <code>requset.body</code> 获取请求体中的 <code>json</code>数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [    </span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, goodsList)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodsList</span>(<span class="params">request</span>):</span>  	</span><br><span class="line">    json_str = request.body  <span class="comment"># 获取请求体中的json内容    </span></span><br><span class="line">    query_dict = json.loads(json_str)  <span class="comment"># 解析为python dict    </span></span><br><span class="line">    <span class="built_in">print</span>(query_dict)    </span><br><span class="line">    page = query_dict.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)    </span><br><span class="line">    num = query_dict.get(<span class="string">&#x27;num&#x27;</span>, <span class="number">10</span>)    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;当前第&#123;&#125;页， 每页&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(page, num))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Django <code>query dict</code> VS python <code>dict</code></p>
<ul>
<li>在 <code>HttpRequest</code> 对象中,属性 <code>GET</code> 和 <code>POST</code> 得到的都是 <code>django.http.QueryDict</code> 所创建的实例，这是一个 <code>django</code> 自定义的类似字典的类</li>
<li>与python字典不同，用来处理同一个键带多个值的情况。</li>
</ul>
</blockquote>
<ul>
<li><p><code>get()</code>：根据键获取值，如果一个键同时拥有多个值将获取最后一个值；如果键不存在则返回None值，可以设置默认值进行后续处理</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.get(<span class="string">&#x27;键&#x27;</span>,默认值)</span><br></pre></td></tr></table></figure></li>
<li><p><code>getlist()</code>：根据键获取值，值以列表返回，可以获取指定键的所有值；如果键不存在则返回空列表[]，可以设置默认值进行后续处理</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.getlist(<span class="string">&#x27;键&#x27;</span>,默认值)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="请求头数据"><a href="#请求头数据" class="headerlink" title="请求头数据"></a>请求头数据</h2><blockquote>
<ol>
<li><code>request.META.get(&quot;header key&quot;)</code> 用于获取header的信息</li>
<li>注意的是<code>header key</code>必须增加前缀<code>HTTP</code>，同时大写，例如你的<code>key</code>为<code>username</code>，那么应该写成：<code>request.META.get(&quot;HTTP_USERNAME&quot;)</code></li>
<li>另外就是当你的<code>header key</code>中带有<strong>中横线</strong>，那么自动会被转成<strong>下划线</strong>，例如<code>my-user</code>的写成： <code>request.META.get(&quot;HTTP_MY_USER&quot;)</code></li>
</ol>
</blockquote>
<ul>
<li>路由匹配： <code>http://127.0.0.1:8000/goods/</code>， 此时通过 <code>requset.META</code> 获取请求体中的 参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [    </span><br><span class="line">    path(<span class="string">&#x27;goods/&#x27;</span>, goodsList)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>视图实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodsList</span>(<span class="params">request</span>):</span>  	</span><br><span class="line">    head_dict = request.META    </span><br><span class="line">    page = head_dict.get(<span class="string">&#x27;HTTP_PAGE&#x27;</span>, <span class="number">1</span>)    </span><br><span class="line">    num = head_dict.get(<span class="string">&#x27;HTTP_NUM&#x27;</span>, <span class="number">10</span>)    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;当前第&#123;&#125;页， 每页&#123;&#125;条&#x27;</span>.<span class="built_in">format</span>(page, num))  </span><br></pre></td></tr></table></figure>

<h2 id="HttpRequest对象属性"><a href="#HttpRequest对象属性" class="headerlink" title="HttpRequest对象属性"></a><code>HttpRequest</code>对象属性</h2><ul>
<li><p><code>request.user</code>:获取当前用户对象</p>
</li>
<li><p><code>method</code>：一个字符串，表示请求使用的<code>HTTP</code>方法，常用值包括：<code>GET</code>、<code>POST</code>。</p>
</li>
<li><p><code>FILES</code>：一个类似于字典的对象，包含所有的上传文件</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>网络通信-长连接与短连接</title>
    <url>/2020/08/16/NAB75ADvd/</url>
    <content><![CDATA[<p>简单介绍长连接与短连接的优缺点。</p>
<span id="more"></span>

<h2 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E7%9F%AD%E8%BF%9E%E6%8E%A5.png" alt="短连接">  </p>
<ol>
<li>client 向 server 发起连接请求  </li>
<li>server 接到请求，双方建立连接  </li>
<li>client 向 server 发送消息  </li>
<li>server 回应 client  </li>
<li>一次读写完成，此时双方任何一个都可以发起 close 操作</li>
</ol>
<h2 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E9%95%BF%E8%BF%9E%E6%8E%A5.png" alt="长连接">  </p>
<ol>
<li>client 向 server 发起连接  </li>
<li>server 接到请求，双方建立连接  </li>
<li>client 向 server 发送消息  </li>
<li>server 回应 client  </li>
<li>一次读写完成，连接不关闭  </li>
<li>后续读写操作…  </li>
<li>长时间操作之后 client 发起关闭请求</li>
</ol>
<h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><ol>
<li><p> 长连接可以省去较多的 TCP 建立和关闭的操作，节约时间。但是如果用户量太大容易造成服务器负载过高最终导致服务不可用</p>
</li>
<li><p> 短连接对于服务器来说实现起来较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但是如果用户访问量很大, 往往可能在很短时间内需要创建大量的连接，造成服务器响应速度过慢</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p> 小的 WEB 网站的 http 服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源来让套接字保持存活。</p>
</li>
<li><p>对于中大型 WEB 网站一般都采用长连接，好处是响应用户请求的时间更短，用户体验更好，虽然更耗硬件资源一些，但这都不是事儿。另外，数据库的连接用长连接，如果用短连接频繁的通信会造成 socket 错误。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/2020/05/24/O7ePpPQhC/</url>
    <content><![CDATA[<p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。</p>
<p>它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p>
<p>HTTP 状态码被分为五大类， 目前我们使用的 HTTP 协议版本是 1.1， 支持以下的状态码。随着协议的发展，HTTP 规范中会定义更多的状态码。 </p>
<span id="more"></span>

<h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><blockquote>
<p>  表示临时响应并需要请求者继续执行操作的状态代码。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">100</td>
<td align="center">（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</td>
</tr>
</tbody></table>
<h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h2><blockquote>
<p>  表示成功处理了请求的状态代码。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">200</td>
<td align="left">（成功） 服务器已成功处理了请求，该操作是幂等的（Idempotent）。 通常，这表示服务器提供了请求的网页。</td>
</tr>
<tr>
<td align="center">201</td>
<td align="left">（已创建） 请求成功并且服务器创建了新的资源。</td>
</tr>
<tr>
<td align="center">202</td>
<td align="left">（已接受） 服务器已接受请求，但尚未处理。即请求已经进入后台排队（异步任务）</td>
</tr>
<tr>
<td align="center">203</td>
<td align="left">（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>
</tr>
<tr>
<td align="center">204</td>
<td align="left">（无内容） 服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td align="center">205</td>
<td align="left">（重置内容） 服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td align="center">206</td>
<td align="left">（部分内容） 服务器成功处理了部分 GET 请求。</td>
</tr>
</tbody></table>
<h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><blockquote>
<p>  表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">300</td>
<td align="left">（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>
</tr>
<tr>
<td align="center">301</td>
<td align="left">（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>
</tr>
<tr>
<td align="center">302</td>
<td align="left">（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td align="center">303</td>
<td align="left">（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>
</tr>
<tr>
<td align="center">304</td>
<td align="left">（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td>
</tr>
<tr>
<td align="center">305</td>
<td align="left">（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td>
</tr>
<tr>
<td align="center">307</td>
<td align="left">（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
</tbody></table>
<h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><blockquote>
<p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">400</td>
<td align="center">（错误请求） 服务器不理解请求的语法。</td>
</tr>
<tr>
<td align="center">401</td>
<td align="center">（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td>
</tr>
<tr>
<td align="center">403</td>
<td align="center">（禁止） 服务器拒绝请求。</td>
</tr>
<tr>
<td align="center">404</td>
<td align="center">（未找到） 服务器找不到请求的网页。</td>
</tr>
<tr>
<td align="center">405</td>
<td align="center">（方法禁用） 禁用请求中指定的方法。</td>
</tr>
<tr>
<td align="center">406</td>
<td align="center">（不接受） 无法使用请求的内容特性响应请求的网页。</td>
</tr>
<tr>
<td align="center">407</td>
<td align="center">（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>
</tr>
<tr>
<td align="center">408</td>
<td align="center">（请求超时） 服务器等候请求时发生超时。</td>
</tr>
<tr>
<td align="center">409</td>
<td align="center">（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td>
</tr>
<tr>
<td align="center">410</td>
<td align="center">（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</td>
</tr>
<tr>
<td align="center">411</td>
<td align="center">（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td>
</tr>
<tr>
<td align="center">412</td>
<td align="center">（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td>
</tr>
<tr>
<td align="center">413</td>
<td align="center">（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>
</tr>
<tr>
<td align="center">414</td>
<td align="center">（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td>
</tr>
<tr>
<td align="center">415</td>
<td align="center">（不支持的媒体类型） 请求的格式不受请求页面的支持。</td>
</tr>
<tr>
<td align="center">416</td>
<td align="center">（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>
</tr>
<tr>
<td align="center">417</td>
<td align="center">（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td>
</tr>
</tbody></table>
<h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><blockquote>
<p>  这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">500</td>
<td align="center">（服务器内部错误） 服务器遇到错误，无法完成请求。</td>
</tr>
<tr>
<td align="center">501</td>
<td align="center">（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td>
</tr>
<tr>
<td align="center">502</td>
<td align="center">（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td>
</tr>
<tr>
<td align="center">503</td>
<td align="center">（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>
</tr>
<tr>
<td align="center">504</td>
<td align="center">（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>
</tr>
<tr>
<td align="center">505</td>
<td align="center">（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-csrf</title>
    <url>/2022/01/04/OyOodCtSb/</url>
    <content><![CDATA[<p><em>CSRF</em>跨站点请求伪造(<em>Cross—Site Request Forgery</em>)，存在巨大的危害性，你可以这样来理解：</p>
<p>​        攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。如下：其中<em>Web A</em>为存在<em>CSRF</em>漏洞的网站，<em>Web B</em>为攻击者构建的恶意网站，<em>User C</em>为<em>Web A</em>网站的合法用户。</p>
<span id="more"></span>

<h1 id="CSRF攻击攻击原理"><a href="#CSRF攻击攻击原理" class="headerlink" title="CSRF攻击攻击原理"></a><em>CSRF</em>攻击攻击原理</h1><ol>
<li><p>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p>
</li>
<li><p>在用户信息通过验证后，网站A产生<em>Cookie</em>信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p>
</li>
<li><p>用户未退出网站A之前，在同一浏览器中，打开一个<em>TAB</em>页访问网站B；</p>
</li>
<li><p>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</p>
</li>
<li><p>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带<em>Cookie</em>信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的<em>Cookie</em>信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </p>
</li>
</ol>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2022/01/csrf%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="csrf示意图"></p>
<blockquote>
<p><strong>注意</strong>: 通过<code>HTML</code>标签的<code>src</code>属性发起的请求是不遵循同源策略的。</p>
</blockquote>
<p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</code> 可以使 <em>Bob</em> 把 1000000 的存款转到 <em>bob2</em> 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 <em>session</em>，并且该 <em>session</em> 的用户 <em>Bob</em> 已经成功登陆。</p>
<p>​    黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p>
<p>​    这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： <code>src=&quot;http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory&quot;</code>，并且通过广告等诱使 <em>Bob</em> 来访问他的网站。</p>
<p>当 <em>Bob</em> 访问该网站时，上述 <em>url</em> 就会从 <em>Bob</em> 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 <em>cookie</em> 一起发向银行服务器。</p>
<p>大多数情况下，该请求会失败，因为他要求 <em>Bob</em> 的认证信息。但是，如果 <em>Bob</em> 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 <em>session</em> 尚未过期，浏览器的 <em>cookie</em> 之中含有 <em>Bob</em> 的认证信息。这时，悲剧发生了，这个 <em>url</em> 请求就会得到响应，钱将从 <em>Bob</em> 的账号转移到 <em>Mallory</em> 的账号，而 <em>Bob</em> 当时毫不知情。</p>
<p>等以后 <em>Bob</em> 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 <em>Mallory</em> 则可以拿到钱后逍遥法外。 </p>
<h1 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a><em>CSRF</em>漏洞检测</h1><p>​        检测<em>CSRF</em>漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在<em>CSRF</em>漏洞。</p>
<p>​        随着对<em>CSRF</em>漏洞研究的不断深入，不断涌现出一些专门针对<em>CSRF</em>漏洞进行检测的工具，如<em>CSRFTester</em>，<em>CSRF Request Builder</em>等。</p>
<p>​        以<em>CSRFTester</em>工具为例，CSRF漏洞检测工具的测试原理如下：使用<em>CSRFTester</em>进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在<em>CSRFTester</em>中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在<em>CSRF</em>漏洞，当然此款工具也可以被用来进行<em>CSRF</em>攻击。</p>
<h1 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h1><p>​    目前防御 CSRF 攻击主要有三种策略：验证 <em>HTTP Referer</em> 字段；在请求中添加 <em>token</em> 并验证；在 <em>HTTP</em> 头中自定义属性并验证。</p>
<h2 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 <em>HTTP Referer</em> 字段</h2><p>​    根据 <em>HTTP</em> 协议，在 <em>HTTP</em> 头中有一个字段叫 <em>Referer</em>，它记录了该 <em>HTTP</em> 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>，用户必须先登陆 <code>bank.example</code>，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 <em>Referer</em> 值就会是转账按钮所在的页面的 <em>URL</em>，通常是以 <code>bank.example</code> 域名开头的地址。</p>
<p>而如果黑客要对银行网站实施 <em>CSRF</em> 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 <em>Referer</em> 是指向黑客自己的网站。因此，要防御 <em>CSRF</em> 攻击，银行网站只需要对于每一个转账请求验证其 <em>Referer</em> 值，如果是以 <code>bank.example</code> 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 <em>Referer</em> 是其他网站的话，则有可能是黑客的 <em>CSRF</em> 攻击，拒绝该请求。</p>
<p>​    这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 <em>CSRF</em> 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 <em>Referer</em> 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>
<p>​    然而，这种方法并非万无一失。<em>Referer</em> 的值是由浏览器提供的，虽然 <em>HTTP</em> 协议上有明确的要求，但是每个浏览器对于 <em>Referer</em> 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 <em>Referer</em> 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。</p>
<p>事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 <code>bank.example</code> 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 <em>Referer</em> 值设为以 <code>bank.example</code> 域名开头的地址，这样就可以通过验证，从而进行 <em>CSRF</em> 攻击。</p>
<p>即便是使用最新的浏览器，黑客无法篡改 <em>Referer</em> 值，这种方法仍然有问题。因为 <em>Referer</em> 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 <em>Referer</em> 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 <em>Referer</em>。当他们正常访问银行网站时，网站会因为请求没有 <em>Referer</em> 值而认为是 <em>CSRF</em> 攻击，拒绝合法用户的访问。</p>
<h2 id="在请求中添加-token-参数并验证"><a href="#在请求中添加-token-参数并验证" class="headerlink" title="在请求中添加 token 参数并验证"></a>在请求中添加 <em>token</em> 参数并验证</h2><p>​     <em>CSRF</em> 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 <em>cookie</em> 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 <em>cookie</em> 来通过安全验证。</p>
<blockquote>
<p>*<em>要抵御 <em>CSRF</em>，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 <em>cookie</em> 之中。可以在 <em>HTTP</em> 请求中以参数的形式加入一个随机产生的 <em>token</em>，并在服务器端建立一个拦截器来验证这个 <em>token</em>，如果请求中没有 <em>token</em> 或者 <em>token</em> 内容不正确，则认为可能是 <em>CSRF</em> 攻击而拒绝该请求。</em>*</p>
</blockquote>
<p>​    这种方法要比检查 <em>Referer</em> 要安全一些，<em>token</em> 可以在用户登陆后产生并放于 <em>session</em> 之中，然后在每次请求时把 <em>token</em> 从 <em>session</em> 中拿出，与请求中的 <em>token</em> 进行比对，但这种方法的难点在于如何把 <em>token</em> 以参数的形式加入请求。</p>
<p>对于 <em>GET</em> 请求，<em>token</em> 将附在请求地址之后，这样 <em>URL</em> 就变成 <code>http://url?csrftoken=tokenvalue</code>。</p>
<p> 而对于 POST 请求来说，要在 <em>form</em> 的最后加上 <code>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;tokenvalue&quot;/&gt;</code>，这样就把 <em>token</em> 以参数的形式加入请求了。</p>
<p>但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 <em>token</em> 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 <em>javascript</em> 遍历整个 <em>dom</em> 树，对于 <em>dom</em> 中所有的 <em>a</em> 和 <em>form</em> 标签后加入 <em>token</em>。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 <em>html</em> 代码，这种方法就没有作用，还需要程序员在编码时手动添加 <em>token</em>。</p>
<p>​     该方法还有一个缺点是难以保证 <em>token</em> 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 <em>token</em>，黑客可以在自己的网站上得到这个 <em>token</em>，并马上就可以发动 <em>CSRF</em> 攻击。</p>
<p>为了避免这一点，系统可以在添加 <em>token</em> 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 <em>token</em>，如果是通向外网则不加。不过，即使这个 <em>csrftoken</em> 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 <em>Referer</em> 来得到这个 <em>token</em> 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 <em>Referer</em> 功能的原因。</p>
<h2 id="在-HTTP-头中自定义属性并验证"><a href="#在-HTTP-头中自定义属性并验证" class="headerlink" title="在 HTTP 头中自定义属性并验证"></a>在 <em>HTTP</em> 头中自定义属性并验证</h2><p>​        这种方法也是使用 <em>token</em> 并进行验证，和上一种方法不同的是，这里并不是把 <em>token</em> 以参数的形式置于 <em>HTTP</em> 请求之中，而是把它放到 <em>HTTP</em> 头中自定义的属性里。通过 <em>XMLHttpRequest</em> 这个类，可以一次性给所有该类请求加上 <em>csrftoken</em> 这个 <em>HTTP</em> 头属性，并把 <em>token</em> 值放入其中。这样解决了上种方法在请求中加入 <em>token</em> 的不便，同时，通过 <em>XMLHttpRequest</em> 请求的地址不会被记录到浏览器的地址栏，也不用担心 <em>token</em> 会透过 <em>Referer</em> 泄露到其他网站中去。</p>
<p>​        然而这种方法的局限性非常大。<em>XMLHttpRequest</em> 请求通常用于 <em>Ajax</em> 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 <em>CSRF</em> 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 <em>XMLHttpRequest</em> 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>
]]></content>
  </entry>
  <entry>
    <title>Git仓库密钥管理</title>
    <url>/2019/03/31/PPHtakYw7/</url>
    <content><![CDATA[<p>git使用https协议，每次pull, push都要输入密码，相当的麻烦。这个时候就可以使用ssh密钥进行身份认证，这样可以省去每次都输密码。</p>
<span id="more"></span>

<h2 id="远程仓库密钥配置"><a href="#远程仓库密钥配置" class="headerlink" title="远程仓库密钥配置"></a>远程仓库密钥配置</h2><h3 id="GitHub密钥配置"><a href="#GitHub密钥配置" class="headerlink" title="GitHub密钥配置"></a>GitHub密钥配置</h3><h4 id="设置身份信息"><a href="#设置身份信息" class="headerlink" title="设置身份信息"></a>设置身份信息</h4><p>git设置身份信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure>

<h4 id="删除-ssh文件夹"><a href="#删除-ssh文件夹" class="headerlink" title="删除.ssh文件夹"></a>删除.ssh文件夹</h4><p>（直接搜索该文件夹）下的<code>known_hosts</code>(手动删除即可，不需要git）</p>
<h4 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h4><p>终端输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot;（请填你设置的邮箱地址）</span><br></pre></td></tr></table></figure>

<p>接着出现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>请直接按下回车</p>
<p>然后系统会自动在<code>.ssh</code>文件夹下生成两个文件，<code>id_rsa</code>和<code>id_rsa.pub</code>，用记事本打开<code>id_rsa.pub</code></p>
<p>将全部的内容复制</p>
<h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h4><p>打开<a href="https://github.com/">https://github.com/</a>，登陆你的账户，进入设置</p>
<p>进入ssh设置</p>
<p>点击 <code>New SSH key</code></p>
<p>在key中将刚刚复制的粘贴进去</p>
<p>最后点击<code>Add SSH key</code></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>你将会看到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (207.97.227.239)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>

<p>输入 yes</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hi humingx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>如果看到Hi后面是你的用户名，就说明成功了。</p>
<h3 id="Gitee仓库密钥配置"><a href="#Gitee仓库密钥配置" class="headerlink" title="Gitee仓库密钥配置"></a>Gitee仓库密钥配置</h3><blockquote>
<p>  Gitee仓库密钥配置和GitHub密钥配置步骤相似</p>
</blockquote>
<h2 id="错误解析"><a href="#错误解析" class="headerlink" title="错误解析"></a>错误解析</h2><h3 id="密钥未配置"><a href="#密钥未配置" class="headerlink" title="密钥未配置"></a>密钥未配置</h3><ul>
<li>  错误原因：</li>
</ul>
<p>当使用git方式下载时，如果没有配置过<code>ssh key</code>，则会有如下错误提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git@github.com:Permissiondenied(publickey) </span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository</span><br></pre></td></tr></table></figure>

<ul>
<li>  解决方案：</li>
</ul>
<p>正常配置<code>ssh</code>密钥即可。</p>
<h3 id="密钥不匹配"><a href="#密钥不匹配" class="headerlink" title="密钥不匹配"></a>密钥不匹配</h3><blockquote>
<p>重装系统之后,git push的时候会出现问题:<code>The authenticity of host &#39;github.com (13.229.188.59)&#39; can&#39;t be established.</code></p>
</blockquote>
<ul>
<li>  错误原因：</li>
</ul>
<p>本地仓库和远程的SSH密钥不匹配</p>
<ul>
<li>  解决办法：</li>
</ul>
<p>重新配置仓库密钥即可</p>
<h3 id="免密登录失败"><a href="#免密登录失败" class="headerlink" title="免密登录失败"></a>免密登录失败</h3><blockquote>
<p>  在本地电脑上已经配置过 密钥，但是每次上传、下载仍然需要输入用户名和密码</p>
</blockquote>
<ul>
<li>  错误原因</li>
</ul>
<p>首先来明确一下需要每次输入用户名和密码的场景：</p>
<p>首先，必须是使用<code>https</code>方式下载的代码在操作时才可能需要输入用户名密码。</p>
<p>第二，在满足第一点的基础上，未配置<code>credential.helper</code>。可以用如下命令检查<code>credential.helper</code>的当前配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l | grep credential.helper</span><br></pre></td></tr></table></figure>


<p>如果未配置的话结果应该为空。</p>
<ul>
<li>  解决方案：</li>
</ul>
<p>方案一, 既然是因为本地仓库和远程仓库关联时使用 <code>ssh</code>方式，才会没有使用密钥验证身份，而是重复输入密码验证。因此，可以删除<code>https</code>方式的本地仓库的远程连接，然后添加<code>ssh</code>方式的远程链接</p>
<p>方案二, 既然是因为未配置<code>credential.helper</code>。简单粗暴的办法就是直接配置<code>credential.helper</code>的值为<code>manager</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config  --global credential.helper manager</span><br></pre></td></tr></table></figure>

<p>再次尝试<code>pull</code>代码的时候会弹出窗口要求输入用户名密码（只需要输入这一次就ok了）。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>简单WEB服务器</title>
    <url>/2020/08/16/QsYVFOoY0/</url>
    <content><![CDATA[<p>本篇文章介绍如何实现一个简单 的Web Server 以及对应的问题解决方案。</p>
<span id="more"></span>

<h2 id="实现固定页面的Web-Server"><a href="#实现固定页面的Web-Server" class="headerlink" title="实现固定页面的Web Server"></a>实现固定页面的Web Server</h2><ol>
<li><p>使用socket创建一个TCP Server</p>
</li>
<li><p>接受来自浏览器的TCP链接，并接收HTTP请求</p>
</li>
<li><p>返回固定响应数据给浏览器</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">    <span class="comment"># 接收请求</span></span><br><span class="line">    recv_msg = new_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(recv_msg)</span><br><span class="line">    <span class="comment"># 响应数据</span></span><br><span class="line">    response_msg = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">    response_msg += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    response_msg += <span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="comment"># 返回响应数据（二进制数据）</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    new_socket.send(response_msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 关闭该次socket连接</span></span><br><span class="line">    new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 处理每个客户端的请求</span></span><br><span class="line">        handle_request(new_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  ==缺陷==</p>
</blockquote>
<p>这种简单的web server是阻塞的，同时只能处理一个请求。 </p>
<h2 id="解决服务器端口占用问题"><a href="#解决服务器端口占用问题" class="headerlink" title="解决服务器端口占用问题"></a>解决服务器端口占用问题</h2><p>问题描述：当浏览器访问服务器时，服务器收到请求，马上返回响应数据，并且调用了<code>new_socket.close()</code>。此时，马上重启服务器的话，可能会提示端口被占用。</p>
<p>这是因为TCP的四次挥手过程中，谁先发送<code>FIN</code>包，则谁会在发送最后一个<code>ACK</code>包后进入<code>TIME_WAIT</code>状态，此状态会等待<code>2MSL</code>的时间（大概2-4分钟）。在这个阶段，服务器绑定的端口资源是被占用的。等这个阶段过了，端口会进入<code>CLOSED</code>状态，则可以被再次利用。</p>
<p>如何解决服务器重启端口被占用的问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置重用地址</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 处理每个客户端的请求</span></span><br><span class="line">        handle_request(new_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在创建<code>socket</code>实例之后，设置可以重用地址，就可以解决报错问题。</p>
</blockquote>
<h2 id="TCP协议3次握手、4次挥手"><a href="#TCP协议3次握手、4次挥手" class="headerlink" title="TCP协议3次握手、4次挥手"></a>TCP协议3次握手、4次挥手</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/fHQGzW.jpg" alt="fHQGzW"></p>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p>
<p><strong>三次握手流程和目的都相对简单：</strong></p>
<ol>
<li><p>客户端向服务器发送<code>SYN flag</code>的包，并携带<code>seq</code>为<code>x</code>。</p>
</li>
<li><p>服务器收到<code>SYN</code>包后，开始准备对应的资源，准备好后，发送<code>SYN+ACK</code>包，这实际上是服务器回应客户端的<code>ACK</code>包，合并了服务器让客户端准备资源的<code>SYN</code>包。所以携带了对应<code>SYN</code>的<code>seq y</code>，以及<code>ACK=x+1</code>。</p>
</li>
<li><p>客户端收到服务器发来的<code>SYN</code>包，则回复<code>ACK</code>包，<code>ack=y+1</code>。</p>
</li>
</ol>
<p>这样3次握手就建立好了，客户端和服务器都进入<code>ESTABLISHED</code>状态，表示资源都准备完毕。所以TCP的三次握手实际上是客户端与服务器之间互相要求准备资源以及回复资源已准备好的过程。</p>
<p>理论上应该是4次握手，但为了增加性能减小时间开销，中间的两次数据传输（服务器发送的<code>SYN</code>和<code>ACK</code>）合并在一起了。所以变成了3次握手。</p>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="四次挥手"></p>
<p> <strong>四次挥手相对比较复杂：</strong></p>
<ol>
<li><p>假设客户端在完成数据传输后，首先开始发送<code>FIN</code>包（也就是我们的客户端程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），则表示客户端已经没有需要发送给服务器的数据。由于<code>SOCKET</code>是全双工的，所以客户端发送<code>FIN</code>只是表示客户端以后都不在发送数据，但此时还可以接收数据。</p>
</li>
<li><p>客户端发送出<code>FIN</code>包后，就会进入<code>FIN WAIT-1</code>状态，该状态一般很难观测到，因为该状态只维持到服务器响应<code>ACK</code>包，一般情况下都是瞬间就返回了（注意这里和3次握手不同，这里的<code>ACK</code>包不能与服务器发送的FIN包合并，因为服务器可能还有数据要继续发送给客户端，所以服务器可能要等到数据传输完毕才会向客户端发送<code>FIN</code>包，这就是为什么是四次挥手）</p>
</li>
<li><p>服务器收到客户端发来的<code>FIN</code>包，则马上发送回应的ACK包，此包没有意外的话，会瞬间到达客户端。</p>
</li>
<li><p>客户端收到<code>ACK</code>包后，结束<code>FIN WAIT-1</code>状态，进入<code>FIN WAIT-2</code>状态，该状态的目的是等待服务器发送<code>FIN</code>包。</p>
</li>
<li><p>服务器完成了最后的数据发送，则向客户端发送<code>FIN</code>包（也就是服务器程序调用<code>socket.close()</code>的时候，系统底层会自动发送<code>FIN</code>包），表示服务器以后也没有数据要发送了，开始断开服务器的发送通道。</p>
</li>
<li><p>服务器在发送出<code>FIN</code>后，会进入<code>LAST-ACK</code>状态（例如等待4s）。这个状态是为了等待客户端恢复确认的<code>ACK</code>包，因为服务器发送出去的<code>FIN</code>包，他无法确认客户端是否收到，如果超出<code>waittime</code>还未收到<code>ACK</code>包，则重新发送FIN包。</p>
</li>
<li><p>客户端如果正确收到了服务器发送的<code>FIN</code>包，理论上应该释放资源，并发送<code>ACK</code>包。但是如果客户端发出的<code>ACK</code>包由于某些原因，服务器并未收到，那么服务器在几秒后会重新发送<code>FIN</code>包，但客户端已经把资源释放掉了，则就会出现问题。怎么解决这个问题呢？解决方案是，客户端收到服务器发送的<code>FIN</code>包，并不马上释放资源（例如绑定的端口等），而是先回复<code>ACK</code>包，并进入<code>TIME-WAIT</code>状态，这个状态要持续<code>2MSL</code>（2-3分钟）。如果在<code>2MSL</code>时间段中，服务器都没有重新发送FIN包，则表示服务器已经收到了自己发出的<code>ACK</code>包，这是客户端才放心的释放资源。</p>
</li>
<li><p>最终客户端在等待<code>2MSL</code>后，进入<code>CLOSED</code>状态。服务器在确认收到最后一个<code>ACK</code>包后直接进入<code>CLOSED</code>状态。</p>
</li>
</ol>
<p><strong>资源占用的解释：</strong></p>
<p>我们知道，客户端是使用随机端口来发起<code>TCP</code>连接的，所以客户端首先发送<code>FIN</code>包的话，最后的<code>2MSL</code>是由客户端来等待，即使2-3分钟资源未被释放，也不会影响客户端另外发起新的请求（因为可用的随机端口很多，不会出现冲突）。</p>
<p>但是如果由服务器来首先发起<code>FIN</code>，则最后的<code>2MSL</code>要由服务器来等待，则在2-3分钟内，服务器绑定的端口并未被释放，所以如果此时重启服务器，则会出现资源未释放、端口被占用的情况。</p>
<p><strong>结论：尽量让客户端来发起断开连接的请求。如果要使服务器断开请求还不会出现占用端口的情况，则可以参考前面第二节的方法，为服务器SOCKET设置资源重用的属性。</strong></p>
<h2 id="改善Web-Server"><a href="#改善Web-Server" class="headerlink" title="改善Web Server"></a>改善Web Server</h2><p>前面我们实现的简单Web Server不管客户端请求的<code>URI</code>是什么，我们都只能返回固定的<code>&quot;Hello</code>“字符串。我们对其进行改善，让其根据接收到的请求，来返回不同的页面数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">    <span class="comment"># 接收请求</span></span><br><span class="line">    recv_msg = <span class="string">&quot;&quot;</span></span><br><span class="line">    recv_msg = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> recv_msg == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;recv null&quot;</span>)</span><br><span class="line">        new_socket.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求中解析出URI</span></span><br><span class="line">    recv_lines = recv_msg.splitlines()</span><br><span class="line">    <span class="built_in">print</span>(recv_lines)</span><br><span class="line">    <span class="comment"># 使用正则表达式提取出URI</span></span><br><span class="line">    ret = re.match(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="comment"># 获取URI字符串</span></span><br><span class="line">        file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 如果URI是/，则默认返回index.html的内容</span></span><br><span class="line">        <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 根据请求的URI，读取相应的文件</span></span><br><span class="line">        fp = <span class="built_in">open</span>(<span class="string">&quot;.&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 找不到文件，响应404</span></span><br><span class="line">        response_msg = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">        response_msg += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        response_msg += <span class="string">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span></span><br><span class="line">        new_socket.send(response_msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = fp.read()</span><br><span class="line">        fp.close()</span><br><span class="line">        <span class="comment"># 响应正确 200 OK</span></span><br><span class="line">        response_msg = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">        response_msg += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回响应头</span></span><br><span class="line">        new_socket.send(response_msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="comment"># 返回响应体</span></span><br><span class="line">        new_socket.send(html_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭该次socket连接</span></span><br><span class="line">    new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># # 设置重用地址</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 处理每个客户端的请求</span></span><br><span class="line">        handle_request(new_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上代码重点在于解析出<code>GET /index.html HTTP/1.1</code>中的<code>/index.html</code>部分，知道服务器要请求什么内容，然后按需找到对应的文件，已二进制方式读取文件内容并返回给客户端即可。</p>
<p>如果客户端没有指定访问的内容，则默认返回<code>index.html</code>页面。</p>
<p>注意异常的处理。</p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>对象持久化</title>
    <url>/2021/08/08/R16eLMEHE/</url>
    <content><![CDATA[<blockquote>
<p>持久化就是 程序数据在 <strong>持久状态</strong> 和 <strong>瞬时状态</strong> 间转换的机制</p>
</blockquote>
<p>通俗地讲，就是 <strong>瞬时数据</strong>(比如内存中的数据，是不能永久保存的)<strong>持久化为持久数据</strong></p>
<span id="more"></span>

<p>比如常见的持久化方式就是将这些内存数据写到磁盘文件内，这样就可以让数据存活的更长</p>
<p>存入数据库也是持久化的一种方式</p>
<p>在python中实现数据的持久化可以采用以下方式：</p>
<ul>
<li><code>pickle</code>: python自带的模块</li>
<li><code>cPickle</code>: c语言版本的Pickle，比pickle快很多</li>
<li><code>json</code>: Json是一种文件格式，也可以用来对 对象持久化</li>
<li><code>ujson</code>: 第三方模块，和json类似，比其他模块快很多，尤其是数据比较大的时候</li>
</ul>
<blockquote>
<p>  pickle：持久化后的数据格式是bytes字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: stu = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: s = pickle.dumps(stu)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: s</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">b&#x27;\x80\x03&#125;q\x00(X\x04\x00\x00\x00nameq\x01X\x06\x00\x00\x00\xe5\xb0\x8f\xe7\xb1\xb3q\x02X\x03\x00\x00\x00ageq\x03K\x17X\x06\x00\x00\x00genderq\x04\x88u.&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: pickle.loads(s)</span><br><span class="line">Out[<span class="number">14</span>]: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: pickle.loads(s)</span><br><span class="line">Out[<span class="number">14</span>]: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stu.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ...:     pickle.dump(stu, f)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stu.json&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ...:     data = pickle.load(f)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: data</span><br><span class="line">Out[<span class="number">17</span>]: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125; </span><br></pre></td></tr></table></figure>




<blockquote>
<p>cPickle：持久化后的数据格式是bytes字符串</p>
</blockquote>
<p>在python2.x中,<code>cPickle</code>是附带的标准库;在python3.x上，<code>cPickle</code>已经从<code>cPickle</code>变成了<code>cPickle_pickle</code>。因此，在python3.x中，如果要使用<code>cPickle</code>，可以执行以下操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: stu = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="keyword">import</span> _pickle <span class="keyword">as</span> cPickle</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: s = cPickle.dumps(stu)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: s</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">b&#x27;\x80\x03&#125;q\x00(X\x04\x00\x00\x00nameq\x01X\x06\x00\x00\x00\xe5\xb0\x8f\xe7\xb1\xb3q\x02X\x03\x00\x00\x00ageq\x03K\x17X\x06\x00\x00\x00genderq\x04\x88u.&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: cPickle.loads(s)</span><br><span class="line">Out[<span class="number">22</span>]: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stu.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ...:     cPickle.dump(stu, f)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stu.json&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ...:     data = cPickle.load(f)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: data</span><br><span class="line">Out[<span class="number">26</span>]: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  Json: 持久化后的数据格式是str字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: stu = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: s = json.dumps(stu)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: s</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">&#x27;&#123;&quot;name&quot;:&quot;\\u5c0f\\u7c73&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [22]: json.loads(s)</span></span><br><span class="line"><span class="string">Out[22]: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>小米<span class="string">&#x27;, &#x27;</span>age<span class="string">&#x27;: 23, &#x27;</span>gende<span class="string">r&#x27;: True&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [23]: with open(&#x27;</span>stu.json<span class="string">&#x27;, &#x27;</span>w<span class="string">&#x27;) as f:</span></span><br><span class="line"><span class="string">    ...:     json.dump(stu, f)</span></span><br><span class="line"><span class="string">    ...:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [24]: with open(&#x27;</span>stu.json<span class="string">&#x27;, &#x27;</span><span class="string">r&#x27;) as f:</span></span><br><span class="line"><span class="string">    ...:     data = json.load(f)</span></span><br><span class="line"><span class="string">    ...:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [26]: data</span></span><br><span class="line"><span class="string">Out[26]: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>小米<span class="string">&#x27;, &#x27;</span>age<span class="string">&#x27;: 23, &#x27;</span>gende<span class="string">r&#x27;: True&#125;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>  uJson：持久化后的数据格式是str字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: stu = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="keyword">import</span> ujson</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: s = ujson.dumps(stu)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: s</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">&#x27;&#123;&quot;name&quot;:&quot;\\u5c0f\\u7c73&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [22]: ujson.loads(s)</span></span><br><span class="line"><span class="string">Out[22]: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>小米<span class="string">&#x27;, &#x27;</span>age<span class="string">&#x27;: 23, &#x27;</span>gende<span class="string">r&#x27;: True&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [23]: with open(&#x27;</span>stu.json<span class="string">&#x27;, &#x27;</span>w<span class="string">&#x27;) as f:</span></span><br><span class="line"><span class="string">    ...:     ujson.dump(stu, f)</span></span><br><span class="line"><span class="string">    ...:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [24]: with open(&#x27;</span>stu.json<span class="string">&#x27;, &#x27;</span><span class="string">r&#x27;) as f:</span></span><br><span class="line"><span class="string">    ...:     data = ujson.load(f)</span></span><br><span class="line"><span class="string">    ...:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [26]: data</span></span><br><span class="line"><span class="string">Out[26]: &#123;&#x27;</span>name<span class="string">&#x27;: &#x27;</span>小米<span class="string">&#x27;, &#x27;</span>age<span class="string">&#x27;: 23, &#x27;</span>gende<span class="string">r&#x27;: True&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>time与timeit 模块</title>
    <url>/2019/05/03/R8lT7eyY5/</url>
    <content><![CDATA[<p>本文主要针对python中的时间对象进行介绍。</p>
<span id="more"></span>

<h3 id="时间表现形式"><a href="#时间表现形式" class="headerlink" title="时间表现形式"></a>时间表现形式</h3><ul>
<li>timestamp：时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量</li>
<li>struct_time： 时间元组，共有九个元素组</li>
<li>format time： 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式<h3 id="时间格式转换图"><a href="#时间格式转换图" class="headerlink" title="时间格式转换图"></a>时间格式转换图</h3><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190503200750-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%9B%BE%20.jpg" alt="20190503200750-时间格式转换图"></li>
</ul>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol>
<li><p>获取当前时间戳</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: time.time()</span><br><span class="line">Out[<span class="number">26</span>]: <span class="number">1556888776.3707364</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: time.mktime(time.localtime()) <span class="comment"># 元组-&gt;时间戳</span></span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">1556888742.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>当前时间的 struct_time 形式</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> time                                                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: time.localtime()                 </span><br><span class="line">Out[<span class="number">2</span>]: time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">20</span>, tm_min=<span class="number">48</span>, tm_sec=<span class="number">32</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">123</span>, tm_isdst=<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: time.localtime(time.time()) <span class="comment"># 时间戳-&gt;元组     </span></span><br><span class="line">Out[<span class="number">29</span>]: time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">21</span>, tm_min=<span class="number">12</span>, tm_sec=<span class="number">6</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">123</span>, tm_isdst=<span class="number">0</span>)  </span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: time.gmtime()     </span><br><span class="line">Out[<span class="number">22</span>]: time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">13</span>, tm_min=<span class="number">3</span>, tm_sec=<span class="number">21</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">123</span>, tm_isdst=<span class="number">0</span>)   </span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: time.gmtime(time.time()) <span class="comment"># 时间戳-&gt;元组     </span></span><br><span class="line">Out[<span class="number">30</span>]: time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">13</span>, tm_min=<span class="number">12</span>, tm_sec=<span class="number">21</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">123</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: time.strptime(a, <span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>) <span class="comment"># 字符串-&gt;元组</span></span><br><span class="line">Out[<span class="number">34</span>]: time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">3</span>, tm_hour=<span class="number">21</span>, tm_min=<span class="number">9</span>, tm_sec=<span class="number">25</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">123</span>, tm_isdst=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>当前时间的字符串形式</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: time.ctime()</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;Fri May  3 20:49:30 2019&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: time.ctime(time.time()) <span class="comment"># 时间戳-&gt;字符串</span></span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">&#x27;Fri May  3 21:08:20 2019&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: time.asctime()</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;Fri May  3 20:49:45 2019&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: time.asctime(time.localtime()) <span class="comment"># 元组-&gt;默认字符串</span></span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">&#x27;Fri May  3 21:09:25 2019&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&quot;%S&#x27;</span>, time.localtime()) <span class="comment"># 元组-&gt;格式化字符串</span></span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;2019-05-03 20:52&quot;47&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime())</span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">&#x27;Fri May 03 21:15:50 2019&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="耗时统计"><a href="#耗时统计" class="headerlink" title="耗时统计"></a>耗时统计</h3><ul>
<li><p><code>time.perf_counter()</code> </p>
<p>  调用一次 <code>perf_counter()</code>，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒</p>
<p>  当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒</p>
<p>  两个函数取差，即实现从时间点B1到B2的计时功能</p>
</li>
<li><p><code>time.process_time()</code></p>
<p>返回当前进程执行 CPU 的时间总和，不包含睡眠时间。由于返回值的基准点是未定义的，只有连续调用的结果之间的差才是有效的</p>
</li>
<li><p><code>time.time()</code></p>
<p>连续两次生成的时间戳之差即为耗时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">start1 = time.perf_counter()</span><br><span class="line">start2 = time.time()</span><br><span class="line">start3 = time.process_time()</span><br><span class="line">test()</span><br><span class="line">finish1 = time.perf_counter()</span><br><span class="line">finish2 = time.time()</span><br><span class="line">finish3 = time.process_time()</span><br><span class="line">t1 = finish1 - start1</span><br><span class="line">t2 = finish2 - start2</span><br><span class="line">t3 = finish3 - start3</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.9998265000000002 # perf_counter</span><br><span class="line">2.000767946243286  # time</span><br><span class="line">0.0                # process_time</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python 实现超时退出</title>
    <url>/2021/10/06/RiEpmnAMu/</url>
    <content><![CDATA[<p>最近在项目中调用第三方接口时候，经常会出现请求超时的情况，或者参数的问题导致调用异代码异常。针对超时异常，查询了python 相关文档，没有并发现完善的包来根据用户自定义<br>的时间来抛出超时异常的模块。所以自己干脆自己来实现一个自定义的超时异常。</p>
<span id="more"></span>

<h2 id="基于-signal模块实现"><a href="#基于-signal模块实现" class="headerlink" title="基于 signal模块实现"></a>基于 signal模块实现</h2><p>signal包负责在Python程序内部处理信号，典型的操作包括预设信号处理函数，暂 停并等待信号，以及定时发出SIGALRM等。要注意，signal包主要是针对UNIX平台(比如Linux, MAC OS)，而Windows内核中由于对信号机制的支持不充分，所以在Windows上的Python不能发挥信号系统的功能。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_out</span>(<span class="params">interval, callback=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">signum, frame</span>):</span></span><br><span class="line">            <span class="keyword">raise</span> TimeoutError(<span class="string">f&quot;run <span class="subst">&#123;func.__name__&#125;</span> timeout&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                signal.signal(signal.SIGALRM, handler)</span><br><span class="line">                signal.alarm(interval)  <span class="comment"># interval秒后向进程发送SIGALRM信号</span></span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">                signal.alarm(<span class="number">0</span>)  <span class="comment"># 函数在规定时间执行完后关闭alarm闹钟</span></span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            <span class="keyword">except</span> TimeoutError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> callback(e) <span class="keyword">if</span> callback <span class="keyword">else</span> e</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_callback</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    task1()</span><br><span class="line">    task2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task1 start</span><br><span class="line">run task1 timeout</span><br><span class="line">task2 start</span><br><span class="line">task2 end</span><br></pre></td></tr></table></figure>



<h2 id="基于子线程阻塞实现"><a href="#基于子线程阻塞实现" class="headerlink" title="基于子线程阻塞实现"></a>基于子线程阻塞实现</h2><p>原理：将要调用的功能函数放入子线程，通过设定主线程的阻塞等待时间，超时则主线程并不会等待子线程的执行。主线程退出，子线程就不存在了。<br>核心就是在主线程中添加 join()方法，用于等待线程结束。join()的作用是，在子线程完成运行之前，这个子线程的父线程将会被一直阻塞.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.result = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self._target:</span><br><span class="line">                self.result = self._target(*self._args, **self._kwargs)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">del</span> self._target, self._args, self._kwargs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_out</span>(<span class="params">interval, callback=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            t = MyThread(target=func, args=args, kwargs=kwargs)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)  <span class="comment"># 设置主线程为守护线程，一旦主线程结束，子线程立刻结束</span></span><br><span class="line">            t.start()</span><br><span class="line">            t.join(interval)  <span class="comment"># 主线程阻塞等待interval秒</span></span><br><span class="line">            <span class="keyword">if</span> t.is_alive():</span><br><span class="line">                <span class="keyword">return</span> threading.Timer(<span class="number">0</span>, callback,</span><br><span class="line">                                       args=(<span class="string">f&quot;run <span class="subst">&#123;func.__name__&#125;</span> timeout&quot;</span>,)).start() <span class="keyword">if</span> callback <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 立即执行回调函数</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> t.result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_callback</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task1()</span><br><span class="line">    task2()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task1 start</span><br><span class="line">run task1 timeout</span><br><span class="line">task2 start</span><br><span class="line">task2 end</span><br></pre></td></tr></table></figure>

<h2 id="基于协程gevent实现"><a href="#基于协程gevent实现" class="headerlink" title="基于协程gevent实现"></a>基于协程gevent实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_out</span>(<span class="params">interval, callback=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="comment">########## 该部分必选在requests之前导入</span></span><br><span class="line">            <span class="keyword">import</span> gevent</span><br><span class="line">            <span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">            monkey.patch_all()</span><br><span class="line">            <span class="comment">##########</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                gevent.with_timeout(interval, func, *args, **kwargs)</span><br><span class="line">            <span class="keyword">except</span> gevent.timeout.Timeout <span class="keyword">as</span> e:</span><br><span class="line">                callback(<span class="string">f&quot;<span class="subst">&#123;func.__name__&#125;</span> 执行时间大于 <span class="subst">&#123;e&#125;</span>&quot;</span>) <span class="keyword">if</span> callback <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout_callback</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 start&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task1()</span><br><span class="line">    task2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task1 start</span><br><span class="line">task1 执行时间大于 <span class="number">2</span> seconds</span><br><span class="line">task2 start</span><br><span class="line">task2 end</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-数据分页</title>
    <url>/2020/03/16/SD-qOrP-h/</url>
    <content><![CDATA[<blockquote>
<p>当需要展示的数据过多时，就需要将全部数据分批显示，这就需要用到 <strong>分页</strong> 功能</p>
</blockquote>
<h2 id="Django内置分页"><a href="#Django内置分页" class="headerlink" title="Django内置分页"></a>Django内置分页</h2><p>在DRF提供的API视图中，并不支持 <code>pagination_class</code> 分页属性，因此，需要分页，只能使用django内置的分页器 <code>Paginator</code> 。</p>
<p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>
<h3 id="导入分页模块"><a href="#导入分页模块" class="headerlink" title="导入分页模块"></a>导入分页模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br></pre></td></tr></table></figure>

<h3 id="获取queryset对象"><a href="#获取queryset对象" class="headerlink" title="获取queryset对象"></a>获取queryset对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods_list = Goods.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实例化分页类对象"><a href="#实例化分页类对象" class="headerlink" title="实例化分页类对象"></a>实例化分页类对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paginator = Paginator(goods_list, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Paginator类对象的属性"><a href="#Paginator类对象的属性" class="headerlink" title="Paginator类对象的属性"></a>Paginator类对象的属性</h4><table>
<thead>
<tr>
<th>序号</th>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>num_pages</td>
<td>返回分页之后的总页数</td>
</tr>
<tr>
<td>2</td>
<td>page_range</td>
<td>返回分页后的页码列表</td>
</tr>
<tr>
<td>3</td>
<td>count</td>
<td>需要分页的总记录数</td>
</tr>
</tbody></table>
<h4 id="Paginator类对象的方法"><a href="#Paginator类对象的方法" class="headerlink" title="Paginator类对象的方法"></a>Paginator类对象的方法</h4><table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>get_page(self, number)</td>
<td>返回第number页的page类实例对象</td>
</tr>
</tbody></table>
<h4 id="Page实例对象的属性"><a href="#Page实例对象的属性" class="headerlink" title="Page实例对象的属性"></a>Page实例对象的属性</h4><table>
<thead>
<tr>
<th>序号</th>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>number</td>
<td>返回当前页的页码</td>
</tr>
<tr>
<td>2</td>
<td>object_list</td>
<td>返回当前页的数据查询集</td>
</tr>
<tr>
<td>3</td>
<td>paginator</td>
<td>返回对应的<strong>Paginator</strong>类对象</td>
</tr>
</tbody></table>
<h4 id="page实例对象的方法"><a href="#page实例对象的方法" class="headerlink" title="page实例对象的方法"></a>page实例对象的方法</h4><table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>has_previous</td>
<td>判断当前页是否有前一页</td>
</tr>
<tr>
<td>2</td>
<td>has_next</td>
<td>判断当前页是否有下一页</td>
</tr>
<tr>
<td>3</td>
<td>previous_page_number</td>
<td>返回前一页的页码</td>
</tr>
<tr>
<td>4</td>
<td>next_page_number</td>
<td>返回下一页的页码</td>
</tr>
</tbody></table>
<h3 id="分页功能实现"><a href="#分页功能实现" class="headerlink" title="分页功能实现"></a>分页功能实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> school.serializers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        page_number = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)  <span class="comment"># 获取客户端发送的页码，默认为1</span></span><br><span class="line">        page_size = request.GET.get(<span class="string">&#x27;page_size&#x27;</span>, <span class="number">2</span>)  <span class="comment"># 获取客户端发送的每页数量，默认为1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page_number = <span class="built_in">int</span>(page_number)  <span class="comment"># 处理页码， 过滤无效的数据</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            page_number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        goods_set = Student.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        paginator = Paginator(goods_set, page_size)  <span class="comment"># 得到分页器对象</span></span><br><span class="line">        page = paginator.get_page(page_number)  <span class="comment"># 得到当前页码对象</span></span><br><span class="line"></span><br><span class="line">        ser = StudentSerializer(page.object_list, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>



<h2 id="DRF-分页"><a href="#DRF-分页" class="headerlink" title="DRF 分页"></a>DRF 分页</h2><blockquote>
<p>  REST框架包括对可定制的分页样式的支持。</p>
</blockquote>
<h3 id="分页类"><a href="#分页类" class="headerlink" title="分页类"></a>分页类</h3><h4 id="PageNumberPagination："><a href="#PageNumberPagination：" class="headerlink" title="PageNumberPagination："></a>PageNumberPagination：</h4><p>可以进行直接的页码处理，返回某一页分页数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/user/?page=<span class="number">2</span></span><br><span class="line"><span class="comment"># page：当前的页码</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">PagerPagination</span>(<span class="params">PageNumberPagination</span>):</span></span><br><span class="line">    max_page_size = <span class="number">3</span>  <span class="comment"># 每页最大数目</span></span><br><span class="line">    page_size = <span class="number">1</span>  <span class="comment"># 默认每页数目</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 页码关键字名， 默认为&quot;page&quot;</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span>  <span class="comment"># 每页数目关键字名, ，默认为None</span></span><br></pre></td></tr></table></figure>

<h4 id="LimitOffsetPagination"><a href="#LimitOffsetPagination" class="headerlink" title="LimitOffsetPagination"></a>LimitOffsetPagination</h4><p>可以通过连接可选的参数进行分页单页数量大小的控制，分页数据偏移的选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/path/?limit=<span class="number">2</span>&amp;offset=<span class="number">2</span></span><br><span class="line"><span class="comment"># limit：每页的数据大小</span></span><br><span class="line"><span class="comment"># offset：从某一个数据位置开始偏移</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了默认的分页样式之外，还可以通过继承分页类的方式重写分页样式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitPagination</span>(<span class="params">LimitOffsetPagination</span>):</span></span><br><span class="line">    max_limit = <span class="number">2</span>  <span class="comment"># 最大limit限制，默认None</span></span><br><span class="line">    default_limit = <span class="number">1</span>  <span class="comment"># 默认限制，和page_size作用一样</span></span><br><span class="line">    limit_query_param = <span class="string">&#x27;limit&#x27;</span>  <span class="comment"># 参数名，默认limit</span></span><br><span class="line">    offset_query_param = <span class="string">&#x27;offset&#x27;</span>  <span class="comment"># 参数名，默认offset</span></span><br></pre></td></tr></table></figure>



<h4 id="自定义分页类"><a href="#自定义分页类" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><blockquote>
<p>  可以继承父类，并重写响应对象</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.utils.urls <span class="keyword">import</span> replace_query_param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagination</span>(<span class="params">PageNumberPagination</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_num_pages_link</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = self.request.build_absolute_uri()</span><br><span class="line">        num_pages = self.page.paginator.num_pages</span><br><span class="line">        <span class="keyword">return</span> [replace_query_param(url, self.page_query_param, page) <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_pages + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paginated_response</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Response(OrderedDict([</span><br><span class="line">            (<span class="string">&#x27;count&#x27;</span>, self.page.paginator.count),</span><br><span class="line">            (<span class="string">&#x27;num_pages&#x27;</span>, self.page.paginator.num_pages),  <span class="comment"># 分页的总页码</span></span><br><span class="line">            (<span class="string">&#x27;next&#x27;</span>, self.get_next_link()),</span><br><span class="line">            (<span class="string">&#x27;previous&#x27;</span>, self.get_previous_link()),</span><br><span class="line">            (<span class="string">&#x27;pages&#x27;</span>, self.get_num_pages_link()),  <span class="comment"># 所有分页的链接</span></span><br><span class="line">            (<span class="string">&#x27;results&#x27;</span>, data)</span><br><span class="line">        ]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分页应用"><a href="#分页应用" class="headerlink" title="分页应用"></a>分页应用</h3><h4 id="全局分页"><a href="#全局分页" class="headerlink" title="全局分页"></a>全局分页</h4><blockquote>
<p><strong>注意</strong>：需要修改Django的全局配置文件 <code>settings.py</code></p>
</blockquote>
<p>分页样式可以使用<code>DEFAULT_PAGINATION_CLASS</code>和<code>PAGE_SIZE</code>设置键进行全局设置。</p>
<p>例如，要使用内置的限制/偏移分页，可以执行以下操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:</span><br><span class="line">        <span class="string">&#x27;rest_framework.pagination.LimitOffsetPagination&#x27;</span>,  <span class="comment"># 指明分页类</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;utils.pagination.Pagination&#x27;, # 自定义分页类</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>  <span class="comment"># 每页数目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，您需要同时设置分页类和应使用的页面大小。</p>
<h4 id="局部分页"><a href="#局部分页" class="headerlink" title="局部分页"></a>局部分页</h4><p>您还可以使用<code>pagination_class</code>属性在单个视图上设置分页类。配置完了，如果不想用，那么就直接在视图类下使用如下属性关闭全局分页功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> BookSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> BookModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span>(<span class="params">ListCreateAPIView</span>):</span></span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">    queryset = BookModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    pagination_class = <span class="literal">None</span>  <span class="comment"># 指定分页类，为None，即当前视图不分页</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>haystack+Elasticsearch实现搜索引擎</title>
    <url>/2021/03/02/URNHC27I_/</url>
    <content><![CDATA[<p>通过搜索引擎进行数据查询时，搜索引擎并不是直接在数据库中进行查询，而是搜索引擎会对数据库中的数据进行一遍预处理，单独建立起一份索引结构数据。</p>
<p>我们可以将索引结构数据想象成是字典书籍的索引检索页，里面包含了关键词与词条的对应关系，并记录词条的位置。</p>
<p>我们在通过搜索引擎搜索时，搜索引擎将关键字在索引数据中进行快速对比查找，进而找到数据的真实存储位置。</p>
<span id="more"></span>

<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>开源的 <a href="https://www.elastic.co/">Elasticsearch </a>是目前全文搜索引擎的首选。</p>
<p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p>
<p>Elasticsearch 的底层是开源库 <a href="https://lucene.apache.org/">Lucene</a>。但是，你没法直接用 Lucene，必须自己写代码去调用它的接口。Elastic 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。</p>
<p>Elasticsearch 是用Java实现的。</p>
<p>搜索引擎在对数据构建索引时，需要进行分词处理。分词是指将一句话拆解成多个单字或词，这些字或词便是这句话的关键词。如: <code>我在广州</code></p>
<p><code>我</code>、<code>在</code>、<code>广</code>、<code>州</code>、<code>广州</code> 等都可以是这句话的关键词。</p>
<p>Elasticsearch 不支持对中文进行分词建立索引，需要配合扩展<strong>elasticsearch-analysis-ik</strong>来实现中文分词处理。</p>
<h2 id="Docker安装Elasticsearch及其扩展"><a href="#Docker安装Elasticsearch及其扩展" class="headerlink" title="Docker安装Elasticsearch及其扩展"></a>Docker安装Elasticsearch及其扩展</h2><blockquote>
<p>  注意： haystack 支持 Elasticsearch 1.x、2.x、5.x，所以不能安装Elasticsearch7.x</p>
</blockquote>
<h3 id="创建文件夹-elasticsearch"><a href="#创建文件夹-elasticsearch" class="headerlink" title="创建文件夹  elasticsearch"></a>创建文件夹  <code>elasticsearch</code></h3><p>下载中文分词插件 <a href="https://github.91chifun.workers.dev//https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip">elasticsearch-analysis-ik-5.6.16.zip</a>， 注意：插件需要和elasticsearch版本对应</p>
<p>解压到当前文件夹，并将文件夹重命名为<code>elasticsearch-analysis-ik</code></p>
<h3 id="创建-DockerFile"><a href="#创建-DockerFile" class="headerlink" title="创建 DockerFile"></a>创建 <code>DockerFile</code></h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> elasticsearch:<span class="number">5.6</span>.<span class="number">16</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> elasticsearch-analysis-ik /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik</span></span><br></pre></td></tr></table></figure>

<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t bookandmusic/elasticsearch-ik:5.6.16 .</span><br></pre></td></tr></table></figure>

<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> --name elasticsearch -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> -d bookandmusic/elasticsearch-ik:5.6.16</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run --name elasticsearch 创建一个es容器并起一个名字；</span></span><br><span class="line"><span class="comment"># -p 9200:9200 将主机的9200端口映射到docker容器的9200端口，用来给es发送http请求</span></span><br><span class="line"><span class="comment"># -p 9300:9300 9300是es在分布式集群状态下节点之间的通信端口  \ 换行符</span></span><br><span class="line"><span class="comment"># -e 指定一个参数，当前es以单节点模式运行</span></span><br><span class="line"><span class="comment"># *注意，ES_JAVA_OPTS非常重要，指定开发时es运行时的最小和最大内存占用为64M和512M，否则就会占用全部可用内存</span></span><br><span class="line"><span class="comment"># -d 后台启动服务</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  注意： 创建容器时，一定要指定内存，否则，则直接闪退</p>
</blockquote>
<h3 id="使用postman测试IK分词"><a href="#使用postman测试IK分词" class="headerlink" title="使用postman测试IK分词"></a>使用postman测试IK分词</h3><p>IK分词效果有两种,一种是ik_max_word（最大分词）和ik_smart（最小分词）</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/image-20210307155255273.png" alt="image-20210307155255273"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;今天是&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;今天&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;是&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;个&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;好日子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;日子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/image-20210307155506003.png" alt="image-20210307155506003"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;今天是&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;个&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;好日子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用haystack对接Elasticsearch"><a href="#使用haystack对接Elasticsearch" class="headerlink" title="使用haystack对接Elasticsearch"></a>使用haystack对接Elasticsearch</h2><p>Haystack为Django提供了模块化的搜索。它的特点是统一的，熟悉的API，可以让你在不修改代码的情况下使用不同的搜索后端（比如 Solr, Elasticsearch, Whoosh, Xapian 等等）。</p>
<p>我们在django中可以通过使用haystack来调用Elasticsearch搜索引擎。</p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">pip install django-haystack</span><br><span class="line">pip install drf-haystack </span><br><span class="line">pip install <span class="string">&quot;elasticsearch&gt;=5,&lt;6&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://drf-haystack.readthedocs.io/en/latest/index.html">drf-haystack</a>是为了在REST framework中使用haystack而进行的封装（如果在Django中使用haystack，则安装<a href="https://django-haystack.readthedocs.io/en/master/toc.html">django-haystack</a>即可）。</p>
<h3 id="注册应用"><a href="#注册应用" class="headerlink" title="注册应用"></a>注册应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;haystack&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在配置文件 <code>settings.py</code> 中配置haystack使用的搜索引擎后端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全文搜索引擎haystack 配置</span></span><br><span class="line"><span class="comment"># 不同的搜索引擎，配置不同，详情见官方文档</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;haystack.backends.elasticsearch5_backend.Elasticsearch5SearchEngine&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;URL&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:9200/&#x27;</span>,  <span class="comment"># 此处为elasticsearch运行的服务器ip地址和端口</span></span><br><span class="line">        <span class="string">&#x27;INDEX_NAME&#x27;</span>: <span class="string">&#x27;meiduo&#x27;</span>,  <span class="comment"># 指定elasticserach建立的索引库名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索结果每页显示数量</span></span><br><span class="line"><span class="comment"># HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当添加、修改、删除数据时,实时更新index</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">&#x27;haystack.signals.RealtimeSignalProcessor&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据模型类"><a href="#数据模型类" class="headerlink" title="数据模型类"></a>数据模型类</h3><p>假设有一个商品模型类SKU</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKU</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品SKU&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    caption = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">&#x27;副标题&#x27;</span>)</span><br><span class="line">    <span class="comment"># 当前SKU商品从属的分类</span></span><br><span class="line">    <span class="comment"># 隐藏字段category_id是关联的分类的主键id</span></span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">&#x27;sku&#x27;</span>, on_delete=models.PROTECT, verbose_name=<span class="string">&#x27;从属类别&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;单价&#x27;</span>)</span><br><span class="line">    stock = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;库存&#x27;</span>)</span><br><span class="line">    sales = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;销量&#x27;</span>)</span><br><span class="line">    comments = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;评价数&#x27;</span>)</span><br><span class="line">    is_launched = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;是否上架销售&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_sku&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s: %s&#x27;</span> % (self.<span class="built_in">id</span>, self.name)</span><br></pre></td></tr></table></figure>

<h3 id="索引类"><a href="#索引类" class="headerlink" title="索引类"></a>索引类</h3><p>通过创建索引类，来指明让搜索引擎对哪些字段建立索引，也就是可以通过哪些字段的关键字来检索数据。</p>
<p>在应用中新建<code>search_indexes.py</code>文件，用于存放索引类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> SKU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKUIndex</span>(<span class="params">indexes.SearchIndex, indexes.Indexable</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;SKU索引数据模型类&quot;&quot;&quot;</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    name = indexes.CharField(model_attr=<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    caption = indexes.CharField(model_attr=<span class="string">&#x27;caption&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    category = indexes.CharField(model_attr=<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回建立索引的模型类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> SKU</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span>(<span class="params">self, using=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回要建立索引的数据查询集&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.<span class="built_in">filter</span>(is_launched=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h3><h4 id="SkuSerializer"><a href="#SkuSerializer" class="headerlink" title="SkuSerializer"></a>SkuSerializer</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkuSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    category = StringRelatedField(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = SKU</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;stock&#x27;</span>, <span class="string">&#x27;comments&#x27;</span>, <span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;default_image&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="HaystackSerializer"><a href="#HaystackSerializer" class="headerlink" title="HaystackSerializer"></a>HaystackSerializer</h4><p><code>HaystackSerializer</code>:根据<code>SearchQueryset</code>中可用的模型填充字段,进行序列化解析;此时，API返回的数据仅包含 Elasticsearch检索出匹配关键词的搜索结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf_haystack.serializers <span class="keyword">import</span> HaystackSerializer</span><br><span class="line"><span class="keyword">from</span> goods.search_indexes <span class="keyword">import</span> SKUIndex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKUHaystackSerializer</span>(<span class="params">HaystackSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SKU索引结果数据序列化器</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index_classes = [SKUIndex]</span><br><span class="line">        fields = (<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;caption&#x27;</span>, <span class="string">&#x27;category&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但是Haystack通过<code>Elasticsearch</code>检索出匹配关键词的搜索结果后，还会在数据库中取出完整的数据库模型类对象，放到搜索结果的<code>object</code>属性中，并将结果通过<code>SKUIndexSerializer</code>序列化器进行序列化。所以我们可以通过声明搜索结果的<code>object</code>字段以<code>SkuSerializer</code>序列化的形式进行处理，明确要返回的搜索结果中每个数据对象包含哪些字段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf_haystack.serializers <span class="keyword">import</span> HaystackSerializer</span><br><span class="line"><span class="keyword">from</span> goods.search_indexes <span class="keyword">import</span> SKUIndex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKUHaystackSerializer</span>(<span class="params">HaystackSerializer</span>):</span></span><br><span class="line">    <span class="built_in">object</span> = SkuSerializer(read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SKU索引结果数据序列化器:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index_classes = [SKUIndex]</span><br><span class="line">        fields = (<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="HaystackSerializerMixin"><a href="#HaystackSerializerMixin" class="headerlink" title="HaystackSerializerMixin"></a>HaystackSerializerMixin</h4><p><code>HaystackSerializerMixin</code>：可以将此<code>mixin</code>混入类添加到序列化器中，以将实际对象用作序列化的数据源，而不是使用存储在搜索索引字段中的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> drf_haystack.serializers <span class="keyword">import</span> HaystackSerializerMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKUHaystackSerializer</span>(<span class="params">HaystackSerializerMixin, SkuSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>(<span class="params">SkuSerializer.Meta</span>):</span></span><br><span class="line">        search_fields = [<span class="string">&quot;text&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>(<span class="params">PageNumberPagination</span>):</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SKUSearchView</span>(<span class="params">HaystackViewSet</span>):</span></span><br><span class="line">    index_models = [SKU]</span><br><span class="line">    serializer_class = SKUHaystackSerializer</span><br><span class="line">    pagination_class = Page</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> goods.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r&quot;search&quot;</span>, SKUSearchView, basename=<span class="string">&quot;search&quot;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-项目流程</title>
    <url>/2019/03/22/U8h6fBvcn/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>使用命令<code>django-admin startproject djangodemo</code>,创建Django项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">|-- djangodemo</span><br><span class="line">|    |-- __init__.py  <span class="comment"># 说明booktest是一个python包。</span></span><br><span class="line">|    |-- settings.py <span class="comment"># 项目的配置文件。</span></span><br><span class="line">|    |-- urls.py  <span class="comment"># 进行url路由的配置。</span></span><br><span class="line">|    |-- wsgi.py  <span class="comment"># web服务器和Django交互的入口。</span></span><br><span class="line">|</span><br><span class="line">|-- manage.py  <span class="comment"># 项目的管理文件。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用命令<code>python manage.py startapp books</code>, 创建DjangoApp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">|- books</span><br><span class="line">    |- __init__.py  <span class="comment"># 说明目录是一个Python模块。</span></span><br><span class="line">    |- models.py  <span class="comment"># 写和数据库项目的内容, 设计模型类。</span></span><br><span class="line">    |- views.py  <span class="comment"># 接收请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数。</span></span><br><span class="line">    |- tests.py  <span class="comment"># 写测试代码的文件。</span></span><br><span class="line">    |- admin.py  <span class="comment"># 网站后台管理相关的文件。</span></span><br></pre></td></tr></table></figure>

<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><blockquote>
<p>修改项目根目下的<code>settings.py</code>文件</p>
</blockquote>
<h3 id="注册App"><a href="#注册App" class="headerlink" title="注册App"></a>注册App</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>, <span class="comment"># 应用名</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">      <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">          <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">          <span class="comment"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;djangodemo&#x27;</span>,  <span class="comment"># 使用的数据库名字，数据库必须手动创建</span></span><br><span class="line">          <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 连接mysql的用户名</span></span><br><span class="line">          <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;mysql&#x27;</span>,  <span class="comment"># 用户名对应的密码</span></span><br><span class="line">          <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 指定mysql数据库所在电脑的IP</span></span><br><span class="line">          <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,  <span class="comment"># mysql服务器的端口号</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意:</strong>  mysql数据库<strong>链接驱动</strong>，django2.x之后，官方建议使用 <code>mysqlclient</code>,若非要使用 <code>pymysql</code>，还需要如下配置</p>
</blockquote>
<p>在与<code>settings.py</code>同级的<code>__init__.py</code>文件中添加:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="配置模板目录"><a href="#配置模板目录" class="headerlink" title="配置模板目录"></a>配置模板目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录下, 新建模板目录 templates</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&quot;templates&quot;</span>)],</span><br><span class="line">      <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">      <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">              <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">          ],</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="配置静态资源"><a href="#配置静态资源" class="headerlink" title="配置静态资源"></a>配置静态资源</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态资源展示的url前缀</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"><span class="comment"># 静态资源存放的目录，需要先创建static目录</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="本地化配置"><a href="#本地化配置" class="headerlink" title="本地化配置"></a>本地化配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span> <span class="comment"># 设置为True， 数据库存储默认使用UTC时区，设置为False， 使用本地时区</span></span><br></pre></td></tr></table></figure>

<h3 id="配置HOST地址"><a href="#配置HOST地址" class="headerlink" title="配置HOST地址"></a>配置HOST地址</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">&quot;*&quot;</span>] <span class="comment"># 允许客户端通过服务器的任何ip(本地ip和网络ip)访问服务器</span></span><br></pre></td></tr></table></figure>

<h2 id="创建后台超级管理员"><a href="#创建后台超级管理员" class="headerlink" title="创建后台超级管理员"></a>创建后台超级管理员</h2><ul>
<li><p>进入manage.py目录下，使用命令<code>python manage.py createsuperuser</code>来进行创建</p>
</li>
<li><p>接下来输入用户名称 : <code>Username(leave bkank to use &#39;administrator&#39;): root</code></p>
</li>
<li><p>然后是输入邮箱（QQemail等都可以）: <code>Email address：xxxx@xxx.com</code></p>
</li>
<li><p>输入密码（输入密码时不会显示出来，并且长度必须超过八位才行）: <code>Password：********</code></p>
</li>
<li><p>确认密码 : <code>Password(again)：********</code></p>
</li>
<li><p>当两次密码输入相同且超过八位的时候，就会提示创建超级用户成功 : <code>Superuser created successfully</code></p>
</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="创建模型类"><a href="#创建模型类" class="headerlink" title="创建模型类"></a>创建模型类</h3><p>在应用<code>books</code>目录下的<code>models.py</code>文件中创建模型类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = models.DateField()</span><br><span class="line">    read = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    comment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_books&#x27;</span>  <span class="comment"># 指定表名</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;图书&#x27;</span>  <span class="comment"># 后台显示表名</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title  <span class="comment"># 查询对象时，显示信息</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    comment = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    book = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">		</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_heros&#x27;</span>  <span class="comment"># 指定表名</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;英雄&#x27;</span>  <span class="comment"># 后台显示表名</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name  <span class="comment"># 查询对象时，显示信息</span></span><br></pre></td></tr></table></figure>

<h3 id="模型类生成表"><a href="#模型类生成表" class="headerlink" title="模型类生成表"></a>模型类生成表</h3><ul>
<li><p>生成迁移文件<code>python manage.py makemigrations</code></p>
</li>
<li><p>迁移文件生成表<code>python manage.py migrate</code>,生成表名的默认格式：应用名_模型类名小写,可以指定表名</p>
</li>
</ul>
<h3 id="Admin后台管理"><a href="#Admin后台管理" class="headerlink" title="Admin后台管理"></a>Admin后台管理</h3><p>在应用book下的admin.py中注册模型类。</p>
<p>告诉djang框架根据注册的模型类来生成对应表管理页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> book.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> book.models <span class="keyword">import</span> HeroInfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台管理相关文件</span></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书模型管理类&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;book_title&#x27;</span>, <span class="string">&#x27;book_pub_date&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;hero_name&#x27;</span>, <span class="string">&#x27;hero_sex&#x27;</span>, <span class="string">&#x27;hero_comment&#x27;</span>, <span class="string">&#x27;hero_book&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册模型类</span></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br><span class="line">admin.site.register(HeroInfo, HeroInfoAdmin)</span><br></pre></td></tr></table></figure>

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>在 <code>templates</code>目录下 创建  <code>hero_list.html</code>, 展示所有 英雄信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;英雄列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> hero <span class="keyword">in</span> heroes %&#125;   <span class="comment"># 类似python的for循环和if判断</span></span><br><span class="line">        &#123;% <span class="keyword">if</span> <span class="keyword">not</span> hero.isDelete %&#125;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; hero.<span class="built_in">id</span> &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; hero.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; hero.gender &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; hero.comment &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; hero.book &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>在 <code>books</code> APP目录下的 <code>views.py</code>中创建自己的 视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hero_list_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    heros = HeroInfo.objects.<span class="built_in">all</span>()  <span class="comment"># 利用模型类查询全部数据</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;hero_list.html&#x27;</span>, context=&#123;<span class="string">&#x27;heros&#x27;</span>: heros&#125;)  <span class="comment"># 利用render函数渲染模板</span></span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>在 项目同名目录的 <code>urls.py</code>中配置路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> book.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;heroes/&#x27;</span>, hero_list_view)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ul>
<li><p>只能通过本地ip访问 : <code>python manage.py runserver</code> </p>
<p>浏览器输入<code>127.0.0.1:8000</code>访问服务器</p>
</li>
<li><p>可以通过网络ip访问 : <code>python manage.py runserver 0.0.0.0:8000</code></p>
<p>浏览器输入<code>网络ip:8000</code>访问服务器，同时需要搭配 <code>settings.py</code>中的配置参数使用</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python垃圾回收机制</title>
    <url>/2021/08/08/UVoRTvMeV/</url>
    <content><![CDATA[<p>简单分析一下python中的垃圾回收机制，主要从三方面阐述：引用计数、标记清除、分代回收。</p>
<span id="more"></span>

<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><blockquote>
<p>  引用计数是什么？</p>
</blockquote>
<p>引用计数是编程语言中的一种内存管理技术；将资源(可以是对象、内存或磁盘空间等)的引用次数保存起来</p>
<p><strong>引用计数为零时，资源将被释放。</strong></p>
<blockquote>
<p>  如何使引用计数减少？</p>
</blockquote>
<p><code>del</code>语句会删除对象的一个引用，这会导致该引用指向的对象的引用计数减1</p>
<p>==注意==：任何调试或追踪程序会给对象增加一个额外引用，这会推迟该对象的回收时间</p>
<blockquote>
<p>  引用计数会导致什么问题？</p>
</blockquote>
<p>由于两个或以上对象互相引用时，彼此引用计数不为0, 造成<strong>循环引用</strong>而无法回收。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: b = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: a.append(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: b.append(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: a</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, [<span class="number">2</span>, [...]]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: b</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">2</span>, [<span class="number">1</span>, [...]]]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>  如何查看引用计数？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: sys.getrefcount(a)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: sys.getrefcount(b)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">15</span></span><br></pre></td></tr></table></figure>

<h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>Python引入了其它的垃圾回收机制来弥补引用计数的缺陷：”标记-清除”</p>
<p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>
<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/08/mark-sweep.svg" alt="mark-sweep"></p>
<blockquote>
<p>  在上图中，我们把小黑圈视为全局变量，也就是把它作为<code>root object</code>，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>
</blockquote>
<p>垃圾标记时（也就是检测循环引用时），先将集合中对象的引用计数复制一份副本(以免在操作过程中破坏真实的引用计数值)</p>
<p>这个计数副本的唯一作用是寻找<code>root object</code>集合(该集合中的对象是不能被回收的)。</p>
<p>当成功寻找到<code>root object</code>集合之后。首先将如今的内存链表一分为二，一条链表中维护<code>root object</code>集合，称为<code>root</code>链表；而另外一条链表中维护剩下的对象，称<code>unreachable</code>链表。</p>
<p>之所以要剖成两个链表，是基于这种一种考虑：如今的<code>unreachable</code>可能存在被<code>root</code>链表中的对象直接或间接引用的对象，这些对象是不能被回收的。一旦在标记的过程中，发现这种对象，就将其从<code>unreachable</code>链表中移到<code>root</code>链表中。</p>
<p>当标记完毕后，<code>unreachable</code>链表中剩下的全部对象就是名副事实上的垃圾对象了，接下来的垃圾回收仅仅需限制在<code>unreachable</code>链表中就可以。</p>
<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如<code>list</code>、<code>dict</code>、<code>tuple</code>，<code>instance</code>等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>一系列的研究表明：不管使用何种语言开发。不管开发的是何种类型，何种规模的程序，都存在这样一点同样之处。即：<strong>一定比例的内存块的生存周期都比較短，一般是几百万条机器指令的时间。而剩下的内存块,其生存周期比较长，甚至会从程序开始一直持续到程序结束</strong>。</p>
<p>从前面“标记-清除”这种垃圾收集机制来看。这种垃圾收集机制所带来的额外操作，实际上与系统中总的内存块的数量是相关的。当须要回收的内存块越多时，垃圾检测带来的额外操作就越多；反之，垃圾回收带来的额外操作就越少。</p>
<p>将系统中的全部内存块依据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集的频率随着“代”的存活时间的增大而减小。也就是说，活得越长的对象。就越不可能是垃圾，就应该降低对它的垃圾收集频率。那么怎样来衡量这个存活时间：一般是利用几次垃圾收集动作来衡量，假设一个对象经过的垃圾收集次数越多，能够得出：该对象存活时间就越长。</p>
<p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象.</p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>引用计数</tag>
        <tag>标记清除</tag>
        <tag>分代回收</tag>
      </tags>
  </entry>
  <entry>
    <title>python内存管理</title>
    <url>/2020/07/30/WeSgToGIO/</url>
    <content><![CDATA[<blockquote>
<p>Python中不但变量名无需事先声明，而且也无需类型声明。在Python语言中，对象的类型和内存占用都是运行时确定的。在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。在对象创建后，一个该对象的引用会被赋值给左侧的变量。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/python%E9%92%88%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6%20.png" alt="python针对变量的内存管理机制"></p>
<h2 id="值和引用"><a href="#值和引用" class="headerlink" title="值和引用"></a>值和引用</h2><p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：<code>id</code>(身份标识)、<code>type</code>(数据类型)和<code>value</code>(值)。</p>
<p> <code>id()</code>可以用来查看对象的内存地址</p>
<p><code>is</code>也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是<code>id</code>是否相同。</p>
<p><code>==</code>是python标准操作符中的比较操作符，用来比较判断两个对象的<code>value</code>(值)是否相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">58</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: <span class="built_in">id</span>(a)</span><br><span class="line">Out[<span class="number">60</span>]: <span class="number">4553015712</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="built_in">id</span>(b)</span><br><span class="line">Out[<span class="number">61</span>]: <span class="number">4553015712</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: a == b</span><br><span class="line">Out[<span class="number">62</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">63</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: blist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: <span class="built_in">id</span>(alist)</span><br><span class="line">Out[<span class="number">66</span>]: <span class="number">4615610448</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="built_in">id</span>(blist)</span><br><span class="line">Out[<span class="number">67</span>]: <span class="number">4608370160</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: alist == blist</span><br><span class="line">Out[<span class="number">70</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: alist <span class="keyword">is</span> blist</span><br><span class="line">Out[<span class="number">71</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="可变与不可变"><a href="#可变与不可变" class="headerlink" title="可变与不可变"></a>可变与不可变</h2><ol>
<li><code>list</code>、<code>dict</code>、<code>set</code>属于可变类型</li>
<li><code>number</code>、<code>str</code>、<code>tuple</code>、<code>bool</code>属于不可变类型</li>
</ol>
<p>不可变数据类型在第一次声明赋值声明的时候, 会在内存中开辟一块空间, 用来存放这个变量被赋的值, 而这个变量实际上存储的, 并不是被赋予的这个值, 而是存放这个值所在空间的内存地址, 通过这个地址, 变量就可以在内存中取出数据了. 所谓不可变就是说, 我们不能改变这个数据在内存中的值, 所以当我们改变这个变量的赋值时, 只是在内存中重新开辟了一块空间, 将这一条新的数据存放在这一个新的内存地址里, 而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。</p>
<p>结合不可变数据类型，可变数据类型就很好理解来，可变数据类型是指变量所指向的内存地址处的值是可以被改变的。</p>
<p><strong>从另外一个角度来看：</strong></p>
<p>可变类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>
<p>可变数据类型：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>
<h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><p>Python采用基于值的内存管理模式，相同的值在内存中只有一份。这是很多Python教程上都会提到的一句话，但实际情况要复杂的多。什么才是值？什么样的值才会在内存中只保存一份？这是个非常复杂的问题。</p>
<h3 id="在python交互环境中"><a href="#在python交互环境中" class="headerlink" title="在python交互环境中"></a>在python交互环境中</h3><p>首先明确一点，整数、实数、字符串是真正意义上的值，而上面那句话中的“值”主要指<strong>不可变类型</strong>中的整数和字符串。对于列表、元组、字典、集合以及range对象、map对象等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>
<blockquote>
<p>  整数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">51</span>]: a = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">53</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>python中对于小的整数存在一个缓存池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题， Python解释器会在启动时创建出小整数池，范围是<code>[-5,256]</code>，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被垃圾回收机制回收。</p>
<blockquote>
<p>实数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">8</span>]: a = <span class="number">12.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: b = <span class="number">12.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">10</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>对于实数，由于计算机存储实数会有精度问题，很难精确存储，所以不进行缓存，也就是说，即使看起来是一样的实数，在内存中也不是一份。</p>
<blockquote>
<p>  字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">63</span>]: a = <span class="string">&quot;abc123_&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: b = <span class="string">&quot;abc123_&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">65</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: a = <span class="string">&quot;12 3&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: b = <span class="string">&quot;12 3&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">68</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>由于变量的存储机制，python增加了字符串的<code>intern</code>机制。也就是说，值同样的字符串对象（<strong>整数也使用</strong>）仅仅会保存一份，是共用的，这也决定了字符串必须是不可变对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">70</span>]: c = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>  <span class="comment"># 在 compile-time（编译时）已经求完值，被替换成了&#x27;ab&#x27;, </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: <span class="built_in">id</span>(c)</span><br><span class="line">Out[<span class="number">71</span>]: <span class="number">4489029232</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: d = <span class="string">&quot;ab&quot;</span>  <span class="comment"># 此时，内存中已经有 &#x27;ab&#x27;, 因此直接引用即可</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: <span class="built_in">id</span>(d)</span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">4489029232</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">In [<span class="number">74</span>]: <span class="built_in">id</span>(a + <span class="string">&quot;b&quot;</span>)  <span class="comment"># 在run-time（运行时）拼接的，导致没有被主动intern</span></span><br><span class="line">Out[<span class="number">74</span>]: <span class="number">4519083312</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">In [<span class="number">75</span>]: a = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">In [<span class="number">76</span>]: b = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: a <span class="keyword">is</span> b  <span class="comment"># intern机制仅仅对那些看起来像是Python标识符的字符串对象才会触发</span></span><br><span class="line">Out[<span class="number">77</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <strong>intern机制</strong></p>
</blockquote>
<p>　　<strong>优点</strong>：在创建新的字符对象时，如果内存中已经存在，则直接引用，避免频繁的创建和销毁内存，提升效率。</p>
<p>　　<strong>缺点</strong>：在拼接字符串时，或者在改动字符串时会极大的影响性能。原因是字符串在Python当中是不可变对象，所以对字符串的改动不是inplace（原地）操作，需要新开辟内存地址，新建对象。这也是为什么拼接字符串的时候不建议用<code>+</code>而是用<code>join()</code>。<code>join()</code>是先计算出全部字符串的长度，然后再一一拷贝，仅仅创建一次对象。</p>
<p><strong>总结</strong></p>
<ol>
<li>单词，即<strong>Python标识符</strong>，不可修改，默认开启intern机制，共用对象，引用计数为0时自动被回收。</li>
<li>字符串（包含了除Python标识符以外的字符），不可修改，默认没有开启intern机制，引用计数为0时自动被回收。</li>
<li>特殊情况下（动态拼接），不会被主动intern。</li>
</ol>
<blockquote>
<p>  元组</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: a = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: a <span class="keyword">is</span> b</span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>对于元组等容器类对象，它们不是普通的“值”，即使看起来是一样的，在内存中也不会只保存一份。</p>
<h3 id="在Python代码中"><a href="#在Python代码中" class="headerlink" title="在Python代码中"></a>在Python代码中</h3><p>在同一模块文件中，不可变类型的数字、字符串、元组， 在值相同时，只会保存一份;而不同模块中的不同值，才会重新生成。</p>
<p><strong>模块 <code>bbb.py</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="number">1000</span></span><br><span class="line">c2 = <span class="string">&quot;hello world % &quot;</span></span><br><span class="line">c3 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">c4 = <span class="number">12.3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>模块 <code>aaa.py</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bbb <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="number">1000</span></span><br><span class="line">b = <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c1)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;hello world % &quot;</span></span><br><span class="line">b = <span class="string">&quot;hello world % &quot;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c2)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c3)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">12.3</span></span><br><span class="line">b = <span class="number">12.3</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c4)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBook教程</title>
    <url>/2019/03/31/Wt2mcCFLL/</url>
    <content><![CDATA[<p>GitBook 是一个基于<code>Node.js</code>的命令行工具，可以使用<code>Markdown</code>来制作电子书，并利用<code>Git/Github</code>发布。</p>
<p>支持输出<code>静态站点</code>、<code>PDF</code>、<code>eBook</code>、<code>HTML网页</code>等格式。</p>
<span id="more"></span>


<p>安装 GitBook 需要 Node 环境，具体怎么安装 Node 这里就不多说了。</p>
<h2 id="安装-GitBook"><a href="#安装-GitBook" class="headerlink" title="安装 GitBook"></a>安装 GitBook</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add gitbook-cli</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure>

<h2 id="导出电子书"><a href="#导出电子书" class="headerlink" title="导出电子书"></a>导出电子书</h2><p>打开到 gitbook 的目录下</p>
<h3 id="输出静态网页"><a href="#输出静态网页" class="headerlink" title="输出静态网页"></a>输出静态网页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook serve .</span><br><span class="line">Press CTRL+C to quit ...</span><br><span class="line"></span><br><span class="line">Starting build ...</span><br><span class="line">Successfuly built !</span><br><span class="line"></span><br><span class="line">Starting server ...</span><br><span class="line">Serving book on http://localhost:4000   </span><br></pre></td></tr></table></figure>

<p>这时候就可以打开 <a href="http://localhost:4000/">http://localhost:4000</a>：进行预览</p>
<p>同时在项目的目录中多了一个 <code>_book</code> 的文件夹，其中的文件就是生成的静态网页的内容。</p>
<h3 id="导出-PDF"><a href="#导出-PDF" class="headerlink" title="导出 PDF"></a>导出 PDF</h3><p>在项目的目录中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook pdf .</span><br></pre></td></tr></table></figure>

<p>项目目录下就会生成 <code>book.pdf</code></p>
<h3 id="导出-epub"><a href="#导出-epub" class="headerlink" title="导出 epub"></a>导出 epub</h3><p>在项目目录中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook epub .  </span><br></pre></td></tr></table></figure>

<p>项目目录下就会生成 <code>book.epub</code></p>
<h2 id="解决静态网页不能跳转问题"><a href="#解决静态网页不能跳转问题" class="headerlink" title="解决静态网页不能跳转问题"></a>解决静态网页不能跳转问题</h2><ul>
<li><p>在导出的文件夹目录下找到gitbook-&gt;theme.js文件</p>
</li>
<li><p>找到下面的代码搜索<code>if(m)for(n.handler&amp;&amp;</code></p>
</li>
<li><p>将if(m)改成if(false)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)<span class="keyword">for</span>(n.handler&amp;&amp;(i=n,n=i.handler,o=i.selector),o&amp;&amp;de.find.matchesSelector(Ye,o),n.guid||(n.guid=de.guid++),(u=m.events)||(u=m.events=&#123;&#125;),(a=m.handle)||(a=m.handle=<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> de&amp;&amp;de.event.triggered!==t.type?de.event.dispatch.apply(e,<span class="built_in">arguments</span>):<span class="keyword">void</span> <span class="number">0</span>&#125;),t=(t||<span class="string">&quot;&quot;</span>).match(qe)||[<span class="string">&quot;&quot;</span>],l=t.length;l--;)s=Ze.exec(t[l])||[],h=g=s[<span class="number">1</span>],d=(s[<span class="number">2</span>]||<span class="string">&quot;&quot;</span>).split(<span class="string">&quot;.&quot;</span>).sort(),h&amp;&amp;(f=de.event.special[h]||&#123;&#125;,h=(o?f.delegateType:f.bindType)||h,f=de.event.special[h]||&#123;&#125;,c=de.extend(&#123;<span class="attr">type</span>:h,<span class="attr">origType</span>:g,<span class="attr">data</span>:r,<span class="attr">handler</span>:n,<span class="attr">guid</span>:n.guid,<span class="attr">selector</span>:o,<span class="attr">needsContext</span>:o&amp;&amp;de.expr.match.needsContext.test(o),<span class="attr">namespace</span>:d.join(<span class="string">&quot;.&quot;</span>)&#125;,i),(p=u[h])||(p=u[h]=[],p.delegateCount=<span class="number">0</span>,f.setup&amp;&amp;f.setup.call(e,r,d,a)!==!<span class="number">1</span>||e.addEventListener&amp;&amp;e.addEventListener(h,a)),f.add&amp;&amp;(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,<span class="number">0</span>,c):p.push(c),de.event.global[h]=!<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-序列化与反序列化</title>
    <url>/2020/07/08/XQTRP0_wd/</url>
    <content><![CDATA[<p>DRF内置的序列化类，可以对整个模型类进行序列化与反序列化，简化了繁杂的工作。</p>
<span id="more"></span>

<h2 id="内置字段序列化"><a href="#内置字段序列化" class="headerlink" title="内置字段序列化"></a>内置字段序列化</h2><h3 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authors</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;db_authors&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;作者&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;作者&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;单价&#x27;</span>)</span><br><span class="line">    publish = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;出版社&#x27;</span>)</span><br><span class="line">    author = models.ForeignKey(Authors, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;db_books&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;图书&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;图书&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h3><h4 id="字段默认方式序列化"><a href="#字段默认方式序列化" class="headerlink" title="字段默认方式序列化"></a>字段默认方式序列化</h4><blockquote>
<p>  全部字段都采用 <code>ModelSerializer</code>的默认方式实现<strong>序列化</strong>与<strong>反序列化</strong>，外键对应的序列化值是外键id</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Books, Authors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorsSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Authors</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">   </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="字段指定方式序列化"><a href="#字段指定方式序列化" class="headerlink" title="字段指定方式序列化"></a>字段指定方式序列化</h4><blockquote>
<p>  对模型类的外键关联字段通过 其他方式，实现<strong>序列化</strong>，其他字段仍然使用 默认方式实现序列化</p>
</blockquote>
<h5 id="外键字段内置方式序列化"><a href="#外键字段内置方式序列化" class="headerlink" title="外键字段内置方式序列化"></a>外键字段内置方式序列化</h5><p><strong>图书类序列化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Books, Authors</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="comment"># author = serializers.PrimaryKeyRelatedField(read_only=True)  # 内置关联字段，默认序列化方式，关联对象的主键</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># author = serializers.StringRelatedField(read_only=True)  # 内置关联字段，此字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># author = serializers.HyperlinkedRelatedField(view_name=&#x27;authors-detail&#x27;, read_only=True)  # 内置关联字段，此字段被序列化为关联对象的路由地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author = serializers.SlugRelatedField(read_only=True, slug_field=&#x27;id&#x27;)  # 内置关联字段，指定关联对象的字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># author = serializers.CharField(source=&#x27;author.name&#x27;, read_only=True)  # 指定关联对象的字段</span></span><br><span class="line">    </span><br><span class="line">    author = AuthorsSerializer()  <span class="comment"># 将关联对象所有字段全部序列化</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>作者类序列化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Books, Authors</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorsSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="comment"># books_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True)</span></span><br><span class="line">    <span class="comment"># books_set = serializers.StringRelatedField(read_only=True, many=True)</span></span><br><span class="line">    <span class="comment"># books_set = serializers.HyperlinkedRelatedField(view_name=&#x27;books-detail&#x27;, read_only=True, many=True)</span></span><br><span class="line">    <span class="comment"># books_set = BookSerializer(read_only=True, many=True)</span></span><br><span class="line">    <span class="comment"># books_set = BookRelateField(read_only=True, many=True)  # 自定义关联字段</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Authors</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="外键字段自定义方式序列化"><a href="#外键字段自定义方式序列化" class="headerlink" title="外键字段自定义方式序列化"></a>外键字段自定义方式序列化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Books, Authors</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRelateField</span>(<span class="params">serializers.RelatedField</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_representation</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Author: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorsSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    books_set = BookRelateField(read_only=<span class="literal">True</span>, many=<span class="literal">True</span>)  <span class="comment"># 自定义关联字段</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Authors</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorRelateField</span>(<span class="params">serializers.RelatedField</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_representation</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Author: &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(value.<span class="built_in">id</span>, value.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    author = AuthorRelateField(read_only=<span class="literal">True</span>) <span class="comment"># 自定义关联字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>

<p>以上序列化方式，任选其一均可，但是注意，此时只能保证<strong>序列化成功</strong>，不能保证反序列化</p>
<h2 id="自定义字段序列化"><a href="#自定义字段序列化" class="headerlink" title="自定义字段序列化"></a>自定义字段序列化</h2><blockquote>
<p>通过上面的例子可以看出：将外键字段通过其他方式序列化，可以得到不通类型的数据；但是大多数情况，不能实现反序列化。因此，可以在序列化时，不修改外键字段，而是自己构建新字段。最大好处, 在于将序列化字段与反序列化字段分离，互不影响。</p>
</blockquote>
<h3 id="修改模型类"><a href="#修改模型类" class="headerlink" title="修改模型类"></a>修改模型类</h3><p>需要在模型类中用<code>@property</code>来实现，可插拔</p>
<h4 id="模型类-1"><a href="#模型类-1" class="headerlink" title="模型类"></a>模型类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">&#x27;单价&#x27;</span>)</span><br><span class="line">    publish = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;出版社&#x27;</span>)</span><br><span class="line">    author = models.ForeignKey(Authors, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property  </span><span class="comment"># 插拔字段 - 默认为read_only(不需要考虑反序列化)，且不能修改</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.author.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">from</span> .serializers <span class="keyword">import</span> AuthorsSerializer</span><br><span class="line">        <span class="keyword">return</span> AuthorsSerializer(self.author).data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="序列化类-1"><a href="#序列化类-1" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;author_name&#x27;</span>, <span class="string">&#x27;author_info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改序列化类"><a href="#修改序列化类" class="headerlink" title="修改序列化类"></a>修改序列化类</h3><blockquote>
<p>模型类不变，只在序列化器中添加序列化字段</p>
</blockquote>
<h4 id="序列化类-2"><a href="#序列化类-2" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    author_url = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;authors-detail&#x27;</span>, read_only=<span class="literal">True</span>)  <span class="comment"># 内置序列化方式，关联对象的路由地址</span></span><br><span class="line">    </span><br><span class="line">    author_name = serializers.SerializerMethodField()</span><br><span class="line">    <span class="comment"># author_name 字段在数据库中不能存在，下面写方法的时候前面加 get_  就可以，这样就得到我们需要的数据了。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_author_name</span>(<span class="params">obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        固定写法,obj代表Books实例对象,模型类配置了反向引用author代表作者对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> obj.author.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;author_name&#x27;</span>, <span class="string">&#x27;author_url&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery任务队列</title>
    <url>/2021/10/24/XsiHdsAGO/</url>
    <content><![CDATA[<p>在使用Celery至异步任务处理时，如果存在多种类型的任务，并且我们希望用不同的Worker来处理不同类型的任务时，应该如何处理呢？<br>本文将会讲解如何利用Celery将任务分配至不同队列，并使用不同的Worker来处理指定类型的任务。</p>
<span id="more"></span>

<h2 id="celery-app创建"><a href="#celery-app创建" class="headerlink" title="celery app创建"></a>celery app创建</h2><blockquote>
<p>  celery版本是3.x</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the &#x27;celery&#x27; program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;proj.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;proj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker will not have to</span></span><br><span class="line"><span class="comment"># pickle the object when using Windows.</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># celery会自动查找每个app的 tasks文件中的任务</span></span><br><span class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(self.request))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  如果是 4.x以上，需要参考<a href="https://docs.celeryproject.org/en/v5.1.2/django/first-steps-with-django.html#using-celery-with-django">官方文档</a>，有不同的写法。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the default Django settings module for the &#x27;celery&#x27; program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;django01.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;proj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker doesn&#x27;t have to serialize</span></span><br><span class="line"><span class="comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="comment"># - namespace=&#x27;CELERY&#x27; means all celery-related configuration keys</span></span><br><span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load task modules from all registered Django apps.</span></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Request: <span class="subst">&#123;self.request!r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote>
<p>  celery版本是3.x</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IS_USE_CELERY = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> IS_USE_CELERY:</span><br><span class="line">    CELERY_TIMEZONE = <span class="string">&quot;Asia/Shanghai&quot;</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    CELERY_ENABLE_UTC = <span class="literal">False</span>  <span class="comment"># 是否启动时区设置，默认值是True</span></span><br><span class="line"></span><br><span class="line">    CELERYD_CONCURRENCY = <span class="number">5</span>  <span class="comment"># 并发的worker数量</span></span><br><span class="line">    CELERYD_PREFETCH_MULTIPLIER = <span class="number">2</span>  <span class="comment"># 每次去消息队列读取任务的数量，默认值是4</span></span><br><span class="line">    CELERYD_MAX_TASKS_PER_CHILD = <span class="number">120</span>  <span class="comment"># 每个worker执行多少次任务后会死掉</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BROKER_URL = &quot;amqp://guest:guest@localhost:15672/&quot;  # 使用RabbitMQ 作为任务队列</span></span><br><span class="line">    BROKER_URL = <span class="string">&quot;redis://127.0.0.1:6379/9&quot;</span>  <span class="comment"># 使用RabbitMQ 作为任务队列</span></span><br><span class="line"></span><br><span class="line">    CELERY_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>  <span class="comment"># 任务执行结果的超时时间</span></span><br><span class="line">    <span class="comment"># CELERYD_TIME_LIMIT = 60 * 60  # 单个任务运行的时间限制，超时会被杀死，不建议使用该参数，而用CELERYD_SOFT_TIME_LIMIT</span></span><br><span class="line">    CELERYD_SOFT_TIME_LIMIT = <span class="number">300</span></span><br><span class="line">    CELERY_RESULT_BACKEND = <span class="string">&quot;redis://127.0.0.1:6379/11&quot;</span>  <span class="comment"># 使用redis存储执行结果</span></span><br><span class="line"></span><br><span class="line">    CELERY_ACCEPT_CONTENT = [<span class="string">&#x27;pickle&#x27;</span>]</span><br><span class="line">    CELERY_SERIALIZER = <span class="string">&quot;pickle&quot;</span>  <span class="comment"># 任务序列化方式</span></span><br><span class="line">    CELERY_RESULT_SERIALIZER = <span class="string">&quot;pickle&quot;</span>  <span class="comment"># 结果的序列化方式</span></span><br><span class="line">    CELERY_DISABLE_RATE_LIMITS = <span class="literal">False</span>  <span class="comment"># 关闭执行限速</span></span><br><span class="line"></span><br><span class="line">    CELERY_IMPORTS = [</span><br><span class="line">        <span class="string">&quot;app01.task_celery&quot;</span></span><br><span class="line">    ]  <span class="comment"># 配置导入各个任务的任务模块，尤其是当任务模块名字不是 tasks时，可以手动导入</span></span><br><span class="line"></span><br><span class="line">    CELERYBEAT_SCHEDULER = <span class="string">&#x27;djcelery.schedulers:DatabaseScheduler&#x27;</span>  <span class="comment"># 指明定时模块的加载位置</span></span><br><span class="line"></span><br><span class="line">    CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">        <span class="comment"># 定时任务，每隔1分钟，记录一次时间</span></span><br><span class="line">        <span class="string">&#x27;record_datetime&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;app01.task_celery.record_time&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: crontab(minute=<span class="string">&#x27;*/1&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: (),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment"># 配置定时任务</span></span><br><span class="line"></span><br><span class="line">    CELERY_QUEUES = (</span><br><span class="line">        Queue(<span class="string">&#x27;Default&#x27;</span>, exchange=Exchange(<span class="string">&#x27;default&#x27;</span>), routing_key=<span class="string">&#x27;default&#x27;</span>),</span><br><span class="line">        Queue(<span class="string">&#x27;queue1&#x27;</span>, exchange=Exchange(<span class="string">&#x27;queue1&#x27;</span>), routing_key=<span class="string">&#x27;queue1&#x27;</span>),</span><br><span class="line">        Queue(<span class="string">&#x27;queue2&#x27;</span>, exchange=Exchange(<span class="string">&#x27;queue2&#x27;</span>), routing_key=<span class="string">&#x27;queue2&#x27;</span>)</span><br><span class="line">    )  <span class="comment"># 定义任务执行的各个任务队列，默认有一个队列，暂称为一般任务队列。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果不指定QUEUE 那么就用Default</span></span><br><span class="line">    CELERY_DEFAULT_QUEUE = <span class="string">&#x27;Default&#x27;</span></span><br><span class="line">    CELERY_DEFAULT_EXCHANGE = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">    CELERY_DEFAULT_ROUTING_KEY = <span class="string">&#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CELERY_ROUTES = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;app01.tasks.add_two_num&quot;: &#123;</span></span><br><span class="line">    <span class="comment">#         &#x27;queue&#x27;: &#x27;queue1&#x27;,</span></span><br><span class="line">    <span class="comment">#         &#x27;exchange&#x27;: &#x27;queue1&#x27;,</span></span><br><span class="line">    <span class="comment">#         &#x27;routing_key&#x27;: &#x27;queue1&#x27;</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment"># &#125;  # Celery 路由设置，配置各个任务分配到不同的任务队列</span></span><br><span class="line"></span><br><span class="line">    INSTALLED_APPS = <span class="built_in">locals</span>().get(<span class="string">&#x27;INSTALLED_APPS&#x27;</span>, [])</span><br><span class="line">    INSTALLED_APPS += [</span><br><span class="line">        <span class="string">&#x27;djcelery&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">import</span> djcelery</span><br><span class="line"></span><br><span class="line">    djcelery.setup_loader()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>   如果是 4.x以上，需要参考<a href="https://docs.celeryproject.org/en/v5.1.2/userguide/configuration.html#new-lowercase-settings">官方文档</a>，修改配置参数键名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IS_USE_CELERY = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> IS_USE_CELERY:</span><br><span class="line">    CELERY_TIMEZONE = <span class="string">&quot;Asia/Shanghai&quot;</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    CELERY_ENABLE_UTC = <span class="literal">False</span>  <span class="comment"># 是否启动时区设置，默认值是True</span></span><br><span class="line"></span><br><span class="line">    CELERY_WORKER_CONCURRENCY = <span class="number">5</span>  <span class="comment"># 并发的worker数量</span></span><br><span class="line">    CELERY_WORKER_PREFETCH_MULTIPLIER = <span class="number">2</span>  <span class="comment"># 每次去消息队列读取任务的数量，默认值是4</span></span><br><span class="line">    CELERY_WORKER_MAX_TASKS_PER_CHILD = <span class="number">120</span>  <span class="comment"># 每个worker执行多少次任务后会死掉</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BROKER_URL = &quot;redis://127.0.0.1:6379/9&quot;  # 使用RabbitMQ 作为任务队列</span></span><br><span class="line">    CELERY_BROKER_URL = <span class="string">&quot;amqp://guest:guest@localhost:5672//&quot;</span>  <span class="comment"># 使用RabbitMQ 作为任务队列</span></span><br><span class="line"></span><br><span class="line">    CELERY_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>  <span class="comment"># 任务执行结果的超时时间</span></span><br><span class="line">    CELERY_TASK_TIME_LIMIT = <span class="number">60</span> * <span class="number">60</span>  <span class="comment"># 单个任务运行的时间限制，超时会被杀死，不建议使用该参数，而用CELERYD_SOFT_TIME_LIMIT</span></span><br><span class="line">    CELERY_TASK_SOFT_TIME_LIMIT = <span class="number">300</span></span><br><span class="line">    <span class="comment"># CELERY_RESULT_BACKEND = &quot;redis://127.0.0.1:6379/11&quot;  # 使用redis存储执行结果</span></span><br><span class="line">    CELERY_RESULT_BACKEND = <span class="string">&quot;django-db&quot;</span>  <span class="comment"># 使用ORM对应的数据库存储执行结果</span></span><br><span class="line"></span><br><span class="line">    CELERY_ACCEPT_CONTENT = [<span class="string">&#x27;pickle&#x27;</span>]</span><br><span class="line">    CELERY_TASK_SERIALIZER = <span class="string">&quot;pickle&quot;</span>  <span class="comment"># 任务序列化方式</span></span><br><span class="line">    CELERY_RESULT_SERIALIZER = <span class="string">&quot;pickle&quot;</span>  <span class="comment"># 结果的序列化方式</span></span><br><span class="line">    CELERY_WORKER_DISABLE_RATE_LIMITS = <span class="literal">False</span>  <span class="comment"># 关闭执行限速</span></span><br><span class="line"></span><br><span class="line">    CELERY_IMPORTS = [</span><br><span class="line">        <span class="string">&quot;app01.task_celery&quot;</span></span><br><span class="line">    ]  <span class="comment"># 配置导入各个任务的代码模块</span></span><br><span class="line"></span><br><span class="line">    CELERY_BEAT_SCHEDULER = <span class="string">&#x27;django_celery_beat.schedulers:DatabaseScheduler&#x27;</span>  <span class="comment"># 指明定时模块的加载位置</span></span><br><span class="line"></span><br><span class="line">    CELERY_BEAT_SCHEDULE = &#123;</span><br><span class="line">        <span class="string">&#x27;record_datetime&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;app01.task_celery.record_time&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: crontab(minute=<span class="string">&#x27;*/1&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: (),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment"># 配置定时任务</span></span><br><span class="line"></span><br><span class="line">    CELERY_TASK_QUEUES = (</span><br><span class="line">        Queue(<span class="string">&#x27;Default&#x27;</span>, exchange=Exchange(<span class="string">&#x27;default&#x27;</span>), routing_key=<span class="string">&#x27;default&#x27;</span>),</span><br><span class="line">        Queue(<span class="string">&#x27;queue1&#x27;</span>, exchange=Exchange(<span class="string">&#x27;queue1&#x27;</span>), routing_key=<span class="string">&#x27;queue1&#x27;</span>),</span><br><span class="line">        Queue(<span class="string">&#x27;queue2&#x27;</span>, exchange=Exchange(<span class="string">&#x27;queue2&#x27;</span>), routing_key=<span class="string">&#x27;queue2&#x27;</span>)</span><br><span class="line">    )  <span class="comment"># 定义任务执行的各个任务队列，默认有一个队列，暂称为一般任务队列。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果不指定QUEUE 那么就用Default</span></span><br><span class="line">    CELERY_TASK_DEFAULT_QUEUE = <span class="string">&#x27;Default&#x27;</span></span><br><span class="line">    CELERY_TASK_DEFAULT_EXCHANGE = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">    CELERY_TASK_DEFAULT_ROUTING_KEY = <span class="string">&#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CELERY_TASK_ROUTES = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;app01.tasks.add_two_num&quot;: &#123;</span></span><br><span class="line">    <span class="comment">#         &#x27;queue&#x27;: &#x27;queue1&#x27;,</span></span><br><span class="line">    <span class="comment">#         &#x27;exchange&#x27;: &#x27;queue1&#x27;,</span></span><br><span class="line">    <span class="comment">#         &#x27;routing_key&#x27;: &#x27;queue1&#x27;</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment"># &#125;  # Celery 路由设置，配置各个任务分配到不同的任务队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># INSTALLED_APPS = locals().get(&#x27;INSTALLED_APPS&#x27;, [])</span></span><br><span class="line">    INSTALLED_APPS += [</span><br><span class="line">        <span class="string">&#x27;django_celery_beat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;django_celery_results&#x27;</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>



<h2 id="task任务"><a href="#task任务" class="headerlink" title="task任务"></a>task任务</h2><blockquote>
<p>  <code>app01/tasks.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_num</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <code>app01/task_celery.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_time</span>():</span></span><br><span class="line">    path = os.path.join(settings.BASE_DIR, <span class="string">&#x27;time.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">f&#x27;<span class="subst">&#123;datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="任务异步调用"><a href="#任务异步调用" class="headerlink" title="任务异步调用"></a>任务异步调用</h2><blockquote>
<p>  如果任务直接在配置中指明任务队列，就不能再动态指明队列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> app01.tasks <span class="keyword">import</span> add_two_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        通过i值不同，模拟不同情况下，需要将任务放到不同的任务队列中执行，</span></span><br><span class="line"><span class="string">        如果 celery版本是3.x，不能在配置中写死</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = request.GET.get(<span class="string">&#x27;i&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">        i = <span class="built_in">int</span>(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                add_two_num.apply_async(args=[<span class="number">1000</span>, <span class="number">100</span>], queue=<span class="string">&#x27;queue1&#x27;</span>, routing_key=<span class="string">&#x27;queue1&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                add_two_num.apply_async(args=[<span class="number">1000</span>, <span class="number">100</span>], queue=<span class="string">&#x27;queue2&#x27;</span>, routing_key=<span class="string">&#x27;queue2&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;任务正在执行&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="动态创建定时任务"><a href="#动态创建定时任务" class="headerlink" title="动态创建定时任务"></a>动态创建定时任务</h2><blockquote>
<p>  celery3.x 使用 djcelery模块和django集成，celery4.x之后，不需要使用<code>djcelery</code>，但是如果想要动态创建定时任务及存储结果到SQL数据库中，可以使用 <a href="https://docs.celeryproject.org/en/v5.1.2/userguide/periodic-tasks.html#using-custom-scheduler-classes"><code>django-celery-beat</code></a>和 <a href="https://docs.celeryproject.org/en/v5.1.2/django/first-steps-with-django.html#django-celery-results-using-the-django-orm-cache-as-a-result-backend"><code>django-celery-results</code></a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> djcelery.models <span class="keyword">import</span> CrontabSchedule, PeriodicTask</span><br><span class="line"><span class="comment"># from django_celery_beat.models import CrontabSchedule, PeriodicTask</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        a = request.data.get(<span class="string">&#x27;a&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">        b = request.data.get(<span class="string">&#x27;b&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">        crontab, flag = CrontabSchedule.objects.get_or_create(minute=<span class="number">28</span>, hour=<span class="number">23</span>, day_of_month=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        task = PeriodicTask.objects.create(name=<span class="string">&#x27;app01.tasks.add_two_num&#x27;</span>, task=<span class="string">&#x27;app01.tasks.add_two_num&#x27;</span>,</span><br><span class="line">                                           crontab=crontab, args=[a, b])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;定时任务创建成功&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="celery服务启动"><a href="#celery服务启动" class="headerlink" title="celery服务启动"></a>celery服务启动</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># celery3.x</span></span><br><span class="line">python manage.py celery worker -Q queue1 -l info -n queue1@%d  <span class="comment"># 启动beat服务</span></span><br><span class="line">    </span><br><span class="line">python manage.py celery worker -Q default -l info  <span class="comment"># 针对默认队列启动worker服务</span></span><br><span class="line"></span><br><span class="line">python manage.py celery worker -Q queue1 -l info -n queue1@%d  <span class="comment"># 针对队列1启动worer服务</span></span><br><span class="line"></span><br><span class="line">python manage.py celery worker -Q queue2 -l info -n queue2@%d  <span class="comment"># 针对队列1启动worer服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># celery3.x 和celery4.x</span></span><br><span class="line">celery -A celery路径 beat -l info -Q 队列</span><br><span class="line">celery -A celery路径 worker -l info -Q 队列 -c worker数</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Celery</tag>
        <tag>异步操作</tag>
        <tag>定时</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB服务部署</title>
    <url>/2021/07/15/ZivhWd9qB/</url>
    <content><![CDATA[<p>在网站开发完成后，需要在服务器上线部署，而在这个过程中，需要借助一系列工具，以下借助flask服务演示部署上线的一系列步骤。</p>
<span id="more"></span>


<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/07/20180503191942330.png" alt="20180503191942330"></p>
<h2 id="五者之间的关系"><a href="#五者之间的关系" class="headerlink" title="五者之间的关系"></a>五者之间的关系</h2><blockquote>
<p>  客户端 (<code>client</code>)</p>
</blockquote>
<p>浏览器或者app。</p>
<blockquote>
<p>  web服务器 (如<code>nginx</code>)</p>
</blockquote>
<p>Web服务器是指驻留于因特网上某种类型计算机的程序。</p>
<p>当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件发送到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。服务器使用HTTP（超文本传输协议）进行信息交流，这就是人们常把它们称为HTTP服务器的原因。</p>
<p><strong>严格意义上Web服务器只负责处理HTTP协议，用于处理静态页面的内容;而动态内容需要通过WSGI接口交给应用服务器去处理。</strong><br>Web服务器包括<strong>Nginx</strong>，<strong>Apache</strong>，<strong>IIS</strong>等。而优秀的web服务器在接收http请求时，还可以做<strong>负载均衡</strong>和<strong>反向代理</strong>等工作。</p>
<blockquote>
<p>  WSGI容器 (如<code>Gunicorn</code>)</p>
</blockquote>
<p>常见的WSGI容器有<code>Gunicorn</code>，<code>uWSGI</code>等。web框架和web服务器之间需要通信，这时候需要设计一套双方都遵守的接口。</p>
<p><strong>PEP3333指出，WSGI(Web Server Gateway Interface)是WEB服务器和web框架或web应用之间建立的一种简单通用的接口规范。有了wsgi这份接口规范，在web开发的过程中，能更加自由的选择服务器端和框架；在服务器端和框架的开发过程能够分离开来，不用过多的考虑双方具体的实现，使得服务器端和框架开发者能够专心自己领域的开发工作。而WSGI容器就是根据这套接口写出来的。</strong></p>
<p>WSGI容器的作用就是根据web服务器传递而来的参数构建一个让WSGI应用成功执行的环境，例如request，而且还得把WSGI应用上处理好的结果返回给web服务器。此外<strong>WSGI容器也叫应用服务器</strong>。<br>注： 一般应用服务器都集成了web服务器，主要是为了调试方便，出于性能和稳定性考虑，并不能在生产环境中使用。</p>
<blockquote>
<p>  web框架 (如<code>Django</code>)</p>
</blockquote>
<p>作用主要是方便我们开发 web应用程序，HTTP请求的动态数据就是由 web框架层来提供的。常见的 web框架有<em>Flask</em>，<em>Django</em>，<em>Tornado</em>等，而Tornado不光是一个web框架，还实现了WSGI容器的功能。单纯的flask 自带的web服务器做下测试，会看到压力大的时候出现socket的问题，因为他是单进程单线程的。使用gunicorn来启动，响应速度和能力提升显著。</p>
<blockquote>
<p>  守护进程 (如<code>Supervisor</code>)</p>
</blockquote>
<p><code>Supervisor</code>是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。</p>
<p>除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p>
<h2 id="Gunicorn详解"><a href="#Gunicorn详解" class="headerlink" title="Gunicorn详解"></a>Gunicorn详解</h2><h3 id="Gunicorn是什么"><a href="#Gunicorn是什么" class="headerlink" title="Gunicorn是什么"></a>Gunicorn是什么</h3><blockquote>
<p>  Gunicorn（绿色独角兽）是一个用于UNIX的Python WSGI HTTP服务器。它是一个前叉工作者模型，从Ruby的Unicorn项目移植而来。 Gunicorn服务器与许多Web框架广泛兼容，轻松服务器资源并且速度相当快。</p>
</blockquote>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>  支持 WSGI，web2py，Django 和 Paster</li>
<li>  自动化工作流程管理</li>
<li>  简单的 Python 配置</li>
<li>  多个工人配置</li>
<li>  各种服务器挂钩，可扩展性</li>
<li>  兼容 Python 2.6+和 Python 3.2+</li>
</ul>
<p>Gunicorn 是一个 unix 上被广泛使用的高性能的 Python WSGI UNIX HTTP Server。和大多数的 web 框架兼容，并具有实现简单，轻量级，高性能等特点。</p>
<p>Gunicorn 服务器作为 wsgi app 的容器，能够与各种 Web 框架兼容（flask，django 等）,得益于 gevent 等技术，使用 Gunicorn 能够在基本不改变 wsgi app 代码的前提下，大幅度提高 wsgi app 的性能。</p>
<h4 id="服务模型-Server-Model"><a href="#服务模型-Server-Model" class="headerlink" title="服务模型(Server Model)"></a>服务模型(Server Model)</h4><p>Gunicorn 是基于 pre-fork 模型的。也就意味着有一个中心管理进程( master process )用来管理 worker 进程集合。Master 从不知道任何关于客户端的信息。所有的请求和响应处理都是由 worker 进程来处理的。</p>
<h4 id="Master-管理者"><a href="#Master-管理者" class="headerlink" title="Master(管理者)"></a>Master(管理者)</h4><p>主程序是一个简单的循环,监听各种信号以及相应的响应进程。master 管理着正在运行的 worker 集合,通过监听各种信号比如 TTIN, TTOU, and CHLD. TTIN and TTOU 响应的增加和减少 worker 的数目。CHLD 信号表明一个子进程已经结束了,在这种情况下 master 会自动的重启失败的 worker。</p>
<h4 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h4><p>woker 有很多种，包括：ggevent、geventlet、gtornado 等等。</p>
<p>这里主要分析 ggevent。每个 ggevent worker 启动的时候会启动多个 server 对象：worker 首先为每个 listener 创建一个 server 对象（注：为什么是一组 listener,因为 gunicorn 可以绑定一组地址,每个地址对于一个 listener），每个 server 对象都有运行在一个单独的 gevent pool 对象中。真正等待链接和处理链接的操作是在 server 对象中进行的。</p>
<h3 id="Gunicorn安装"><a href="#Gunicorn安装" class="headerlink" title="Gunicorn安装"></a>Gunicorn安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure>

<h3 id="Gunicorn使用"><a href="#Gunicorn使用" class="headerlink" title="Gunicorn使用"></a>Gunicorn使用</h3><h4 id="命令运行"><a href="#命令运行" class="headerlink" title="命令运行"></a>命令运行</h4><p>使用gunicorn监听请求，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunicorn -w 2 -b 0.0.0.0:8000 test.application</span><br></pre></td></tr></table></figure>

<p><code>-w</code>:指定fork的worker进程数<br><code>-b</code>:指定绑定的端口<br><code>test</code>:模块名,python文件名<br><code>application</code>:变量名,python文件中可调用的wsgi接口名称</p>
<h4 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h4><p>创建shell脚本，修改 运行权限，然后 <code>sudo ./bin/django_start.sh</code>启动服务即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="string">&quot;djangoblog&quot;</span> <span class="comment"># Name of the application</span></span><br><span class="line">DJANGODIR=/root/DjangoBlog <span class="comment"># Django project directory</span></span><br><span class="line">SOCKFILE=/root/DjangoBlog/run/gunicorn.sock <span class="comment"># we will communicte using this unix socket</span></span><br><span class="line">USER=root <span class="comment"># the user to run as</span></span><br><span class="line">GROUP=admin <span class="comment"># the group to run as</span></span><br><span class="line">NUM_WORKERS=3 <span class="comment"># how many worker processes should Gunicorn spawn</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DJANGODIR</span></span><br><span class="line">DJANGO_SETTINGS_MODULE=DjangoBlog.settings <span class="comment"># which settings file should Django use</span></span><br><span class="line">DJANGO_WSGI_MODULE=DjangoBlog.wsgi <span class="comment"># WSGI module name</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$NAME</span> as `whoami`&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate the virtual environment</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line">workon djangoblog</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=<span class="variable">$DJANGO_SETTINGS_MODULE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the run directory if it doesn&#x27;t exist</span></span><br><span class="line">RUNDIR=$(dirname $ SOCKFILE)</span><br><span class="line"><span class="built_in">test</span> -d <span class="variable">$RUNDIR</span> || mkdir -p <span class="variable">$RUNDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your Django Unicorn</span></span><br><span class="line"><span class="comment"># Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)</span></span><br><span class="line"><span class="built_in">exec</span> /root/.virtualenvs/djangoblog/bin/gunicorn <span class="variable">$&#123;DJANGO_WSGI_MODULE&#125;</span>:application \</span><br><span class="line">--name <span class="variable">$NAME</span> \</span><br><span class="line">--workers <span class="variable">$NUM_WORKERS</span> \</span><br><span class="line">--user=<span class="variable">$USER</span> --group=<span class="variable">$GROUP</span> \</span><br><span class="line">--log-level=debug \</span><br><span class="line">--log-file=-</span><br></pre></td></tr></table></figure>

<h2 id="Supervisor详解"><a href="#Supervisor详解" class="headerlink" title="Supervisor详解"></a>Supervisor详解</h2><h3 id="Supervisor是什么"><a href="#Supervisor是什么" class="headerlink" title="Supervisor是什么"></a>Supervisor是什么</h3><p>Supervisor在百度百科上给的定义是超级用户，监管员。Supervisor是一个进程管理工具，当进程中断的时候Supervisor能自动重新启动它。可以运行在各种类unix的机器上，supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</p>
<p>supervisor主要包含以下四个部分：</p>
<blockquote>
<p>  <code>supervisord</code></p>
</blockquote>
<p>这个是supervisor服务的主要管理器，负责管理我们配置的子进程，包括重启崩溃或异常退出的子进程，同时也响应来自客户端的请求。</p>
<blockquote>
<p>  <code>supervisorctl</code></p>
</blockquote>
<p>supervisord服务的客户端命令行, 可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</p>
<blockquote>
<p>  <code>Web Server</code></p>
</blockquote>
<p>和supervisorctl功能娉美。这个是通过web界面查看和控制进程状态。</p>
<blockquote>
<p>  <code>XML-RPC Interface</code></p>
</blockquote>
<p>服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，可以用来询问和控制管理程序及其运行的程序</p>
<h3 id="Supervisor安装"><a href="#Supervisor安装" class="headerlink" title="Supervisor安装"></a>Supervisor安装</h3><p>supervisor可以运行在大多数类UNIX系统，但是不能运行在任何windows系统，Supervisor运行在python3版本3.4或更高版本以及python2版本2.7上工作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure>

<h3 id="Supervisor使用"><a href="#Supervisor使用" class="headerlink" title="Supervisor使用"></a>Supervisor使用</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li>  确定一个目录，生成基本的配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>  创建子目录，存放子进程的配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/supervisord.d/</span><br></pre></td></tr></table></figure>

<ul>
<li>  修改主配置文件，指明子进程配置文件的路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件最后，打开 include项</span></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>  创建子进程配置文件，启动上一步的 django服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/supervisor/supervisord.d/djangoblog.conf</span></span><br><span class="line"></span><br><span class="line">[program:djangoblog]</span><br><span class="line"><span class="built_in">command</span>=/root/DjangoBlog/bin/django_start.sh  <span class="comment"># 执行上一步的脚本，启动服务</span></span><br><span class="line">user=root  <span class="comment"># 启动用户身份</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">redirect_stderr = <span class="literal">true</span></span><br><span class="line">stdout_logfile = /var/<span class="built_in">log</span>/djangoblog.log</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/djangoblog.err</span><br></pre></td></tr></table></figure>

<h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># supervisord服务</span></span><br><span class="line">supervisord -c /etc/supervisord.conf  <span class="comment"># 启动服务</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf  shutdown <span class="comment"># 关闭服务</span></span><br><span class="line">supervisorctl  -c /etc/supervisord.conf  reload  <span class="comment"># 重启服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisor子进程</span></span><br><span class="line">supervisorctl -c /etc/supervisord.conf <span class="comment"># 进入交互环境，可以管理子进程</span></span><br><span class="line">djangoblog                       RUNNING   pid 45163, uptime 0:00:09  </span><br><span class="line">supervisor&gt; update <span class="comment"># 更新配置后必须执行更新命令才生效</span></span><br><span class="line">supervisor&gt; start xxxx  <span class="comment"># 启动某个supervisor进程</span></span><br><span class="line">supervisor&gt; restart xxxx <span class="comment"># 重启某个supervisor进程</span></span><br><span class="line">supervisor&gt; start all <span class="comment"># 开启所有服务</span></span><br><span class="line">supervisor&gt; stop xxxx  <span class="comment"># 停止某个supervisor进程</span></span><br><span class="line">supervisor&gt; stop all <span class="comment"># 停止所有服务</span></span><br><span class="line">supervisor&gt; status <span class="comment"># 查看状态</span></span><br><span class="line">supervisor&gt; <span class="built_in">exit</span>  <span class="comment"># 退出交互环境</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx代理"><a href="#Nginx代理" class="headerlink" title="Nginx代理"></a>Nginx代理</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    listen       [::]:<span class="number">80</span>;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /root/DjangoBlog/;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        alias /root/DjangoBlog/collectedstatic/;</span><br><span class="line">        expires <span class="built_in">max</span>;</span><br><span class="line">        access_log        off;</span><br><span class="line">        log_not_found     off;</span><br><span class="line">    &#125;</span><br><span class="line">    location /media &#123;</span><br><span class="line">        # 静态文件配置</span><br><span class="line">        alias /root/DjangoBlog/uploads/;</span><br><span class="line">        expires <span class="built_in">max</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.py$ &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        <span class="keyword">if</span> (!-f $request_filename) &#123;</span><br><span class="line">            proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     # Load configuration files <span class="keyword">for</span> the default server block.</span><br><span class="line">     include /etc/nginx/default.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Supervisor</tag>
        <tag>Gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/2019/03/16/about/</url>
    <content><![CDATA[<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190503001321-067a64f3c5b7416d8d1f7ae7a79042eb%20.gif" alt="Me"></p>
]]></content>
  </entry>
  <entry>
    <title>python正则匹配</title>
    <url>/2019/05/23/c--BJoCGn/</url>
    <content><![CDATA[<p>现公司要开发一个业务管理系统，要求注册环节的密码需要提示用户其安全等级，密码按如下规则进行计分，并根据不同的得分为密码进行安全等级划分；此外，密码的组成可以由字母，数字，以及符号构成。</p>
<span id="more"></span>

<p>以下为密码分数判断选项，每项判断只能拿一个分项：</p>
<ul>
<li><p>密码长度:</p>
<ul>
<li>5 分: 小于等于4个字符</li>
<li>10 分: 5到7字符</li>
<li>25 分: 大于等于8个字符</li>
</ul>
</li>
<li><p>字母:</p>
<ul>
<li>0 分: 没有字母</li>
<li>10 分: 全都是小（大）写字母</li>
<li>20 分: 大小写混合字母</li>
</ul>
</li>
<li><p>数字:</p>
<ul>
<li>0 分: 没有数字</li>
<li>10 分: 1个数字</li>
<li>20 分: 大于1个数字</li>
</ul>
</li>
<li><p>符号:</p>
<ul>
<li>0 分: 没有符号</li>
<li>10 分: 1个符号</li>
<li>25 分: 大于1个符号</li>
</ul>
</li>
<li><p>奖励:</p>
<ul>
<li>2 分: 字母和数字</li>
<li>3 分: 字母、数字和符号</li>
<li>5 分: 大小写字母、数字和符号</li>
</ul>
</li>
</ul>
<p>最后的评分标准:</p>
<p>  大于等于90: 非常安全<br>  大于等于80: 安全<br>  大于等于70: 非常强<br>  大于等于 60: 强<br>  大于等于 50: 一般<br>  大于等于 25: 弱<br>  大于等于0:  非常弱</p>
<p>当用户输入一个密码字符串后，判断密码等级，并输出</p>
<p>输入描述：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">b12A3%</span><span class="bash"><span class="variable">$123</span></span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">非常安全</span><br></pre></td></tr></table></figure>

<p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s1</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.&#123;,4&#125;$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.&#123;5,7&#125;$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.&#123;8,&#125;$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s2</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;[^a-zA-Z]*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;([a-z]*$)|([A-Z]*$)&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.*(?=.*[a-z])(?=.*[A-Z]).*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s3</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;[^\d]*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;[^\d]*[\d][^\d]*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.*[\d]+.*[\d]+.*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s4</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;[^!@#$%^&amp;*?]*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;[^!@#$%^&amp;*?]*[!@#$%^&amp;*?][^!@#$%^&amp;*?]*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.*[!@#$%^&amp;*?]+.*[!@#$%^&amp;*?]+.*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s5</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.*(?=.*\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-z].*$)(?=.*[A-Z].*$).*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;(?=.*\d.*$)(?=.*[!@#$%^&amp;*?].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r&quot;.*(?=.*[\d].*$)(?=.*[a-zA-Z].*$).*$&quot;</span>, password):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">ret = <span class="built_in">sum</span>((s1(password), s2(password), s3(password), s4(password), s5(password)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ret &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非常安全&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;安全&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非常强&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;强&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret &gt;= <span class="number">50</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一般&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret &gt;= <span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;弱&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非常弱&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>正则匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios(二):API说明</title>
    <url>/2020/03/03/c2doD9K-a/</url>
    <content><![CDATA[<p>以下对axios的使用方式做一个简单说明，详细细节可以参数 axios中文文档。</p>
<span id="more"></span>

<h2 id="axios配置参数创建请求"><a href="#axios配置参数创建请求" class="headerlink" title="axios配置参数创建请求"></a>axios配置参数创建请求</h2><blockquote>
<p>axios中配置全局参数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(config)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>axios中指定url和参数配置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(url[, config])</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h2><blockquote>
<p>为方便起见，为所有支持的请求方法提供了别名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.request(config)</span><br><span class="line">axios.get(url[, config])</span><br><span class="line">axios.delete(url[, config])</span><br><span class="line">axios.head(url[, config])</span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NOTE:在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>
</blockquote>
<blockquote>
<p>axios请求方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios.post(<span class="string">&#x27;/user/12345&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote>
<p>处理并发请求的助手函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.all(iterable)</span><br><span class="line">axios.spread(callback)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行多个并发请求</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">.then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>VUE</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>O标记法与常见时间复杂度</title>
    <url>/2019/05/25/cYMAcCCWI/</url>
    <content><![CDATA[<blockquote>
<p>算法 : 内功心法, 是解决问题的一种思想</p>
</blockquote>
<span id="more"></span>

<h2 id="时间复杂度-T-n"><a href="#时间复杂度-T-n" class="headerlink" title="时间复杂度 $T(n)$"></a>时间复杂度 $T(n)$</h2><p>由于每台机器的性能有所差别，所有其执行相同代码的时间也长短不一，故而推出一种计量方式，统计代码执行基本运算（<code>函数调用需要看其源码的基本运算</code>）的数量（<code>n</code>) 来确定一个算法的优劣，其中基本运算的<strong>循环按乘法计算，顺序结构按加法计算，分支结构取最大值</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>): </span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">            <span class="keyword">if</span> a+b+c == <span class="number">1000</span> <span class="keyword">and</span> a**<span class="number">2</span> + b**<span class="number">2</span> + c**<span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;a,b,c,: &#123;&#125;, &#123;&#125;, &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a,b,c))</span><br></pre></td></tr></table></figure>

<p>上述代码的时间复杂度为<br>$T = 1000 * 1000 * 1000 * 2$<br>那么如果将上述代码中的 1000 改为 2000， 则<br>$T = 2000 * 2000 * 2000 * 2$<br>由于上述同样的代码由于不同的参数的 T 都不同，我们便将其统一成 <strong>N</strong>，这样上述代码的时间复杂度可以表示成：<br>$T = N * N * N * 2$<br>同样的我们抓住其主要 “<strong>矛盾</strong>” ，观其大，再将其简化成<br>$T= N^3$<br>这样同一段代码的时间复杂度便不会根据其参数而发生改变了。</p>
<h2 id="大-O-标记法-O"><a href="#大-O-标记法-O" class="headerlink" title="大 $O$ 标记法 $O()$"></a>大 $O$ 标记法 $O()$</h2><p>其实和求极限的原理相似，抓住问题的主要矛盾，忽略那些细枝末节，也就像前面的 $T$的最后的样子。</p>
<h2 id="时间复杂度的几条基本规则"><a href="#时间复杂度的几条基本规则" class="headerlink" title="时间复杂度的几条基本规则"></a>时间复杂度的几条基本规则</h2><ol>
<li><p>基本步骤: 即只有常数项, 算作 $O(1)$</p>
</li>
<li><p>基本结构顺序, 条件, 循环</p>
<ul>
<li><p>顺序结构: 按加法运算</p>
</li>
<li><p>循环结构: 乘法</p>
</li>
<li><p>分支结构: 取最大值</p>
</li>
</ul>
</li>
<li><p>判断一个算法效率, 往往只需要关注操作数量的最高次项, 其他次要的忽略</p>
</li>
<li><p>没特殊说明, 分析的时间复杂度都是<strong>最坏时间复杂度</strong></p>
</li>
</ol>
<h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><table>
<thead>
<tr>
<th>$T$</th>
<th>$O$</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>$12$</td>
<td>$O(1)$</td>
<td>常数阶</td>
</tr>
<tr>
<td>$2n+3$</td>
<td>$O(n)$</td>
<td>线性阶</td>
</tr>
<tr>
<td>$3n^2+2n+1$</td>
<td>$O(n^2)$</td>
<td>平方阶</td>
</tr>
<tr>
<td>$5log2n+20$</td>
<td>$O(log(n))$</td>
<td>对数阶</td>
</tr>
<tr>
<td>$2n+3nlog2n+19$</td>
<td>$O(nlog(n))$</td>
<td>$nlog(n)$ 阶</td>
</tr>
<tr>
<td>$6n^3+2n^2+3n+4$</td>
<td>$O(n^3)$</td>
<td>立方阶</td>
</tr>
<tr>
<td>$2^n$</td>
<td>$O(2^n)$</td>
<td>指数阶</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526105531-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9B%B2%E7%BA%BF%E5%9B%BE%20.png" alt="20190526105531-时间复杂度曲线图"></p>
<p>$$<br>O(1) &lt; O(log(n)) &lt; O(n) &lt; O(nlog(n)) &lt; O(n^2)&lt; O(n ^ 2log(n)) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)<br>$$</p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin OS 安装 NVIDIA驱动</title>
    <url>/2020/09/03/dS3-4LSfK/</url>
    <content><![CDATA[<p>本文介绍在Deepin操作系统中安装英伟达NVIDIA显卡驱动的方法。</p>
<span id="more"></span>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>一台电脑</li>
<li>Deepin15.10.2 系统</li>
<li>N 卡官网驱动</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="驱动下载"><a href="#驱动下载" class="headerlink" title="驱动下载"></a>驱动下载</h3><p>本教程以 <code>GTX1050</code> 为例，前往 <a href="https://www.nvidia.cn/geforce/drivers/">N 卡官网</a>下载对应的驱动 :</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20200826215347.png" alt="20200826215347"></p>
<p>然后选择一个下载即可，我下载的是<code>NVIDIA-Linux-x86_64-430.26.run</code>，最好不要下载最新的驱动，有可能有 Bug。(为可方便起见，建议更改文件名为 <code>001.run</code>，千万别忘了<code>. run</code>，该文件名只是为了好敲入命令。)</p>
<h3 id="禁用-nouveau-驱动"><a href="#禁用-nouveau-驱动" class="headerlink" title="禁用 nouveau 驱动"></a>禁用 nouveau 驱动</h3><ol>
<li><p>如果之前在 Deepin 中安装过 NVIDIA 驱动，请将其全部删除：</p>
<p>在终端执行命令: <code>sudo apt autoremove  nvidia</code>(没有可以跳过)</p>
</li>
<li><p>在终端执行命令:</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo dedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>

<p>然后在将以下内容复制到文件中</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line"></span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line"></span><br><span class="line">options nouveau modeset=0</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> nouveau off</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> lbm-nouveau off</span><br></pre></td></tr></table></figure>

<p>  保存退出</p>
</li>
<li><p>接下来在终端执行命令:</p>
 <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure></li>
<li><p>重启系统，再次进入系统，可能会发现分  辨率异常。(分辨率异常就说明成功禁用 nouveau 驱动重启系统，重启后查看是否生效，</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">lsmod |grep -i nouveau</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="NVIDIA-安装过程"><a href="#NVIDIA-安装过程" class="headerlink" title="NVIDIA 安装过程"></a>NVIDIA 安装过程</h3><ol>
<li><p>使用快捷键 <code>CTRL+ALT+F2</code> 进入终端，登录自己的账号 (就是用户名和密码)。</p>
</li>
<li><p>暂时关闭图形界面：</p>
 <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure></li>
<li><p>给下载好的 nvidia 驱动文件设置执行权限 (文件默认在 <code>/home/用户名/Downloads/</code> 目录下，用户名为你自己的用户名，如果你改文件名了，就填你改后的文件名，千万别填 <code>NVIDIA-Linux-x86_64-430.26.run</code>)。</p>
 <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x  /home/用户名/Downloads/NVIDIA-Linux-x86_64-430.26.run</span><br></pre></td></tr></table></figure></li>
<li><p>驱动安装：</p>
 <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo  sh  /home / 用户名 / Downloads/NVIDIA-Linux-x86_64-430.26.run</span><br></pre></td></tr></table></figure>

<p> (一系列 yes，还有一个界面选择 <code>install and cover</code>，意为安装和覆盖。)</p>
</li>
<li><p>重启系统：</p>
 <figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p> 安装完成后重启，执行 <code>nvidia-smi</code></p>
<p> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111147368.png" alt="20190922111147368"></p>
<p> 发现这时候其实 NVIDIA 的显卡并没有工作，<strong>显存一点都没占用</strong>。主要是由于我的电脑是双显卡，这时候其实依然是 intel 集成显卡在工作，所以还要做下面的工作。</p>
</li>
</ol>
<h3 id="设置默认-nvidia-显卡工作"><a href="#设置默认-nvidia-显卡工作" class="headerlink" title="设置默认 nvidia 显卡工作"></a>设置默认 nvidia 显卡工作</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">lspci | egrep <span class="string">&#x27;VGA|3D&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行上述命令获取 <code>nvidia</code> 显卡设备 <code>BusID</code>，例如: <code>01:00.0</code> 填写 <code>PCI:1:0:0</code>，</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111306609.png" alt="20190922111306609"></p>
<p> 然后编辑 <code>/etc/X11/xorg.conf</code>，注意其中 PCI 部分填写 <code>PCI:1:0:0</code>，</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">Section <span class="string">&quot;Module&quot;</span></span><br><span class="line">    Load <span class="string">&quot;modesetting&quot;</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">&quot;Device&quot;</span></span><br><span class="line">    Identifier <span class="string">&quot;nvidia&quot;</span></span><br><span class="line">    Driver <span class="string">&quot;nvidia&quot;</span></span><br><span class="line">    BusID <span class="string">&quot;PCI:X:X:X&quot;</span>       </span><br><span class="line">    Option <span class="string">&quot;AllowEmptyInitialConfiguration&quot;</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>

<p>编辑<code>~/.xinitrc</code>，</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">xrandr --setprovideroutputsource modesetting NVIDIA-0</span><br><span class="line">xrandr --auto</span><br><span class="line">xrandr --dpi 96</span><br></pre></td></tr></table></figure>

<p>编辑<code>/etc/lightdm/display_setup.sh</code>，</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">xrandr --setprovideroutputsource modesetting NVIDIA-0</span><br><span class="line">xrandr --auto</span><br><span class="line">xrandr --dpi 96</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo chmod +x  /etc/lightdm/display_setup.sh</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/etc/lightdm/lightdm.conf</code> 在 <code>[Seat:*]</code> 行下添加，</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">display-setup-script=/etc/lightdm/display_setup.sh</span><br></pre></td></tr></table></figure>

<p>重启动后，查看是否生效，<code>nvidia-smi</code></p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/20190922111512515.png" alt="20190922111512515"></p>
<p>发现已经生效。</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>JWS的python实现方案</title>
    <url>/2021/06/10/fCPDB_z1E/</url>
    <content><![CDATA[<p>在python中的 jws实现方案有以下两种：<code>pyjwt</code>、<code>itsdangerous</code>。</p>
<span id="more"></span>

<h2 id="pyjwt"><a href="#pyjwt" class="headerlink" title="pyjwt"></a><code>pyjwt</code></h2><blockquote>
<p>  很多框架的 token认证方案，都是对<code>pyjwt</code>的进一步封装， 如：DRF的 <code>restframework-jwt</code>、Flask的 <code>flask-jwt-extend</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">expiry = datetime.utcnow() + timedelta(seconds=<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line">secret = <span class="string">&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;exp&#x27;</span>: datetime.utcnow() + timedelta(seconds=<span class="number">30</span>),   <span class="comment"># 过期时间</span></span><br><span class="line">    <span class="string">&#x27;uid&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密, 得到 token字符串</span></span><br><span class="line">token = jwt.encode(payload, secret, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br><span class="line"><span class="comment"># head部分.payload载荷部分.签名部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密，校验签名</span></span><br><span class="line">payload = jwt.decode(encoded_jwt, secret,  algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"><span class="comment"># 如果 token 被修改过后，则会抛出 DecodeError: Signature verification failed</span></span><br><span class="line"><span class="comment"># 如果 token 过期后，则会抛出 ExpiredSignatureError: Signature has expired</span></span><br></pre></td></tr></table></figure>

<p>生成的token：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">b&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MjMzMzk0MjQsInVpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.c__sgvA9VOv54T1R5Nm8Z4scFBMEgHo46xVF3PxtaRw&#x27;</span><br></pre></td></tr></table></figure>

<p>进行base64解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> base64</span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]: base64.decodebytes(<span class="string">b&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b&#x27;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;&#x27;</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">3</span>]: base64.decodebytes(<span class="string">b&#x27;eyJleHAiOjE2MjMzMzk0MjQsInVpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9&#x27;</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b&#x27;&#123;&quot;exp&quot;:1623337821,&quot;uid&quot;:1,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="itsdangerous"><a href="#itsdangerous" class="headerlink" title="itsdangerous"></a><code>itsdangerous</code></h2><blockquote>
<p>  <code>ItsDangerous</code>默认使用<code>HMAC</code>和<code>SHA-512</code>进行签名, 生成<strong>临时身份令牌</strong></p>
</blockquote>
<p>有时您只想将一些数据发送到不受信任的环境。但是如何安全地做到这一点？诀窍就是签名。只要知道一个密钥，您就可以对数据进行加密签名并将其移交给其他人。当您取回数据时，可以轻松确保没有人篡改数据。使用<code>itsdangerous</code>可以实现此种方案。</p>
<p>例如： 想通过邮件让用户注册激活的时候地址当中带有用户的信息。但是信息一般都是敏感信息，而且还想让它具有时效性，所以就可以选择<code>itsdangerous</code>模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> SignatureExpired, BadSignature, BadData</span><br><span class="line"></span><br><span class="line">expiry = <span class="number">60</span></span><br><span class="line">secret = <span class="string">&#x27;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9&#x27;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;uid&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建序列化器对象</span></span><br><span class="line">serializer = TimedJSONWebSignatureSerializer(secret, expires_in=expiry)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">token = serializer.dumps(payload)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br><span class="line"><span class="comment"># head部分.payload载荷部分.签名部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密，校验签名</span></span><br><span class="line">payload = serializer.loads(token)</span><br><span class="line"><span class="built_in">print</span>(payload )</span><br><span class="line"><span class="comment"># 如果 token 被修改过后，则会抛出 BadSignature: Signature b&#x27;xxx&#x27; does not match</span></span><br><span class="line"><span class="comment"># 如果 token 过期后，则会抛出 SignatureExpired: Signature expired</span></span><br></pre></td></tr></table></figure>

<p>生成的token：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">b&#x27;eyJhbGciOiJIUzUxMiIsImlhdCI6MTYyMzMzODcwNiwiZXhwIjoxNjIzMzM4NzY2fQ.eyJ1aWQiOjEsInVzZXJuYW1lIjoiYWRtaW4ifQ._cpzkgKX-u7w8r57BGbwMHEg-EkHdJKjC74x_gPvrSGkPq5mrjmAXWFMSit0l_RGV-DzUJA09kEL6uX-ReCL0g&#x27;</span><br></pre></td></tr></table></figure>

<p>进行base64解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> base64</span><br><span class="line">    </span><br><span class="line">In [<span class="number">2</span>]: base64.decodebytes(<span class="string">b&#x27;eyJhbGciOiJIUzUxMiIsImlhdCI6MTYyMzMzODcwNiwiZXhwIjoxNjIzMzM4NzY2fQ==&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b&#x27;&#123;&quot;alg&quot;:&quot;HS512&quot;,&quot;iat&quot;:1623338706,&quot;exp&quot;:1623338766&#125;&#x27;</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">3</span>]: base64.decodebytes(<span class="string">b&#x27;eyJ1aWQiOjEsInVzZXJuYW1lIjoiYWRtaW4ifQ==&#x27;</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b&#x27;&#123;&quot;uid&quot;:1,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><blockquote>
<p>  对字符串进行base64 解码时，有时候会出现 <code>Incorrect padding</code>:</p>
</blockquote>
<p>因为输入的base64编码字符串必须符合base64的padding规则：</p>
<ul>
<li><p>  当原数据长度不是3的整数倍时, 如果最后剩下两个输入数据，在编码结果后加1个“=”；</p>
</li>
<li><p>  如果最后剩下一个输入数据，编码结果后加2个“=”；</p>
</li>
<li><p>  如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</p>
</li>
</ul>
<p>因此，在对上面的 <code>itsdangerous</code> 生成的token进行base64 解码时，需要补上对应的 <code>=</code></p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>GIL全局解释器锁</title>
    <url>/2021/08/08/fqRfBbmth/</url>
    <content><![CDATA[<p>GIL：又叫全局解释器锁，每个线程在执行的过程中都需要先获取GIL，保证同一时刻只有一个线程在运行，目的是解决多线程同时竞争程序中的全局变量而出现的线程安全问题。它并不是python语言的特性，仅仅是由于历史的原因在CPython解释器中难以移除，因为python语言运行环境大部分默认在CPython解释器中。</p>
<span id="more"></span>

<p>多线程下每个线程在执行的过程中都需要先获取GIL，保证同一时刻只有一个线程在运行。</p>
<p>由于GIL的存在，<strong>即使是多线程，事实上同一时刻只能保证一个线程在运行</strong>，既然这样多线程的运行效率不就和单线程一样了吗，那为什么还要使用多线程呢？</p>
<p>由于以前的电脑基本都是单核CPU，多线程和单线程几乎看不出差别，可是由于计算机的迅速发展，现在的电脑几乎都是多核CPU了，这时差别就出来了：即使在多核CPU中，多线程同一时刻也只有一个线程在运行，这样不仅不能利用多核CPU的优势，反而由于每个线程在多个CPU上是交替执行的，导致在不同CPU上切换时造成资源的浪费，反而会更慢。即原因是一个进程只存在一把gil锁，当在执行多个线程时，内部会争抢gil锁，这会造成当某一个线程没有抢到锁的时候会让cpu等待，进而不能合理利用多核cpu资源。</p>
<p>说到在这里要先介绍两个概念：<strong>计算密集型</strong>和<strong>IO密集型</strong></p>
<p><strong>计算密集型</strong>：要进行大量的数值计算，例如进行上亿的数字计算、计算圆周率、对视频进行高清解码等等。这种计算密集型任务虽然也可以用多任务完成，但是花费的主要时间在任务切换的时间。这类情况使用多进程实现多任务，可以充分利用多核cpu。</p>
<p><strong>IO密集型</strong>：涉及到网络请求(time.sleep())、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。这类情况使用多线程实现多任务，速度要超过单线程的。</p>
<blockquote>
<p>  解决GIL问题的方案：</p>
</blockquote>
<ul>
<li>  使用其他语言的解释器，如java的解释器jython</li>
<li>  使用其它语言实现多线程，例如C,Java</li>
<li>  使用多进程，是可以利用多核的CPU资源的</li>
</ul>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的CLI工具</title>
    <url>/2020/12/27/gBx3frnV0/</url>
    <content><![CDATA[<h2 id="Starship"><a href="#Starship" class="headerlink" title="Starship"></a>Starship</h2><p>如果必须要从本篇文章中选择一个我最喜欢的终端工具——那非 <code>Starship</code> 莫属。<code>Starship</code> 可以适用于任何 Shell。你只需要安装它，然后在相应的配置文件<code>.bashrc</code>/<code>.zshrc</code>添加一行配置，剩下的工作交给它来完成就好了。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(starship init bash)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>它可以做到：</p>
<ul>
<li>根据你是否在代码仓库中添加了新文件、是否修改了文件、是否暂存了文件等情况，用相应的符号表示 <code>git</code> 仓库的状态。</li>
<li>根据你所在的 <code>Python</code> 项目目录，展示 Python 的版本号，这也适用于 <code>Go</code>/<code>Node</code>/<code>Rust</code>/<code>Elm</code> 等其他编程语言环境。</li>
<li>展示上一个命令执行所用的时间，指令运行时间必须在毫秒级别。</li>
<li>  如果上一个命令执行失败，会展示相应的错误提示符。</li>
</ul>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640.jpeg">  </p>
<p>还有不计其数的其他信息可以展示。但是，它能以更加友好的形式智能地给你呈现!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># startship 个性化配置</span></span><br><span class="line">[character]      <span class="comment"># 正在配置的组件名称是“character”</span></span><br><span class="line">symbol = <span class="string">&quot;&gt;&quot;</span>  <span class="comment"># 提示符中在输入文本之前显示的符号</span></span><br><span class="line">error_symbol = <span class="string">&quot;✗&quot;</span> <span class="comment"># 如果上一条命令失败，提示符中在输入文本之前显示的符号</span></span><br><span class="line">use_symbol_for_status = <span class="literal">true</span> <span class="comment"># 指示是否改变显示符号来指出错误状态</span></span><br><span class="line">style_success = <span class="string">&quot;bold green&quot;</span>	<span class="comment"># 上次命令成功时使用的样式</span></span><br><span class="line">style_failure = <span class="string">&quot;bold red&quot;</span>	<span class="comment"># 上次命令失败时使用的样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 starship 扫描当前目录下的文件和文件夹时，最多使用 10 毫秒</span></span><br><span class="line">scan_timeout = 10</span><br><span class="line"></span><br><span class="line">[battery]</span><br><span class="line">full_symbol = <span class="string">&quot;🔋&quot;</span> <span class="comment"># 电量满标志</span></span><br><span class="line">charging_symbol = <span class="string">&quot;⚡️&quot;</span> <span class="comment"># 充电标志</span></span><br><span class="line">discharging_symbol = <span class="string">&quot;💀&quot;</span> <span class="comment"># 放电标志</span></span><br><span class="line"></span><br><span class="line">[[battery.display]]  <span class="comment"># 当电量在 0% 到 30% 时以 &quot;bold red&quot; 样式显示</span></span><br><span class="line">threshold = 30</span><br><span class="line">style = <span class="string">&quot;bold red&quot;</span></span><br><span class="line"></span><br><span class="line">[[battery.display]]  <span class="comment"># 当电量在 30% 到 100% 时以 &quot;bold yellow&quot; 样式显示</span></span><br><span class="line">threshold = 100</span><br><span class="line">style = <span class="string">&quot;bold yellow&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[cmd_duration]</span><br><span class="line">min_time = 100 <span class="comment"># 显示此组件所需的最短执行时长</span></span><br><span class="line">prefix = <span class="string">&quot;underwent &quot;</span> <span class="comment"># 直接在执行时长前显示的前缀</span></span><br><span class="line">style = <span class="string">&quot;bold yellow&quot;</span> <span class="comment"># 此组件的样式</span></span><br><span class="line"></span><br><span class="line">[directory] <span class="comment"># 显示当前目录的路径</span></span><br><span class="line">truncation_length = 8 <span class="comment"># 当前目录路径被截断后最多保留的父目录数量。</span></span><br><span class="line">truncate_to_repo = <span class="literal">true</span> <span class="comment"># 是否只截断到您当前处于的 git 仓库根目录下。</span></span><br><span class="line">prefix = <span class="string">&quot;in&quot;</span> <span class="comment"># 直接在显示路径前显示的前缀。</span></span><br><span class="line">style = <span class="string">&quot;bold cyan&quot;</span> <span class="comment"># 此组件的样式。</span></span><br><span class="line"></span><br><span class="line">[time]</span><br><span class="line">disabled = <span class="literal">false</span> <span class="comment"># 启用时间组件</span></span><br><span class="line">use_12hr = <span class="literal">false</span> <span class="comment"># 禁用12小时制</span></span><br><span class="line">format = <span class="string">&quot;🕙[ %T ]&quot;</span> <span class="comment"># 时间格式</span></span><br><span class="line">time_range = <span class="string">&quot;-&quot;</span> <span class="comment"># 显示时间的范围，必须是24小时制</span></span><br></pre></td></tr></table></figure>

<p>官网地址：<a href="https://starship.rs/">https://starship.rs/</a></p>
<h2 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h2><p>fzf— fuzzy finder，即模糊查找器。它是一种通用工具，可让你使用模糊搜索来查找文件、历史命令、进程、git 提交等。你键入一些字母，它会尝试匹配结果列表中任何位置的字母。输入的字母越多，结果也就越准确。你可能在其他的代码编辑器中有过这种类型的搜索使用体验——当你想打开某个文件时，只键入文件名的一部分而不用输入完整路径就能进行查找——这就是模糊搜索。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220059861.jpeg">  </p>
<p>我通过 fish fzf 插件插件使用它，因此我可以搜索命令历史记录或快速打开文件。这是可以每天为我节省不少时间的一个非常棒的工具。</p>
<p>fzf默认会以“extened-search”模式启动， 这种模式下你可以输入多个以空格分隔的搜索关键词， 如<code>^music .mp3$</code>, <code>sbtrkt !fire</code>.</p>
<table>
<thead>
<tr>
<th>Token</th>
<th>Match type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>sbtrkt</td>
<td>fuzzy-match</td>
<td>匹配sbtrkt</td>
</tr>
<tr>
<td>^music</td>
<td>prefix-exact-match</td>
<td>以music开头</td>
</tr>
<tr>
<td>.mp3^</td>
<td>suffix-exact-match</td>
<td>以.mp3结尾</td>
</tr>
<tr>
<td>‘wild</td>
<td>exact-match(quoted)</td>
<td>精确包含wild</td>
</tr>
<tr>
<td>!fire</td>
<td>inverse-exact-match</td>
<td>不包含fire</td>
</tr>
<tr>
<td>!.mp3$</td>
<td>inverse-suffix-exact-match</td>
<td>不以.mp3结尾</td>
</tr>
</tbody></table>
<p>如果你不想用fuzzy match， 可以用<code>fzf -e</code>做精确匹配<br>符号”|”可以做or匹配， 比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^core go$|rb$|py$</span><br></pre></td></tr></table></figure>

<p>表示以core开头，以go或rb或py结尾的</p>
<p>下载地址：<a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a></p>
<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p>类似于系统自带的 <code>find</code> 命令，但使用起来更简单，查找速度更快，并且具有良好的默认设置。</p>
<h3 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h3><p><em>fd</em>设计用于查找文件系统中的条目. 你可以执行的最基本的搜索就是运行一个参数:搜索模式的<em>fd</em>. 例如,假设您想查找您的旧脚本 (包括<code>netflix</code>) :</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; fd netfl</span><br><span class="line">Software/python/imdb-ratings/netflix-details.py</span><br></pre></td></tr></table></figure>

<p>如果只调用一个这样的参数,<em>fd</em>递归检索当前目录中, <em>包含</em>模式<code>netfl</code>的任何条目.</p>
<h3 id="正则表达式搜索"><a href="#正则表达式搜索" class="headerlink" title="正则表达式搜索"></a>正则表达式搜索</h3><p>搜索模式被视为正则表达式. 这里,我们搜索开始<code>x</code>并以<code>rc</code>结束的条目. :</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> /etc</span><br><span class="line">&gt; fd <span class="string">&#x27;^x.*rc$&#x27;</span></span><br><span class="line">X11/xinit/xinitrc</span><br><span class="line">X11/xinit/xserverrc</span><br></pre></td></tr></table></figure>

<h3 id="指定根目录"><a href="#指定根目录" class="headerlink" title="指定根目录"></a>指定根目录</h3><p>如果我们想搜索一个特定的目录,它可以作为第二个参数<em>fd</em>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; fd passwd /etc</span><br><span class="line">/etc/default/passwd</span><br><span class="line">/etc/pam.d/passwd</span><br><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="仅运行fd"><a href="#仅运行fd" class="headerlink" title="仅运行fd"></a>仅运行<em>fd</em></h3><p><em>fd</em>可以不带参数调用. 这是非常有用的,以便快速地查看当前目录中的所有条目,递归地 (类似于<code>ls -R</code>) :</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> fd/tests</span><br><span class="line">&gt; fd</span><br><span class="line">testenv</span><br><span class="line">testenv/mod.rs</span><br><span class="line">tests.rs</span><br></pre></td></tr></table></figure>

<h3 id="搜索特定的文件扩展名"><a href="#搜索特定的文件扩展名" class="headerlink" title="搜索特定的文件扩展名"></a>搜索特定的文件扩展名</h3><p>通常,我们对特定类型的所有文件感兴趣. 这可以用<code>-e</code> (或) <code>--extension</code>选择权. 在这里,我们搜索FD仓库中的所有md文件:</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> fd</span><br><span class="line">&gt; fd -e md</span><br><span class="line">CONTRIBUTING.md</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure>

<p>这个<code>-e</code>选项可以与搜索模式结合使用:</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; fd -e rs mod</span><br><span class="line">src/fshelper/mod.rs</span><br><span class="line">src/lscolors/mod.rs</span><br><span class="line">tests/testenv/mod.rs</span><br></pre></td></tr></table></figure>

<p>下载地址：<a href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a></p>
<h2 id="ripgrep"><a href="#ripgrep" class="headerlink" title="ripgrep"></a>ripgrep</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220618373.gif"></p>
<p>上图为 grep（左）与 rg（右）命令执行时的对比。</p>
<p>与上述<code>fd</code>指令类似，<code>ripgrep</code>是<code>grep</code>命令的替代方法， 不过<code>ripgrep</code>的执行速度更快，而且具有健全的默认配置以及丰富的彩色输出。</p>
<p>它同样会跳过被<code>.gitignore</code>忽略以及隐藏的文件，因此如果有特殊需要，我们可以设置指令别名：<code>rga =&#39;rg -uuu&#39;</code>。它会禁用所有智能筛选，并使<code>ripgrep</code>的表现与标准的 grep 指令一致。</p>
<h3 id="简单搜索-1"><a href="#简单搜索-1" class="headerlink" title="简单搜索"></a>简单搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls | rg App</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式搜索-1"><a href="#正则表达式搜索-1" class="headerlink" title="正则表达式搜索"></a>正则表达式搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls | rg ^App.*$</span><br></pre></td></tr></table></figure>

<h3 id="指定文件搜索"><a href="#指定文件搜索" class="headerlink" title="指定文件搜索"></a>指定文件搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rg  ^def.*$ 01_two-sum.py</span><br></pre></td></tr></table></figure>

<p>下载地址：<a href="https://github.com/BurntSushi/ripgrep">https://github.com/BurntSushi/ripgrep</a></p>
<h2 id="htop-和-glances"><a href="#htop-和-glances" class="headerlink" title="htop 和 glances"></a>htop 和 glances</h2><p>在 Linux 或 Mac 上显示进程运行状态信息最常用工具是我们熟悉的<code>top</code>，它是每位系统管理员的好帮手。而且，即使是像我一样主要从事网络开发，查看计算机的运行状况也很有用。你知道，只是看一下当前到底是 Docker 进程还是 Chrome 进程吃掉了你所有的 RAM，应该如何做吗？</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220647892.jpeg">  </p>
<p><code>htop</code>工具是<code>top</code>工具的绝佳替代品。</p>
<p><code>top</code>工具是非常基础的监控工具，提供的功能有限，因此很多人转去使用 htop。<code>htop</code>比起<code>top</code>，优势很明显——除了功能更加完善以外，它的色彩搭配也很丰富，整体上使用起来更加友好。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220657583.jpeg">  </p>
<p>借助 glances，还可以让你一目了然地快速了解系统当前状态。</p>
<p>glances 是<code>htop</code>的补充工具。除了列出所有进程及其 CPU 和内存使用情况之外，它还可以显示有关系统的其他信息，比如：</p>
<ul>
<li>网络及磁盘使用情况</li>
<li>文件系统已使用的空间和总空间</li>
<li>来自不同传感器（例如电池）的数据</li>
<li>  以及最近消耗过多资源的进程列表</li>
</ul>
<p>我选择使用<code>htop</code>来筛选和终止进程，因为对我来讲，效率提高了不少，我也使用 <code>glances</code>可以快速浏览一下计算机的运行状况。它提供 API 接口、Web UI 以及支持各种导出格式，因此你可以将系统监视提高到一个新 Level。因此我在这里强烈推荐一波！</p>
<p>htop 下载地址：<a href="https://hisham.hm/htop/">https://hisham.hm/htop/</a></p>
<p>glances 下载地址：<a href="https://nicolargo.github.io/glances/">https://nicolargo.github.io/glances/</a></p>
<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>Virtualenv 是用于在 Python 中创建虚拟环境的工具（比起内置的<code>venv</code>模块，我更喜欢 Virtualenv）。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220804528.jpeg">  </p>
<p>virtualenvwrapper 是 virtualenv 的虚拟环境管理器。它提供了许多命令来执行快速创建、列出或删除虚拟环境等操作。</p>
<p>virtualenv 下载地址：</p>
<p><a href="https://pypi.org/project/virtualenv/">https://pypi.org/project/virtualenv/</a></p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220810324.jpeg"></p>
<p>如果你使用的是 Mac，那我就无需再介绍 Homebrew 了。它是 macOS 上被业界普遍认可的软件包管理器。</p>
<p>下载地址：<a href="https://brew.sh/">https://brew.sh/</a>  </p>
<p>在Mac下面安装Mysql、Redis、Node之类软件的时候，比较方便的方式是使用Homebrew（号称是The missing package manager for OS X）。不过Homebrew是命令行方式，用起来不是那么的友好，所以就有了Cakebrew。</p>
<p>网站：<a href="https://www.cakebrew.com/">https://www.cakebrew.com/</a></p>
<p>非常友好的图形界面，使用起来简单快捷。</p>
<p>而LaunchRocket呢，则是一个帮助管理Homebrew安装的服务的软件，比如你使用Homebrew安装的Mysql、Redis、MongoDB，是让它自启动呢，还是手动启动，传统方式需要使用命令行的命令，而使用LaunchRocket则可以在图形界面中进行管理了！</p>
<p>网站：<a href="https://github.com/jimbojsb/launchrocket">https://github.com/jimbojsb/launchrocket</a></p>
<h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>你可以通过<code>brew install tree</code>安装该工具。如果要查看给定目录的内容，那么 tree 是执行此操作的必备工具。它能以漂亮的树状结构显示所有子目录及文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── recovery.md</span><br><span class="line">├── README.md</span><br><span class="line">├── archive</span><br><span class="line">├── automator</span><br><span class="line">│   ├── Open\\ Iterm2.workflow</span><br><span class="line">│   │   └── Contents</span><br><span class="line">│   │       ├── Info.plist</span><br><span class="line">│   │       ├── QuickLook</span><br><span class="line">│   │       │   └── Thumbnail.png</span><br><span class="line">│   │       └── document.wflow</span><br><span class="line">│   └── Start\\ Screen\\ Saver.workflow</span><br><span class="line">├── brew-cask.sh</span><br></pre></td></tr></table></figure>

<h2 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220820634.jpeg"></p>
<p>类似于在终端中常用的用于显示文件内容的<code>cat</code>命令，但是<code>bat</code>效果更佳。</p>
<p>它增加了语法高亮显示，git gutter 标记（如果适用），自动分页（如果文件很大）等功能，并且使得输出的内容阅读起来更加友好。</p>
<p>bat 下载地址：<a href="https://github.com/sharkdp/bat">https://github.com/sharkdp/bat</a></p>
<h2 id="httpie"><a href="#httpie" class="headerlink" title="httpie"></a>httpie</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220827622.gif"></p>
<p>如果你需要发送一些 HTTP 请求，但发现使用<code>curl</code>不够直观，那么请尝试一下<code>httpie</code>。这是一款非常好用的<code>curl</code>替代工具。合理的默认配置以及简洁的语法使它更易于使用，命令返回也是彩色输出，甚至支持为不同类型的身份验证安装相应的插件。</p>
<p>httpie 下载地址：<a href="https://httpie.org/">https://httpie.org/</a></p>
<h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p>简化版的命令帮助手册。“man pages” 包含了 Linux 软件的手册，这些手册解释了如何使用给定的命令。你可以尝试运行<code>man cat</code>或<code>man grep</code>来查看相关命令的帮助手册。它们描述的非常详细，有时可能难以掌握。因此，<code>tldr</code>社区的目的，就是将每个命令的帮助手册进行简化，方便用户查阅。</p>
<p><code>tldr</code>适用于几乎所有的受欢迎的软件。正如我提到的，这是社区的努力和功劳，虽然不太可能包含所有的软件的简化帮助手册。但是当某个帮助手册被纳入管理并起作用时，它提供的信息通常就是你要查找的内容。</p>
<p>比如，如果你要创建一些文件的 gzip 压缩存档，<code>man tar</code>可以为你提供可能的参数选择。而<code>tldr tar</code>会列出一些我们常见的示例——如图所示，第二个示例正是你要执行的操作：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220836708.jpeg">  </p>
<p>“man pages” 展示的信息太全面了，但是很多时候使用<code>tldr</code>可以更快地帮你找到特定信息，这才是用户真正想要的。</p>
<p>tldr 下载地址：<a href="https://tldr.sh/">https://tldr.sh/</a></p>
<h2 id="exa"><a href="#exa" class="headerlink" title="exa"></a>exa</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220843370.jpeg"></p>
<p><code>exa</code>是<code>ls</code>命令的一个可替代方案。</p>
<p>它色彩艳丽，还可以显示 git 状态等其他信息，自动将文件大小转换为方便人们阅读的单位，并且所有这些都保持与<code>ls</code>几乎相同的执行速度。虽然我很喜欢这个工具并推荐给你们，但由于某种原因，我仍然坚持使用 ls。</p>
<p>exa 下载地址：<a href="https://the.exa.website/">https://the.exa.website/</a></p>
<h2 id="litecli-和-mycli"><a href="#litecli-和-mycli" class="headerlink" title="litecli 和 mycli"></a>litecli 和 mycli</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220850333.gif"></p>
<p>这是我首选的 SQLite 和 mysql的解决方案。借助自动提示和语法突出显示，它们比默认的<code>sqlite3</code>和<code>mysql</code>工具要好用很多。</p>
<p>litecli 下载地址：<a href="https://litecli.com/">https://litecli.com/</a></p>
<p>mycli 下载地址：<a href="https://www.mycli.net/">https://www.mycli.net/</a></p>
<h2 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/640-20201227220855650.jpeg"></p>
<p>这是在终端进行磁盘分析时使用的工具，它使用起来简单快捷。当我需要释放一些硬盘空间时，会默认使用这款工具。</p>
<p>ncdu 下载地址：<a href="https://dev.yorhel.nl/ncdu">https://dev.yorhel.nl/ncdu</a></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境配置</title>
    <url>/2020/04/11/gJvDJfEV1/</url>
    <content><![CDATA[<p>本篇文章将介绍如何在本地搭建Python开发环境。</p>
<p>Python可应用于多平台包括 Linux 和 Mac OS X。</p>
<p>你可以通过终端窗口输入 “python” 命令来查看本地是否已经安装Python以及Python的安装版本。</p>
<span id="more"></span>


<h2 id="Python环境配置"><a href="#Python环境配置" class="headerlink" title="Python环境配置"></a>Python环境配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">brew install python  <span class="comment"># 这一步安装了python3和pip3</span></span><br><span class="line">brew install python@2 <span class="comment"># 这一步安装了python2和pip2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ipython2</span></span><br><span class="line">pip install ipython </span><br><span class="line"><span class="comment"># ipython3</span></span><br><span class="line">pip3 install ipython </span><br></pre></td></tr></table></figure>

<h2 id="pip镜像源"><a href="#pip镜像源" class="headerlink" title="pip镜像源"></a>pip镜像源</h2><h3 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h3><ul>
<li>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></li>
<li>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code></li>
<li>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></li>
<li>华中理工大学：<code>http://pypi.hustunique.com/</code></li>
<li>山东理工大学：<code>http://pypi.sdutlinux.org/</code></li>
<li>豆瓣：<code>http://pypi.douban.com/simple/</code></li>
</ul>
<h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><h4 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="Linux/Mac"></a>Linux/Mac</h4><p>修改 <code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件。文件夹要加<code>.</code>，表示是隐藏文件夹)</p>
<blockquote>
<p>内容如下</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>直接在 user 目录中创建一个 pip 目录，如：<code>C:\Users\xx\pip</code>，新建文件<code>pip.ini</code>。内容同上。</p>
<h3 id="终端修改"><a href="#终端修改" class="headerlink" title="终端修改"></a>终端修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class="comment"># 终端使用命令设置pip镜像</span></span><br><span class="line">pip install pip -U  <span class="comment"># 升级pip包管理工具</span></span><br></pre></td></tr></table></figure>

<h2 id="虚拟环境之pipenv"><a href="#虚拟环境之pipenv" class="headerlink" title="虚拟环境之pipenv"></a>虚拟环境之pipenv</h2><ol>
<li><p>安装<code>pipenv</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>pipenv</code>创建虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 尽量在一个项目目录下创建虚拟环境</span></span><br><span class="line"><span class="built_in">cd</span> youfolder</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure></li>
<li><p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在创建虚拟环境的位置运行命令</span></span><br><span class="line">pipenv shell</span><br></pre></td></tr></table></figure></li>
<li><p>修改虚拟环境的镜像源</p>
<p> 打开虚拟环境下的配置文件: <code>Pipfile</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">source</span>]</span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://pypi.org/simple&quot;</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">[dev-packages]</span><br><span class="line">    </span><br><span class="line">[packages]</span><br><span class="line">    </span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">&quot;3.7&quot;</span></span><br></pre></td></tr></table></figure>
<p> 修改<code>url</code>为国内镜像源:</p>
</li>
</ol>
<ol start="5">
<li><p>在虚拟环境安装第三方包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv install django</span><br></pre></td></tr></table></figure></li>
<li><p>使用pipenv卸载第三方模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipev uninstall django</span><br></pre></td></tr></table></figure></li>
<li><p>查看依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure></li>
<li><p>将安装的模块打包到一个文件内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv --rm</span><br></pre></td></tr></table></figure></li>
<li><p>不激活虚拟环境，直接运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv run django-amdin start project djangodemo</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="虚拟环境之virtualenv"><a href="#虚拟环境之virtualenv" class="headerlink" title="虚拟环境之virtualenv"></a>虚拟环境之virtualenv</h2><ol>
<li><p>安装<code>virtualenv</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv <span class="comment"># 虚拟环境</span></span><br><span class="line">pip install virtualenvwrappern <span class="comment"># mac/linux系统</span></span><br><span class="line">pip install virtualenvwrapper-win <span class="comment"># windows系统</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv django</span><br></pre></td></tr></table></figure></li>
<li><p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在创建虚拟环境后会默认激活</span></span><br><span class="line">workon django  <span class="comment"># 激活django虚拟环境</span></span><br><span class="line">workon  <span class="comment"># 查看所有虚拟环境</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改虚拟环境的镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/ <span class="comment"># 终端使用命令设置pip镜像</span></span><br><span class="line">pip install pip -U  <span class="comment"># 升级pip包管理工具</span></span><br></pre></td></tr></table></figure></li>
<li><p>在虚拟环境安装第三方包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django  <span class="comment"># 先激活虚拟环境</span></span><br></pre></td></tr></table></figure></li>
<li><p>卸载第三方模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall django <span class="comment"># 先激活虚拟环境</span></span><br></pre></td></tr></table></figure></li>
<li><p>将安装的模块打包到一个文件内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p>将一个文件内的第三方扩展安装到虚拟环境中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p>退出虚拟环境</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmvirtualenv django</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="虚拟环境之conda"><a href="#虚拟环境之conda" class="headerlink" title="虚拟环境之conda"></a>虚拟环境之conda</h2><h3 id="1-Anaconda简介"><a href="#1-Anaconda简介" class="headerlink" title="1. Anaconda简介"></a>1. Anaconda简介</h3><ul>
<li><p>Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。</p>
</li>
<li><p>Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。</p>
</li>
<li><p>Anaconda 镜像使用帮助</p>
<ul>
<li><p>Anaconda 是一个用于科学计算的 Python 发行版，支持 Linux, Mac, Windows, 包含了众多流行的科学计算、数据分析的 Python 包。</p>
</li>
<li><p>Anaconda 安装包可以到 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a> 下载。</p>
</li>
</ul>
</li>
<li><p>Miniconda 镜像使用帮助</p>
<ul>
<li><p>Miniconda 是一个 Anaconda 的轻量级替代，默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包。</p>
</li>
<li><p>Miniconda 安装包可以到 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a> 下载。</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-Anaconda安装"><a href="#2-Anaconda安装" class="headerlink" title="2. Anaconda安装"></a>2. Anaconda安装</h3><ul>
<li><p>Windows安装</p>
<ul>
<li><p>点击安装文件<code>Anaconda3-2019.07-Windows-x86_64.exe</code>,选择安装路径,如<code>D:\python\Anaconda</code>,然后一直next即可。</p>
</li>
<li><p><strong>配置环境变量:</strong> 将安装的根路径,如<code>D:\python\Anaconda</code>和<code>scripts</code>文件夹路径<code>D:\python\Anaconda\scripts</code>添加到电脑环境变量之中</p>
</li>
</ul>
</li>
<li><p>Linux/Mac安装</p>
<ul>
<li><p>将安装文件<code>Anaconda3-2019.07-Linux-x86_64.sh</code>移动到用户家目录</p>
</li>
<li><p>在用户家目录,打开终端,执行<code>./Anaconda3-2019.07-Linux-x86_64.sh</code>,然后输入yes,一路回车即可。</p>
</li>
<li><p><strong>配置环境变量:</strong></p>
<ul>
<li><p>打开.bashrc 文件,在终端执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li><p>输入G，跳转到文件末尾,在文件最后一行新增环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/anaconda3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改完成,先按esc键进入命令行模式，然后按<code>shift+：</code>进入末行模式，输入<code>wq</code>,保存退出</p>
</li>
<li><p>在终端执行如下命令,使其立即生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意：在Mac中，修改文件<code>.bash_profile</code>,其余和Linux操作一样</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="3-修改Anaconda镜像源"><a href="#3-修改Anaconda镜像源" class="headerlink" title="3. 修改Anaconda镜像源"></a>3. 修改Anaconda镜像源</h3><ul>
<li><p>Anaconda默认访问国外服务器，网速较慢，故需要修改默认镜像</p>
</li>
<li><p>TUNA 还提供了 Anaconda 仓库与第三方源（conda-forge、msys2、pytorch等，查看完整列表）的镜像，各系统都可以通过修改用户目录下的 .condarc 文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>

<p>即可添加 Anaconda Python 免费仓库。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，可先执行 <code>conda config --set show_channel_urls yes</code> 生成该文件之后再修改。</p>
</li>
</ul>
<h3 id="4-Anconda基本使用"><a href="#4-Anconda基本使用" class="headerlink" title="4. Anconda基本使用"></a>4. Anconda基本使用</h3><h4 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h4><ul>
<li><p>检查conda版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version                                                                                                                     </span><br></pre></td></tr></table></figure></li>
<li><p>升级当前版本conda</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure></li>
<li><p>管理（虚拟）环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为python37的环境，指定Python版本是3.7（不用管是3.7.x，conda会为我们自动寻找3.7.x中的最新版本）</span></span><br><span class="line">conda create --name python37 python=3.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装好后，使用activate激活某个环境</span></span><br><span class="line">activate python37 <span class="comment"># for Windows</span></span><br><span class="line"><span class="built_in">source</span> activate python37 <span class="comment"># for Linux &amp; Mac</span></span><br><span class="line"><span class="comment"># 激活后，会发现terminal输入的地方多了python37的字样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想返回默认的python环境，运行</span></span><br><span class="line">deactivate python37 <span class="comment"># for Windows</span></span><br><span class="line"><span class="built_in">source</span> deactivate python37 <span class="comment"># for Linux &amp; Mac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个已有的环境</span></span><br><span class="line">conda remove --name python37 --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外，我们可以使用conda命令替换source命令用来激活和关闭环境</span></span><br><span class="line">conda activate python37</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消每次打开终端，默认激活bash环境</span></span><br><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新激活每次打开终端，默认进入base环境</span></span><br><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新的开发环境会被默认安装在你conda目录下的envs文件目录下。</p>
<p>如果我们没有指定安装python的版本，conda会安装我们最初安装conda时所装的那个版本的python。</p>
</li>
<li><p>列出所有环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br><span class="line">conda info –-envs</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:conda会对当前活动的环境追加星号标记。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macdeMacBook-Pro:~ mac$ conda info -e</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  /Users/mac/anaconda3</span><br><span class="line">myenv                    /Users/mac/anaconda3/envs/myenv</span><br><span class="line">py3                      /Users/mac/anaconda3/envs/py3</span><br></pre></td></tr></table></figure></li>
<li><p>复制一个环境<br>通过克隆来复制一个环境。这儿将通过克隆py3来创建一个称为py32的副本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n py32 --<span class="built_in">clone</span> py3</span><br></pre></td></tr></table></figure>

<p>通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info –-envs</span><br></pre></td></tr></table></figure>

<p>来检查环境。</p>
</li>
<li><p>重命名env</p>
<p>conda是没有重命名环境的功能的, 要实现这个基本需求, 只能通过愚蠢的克隆-删除的过程。</p>
<p>切记不要直接mv移动环境的文件夹来重命名, 会导致一系列无法想象的错误的发生!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name newname --<span class="built_in">clone</span> oldname      <span class="comment"># 克隆环境</span></span><br><span class="line">conda remove --name oldname --all      <span class="comment"># 彻底删除旧环境</span></span><br></pre></td></tr></table></figure></li>
<li><p>分享环境</p>
<p>如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。</p>
<p><strong>一个分享环境的快速方法就是给ta一个你的环境的.yml文件。</strong></p>
<p>首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env <span class="built_in">export</span> &gt; environment.yml</span><br></pre></td></tr></table></figure>

<p>小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="管理包"><a href="#管理包" class="headerlink" title="管理包"></a>管理包</h4><ul>
<li><p>conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。</p>
</li>
<li><p><strong>不建议使用easy_install安装包</strong>。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装</p>
</li>
<li><p>使用合适的源可以提升安装的速度</p>
</li>
<li><p>查看已安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>

<p>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。</p>
</li>
<li><p>向指定环境安装包<br>我们在指定环境中安装requests包，有两种方式:</p>
<ul>
<li><p>直接通过-n选项指定安装环境的名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install --name py3 requests</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：你必须告诉conda你要安装环境的名字（-n py3）否则它将会被安装到当前环境中。</p>
</blockquote>
</li>
<li><p>激活py3环境，再使用conda install命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate py3</span><br><span class="line">conda install requests</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>通过pip命令</p>
<p>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。</p>
<p>可以上pypi网站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。</p>
<p>我们激活想要放置程序的python环境，然后通过pip安装一个叫“PyMysql”的包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="built_in">source</span> activate bunnies</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">activate py3</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。</p>
<blockquote>
<p>小技巧：在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过conda -h或conda –-help来看大量的缩写。</p>
</blockquote>
</li>
</ul>
<h4 id="移除包、环境、或者conda"><a href="#移除包、环境、或者conda" class="headerlink" title="移除包、环境、或者conda"></a>移除包、环境、或者conda</h4><ul>
<li><p>移除包</p>
<p>假设你决定不再使用包pymysql。你可以在py3环境中移除它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n py3 pymysql</span><br></pre></td></tr></table></figure></li>
<li><p>移除环境</p>
<p>我们不再需要snakes环境了，可以输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n myenv --all</span><br></pre></td></tr></table></figure></li>
<li><p>删除conda</p>
<ul>
<li><p>Linux/OS X：</p>
<p>移除Anaconda 或 Miniconda 安装文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf ~/miniconda</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">rm -rf ~/anaconda</span><br></pre></td></tr></table></figure></li>
<li><p>Windows：<br>去控制面板，点击“添加或删除程序”，选择“Python2.7/3.6（Anaconda）”或“Python2.7/3.6（Miniconda）”并点击删除程序。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器常见应用</title>
    <url>/2021/10/06/gZA8X0hMT/</url>
    <content><![CDATA[<p>熟悉装饰器的常见语法之后，可以利用装饰器解决平常遇到的问题。</p>
<span id="more"></span>

<h2 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h2><p>Python 装饰器（decorator）在实现的时候，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变），为了不影响原函数，Python 的 <code>functools</code> 包中提供了一个叫 <code>wraps</code> 的 decorator 来消除这样的副作用。写一个 decorator 的时候，最好在实现之前加上 <code>functools</code> 的 <code>wraps</code>，它能保留原有函数的名称和函数属性</p>
<p>不加 wraps</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example.__name__, example.__doc__)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wrapper decorator</span><br></pre></td></tr></table></figure>

<p>加上 wraps</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example.__name__, example.__doc__)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example Docstring</span><br></pre></td></tr></table></figure>

<h2 id="限频"><a href="#限频" class="headerlink" title="限频"></a>限频</h2><p>请实现一个装饰器,限制该函数被调用的频率,如10秒1次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_time</span>(<span class="params">t, n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_num</span>(<span class="params">func</span>):</span></span><br><span class="line">        dic = &#123;<span class="string">&quot;last_time&quot;</span>: <span class="number">0</span>, <span class="string">&quot;time_interval&quot;</span>: t, <span class="string">&quot;num&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call_func</span>():</span></span><br><span class="line">            now_time = time.time()</span><br><span class="line"></span><br><span class="line">            finall_time = dic[<span class="string">&quot;last_time&quot;</span>] + dic[<span class="string">&quot;time_interval&quot;</span>]  <span class="comment"># 代表可以重新调用的时间</span></span><br><span class="line">            finall_num = dic[<span class="string">&quot;num&quot;</span>]  <span class="comment"># 代表调用的次数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> finall_num &lt; n:  <span class="comment"># 当次数不满足时，可以继续调用</span></span><br><span class="line">                <span class="keyword">if</span> finall_num == <span class="number">0</span>:</span><br><span class="line">                    dic[<span class="string">&quot;last_time&quot;</span>] = now_time</span><br><span class="line">                dic[<span class="string">&quot;num&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> now_time &gt;= finall_time:  <span class="comment"># 已经超出时间，可以重新调用</span></span><br><span class="line">                dic[<span class="string">&quot;num&quot;</span>] = <span class="number">0</span></span><br><span class="line">                dic[<span class="string">&quot;last_time&quot;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> func()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;还有%.2fs才能调用该函数&quot;</span> % (finall_time - now_time))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set_num</span><br></pre></td></tr></table></figure>

<p>下面测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@set_time(<span class="params"><span class="number">10</span>, <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s()</span><br><span class="line">s()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">s()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello...</span><br><span class="line">还有<span class="number">10.00</span>s才能调用该函数</span><br><span class="line">还有<span class="number">8.00</span>s才能调用该函数</span><br></pre></td></tr></table></figure>

<h2 id="超时退出"><a href="#超时退出" class="headerlink" title="超时退出"></a>超时退出</h2><p>我们日常在使用的各种网络请求库时都带有timeout参数，例如request库。这个参数可以使请求超时就不再继续了，直接抛出超时错误，避免等太久。</p>
<p>如果我们自己开发的方法也希望增加这个功能，该如何做呢？</p>
<p>方法很多，但最简单直接的是使用并发库futures，为了使用方便，我将其封装成了一个装饰器，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line">executor = futures.ThreadPoolExecutor(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span>(<span class="params">seconds</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            future = executor.submit(func, *args, **kw)</span><br><span class="line">            <span class="keyword">return</span> future.result(timeout=seconds)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>定义了以上函数，我们就有了一个超时结束的装饰器，下面可以测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeout(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    time.sleep(<span class="number">1.2</span>)</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">task(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/lsf/PycharmProjects/django/djangotest/book/demo.py&quot;</span>, line <span class="number">41</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    task(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  File <span class="string">&quot;/Users/lsf/PycharmProjects/django/djangotest/book/demo.py&quot;</span>, line <span class="number">30</span>, <span class="keyword">in</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> future.result(timeout=self.seconds)</span><br><span class="line">  File <span class="string">&quot;/usr/local/Cellar/python@3.7/3.7.12/Frameworks/Python.framework/Versions/3.7/lib/python3.7/concurrent/futures/_base.py&quot;</span>, line <span class="number">437</span>, <span class="keyword">in</span> result</span><br><span class="line">    <span class="keyword">raise</span> TimeoutError()</span><br><span class="line">concurrent.futures._base.TimeoutError</span><br></pre></td></tr></table></figure>

<p>上面我们通过装饰器定义了函数的超时时间为1秒，通过睡眠模拟函数执行超过1秒时，成功的抛出了超时异常。</p>
<p>程序能够在超时时间内完成时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timeout(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    time.sleep(<span class="number">0.9</span>)</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">task(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>可以看到，顺利的得到了结果。</p>
<p>这样我们就可以通过一个装饰器给任何函数增加超时时间，这个函数在规定时间内还处理不完就可以直接结束任务。</p>
<p>前面我将这个装饰器将所需的变量定义到了外部，其实我们还可以通过类装饰器进一步封装，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">timeout</span>:</span></span><br><span class="line">    __executor = futures.ThreadPoolExecutor(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        self.seconds = seconds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            future = self.__executor.submit(func, *args, **kw)</span><br><span class="line">            <span class="keyword">return</span> future.result(timeout=self.seconds)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>经测试使用类装饰器能得到同样的效果。</p>
<h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>如果我们需要记录部分函数的执行时间，函数执行前后打印一些日志，装饰器是一种很方便的选择。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.perf_counter()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = time.perf_counter()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;函数 <span class="subst">&#123;func.__name__&#125;</span> 耗时 <span class="subst">&#123;(end - start) * <span class="number">1000</span>&#125;</span> ms&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>装饰器 log 记录某个函数的运行时间，并返回其执行结果。</p>
<p>测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2021-10-6&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">now()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">6</span></span><br><span class="line">函数 now 耗时 <span class="number">0.09933599994838005</span> ms</span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>如果经常调用一个函数，而且参数经常会产生重复，如果把结果缓存起来，下次调用同样参数时就会节省处理时间。</p>
<p>定义函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">x</span>):</span></span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(math.log(x**<span class="number">3</span> / <span class="number">15</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    task(random.randrange(<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Wall time: <span class="number">5.91</span> s</span><br></pre></td></tr></table></figure>

<p>此时如果我们使用缓存的效果就会大不一样，实现缓存的装饰器有很多，我就不重复造轮子了，这里使用 functools 包下的 LRU 缓存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">x</span>):</span></span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(math.log(x**<span class="number">3</span> / <span class="number">15</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    task(random.randrange(<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Wall time: <span class="number">0.05</span> ms</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客配置教程</title>
    <url>/2019/03/23/gqGxdYXyn/</url>
    <content><![CDATA[<p>实现Hexo + GitHub 搭建博客。</p>
<span id="more"></span>


<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<blockquote>
<p>注意: 查看<a href="https://hexo.io/docs/">文档</a>以获取更多信息。如果使用Hexo时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a>中找到答案，或者可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上询问。</p>
</blockquote>
<h2 id="hexo教程"><a href="#hexo教程" class="headerlink" title="hexo教程"></a>hexo教程</h2><ol>
<li>git和nodejs安装好后，就可以安装hexo了</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>
<p>  依旧用hexo -v查看一下版本</p>
<p>  至此就全部安装完了。</p>
<ol start="2">
<li><p>接下来初始化一下hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个新帖子</p>
</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;我的新帖子&quot;</span></span><br></pre></td></tr></table></figure>

<p>  更多信息：<a href="https://hexo.io/docs/writing.html">写作</a></p>
<ol start="4">
<li>运行服务器</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>  更多信息：<a href="https://hexo.io/docs/server.html">服务器</a></p>
<ol start="5">
<li>生成静态文件</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>  更多信息：<a href="https://hexo.io/docs/generating.html">生成</a></p>
<ol start="6">
<li>部署到远程站点</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>  更多信息：<a href="https://hexo.io/docs/deployment.html">部署</a></p>
<h2 id="Hexo中添加本地图片"><a href="#Hexo中添加本地图片" class="headerlink" title="Hexo中添加本地图片"></a>Hexo中添加本地图片</h2><ol>
<li><p>把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p>
</li>
<li><p>在你的hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件</p>
</li>
<li><p>等待一小段时间后，再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹</p>
</li>
<li><p>最后在<code>xxxx.md</code>中想引入图片时，先把图片复制到<code>xxxx</code>这个文件夹中，然后只需要在<code>xxxx.md</code>中按照markdown的格式引入图片：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">你想输入的替代文字</span>](<span class="link">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>xxxx</code>是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入<code>xxxx</code>这个文件夹内就好了，很像引用相对路径。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js环境配置</title>
    <url>/2019/03/31/hDz2fE-f_/</url>
    <content><![CDATA[<p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>
<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p>
<p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<span id="more"></span>


<h2 id="Node-js版本管理"><a href="#Node-js版本管理" class="headerlink" title="Node.js版本管理"></a>Node.js版本管理</h2><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>运行以上任一命令将下载一个脚本并运行它。<br>该脚本会将nvm存储库克隆到<code>~/.nvm</code>,并尝试将以下代码段中的源代码行添加到正确的配置文件（<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<h3 id="修改nvm镜像源"><a href="#修改nvm镜像源" class="headerlink" title="修改nvm镜像源"></a>修改nvm镜像源</h3><p>用国内镜像快速安装node,把环境变量 NVM_NODEJS_ORG_MIRROR加入到正确的配置文件（<code>~/.bash_profile</code>,<code>~/.zshrc</code>, <code>~/.profile</code>, 或 <code>~/.bashrc</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure>

<h3 id="nvm命令"><a href="#nvm命令" class="headerlink" title="nvm命令"></a>nvm命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm version <span class="comment"># 查看当前的版本</span></span><br><span class="line">nvm ls-remote <span class="comment"># 列出所有可以安装的node版本号</span></span><br><span class="line"></span><br><span class="line">nvm install stable <span class="comment"># 安装最新稳定版本</span></span><br><span class="line">nvm install  &lt;version&gt; <span class="comment"># 安装指定版本号的node</span></span><br><span class="line">nvm use &lt;version&gt; <span class="comment"># 切换使用指定的版本node</span></span><br><span class="line"></span><br><span class="line">nvm ls  <span class="comment"># 列出所有已经安装的node版本</span></span><br><span class="line">nvm current <span class="comment"># 当前node版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;  <span class="comment"># 指定默认的node版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt; <span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt; <span class="comment">## 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm uninstall &lt;version&gt; 卸载指定的版本</span><br></pre></td></tr></table></figure>

<h2 id="Node-js包管理"><a href="#Node-js包管理" class="headerlink" title="Node.js包管理"></a>Node.js包管理</h2><h3 id="安装包管理工具"><a href="#安装包管理工具" class="headerlink" title="安装包管理工具"></a>安装包管理工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -g install npm@next  <span class="comment"># npm升级</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org  <span class="comment"># cnpm安装</span></span><br><span class="line">npm install -g yarn  <span class="comment"># yarn安装</span></span><br></pre></td></tr></table></figure>

<h3 id="管理第三方包"><a href="#管理第三方包" class="headerlink" title="管理第三方包"></a>管理第三方包</h3><p>查看已安装的所有全局包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list -g --depth=0</span><br><span class="line"></span><br><span class="line">cnpm list -g --depth=0</span><br><span class="line"></span><br><span class="line">yarn global list</span><br></pre></td></tr></table></figure>

<p>安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g &lt;package&gt;</span><br><span class="line"></span><br><span class="line">cnpm install -g &lt;package&gt;</span><br><span class="line"></span><br><span class="line">yarn global add &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>卸载包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall -g &lt;package&gt;</span><br><span class="line"></span><br><span class="line">cnpm uninstall -g &lt;package&gt;</span><br><span class="line"></span><br><span class="line">yarn global remove &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>更新包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>更新本地包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm upgrade --save</span><br><span class="line">yarn upgrade</span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry  <span class="comment"># 查看npm当前镜像源</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/  <span class="comment"># 设置npm镜像源为淘宝镜像</span></span><br><span class="line"></span><br><span class="line">yarn config get registry  <span class="comment"># 查看yarn当前镜像源</span></span><br><span class="line"></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/  <span class="comment"># 设置yarn镜像源为淘宝镜像</span></span><br></pre></td></tr></table></figure>

<h2 id="Node-js包镜像管理"><a href="#Node-js包镜像管理" class="headerlink" title="Node.js包镜像管理"></a>Node.js包镜像管理</h2><h3 id="编辑npm配置文件"><a href="#编辑npm配置文件" class="headerlink" title="编辑npm配置文件"></a>编辑npm配置文件</h3><p>直接编辑npm的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure>

<p>直接修改registry的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class="line">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="Npm命令修改"><a href="#Npm命令修改" class="headerlink" title="Npm命令修改"></a>Npm命令修改</h3><p>用代码更改npm的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这段代码即将镜像改为淘宝镜像</p>
<h3 id="nrm命令管理"><a href="#nrm命令管理" class="headerlink" title="nrm命令管理"></a>nrm命令管理</h3><p>安装nrm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<p>查看镜像列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>

<p> 切换镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<p> 在nrm添加自己的镜像地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm add r_name r_url</span><br><span class="line"><span class="comment"># r_name镜像名字  </span></span><br><span class="line"><span class="comment"># r_url镜像地址</span></span><br></pre></td></tr></table></figure>

<p> 删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm del r_name</span><br></pre></td></tr></table></figure>

<p> 测试镜像的相应速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nrm <span class="built_in">test</span> r_name</span><br></pre></td></tr></table></figure>

<h2 id="第三方脚手架"><a href="#第三方脚手架" class="headerlink" title="第三方脚手架"></a>第三方脚手架</h2><h3 id="vue-3-0"><a href="#vue-3-0" class="headerlink" title="vue 3.0"></a>vue 3.0</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<h3 id="vue2-0"><a href="#vue2-0" class="headerlink" title="vue2.0"></a>vue2.0</h3><p>Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure>

<p>或者直接安装vue-cli脚手架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h3><p>利用http-server，开启本地服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g http-server</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）</span><br><span class="line">Starting up http-server, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://127.0.0.1:8080</span><br><span class="line">  http://192.168.8.196:8080</span><br><span class="line">Hit CTRL-C to stop the server</span><br></pre></td></tr></table></figure>

<h3 id="hexo-cli"><a href="#hexo-cli" class="headerlink" title="hexo-cli"></a>hexo-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="gitbook-cli"><a href="#gitbook-cli" class="headerlink" title="gitbook-cli"></a>gitbook-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g gitbook-cli</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>了解web及网络基础</title>
    <url>/2019/05/09/hGqeJ6dqf/</url>
    <content><![CDATA[<p>HTTP 的出现主要是为了解决文本传输的难题</p>
<span id="more"></span>

<h2 id="TCP-IP-协议族："><a href="#TCP-IP-协议族：" class="headerlink" title="TCP/IP 协议族："></a>TCP/IP 协议族：</h2><p>是互联网相关的各类协议族的总称</p>
<p>重要的一点是<strong>分层</strong>: 应用层、传输层、网络层、数据链路层</p>
<p>层次化的优点：<br>1、修改某个地方只用改相应的层<br>2、设计变简单，各层管理自己的职责</p>
<h3 id="分层管理"><a href="#分层管理" class="headerlink" title="分层管理"></a>分层管理</h3><p><strong>应用层</strong>：决定向用户提供应用服务时通信的活动，<br><code>FTP(File Transfer Protocol)</code> 文件传输协议、<code>DNS</code>(<code>Domain Name System</code>) 域名系统、<code>HTTP</code>(<code>HyperText Transfer Protocol</code>)<br><strong>传输层</strong>：提供处于网络连接中两台计算机之间的数据传输。<br><code>TCP</code>(<code>Transmission Control Protocol</code>) 传输控制协议、<code>UDP</code>(<code>User Data Protocol</code>) 用户数据报协议<br><strong>网络层（网络互联层）</strong>：处理在网络上流动的数据包（数据包是网络传输的最小数据单位）。该层规定了通过怎样的路径（传输路线）到达对方计算机，并传递数据。作用就是在与对方计算机之间通过多台计算机或网络设备进行传输时，选择一条传输路线。<br><strong>链路层（数据链路层、网络接口层）</strong>：用来处理网络的硬件部分。包括控制操作系统、硬件设备驱动、<code>NIC</code>（<code>Network Interface Card</code>，网络适配器）、光纤等物理课件部分（连接器等一切传输媒介）。</p>
<h3 id="通信传输流"><a href="#通信传输流" class="headerlink" title="通信传输流"></a>通信传输流</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110342-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B%20.png" alt="20190526110342-HTTP-传输过程"></p>
<p>  应用发请求通过 <code>TCP</code> 处理报文进行分隔发送给网络层网络层增加 <code>MAC</code> 地址给链路, 之后反向操作, 请求数据的时候每一层处理完成后会给这个数据加上这个层的首部信息, 相反, 处理请求的时候, 每处理一层就删除一个首部, 这叫做数据信息的封装 (<code>encapsulate</code>)。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110348-HTTP-%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B02%20.png" alt="20190526110348-HTTP-传输过程02"></p>
<h2 id="IP、TCP-和-DNS"><a href="#IP、TCP-和-DNS" class="headerlink" title="IP、TCP 和 DNS"></a>IP、TCP 和 DNS</h2><h3 id="IP-协议："><a href="#IP-协议：" class="headerlink" title="IP 协议："></a>IP 协议：</h3><p><code>IP</code>（<code>Internet Protocol</code>）网络协议处于网络层。几乎所有使用网络的系统都会用到 <code>IP</code> 协议。<code>IP</code> 不是 <code>IP</code> 地址，<code>IP</code> 只是一种协议名称。</p>
<ul>
<li><p>作用：把各种数据包传给对方，保证能传送到达需要多种条件，其中最重要的是 <code>IP</code> 地址和 <code>MAC</code>（<code>Media Access Control Address</code>) 地址。</p>
</li>
<li><p><code>IP</code> 地址：指明节点被分配到的地址</p>
</li>
<li><p><code>MAC</code> 地址： 网卡所属的固定地址</p>
</li>
<li><p><code>IP</code> 地址可以和 <code>MAC</code> 地址进行配对，<code>IP</code> 可变，但 <code>MAC</code> 基本不会更改。</p>
<p>    不同局域网之间的通信需要经过多次中转，在中转时会利用下一站中转设备的 <code>MAC</code> 地址来搜索下一个中转目标，这时会采用 <code>ARP</code> 协议（<code>Addres s Resolution Protocol</code>)，这是用于解析地址的协议，可以根据对方 <code>IP</code> 地址就能反查处对应的 <code>MAC</code> 地址。<br>    信息传输的时候，并不是从一开始就设计好精确的路线，而是边走边瞧，到下一个中转点会自动判断下一个中转点，这叫做路由选择（<code>routing</code>）</p>
</li>
</ul>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110449-IP%E5%A4%84%E7%90%86%20.png" alt="20190526110449-IP处理"></p>
<h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>按层次位于传输层, 提供可靠的字节流服务 (<code>Byte Stream Service</code>), 意思是为了方便传输, 将大块数据分割成以报文段(<code>segment</code>) 为单位的数据包进行管理可靠的传输服务是指，能够把数据准确可靠的传给对方。</p>
<blockquote>
<p>如何确保数据到达目标</p>
</blockquote>
<h4 id="三次握手（three—way-handshaking）策略"><a href="#三次握手（three—way-handshaking）策略" class="headerlink" title="三次握手（three—way handshaking）策略"></a>三次握手（<code>three—way handshaking</code>）策略</h4><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110500-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20.png" alt="20190526110500-三次握手"></p>
<ul>
<li>发送端先发送一个带有 <code>SYN</code>（<code>synchronize</code> 同步）标识的数据包给对方</li>
<li>对方接收到后回传一个带有  <code>SYN</code>/<code>ACK</code>（<code>acknowledgement</code>)标识的数据包已传达确认信息</li>
<li>最后发送端再传回一个带有 <code>ACK</code> 标识的数据包代表 “握手” 结束。</li>
<li>若期间在某个过程莫名中断, <code>TCP</code> 协议会在此以相同顺序发送相同数据包。</li>
</ul>
<h3 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h3><p>  <code>DNS</code> 服务是和 <code>HTTP</code> 一样位于应用层, 提供<code>域名</code>到 <code>IP</code> 地址之间的解析服务。<br> 计算机可以有 <code>IP</code> 地址, 又可以有主机名和域名。比如可以使用 <a href="http://www.baidu.com/">www.baidu.com</a> 访问百度，也可以使用 <code>119.75.217.109</code> 访问百度。<code>DNS</code> 协议就是可以查询其对应关系的协议。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110337-DNS%E8%A7%A3%E6%9E%90%20.png" alt="20190526110337-DNS解析"></p>
<h3 id="各种协议与-HTTP-协议的关系"><a href="#各种协议与-HTTP-协议的关系" class="headerlink" title="各种协议与 HTTP 协议的关系"></a>各种协议与 HTTP 协议的关系</h3><p>  客户端发出对某 <code>www.</code> 网站的请求, 通过 <code>DNS</code> 协议获取对应的 <code>IP</code> 地址, 在通过 <code>HTTP</code> 协议生成请求报文, 通过 <code>TCP</code> 进行分隔划分成数据包, 通过三次握手把每个报文段可靠的传给对方, 再通过 <code>IP</code> 协议分配 <code>IP</code> 地址和 <code>MAC</code> 地址, 一遍中转一遍传送, 对方通过 <code>IP</code> 协议接收一段段报文, 通过 <code>TCP</code> 协议再一段段重组, 在通过 <code>HTTP</code> 协议对这些内容进行处理请求信息, 把请求结果再像上边的过程走回客户端。一次完整的传输就结束了。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110506-%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%20.png" alt="20190526110506-协议关系"></p>
<h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2><ul>
<li><code>URL</code>（<code>Uniform</code> <code>Resource</code> <code>Locator</code>) 统一资源定位符，就是 <code>Web</code> 浏览器访问 <code>web</code> 页面时候的网页地址，<a href="http://www.baidu.com/">http://www.baidu.com</a></li>
<li> <code>URI</code>（<code>Uniform</code> <code>Resource</code> <code>Identifier</code>) 统一资源标识符</li>
<li><em><code>Uniform</code></em> 规定统一格式可方便处理多种不同类型资源。</li>
<li><em><code>Resouce</code></em> 资源定义是 “可标识的任何东西”。</li>
<li><em><code>Identifier</code></em> 可标识的对象。也称作标识符。</li>
</ul>
<p>  综上，<code>URI</code> 就是由某协议方案表示的资源的定位标识符，其中，访问资源所使用的协议类型， <code>HTTP</code> 协议时，协议方案就是 <code>http</code>，除此还有 <code>ftp</code>、<code>mailto</code>、<code>telent</code>、<code>file</code> 等。<br>  <code>URI</code> 用字符串标识某一互联网资源，<code>URL</code> 表示资源的地点，可见 <code>URL</code> 是 <code>URI</code> 的子集。</p>
<h3 id="URI-格式"><a href="#URI-格式" class="headerlink" title="URI 格式"></a>URI 格式</h3><p>绝对 <code>URI</code> 格式：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526110455-URI%E6%A0%BC%E5%BC%8F%20.png" alt="20190526110455-URI格式"></p>
<p>可选项：登录信息、服务器端口号、查询字符串、片段标识符</p>
<h2 id="自我回顾"><a href="#自我回顾" class="headerlink" title="自我回顾"></a>自我回顾</h2><p>1、<code>HTTP</code>、<code>TCP</code>/<code>IP</code>、<code>DNS</code>、<code>URL</code>、<code>URI</code> 分别是什么?<br>2、<code>TCP</code>/<code>IP</code> 协议为什么进行分层管理，又分为哪些层?<br>3、客户端到服务端的请求过程是什么?<br>4、三次握手怎么进行的?<br>5、各个协议的关系是什么？</p>
<p><strong><em>注： 本文图片均来自《图解 HTTP》一书</em></strong></p>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask图片上传与展示</title>
    <url>/2021/06/09/hdjlDy_yc/</url>
    <content><![CDATA[<p>通过以下demo简单演示在flask项目中的图片上传流程。</p>
<span id="more"></span>

<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://root:mysql@127.0.0.1:3306/day08&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建项目所在的 绝对路径，也就是 day08 的绝对路径</span></span><br><span class="line">    BASE_DIR = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line">    <span class="comment"># 静态资源存放路径</span></span><br><span class="line">    STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static/&#x27;</span>)</span><br><span class="line">    <span class="comment"># 自定义的 图片上传路径</span></span><br><span class="line">    MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;media/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="图片上传与展示"><a href="#图片上传与展示" class="headerlink" title="图片上传与展示"></a>图片上传与展示</h2><h3 id="static静态资源方式"><a href="#static静态资源方式" class="headerlink" title="static静态资源方式"></a>static静态资源方式</h3><blockquote>
<p>  采用此种方式：</p>
<ul>
<li>  创建APP时，一定要指明静态资源的路径</li>
<li>  然后在上传图片时，将上传的图片存放到上一步指明的静态资源路径中</li>
<li>  就可以使用static内置的服务，展示图片资源</li>
</ul>
</blockquote>
<h4 id="app创建"><a href="#app创建" class="headerlink" title="app创建"></a>app创建</h4><blockquote>
<p>  创建app时,指明静态资源目录</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__, static_folder=Config.STATIC_ROOT, static_url_path=<span class="string">&#x27;/static&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>static_folder</code>： 静态资源路径</li>
<li>  <code>static_url_path</code>： 静态资源展示的url前缀</li>
</ul>
<h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, reqparse</span><br><span class="line"><span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> FileStorage</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_upload</span>(<span class="params">img</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图片名按照 .  进行切分， 找到最后一个元素，也就是  文件的后缀名</span></span><br><span class="line">    end_name = img.filename.rsplit(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过文件的后缀名判断 身份为 合法的  图片</span></span><br><span class="line">    <span class="keyword">if</span> end_name <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    filename = <span class="built_in">str</span>(uuid4()) + <span class="string">&#x27;.&#x27;</span> + end_name  <span class="comment"># 为了生成一个不重复的 文件名</span></span><br><span class="line">    img_path = os.path.join(Config.STATIC_ROOT, filename)  <span class="comment"># 将路径和文件名拼接在一起，方便保存文件</span></span><br><span class="line"></span><br><span class="line">    img.save(img_path)  <span class="comment"># 将图片对象保存到 本地</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 创建解析参数的对象</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        <span class="comment"># 2. 指明需要解析的参数</span></span><br><span class="line">        parser.add_argument(<span class="string">&#x27;title&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, location=<span class="string">&#x27;form&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;img&#x27;</span>, <span class="built_in">type</span>=FileStorage, location=<span class="string">&#x27;files&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 获取具体的参数</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        title = args.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        img = args.get(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 利用自定义函数，将图片保存到本地</span></span><br><span class="line">        filename = img_upload(img)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 创建对象, 注意：图片存储的只是 从media之后的  图片路径</span></span><br><span class="line">        news = News(title=title, img=filename)</span><br><span class="line">        <span class="comment"># 5. 添加到 事务中</span></span><br><span class="line">        db.session.add(news)</span><br><span class="line">        <span class="comment"># 6. 提交事务</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                       <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;添加失败&#x27;</span></span><br><span class="line">                   &#125;, <span class="number">500</span></span><br><span class="line">        <span class="comment"># 7. 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">                   <span class="string">&#x27;id&#x27;</span>: news.<span class="built_in">id</span>,</span><br><span class="line">                   <span class="string">&#x27;title&#x27;</span>: news.title,</span><br><span class="line">                   <span class="string">&#x27;img&#x27;</span>: news.img</span><br><span class="line">               &#125;, <span class="number">201</span></span><br></pre></td></tr></table></figure>

<h4 id="图片访问"><a href="#图片访问" class="headerlink" title="图片访问"></a>图片访问</h4><blockquote>
<p>  通过 <code>http://127.0.0.1:5000/static/filename</code>就可以访问图片</p>
</blockquote>
<ul>
<li>  <code>static</code>是app创建时，配置的<code>url</code>前缀</li>
</ul>
<h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><blockquote>
<p>  自定义方式实现：</p>
<ul>
<li>  app创建时，不需要指明静态资源有关的任何参数</li>
<li>  图片的存放路径，可以是 任何一个合适的路径</li>
<li>  展示图片时，需要自己定义视图和路由，实现图片展示</li>
</ul>
</blockquote>
<h4 id="图片上传-1"><a href="#图片上传-1" class="headerlink" title="图片上传"></a>图片上传</h4><blockquote>
<p>  和上面的图片上传的流程一样，只是 图片存放的路径可以自由指定，不必一定存放到 某个特定路径</p>
</blockquote>
<h4 id="图片访问-1"><a href="#图片访问-1" class="headerlink" title="图片访问"></a>图片访问</h4><blockquote>
<p>  图片访问时，可以自己读取文件内容，也可以调用flask内置的 方法，返回响应</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> app.config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="comment"># 1. 拼接除图片的完成路径</span></span><br><span class="line">        img_path = os.path.join(Config.MEDIA_ROOT, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 按照二进制方式打开文件，读到的内容为 二进制文件流，方便接下来的网络传输</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                img = f.read()</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">404</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 自定义响应</span></span><br><span class="line">        resp = make_response(img)</span><br><span class="line">        <span class="comment"># 4. 声明响应体的类型 为  图片</span></span><br><span class="line">        resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="comment"># 5. 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">		<span class="comment"># 2. 使用flask 内置的函数提供响应</span></span><br><span class="line">        <span class="keyword">return</span> send_from_directory(Config.MEDIA_ROOT, filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  通过 <code>http://127.0.0.1:5000/media/filename</code>就可以访问图片</p>
</blockquote>
<ul>
<li>  <code>media</code>是自己配置的路由前缀</li>
</ul>
]]></content>
      <tags>
        <tag>图片上传</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios(四):跨域请求</title>
    <url>/2020/03/03/hwID7EtN7/</url>
    <content><![CDATA[<p>在前后端开发过程中一直会伴随我们的问题就是跨域问题，因为这时候前端和后端的代码是在不同机器上运行的，两个地址不在一个域名下，这个时候前端脚本在进行axios访问的时候浏览器就会报跨域相关的错误。</p>
<span id="more"></span>

<p>原因：浏览器的同源策略不允许跨域访问，所谓同源策略是指协议、域名、端口相同。</p>
<h2 id="前端跨域"><a href="#前端跨域" class="headerlink" title="前端跨域"></a>前端跨域</h2><blockquote>
<p>  思路： 设置代理服务器,实现跨域请求转发</p>
<p>  方案：采用proxyTable解决。</p>
</blockquote>
<h3 id="proxyTable是什么？"><a href="#proxyTable是什么？" class="headerlink" title="proxyTable是什么？"></a>proxyTable是什么？</h3><p>vue-cli提供的解决vue开发环境下跨域问题的方法，proxyTable的底层使用了<a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a>,它是http代理中间件，它依赖node.js，基本原理是用服务端代理解决浏览器跨域</p>
<p>实现的过程就是在我们前端的本地起一个服务，然后我们前端的所有ajax访问首选访问我们本地的服务，本地的服务不会对来的请求做加工处理，只是将请求转发到我们真实的后台服务上去。我们本地的服务其实你就是一个中转站。这种解决方案就是利用<strong>后端之间访问是不存在跨域的问题</strong>。</p>
<h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><h4 id="自定义跨域代理"><a href="#自定义跨域代理" class="headerlink" title="自定义跨域代理"></a>自定义跨域代理</h4><p>首先在<code>config/index.js</code>里面找到<code>proxyTable:&#123;&#125;</code>,然后在里面加入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/api&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;https://www.runoob.com&#x27;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
</blockquote>
<ul>
<li><p><code>/api</code>: 是自定义的，写成什么都可以。</p>
</li>
<li><p><code>target</code>: 设置要调用的接口域名和端口号。</p>
</li>
<li><p><code>^/api</code>: 代替<code>target</code>里面的地址，后面组件中我们调接口时直接用<code>/api</code>代替</p>
</li>
</ul>
<h4 id="在组件中实现跨域请求"><a href="#在组件中实现跨域请求" class="headerlink" title="在组件中实现跨域请求"></a>在组件中实现跨域请求</h4><p>比如要访问<code>&#39;https://www.runoob.com/ajax/json_demo.json&#39;</code>，直接写<code>/api/ajax/json_demo.json</code>即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/api/ajax/json_demo.json&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(resp.data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .cath(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="自定义axios请求基础路径"><a href="#自定义axios请求基础路径" class="headerlink" title="自定义axios请求基础路径"></a>自定义axios请求基础路径</h4><p>然而我们可以在<code>src/main.js</code>设置一个基础路径，这样你调用接口的时候可以不写<code>api</code>,直接写<code>/ajax/json_demo.json</code>即可。</p>
<p>在<code>src/main.js</code>设置<code>axios.defaults.baseURL=&quot;/api&quot;</code>;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">axios.defaults.baseURL=<span class="string">&quot;/api&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在组件中直接调用接口即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/ajax/json_demo.json&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(resp.data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .cath(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="后端跨域"><a href="#后端跨域" class="headerlink" title="后端跨域"></a>后端跨域</h2><p>但是今天我们这里不讲这种方式，有兴趣的可以在我的另一篇博客看到</p>
]]></content>
      <tags>
        <tag>VUE</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络传输命令</title>
    <url>/2021/06/13/i8cOKz0oW/</url>
    <content><![CDATA[<p>网络的最重要的一个作用就是实现文件的一个传输共享，本文将要介绍的是可以在Linux终端上使用的文件传输命令，利用这些工具可以在网络中方便的实现共享文件。</p>
<span id="more"></span>

<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a><code>FTP</code></h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>FTP</code>（File Transfer Protocol）: 是 TCP/IP 网络上两台计算机传送文件的协议，FTP 是在 TCP/IP 网络和 INTERNET 上最早使用的协议之一，它属于网络协议组的应用层。</p>
<p>FTP 客户机可以给服务器发出命令来下载文件，上载文件，创建或改变服务器上的目录。相比于 HTTP，FTP 协议要复杂得多。复杂的原因，是因为 FTP 协议要用到两个 TCP 连接：</p>
<ul>
<li>  一个是命令链路，用来在 FTP 客户端与服务器之间传递命令；</li>
<li>  另一个是数据链路，用来上传或下载数据。</li>
</ul>
<p>FTP 是基于 TCP 协议的，因此 iptables 防火墙设置中只需要放开指定端口（21 + <strong>PASV</strong> 端口范围）的 TCP 协议即可。</p>
<h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><p><strong>PORT</strong>（主动）方式的连接过程是：</p>
<ul>
<li>  客户端向服务器的 FTP 端口（默认是 21）发送连接请求，服务器接受连接，建立一条命令链路。</li>
<li>  当需要传送数据时，客户端在命令链路上用 PORT 命令告诉服务器：“我打开了一个 1024 + 的随机端口，你过来连接我”。</li>
<li>  于是服务器从 20 端口向客户端的 1024 + 随机端口发送连接请求，建立一条数据链路来传送数据。</li>
</ul>
<p><strong>PASV</strong>（Passive 被动）方式的连接过程是：</p>
<ul>
<li>  客户端向服务器的 FTP 端口（默认是 21）发送连接请求，服务器接受连接，建立一条命令链路。</li>
<li>  当需要传送数据时，服务器在命令链路上用 PASV 命令告诉客户端：“我打开了一个 1024 + 的随机端口，你过来连接我”。</li>
<li>  于是客户端向服务器的指定端口发送连接请求，建立一条数据链路来传送数据。</li>
</ul>
<p>PORT 方式，服务器会主动连接客户端的指定端口，那么如果客户端通过代理服务器链接到 internet 上的网络的话，服务器端可能会连接不到客户端本机指定的端口，或者被客户端、代理服务器防火墙阻塞了连接，导致连接失败</p>
<p>PASV 方式，服务器端防火墙除了要放开 21 端口外，还要放开 PASV 配置指定的端口范围</p>
<h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a><code>SFTP</code></h3><p><code>SFTP</code>（Secure File Transfer Protocol）：安全文件传送协议。</p>
<p>可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。</p>
<p>SFTP 为 SSH 的一部份，是一种传输文件到服务器的安全方式。</p>
<p>在 SSH 软件包中，已经包含了一个叫作 SFTP的安全文件传输子系统，SFTP 本身没有单独的守护进程，它必须使用 sshd 守护进程（端口号默认是 22）来完成相应的连接操作，所以从某种意义上来说，SFTP 并不像一个服务器程序，而更像是一个客户端程序。</p>
<p>SFTP 同样是使用加密传输认证信息和传输的数据，所以，使用 SFTP 是非常安全的。</p>
<p>但是，由于这种传输方式使用了加密 / 解密技术，所以传输效率比普通的 FTP 要低得多，如果您对网络安全性要求更高时，可以使用 SFTP 代替 FTP。</p>
<h3 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a><code>SCP</code></h3><p><code>SCP</code>（Secure Copy）：scp 就是 <code>secure copy</code>，是用来进行远程文件复制的，并且整个复制过程是加密的。数据传输使用 ssh，并且和使用和 ssh 相同的认证方式，提供相同的安全保证。</p>
<p><strong>FTP &amp; SCP/SFTP</strong> 比较：</p>
<ul>
<li><p>   sftp/scp 传输协议是采用加密方式来传输数据的。</p>
</li>
<li><p>   ftp 一般来说允许明文传输，当然现在也有带 SSL 的加密 ftp，有些服务器软件也可以设置成 “只允许加密连接”，但是毕竟不是默认设置需要我们手工调整，而且很多用户都会忽略这个设置。</p>
</li>
<li><p>  普通 ftp 仅使用端口 21 作为命令传输，由服务器和客户端协商另外一个随机端口来进行数据传送。在 pasv 模式下，服务器端需要侦听另一个端口。假如服务器在路由器或者防火墙后面，端口映射会比较麻烦，因为无法提前知道数据端口编号，无法映射。</p>
</li>
<li><p>  当你的网络中还有一些 unix 系统的机器时，在它们上面自带了 scp/sftp 等客户端，不用再安装其它软件来实现传输目的。</p>
</li>
<li><p>  scp/sftp 属于开源协议，我们可以免费使用不像 FTP 那样使用上存在安全或版权问题。</p>
</li>
<li><p>  所有 scp/sftp 传输软件（服务器端和客户端）均免费并开源，方便我们开发各种扩展插件和应用组件。</p>
</li>
</ul>
<blockquote>
<p>  <strong>小提示：</strong>当然在提供安全传输的前提下 sftp 还是存在一些不足的，例如: 他的帐号访问权限是严格遵照系统用户实现的，只有将该帐户添加为操作系统某用户才能够保证其可以正常登录 sftp 服务器</p>
</blockquote>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><code>SSH</code></h3><p><code>SSH</code>（Secure Shell）：由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。</p>
<p>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>
<p>SSH 是由客户端和服务端的软件组成的：</p>
<ul>
<li><p>服务端是一个守护进程 (daemon)，他在后台运行并响应来自客户端的连接请求。</p>
<p>  服务端一般是 sshd 进程，提供了对远程连接的处理，一般包括公共密钥认证、密钥交换、对称密钥加密和非安全连接； </p>
</li>
<li><p>客户端包含 ssh 程序以及像 scp（远程拷贝）、slogin（远程登陆）、sftp（安全文件传输）等其他的应用程序。从客户端来看，SSH 提供两种级别的安全验证：</p>
<ul>
<li>  第一种级别（基于口令的安全验证）</li>
<li>   第二种级别（基于密匙的安全验证）</li>
</ul>
</li>
</ul>
<p>SSH 主要有三部分组成： 传输层协议 [<code>SSH-TRANS</code>] ；用户认证协议 [<code>SSH-USERAUTH</code>] ；连接协议 [<code>SSH-CONNECT</code>]。</p>
<h3 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a><code>OpenSSH</code></h3><p><code>OpenSSH</code>: 是 SSH（Secure SHell）协议的免费开源实现。</p>
<p>SSH 协议族可以用来进行远程控制，或在计算机之间传送文件。</p>
<p>而实现此功能的传统方式，如 telnet(终端仿真协议)、 rcp ftp、 rlogin、rsh 都是极为不安全的，并且会使用明文传送密码。</p>
<p>OpenSSH 提供了服务端后台程序和客户端工具，用来加密远程控件和文件传输过程的中的数据，并由此来代替原来的类似服务。 </p>
<p>OpenSSH 是使用 SSH 透过计算机网络加密通讯的实现。它是取代由 <code>SSH Communications Security</code> 所提供的商用版本的开放源代码方案。</p>
<p>目前 OpenSSH 是 OpenBSD 的子计划。OpenSSH 常常被误认以为与 OpenSSL 有关联，但实际上这两个计划的有不同的目的，不同的发展团队，名称相近只是因为两者有同样的软件发展目标──提供开放源代码的加密通讯软件。</p>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a><code>ssh</code></h3><h4 id="安装ssh-server"><a href="#安装ssh-server" class="headerlink" title="安装ssh-server"></a>安装ssh-server</h4><blockquote>
<p>  此处环境以 <code>Ubuntu18.04</code>为例</p>
</blockquote>
<ul>
<li>  修改镜像源为中科大镜像</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  升级镜像源</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<ul>
<li>  安装 <code>openssh-server</code>、 <code>vim</code></li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">apt install openssh-server vim -y</span><br></pre></td></tr></table></figure>

<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>由于<code>SSH</code>使用的就是账号的登录密码，所以不存在单独的<code>SSH</code>密码。如果你需要修改<code>SSH</code>远程登录密码，需要修改这台服务器的账号的登录密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">Enter new UNIX password:  <span class="comment"># 输入新密码</span></span><br><span class="line">Retype new UNIX password:  <span class="comment"># 输入确认密码</span></span><br><span class="line">passwd: password updated successfully  <span class="comment"># 密码设置成功</span></span><br></pre></td></tr></table></figure>

<h4 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h4><ul>
<li>  打开<code>ssh</code>客户端配置文件<code>/etc/ssh/ssh_config</code>，修改 <code>ssh</code> 客户端配置</li>
</ul>
<blockquote>
<p>  去掉<code>PasswordAuthentication yes</code>前面的<code>#</code>号，保存退出</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line"><span class="comment">#   ForwardAgent no</span></span><br><span class="line"><span class="comment">#   ForwardX11 no</span></span><br><span class="line"><span class="comment">#   ForwardX11Trusted yes</span></span><br><span class="line">PasswordAuthentication yes  <span class="comment"># 允许客户端使用密码登录</span></span><br><span class="line"><span class="comment">#   HostbasedAuthentication no</span></span><br><span class="line"><span class="comment">#   GSSAPIAuthentication no</span></span><br><span class="line"><span class="comment">#   GSSAPIDelegateCredentials no</span></span><br><span class="line"><span class="comment">#   GSSAPIKeyExchange no</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  打开<code>ssh</code>服务器配置文件<code>/etc/ssh/sshd_config</code>，修改 <code>ssh</code> 服务器配置</li>
</ul>
<blockquote>
<p>  把<code>PermitRootLogin prohibit-password</code>改成<code>PermitRootLogin yes</code>，保存退出</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LoginGraceTime 2m</span></span><br><span class="line"><span class="comment">#PermitRootLogin prohibit-password</span></span><br><span class="line">PermitRootLogin yes <span class="comment"># 允许以root用户登录</span></span><br><span class="line"><span class="comment">#StrictModes yes</span></span><br><span class="line"><span class="comment">#MaxAuthTries 6</span></span><br><span class="line"><span class="comment">#MaxSessions 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  去掉<code>PubkeyAuthentication yes</code>前面的<code>#</code>号; 去掉<code>AuthorizedKeysFile </code>前面的<code>#</code>号，保存退出</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">PubkeyAuthentication yes  <span class="comment"># 打开该配置，允许使用密钥验证</span></span><br><span class="line">AuthorizedKeysFile   .ssh/authorized_keys <span class="comment"># 指明公钥位置，多个公钥，可以在文件末尾追加</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  重启ssh服务</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure>

<ul>
<li>  查看服务是否开启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  在vi的命令模式下 <code>/关键词</code>即可实现搜索效果</p>
</blockquote>
<h4 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h4><blockquote>
<p>  在上一步中，服务器端已经配置过<code>ssh</code>服务端，现在就可以在本地电脑上，使用 <code>ssh</code>客户端链接远程的服务器</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ ssh root@192.168.1.9   -p 2222  <span class="comment"># ssh服务的端口号默认是22，如果不是，就需要使用 -p 指明</span></span><br></pre></td></tr></table></figure>

<p>命令执行完成后，会提示输入密码，注意： <code>密码是远程服务器的密码，也就是上一步最后设置的密码</code></p>
<h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><blockquote>
<p>  此时每次链接远程服务都需要输入密码，比较麻烦；可以通过公钥验证身份</p>
</blockquote>
<h5 id="制作密钥对"><a href="#制作密钥对" class="headerlink" title="制作密钥对"></a>制作密钥对</h5><p>首先在客户端执行如下命令, 制作密钥对。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host ~]$ ssh-keygen <span class="comment"># &lt;== 建立密钥对</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): <span class="comment"># &lt;== 按 Enter</span></span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment"># &lt;== 输入密钥锁码，或直接按 Enter 留空</span></span><br><span class="line">Enter same passphrase again:  <span class="comment"># &lt;== 再输入一遍密钥锁码</span></span><br><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa. <span class="comment"># &lt;== 私钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub. <span class="comment"># &lt;== 公钥</span></span><br><span class="line"></span><br><span class="line">The key fingerprint is:</span><br><span class="line">0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在，在 root 用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。id_rsa 为私钥，id_rsa.pub 为公钥。</span></span><br></pre></td></tr></table></figure>

<h5 id="上传公钥到服务器"><a href="#上传公钥到服务器" class="headerlink" title="上传公钥到服务器"></a>上传公钥到服务器</h5><h6 id="方法一-推荐"><a href="#方法一-推荐" class="headerlink" title="方法一(推荐)"></a>方法一(推荐)</h6><p>直接将公钥内容添加到服务器的 授权密钥文件<code>~/.ssh/authorized_keys</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id  -p 22 -i ~/.ssh/id_rsa.pub root@192.168.1.9</span><br></pre></td></tr></table></figure>

<p>执行命令了会要求输入远程机器的密码，输入密码即可。</p>
<p>注：<code>ssh-copy-id</code>默认端口是22，如果您的SSH端口不是22，也就是远程服务器端口修改成其他的了，那就要得加上 <code>-p</code> +端口。</p>
<h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>先在客户端使用<code>scp</code>命令将公钥文件上传至服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp ~/.ssh/id_rsa.pub root@192.168.1.9:~/.ssh/</span><br></pre></td></tr></table></figure>

<p>使用密码登录服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -p 22  root@192.168.1.9  </span><br></pre></td></tr></table></figure>

<p>在服务器将公钥文件添加到授权密钥文件<code>~/.ssh/authorized_keys</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h5 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh root@192.168.1.9</span><br></pre></td></tr></table></figure>

<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a><code>scp</code></h3><blockquote>
<p>  本地文件复制到远程服务器, <strong>当远程ssh服务的端口不是22，通过 <code>-P</code> 指明</strong></p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scp -P 端口 本地文件地址  用户名@远程服务器地址:/文件路径</span></span><br><span class="line"><span class="comment"># 注意：远程服务器的文件路径必须存在</span></span><br><span class="line">scp -P 2222 ~/.ssh/id_rsa.pub root@127.0.0.1:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>将本地公钥 复制到远程服务器上， 此时在复制时，还需要 输入root用户的密码</p>
<p>复制成功，之后的所有操作 就可以通过密钥实现验证，不需要再输入密码</p>
<blockquote>
<p>  将远程服务器文件复制到本地</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scp -P 端口 用户名@远程服务器地址:/文件路径 本地路径 </span></span><br><span class="line">scp -P 2222 root@127.0.0.1:/root/.ssh/authorized_keys  ~/Documents</span><br></pre></td></tr></table></figure>

<h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a><code>sftp</code></h3><p>链接远程服务器</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sftp user@ip, 当远程ssh服务的端口不是22，通过 -P 指明</span></span><br><span class="line">sftp -P 2222 root@127.0.0.1 </span><br></pre></td></tr></table></figure>

<p>执行命令，进入交互环境</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; </span><br></pre></td></tr></table></figure>

<p>以下命令都是在交互环境下执行</p>
<ul>
<li>  查看帮助信息</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">help</span>  <span class="comment"># 执行help, 可以看看sftp支持哪些命令。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  查看路径</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">pwd</span>  <span class="comment"># 查看远程服务器的当前路径</span></span><br><span class="line">Remote working directory: /root</span><br><span class="line"></span><br><span class="line">sftp&gt; lpwd  <span class="comment"># 查看本地的当前路径</span></span><br><span class="line">Local working directory: /Users/lsf/Documents</span><br></pre></td></tr></table></figure>

<ul>
<li>  查看目录下的文件信息</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; ls  <span class="comment"># 查看远程服务器当前目录下的文件列表</span></span><br><span class="line">authorized_keys  id_rsa.pub</span><br><span class="line">sftp&gt; lls  <span class="comment"># 查看本地电脑当前目录下的文件列表</span></span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN	GitNote 	gitbook		hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>  下载文件</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程服务器的文件 到本地</span></span><br><span class="line">sftp&gt; get id_rsa.pub /Users/lsf/Documents</span><br><span class="line">Fetching /root/.ssh/id_rsa.pub to /Users/lsf/Documents/id_rsa.pub</span><br><span class="line">/root/.ssh/id_rsa.pub                                                                                        100%  575   213.3KB/s   00:00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载远程服务器的 .ssh 文件夹 到 本地目录， 需要参数 -r</span></span><br><span class="line">sftp&gt; get -r  .ssh/ /Users/lsf/Documents  </span><br><span class="line">Fetching /root/.ssh/ to /Users/lsf/Documents/.ssh</span><br><span class="line">Retrieving /root/.ssh</span><br><span class="line">/root/.ssh/authorized_keys                                                                                   100%  575   262.3KB/s   00:00</span><br><span class="line">/root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>  上传文件</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传 本地文件到 远程服务器的当前目录</span></span><br><span class="line">sftp&gt; put random.html .</span><br><span class="line">Uploading random.html to /root/.ssh/./random.html</span><br><span class="line">random.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传 本地文件夹到 远程服务器的当前目录，需要参数 -r </span></span><br><span class="line">sftp&gt; put -r GitNote  .</span><br><span class="line">Uploading GitNote/ to /root/.ssh/./GitNote</span><br><span class="line">Entering GitNote/</span><br><span class="line">Entering GitNote/Note</span><br><span class="line">GitNote/Note/Shadowsocks配置.md                                                                            100% 1107     1.0MB/s   00:00</span><br><span class="line">GitNote/Note/Docker镜像配置.md                                                                           100%   84    66.4KB/s   00:00</span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>command</code>, 此时命令都是在 远程服务器执行</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; rm id_rsa.pub</span><br><span class="line">Removing /root/.ssh/id_rsa.pub</span><br><span class="line">sftp&gt; mkdir upload</span><br><span class="line">sftp&gt; ls</span><br><span class="line">GitNote          authorized_keys  random.html      upload</span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>!command</code>,  此时命令是在本地电脑上执行</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sftp&gt; !ls</span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN	GitNote		authorized_keys	desktop.ini	gitbook</span><br><span class="line">sftp&gt; !rm authorized_keys</span><br><span class="line">sftp&gt; !ls</span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN	GitNote		desktop.ini	gitbook</span><br><span class="line">sftp&gt; lls</span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN	GitNote		desktop.ini	gitbook</span><br></pre></td></tr></table></figure>

<ul>
<li>  退出命令： <code>exit</code>、<code>bye</code>、<code>quit</code></li>
</ul>
]]></content>
      <tags>
        <tag>FTP</tag>
        <tag>SCP</tag>
        <tag>STFP</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法总结与实现</title>
    <url>/2019/05/09/jopKI_gOL/</url>
    <content><![CDATA[<p>经典排序算法在面试中占有很大的比重，也是基础，为了未雨绸缪，整理并用Python实现了七大经典排序算法，包括冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。之所以用Python实现，主要是因为它更接近伪代码，能用更少的代码实现算法，更利于理解。</p>
<span id="more"></span>

<p>本篇博客所有排序实现均默认从小到大。</p>
<h2 id="冒泡排序-BubbleSort"><a href="#冒泡排序-BubbleSort" class="headerlink" title="冒泡排序 BubbleSort"></a>冒泡排序 <code>BubbleSort</code></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序逆序就把他们交换过来。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<p>不过针对上述实现过程还有两种优化方案。</p>
<ul>
<li>优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。</li>
<li>优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序，不用再排序了。因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</li>
</ul>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)                   <span class="comment">#获得数组的长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n-i):</span><br><span class="line">            <span class="keyword">if</span>  ary[j-<span class="number">1</span>] &gt; ary[j] :       <span class="comment">#如果前者比后者大</span></span><br><span class="line">                ary[j-<span class="number">1</span>],ary[j] = ary[j],ary[j-<span class="number">1</span>]       <span class="comment">#则交换两者</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。</span></span><br><span class="line"><span class="comment">#用一个标记记录这个状态即可。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort2</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        flag = <span class="number">1</span>                    <span class="comment">#标记</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n-i):</span><br><span class="line">            <span class="keyword">if</span>  ary[j-<span class="number">1</span>] &gt; ary[j] :</span><br><span class="line">                ary[j-<span class="number">1</span>],ary[j] = ary[j],ary[j-<span class="number">1</span>]</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag :                   <span class="comment">#全排好序了，直接跳出</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br><span class="line"></span><br><span class="line"><span class="comment">#优化2：记录某次遍历时最后发生数据交换的位置，这个位置之后的数据显然已经有序了。</span></span><br><span class="line"><span class="comment"># 因此通过记录最后发生数据交换的位置就可以确定下次循环的范围了。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort3</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    k = n                           <span class="comment">#k为循环的范围，初始值n</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,k):        <span class="comment">#只遍历到最后交换的位置即可</span></span><br><span class="line">            <span class="keyword">if</span>  ary[j-<span class="number">1</span>] &gt; ary[j] :</span><br><span class="line">                ary[j-<span class="number">1</span>],ary[j] = ary[j],ary[j-<span class="number">1</span>]</span><br><span class="line">                k = j               <span class="comment">#记录最后交换的位置</span></span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br></pre></td></tr></table></figure>
<h2 id="选择排序-SelectionSort"><a href="#选择排序-SelectionSort" class="headerlink" title="选择排序 SelectionSort"></a>选择排序 <code>SelectionSort</code></h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>选择排序无疑是最简单直观的排序。它的工作原理如下。</p>
<h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>以此类推，直到所有元素均排序完毕。</li>
</ol>
<h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">        <span class="built_in">min</span> = i                             <span class="comment">#最小元素下标标记</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span> ary[j] &lt; ary[<span class="built_in">min</span>] :</span><br><span class="line">                <span class="built_in">min</span> = j                     <span class="comment">#找到最小值的下标</span></span><br><span class="line">        ary[<span class="built_in">min</span>],ary[i] = ary[i],ary[<span class="built_in">min</span>]   <span class="comment">#交换两者</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br></pre></td></tr></table></figure>

<h2 id="插入排序-InsertionSort"><a href="#插入排序-InsertionSort" class="headerlink" title="插入排序 InsertionSort"></a>插入排序 <code>InsertionSort</code></h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果被扫描的元素（已排序）大于新元素，将该元素后移一位</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>
<h3 id="排序演示"><a href="#排序演示" class="headerlink" title="排序演示"></a>排序演示</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509200851-Insertion-sort-example-300px%20.gif" alt="20190509200851-Insertion-sort-example-300px"></p>
<h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        <span class="keyword">if</span> ary[i] &lt; ary[i-<span class="number">1</span>]:</span><br><span class="line">            temp = ary[i]</span><br><span class="line">            index = i           <span class="comment">#待插入的下标</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment">#从i-1 循环到 0 (包括0)</span></span><br><span class="line">                <span class="keyword">if</span> ary[j] &gt; temp :</span><br><span class="line">                    ary[j+<span class="number">1</span>] = ary[j]</span><br><span class="line">                    index = j   <span class="comment">#记录待插入下标</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            ary[index] = temp</span><br><span class="line">    <span class="keyword">return</span> ary</span><br></pre></td></tr></table></figure>

<h2 id="希尔排序-ShellSort"><a href="#希尔排序-ShellSort" class="headerlink" title="希尔排序 ShellSort"></a>希尔排序 <code>ShellSort</code></h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>希尔排序，也称递减增量排序算法，实质是分组插入排序。由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。</p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。</p>
<ol>
<li>例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13 14 94 33 82</span><br><span class="line">25 59 94 65 23</span><br><span class="line">45 27 73 25 39</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li>
<li>然后我们对每列进行排序： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 14 73 25 23</span><br><span class="line">13 27 94 33 39</span><br><span class="line">25 59 94 65 82</span><br><span class="line">45</span><br></pre></td></tr></table></figure></li>
<li>将上述四行数字，依序接在一起时我们得到：<code>[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]</code>。这时10已经移至正确位置了，然后再以3为步长进行排序： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 14 73</span><br><span class="line">25 23 13</span><br><span class="line">27 94 33</span><br><span class="line">39 25 59</span><br><span class="line">94 65 82</span><br><span class="line">45</span><br></pre></td></tr></table></figure>
 排序之后变为： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 14 13</span><br><span class="line">25 23 33</span><br><span class="line">27 25 59</span><br><span class="line">39 65 73</span><br><span class="line">45 94 82</span><br><span class="line">94</span><br></pre></td></tr></table></figure></li>
<li>最后以1步长进行排序（此时就是简单的插入排序了）。</li>
</ol>
<h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    gap = <span class="built_in">round</span>(n/<span class="number">2</span>)       <span class="comment">#初始步长 , 用round四舍五入取整</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,n):        <span class="comment">#每一列进行插入排序 , 从gap 到 n-1</span></span><br><span class="line">            temp = ary[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> ( j &gt;= gap <span class="keyword">and</span> ary[j-gap] &gt; temp ):    <span class="comment">#插入排序</span></span><br><span class="line">                ary[j] = ary[j-gap]</span><br><span class="line">                j = j - gap</span><br><span class="line">            ary[j] = temp</span><br><span class="line">        gap = <span class="built_in">round</span>(gap/<span class="number">2</span>)                     <span class="comment">#重新设置步长</span></span><br><span class="line">    <span class="keyword">return</span> ary</span><br></pre></td></tr></table></figure>
<h2 id="归并排序-MergeSort"><a href="#归并排序-MergeSort" class="headerlink" title="归并排序 MergeSort"></a>归并排序 <code>MergeSort</code></h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p>
<p>先考虑合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p>
<p>再考虑递归分解，基本思路是将数组分解成left和right，如果这两个数组内部数据是有序的，那么就可以用上面合并数组的方法将这两个数组合并排序。如何让这两个数组内部是有序的？可以再二分，直至分解出的小组只含有一个元素时为止，此时认为该小组内部已有序。然后合并排序相邻二个小组即可。</p>
<h3 id="排序演示-1"><a href="#排序演示-1" class="headerlink" title="排序演示"></a>排序演示</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509201729-Merge-sort-example-300px%20.gif" alt="20190509201729-Merge-sort-example-300px"></p>
<h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ary) &lt;= <span class="number">1</span> : <span class="keyword">return</span> ary</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">len</span>(ary)/<span class="number">2</span>)       <span class="comment">#二分分解</span></span><br><span class="line">    left = merge_sort(ary[:num])</span><br><span class="line">    right = merge_sort(ary[num:])</span><br><span class="line">    <span class="keyword">return</span> merge(left,right)    <span class="comment">#合并数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">left,right</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;合并操作，</span></span><br><span class="line"><span class="string">    将两个有序数组left[]和right[]合并成一个大的有序数组&#x27;&#x27;&#x27;</span></span><br><span class="line">    l,r = <span class="number">0</span>,<span class="number">0</span>           <span class="comment">#left与right数组的下标指针</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> l&lt;<span class="built_in">len</span>(left) <span class="keyword">and</span> r&lt;<span class="built_in">len</span>(right) :</span><br><span class="line">        <span class="keyword">if</span> left[l] &lt; right[r]:</span><br><span class="line">            result.append(left[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">    result += left[l:]</span><br><span class="line">    result += right[r:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h2 id="快速排序-QuickSort"><a href="#快速排序-QuickSort" class="headerlink" title="快速排序 QuickSort"></a>快速排序 <code>QuickSort</code></h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>快速排序通常明显比同为<code>Ο(n log n)</code>的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。</p>
<h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>从数列中挑出一个元素作为基准数。</li>
<li>分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。</li>
<li>再对左右区间递归执行第二步，直至各区间只有一个数。</li>
</ol>
<h3 id="排序演示-2"><a href="#排序演示-2" class="headerlink" title="排序演示"></a>排序演示</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509202100-Quicksort-example%20.gif" alt="20190509202100-Quicksort-example"></p>
<h3 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">ary</span>):</span></span><br><span class="line">    <span class="keyword">return</span> qsort(ary,<span class="number">0</span>,<span class="built_in">len</span>(ary)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span>(<span class="params">ary,left,right</span>):</span></span><br><span class="line">    <span class="comment">#快排函数，ary为待排序数组，left为待排序的左边界，right为右边界</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right : <span class="keyword">return</span> ary</span><br><span class="line">    key = ary[left]     <span class="comment">#取最左边的为基准数</span></span><br><span class="line">    lp = left           <span class="comment">#左指针</span></span><br><span class="line">    rp = right          <span class="comment">#右指针</span></span><br><span class="line">    <span class="keyword">while</span> lp &lt; rp :</span><br><span class="line">        <span class="keyword">while</span> ary[rp] &gt;= key <span class="keyword">and</span> lp &lt; rp :</span><br><span class="line">            rp -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> ary[lp] &lt;= key <span class="keyword">and</span> lp &lt; rp :</span><br><span class="line">            lp += <span class="number">1</span></span><br><span class="line">        ary[lp],ary[rp] = ary[rp],ary[lp]</span><br><span class="line">    ary[left],ary[lp] = ary[lp],ary[left]</span><br><span class="line">    qsort(ary,left,lp-<span class="number">1</span>)</span><br><span class="line">    qsort(ary,rp+<span class="number">1</span>,right)</span><br><span class="line">    <span class="keyword">return</span> ary</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="堆排序-HeapSort"><a href="#堆排序-HeapSort" class="headerlink" title="堆排序 HeapSort"></a>堆排序 <code>HeapSort</code></h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p>堆排序在 <code>top K</code> 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。</p>
<blockquote>
<p>二叉堆具有以下性质：</p>
</blockquote>
<p>父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。<br>每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。</p>
<h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>构造最大堆（<code>Build_Max_Heap</code>）：若数组下标范围为<code>0~n</code>，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从<code>n/2-1</code>开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。</p>
</li>
<li><p>堆排序（<code>HeapSort</code>）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将<code>heap[0]</code>与<code>heap[n-1]</code>交换，再对<code>heap[0...n-2]</code>做最大堆调整。第二次将<code>heap[0]</code>与<code>heap[n-2]</code>交换，再对<code>heap[0...n-3]</code>做最大堆调整。重复该操作直至<code>heap[0]</code>和<code>heap[1]</code>交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。</p>
</li>
<li><p>最大堆调整（<code>Max_Heapify</code>）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。</p>
</li>
</ol>
<h3 id="排序演示-3"><a href="#排序演示-3" class="headerlink" title="排序演示"></a>排序演示</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203202-Heapsort-example%20.gif" alt="20190509203202-Heapsort-example"></p>
<h3 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">ary</span>) :</span></span><br><span class="line">    n = <span class="built_in">len</span>(ary)</span><br><span class="line">    first = <span class="built_in">int</span>(n/<span class="number">2</span>-<span class="number">1</span>)       <span class="comment">#最后一个非叶子节点</span></span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(first,-<span class="number">1</span>,-<span class="number">1</span>) :     <span class="comment">#构造大根堆</span></span><br><span class="line">        max_heapify(ary,start,n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):           <span class="comment">#堆排，将大根堆转换成有序数组</span></span><br><span class="line">        ary[end],ary[<span class="number">0</span>] = ary[<span class="number">0</span>],ary[end]</span><br><span class="line">        max_heapify(ary,<span class="number">0</span>,end-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点</span></span><br><span class="line"><span class="comment">#start为当前需要调整最大堆的位置，end为调整边界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_heapify</span>(<span class="params">ary,start,end</span>):</span></span><br><span class="line">    root = start</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        child = root*<span class="number">2</span> +<span class="number">1</span>               <span class="comment">#调整节点的子节点</span></span><br><span class="line">        <span class="keyword">if</span> child &gt; end : <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> child+<span class="number">1</span> &lt;= end <span class="keyword">and</span> ary[child] &lt; ary[child+<span class="number">1</span>] :</span><br><span class="line">            child = child+<span class="number">1</span>             <span class="comment">#取较大的子节点</span></span><br><span class="line">        <span class="keyword">if</span> ary[root] &lt; ary[child] :     <span class="comment">#较大的子节点成为父节点</span></span><br><span class="line">            ary[root],ary[child] = ary[child],ary[root]     <span class="comment">#交换</span></span><br><span class="line">            root = child</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面为七种经典排序算法指标对比情况：<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190509203208-81b78497jw1emncvtdf1qj20u10afn0r%20.jpg" alt="20190509203208-81b78497jw1emncvtdf1qj20u10afn0r"></p>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask易错点</title>
    <url>/2019/03/22/jybbJvrN4/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">   	<span class="keyword">return</span> <span class="string">&quot;index page&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">   	<span class="keyword">return</span> <span class="string">&quot;index page&quot;</span></span><br><span class="line">app.route(<span class="string">&quot;/&quot;</span>)(index)</span><br></pre></td></tr></table></figure>

<p>装饰器不仅仅是定义时可以用，还可以在定义完再使用</p>
<h2 id="自定义正则转换器"><a href="#自定义正则转换器" class="headerlink" title="自定义正则转换器"></a>自定义正则转换器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则转换器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url_map, regex</span>):</span></span><br><span class="line">        <span class="comment"># 调用父类初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(ReConverter, self).__init__(url_map)</span><br><span class="line">        <span class="comment"># 重新赋值</span></span><br><span class="line">        self.regex = regex</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加自定义的转换器</span></span><br><span class="line">  app.url_map.converters[<span class="string">&quot;re&quot;</span>] = ReConverter</span><br></pre></td></tr></table></figure>

<h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, current_app</span><br><span class="line"></span><br><span class="line">html = Blueprint(<span class="string">&quot;web_html&quot;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@html.route(<span class="params"><span class="string">&quot;/&lt;re(r&#x27;.*&#x27;):file_name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web_html</span>(<span class="params">file_name</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">        file_name = <span class="string">&quot;index.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file_name != <span class="string">&quot;favicon.ico&quot;</span>:</span><br><span class="line">        file_name = <span class="string">&quot;html/&quot;</span> + file_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_app.send_static_file(file_name)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line">app.register_blueprint(html)</span><br></pre></td></tr></table></figure>

<h2 id="登录装饰器"><a href="#登录装饰器" class="headerlink" title="登录装饰器"></a>登录装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义验证登录状态的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span>(<span class="params">view_func</span>):</span></span><br><span class="line">    <span class="comment"># wraps函数的作用是将wrapper内层函数的属性设置为被装饰函数view_func的属性</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">view_func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 判断用户登录状态</span></span><br><span class="line">        user_id = session.get(<span class="string">&quot;user_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果用户是登录状态，则执行登录状态</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 将user_id保存到g对象中，在视图函数中，可以通过g对象获取保存数据</span></span><br><span class="line">            g.user_id = user_id</span><br><span class="line">            <span class="keyword">return</span> view_func(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 如果未登录，则返回未登录信息</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(errno=RET.SESSIONERR, errmsg=<span class="string">&quot;用户未登录&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT浅析</title>
    <url>/2020/10/24/kjR_ZMnMK/</url>
    <content><![CDATA[<ul>
<li><p>  Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（<a href="https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>). </p>
</li>
<li><p>  token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p>
</li>
<li><p>  JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。</p>
</li>
</ul>
<span id="more"></span>

<h2 id="Jwt起源"><a href="#Jwt起源" class="headerlink" title="Jwt起源"></a>Jwt起源</h2><p>说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。</p>
<h3 id="传统的-session-认证"><a href="#传统的-session-认证" class="headerlink" title="传统的 session 认证"></a>传统的 session 认证</h3><p>我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了, 这就是传统的基于 session 认证。</p>
<p>但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.</p>
<blockquote>
<p>  ==基于 session 认证所显露的问题==</p>
</blockquote>
<p><strong>Session</strong>: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</p>
<p><strong>扩展性</strong>: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上, 这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</p>
<p><strong>CSRF</strong>: 因为是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p>
<h3 id="基于-token-的鉴权机制"><a href="#基于-token-的鉴权机制" class="headerlink" title="基于 token 的鉴权机制"></a>基于 token 的鉴权机制</h3><p>基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p>
<p>流程上是这样的：</p>
<ul>
<li>  用户使用用户名密码来请求服务器</li>
<li>  服务器进行验证用户的信息</li>
<li>  服务器通过验证发送给用户一个 token</li>
<li>  客户端存储 token，并在每次请求时附送上这个 token 值</li>
<li>  服务端验证 token 值，并返回数据</li>
</ul>
<p>这个 token 必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<code>CORS(跨来源资源共享)</code>策略，一般我们在服务端这么做就可以了<code>Access-Control-Allow-Origin: *</code>。</p>
<p>那么我们现在回到 JWT 的主题上。</p>
<h2 id="JWT解析"><a href="#JWT解析" class="headerlink" title="JWT解析"></a>JWT解析</h2><p>网上大多数介绍JWT的文章实际介绍的都是<code>JWS(JSON Web Signature)</code>,也往往导致了人们对于JWT的误解，但是JWT并不等于JWS，JWS只是JWT的一种实现，除了JWS外，<code>JWE(JSON Web Encryption)</code>也是JWT的一种实现。</p>
<p>下面就来详细介绍一下JWT与JWE的两种实现方式：</p>
<img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/06/iShot2021-06-10%2023.54.56.png" alt="JWT" style="zoom: 33%;" />

<h3 id="JSON-Web-Signature-JWS"><a href="#JSON-Web-Signature-JWS" class="headerlink" title="JSON Web Signature(JWS)"></a>JSON Web Signature(JWS)</h3><p>JSON Web Signature是一个有着简单的统一表达形式的字符串：由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了 Jwt 字符串。</p>
<ul>
<li>  第一部分我们称它为头部（header)</li>
<li>  第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)</li>
<li>  第三部分是签证（signature)</li>
</ul>
<img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/06/iShot2021-06-10%2023.56.21.png" alt="JWS构成" style="zoom:50%;" />

<p>然后将每一部分进行<code>base64</code>编码之后，就像这样:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>

<h4 id="header（头信息）"><a href="#header（头信息）" class="headerlink" title="header（头信息）"></a>header（头信息）</h4><p>jwt 的头部承载两部分信息：</p>
<ul>
<li>  令牌类型（即：JWT）</li>
<li>  散列算法（HMAC、RSASSA、RSASSA-PSS等）</li>
</ul>
<p>完整的头部就像下面这样的 JSON：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将头部进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>

<h4 id="Payload（有效载荷）"><a href="#Payload（有效载荷）" class="headerlink" title="Payload（有效载荷）"></a>Payload（有效载荷）</h4><p>载荷就是存放有效信息的地方，其中包含claims。claims是关于实体（常用的是用户信息）和其他数据的声明，claims有三种类型：</p>
<ul>
<li><strong>Registered claims（注册的声明）：</strong> 这些是一组预定义的claims，非强制性的，但是推荐使用， iss（发行人）， exp（到期时间）， sub（主题）， aud（观众）等；</li>
<li><strong>Public claims（公共的声明）:</strong> 自定义claims，注意不要和JWT注册表中属性冲突，<a href="https://www.iana.org/assignments/jwt/jwt.xhtml">这里可以查看JWT标准注册表</a></li>
<li><strong>Private claims（私有的声明）:</strong> 这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。</li>
</ul>
<h5 id="标准中注册的声明"><a href="#标准中注册的声明" class="headerlink" title="标准中注册的声明"></a>标准中注册的声明</h5><blockquote>
<p><strong>建议但不强制使用</strong></p>
</blockquote>
<ul>
<li>  <strong>iss</strong>: jwt 签发者</li>
<li>  <strong>sub</strong>: jwt 所面向的用户</li>
<li>  <strong>aud</strong>: 接收 jwt 的一方</li>
<li>  <strong>exp</strong>: jwt 的过期时间，这个过期时间必须要大于签发时间，注意，这个值是秒数，而不是毫秒数。</li>
<li>  <strong>nbf</strong>: 定义在什么时间之前，该 jwt 都是不可用的.</li>
<li>  <strong>iat</strong>: jwt 的签发时间</li>
<li>  <strong>jti</strong>: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</li>
<li>  <strong>name</strong>：用户全名</li>
</ul>
<h5 id="公共的声明"><a href="#公共的声明" class="headerlink" title="公共的声明"></a>公共的声明</h5><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密。</p>
<h5 id="私有的声明"><a href="#私有的声明" class="headerlink" title="私有的声明"></a>私有的声明</h5><p>私有声明是提供者和消费者所共同定义的声明，<strong>一般不建议存放敏感信息</strong>，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。</p>
<blockquote>
<p>在官网有详细的属性说明，尽量使用里面提到的 <em>Registered Claim Names</em>，这样可以提高阅读性</p>
</blockquote>
<p>自定义一个 payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将其进行 base64 加密，得到 Jwt 的第二部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>

<h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><p>jwt 的第三部分是一个签证信息，这个签证信息由三部分组成：</p>
<ul>
<li>  header (base64 后的)</li>
<li>  payload (base64 后的)</li>
<li>  secret</li>
</ul>
<p>这个签名的计算跟第一部分中的 alg 属性有关，假如是 HS256，那么服务端需要保存一个私钥，比如 secret 。然后，把第一部分和第二部分生成的两个字符串用 <code>.</code> 连接之后，用 HS256 进行加盐<code>secret</code>加密，然后就构成了 jwt 的第三部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>

<p>将这三部分用<code>.</code>连接成一个完整的字符串, 构成了最终的 jwt:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：secret 是保存在服务器端的，jwt 的签发生成也是在服务器端的，secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个 secret, 那就意味着客户端是可以自我签发 jwt 了。</strong></p>
</blockquote>
<h3 id="JSON-Web-Encryption-JWE"><a href="#JSON-Web-Encryption-JWE" class="headerlink" title="JSON Web Encryption(JWE)"></a>JSON Web Encryption(JWE)</h3><p>相对于JWS，JWE则同时保证了安全性与数据完整性。<br>JWE由五部分组成：</p>
<img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/06/iShot2021-06-10%2023.57.03.png" alt="JWE构成" style="zoom:50%;" />

<p>我们来看看一个标准的JWE过程是怎样的：</p>
<ul>
<li><p>  JOSE含义与JWS头部相同。</p>
</li>
<li><p>  生成一个随机的Content Encryption Key （CEK）。</p>
</li>
<li><p>  使用RSAES-OAEP 加密算法，用公钥加密CEK，生成JWE Encrypted Key。</p>
</li>
<li><p>  生成JWE初始化向量。</p>
</li>
<li><p>  使用AES GCM加密算法对明文部分进行加密生成密文Ciphertext,算法会随之生成一个128位的认证标记Authentication Tag。</p>
</li>
<li><p>  对五个部分分别进行base64编码。</p>
</li>
</ul>
<p>可见，JWE的计算过程相对繁琐，不够轻量级，因此适合与数据传输而非token认证，但该协议也足够安全可靠，用简短字符串描述了传输内容，兼顾数据的安全性与完整性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>  因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 JAVA,JavaScript,NodeJS,Python 等很多语言都可以使用。</li>
<li>  它不需要在服务端保存会话信息, 所以它易于应用的扩展。</li>
</ul>
]]></content>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>python高阶函数</title>
    <url>/2020/06/06/lVRaOCcfZ/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>当一个函数 接收 另一个函数作为参数， 它就是 <code>高阶函数</code></p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, x, y</span>):</span></span><br><span class="line">    a(x, y)  <span class="comment"># a就是传递的 函数参数f，  执行 a 相当于 执行  f</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line">func(f, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 3， 在函数f执行过程中，输出 3</span></span><br></pre></td></tr></table></figure>

<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(func, iterable)</span><br></pre></td></tr></table></figure>

<h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>将 <strong>可迭代对象</strong> 中的每个值 按照 第一个参数( <strong>函数</strong>)的 规则 依次 处理， 得到一个 新的 <strong>迭代器</strong> 对象</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param alist: 接收列表作为参数</span></span><br><span class="line"><span class="string">    :return: 将列表中每个数字，求平方之后，返回一个新列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sqr</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">    r = <span class="built_in">map</span>(sqr, alist) <span class="comment"># r是迭代器对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(r)  <span class="comment"># 将迭代器对象转换为列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = func([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>])</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数， 接收 列表 作为参数 ， 返回一个 包含 绝对值  的新列表</span></span><br><span class="line"><span class="comment"># abs()：python内置函数，求一个数的绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="comment"># map 高阶函数需要的参数，不用管是内置的，还是自定义的</span></span><br><span class="line">    r = <span class="built_in">map</span>(<span class="built_in">abs</span>, alist)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = func([-<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>, -<span class="number">98</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [12, 34, 56, 98]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数，接收 一个 包含 单词的字符串， 返回 一个 每个单词 首字母大写 的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">astr</span>):</span></span><br><span class="line">    <span class="comment"># 将字符串切分为单词列表</span></span><br><span class="line">    wlist = astr.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toUpper</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x.title()</span><br><span class="line"></span><br><span class="line">    r = <span class="built_in">map</span>(toUpper, wlist)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单词拼接为字符串</span></span><br><span class="line">    s = <span class="string">&quot; &quot;</span>.join(r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = func(<span class="string">&quot;a good  fruit apple&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># &quot; A Good  Fruit Apple&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示： 可以考虑 将 字符串按照 单词 切分， map处理之后， 再 重新拼接为字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce(func, iterable)</span><br></pre></td></tr></table></figure>

<h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>将可迭代对象中所有的元素，按照第一个 函数的规则， 连续操作，得到一个  <strong>具体的数据</strong></p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义一个Mysum()函数，接收一个列表作为参数， 返回列表中所有元素之和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysum</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">    r = reduce(add, alist) <span class="comment"># reduce 的结果是一个具体的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = mysum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">filter</span>(func, iterable)</span><br></pre></td></tr></table></figure>



<h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>按照第一个 函数的 <strong>返回值</strong> 对 可迭代对象 中 所有的数据 进行 过滤， 得到一个 包含过滤后结果的 <strong>迭代器对象</strong></p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义一个filterNumber()函数，接收一个列表作为参数， 返回一个 包含偶数 的列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterNumber</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_even</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果函数的返回结果为True, 对应的元素可以得到&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    r = <span class="built_in">filter</span>(is_even, alist)  <span class="comment"># r也是迭代器对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(r)  <span class="comment"># 通过类型转换，将迭代器中数据取出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = filterNumber([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [2, 4, 6]]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义一个函数 sevenNumber()函数，接收一个列表作为参数， 返回一个 包含 &quot;逢7必过&quot; 数字的新列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sevenNumber</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="comment"># 判断为7的倍数，返回True</span></span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> <span class="string">&#x27;7&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    r = <span class="built_in">filter</span>(f, alist)  <span class="comment"># r是迭代器对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = sevenNumber(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><code>sorted</code></h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(iterable, key=func, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>将可迭代对象 按照某种规则 排序，升序和降序均可。</p>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alist = [<span class="number">21</span>, <span class="number">14</span>, -<span class="number">67</span>, -<span class="number">34</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 数字大小 升序 排序</span></span><br><span class="line">r = <span class="built_in">sorted</span>(alist)</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [-67, -34, 14, 19, 21]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 数字大小 降序 排序</span></span><br><span class="line">r = <span class="built_in">sorted</span>(alist, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [21, 19, 14, -34, -67]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照每 个数字的绝对值 升序 排序</span></span><br><span class="line">r = <span class="built_in">sorted</span>(alist, key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [14, 19, 21, -34, -67]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 每个数字的绝对值 降序 排序</span></span><br><span class="line">r = <span class="built_in">sorted</span>(alist, key=<span class="built_in">abs</span>, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(r)  <span class="comment"># [-67, -34, 21, 19, 14]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python匿名函数</title>
    <url>/2020/06/06/lo-vE2u5F/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><code>lambda</code></h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>匿名函数的另一个别称是<code>lambda表达式</code></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>lambda表达式的语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> argument_list: expression</span><br></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><code>argument_list</code>是参数列表。它的结构与Python中函数(<code>function</code>)的参数列表是一样的。</li>
<li><code>expression</code>是一个关于参数的表达式。表达式中出现的参数需要在<code>argument_list</code>中有定义，并且表达式只能是单行的。</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda x: x*x</span></span><br><span class="line"><span class="comment"># 这个lambda表达式实际等同于：</span></span><br><span class="line"><span class="comment"># def f(x):</span></span><br><span class="line"><span class="comment">#   return x*x</span></span><br><span class="line">In [<span class="number">15</span>]: f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: f</span><br><span class="line">Out[<span class="number">16</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;(x)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: f(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">25</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">24</span>]: x2 = <span class="keyword">lambda</span> *args: [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>(args)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: x2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">Out[<span class="number">25</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>]</span><br></pre></td></tr></table></figure>

<p>匿名函数作为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: s = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: s</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: s.sort(key=<span class="keyword">lambda</span> x : <span class="built_in">abs</span>(x-<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: s</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">32</span>]: stus = [</span><br><span class="line">...:     &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;,</span><br><span class="line">...:     &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">...:     &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">17</span>&#125;</span><br><span class="line">...: ]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: stus.sort(key=<span class="keyword">lambda</span> x : x[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: stus</span><br><span class="line">Out[<span class="number">34</span>]:</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: stus.sort(key=<span class="keyword">lambda</span> x : x[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: stus</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">17</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;]</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue引入本地资源</title>
    <url>/2020/10/23/m6N3Z1SCX/</url>
    <content><![CDATA[<p>简单介绍一下在Vue项目中引入本地资源的实现方式: <span id="more"></span></p>
<h2 id="引入本地图片"><a href="#引入本地图片" class="headerlink" title="引入本地图片"></a>引入本地图片</h2><h3 id="使用-引入："><a href="#使用-引入：" class="headerlink" title="使用 @引入："></a>使用 <code>@</code>引入：</h3><p>这是在组件内直接引用和普通的 html 方法一样，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;@/assets/test.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;test.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-vue-的方法引入："><a href="#使用-vue-的方法引入：" class="headerlink" title="使用 vue 的方法引入："></a>使用 vue 的方法引入：</h3><p>这是典型的 vue 思想，使用数据来操纵 dom； 首先在组件内使用 import … from 引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">&#x27;../assets/test.png&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>然后在 data 里面声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">imgSrc</span>: imgUrl</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后绑定数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;imgSrc&quot;</span> alt=<span class="string">&quot;imgSrc&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="引入样式文件"><a href="#引入样式文件" class="headerlink" title="引入样式文件"></a>引入样式文件</h2><p>在项目的 <code>src</code> 文件下，新建一个 <code>style</code> 文件夹，存放 <code>css</code> 文件。</p>
<h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><p>将外部的 css 文件放到 style 文件下，引入外部文件只需在 <code>main.js</code>文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure>

<p>还可以在项目的首页 <code>index.html</code>中，通过 <code>link标签正常引入即可</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./static/css/reset.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./static/css/main.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  @<span class="keyword">import</span> <span class="string">&#x27;../assets/iconfont/iconfont.css&#x27;</span>; <span class="comment">// 这个分号一定要写，要不会报错</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 引入模板文件时，一定要清除Vue项目本身的样式文件，即 <code>App.Vue</code>中的logo 和 style</p>
]]></content>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中的Decimal类型说明</title>
    <url>/2019/06/01/nc2dzXil_/</url>
    <content><![CDATA[<p>我们在Mysql中存字段的时候，比如，一些与金钱有关的数据。这个时候就会对精确到的要求非常高。那么这个时候，就会发现我们之前所学的八大基本类型不再能够满足需求，无论是整形还是浮点型，有人会说存整形有什么不可，但是你要知道不是每个人的金额都是整数的；这样不行的话，存浮点型的就可以了嘛，对于银行存钱来说，一个小数点的问题都会将一笔钱的金额变得很大或者很小……So，这个时候你可以尝试一下Decimal类型，你会发现能够很好地解决你的问题。</p>
<span id="more"></span>

<h3 id="decimal详细介绍："><a href="#decimal详细介绍：" class="headerlink" title="decimal详细介绍："></a>decimal详细介绍：</h3><p><strong>decimal(a,b)</strong></p>
<ul>
<li><p>参数说明：</p>
<ul>
<li><p>a:指定小数点左边和右边可以存储的十进制数字的最大个数，最大精度为38.</p>
</li>
<li><p>b:指定小数点右边可以存储的十进制数字的最大个数。小数位数必须是从0~a之间的值，默认小数位数是0.</p>
</li>
</ul>
</li>
<li><p>举例说明，11615.23653234568这个数存你说的三个格式</p>
<ul>
<li>decimal：11615</li>
<li>decimal(3)：999</li>
<li>decdimal(3,2)：9.99</li>
<li>decimal(10,5)11615.23653</li>
</ul>
<p><strong>超出精度范围的数会被强制进位并只显示数据类型定义的格式</strong></p>
</li>
<li><p>备注：</p>
<p>decimal数据类型用于要求非常高的精确计算中，这些类型允许指定数值的精确度和计算方法作为选择参数。精确度在这里指为这个值保存的有效数字的总个数。而计数方法指的是小数点后数字的个数。例如：decimal(5,2)规定了存储的值将不会超过五位数字 ，而且小数点后面有两位数字。</p>
</li>
</ul>
<h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(c1 <span class="built_in">float</span>(10,2), c3decimal(10,2));</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(9876543.21, 9876543.12);</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line"></span><br><span class="line">+------------+------------+</span><br><span class="line">| c1         | c3         |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 9876543.00 | 9876543.12 |</span><br><span class="line">+------------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会发现，flocat类型的字段会自动将值四舍五入，而decimal类型的不会，如果用flocat类型的去存与金额有关的数据的时候就会出现问题，而decimal类型的就不会。</strong></p>
<h4 id="实例2：decimal-5-2"><a href="#实例2：decimal-5-2" class="headerlink" title="实例2：decimal(5,2)"></a>实例2：decimal(5,2)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(id1 <span class="built_in">float</span>(5,2) default null,id2 double(5,2) default null,</span><br><span class="line">id3 decimal(5,2) default null );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1.2345,1.2345,1.2345);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show warnings;</span><br><span class="line">+-------+------+------------------------------------------+</span><br><span class="line">| Level | Code | Message                                  |</span><br><span class="line">+-------+------+------------------------------------------+</span><br><span class="line">| Note  | 1265 | Data truncated <span class="keyword">for</span> column <span class="string">&#x27;id3&#x27;</span> at row 1 |</span><br><span class="line">+-------+------+------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1.2345 — 小数点后最多2位，所以保存可以，自动四舍五入数据截断,但会报waning</p>
</li>
<li><p>12.34 — OK</p>
</li>
<li><p>1234.5 — 因为小数部分未满2位，要补0.所以保存应该1234.50。所以整个位数超出了5，保存报错。</p>
</li>
<li><p>1.2 — 小数未满部分补0。按照1.20保存。</p>
</li>
</ul>
<h3 id="默认状态比较："><a href="#默认状态比较：" class="headerlink" title="默认状态比较："></a>默认状态比较：</h3><ul>
<li>浮点数<ul>
<li>如果不写精度和标度，会按照实际精度值保存</li>
<li>如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错</li>
</ul>
</li>
<li>定点数<ul>
<li>如果不写精度和标度，则按照默认值decimal(10,0)来操作</li>
<li>如果数据超过了精度和标度值，系统会报错</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-ORM基本操作</title>
    <url>/2022/01/04/oUbHND5tD/</url>
    <content><![CDATA[<p>针对模型类的增删改查做简单介绍。</p>
<span id="more"></span>

<h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><p>通过 ORM 操作，增加 对应记录的方式有两种：</p>
<h2 id="模型类对象操作"><a href="#模型类对象操作" class="headerlink" title="模型类对象操作"></a>模型类对象操作</h2><ul>
<li>根据模型类创建对应的对象</li>
<li>调用对象的<code>save</code>方法，保存对象即可</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book(btitle=<span class="string">&#x27;昆仑&#x27;</span>, publish=<span class="string">&#x27;北京大学出版社&#x27;</span>, price=<span class="number">89</span>, bcomment=<span class="number">10000</span>, bread=<span class="number">3000</span>, bpub_date=date(<span class="number">2005</span>,<span class="number">8</span>,<span class="number">9</span>), author_id=<span class="number">3</span>)</span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure>

<h2 id="模型类管理器操作"><a href="#模型类管理器操作" class="headerlink" title="模型类管理器操作"></a>模型类管理器操作</h2><ul>
<li>调用模型类对应的管理器的 <code>create</code>方法，即可创建对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.create(btitle=<span class="string">&#x27;沧海&#x27;</span>, publish=<span class="string">&#x27;人民教育出版社&#x27;</span>, price=<span class="number">30</span>, author_id=<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><p>通过 ORM 操作，删除 对应记录的方式有两种：</p>
<h2 id="模型类对象操作-1"><a href="#模型类对象操作-1" class="headerlink" title="模型类对象操作"></a>模型类对象操作</h2><ul>
<li>使用<code>get</code>方法获取对应的模型类</li>
<li>调用对象的<code>delete</code>方法，删除对象即可</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">13</span>)  <span class="comment"># 获取模型对象</span></span><br><span class="line">book.delete() <span class="comment"># 调用模型对象的delete方法删除</span></span><br></pre></td></tr></table></figure>

<h2 id="模型类管理器操作-1"><a href="#模型类管理器操作-1" class="headerlink" title="模型类管理器操作"></a>模型类管理器操作</h2><ul>
<li>使用模型类的管理器 获取对应的查询集</li>
<li>调用查询集的 <code>delete</code> 方法删除对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_set = Book.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">14</span>)  <span class="comment"># 获取对应的查询集</span></span><br><span class="line">book_set.delete()  <span class="comment"># 调用delete方法删除</span></span><br></pre></td></tr></table></figure>

<h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><p>通过 ORM 操作，修改 对应记录的方式有两种：</p>
<h2 id="模型类对象操作-2"><a href="#模型类对象操作-2" class="headerlink" title="模型类对象操作"></a>模型类对象操作</h2><ul>
<li>修改模型类对象的属性</li>
<li>执行<code>save()</code>方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(btitle=<span class="string">&#x27;龙珠&#x27;</span>)</span><br><span class="line">book.btitle = <span class="string">&#x27;《龙珠》&#x27;</span></span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure>

<h2 id="模型类管理器操作-2"><a href="#模型类管理器操作-2" class="headerlink" title="模型类管理器操作"></a>模型类管理器操作</h2><ul>
<li>使用模型类的管理器 获取对应的查询集</li>
<li>调用查询集的 <code>update</code> 方法更新对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_set = Book.objects.<span class="built_in">filter</span>(btitle=<span class="string">&#x27;龙珠&#x27;</span>)  <span class="comment"># 通过管理器获取对应的查询集</span></span><br><span class="line">book_set.update(btitle=<span class="string">&#x27;《龙珠》&#x27;</span>)  <span class="comment"># 调用 update方法更新对象</span></span><br></pre></td></tr></table></figure>

<h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p><code>get</code> 查询单一结果，如果不存在会抛出<code>模型类.DoesNotExist</code>异常</p>
<p><code>all</code> 查询多个结果</p>
<p><code>count</code> 查询结果数量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Book, Author</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        books = Book.objects.<span class="built_in">all</span>()  <span class="comment"># 获取所有图书</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> books.count() == <span class="number">0</span>:  <span class="comment"># 获取查询结果的数量</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse([], safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        booksInfo = []  <span class="comment"># 构造空列表， 存储所有图书信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> books:  <span class="comment"># 遍历查询集</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                author = Author.objects.get(<span class="built_in">id</span>=book.author_id)  <span class="comment"># 查询图书对应的作者信息</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># get 查询不到，会抛出异常</span></span><br><span class="line">                <span class="comment"># e:Author matching query does not exist.</span></span><br><span class="line">                authorinfo = &#123;&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                authorinfo = &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: author.name,</span><br><span class="line">                    <span class="string">&quot;age&quot;</span>: author.age,</span><br><span class="line">                    <span class="string">&quot;gender&quot;</span>: author.gender</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            bookinfo = &#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: book.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;btitle&quot;</span>: book.btitle,</span><br><span class="line">                <span class="string">&quot;publish&quot;</span>: book.publish,</span><br><span class="line">                <span class="string">&quot;bcomment&quot;</span>: book.bcomment,</span><br><span class="line">                <span class="string">&quot;bread&quot;</span>: book.bread,</span><br><span class="line">                <span class="string">&quot;price&quot;</span>: book.price,</span><br><span class="line">                <span class="string">&quot;author&quot;</span>: authorinfo</span><br><span class="line">            &#125;</span><br><span class="line">            booksInfo.append(bookinfo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(booksInfo, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h2><h3 id="语法构造"><a href="#语法构造" class="headerlink" title="语法构造"></a>语法构造</h3><p>实现<em>SQL</em>中的<em>where</em>功能，包括</p>
<ul>
<li><strong><code>filter</code></strong> 过滤出多个结果</li>
<li><strong><code>exclude</code></strong> 排除掉符合条件剩下的结果</li>
<li><strong><code>get</code></strong> 过滤单一结果</li>
</ul>
<p>过滤条件的表达语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">属性名称__比较运算符=值</span><br><span class="line"><span class="comment"># 属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线</span></span><br></pre></td></tr></table></figure>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><h4 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h4><ul>
<li><strong><code>exact</code>：表示判断相等。</strong></li>
<li><strong>不等于的运算符，使用<code>exclude()</code>过滤器。</strong></li>
<li><strong><code>gt</code></strong> 大于 (<em>greater then</em>)</li>
<li><strong><code>gte</code></strong> 大于等于 (<em>greater then equal</em>)</li>
<li><strong><code>lt</code></strong> 小于 (<em>less then</em>)</li>
<li><strong><code>lte</code></strong> 小于等于 (<em>less then equal</em>)</li>
</ul>
<p><strong>1. 查询编号为1的图书。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(id__exact=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 可简写为：</span></span><br><span class="line">BookInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询图书 《三重门》</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.get(btitle__exact=<span class="string">&quot;三重门&quot;</span>)  <span class="comment"># 当图书不存在,会抛出异常</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 查询价格不是12.4 的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Books.objects.exclude(price__exact=<span class="number">12.4</span>) <span class="comment"># 排除 价格为12.4的图书之后，就是相反的结果</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 查询编号大于3的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><strong>5. 查询编号不等于3的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.exclude(<span class="built_in">id</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul>
<li><strong><code>contains</code>：模糊查询是否包含</strong></li>
<li><strong><code>startswith</code><strong>：</strong>以指定值开头</strong></li>
<li><strong><code>endswith</code>：以指定值结尾</strong></li>
</ul>
<blockquote>
<p>说明：如果要包含<code>%</code>无需转义，直接写即可。</p>
</blockquote>
<p><strong>1. 查询书名包含’传’的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(btitle__contains=<span class="string">&#x27;传&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询书名以’三’开头的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(btitle__startswith=<span class="string">&quot;三&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>3. 查询书名以’门’结尾的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(btitle__endswith=<span class="string">&quot;门&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>以上运算符都区分大小写，在这些运算符前加上i表示不区分大小写，如<code>iexact</code>、<code>icontains</code>、<code>istartswith</code>、<code>iendswith</code>.</strong></p>
</blockquote>
<h4 id="空查询"><a href="#空查询" class="headerlink" title="空查询"></a>空查询</h4><ul>
<li><strong><code>isnull</code>：是否为<code>null</code>。</strong></li>
</ul>
<p><strong>1. 查询书名不为空的图书</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(btitle__isnull=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><ul>
<li><strong><code>in</code>：是否包含在范围内。</strong></li>
</ul>
<p><strong>1. 查询编号为1或3或5的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<h4 id="日期查询"><a href="#日期查询" class="headerlink" title="日期查询"></a>日期查询</h4><ul>
<li><strong><code>year</code>、<code>month</code>、<code>day</code>、<code>week_day</code>、<code>hour</code>、<code>minute</code>、<code>second</code>：对日期时间类型的属性进行运算。</strong></li>
<li>比较具体的时间， 需要利用 **<code>datetime</code>**模块中的 **<code>date</code>**和 <strong><code>datetime</code></strong> 方法，自定义时间</li>
</ul>
<p><strong>1.查询1980年发表的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BookInfo.objects.<span class="built_in">filter</span>(bpub_date__year=<span class="number">1980</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询2000之后出版的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bpub_date__year__gt=<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>3. 查询5月之后出版的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bpub_date__month__gt=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><strong>4.查询2005年4月5日后发表的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(bpub_date__lt=date(<span class="number">2005</span>,<span class="number">4</span>,<span class="number">5</span>)) <span class="comment"># 注意：比较具体的时间，需要自己构建时间</span></span><br></pre></td></tr></table></figure>

<h2 id="F对象和Q对象"><a href="#F对象和Q对象" class="headerlink" title="F对象和Q对象"></a>F对象和Q对象</h2><h3 id="属性-VS-属性"><a href="#属性-VS-属性" class="headerlink" title="属性 VS 属性"></a>属性 VS 属性</h3><blockquote>
<p>之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢？ </p>
<ul>
<li>使用<strong>F对象</strong>，被定义在<code>django.db.models</code>中。</li>
<li>可以在<strong>F对象</strong>上使用算数运算。</li>
</ul>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F(<span class="string">&#x27;属性名&#x27;</span>)  <span class="comment"># 注意：属性名是字符串形式</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 查询阅读量大于评论量的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询阅读量是评论量2倍的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bread=F(<span class="string">&#x27;bcomment&#x27;</span>)*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><strong>3. 查询阅读量比评论量多100的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bread=F(<span class="string">&#x27;bcomment&#x27;</span>)+<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><blockquote>
<ul>
<li>多个过滤器逐个调用表示逻辑与<code>and</code>关系，同sql语句中where部分的and关键字。</li>
<li>如果需要实现逻辑或<code>or</code>的查询，需要使用<strong>Q对象</strong>结合<strong>逻辑运算符</strong>，<strong>Q对象</strong>被义在<code>django.db.models</code>中。</li>
<li>Q对象可以使用<code>&amp;</code>、<code>|</code>连接，<code>&amp;</code>表示逻辑与，<code>|</code>表示逻辑或。</li>
</ul>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Q(属性名__运算符=值)  <span class="comment"># 注意： 属性名不是字符串，不能加引号</span></span><br></pre></td></tr></table></figure>

<p><strong>1 查询id阅读量大于20且id小于3的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(bcomment__gt=<span class="number">20</span>).<span class="built_in">filter</span>(id__lt=<span class="number">3</span>)  <span class="comment"># 多个过滤器连续操作</span></span><br><span class="line"></span><br><span class="line">Book.objects.<span class="built_in">filter</span>( Q(bcomment__gt=<span class="number">20</span>) &amp; Q(id__lt=<span class="number">3</span>) )  <span class="comment"># 使用Q对象和逻辑运算符</span></span><br></pre></td></tr></table></figure>

<p><strong>2 查询阅读量大于20，或编号小于3的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>( Q(bcomment__gt=<span class="number">20</span>) | Q(id__lt=<span class="number">3</span>) )  <span class="comment"># 只能使用Q对象</span></span><br></pre></td></tr></table></figure>

<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><blockquote>
<p>使用<code>aggregate()</code>过滤器调用聚合函数。</p>
<p>聚合函数被定义在<code>django.db.models</code>中</p>
</blockquote>
<ul>
<li><strong><code>Avg</code></strong> 平均</li>
<li><strong><code>Count</code></strong> 数量</li>
<li><strong><code>Max</code></strong> 最大</li>
<li><strong><code>Min</code></strong> 最小</li>
<li><strong><code>Sum</code></strong> 求和</li>
</ul>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum, Max, Min, Count, Avg</span><br><span class="line"></span><br><span class="line">Sum(<span class="string">&#x27;属性名&#x27;</span>)  <span class="comment"># 注意：属性名是字符串形式 </span></span><br></pre></td></tr></table></figure>



<p><strong>1. 查询所有图书的平均阅读量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.aggregate(Avg(<span class="string">&#x27;bcomment&#x27;</span>)) </span><br><span class="line"><span class="comment"># &#123;&#x27;bcomment__avg&#x27;: 77.2&#125;</span></span><br><span class="line"><span class="comment"># 注意aggregate的返回值是一个字典类型，格式如下：</span></span><br><span class="line"><span class="comment"># &#123;&#x27;属性名__聚合类小写&#x27;: 值&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 查询所有图书的数量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.aggregate(Count(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># 返回值也是一个字典格式， &#123;&#x27;id__count&#x27;: 5&#125;</span></span><br><span class="line"></span><br><span class="line">Book.objects.count()  <span class="comment"># 使用count时一般不使用aggregate()过滤器, 注意：count函数的返回值是一个数字。</span></span><br></pre></td></tr></table></figure>

<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>分组查询一般会用到聚合函数，所以使用前要先从 <code>django.db.models</code> 引入 <code>Avg</code>,<code>Max</code>,<code>Min</code>,<code>Count</code>,<code>Sum</code>（首字母大写）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Min,Count,Sum  <span class="comment">#   引入函数</span></span><br></pre></td></tr></table></figure>

<p><strong>返回值：</strong></p>
<ul>
<li>  分组后，用 <code>values</code> 取值，则返回值是 <code>QuerySet</code> ,数据类型里面为一个个字典；</li>
<li>  分组后，用 <code>values_list</code> 取值，则返回值是 <code>QuerySet</code> ,数据类型里面为一个个元组。</li>
</ul>
<p>MySQL 中的 <code>limit</code> 相当于 ORM 中的 <code>QuerySet</code> 数据类型的切片。</p>
<p><strong>注意：</strong></p>
<p><code>annotate</code> 里面放聚合函数。</p>
<blockquote>
<p>  <code>values</code>函数放在 <code>annotate</code>函数之前，指明 按照什么字段分组</p>
<p>  <code>values</code>函数放在 <code>annotate</code>函数之后，指明 从分组结果中，取出哪些数据</p>
</blockquote>
<p>**1.查询每个作者的图书数量 **</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source = Book.objects.vaues(<span class="string">&#x27;author__id&#x27;</span>).annotate(total=Sum(<span class="string">&#x27;name&#x27;</span>)).values(<span class="string">&#x27;author__name&#x27;</span>, <span class="string">&#x27;total&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><blockquote>
<p>  <code>key</code>:正向查询按字段,反向查询按表明小写</p>
</blockquote>
<h3 id="关联查询-1"><a href="#关联查询-1" class="headerlink" title="关联查询"></a>关联查询</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><blockquote>
<p>通过 关联的 <strong>一</strong>  查询  <strong>多</strong>，如： <code>一个作者 ====&gt; 多本图书</code>， 查询<strong>作者</strong>对应的<strong>图书信息</strong></p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一对应的模型类对象.多对应的模型类名小写_<span class="built_in">set</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 查询 id为1的作者的所有图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author = Author.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)  <span class="comment"># 得到作者的模型类对象</span></span><br><span class="line"></span><br><span class="line">author.book_set.<span class="built_in">all</span>()  <span class="comment"># 图书的 模型类名小写 + set ,然后 通过 all方法，得到 查询集</span></span><br></pre></td></tr></table></figure>

<h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><blockquote>
<p>通过 关联的 <strong>多</strong>  查询  <strong>一</strong>，如： <code>多本 图书 ====&gt; 一个作者</code>， 查询 <strong>图书</strong> 对应的 <strong>作者信息</strong></p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">多对应的模型类对象.多对应的模型类中的关系类属性名</span><br><span class="line"></span><br><span class="line">多对应的模型类对象.关联类属性_<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 查询id为1的图书的作者信息</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = Book.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)  <span class="comment"># 得到图书 模型类对象</span></span><br><span class="line"></span><br><span class="line">book.author <span class="comment"># 对应的模型属性， 得到 作者对象</span></span><br><span class="line"></span><br><span class="line">book.author_id  <span class="comment"># 对应的模型属性_id, 得到 作者的id</span></span><br></pre></td></tr></table></figure>

<h3 id="关联过滤查询"><a href="#关联过滤查询" class="headerlink" title="关联过滤查询"></a>关联过滤查询</h3><h4 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h4><blockquote>
<p>通过 关联的 <strong>多</strong> 的<code>条件</code> 查询  <strong>一</strong>，如： <code>一个作者 ====&gt; 多本图书</code>， 根据<strong>图书的条件</strong> 查询 <strong>作者信息</strong></p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">关联模型类名小写__属性名__条件运算符=值</span><br></pre></td></tr></table></figure>

<p><strong>1. 查询名称包含’Django’的图书作者</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(book__btitle__contains=<span class="string">&#x27;Django&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询 阅读量大于500 的图书作者</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Author.objects.<span class="built_in">filter</span>(book__bread__gt=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<h4 id="多对一-1"><a href="#多对一-1" class="headerlink" title="多对一"></a>多对一</h4><blockquote>
<p>通过 关联的 <strong>一</strong> 的<code>条件</code> 查询  <strong>多</strong>，如： <code>一个作者 ====&gt; 多本图书</code>， 根据<strong>作者的条件</strong> 查询 <strong>图书信息</strong></p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模型类关联属性名__模型类属性名__条件运算符=值</span><br></pre></td></tr></table></figure>

<p><strong>1. 查询 作者韩寒 的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(author__name=<span class="string">&#x27;韩寒&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2. 查询 作者id是1， 3， 4的图书</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(author__id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SQL：多表查询</title>
    <url>/2021/08/17/pgU7aEnEH/</url>
    <content><![CDATA[<p>此次主要介绍多表查询中的三部分：合并查询结果、连接查询（交叉连接、内连接、左连接、右连接、全连接）。</p>
<span id="more"></span>

<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>SQL UNION 操作符合并两个或多个 SELECT 语句的结果。</p>
<p>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="SQL-UNION-语法"><a href="#SQL-UNION-语法" class="headerlink" title="SQL UNION 语法"></a>SQL UNION 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name(s)<span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">*</span>table1<span class="operator">*</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name(s)<span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">*</span>table2<span class="operator">*</span>;</span><br></pre></td></tr></table></figure>

<p><strong>==注释==</strong> ：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p>
<h4 id="SQL-UNION-ALL-语法"><a href="#SQL-UNION-ALL-语法" class="headerlink" title="SQL UNION ALL 语法"></a>SQL UNION ALL 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name(s)<span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">*</span>table1<span class="operator">*</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name(s)<span class="operator">*</span> <span class="keyword">FROM</span> <span class="operator">*</span>table2<span class="operator">*</span>;</span><br></pre></td></tr></table></figure>

<p><strong>==注释==：</strong> UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面是选自 “Websites” 表的数据：<br>| id | name         | url                       | alexa | country |<br>| :–:| :–: |:– |:–:|:–:|<br>| 1  | Google       | <a href="https://www.google.cm/">https://www.google.cm/</a>    | 1     | USA     |<br>| 2  | 淘宝          | <a href="https://www.taobao.com/">https://www.taobao.com/</a>   | 13    | CN      |<br>| 3  | 微博          | <a href="http://weibo.com/">http://weibo.com/</a>         | 20    | CN      |<br>| 4  | Facebook     | <a href="https://www.facebook.com/">https://www.facebook.com/</a> | 3     | USA     |<br>| 5  | stackoverflow | <a href="http://stackoverflow.com/">http://stackoverflow.com/</a> |   0 | IND     |</p>
<p>下面是 “apps” APP 的数据：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">app_name</th>
<th align="left">url</th>
<th align="center">country</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">QQ APP</td>
<td align="left"><a href="http://im.qq.com/">http://im.qq.com/</a></td>
<td align="center">CN</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">微博 APP</td>
<td align="left"><a href="http://weibo.com/">http://weibo.com/</a></td>
<td align="center">CN</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">淘宝 APP</td>
<td align="left"><a href="https://www.taobao.com/">https://www.taobao.com/</a></td>
<td align="center">CN</td>
</tr>
</tbody></table>
<h4 id="SQL-UNION-实例"><a href="#SQL-UNION-实例" class="headerlink" title="SQL UNION 实例"></a>SQL UNION 实例</h4><p>下面的 SQL 语句从 “Websites” 和 “apps” 表中选取所有<strong>不同的</strong>country（只有不同的值）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IND     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="SQL-UNION-ALL-实例"><a href="#SQL-UNION-ALL-实例" class="headerlink" title="SQL UNION ALL 实例"></a>SQL UNION ALL 实例</h4><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>country（也有重复的值）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IND     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="带有-WHERE-的-SQL-UNION-ALL"><a href="#带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="带有 WHERE 的 SQL UNION ALL"></a>带有 WHERE 的 SQL UNION ALL</h4><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>中国(CN)的数据（也有重复的值）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> country, name <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span> name       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span> 淘宝     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span> 微博     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span> QQ APP     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span> 微博 APP <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span> 淘宝 APP <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>SQL join 用于把来自两个或多个表的行结合起来。</p>
<p>下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/10/AKQ5d6.png" alt="AKQ5d6"></p>
<ul>
<li><p>  INNER JOIN 关键字在表中存在至少一个匹配时返回行。</p>
</li>
<li><p>  LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p>
</li>
<li><p>  RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</p>
</li>
<li><p>  FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行。FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p>
</li>
<li><p>CROSS JOIN(交叉连接)又可称为笛卡尔积，将左表中每一行与右表中每一行分别连接形成新记录。实际业务中运用较少，需要大量运算成本，但它是其他连接的基础。</p>
</li>
</ul>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><h4 id="SQL-CROSS-JOIN语法"><a href="#SQL-CROSS-JOIN语法" class="headerlink" title="SQL CROSS JOIN语法"></a>SQL CROSS JOIN语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> table2;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br></pre></td></tr></table></figure>

<p><strong>注释：</strong> CROSS JOIN 与 JOIN 是相同的。</p>
<h4 id="SQL-INNER-JOIN语法"><a href="#SQL-INNER-JOIN语法" class="headerlink" title="SQL INNER JOIN语法"></a>SQL INNER JOIN语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>

<p><strong>注释：</strong> INNER JOIN 与 JOIN 是相同的。</p>
<h4 id="SQL-RIGHT-JOIN语法"><a href="#SQL-RIGHT-JOIN语法" class="headerlink" title="SQL RIGHT JOIN语法"></a>SQL RIGHT JOIN语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>

<h4 id="SQL-LEFT-JOIN语法"><a href="#SQL-LEFT-JOIN语法" class="headerlink" title="SQL LEFT JOIN语法"></a>SQL LEFT JOIN语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>

<h4 id="SQL-FULL-JOIN语法"><a href="#SQL-FULL-JOIN语法" class="headerlink" title="SQL FULL JOIN语法"></a>SQL FULL JOIN语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name<span class="operator">=</span>table2.column_name;</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面是选自 “Websites” 表的数据：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">name</th>
<th align="left">url</th>
<th align="center">alexa</th>
<th align="center">country</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Google</td>
<td align="left"><a href="https://www.google.cm/">https://www.google.cm/</a></td>
<td align="center">1</td>
<td align="center">USA</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">淘宝</td>
<td align="left"><a href="https://www.taobao.com/">https://www.taobao.com/</a></td>
<td align="center">13</td>
<td align="center">CN</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">微博</td>
<td align="left"><a href="http://weibo.com/">http://weibo.com/</a></td>
<td align="center">20</td>
<td align="center">CN</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Facebook</td>
<td align="left"><a href="https://www.facebook.com/">https://www.facebook.com/</a></td>
<td align="center">3</td>
<td align="center">USA</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">stackoverflow</td>
<td align="left"><a href="http://stackoverflow.com/">http://stackoverflow.com/</a></td>
<td align="center">0</td>
<td align="center">IND</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">京东</td>
<td align="left"><a href="https://www.jd.com/">https://www.jd.com/</a></td>
<td align="center">19</td>
<td align="center">CN</td>
</tr>
</tbody></table>
<p>下面是 “access_log” 网站访问记录表的数据：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">site_id</th>
<th align="center">count</th>
<th align="center">date</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">45</td>
<td align="center">2016-05-10</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">100</td>
<td align="center">2016-05-13</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">111</td>
<td align="center">230</td>
<td align="center">2016-05-14</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">2</td>
<td align="center">10</td>
<td align="center">2016-05-14</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">5</td>
<td align="center">205</td>
<td align="center">2016-05-14</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">4</td>
<td align="center">13</td>
<td align="center">2016-05-15</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">3</td>
<td align="center">220</td>
<td align="center">2016-05-15</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">5</td>
<td align="center">545</td>
<td align="center">2016-05-16</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">3</td>
<td align="center">201</td>
<td align="center">2016-05-17</td>
</tr>
</tbody></table>
<h4 id="SQL-INNER-JOIN实例"><a href="#SQL-INNER-JOIN实例" class="headerlink" title="SQL INNER JOIN实例"></a>SQL INNER JOIN实例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name          <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Google        <span class="operator">|</span>    <span class="number">45</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Google        <span class="operator">|</span>   <span class="number">230</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 淘宝        <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">205</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Facebook      <span class="operator">|</span>    <span class="number">13</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">220</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">545</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">201</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h4 id="SQL-RIGHT-JOIN实例"><a href="#SQL-RIGHT-JOIN实例" class="headerlink" title="SQL RIGHT JOIN实例"></a>SQL RIGHT JOIN实例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name          <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Google        <span class="operator">|</span>    <span class="number">45</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span>   <span class="number">230</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 淘宝        <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">205</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> Facebook      <span class="operator">|</span>    <span class="number">13</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">220</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">545</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">201</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id <span class="keyword">WHERE</span> Websites.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">230</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h4 id="SQL-LEFT-JOIN实例"><a href="#SQL-LEFT-JOIN实例" class="headerlink" title="SQL LEFT JOIN实例"></a>SQL LEFT JOIN实例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name          <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Google        <span class="operator">|</span>    <span class="number">45</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 淘宝        <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">201</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">220</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Facebook      <span class="operator">|</span>    <span class="number">13</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">545</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">205</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 京东        <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id <span class="keyword">WHERE</span> access_log.site_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+-------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+-------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 京东 <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+-------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="SQL-FULL-JOIN实例"><a href="#SQL-FULL-JOIN实例" class="headerlink" title="SQL FULL JOIN实例"></a>SQL FULL JOIN实例</h4><p>MySQL中不支持 FULL OUTER JOIN，你可以用以下SQL语句实现效果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name          <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> Google        <span class="operator">|</span>    <span class="number">45</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 淘宝        <span class="operator">|</span>    <span class="number">10</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">201</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">220</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 微博        <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> Facebook      <span class="operator">|</span>    <span class="number">13</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">545</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> stackoverflow <span class="operator">|</span>   <span class="number">205</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> 京东        <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span>   <span class="number">230</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------+-------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id <span class="keyword">WHERE</span> Websites.id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id<span class="operator">=</span>access_log.site_id <span class="keyword">WHERE</span> access_log.site_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> count <span class="operator">|</span> <span class="type">date</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="number">230</span> <span class="operator">|</span> <span class="number">2016</span><span class="number">-05</span><span class="number">-14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> 京东 <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios(三):GET和POST提交数据</title>
    <url>/2020/03/03/pmj69YWqE/</url>
    <content><![CDATA[<p>在处理http请求方面，经常需要前端向后端提交参数，本文以vue中axios处理http发送请求的的两种方式（Post和Get）为例，简单说明一下不同请求方式下参数的提交方式。</p>
<span id="more"></span>

<h2 id="GET-请求传递参数"><a href="#GET-请求传递参数" class="headerlink" title="GET 请求传递参数"></a>GET 请求传递参数</h2><h3 id="1、直接在-URL-上添加参数"><a href="#1、直接在-URL-上添加参数" class="headerlink" title="1、直接在 URL 上添加参数"></a>1、直接在 URL 上添加参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/api/goods/add_info/?ID=12345&amp;firstName=Fred&amp;lastName=Flintstone&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2、可以通过-params-设置参数"><a href="#2、可以通过-params-设置参数" class="headerlink" title="2、可以通过 params 设置参数"></a>2、可以通过 params 设置参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;/api/goods/add_info/&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">ID</span>: <span class="number">12345</span>,</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="POST-请求传递参数"><a href="#POST-请求传递参数" class="headerlink" title="POST 请求传递参数"></a>POST 请求传递参数</h2><h3 id="1、Content-Type-application-json"><a href="#1、Content-Type-application-json" class="headerlink" title="1、Content-Type: application/json"></a>1、Content-Type: application/json</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;yyyy&quot;</span>&#125;;</span><br><span class="line">axios.post(<span class="string">`/test/testRequest`</span>,data)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res=&gt;&#x27;</span>,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、Content-Type-multipart-form-data"><a href="#2、Content-Type-multipart-form-data" class="headerlink" title="2、Content-Type: multipart/form-data"></a>2、Content-Type: multipart/form-data</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line">data.append(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;yyyy&#x27;</span>);</span><br><span class="line">axios.post(<span class="string">`/test/testRequest`</span>,data)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res=&gt;&#x27;</span>,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3、Content-Type-application-x-www-form-urlencoded"><a href="#3、Content-Type-application-x-www-form-urlencoded" class="headerlink" title="3、Content-Type: application/x-www-form-urlencoded"></a>3、Content-Type: application/x-www-form-urlencoded</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;Qs&#x27;</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;yyyy&quot;</span>&#125;;</span><br><span class="line">axios.post(<span class="string">`/test/testRequest`</span>,qs.stringify(&#123;</span><br><span class="line">    data</span><br><span class="line">&#125;))</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res=&gt;&#x27;</span>,res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>总结：<br>1、上面三种方式会对应后台的请求方式，这个也要注意，比如django POST参数获取</p>
]]></content>
      <tags>
        <tag>VUE</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-数据分页</title>
    <url>/2020/11/30/r8IKUI2mF/</url>
    <content><![CDATA[<p>当页面因需要展示的数据条目过多，导致无法在一个页面全部显示。这时，页面经常会采用分页形式进行展示，然后每页显示 20 或者 50 等条数据。分页经常在网站上随处可见，</p>
<p>分页的实现不仅提高了用户体验，还是减轻数据库读取数据的压力。Django 自带名为 Paginator 的分页工具， 方便我们实现分页功能。本文就讲解如何使用 Paginator 实现分页功能。</p>
<span id="more"></span>

<h1 id="Paginator"><a href="#Paginator" class="headerlink" title="Paginator"></a>Paginator</h1><p>Paginator 类的作用是将我们需要分页的数据分割成若干份。当我们实现化一个 Paginator 类的实例时，需要给 Paginator 传入两个参数。第一个参数是数据源，可以是<strong>一个列表、元组、以及查询结果集 QuerySet</strong>。第二个参数<strong>需要传入一个整数，表示每页显示数据条数</strong>。具体用法如下：</p>
<h3 id="导入分页模块"><a href="#导入分页模块" class="headerlink" title="导入分页模块"></a>导入分页模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br></pre></td></tr></table></figure>

<h3 id="获取queryset对象"><a href="#获取queryset对象" class="headerlink" title="获取queryset对象"></a>获取queryset对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">goods_list = Goods.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实例化分页类对象"><a href="#实例化分页类对象" class="headerlink" title="实例化分页类对象"></a>实例化分页类对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paginator = Paginator(goods_list, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Paginator类对象的属性"><a href="#Paginator类对象的属性" class="headerlink" title="Paginator类对象的属性"></a>Paginator类对象的属性</h4><table>
<thead>
<tr>
<th>序号</th>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>num_pages</td>
<td>返回分页之后的总页数</td>
</tr>
<tr>
<td>2</td>
<td>page_range</td>
<td>返回分页后的页码列表</td>
</tr>
</tbody></table>
<h4 id="Paginator类对象的方法"><a href="#Paginator类对象的方法" class="headerlink" title="Paginator类对象的方法"></a>Paginator类对象的方法</h4><table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>get_page(self, number)</td>
<td>返回第number页的page类实例对象</td>
</tr>
</tbody></table>
<h4 id="Page实例对象的属性"><a href="#Page实例对象的属性" class="headerlink" title="Page实例对象的属性"></a>Page实例对象的属性</h4><table>
<thead>
<tr>
<th>序号</th>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>number</td>
<td>返回当前页的页码</td>
</tr>
<tr>
<td>2</td>
<td>object_list</td>
<td>返回当前页的数据查询集</td>
</tr>
<tr>
<td>3</td>
<td>paginator</td>
<td>返回对应的<strong>Paginator</strong>类对象</td>
</tr>
</tbody></table>
<h4 id="page实例对象的方法"><a href="#page实例对象的方法" class="headerlink" title="page实例对象的方法"></a>page实例对象的方法</h4><table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>has_previous</td>
<td>判断当前页是否有前一页</td>
</tr>
<tr>
<td>2</td>
<td>has_next</td>
<td>判断当前页是否有下一页</td>
</tr>
<tr>
<td>3</td>
<td>previous_page_number</td>
<td>返回前一页的页码</td>
</tr>
<tr>
<td>4</td>
<td>next_page_number</td>
<td>返回下一页的页码</td>
</tr>
</tbody></table>
<h2 id="分页功能实现"><a href="#分页功能实现" class="headerlink" title="分页功能实现"></a>分页功能实现</h2><h3 id="views函数"><a href="#views函数" class="headerlink" title="views函数"></a>views函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        page_number = request.GET.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>)  <span class="comment"># 获取客户端发送的页码，默认为1</span></span><br><span class="line">        page_size = request.GET.get(<span class="string">&#x27;page_size&#x27;</span>, <span class="number">2</span>)  <span class="comment"># 获取客户端发送的每页数量，默认为1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page_number = <span class="built_in">int</span>(page_number)  <span class="comment"># 处理页码， 过滤无效的数据</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            page_number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        goods_list = Goods.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        paginator = Paginator(goods_list, page_size)  <span class="comment"># 得到分页器对象</span></span><br><span class="line">        page = paginator.get_page(page_number)  <span class="comment"># 得到当前页码对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取页码列表</span></span><br><span class="line">        index = page.number - <span class="number">1</span>  <span class="comment"># 当前页码对应的索引</span></span><br><span class="line">        max_index = paginator.num_pages - <span class="number">1</span>  <span class="comment"># 最大索引</span></span><br><span class="line">        <span class="comment"># 为了得到显示7个页码的列表，从当前索引向前数3个，向后数3个，加上本身，即7个页码</span></span><br><span class="line">        start_index = index - <span class="number">3</span> <span class="keyword">if</span> index &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        end_index = index + <span class="number">3</span> <span class="keyword">if</span> index &lt;= max_index - <span class="number">3</span> <span class="keyword">else</span> max_index</span><br><span class="line">        <span class="comment"># 最后处理过的页码列表</span></span><br><span class="line">        page_range = paginator.page_range[start_index:end_index + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;goods&#x27;</span>: page, <span class="string">&#x27;page_range&#x27;</span>: page_range&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模板实现"><a href="#模板实现" class="headerlink" title="模板实现"></a>模板实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入bootstrap样式文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据遍历展示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span> <span class="attr">class</span>=<span class="string">&quot;thead-light&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for good in goods.object_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; good.id &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; good.nums &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/media/&#123;&#123; good.img &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 130px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--底部分页按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;Page navigation example&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;% if goods.has_previous %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.previous_page_number &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% for page in page_range %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">                &#123;% ifequal page goods.number %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; page &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endifequal %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;% if goods.has_next %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;goods:index&#x27; %&#125;?page=&#123;&#123; goods.next_page_number &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),  <span class="comment"># /?page=1&amp;page_size=2</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析：XSS攻击、SQL注入攻击和CSRF攻击</title>
    <url>/2020/05/24/sC7VEIN_H/</url>
    <content><![CDATA[<p>SQL注入，旁注，XSS跨站，COOKIE欺骗，DDOS，0day <a href="http://www.2cto.com/article/201310/250877.html">漏洞</a>，社会工程学 等等等等，只要有数据交互，就会存在被入侵风险！哪怕你把网线拔掉，物理隔绝，我还可以利用传感器捕捉电磁辐射信号转换成模拟图像。你把门锁上，我就爬窗户；你把窗户关上，我就翻院墙；你把院墙加高，我就挖地洞。。。道高一尺魔高一丈，我始终坚信计算机不存在绝对的安全，你攻我防，此消彼长，有时候，魔与道只在一念之间。<br>  下面，就让我们一起推开计算机中那另一扇不为人知的门</p>
<span id="more"></span>

<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>CSRF（Cross-site request forgery）：跨站请求伪造。</p>
<h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p><img src="https://img2018.cnblogs.com/blog/941968/201904/941968-20190422203527996-279231194.jpg"></p>
<p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发 cookie。</p>
<p>从上图可以看出，要完成一次 CSRF 攻击，受害者必须满足两个必要的条件：</p>
<p>（1）登录受信任网站 A，并在本地生成 Cookie。（如果用户没有登录网站 A，那么网站 B 在诱导的时候，请求网站 A 的 api 接口时，会提示你登录）</p>
<p>（2）在不登出 A 的情况下，访问危险网站 B（其实是利用了网站 A 的漏洞）。</p>
<p>我们在讲 CSRF 时，一定要把上面的两点说清楚。</p>
<p>温馨提示一下，cookie 保证了用户可以处于登录状态，但网站 B 其实拿不到 cookie。</p>
<h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><h4 id="判断请求头中的-Referer"><a href="#判断请求头中的-Referer" class="headerlink" title="判断请求头中的 Referer"></a>判断请求头中的 Referer</h4><p>这个字段记录的是请求的来源。比如前端<em>Vue</em>页面 <code>http://localhost:8080/#/showbooks</code>上调用了服务端<em>Django</em>的接口 <code>http://127.0.0.1:8000/books/?page=2&amp;page_size=10</code>， 那么在服务端，就可以通过 <code>Referer</code> 判断这个请求是来自哪里。</p>
<p>在实际应用中，这些跟业务逻辑无关的操作往往会放在拦截器中（或者说过滤器，不同技术使用的名词可能不同）。意思是说，在进入到业务逻辑之前，就应该要根据 Referer 的值来决定这个请求能不能处理。</p>
<p>用Flask 的话可以使用装饰器；在Django 中是叫中间件。每种技术它走的流程其实都一样。</p>
<p>而在 Django 可以通过以下代码获取对应信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.META[<span class="string">&#x27;HTTP_REFERER&#x27;</span>]  <span class="comment"># 来路</span></span><br><span class="line"></span><br><span class="line">request.META.get(<span class="string">&quot;HTTP_USER_AGENT&quot;</span>)  <span class="comment"># 请求头</span></span><br></pre></td></tr></table></figure>

<p>在Flask中，则获取方式不同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.referrer  <span class="comment"># 来路</span></span><br><span class="line"></span><br><span class="line">request.headers.get(<span class="string">&#x27;User-Agent&#x27;</span>)  <span class="comment"># 请求头</span></span><br></pre></td></tr></table></figure>

<p>但要注意的是，Referer 是浏览器设置的，在浏览器兼容性大不相同的时代中，如果存在某种浏览器允许用户修改这个值，那么 CSRF 漏洞依然存在。</p>
<h4 id="在请求参数中加入-csrf-token"><a href="#在请求参数中加入-csrf-token" class="headerlink" title="在请求参数中加入 csrf token"></a>在请求参数中加入 csrf token</h4><p>讨论 GET 和 POST 两种请求，对于 GET，其实也没什么需要防范的。为什么？</p>
<p>因为 GET 在 “约定” 当中，被认为是查询操作，查询的意思就是，你查一次，查两次，无数次，结果都不会改变（用户得到的数据可能会变），这不会对数据库造成任何影响，所以不需要加其他额外的参数。</p>
<blockquote>
<p>所以这里要提醒各位的是，尽量遵从这些约定，不要在 GET 请求中出现 /delete, /update, /edit 这种单词。把 “写” 操作放到 POST 中。</p>
</blockquote>
<p>对于 POST，服务端在创建表单的时候可以加一个隐藏字段，也是通过某种加密算法得到的。在处理请求时，验证这个字段是否合法，如果合法就继续处理，否则就认为是恶意操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/delete&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他字段 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个 html 片段由服务端生成。</p>
<p>这的确是一个很好的防范措施，再增加一些处理的话，还能防止表单重复提交。</p>
<p>可是对于一些新兴网站，很多都采用了 “前后端分离开发” 的设计，或者退一步，无论是不是前后端分离，它的 HTML 可能是由 JavaScript 拼接而成，并且表单也都是异步提交。所以这个办法有它的应用场景，也有局限性。</p>
<h4 id="新增-HTTP-Header"><a href="#新增-HTTP-Header" class="headerlink" title="新增 HTTP Header"></a>新增 HTTP Header</h4><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p>
<p>把 token 隐藏在 http 的 head 头中。</p>
<p>服务端可以像获取 Referer 一样获取这个请求头，不同的是，这个 token 是由服务端生成的，所以攻击者他没办法猜。</p>
<p>另一篇文章讲解的——**<code>JWT</code>**——就是基于这个方式。抛开 JWT 不谈，它的工作原理是这样的:</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/image-20201010164929032.png" alt="image-20201010164929032"></p>
<p>解释一下这四个请求，类型都是 POST 。</p>
<ol>
<li><p>通过 <code>/login</code> 接口，用户登录，服务端传回一个 <code>access_token</code>，前端把它保存起来，可以是内存当中，如果你希望用来模拟 <code>session</code> 的话。也可以保存到 <code>localStorage</code> 中，这样可以实现自动登录。</p>
</li>
<li><p>调用 <code>/delete</code> 接口，参数是某样商品的 id。仔细看，在这个请求中，多了一个名为 <code>Authoriaztion</code> 的 <code>header</code>，它的值是之前从服务端传回来的 <code>access_token</code>，在前面加了一个 “<code>Bearer</code>”（这是和服务端的约定，约定就是说，说好了加就一起加，不加就都不加……）</p>
</li>
<li><p>调用 <code>/logout</code> 接口，同样把 <code>access_token</code> 加在 <code>header</code> 中传过去。成功之后，服务端和前端都会把这个 <code>token</code> 置为失效，或直接删除。</p>
</li>
<li><p>再调用 <code>/delete</code> 接口，由于此时已经没有 <code>access_token</code> 了，所以服务端判断该请求没权限，返回 401 。</p>
</li>
</ol>
<p>从头至尾，整个过程没有涉及 cookie，所以 CSRF 是不可能发生的！</p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>XSS（Cross Site Scripting）：跨域脚本攻击。</p>
<h3 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>XSS 攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在 url 中输入、在评论框中输入），向你的页面注入脚本（可能是 js、hmtl 代码块等）。</p>
<p>最后导致的结果可能是：</p>
<p>盗用 Cookie 破坏页面的正常结构，插入广告等恶意内容 D-doss 攻击</p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>发出请求时，XSS 代码出现在 url 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以叫反射型 XSS。</p>
<h4 id="存储型存"><a href="#存储型存" class="headerlink" title="存储型存"></a>存储型存</h4><p>储型 XSS 和反射型 XSS 的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p>
<h3 id="防范措施-1"><a href="#防范措施-1" class="headerlink" title="防范措施"></a>防范措施</h3><p>XSS 的防范措施主要有三个：</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>对用户输入的数据进行<code>HTML Entity</code> 编码。</p>
<p>比如说这段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>若不进行任何处理，则浏览器会执行 <code>alert</code> 的 js 操作，实现 <code>XSS</code> 注入。</p>
<p>进行编码处理之后，在浏览器中的显示结果就是 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，实现了将 <code>$var</code> 作为纯文本进行输出，且不引起 <code>JavaScript</code> 的执行。</p>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p>移除用户输入的和事件相关的属性。如 <code>onerror</code> 可以自动触发攻击，还有 <code>onclick</code> 等。（总而言是，过滤掉一些不安全的内容）移除用户输入的 <code>Style</code> 节点、<code>Script</code> 节点、<code>Iframe</code> 节点。（尤其是 <code>Script</code> 节点，它可是支持跨域的，一定要移除）。</p>
<h4 id="校正"><a href="#校正" class="headerlink" title="校正"></a>校正</h4><p>避免直接对 <code>HTML Entity</code> 进行解码。使用 <code>DOM Parse</code> 转换，校正不配对的 <code>DOM</code> 标签。备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成 <code>DOM</code> 结构。</p>
<p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成 DOM 对象，然后经过第二步的过滤。</p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p>SQL 注入（SQLi）是一种注入攻击，可以执行恶意 SQL 语句。</p>
<h3 id="攻击原理-2"><a href="#攻击原理-2" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。攻击者可以使用 SQL 注入漏洞绕过应用程序安全措施；可以绕过网页或 Web 应用程序的身份验证和授权，并检索整个 SQL 数据库的内容；还可以使用 SQL 注入来添加，修改和删除数据库中的记录。</p>
<p>SQL 注入漏洞可能会影响使用 SQL 数据库（如 MySQL，Oracle，SQL Server 或其他）的任何网站或 Web 应用程序。犯罪分子可能会利用它来未经授权访问用户的敏感数据：客户信息，个人数据，商业机密，知识产权等。SQL 注入攻击是最古老，最流行，最危险的 Web 应用程序漏洞之一。</p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><h4 id="带内注入"><a href="#带内注入" class="headerlink" title="带内注入"></a>带内注入</h4><p>这是典型的攻击，攻击者可以通过相同的通信通道发起攻击并获得结果。这是通过两种带内技术完成的：</p>
<p>基于错误的 SQL 注入：从显示的错误消息中获取有关数据库的信息</p>
<p>基于联合的 SQL 注入：依赖于攻击者能够将 UNION ALL 被盗信息的结果与合法结果连接起来。</p>
<p>这两种技术都依赖于攻击者修改应用程序发送的 SQL，以及浏览器中显示的错误和返回的信息。如果应用程序开发人员或数据库开发人员无法正确地参数化他们在查询中使用的值，那么它会成功。两者都是试错法，可以检测到错误。</p>
<h4 id="盲注入"><a href="#盲注入" class="headerlink" title="盲注入"></a>盲注入</h4><p>也称为推理 SQL 注入，盲注入攻击不会直接从目标数据库中显示数据；相反，攻击者会仔细检查行为中的间接线索。HTTP 响应中的详细信息，某些用户输入的空白网页以及数据库响应某些用户输入需要多长时间，这些都可以是线索，具体取决于攻击者的目标。他们还可以指向攻击者尝试的另一个 SQL 攻击途径。</p>
<h4 id="带外注入"><a href="#带外注入" class="headerlink" title="带外注入"></a>带外注入</h4><p>这种攻击有点复杂，当攻击者无法在单个直接查询 - 响应攻击中实现其目标时，攻击者可能会使用此攻击。通常，攻击者会制作 SQL 语句，这些语句在呈现给数据库时会触发数据库系统创建与攻击者控制的外部服务器的连接。以这种方式，攻击者可以收集数据或可能控制数据库的行为。</p>
<p>二阶注入就是一种带外注入攻击。在这种情况下，攻击者将提供 SQL 注入，该注入将由数据库系统的单独行为存储和执行。当二级系统行为发生时（它可能类似于基于时间的作业或由其他典型管理员或用户使用数据库触发的某些事情）并且执行攻击者的 SQL 注入，那就是当 “伸出” 到系统时攻击者控制发生了。</p>
<h3 id="防范措施-2"><a href="#防范措施-2" class="headerlink" title="防范措施"></a>防范措施</h3><ol>
<li><p>不要使用动态 SQL</p>
<p> 避免将用户提供的输入直接放入 SQL 语句中；最好使用准备好的语句和参数化查询，这样更安全。</p>
</li>
<li><p>不要将敏感数据保留在纯文本中</p>
<p> 加密存储在数据库中的私有 / 机密数据；这样可以提供了另一级保护，以防攻击者成功地排出敏感数据。</p>
</li>
<li><p>限制数据库权限和特权</p>
<p> 将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p>
</li>
<li><p>避免直接向用户显示数据库错误</p>
<p> 攻击者可以使用这些错误消息来获取有关数据库的信息。</p>
</li>
<li><p>对访问数据库的 Web 应用程序使用 Web 应用程序防火墙（WAF）</p>
<p> 这为面向 Web 的应用程序提供了保护，它可以帮助识别 SQL 注入尝试；根据设置，它还可以帮助防止 SQL 注入尝试到达应用程序（以及数据库）。</p>
</li>
<li><p>定期测试与数据库交互的 Web 应用程序</p>
<p> 这样做可以帮助捕获可能允许 SQL 注入的新错误或回归。</p>
</li>
<li><p>将数据库更新为最新的可用修补程序</p>
<p> 这可以防止攻击者利用旧版本中存在的已知弱点 / 错误。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>WEB</tag>
        <tag>CSRF</tag>
        <tag>XSS</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>递归函数</title>
    <url>/2020/06/06/sDLc_6uUh/</url>
    <content><![CDATA[<p>函数调用函数自身，这种方式称为递归，这种函数称为递归函数</p>
<p>递归函数使用过程中，需要找到<code>不变的规律</code>和停止递归的<code>边界条件</code>，因为函数自身调用自身，函数本身的结构不变，只是<code>每次传的参数改变</code>啦</p>
<span id="more"></span>

<blockquote>
<p>递归实现过程(<strong>扩展</strong>)：利用栈的思想，先找边界条件，同时将后面的任务存起来，一直到最前面的边界条件，然后回去，每次从栈中取任务，进行计算，一直到最后一个任务取完，结果也计算完毕</p>
</blockquote>
<h2 id="递归过程"><a href="#递归过程" class="headerlink" title="递归过程:"></a>递归过程:</h2><ul>
<li>递归前进段</li>
<li>递归边界条件</li>
<li>递归返回段</li>
</ul>
<h2 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h2><h3 id="整数转换为字符串"><a href="#整数转换为字符串" class="headerlink" title="整数转换为字符串"></a>整数转换为字符串</h3><p>将一个整数转换为字符串，如 345转换为”345”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num // <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s&#x27;</span>%num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> trans(num//<span class="number">10</span>)+<span class="string">&#x27;%s&#x27;</span>%(num%<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="树的高度"><a href="#树的高度" class="headerlink" title="树的高度"></a>树的高度</h3><p>递归求二叉树深度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHeight</span>(<span class="params">self,root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(self.getHeight(root.left), self.getHeight(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="递归实现吸烟问题"><a href="#递归实现吸烟问题" class="headerlink" title="递归实现吸烟问题"></a>递归实现吸烟问题</h3><p>吸烟有危害，不仅仅危害人体健康，还会对社会产生不良的影响。吸烟还很容易引起喉头炎、气管炎，肺气肿等问题； 那么现在假设人一生抽烟10000根达到极限峰值，再抽一根烟就像压倒骆驼的最后一根稻草，会使人体爆发疾病问题； 每天一个人抽烟的个数都比前天多一根（第一天抽一根），且一周只有工作日（周一~周五）会吸烟； 请使用递归的方式求出一个人按照以上方式抽烟达到10000根，爆发疾病需要历经多少天</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smoker</span>(<span class="params">day, count, amount</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归解决吸烟问题</span></span><br><span class="line"><span class="string">    :param day: 当前的天数</span></span><br><span class="line"><span class="string">    :param count: 当天的吸烟数量</span></span><br><span class="line"><span class="string">    :param amount: 总计的吸烟数量</span></span><br><span class="line"><span class="string">    :return: 吸到10000根烟的天数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> amount &gt;= <span class="number">10000</span>:</span><br><span class="line">        <span class="comment"># 如果吸烟总数大于10000， 返回天数</span></span><br><span class="line">        <span class="keyword">return</span> day</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        day += <span class="number">1</span> <span class="comment"># 每吸一次烟，天数加1</span></span><br><span class="line">        <span class="keyword">if</span> day % <span class="number">7</span> != <span class="number">6</span> <span class="keyword">and</span> day % <span class="number">7</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 只有周六，周日不吸烟，判断不是周六，也不是周日</span></span><br><span class="line">            count += <span class="number">1</span> <span class="comment"># 当天吸烟的数量</span></span><br><span class="line">            amount += count <span class="comment"># 目前为止，吸烟的总数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> smoker(day, count, amount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(smoker(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)) <span class="comment"># 第1天，吸了1根烟，总共吸了1根烟</span></span><br></pre></td></tr></table></figure>

<h3 id="青蛙跳台阶问题"><a href="#青蛙跳台阶问题" class="headerlink" title="青蛙跳台阶问题"></a>青蛙跳台阶问题</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个问题，本质是一个斐波那契数列数列求第n项值的问题，如果用递归求，将会超出时间限制</span></span><br><span class="line"><span class="comment"># 因此，直接用循环求即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWays</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        a = <span class="number">1</span></span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            a, b = b, a+b</span><br><span class="line">        <span class="keyword">return</span> a % <span class="number">1000000007</span></span><br></pre></td></tr></table></figure>

<h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><p>在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:<br>(1) 每次只能移动一个盘子;<br>(2) 盘子只能从柱子顶端滑出移到下一根柱子;<br>(3) 盘子只能叠在比它大的盘子上。</p>
<p>请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hanota</span>(<span class="params">self, A: <span class="type">List</span>[<span class="built_in">int</span>], B: <span class="type">List</span>[<span class="built_in">int</span>], C: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(A)</span><br><span class="line">        self.move(n, A, B, C)</span><br><span class="line">    <span class="comment"># 定义move 函数移动汉诺塔</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self,n, A, B, C</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            C.append(A[-<span class="number">1</span>])</span><br><span class="line">            A.pop()</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.move(n-<span class="number">1</span>, A, C, B)  <span class="comment"># 将A上面n-1个通过C移到B</span></span><br><span class="line">            C.append(A[-<span class="number">1</span>])          <span class="comment"># 将A最后一个移到C</span></span><br><span class="line">            A.pop()                  <span class="comment"># 这时，A空了</span></span><br><span class="line">            self.move(n-<span class="number">1</span>,B, A, C)   <span class="comment"># 将B上面n-1个通过空的A移到C</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful规范的API接口设计</title>
    <url>/2020/08/14/spjWLylms/</url>
    <content><![CDATA[<p>在项目中，需要为 APP 撰写 API。刚开始接触的时候，并没有考虑太多，就想提供 URL，APP 端通过该 URL 进行查询、创建、更新等操作即可。但再对相关规范进行了解后，才发现，API 的设计并没有那么简单，远远不是 URL 的问题，而是一个通信协议的整体架构。</p>
<span id="more"></span>

<h2 id="使用-SSL（https）来提供-URL"><a href="#使用-SSL（https）来提供-URL" class="headerlink" title="使用 SSL（https）来提供 URL"></a>使用 SSL（https）来提供 URL</h2><blockquote>
<p>  首先，使用 https 可以在数据包被抓取时多一层加密。</p>
</blockquote>
<p>我们现在的 APP 使用环境大部分都是在路由器 WIFI 环境下，一旦路由器被入侵，那么黑客可以非常容易的抓取到用户通过路由器传输的数据，如果使用 http 未经加密，那么黑客可以很轻松的获取用户的信息，甚至是账户信息。</p>
<blockquote>
<p>  其次，即使使用 https，也要在 API 数据传输设计时，正确的采用加密。</p>
</blockquote>
<p>例如直接将 token 信息放在 URL 中的做法，即使你使用了 https，黑客仅能抓到域名字符部分，不能抓到请求的数据，但是 URL 可以在浏览器或特殊客户端工具中直接看到。因此，使用 https 进行请求时，要采用 POST、PUT 或者 HEAD 的方式传输必要的数据。</p>
<h2 id="使用-GET、POST、PUT、DELETE-这几种请求模式"><a href="#使用-GET、POST、PUT、DELETE-这几种请求模式" class="headerlink" title="使用 GET、POST、PUT、DELETE 这几种请求模式"></a>使用 GET、POST、PUT、DELETE 这几种请求模式</h2><p>请求模式也可以说是动作、数据传输方式，通常我们在 web 中的 form 有 GET、POST 两种。</p>
<p>而在 HTTP 中，存在以下这几种。</p>
<table>
<thead>
<tr>
<th align="left">请求方式</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GET（选择）</td>
<td align="left">从服务器上获取一个具体的资源或者一个资源列表。</td>
</tr>
<tr>
<td align="left">POST（创建）</td>
<td align="left">在服务器上创建一个新的资源。</td>
</tr>
<tr>
<td align="left">PUT（更新）</td>
<td align="left">以整体的方式更新服务器上的一个资源。</td>
</tr>
<tr>
<td align="left">PATCH （更新）</td>
<td align="left">只更新服务器上一个资源的一个属性。</td>
</tr>
<tr>
<td align="left">DELETE（删除）</td>
<td align="left">删除服务器上的一个资源。</td>
</tr>
<tr>
<td align="left">HEAD</td>
<td align="left">获取一个资源的元数据，如数据的哈希值或最后的更新时间。</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td align="left">获取客户端能对资源做什么操作的信息。</td>
</tr>
</tbody></table>
<h2 id="在-URI-中体现资源，而非动作"><a href="#在-URI-中体现资源，而非动作" class="headerlink" title="在 URI 中体现资源，而非动作"></a>在 URI 中体现资源，而非动作</h2><p>阅读 RESTful 架构的参考文献之后，你会了解什么是资源的概念，以及 REST 的确切含义。再构建 API 的 URL 的时候，URI 中应该仅包含资源（对象），而不要加入动作。</p>
<p>比如 <code>/user/1/update</code> ，其中 <code>update</code> 就是一个动作，虽然我们希望通过这个 URI 来实现用户 ID 为 1 的用户进行信息更新，但是按照 RESTful 的规范，<code>update</code>作为动作，应该用上面的 <code>PUT</code> 来表示，所以请求更新用户信息，应该使用 <code>PUT /user/1</code> 来表示更新用户 ID 为 1 的用户信息。</p>
<p>如果去对应上面的请求模式：</p>
<ul>
<li>  GET 表示显示、列出、展示</li>
<li>  POST 表示提交、创建</li>
<li>  PUT 表示更新</li>
<li>  DELETE 表示删除</li>
</ul>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>API 的开发直接关系了 APP 是否可以正常使用，如果原本运行正常的 API，突然改动，那么之前使用这个 API 的 APP 可能无法正常运行。APP 是不可能强迫用户主动升级的，因此，通过 API 版本来解决这个问题。也就是说，API 的多个版本是同时运行的，而且都要保证可以正常使用。</p>
<p>按照 RESTful 的规范，不同的版本也应该用相同的 API URL，通过 header 信息来判断版本，再调用不同版本的程序进行处理。但是这明显会给开发带来巨大的成本。</p>
<p>解决办法有两种：</p>
<ol>
<li> 新版本兼容旧版本，所有旧版本的动作、字段、操作，都在新版本中可以被实现，但明显这样的维护成本很大；</li>
<li> 不同的版本，用不同的 URL 来提供服务，比如在 URL 中通过 v1、v2 来区分版本号，或者采用子域名的方式，比如 v2.api.xxx.com/user 的方式。</li>
</ol>
<h2 id="HTTP-响应码"><a href="#HTTP-响应码" class="headerlink" title="HTTP 响应码"></a>HTTP 响应码</h2><p>在用户发出请求，服务端对请求进行响应时，给予正确的 HTTP 响应状态码，有利于让客户端正确区分遇到的情况。</p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="center">请求方式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>200 </code></td>
<td align="center"><code> [GET]</code></td>
<td align="left">（<code>OK</code>成功）服务器成功返回用户请求的数据,该操作是幂等的（Idempotent）</td>
</tr>
<tr>
<td align="center"><code>201 </code></td>
<td align="center"><code> [POST/PUT/PATCH]</code></td>
<td align="left">（<code>CREATED</code>已建立）用户新建或修改数据成功</td>
</tr>
<tr>
<td align="center"><code>202</code></td>
<td align="center"><code>[*]</code></td>
<td align="left">(<code>Accepted</code>接受请求)表示一个请求已经进入后台排队（异步任务）</td>
</tr>
<tr>
<td align="center"><code>204</code></td>
<td align="center"><code>[DELETE]</code></td>
<td align="left">(<code>NO CONTENT</code>无内容) 用户删除数据成功</td>
</tr>
<tr>
<td align="center"><code>300 </code></td>
<td align="center"></td>
<td align="left">（<code>Multiple Choices</code>多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>
</tr>
<tr>
<td align="center"><code>301 </code></td>
<td align="center"></td>
<td align="left">（<code>Permanently Moved</code>永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>
</tr>
<tr>
<td align="center"><code>302 </code></td>
<td align="center"></td>
<td align="left">（<code>Temporarily Moved</code>临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td align="center"><code>303 </code></td>
<td align="center"></td>
<td align="left">（<code>See Other</code>查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</td>
</tr>
<tr>
<td align="center"><code>304 </code></td>
<td align="center"></td>
<td align="left">（<code>Not Modified</code>未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td>
</tr>
<tr>
<td align="center"><code>305 </code></td>
<td align="center"></td>
<td align="left">（<code>Use Proxy</code>使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>
</tr>
<tr>
<td align="center"><code>307</code></td>
<td align="center"></td>
<td align="left"><code>Temporary Redirect</code>（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td align="center"><code>400</code></td>
<td align="center"><code>[POST/PUT/PATCH]</code></td>
<td align="left"><code> INVALID REQUEST</code>(坏请求) 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</td>
</tr>
<tr>
<td align="center"><code>401</code></td>
<td align="center"><code>[*]</code></td>
<td align="left"><code>Unauthorized</code> (未授权) 表示用户没有权限（令牌、用户名、密码错误）</td>
</tr>
<tr>
<td align="center"><code>403</code></td>
<td align="center"><code>[*]</code></td>
<td align="left"><code>Forbidden</code> （禁止）表示用户得到授权（与401错误相对），但是访问是被禁止的</td>
</tr>
<tr>
<td align="center"><code>404</code></td>
<td align="center"><code>[*]</code></td>
<td align="left"><code>NOT FOUND</code> （未找到）用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</td>
</tr>
<tr>
<td align="center"><code>405</code></td>
<td align="center"></td>
<td align="left"><code> Method not allowed</code>（方法不被允许）不支持该Request的方法</td>
</tr>
<tr>
<td align="center"><code>406</code></td>
<td align="center"></td>
<td align="left"><code>Not Acceptable</code>（无法接受）无法使用请求的内容特性来响应请求的网页，也就是后台的返回结果前台无法解析（比如用户请求 JSON 格式，但是只有 XML 格式）</td>
</tr>
<tr>
<td align="center"><code>407</code></td>
<td align="center"></td>
<td align="left"><code>Proxy Authentication Required</code>（要求进行代理认证）与状态码401类似， 用于需要进行认证的代理服务器.</td>
</tr>
<tr>
<td align="center"><code>408</code></td>
<td align="center"></td>
<td align="left"><code> Request Timeout</code>(请求超时) 如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td>
</tr>
<tr>
<td align="center"><code>410</code></td>
<td align="center"><code>[GET]</code></td>
<td align="left"><code>Gone</code> （过去的）用户请求的资源被永久删除，且不会再得到的</td>
</tr>
<tr>
<td align="center"><code>422</code></td>
<td align="center"><code> [POST/PUT/PATCH]</code></td>
<td align="left"><code>Unprocesable entity</code> （不可处理）当创建一个对象时，发生一个验证错误</td>
</tr>
<tr>
<td align="center"><code>500</code></td>
<td align="center"><code> [*]</code></td>
<td align="left"><code>INTERNAL SERVER ERROR</code>(服务器内部错误）服务器发生错误，用户将无法判断发出的请求是否成功</td>
</tr>
</tbody></table>
<h2 id="返回值结构"><a href="#返回值结构" class="headerlink" title="返回值结构"></a>返回值结构</h2><p>在完成了上面的 URL 部署之后，接下来我们来看看返回结果应该怎么样来确定。</p>
<p>我看到大部分文献中指出，最好使用 JSON 进行返回，而非 xml。</p>
<p>我认为原因可能有两点：</p>
<ol>
<li> JSON 可以很好的被很多程序支持，javascript 的 ajax 可以直接将 JSON 转换为对象。</li>
<li> JSON 的格式在容量上比 xml 小很多，可以减低宽带占用，提高传输效率。</li>
</ol>
<p>那么，返回值应该怎么去部署呢？</p>
<p>首先，字段的合理返回，数据的包裹。因为返回值中，我们常常要对数据进行区分分组，或者按照从属关系打包，所以，我们再返回时，最好有包裹的思想，把数据存放在不同的包裹中进行返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;error_code&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;xiaomin&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;server_time&#x27;</span>: <span class="number">14939939</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面返回的 JSON 中，使用 data 来作为数据包，将所有数据统一以这个字段进行包裹。除了 data，也可以用 list 等其他形式的包裹，命名都是自己来根据自己的需要确定的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;error_code&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>: [</span><br><span class="line">        &#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;goudan&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="string">&#x27;server_time&#x27;</span>: <span class="number">14939939</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总之，不要不分包，直接把所有数据和一些你想返回的全局数据混在一起进行返回。</p>
<p>其次，错误码。错误码的作用是方便查找错误原因，通常情况下，可以用 error_code 来表示，当 error_code=0 时，表示没有发生错误，当 error_code&gt;0 时，发生了错误，并且提供较为详细的文档，告诉客户端对应的 error_code 值所产生的错误的原因和位置。</p>
<p>最后，空白压缩和字符转换。也就是返回的 JSON 结果不要换行和空格，用一行返回结果，使整个结果文本容量最小。同时，中文等字符或结果中有引号，都进行字符转换，防止结果无法被正确识别。</p>
<h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p>其实也就是客户端的权限控制。一般而言，会给客户端分发一个 token 来确定该客户端的唯一身份。客户端在请求时，通过这个 token，判断发出请求的客户端所对应的用户，及其相关信息和权限。</p>
<p>前文已经提到了，token 信息不是用来进行处理的数据，虽然可以通过 POST、PUT 等进行数据提交或传输，但是从 RESTful 规范来讲，它不属于操作数据，在服务端进行处理时，仅是利用 token 进行鉴权处理，所以，我的建议是通过 header 来发送 token。</p>
]]></content>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法</title>
    <url>/2020/04/12/svcQHfnZH/</url>
    <content><![CDATA[<p>es5和es6对于前端开发来说是经常都会使用的方法，他们为我们开发提供了很多便利的方法和写法，使我们的代码更加的优雅，以下简单总结一下es5与es6的不同。</p>
<span id="more"></span>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="关键字介绍"><a href="#关键字介绍" class="headerlink" title="关键字介绍"></a>关键字介绍</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h4><p><code>let</code>作用域只局限于当前代码块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">   <span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 输出 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// 报错 b is not defined</span></span><br></pre></td></tr></table></figure>

<p>使用<code>let</code>声明的变量作用域不会提前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 输出 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// 报错 Cannot access &#x27;b&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>在相同的作用域下不能声明相同的变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>  <span class="comment">// 报错 Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<h4 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h4><ul>
<li><p>声明一个只读的常量。一旦声明，常量的值就不能改变</p>
</li>
<li><p><code>const</code>只声明，不赋值，就会报错，这意味着<code>const</code>一旦声明常量，就必须立即初始化</p>
</li>
<li><p><code>const</code>作用域与<code>let</code>相同，只在所在的块级作用域内有效</p>
</li>
<li><p><code>const</code>声明的常量不支持提升，和<code>let</code>一样，只能在声明后使用</p>
</li>
<li><p><code>const</code>声明的常量，也与<code>let</code>一样， 不可重复声明</p>
</li>
<li><p><code>const</code>实际保证的并不是常量的值不变，而是常量指向的内存地址不得改变</p>
<ul>
<li>对于简单的数据类型(数字、字符串、布尔值),值就保存在常量指向的地址，因此等同常量</li>
<li>对于复合类型的数据(数组、对象)，常量指向的内存地址保存的只是一个指针，const只能保证指针是固定的，但是指针指向的数据结构是不是可变的，并不能保证</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span></span><br><span class="line"><span class="comment">// a = 10 // 报错 Assignment to constant variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.a = <span class="number">20</span> <span class="comment">// 可执行</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// 可执行 &#123;a: 20&#125;</span></span><br><span class="line"><span class="comment">// obj = &#123;&#125; // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arry = []</span><br><span class="line">arry.push(<span class="number">1</span>) <span class="comment">// 可执行</span></span><br><span class="line">arry.length = <span class="number">0</span> <span class="comment">// 可执行</span></span><br><span class="line"><span class="comment">// arry = [] // 报错 Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<h3 id="关键字适用场景"><a href="#关键字适用场景" class="headerlink" title="关键字适用场景"></a>关键字适用场景</h3><p>使用var声明循环变量，会导致全局共用一个变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`这是第<span class="subst">$&#123;i&#125;</span>个按钮`</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 此时点击任何按钮，输出都是&quot;这是第5个按钮&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; btns.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">        btns[j].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`这是第<span class="subst">$&#123;j&#125;</span>个按钮`</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把循环中的var改为let,则为正确的结果，即输出对应的按钮序号</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子也是for循环中全局共用同一变量的弊端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i) <span class="comment">// 输出 10个9</span></span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(j) <span class="comment">// 输出 0-9</span></span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j) <span class="comment">// 报错 j is not defined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>==解释==</p>
</blockquote>
<ul>
<li><p>var是全局作用域，有变量提升的作用，所以在for中定义一个变量，全局可以使用，循环中的每一次给变量i赋值都是给全局变量i赋值。</p>
</li>
<li><p>let是块级作用域,只能在代码块中起作用，在js中一个{}中的语句我们也称为叫一个代码块，每次循环会产生一个代码块，每个代码块中的都是一个新的变量j</p>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><code>const</code>一般用在需要一个模块时使用或者定义一些全局常量时使用</li>
<li><code>let</code>限制了变量的作用域，保证变量不会影响全局变量，所以尽量将<code>var</code>改为<code>let</code></li>
</ul>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="箭头函数介绍"><a href="#箭头函数介绍" class="headerlink" title="箭头函数介绍"></a>箭头函数介绍</h3><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p>
<p>为什么叫Arrow Function？因为它的定义用的就是一个箭头</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x =&gt; x * x</span><br></pre></td></tr></table></figure>

<p>上面的箭头函数相当于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式。一种像上面的，只包含一个表达式，连<code>&#123; ... &#125;</code>和<code>return</code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略<code>&#123; ... &#125;</code>和<code>return</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> - x * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果参数不是一个，就需要用括号()括起来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个参数:</span></span><br><span class="line">(x, y) =&gt; x * x + y * y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数:</span></span><br><span class="line">() =&gt; <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数:</span></span><br><span class="line">(x, y, ...rest) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = x + y;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</span><br><span class="line">        sum += rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SyntaxError:</span></span><br><span class="line">x =&gt; &#123; <span class="attr">foo</span>: x &#125;</span><br></pre></td></tr></table></figure>

<p>因为和函数体的{ … }有语法冲突，所以要改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ok:</span></span><br><span class="line">x =&gt; (&#123; <span class="attr">foo</span>: x &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数与匿名函数异同"><a href="#箭头函数与匿名函数异同" class="headerlink" title="箭头函数与匿名函数异同"></a>箭头函数与匿名函数异同</h3><p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别:</p>
<p>箭头函数的提出，主要是为了解决多层函数嵌套中this指代混乱的问题；箭头函数内部的this是词法作用域，由上下文确定。</p>
<ul>
<li><p>使用普通函数嵌套会产生this指代混乱的问题</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">getBirth</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bth = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 多层嵌套函数中，this优先寻找父级作用域对象，不存在，即指向全局window对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.age  <span class="comment">// this.age   undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bth()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.getBirth()) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用箭头函数即可解决问题</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">getBirth</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bth = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">// 在箭头函数中 this会寻找父级作用域的对象，找到为止</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.age  <span class="comment">// this.age  18</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bth()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.getBirth()) <span class="comment">// 2002</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="箭头函数不适用的场景"><a href="#箭头函数不适用的场景" class="headerlink" title="箭头函数不适用的场景"></a>箭头函数不适用的场景</h3><p>==作为对象的属性==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>作为对象的属性时，this的指向则不再是对象本身了，这就造成了意想不到的结果</p>
<p>==不可以作为构造函数来使用==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123; <span class="comment">// Uncaught TypeError: Person is not a constructor</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这个特性很容易测试，如果上一条明白的话也很容易理解： 箭头函数压根就没有this，当然不能作为构造函数（如果明白构造函数new的过程的话，插一句： new的过程其实就是创建一个对象，将this指向该对象，然后执行代码初始化这个对象，最后返回）</p>
<p>==不可以作为原型方法==</p>
<p>同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat.prototype.sayCatName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;Mew&#x27;</span>);</span><br><span class="line">cat.sayCatName(); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>

<p>使用传统的函数表达式就能解决问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat.prototype.sayCatName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === cat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;Mew&#x27;</span>);</span><br><span class="line">cat.sayCatName(); <span class="comment">// =&gt; &#x27;Mew&#x27;</span></span><br></pre></td></tr></table></figure>

<p>sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。</p>
<p>==不绑定arguments==（如果有要使用arguments的时候可以使用rest参数代替）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">&#125;;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p>这个特性也很好测试，但是实在要使用<code>arguments</code>对象要怎么办呢？我们可以使用es6的另一个新特性rest参数，完美替代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="JS对象嵌套函数"><a href="#JS对象嵌套函数" class="headerlink" title="JS对象嵌套函数"></a>JS对象嵌套函数</h2><p>在 <code>js</code> 的语法规则中，如果一个对象内存在方法，则该方法 <code>this</code> 指向当前对象。<br>如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge();<span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>若方法中再次包含函数方法，则该嵌套函数指向全局。不能获取到本对象中的属性。<br>如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="built_in">this</span>.age)&#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge();<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>可以通过如下几种办法来解决此问题：  </p>
<ol>
<li>  定义变量，保存对象 <code>this</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">		<span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(self.age)&#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  通过箭头函数的方式 </li>
</ol>
<p>由于箭头函数具有默认指向父级调用对象 obj 的特点，因此也可以解决本问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; alert(<span class="built_in">this</span>.age)&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="解构赋值介绍"><a href="#解构赋值介绍" class="headerlink" title="解构赋值介绍"></a>解构赋值介绍</h3><p>解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量。这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰。</p>
<p>通常来说，你很可能这样访问数组中的前三个元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = someArray[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> second = someArray[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> third = someArray[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p>如果使用解构赋值的特性，将会使等效的代码变得更加简洁并且可读性更高：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [first, second, third] = someArray;</span><br></pre></td></tr></table></figure>

<p><code>SpiderMonkey</code>（Firefox 的 JavaScript 引擎）已经支持解构的大部分功能，但是仍不健全。你可以通过 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=694100">bug 694100</a> 跟踪解构和其它 ES6 特性在 <code>SpiderMonkey</code> 中的支持情况。</p>
<h3 id="数组与迭代器的解构"><a href="#数组与迭代器的解构" class="headerlink" title="数组与迭代器的解构"></a>数组与迭代器的解构</h3><p>以上是数组解构赋值的一个简单示例，其语法的一般形式为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ variable1, variable2, ..., variableN ] = array;</span><br></pre></td></tr></table></figure>

<p>这将为 variable1 到 variableN 的变量赋予数组中相应元素项的值。如果你想在赋值的同时声明变量，可在赋值语句前加入<code>var</code>、<code>let</code>或<code>const</code>关键字，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [ variable1, variable2, ..., variableN ] = array;</span><br><span class="line"><span class="keyword">let</span> [ variable1, variable2, ..., variableN ] = array;</span><br><span class="line"><span class="keyword">const</span> [ variable1, variable2, ..., variableN ] = array;</span><br></pre></td></tr></table></figure>

<p>事实上，用<code>变量</code>来描述并不恰当，因为你可以对任意深度的嵌套数组进行解构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(foo);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(bar);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(baz);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>此外，你可以在对应位留空来跳过被解构数组中的某些元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [,,third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(third);  <span class="comment">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure>

<p>而且你还可以通过 “<a href="http://www.infoq.com/cn/articles/es6-in-depth-rest-parameters-and-defaults">不定参数</a>” 模式捕获数组中的所有尾随元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(tail); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>当访问空数组或越界访问数组时，对其解构与对其索引的行为一致，最终得到的结果都是：<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([][<span class="number">0</span>]);   <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> [missing] = [];</span><br><span class="line"><span class="built_in">console</span>.log(missing); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>请注意，数组解构赋值的模式同样适用于任意迭代器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a, b] = [b, a + b];</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class="line"><span class="built_in">console</span>.log(sixth);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><p>通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> robotA = &#123; <span class="attr">name</span>: <span class="string">&quot;Bender&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> robotB = &#123; <span class="attr">name</span>: <span class="string">&quot;Flexo&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: nameA &#125; = robotA;</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: nameB &#125; = robotB;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nameA);  <span class="comment">// &quot;Bender&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(nameB);  <span class="comment">// &quot;Flexo&quot;</span></span><br></pre></td></tr></table></figure>

<p>当属性名与变量名一致时，可以通过一种实用的句法简写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;lorem&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;ipsum&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);  <span class="comment">// &quot;lorem&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(bar);  <span class="comment">// &quot;ipsum&quot;</span></span><br></pre></td></tr></table></figure>

<p>与数组解构一样，你可以随意嵌套并进一步组合对象解构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> complicatedObj = &#123;</span><br><span class="line">  <span class="attr">arrayProp</span>: [</span><br><span class="line">    <span class="string">&quot;Zapp&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">second</span>: <span class="string">&quot;Brannigan&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">arrayProp</span>: [first, &#123; second &#125;] &#125; = complicatedObj;</span><br><span class="line"><span class="built_in">console</span>.log(first);</span><br><span class="line"><span class="comment">// &quot;Zapp&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(second);</span><br><span class="line"><span class="comment">// &quot;Brannigan&quot;</span></span><br></pre></td></tr></table></figure>

<p>当你解构一个未定义的属性时，得到的值为<code>undefined</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; missing &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(missing);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>请注意，当你解构对象并赋值给变量时，如果你已经声明或不打算声明这些变量（亦即赋值语句前没有<code>let</code>、<code>const</code>或<code>var</code>关键字），你应该注意这样一个潜在的语法错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; blowUp &#125; = &#123; <span class="attr">blowUp</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="comment">// Syntax error 语法错误</span></span><br></pre></td></tr></table></figure>

<p>为什么会出错？这是因为 JavaScript 语法通知解析引擎将任何以 {开始的语句解析为一个块语句（例如，<code>&#123;console&#125;</code>是一个合法块语句）。解决方案是将整个表达式用一对小括号包裹：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&#123; safe &#125; = &#123;&#125;);</span><br><span class="line"><span class="comment">// No errors 没有语法错误</span></span><br></pre></td></tr></table></figure>

<h3 id="解构值不是对象、数组或迭代器"><a href="#解构值不是对象、数组或迭代器" class="headerlink" title="解构值不是对象、数组或迭代器"></a>解构值不是对象、数组或迭代器</h3><p>当你尝试解构<code>null</code>或<code>undefined</code>时，你会得到一个类型错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;blowUp&#125; = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// TypeError: null has no properties（null没有属性）</span></span><br></pre></td></tr></table></figure>

<p>然而，你可以解构其它原始类型，例如：<code>布尔值</code>、<code>数值</code>、<code>字符串</code>，但是你将得到<code>undefined</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;wtf&#125; = <span class="literal">NaN</span>;</span><br><span class="line"><span class="built_in">console</span>.log(wtf);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>你可能对此感到意外，但经过进一步审查你就会发现，原因其实非常简单。当使用对象赋值模式时，被解构的值<a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible">需要被强制转换为对象</a>。大多数类型都可以被转换为对象，但<code>null</code>和<code>undefined</code>却无法进行转换。当使用数组赋值模式时，被解构的值一定要<a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-getiterator">包含一个迭代器</a>。</p>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>当你要解构的属性未定义时你可以提供一个默认值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [missing = <span class="literal">true</span>] = [];</span><br><span class="line"><span class="built_in">console</span>.log(missing);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">message</span>: msg = <span class="string">&quot;Something went wrong&quot;</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br><span class="line"><span class="comment">// &quot;Something went wrong&quot;</span></span><br><span class="line"><span class="keyword">var</span> &#123; x = <span class="number">3</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>python自动化测试</title>
    <url>/2021/05/15/trpKEE8QZ/</url>
    <content><![CDATA[<blockquote>
<p>  写好了一个项目之后，要确定各个模块是不是稳定运行，有没有bug，比如一个项目有100个路由，可以手动一个一个URL的输入，查看响应有没有毛病，但这样不符合程序员的逼格。<br>  由此，诞生了单元测试与集成测试。</p>
</blockquote>
<span id="more"></span>

<h2 id="python-unittest"><a href="#python-unittest" class="headerlink" title="python unittest"></a>python unittest</h2><p><a href="https://docs.python.org/3.7/library/unittest.html">unittest</a>是python内置的用于测试代码的模块，无需安装， 使用简单方便。</p>
<h3 id="unittest-简介"><a href="#unittest-简介" class="headerlink" title="unittest 简介"></a>unittest 简介</h3><blockquote>
<p>  <code>unittest</code>中最核心的部分是：<code>TestFixture</code>、<code>TestCase</code>、<code>TestSuite</code>、<code>TestRunner</code></p>
</blockquote>
<p><code>unittest case</code>的运行流程：</p>
<ul>
<li>  写好一个完整的<code>TestCase</code></li>
<li>  多个<code>TestCase</code> 由<code>TestLoder</code>被加载到<code>TestSuite</code>里面, <code>TestSuite</code>也可以嵌套<code>TestSuite</code></li>
<li>  由<code>TextTestRunner</code>来执行<code>TestSuite</code>，测试的结果保存在<code>TextTestResult</code>中</li>
<li>  <code>TestFixture</code>指的是环境准备和恢复</li>
</ul>
<h4 id="Test-Fixture"><a href="#Test-Fixture" class="headerlink" title="Test Fixture"></a>Test Fixture</h4><p>用于测试环境的准备和恢复还原, 一般用到下面几个函数。</p>
<ul>
<li>  <code>setUp()</code>：准备环境，执行每个测试用例的前置条件</li>
<li>  <code>tearDown()</code>：环境还原，执行每个测试用例的后置条件</li>
<li>  <code>setUpClass()</code>：必须使用<code>@classmethod</code>装饰器，所有<code>case</code>执行的前置条件，只运行一次</li>
<li>  <code>tearDownClass()</code>：必须使用<code>@classmethod</code>装饰器，所有<code>case</code>运行完后只运行一次</li>
</ul>
<hr>
<h4 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h4><ul>
<li>参数<code>verbosity</code>可以控制错误报告的详细程度：<code>默认为1</code>。<ul>
<li>  <code>Verbosity=0</code>，表示不输出每一个用例的执行结果；</li>
<li>  <code>Verbosity=1</code>情况下<code>成功是 .</code>，失败是 F，出错是 E，跳过是 S；</li>
<li>  <code>Verbosity=2</code>情况下会打印测试的注释,显示详细的执行报告结；</li>
</ul>
</li>
<li>  测试的执行跟方法的顺序没有关系, <strong>默认按字母顺序</strong></li>
<li>  每个测试方法均以 <code>test_</code> 开头</li>
</ul>
<hr>
<h4 id="Test-Suite"><a href="#Test-Suite" class="headerlink" title="Test Suite"></a>Test Suite</h4><ul>
<li>  一般通过<code>addTest()</code>或者<code>addTests()</code>向<code>suite</code>中添加</li>
<li>  <code>case</code>的执行顺序与添加到Suite中的顺序是一致的</li>
<li>使用<strong>装饰器</strong>的方式来实现跳过测试与预计的失败，常用的主要有3种:<ul>
<li>  <code>@unittest.skip()</code>：直接跳过测试用例；</li>
<li>  <code>@unittest.skipIf(condition,reason)</code>：当满足条件时跳过测试用例；</li>
<li>  <code>@unittest.skipUnless(condition,reason)</code>：只有满足某一条件时不跳过，其他的都跳过；</li>
</ul>
</li>
</ul>
<hr>
<h4 id="Test-Loder"><a href="#Test-Loder" class="headerlink" title="Test Loder"></a>Test Loder</h4><ul>
<li><p>  <code>TestLoadder</code>用来加载<code>TestCase</code>到<code>TestSuite</code>中</p>
</li>
<li><p>  <code>loadTestsFrom*()</code>方法从各个地方寻找<code>testcase</code>，创建实例，然后<code>addTestSuite</code>，再返回一个<code>TestSuite</code>实例</p>
</li>
<li><p><code>defaultTestLoader()</code> 与 <code>TestLoader()</code>功能差不多，复用原有实例</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unittest.TestLoader().loadTestsFromTestCase(testCaseClass)</span><br><span class="line">unittest.TestLoader().loadTestsFromModule(module)</span><br><span class="line">unittest.TestLoader().loadTestsFromName(name, module=<span class="literal">None</span>)</span><br><span class="line">unittest.TestLoader().loadTestsFromNames(names, module=<span class="literal">None</span>)</span><br><span class="line">unittest.TestLoader().discover()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><blockquote>
<p>  定义实现<strong>测试用例</strong>，然后调用即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCaseDemo</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this setupclass() method only called once.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this tear_down_class() method only called once too.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;do something before test : prepare environment.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;do something after test : clean up.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_goods_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        r = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/goods/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        self.assertEqual(<span class="number">200</span>, r.status_code, <span class="string">&#x27;查询商品失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        result = r.json()</span><br><span class="line">        self.assertEqual(<span class="built_in">list</span>, <span class="built_in">type</span>(result), <span class="string">&#x27;查询商品，结果不对&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_goods_create</span>(<span class="params">self</span>):</span></span><br><span class="line">        r = requests.post(<span class="string">&#x27;http://127.0.0.1:8000/goods/&#x27;</span>)</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        self.assertEqual(<span class="number">405</span>, r.status_code, <span class="string">&#x27;不应该允许添加商品&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="测试套件"><a href="#测试套件" class="headerlink" title="测试套件"></a>测试套件</h3><p>上述演示了一种比较基础、简单的测试用例的使用方法，但是这样比较固化，只能自动的去查找以<em>test</em>开头的测试方法，然后顺序的去执行测试方法，这样显然是有点僵化的，不能按照重要程度或者我们的意愿去执行测试方法，而且遇到多个测试用例是会比较混乱。<br>这里要讲的测试套件能够归档测试用例，能够让我们按照指定的顺序去执行测试方法。</p>
<ul>
<li>  创建测试实例</li>
<li>  创建测试套件</li>
<li>  加载测试实例</li>
<li>  添加测试实例到测试套件</li>
<li>  创建测试运行组件，加载测试套件</li>
<li>  运行测试套件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── testcase</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── test.py  <span class="comment"># 测试套件</span></span><br><span class="line">    └── test_demo_class.py  <span class="comment"># 测试实例</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> HTMLReport</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestLoader, TestSuite, TextTestRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test_demo_class  <span class="comment"># 导入测试模块</span></span><br><span class="line"><span class="keyword">from</span> test_demo_class <span class="keyword">import</span> TestCaseDemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 2. 创建测试套件</span></span><br><span class="line">    suite = TestSuite()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.加载测试实例</span></span><br><span class="line">    <span class="comment"># test1 = TestCaseDemo(&quot;test_goods_list&quot;)</span></span><br><span class="line">    <span class="comment"># test2 = TestCaseDemo(&#x27;test_goods_create&#x27;)</span></span><br><span class="line">    tests = [</span><br><span class="line">        TestCaseDemo(<span class="string">&quot;test_goods_list&quot;</span>), </span><br><span class="line">        TestCaseDemo(<span class="string">&quot;test_goods_create&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># tests = TestLoader().loadTestsFromModule(test_demo_class)</span></span><br><span class="line">    <span class="comment"># tests = TestLoader().loadTestsFromTestCase(TestCaseDemo)</span></span><br><span class="line">    <span class="comment"># tests = TestLoader().loadTestsFromName(&#x27;test_demo_class.TestCaseDemo.test_goods_list&#x27;)</span></span><br><span class="line">    <span class="comment"># tests = TestLoader().loadTestsFromNames([</span></span><br><span class="line">    <span class="comment">#     &#x27;test_demo_class.TestCaseDemo.test_goods_list&#x27;,</span></span><br><span class="line">    <span class="comment">#     &#x27;test_demo_class.TestCaseDemo.test_goods_create&#x27;</span></span><br><span class="line">    <span class="comment"># ])</span></span><br><span class="line">    <span class="comment"># tests = TestLoader().discover(&#x27;.&#x27;, &#x27;test_*.py&#x27;, top_level_dir=None)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 添加测试实例到测试套件</span></span><br><span class="line">    <span class="comment"># suite.addTest(test1)</span></span><br><span class="line">    <span class="comment"># suite.addTest(test2)</span></span><br><span class="line">    suite.addTests(tests)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 创建运行套件，并运行</span></span><br><span class="line">    runner = TextTestRunner(verbosity=<span class="number">2</span>)  <span class="comment"># 输出到终端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># runner = HTMLReport.TestRunner(report_file_name=&#x27;test&#x27;,</span></span><br><span class="line">    <span class="comment">#                                 output_path=&#x27;report&#x27;,</span></span><br><span class="line">    <span class="comment">#                                 title=&#x27;测试报告&#x27;,</span></span><br><span class="line">    <span class="comment">#                                 description=&#x27;测试描述&#x27;,</span></span><br><span class="line">    <span class="comment">#                                 sequential_execution=True</span></span><br><span class="line">    <span class="comment">#                                 )  # 输出到HTML网页</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    runner.run(suite)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># with open(&#x27;ut_log.txt&#x27;, &#x27;a&#x27;) as fp:  # 输出到txt文件</span></span><br><span class="line">    <span class="comment">#     runner = TextTestRunner(stream=fp, verbosity=2)</span></span><br><span class="line">    <span class="comment">#     runner.run(suite)</span></span><br></pre></td></tr></table></figure>

<h2 id="django-test"><a href="#django-test" class="headerlink" title="django test"></a>django test</h2><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span> : <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db1&#x27;</span>, <span class="comment"># 真实的数据库</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TEST&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;django_db_test&#x27;</span> <span class="comment"># 用于单元测试的数据库</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单元测试文件"><a href="#单元测试文件" class="headerlink" title="单元测试文件"></a>单元测试文件</h3><blockquote>
<p>  在每个APP里面，都有一个<code>test.py</code>文件，可以在里面去定义测试类，并可以直接运行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase, Client</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsTestCase</span>(<span class="params">TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_goods_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 创建一个客户端</span></span><br><span class="line">        client = Client()</span><br><span class="line">        <span class="comment"># 模拟客户端访问首页</span></span><br><span class="line">        response = client.get(<span class="string">&#x27;/goods/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试，self.assertEqual接收3个参数(被测试对象，正确的测试结果，如果不正确输出什么）</span></span><br><span class="line">        <span class="comment"># 如果第一个参数的返回值不等于第二个参数，输出第三个参数</span></span><br><span class="line">        self.assertEqual(</span><br><span class="line">            response.status_code,</span><br><span class="line">            <span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;商品查询失败&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        result = response.json()</span><br><span class="line">        self.assertEqual(</span><br><span class="line">            <span class="built_in">type</span>(result),</span><br><span class="line">            <span class="built_in">list</span>,</span><br><span class="line">            <span class="string">&#x27;商品查询结果不对&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    userTestCase = GoodsTestCase()</span><br><span class="line">    userTestCase.test_goods_list()</span><br></pre></td></tr></table></figure>

<h2 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h2><p>在单元测试进行的同时，就离不开<code>mock</code>模块的存在，初次接触这个概念的时候会有这样的疑问：把要测的东西都模拟掉了还测试什么呢？<br>但在，实际生产中的项目是非常复杂的，对其进行单元测试的时候，会遇到以下问题：</p>
<ul>
<li>  接口的依赖</li>
<li>  外部接口调用</li>
<li>  测试环境非常复杂</li>
</ul>
<p>单元测试应该只针对当前单元进行测试, 所有的内部或外部的依赖应该是稳定的, 已经在别处进行测试过的。使用<code>mock</code> 就可以对外部依赖组件实现进行模拟并且替换掉, 从而使得单元测试将焦点只放在当前的单元功能。</p>
<p>因为在为代码进行单元测试的同时，会发现该模块依赖于其他的模块，例如数据库，网络，或者第三方模块的存在，而我们对一个模块进行单元测试的目的，是测试当前模块正常工作，这样就要避开对其他模块的依赖，而mock主要作用便在于，专注于待测试的代码。而在但与测试中，如何灵活的使用mock模块是核心所在。下面便以mock为核心，结合最近所写的代码，阐述mock模块的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> mock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_lemonfix</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    res = requests.get(<span class="string">&#x27;http://www.lemonfix.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res.status_code.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    request_lemonfix = mock.Mock(return_value=<span class="string">&quot;这里会显示论坛主页&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(request_lemonfix())</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql用户管理</title>
    <url>/2019/12/12/vf8YY9pvr/</url>
    <content><![CDATA[<p>介绍如何在 Ubuntu系统上 安装mysql软件、以及如何创建用户信息。</p>
<span id="more"></span>

<h3 id="Mysql软件操作"><a href="#Mysql软件操作" class="headerlink" title="Mysql软件操作"></a>Mysql软件操作</h3><p>以下所有操作以Ubuntu为例</p>
<h4 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server <span class="comment"># 安装mysql</span></span><br></pre></td></tr></table></figure>

<h4 id="mysql删除"><a href="#mysql删除" class="headerlink" title="mysql删除"></a>mysql删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove --upgrade mysql-* -y <span class="comment"># 卸载mysql</span></span><br><span class="line"></span><br><span class="line">dpkg -l|grep ^rc|awk <span class="string">&#x27;&#123;print$2&#125;&#x27;</span>|sudo xargs dpkg -P <span class="comment">#清除配置</span></span><br></pre></td></tr></table></figure>

<h4 id="mysql服务"><a href="#mysql服务" class="headerlink" title="mysql服务"></a>mysql服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql start <span class="comment"># 启动服务</span></span><br><span class="line">service mysql stop  <span class="comment"># 停止服务</span></span><br><span class="line">service mysql restart  <span class="comment"># 重启服务</span></span><br></pre></td></tr></table></figure>

<h3 id="Mysql数据操作"><a href="#Mysql数据操作" class="headerlink" title="Mysql数据操作"></a>Mysql数据操作</h3><p>数据的备份与还原</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>h 主机名 <span class="operator">-</span>P 端口 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库名 <span class="operator">&gt;</span> 备份文件.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source 备份文件.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="mysql用户操作"><a href="#mysql用户操作" class="headerlink" title="mysql用户操作"></a>mysql用户操作</h3><h4 id="一、创建用户"><a href="#一、创建用户" class="headerlink" title="一、创建用户"></a>一、创建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>username</code>：你将创建的用户名</li>
<li><code>host</code>：指定该用户在哪个主机上可以登陆，如果是本地用户可用<code>localhost</code>，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code></li>
<li><code>password</code>：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>
<li><code>mysql_native_password</code>：用户加密方式，该方式为mysql8.0之前的加密方式，如果不写，则是mysql 8.0之后的加密方式<code>caching_sha2_password</code></li>
</ul>
<h4 id="二、-修改用户信息"><a href="#二、-修改用户信息" class="headerlink" title="二、 修改用户信息"></a>二、 修改用户信息</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数同上</li>
</ul>
<h4 id="三、删除用户"><a href="#三、删除用户" class="headerlink" title="三、删除用户"></a>三、删除用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数同上</li>
</ul>
<h4 id="四、授权"><a href="#四、授权" class="headerlink" title="四、授权"></a>四、授权</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> privileges <span class="keyword">on</span> databasename.tablename <span class="keyword">to</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li>
<li>databasename：数据库名</li>
<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</li>
<li>其余参数同上</li>
</ul>
<h4 id="五、删除权限"><a href="#五、删除权限" class="headerlink" title="五、删除权限"></a>五、删除权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> privileges <span class="keyword">on</span> databasename.tablename <span class="keyword">to</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数同上</li>
</ul>
<h4 id="六、演示"><a href="#六、演示" class="headerlink" title="六、演示"></a>六、演示</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建一个可以从任意远程主机登陆的用户test</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 创建数据库mydata</span><br><span class="line"><span class="keyword">create</span> database mydata charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"># 对用户test授权，只能操作数据库mydata</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> mydata.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 刷新配置，立即启用修改</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 报文内的 HTTP 信息</title>
    <url>/2019/05/09/x5FXdEy2v/</url>
    <content><![CDATA[<p>HTTP 通信过程包括从客户端发往服务器端的请求以及从服务端返回客户端的响应。</p>
<span id="more"></span>

<h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><p>就是一大串通信过程里经过 <code>HTTP</code> 处理后添加的报文。<br>其大致分为报文首部和报文主体两块。两者由最初出现的空行（<code>CR+LF</code>）来划分，通常并不一定要有报文主体。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112612-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%20.png" alt="20190526112612-HTTP报文结构"></p>
<h2 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h2><h3 id="报文主体和实体主体的差异"><a href="#报文主体和实体主体的差异" class="headerlink" title="报文主体和实体主体的差异"></a>报文主体和实体主体的差异</h3><ul>
<li><strong>报文：</strong>HTTP 通信的基本单位，8 位组字节流组成，通过 HTTP 通信传输。</li>
<li><strong>实体：</strong>请求或响应的有效载荷数据被传输，内容由实体首部和实体主体组成。</li>
</ul>
<p>HTTP 报文主体用于传输请求或响应的实体主体。<br>一般情况，报文主体等于实体主体，但是传输中进行编码操作的时候，实体主体内容发生变化。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112620-HTTP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%8402%20.png" alt="20190526112620-HTTP报文结构02"><br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112630-HTTP%E6%8A%A5%E6%96%87%E5%AE%9E%E4%BE%8B%20.png" alt="20190526112630-HTTP报文实例"></p>
<h3 id="压缩传输的内容编码"><a href="#压缩传输的内容编码" class="headerlink" title="压缩传输的内容编码"></a>压缩传输的内容编码</h3><p><code>HTTP</code> 协议中的内容编码功能就像用压缩软件压缩东西一样，对实体内容进行编码压缩，内容编码后的实体由客户端接受并解码。这可以压缩传输内容，加快传输速度。<br>常见的内容编码有 <code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>（不编码）。</p>
<h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><p><code>HTTP</code> 通信过程中，请求的编码实体资源尚未传输完成之前，浏览器无法显示请求页面，传输大容量数据时候，通过数据分割成多块，能让浏览器逐步显示页面。这就是分块传输编码（<code>Chunked</code> <code>Transfer</code> <code>Coding</code>）。它将实体主体分成多个部分，每一块用十六进制来标记，最后一块使用<code>0（CR+LF)</code>来标记。传输给客户端，由客户端进行解码恢复。</p>
<h2 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h2><p><code>MIME</code>（<code>Multipurpose</code> <code>Internet</code> <code>Mail</code> <code>Extensions</code>, 多用途因特网邮件扩展），它允许邮件处理文本，图片，视频等多个不同类型的数据，这使我们可以在邮件里写入文字并添加多分附件成为了现实。例如：图片等二进制数据以 <code>ASCII</code> 码字符串编码方式表名，就是利用 <code>MIME</code> 来标记数据类型，在 <code>MIME</code> 扩展中会使用一种称为多部分对象集合（<code>Multipart</code>）的方法，来容纳多份不同类型的数据。<br>相应的，<code>HTTP</code> 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体，通常在图片或文本文件等上传时使用。<br>多部分对象集合包括：</p>
<ul>
<li><p><code>multipart</code>/<code>form-data</code> 在 <code>Web</code> 表单文件上传使用</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112655-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88%20.png" alt="20190526112655-多部分对象集合"></p>
</li>
<li><p><code>multipart</code>/<code>byteranges</code> 状态码 206（<code>Partial</code> <code>Content</code>，部分内容）响应报文包含了多个范围的内容时使用。</p>
</li>
</ul>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112701-%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%8802%20.png" alt="20190526112701-多部分对象集合02"></p>
<p><code>HTTP</code> 报文使用这个多部分对象集合的时候，需要在首部添加 <code>Content-type</code> 字段。<br>使用 <code>boundary</code> 字符串来划分多部分<br>在 <code>boundary</code> 字符串指定的各个实体的起始行之前插入<code>--</code>标记（<code>--AaB03x</code>、<code>--THis_STRING_SEPARATES</code>)<br>在多部分对象集合对应的字符串的最后插入<code>--</code>标记（<code>--AaB03x--</code>）</p>
<p>多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在部分中潜逃使用多部分对象集合。</p>
<h2 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h2><p>过去，用户下载东西中断了必须要从头下载，为了解决这问题，要实现该功能需要指定下载的实体范围，指定范围发送的请求叫做范围请求（<code>Range</code> <code>Request</code>)<br>对一份 10000 字节大小的资源，如果使用范围请求，可以只请求 5001~10000 字节内的资源。这样就算中断了，也可以向服务端指明自己需要的资源字节范围，这些需要在首部字段中表名。<br>形式如下：</p>
<p><code>Range</code> : <code>bytes</code> = 5001 - 10000<br>5001 到 10000 的<br><code>Range</code> : <code>bytes</code> = 5001 -<br>5001 到之后全部的<br><code>Range</code> : <code>bytes</code> = -3000, 5000 - 7000<br>从头到 3000， 5000 到 7000 的</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2006/20190526112648-HTTP%E8%8C%83%E5%9B%B4%E8%AF%B7%E6%B1%82%20.png" alt="20190526112648-HTTP范围请求"></p>
<p>针对范围请求，响应会返回状态码为 <code>206 Partial Content</code> 的响应报文，另外，对于多重范围的范围请求，响应会在首部字段 <code>Content-Type</code> 标明 <code>multipart</code>/<code>byteranges</code> 后返回响应报文，如果服务器无法响应请求，返回状态码 <code>200 OK </code>和完整的实体内容。</p>
<h5 id="5、内容协商返回最合适的内容"><a href="#5、内容协商返回最合适的内容" class="headerlink" title="5、内容协商返回最合适的内容"></a>5、内容协商返回最合适的内容</h5><p>同一个 Web 网站可能有存着多分相同内容的页面，如中文版和英文版，内容虽然相同，单语言不同。当浏览器默认语言为哪种，访问相同的 <code>URI</code> 的 <code>Web</code> 页面时，会对应返回哪种语言的 Web 页面，这样的机制就叫做内容协商（<code>Content</code> <code>Negotiation</code>）。<br>这协商的请求会包含在首部字段</p>
<ul>
<li><code>Accept</code></li>
<li><code>Accept-Charset</code></li>
<li><code>Accept-Encoding</code></li>
<li><code>Accept-Language</code></li>
<li><code>Content-Language</code></li>
</ul>
<p>类型：<br>服务器驱动协商（<code>Server-driven</code> <code>Negotiation</code>)<br>服务器通过请求的首部字段为参考自动处理，但以浏览器直接发送的信息不一定能筛选出最优的内容。<br>客户端驱动协商（<code>Agent-driven</code> <code>Negotiation</code>)<br>用户从浏览器显示的可选项列表中选择， 还可以利用 JS 脚本在 Web 页面自动进行上述选择。<br>透明协商（<code>Transparent</code> <code>Negotiation</code>)<br>上两种方法的结合体。</p>
<h2 id="自我回顾"><a href="#自我回顾" class="headerlink" title="自我回顾"></a>自我回顾</h2><p>1、<code>HTTP</code> 报文是什么？大致分为哪两部分？<br>2、提升编码传输速率的方法有哪些？<br>3、如何发送多部分对象集合？<br>4、如何进行断点传输？<br>5、内容协商机制是什么？</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 python2和python3共存问题</title>
    <url>/2019/05/25/xm047BTzy/</url>
    <content><![CDATA[<blockquote>
<p><strong>特别说明</strong>，本文是在 <strong>Windows64 位系统</strong>下进行的，32 位系统请下载相应版本的安装包，安装方法类似。</p>
</blockquote>
<span id="more"></span>

<h2 id="下载python安装包"><a href="#下载python安装包" class="headerlink" title="下载python安装包"></a>下载python安装包</h2><p>进入 python 官网，链接 <a href="https://www.python.org/">https://www.python.org/</a></p>
<p>选择 Downloads—&gt;Windows，点击进入就可以看到寻找想要的 python 版本</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103726-win10_download_py%20.png" alt="win10_download_py"></p>
<p>本文选择的是：</p>
<p>Python3.5.2, 点击后面链接可直接下载，<a href="https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe">https://www.python.org/ftp/python/3.5.2/python-3.5.2rc1-amd64.exe</a></p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103746-win10_download_py3%20.png" alt="20190526103746-win10_download_py3"></p>
<p>Python2.7.9, 点击后面链接可直接下载，<a href="https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi">https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi</a></p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526103737-win10_download_py2%20.png" alt="20190526103737-win10_download_py2"></p>
<h2 id="python3-安装"><a href="#python3-安装" class="headerlink" title="python3 安装"></a>python3 安装</h2><blockquote>
<p><strong>说明:</strong> 本文先安装 python3，然后安装 python2</p>
</blockquote>
<p>首先选择安装目录，本文安装路径为 D:\Python\python35，然后点击下载好的 python3 软件包进行安装，具体流程如下：</p>
<ol>
<li><p>在下图红色标记的地方 Add Python3.5 to PATH 前勾选，可以直接将 python3 添加到系统环境变量，然后在 Customize installation 中自定义安装路径。<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104125-py3_%E5%AE%89%E8%A3%85_01%20.png" alt="20190526104125-py3_安装_01"></p>
</li>
<li><p>直接 next 即可<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104133-py3_%E5%AE%89%E8%A3%85_02%20.png" alt="20190526104133-py3_安装_02"></p>
</li>
<li><p>下图中 Advanced Options 中没有默认勾选的根据自己的需要进行勾选，黄色标记为 VS 2015 及其以后版本需要的，如果你以后打算在 VS 2015 中配置 python 环境请勾选此项，点击 Browse 选择安装目录，然后点击 Install 进行安装。<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104141-py3_%E5%AE%89%E8%A3%85_03%20.png" alt="20190526104141-py3_安装_03"></p>
</li>
<li><p>等待如下安装过程<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104253-py3_%E5%AE%89%E8%A3%85_04%20.png" alt="20190526104253-py3_安装_04"></p>
</li>
<li><p>安装成功<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104257-py3_%E5%AE%89%E8%A3%85_05%20.png" alt="20190526104257-py3_安装_05"></p>
</li>
<li><p>点击关闭，查看 python3 安装情况，按 “Win + R” 快捷键，在打开的 “运行” 对话框中，输入 “cmd” 按回车，进入如下界面，输入 python 查看 python3 安装情况，显示 python 3.5.2 的版本信息，则安装成功，可以输入语句 print(1 + 1)进行测试。<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104443-py3_%E5%AE%89%E8%A3%85_06%20.png" alt="20190526104443-py3_安装_06"></p>
</li>
</ol>
<h2 id="python2-安装"><a href="#python2-安装" class="headerlink" title="python2 安装"></a>python2 安装</h2><ol>
<li><p>点击 python2 安装包，点击运行，next，选择安装目录，本文安装路径为 D:\Python\python27，然后 next<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104627-py2_%E5%AE%89%E8%A3%85_01%20.png" alt="20190526104627-py2_安装_01"></p>
</li>
<li><p>下图黄色圈出的部分，显示不能够添加路径到系统变量，不能够直接使用 python 命令没有关系，先点击 next 进行安装，后面专门解决。<br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104634-py2_%E5%AE%89%E8%A3%85_02%20.png" alt="20190526104634-py2_安装_02"><br><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104643-py2_%E5%AE%89%E8%A3%85_03%20.png" alt="20190526104643-py2_安装_03"></p>
</li>
<li><p>点击 finish 完成安装。<br> 至此，python2 和 python3 安装完毕。</p>
</li>
</ol>
<blockquote>
<p>特别说明：此时运行 “cmd” 命令进入 DOS 命令提示框，输入 python 仍然显示 python3 版本。</p>
</blockquote>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>打开，控制面板 \ 系统和安全 \ 系统，选择高级系统设置，环境变量，选择 Path，点击编辑，新建，分别添加 D:\Python\python27 和 D:\Python\python27\Scripts 到环境变量。</p>
<blockquote>
<p><strong>注意：</strong> python3 安装时可以选择自动添加到系统环境变量，如未选择，方法和 python2 添加过程相同。</p>
</blockquote>
<h2 id="重命名-python-exe"><a href="#重命名-python-exe" class="headerlink" title="重命名 python.exe"></a>重命名 python.exe</h2><ol>
<li><p>找到 python2 和 python3 的安装目录，修改 python2.7.9 和 python3.5.2 中 python.exe 和 pythonw.exe 的名称为 python2.exe、pythonw2.exe 和 python3.exe、pythonw3.exe。</p>
</li>
<li><p>然后在运行 cmd 命令，输入 python2 即可运行 python2.7.9 版本<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104936-py2_test%20.png" alt="20190526104936-py2_test"></p>
</li>
<li><p>输入 python3 即可运行 python3.5.2 版本<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526104944-py3_test%20.png" alt="20190526104944-py3_test"></p>
</li>
<li><p>至此，python2 和 python3 安装完毕。</p>
</li>
</ol>
<h2 id="pip2-和-pip3-设置"><a href="#pip2-和-pip3-设置" class="headerlink" title="pip2 和 pip3 设置"></a>pip2 和 pip3 设置</h2><ol>
<li><p>Python 安装包需要用到包管理工具 pip，但是当同时安装 python2 和 python3 的时候，pip 只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的 pip，使得两个 python 版本的 pip 能够共存。<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105211-pip3%E5%AE%89%E8%A3%85%20.png" alt="20190526105211-pip3安装"></p>
</li>
<li><p>在 DOS 命令框输入命令，python2-m pip install –upgrade pip –force-reinstall，显示重新安装成功。<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105206-pip2%E5%AE%89%E8%A3%85%20.png" alt="20190526105206-pip2安装"></p>
</li>
<li><p>现在可以通过 pip2 -V 和 pip3-V 查看两个版本的 pip 信息，以后只需运行 pip2install XXX 和 pip3 install XXX 即可安装各自的 python 包。<br> <img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/20190526105218-pip%E5%AE%89%E8%A3%85%E5%8C%85%20.png" alt="20190526105218-pip安装包"></p>
</li>
<li><p>至此，pip2 和 pip3 修改成功。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Json介绍</title>
    <url>/2019/11/25/y0Nt6uhob/</url>
    <content><![CDATA[<p>JSON是JavaScript Object Notation的缩写，意思是JavaScript 对象表示法</p>
<p>是存储和交换文本信息的语法。类似 XML，不过它比 XML 更小、更快，更易解析</p>
<span id="more"></span>

<p>官网的介绍 <a href="http://www.json.org/json-zh.html">http://www.json.org/json-zh.html</a></p>
<p>JSON(JavaScript Object Notation) 是一种<strong>轻量级的数据交换格式</strong>。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用<strong>完全独立于语言的文本格式</strong>，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p>
<h3 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h3><p>JSON建构于两种结构：</p>
<blockquote>
<p>  “名称/值”对的集合 (键值对)</p>
</blockquote>
<p>不同的语言中，它被理解为对象（object）、纪录（record）、结构（struct）、字典（dictionary）、哈希表（hash table）、有键列表（keyed list）、或者关联</p>
<p>对象是一个无序的**’名称/值’对<strong>集合。一个对象以<code>&#123;</code>（左括号）开始，<code>&#125;</code>（右括号）结束。每个</strong>名称<strong>后跟一个<code>:</code>（冒号）；</strong>‘名称/值’对** 对之间使用<code>,</code>（逗号）分隔</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">23</span>,<span class="attr">&quot;salary&quot;</span>:<span class="number">12.3</span>,<span class="attr">&quot;sex&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  数组</p>
</blockquote>
<p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</p>
<p>数组是值（value）的有序集合。一个数组以<code>[</code>（左中括号）开始，<code>]</code>（右中括号）结束。值之间使用<code>,</code>（逗号）分隔</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;boy&quot;</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>值（value）可以是双引号括起来的字符串（<code>string</code>）、数值(<code>number</code>)、<code>true</code>、<code>false</code>、 <code>null</code>、对象（<code>object</code>）或者数组（<code>array</code>）。这些结构可以嵌套。</p>
<h3 id="JSON-与-JS-对象的关系"><a href="#JSON-与-JS-对象的关系" class="headerlink" title="JSON 与 JS 对象的关系"></a>JSON 与 JS 对象的关系</h3><p>很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：<br><strong>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong><br>如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON-和-JS-对象互转"><a href="#JSON-和-JS-对象互转" class="headerlink" title="JSON 和 JS 对象互转"></a>JSON 和 JS 对象互转</h3><p>要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;); <span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-JWT认证、权限、限流</title>
    <url>/2020/03/15/47DG30ipa/</url>
    <content><![CDATA[<p>DRF框架的一系列功能：认证、权限、限流，都是依赖于JWT。</p>
<span id="more"></span>

<p>整个流程就是这样的:</p>
<ul>
<li><p>  客户端发送用户名和密码到服务端，</p>
</li>
<li><p>  验证通过，生成JWT</p>
</li>
<li><p>  返回JWT给客户端</p>
</li>
<li><p>  下次，客户端发送请求时，携带JWT，一般是在请求头里加入<code>Authorization</code>，并加上<code>JWT</code>标注：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;JWT &#x27;</span> + token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  服务端会验证 token，如果验证通过就会返回相应的资源</li>
<li>  在此基础上，可以实现权限和限流</li>
</ul>
<p>流程图如下：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/10/1821058-2e28fe6c997a60c9.png" alt="jwt-diagram"> </p>
<p>而目前，在DRF项目开发过程中，<code>token</code>的生成、认证，主要是通过<code>rest_framework_jwt</code>实行的。而 <code>rest_framework_jwt</code>实质是对 <code>pyjwt</code>的进一步封装，因此，如果需要一些特定功能时，就可以 使用 <code>pyjwt</code>自定义实现。</p>
<p>接下来主要以 Django+DRF + Vue的开发模式，简单介绍以 jwt作为凭证，实现 用户注册、登录、认证、权限等 一系列流程</p>
<h2 id="以-Django-作为服务端"><a href="#以-Django-作为服务端" class="headerlink" title="以 Django 作为服务端"></a>以 Django 作为服务端</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django  django-cors-headers djangorestframework djangorestframework-jwt</span><br></pre></td></tr></table></figure>

<h4 id="项目配置信息"><a href="#项目配置信息" class="headerlink" title="项目配置信息"></a>项目配置信息</h4><blockquote>
<p><code>djangodemo/settings.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">   	...,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;users&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,  # 关闭csrf验证</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨域参数,允许所有源访问</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义用户模型类</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;users.UserModel&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 drf 的配置信息， 全局配置 drf的视图的认证和权限</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 指定视图权限</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,  <span class="comment"># 默认每个视图，允许任何用户访问</span></span><br><span class="line">    ), <span class="comment"># 也可以在每个视图中指明权限类</span></span><br><span class="line">    <span class="comment"># 指定drf认证机制</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,  <span class="comment"># rest_framework_jwt认证， 也可以在每个视图中指明认证类</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 rest_framework_jwt 的配置信息</span></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>:</span><br><span class="line">    	<span class="comment"># &#x27;rest_framework_jwt.utils.jwt_response_payload_handler&#x27;, # 默认jwt认证成功返回数据 </span></span><br><span class="line">      	<span class="string">&#x27;user.utils.jwt_response_payload_handler&#x27;</span>, <span class="comment"># 自定义jwt认证成功返回数据</span></span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(seconds=<span class="number">300</span>),  <span class="comment"># 指明token的有效期， 默认5分</span></span><br><span class="line">    <span class="string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 允许刷新</span></span><br><span class="line">    <span class="string">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>),  <span class="comment"># 在多久间隔内可以用旧token来刷新以便获取新的token，默认是7天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用户模型类"><a href="#用户模型类" class="headerlink" title="用户模型类"></a>用户模型类</h4><blockquote>
<p><code>users/models.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承django内置的用户类，并重写，注意：必须在settings.py中指明&quot;&quot;&quot;</span></span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        db_table = <span class="string">&#x27;db_user&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure>

<h4 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h4><blockquote>
<p><code>users/ser.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserModel</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="keyword">return</span> UserModel.objects.create_user(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        instance.username = validated_data.get(<span class="string">&#x27;username&#x27;</span>, instance.username)</span><br><span class="line">        instance.phone = validated_data.get(<span class="string">&#x27;phone&#x27;</span>, instance.phone)</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line"></span><br><span class="line">        password = validated_data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            instance.password = make_password(password)</span><br><span class="line"></span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_password</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        验证密码不能全是小写字母，不能全是大写字母，也不能全是数字</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;(?!^\d*$)(?![a-z]$)(?![A-Z]$).&#123;6,&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;密码等级不够&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_phone</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        校验手机号是否合法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;1[3-7]\d&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;手机号不合法&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserModel</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>,)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><blockquote>
<p>  <code>users/views.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> CreateModelMixin</span><br><span class="line"><span class="keyword">from</span> users.ser <span class="keyword">import</span> UserSerializer, UserModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建注册视图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span>(<span class="params">GenericAPIView, CreateModelMixin</span>):</span></span><br><span class="line">    queryset = UserModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;register/&#x27;</span>, RegisterView.as_view()), <span class="comment"># 注册路由  </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="修改登录验证方式"><a href="#修改登录验证方式" class="headerlink" title="修改登录验证方式"></a>修改登录验证方式</h4><p>默认django只支持用户名和密码登录，想要支持多种方式登录，必须重写认证类</p>
<blockquote>
<p><code>users/utils.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserModel</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelBackend</span>(<span class="params">ModelBackend</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;user验证&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, username):</span><br><span class="line">                user = UserModel.objects.get(phone=username)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user = UserModel.objects.get(username=username)</span><br><span class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> user.check_password(password) <span class="keyword">and</span> self.user_can_authenticate(user):</span><br><span class="line">            <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<h4 id="token生成"><a href="#token生成" class="headerlink" title="token生成"></a>token生成</h4><blockquote>
<p>  登录成功，需要生成JWT，返回给客户端，之后的认证通过生成的jwt实现</p>
</blockquote>
<h5 id="默认视图"><a href="#默认视图" class="headerlink" title="默认视图"></a>默认视图</h5><p>登录时，调用 封装好的 <code>obtain_jwt_token</code>，默认返回 <code>&#123;&#39;token&#39;: token&#125;</code>; 如果还想要返回其他数据，需要自定义响应返回事件</p>
<h6 id="视图类"><a href="#视图类" class="headerlink" title="视图类"></a>视图类</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rest_framework_jwt插件已经内置了登录视图，登录成功，返回JWT,注意，默认登录成功只会返回token，如果想要其他用户信息，必须自定义返回数据</span></span><br><span class="line">rest_framework_jwt.views.obtain_jwt_token </span><br></pre></td></tr></table></figure>

<h6 id="自定义返回数据"><a href="#自定义返回数据" class="headerlink" title="自定义返回数据"></a>自定义返回数据</h6><blockquote>
<p><code>users/utils.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_response_payload_handler</span>(<span class="params">token, user=<span class="literal">None</span>, request=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user.username</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token, refresh_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r&#x27;api-token-auth/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">    path(<span class="string">r&#x27;api-token-refresh/&#x27;</span>, refresh_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="自定义视图"><a href="#自定义视图" class="headerlink" title="自定义视图"></a>自定义视图</h5><p>可以调用内置的方法 <code>jwt_payload_handler</code>  和 <code>jwt_encode_handler</code>来产生token， 并且自己构建返回的响应数据</p>
<h6 id="视图类-1"><a href="#视图类-1" class="headerlink" title="视图类"></a>视图类</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义登录视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 1. 获取用户信息</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 认证用户</span></span><br><span class="line">        user = authenticate(request, username=username, password=password)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 判断用户是否认证通过</span></span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="comment"># 生成jwt</span></span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            token = jwt_encode_handler(payload)</span><br><span class="line">       </span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">&#x27;user&#x27;</span>: user.username,</span><br><span class="line">                <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure>

<h6 id="路由-2"><a href="#路由-2" class="headerlink" title="路由"></a>路由</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> user.views <span class="keyword">import</span> LoginAPIView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, LoginAPIView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="token刷新"><a href="#token刷新" class="headerlink" title="token刷新"></a>token刷新</h4><ul>
<li><p>如果 token过期时间设置太短，用户体验不好，过期时间设置太长，则不安全；</p>
</li>
<li><p>而 建议的做法则是：<strong>刷新token</strong></p>
<ul>
<li>在给用户返回token时, 我们给用户设置了两小时有效期, 还允许 7天之内刷新<code>token</code>，我们就需要返回： token、过期时间、刷新的期限</li>
<li>在Vue中判断 token是否即将过期或已经过期</li>
<li>如果已经过期，则需要用户重新登录</li>
<li>如果即将过期，且刷新的期限未过，则需要 携带现在的token，去django中 刷新token，同时更新所有数据</li>
</ul>
</li>
</ul>
<h5 id="视图类-2"><a href="#视图类-2" class="headerlink" title="视图类"></a>视图类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rest_framework_jwt插件已经内置了刷新jwt视图，在 jwt失效之前，返回新的jwt</span></span><br><span class="line">rest_framework_jwt.views.refresh_jwt_token</span><br></pre></td></tr></table></figure>

<h5 id="路由-3"><a href="#路由-3" class="headerlink" title="路由"></a>路由</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> refresh_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">r&#x27;api-token-refresh/&#x27;</span>, refresh_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><p>当客户端请求个人信息时，需要携带上一步生成的<code>token</code>，因此，需要在 服务端验证<code>token</code>，从而判断是否允许进行下一步操作</p>
<blockquote>
<p>  客户端请求时，需要在请求头中添加参数 ,格式为： <code>&#123;&#39;Authorization&#39; : &#39;JWT&#39; + &#39; &#39; + token&#125;</code></p>
</blockquote>
<p>服务端认证token时，有多种方式可以实现 <code>token</code>的认证：</p>
<ul>
<li>  直接调用<code>rest_framework_jwt</code>内置的 <code>JSONWebTokenAuthentication</code> 认证类即可</li>
<li>  继承 <code>rest_framework.authentication.BaseAuthentication</code> 或 <code>rest_framework_jwt.authentication.BaseJSONWebTokenAuthentication</code>, 然后重写认证类，最后用户对象即可</li>
</ul>
<h4 id="全局认证"><a href="#全局认证" class="headerlink" title="全局认证"></a>全局认证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 指定drf认证机制</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,  <span class="comment"># JWT认证</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,  # session认证</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;,  # 基本认证</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部认证"><a href="#局部认证" class="headerlink" title="局部认证"></a>局部认证</h4><p>可以在具体的视图中通过<code>authentication_classes</code>属性来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人信息    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication]  <span class="comment"># 指明认证类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user = request.user  <span class="comment"># 只要认证成功，请求对象中就会存在 user对象</span></span><br><span class="line">        ser = UserInfoSerializer(user)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure>

<h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>上面的视图，仍然存在一个问题：客户端发送jwt，服务器可以正常解析出登录用户；但是，如果没有发送jwt，再通过<code>request.user</code>获取用户对象，就会出错。因此，需要对该功能进行权限验证，只有登录用户才可以访问，否则，就拒绝访问</p>
<p>总而言之，权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p>
<p>在执行视图的<code>dispatch()</code>方法前，会先进行视图访问权限的判断<br>在通过<code>get_object()</code>获取具体对象时，会进行对象访问权限的判断</p>
<p>权限分为四类：</p>
<ul>
<li><code>AllowAny</code>: 允许所有用户， 默认权限</li>
<li><code>IsAuthenticated</code>: 仅通过认证的用户</li>
<li><code>IsAdminUser</code>: 仅管理员用户</li>
<li><code>IsAuthenticatedOrReadOnly</code>: 认证的用户可以完全操作，否则只能<code>get</code>读取</li>
</ul>
<h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>可以在项目的配置文件<code>settings.py</code>中设置默认的权限管理类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未指明，则采用如下默认配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h4><p>可以在具体的视图中通过<code>permission_classes</code>属性来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 个人信息    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoAPIView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication] <span class="comment"># 指明认证类</span></span><br><span class="line">    permission_classes = [IsAuthenticated]  <span class="comment"># 指明只有认证用户可以访问</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user = request.user  <span class="comment"># 只要认证成功，且权限校验通过，请求对象中就一定会存在 user对象</span></span><br><span class="line">        ser = UserInfoSerializer(user)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建允许管理员查询所有用户的视图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">GenericAPIView, ListModelMixin</span>):</span></span><br><span class="line">  	<span class="string">&quot;&quot;&quot;查询所有注册用户&quot;&quot;&quot;</span></span><br><span class="line">    queryset = UserModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication] <span class="comment"># 指明认证类</span></span><br><span class="line">    permission_classes = [IsAdminUser]  <span class="comment"># 指定权限验证,限制管理员才可以查询所有用户</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwrags</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwrags)</span><br></pre></td></tr></table></figure>

<h3 id="限流Throttling"><a href="#限流Throttling" class="headerlink" title="限流Throttling"></a>限流Throttling</h3><p>上面的视图可以正常访问用户的个人信息，但是需要对接口访问的频次进行限制，以减轻服务器压力。特别是限制爬虫的抓取。</p>
<h4 id="针对用户进行限制"><a href="#针对用户进行限制" class="headerlink" title="针对用户进行限制"></a>针对用户进行限制</h4><blockquote>
<p>  可以在配置文件中，使用<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>进行全局配置</p>
</blockquote>
<h5 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="comment"># 限制所有匿名未认证用户，使用IP区分用户</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="comment"># 限制认证用户，使用User id 来区分</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 可以使用 second, minute, hour 或day来指明周期</span></span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/minute&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;5/minute&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="局部配置-1"><a href="#局部配置-1" class="headerlink" title="局部配置"></a>局部配置</h5><p>视图中使用<code>throttle_classes</code>属性设置限流用户类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle, AnonRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> UserSerializer, User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">GenericAPIView, ListModelMixin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询所有注册用户&quot;&quot;&quot;</span></span><br><span class="line">    queryset = UserModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication]</span><br><span class="line">    permission_classes = [IsAdminUser]</span><br><span class="line">    throttle_classes = (UserRateThrottle, AnonRateThrottle)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>在项目配置文件中针对用户类型设置具体频率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 可以使用 second, minute, hour 或day来指明周期</span></span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;3/minute&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;5/minute&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="针对视图限制"><a href="#针对视图限制" class="headerlink" title="针对视图限制"></a>针对视图限制</h4><p>视图中使用<code>throttle_scope</code>属性设置具体配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> UserSerializer, User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">GenericAPIView, ListModelMixin</span>):</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    throttle_scope = <span class="string">&#x27;downloads&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>在项目配置文件中设置具体频率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">    <span class="comment"># 限制用户对于每个视图的访问频次，使用ip或user id</span></span><br><span class="line">    <span class="string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>,</span><br><span class="line">),</span><br><span class="line"><span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;downloads&#x27;</span>: <span class="string">&#x27;3/minute&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="以-Vue-作为前端"><a href="#以-Vue-作为前端" class="headerlink" title="以 Vue 作为前端"></a>以 Vue 作为前端</h2><h3 id="路由前置守卫"><a href="#路由前置守卫" class="headerlink" title="路由前置守卫"></a>路由前置守卫</h3><blockquote>
<p><code>router/index.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">&#x27;@/components/Users&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/Users&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Users&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Users</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (to.path == <span class="string">&#x27;/login&#x27;</span> || to.path == <span class="string">&#x27;/register&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//&#x27;login&#x27;和&#x27;register&#x27;相当于是路由白名单</span></span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;preRoute&quot;</span>, router.currentRoute.fullPath);</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果token存在，就正常跳转，如果不存在，则说明未登陆，则跳转到&#x27;login&#x27;</span></span><br><span class="line">    isLogin ? next() : next(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><blockquote>
<p><code>main.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前, 添加 token 到请求头</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">localStorage</span>.token) &#123;</span><br><span class="line">    config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;JWT &#x27;</span> + <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    config.headers[<span class="string">&#x27;Accept&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的 axios 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断一下响应中是否有 token，如果有就直接使用此 token 替换掉本地的 token。你可以根据你的业务需求自己编写更新 token 的逻辑</span></span><br><span class="line">  <span class="keyword">var</span> token = response.data.token;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">        <span class="comment">// 这里写清除token的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;401&quot;</span>)</span><br><span class="line">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">        <span class="comment">/* 普通401拦截直接返回到登录页面 */</span></span><br><span class="line">        router.push(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure>

<h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.username&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;login&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">userInfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$axios</span></span><br><span class="line"><span class="javascript">        .post(<span class="string">&quot;users/login/&quot;</span>, <span class="built_in">this</span>.userInfo)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> curr = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;preRoute&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (curr == <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">&quot;/user_center&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>: curr&#125;);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="built_in">decodeURIComponent</span>(url)&#125;);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用户个人中心"><a href="#用户个人中心" class="headerlink" title="用户个人中心"></a>用户个人中心</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; user.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; user.phone &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">user</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$axios.get(<span class="string">&#x27;/userinfo/&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(resp.data)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.user = resp.data</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.getData();</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PYTHON</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>多种方式实现并发 Web Server</title>
    <url>/2020/08/16/8EYyM3zPT/</url>
    <content><![CDATA[<p>下面我们使用 <code>Python</code> 来实现并发的 <code>Web Server</code>，其中采用了多进程、多线程、协程、单进程单线程非阻塞、<code>select</code>、<code>epoll</code>的方式。</p>
<span id="more"></span>

<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment">#  注意： 不同的实现方式，但是对请求的处理方式相同，只是主函数中对客户端请求的接收方式不同 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收请求</span></span><br><span class="line">        recv_msg = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> recv_msg == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;recv null&quot;</span>)</span><br><span class="line">            new_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从请求中解析出URI</span></span><br><span class="line">        recv_lines = recv_msg.splitlines()</span><br><span class="line">        <span class="built_in">print</span>(recv_lines)</span><br><span class="line">        <span class="comment"># 使用正则表达式提取出URI</span></span><br><span class="line">        ret = re.match(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="comment"># 获取URI字符串</span></span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 如果URI是/，则默认返回index.html的内容</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 根据请求的URI，读取相应的文件</span></span><br><span class="line">            fp = <span class="built_in">open</span>(<span class="string">&quot;.&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 找不到文件，响应404</span></span><br><span class="line">            response_msg = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">            response_msg += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">            response_msg += <span class="string">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span></span><br><span class="line">            new_socket.send(response_msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            html_content = fp.read()</span><br><span class="line">            fp.close()</span><br><span class="line">            response_body = html_content</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应正确 200 OK</span></span><br><span class="line">            response_header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            response_header += <span class="string">&quot;Content-Length:%d\r\n&quot;</span> % <span class="built_in">len</span>(response_body)</span><br><span class="line">            response_header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            response = response_header.encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回响应数据</span></span><br><span class="line">            new_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># # 设置重用地址</span></span><br><span class="line">    <span class="comment"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span></span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 启动一个子进程来处理客户端的请求</span></span><br><span class="line">        sub_p = multiprocessing.Process(target=handle_request, args=(new_socket,))</span><br><span class="line">        sub_p.start()</span><br><span class="line">        <span class="comment"># 这里要关闭父进程中的new_socket，因为创建子进程会复制一份new_socket给子进程</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>我们使用进程来实现并发的 Web Server，也就是将 <code>accept</code> 到 <code>new_socket</code> 传递给子进程去处理，处理函数还是 <code>handle_request</code>。</p>
<p>但是这里注意，子进程会从父进程中将所有的变量<strong>进行拷贝</strong>，也就是说父进程和子进程中<strong>各有一份 new_socket</strong>，而在 <code>Linux</code> 下，<code>socket</code> 对应的也是一个文件描述符，而这两个 <code>new_socket</code> 实际上是指向同一个 <code>fd</code> 的。所以我们将 <code>new_socket</code> 交给子进程后，父进程就可以马上关闭自己的 <code>new_socket</code> 了，当子进程服务完毕后，关闭子进程中的 <code>new_socket</code>，这样<strong>对应的 <code>FD</code> 才会正真关闭，此时才会触发四次挥手。所以父进程代码中的 <code>new_socket.close()</code> 非常重要。</strong></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在第一节中，我们使用进程来实现并发，但是进程对资源消耗很大，一般不推荐使用。所以这里我们使用线程来实现并发，很简单，我们将 <code>multiprocessing.Process</code> 替换为 <code>threaing.Thread</code> 就可以了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> web_server <span class="keyword">import</span> handle_request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置重用地址</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        t = threading.Thread(target=handle_request, args=(new_socket,))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>我们发现，除了将子进程的创建过程替换成了线程的创建过程，后面的 <code>new_socket.close(</code>) 也被删除了，这是因为线程是公用进程资源的，<code>new_socket</code> 不会被复制，所以 <code>socket</code> 对应的 FD，只有一个 new_socket 指向他。</p>
<p>如果此时我们仍然在这里关闭 <code>new_socket</code>，那么在线程再使用 <code>new_socket</code> 就会报错。如下信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread Thread-<span class="number">1</span>:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class="number">926</span>, <span class="keyword">in</span> _bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File <span class="string">&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py&quot;</span>, line <span class="number">870</span>, <span class="keyword">in</span> run</span><br><span class="line">    self._target(*self._args, **self._kwargs)</span><br><span class="line">  File <span class="string">&quot;/Users/mac/PycharmProjects/Month2/web_server.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> handle_request</span><br><span class="line">    recv_msg = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">OSError: [Errno <span class="number">9</span>] Bad file descriptor</span><br></pre></td></tr></table></figure>

<h2 id="协程并发"><a href="#协程并发" class="headerlink" title="协程并发"></a>协程并发</h2><p>使用进程和线程来实现的并发 Web Server，当并发访问量很大时，资源消耗都很高。所以这里使用协程来实现并发服务器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="keyword">from</span> web_server <span class="keyword">import</span> handle_request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># # 设置重用地址</span></span><br><span class="line">    <span class="comment"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span></span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 启动一个协程来处理客户端的请求</span></span><br><span class="line">        gevent.spawn(handle_request, new_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>使用 gevent 来实现协程，并发处理请求。</p>
<h2 id="单线程非阻塞"><a href="#单线程非阻塞" class="headerlink" title="单线程非阻塞"></a>单线程非阻塞</h2><p>前面我们使用的多进程和多线程来处理并发，是因为 <code>socket.recv()</code> 是阻塞的，每次 <code>accept</code> 一个连接，就需要交给一个新的进程或线程去处理，从而不影响下一个 <code>socket</code> 连接。</p>
<p>但是我们可以通过单进程单线程和非阻塞的方式来完成并发 <code>socket</code> 的处理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">new_socket, recv_msg</span>):</span></span><br><span class="line">    <span class="comment"># 从请求中解析出URI</span></span><br><span class="line">    recv_lines = recv_msg.splitlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用正则表达式提取出URI</span></span><br><span class="line">    ret = re.match(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, recv_lines[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="comment"># 获取URI字符串</span></span><br><span class="line">        file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 如果URI是/，则默认返回index.html的内容</span></span><br><span class="line">        <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 根据请求的URI，读取相应的文件</span></span><br><span class="line">        fp = <span class="built_in">open</span>(<span class="string">&quot;.&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 找不到文件，响应404</span></span><br><span class="line">        response_msg = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">        response_msg += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        response_msg += <span class="string">&quot;&lt;h1&gt;----file not found----&lt;/h1&gt;&quot;</span></span><br><span class="line">        new_socket.send(response_msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = fp.read()</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line">        response_body = html_content</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应正确 200 OK</span></span><br><span class="line">        response_header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">        response_header += <span class="string">&quot;Content-Length:%d\r\n&quot;</span> % <span class="built_in">len</span>(response_body)</span><br><span class="line">        response_header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">        response = response_header.encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回响应数据</span></span><br><span class="line">        new_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建TCP SOCKET实例</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置重用地址</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 绑定地址（默认本机IP）和端口</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="comment"># 监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将accept设置为非阻塞,这里设置一次，后面不管调多少次accept都是非阻塞的</span></span><br><span class="line">    tcp_server_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 定义一个列表，将每次连接的socket加入该列表</span></span><br><span class="line">    client_socket_list = <span class="built_in">list</span>()</span><br><span class="line">    fd_to_addr = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            <span class="comment"># 当没有客户端链接的时候，抛出异常</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class="built_in">format</span>(client_addr))</span><br><span class="line">            <span class="comment"># 当有客户端链接的时候</span></span><br><span class="line">            <span class="comment"># 将new_socket.recv()设置为非阻塞的</span></span><br><span class="line">            new_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 将new_socket加入列表</span></span><br><span class="line">            client_socket_list.append(new_socket)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将 conn 和 addr 信息分别保存起来</span></span><br><span class="line">            fd_to_addr[new_socket.fileno()] = client_addr</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历socket列表，检查每一个socket是否有数据到达，或者客户端是否断开</span></span><br><span class="line">        <span class="keyword">for</span> client_socket <span class="keyword">in</span> client_socket_list:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                recv_content = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">                <span class="comment"># 异常，表示该客户端没有发数据过来</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 正常，表示客户端发了数据，或者客户端断开连接（断开连接会导致recv正常返回）</span></span><br><span class="line">                <span class="keyword">if</span> recv_content:</span><br><span class="line">                    <span class="comment"># 有数据，调用请求处理代码</span></span><br><span class="line">                    handle_request(client_socket, recv_content)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;客户端&#123;&#125;OffLine。。。。&quot;</span>.<span class="built_in">format</span>(fd_to_addr[client_socket.fileno()]))</span><br><span class="line">                    <span class="comment"># recv正常返回，且数据为空，表示客户端断开了链接</span></span><br><span class="line">                    <span class="comment"># 将该socket踢出列表</span></span><br><span class="line">                    client_socket_list.remove(client_socket)</span><br><span class="line">                    <span class="comment"># 服务器也关闭连接</span></span><br><span class="line">                    client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭整个SOCKET</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码主要是说明在单进程单线程情况下，如何将 <code>accept</code> 和 <code>recv</code> 分开，并且都用非阻塞的方式来处理，这样每次查看是否有客户端链接进来的时候，都会去检查所有已链接的 <code>socket</code> 是否有数据发送过来。</p>
<p>在这种方式中，我们使用单进程单线程模拟了并发处理 <code>socket</code> 连接的功能，但这些 <code>socket</code> 连接的处理不是并行的。当一个 <code>socket</code> 处理数据时间比较长时，也会<strong>造成整个程序的等待。</strong></p>
<p>特别注意的是，在请求处理函数 <code>handle_request</code> 中，我们将请求内容作为参数一并传递进去。然后在返回 <code>200 OK</code> 的时候，在响应头中添加了 <code>Content-Length</code> 字段，这个字段用于告诉客户端，此次发送的响应体有多大。当客户端收完指定大小的数据，就认为这次服务器发送的数据已经发送完毕。他就可以继续发送下一个新的请求。</p>
<p>在 <code>handle_request</code> 中可以看到，<code>new_socket.close()</code> 已经被删除，也就是说服务器不会自动关闭连接，而直到客户端断开连接之前，服务器都保持<code>长连接</code>。断开连接由客户端来发起。</p>
<h2 id="select高并发"><a href="#select高并发" class="headerlink" title="select高并发"></a>select高并发</h2><p>在编写了单进程非阻塞式服务器之后，还有另外种写服务器的方法，便是利用<code>select</code>。<br><code>select</code>是对底层操作系统的一个访问操作，因而效率较高，比单进程非阻塞中的<code>for</code>循环遍历效率要高，可以利用<code>select</code>进行选择，选择出来可以读取信息的套接字、可以发送信息的套接字、以及产生的异常（分别是三个返回值）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">readable, writable, exceptionable = select([], [], [])</span><br></pre></td></tr></table></figure>

<p>以上即为<code>select</code>的使用方法，程序执行到该语句后进行阻塞等待，接收到新的套接字之后便解阻塞。<br>程序思路便是利用<code>select</code>检测、选择出能读取的套接字（包括服务器套接字、客户端套接字），将接收到消息的客户端套接字存入列表（列表中本来只有服务器套接字），之后进行<code>for</code>循环遍历，读取套接字中的信息或者进行与客户端的连接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> select <span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">from</span> web_server <span class="keyword">import</span> handle_request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置可以重复使用绑定的信息</span></span><br><span class="line">    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定本机信息</span></span><br><span class="line">    server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主动监听</span></span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将accept设置为非阻塞</span></span><br><span class="line">    server_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    inputs = [server_socket]</span><br><span class="line">    fd_to_addr = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        readable, writable, exceptionable = select(inputs, [], [])</span><br><span class="line">        <span class="keyword">for</span> sock <span class="keyword">in</span> readable:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> sock == server_socket:</span><br><span class="line">                clientSocket, clientAddr = server_socket.accept()</span><br><span class="line">                <span class="comment"># 当有客户端链接的时候</span></span><br><span class="line">                <span class="comment"># 将new_socket.recv()设置为非阻塞的</span></span><br><span class="line">                clientSocket.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">                inputs.append(clientSocket)</span><br><span class="line">                <span class="comment"># 将 addr 信息保存起来</span></span><br><span class="line">                fd_to_addr[clientSocket.fileno()] = clientAddr</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;客户端&#123;&#125; OnLine。。。。&quot;</span>.<span class="built_in">format</span>(clientAddr))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                message = sock.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> message:</span><br><span class="line">                    <span class="comment"># print(&#x27;message from [%s] is %s&#x27; % (str(sock), message.decode(&#x27;utf-8&#x27;)))</span></span><br><span class="line">                    handle_request(sock, message.decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;[%s] OffLine。。。。&#x27;</span> % (fd_to_addr[sock.fileno()]))</span><br><span class="line">                    inputs.remove(sock)</span><br><span class="line">                    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>select</code>版服务器有一定的缺点，便是只能处理1024个并发客户端，因而其效率还是有一定的局限性。</p>
<h2 id="epoll高并发"><a href="#epoll高并发" class="headerlink" title="epoll高并发"></a>epoll高并发</h2><p>我们在最后使用单进程+单线程+非阻塞+长连接实现了一个可并发处理客户端连接的服务器。他的原理可以用以下的图来描述：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/P4p4aJ.png" alt="P4p4aJ"></p>
<p><strong>解释：</strong></p>
<ol>
<li><p>HTTP服务器是我们使用 单进程+单线程+非阻塞+长连接实现 的<code>web</code>服务器。</p>
</li>
<li><p>在实现的时候，我们创建了一个存放已接受<code>Socket</code>连接的列表，该列表是在应用程序的内存空间中的。如图中深蓝色部分</p>
</li>
<li><p>当有3个客户端接入的时候，列表中一共存在3个对应的<code>socket</code>句柄，分别对应三个小黄框。</p>
</li>
<li><p>灰色小框代表服务器接收请求的<code>socket</code>。</p>
</li>
<li><p>我们在进行无限循环的时候，首先是检查是否有新的客户端接入，相当于检查灰色小框是否有数据到达。然后轮询3个小黄框对应<code>socket</code>是否有数据到达。轮询的效率是很低的。</p>
</li>
<li><p>服务器在使用<code>accept</code>和<code>recv</code>时，实际上是委托操作系统帮他检查是否有数据到达，由于这个列表的<code>socket</code>都处于用户内存空间，所以需要将其复制到内核空间。操作系统检查完毕后，如果有数据就返回数据给应用程序，如果没有数据就以异常的方式通知应用程序。而且不光这样，操作系统可能还同时在运行其他的应用程序，这样效率会非常低。</p>
</li>
</ol>
<p><strong>我们再来看epoll的图：</strong></p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/08/5TcU6B.png" alt="5TcU6B"></p>
<p><strong>解释：</strong></p>
<p>1.我们可以看到，在结构上，最大的区别在于，存放<code>socket</code>的列表不处于应用程序内部。在<code>epoll</code>中，这个存放<code>socket</code>的列表处于一个<strong>特殊的内存空间，这个内存空间是应用程序与内核共享的空间</strong>。也就是说，当应用程序委托操作系统检查是否有数据到达时，无需将复制数据给内核空间，操作系统可以直接进行检查。</p>
<p>2.操作系统检查到某个<code>socket</code>有数据到达，使用<strong>事件通知</strong>的形式，直接告诉应用程序，而不是以轮询的方式。打个比方，一个厨师挨个问50个人饿了没，如果饿了就给他东西吃，这是轮询。而50个人中，谁饿了谁举手，厨师就给吃的，这叫事件通知。很明显，事件通知的效率会特别高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">from</span> web_server <span class="keyword">import</span> handle_request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置可以重复使用绑定的信息</span></span><br><span class="line">    server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绑定本机信息</span></span><br><span class="line">    server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主动监听</span></span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 将accept设置为非阻塞</span></span><br><span class="line">    server_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 创建epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册事件到epoll中</span></span><br><span class="line">    <span class="comment"># epoll.register(fd[, eventmask])</span></span><br><span class="line">    <span class="comment"># 注意，如果fd已经注册过，则会发生异常</span></span><br><span class="line">    <span class="comment"># 将创建的套接字添加到epoll的事件监听中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册tcp套接字</span></span><br><span class="line">    epoll.register(server_socket.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;因为epoll返回的触发事件对应的是套接字文件描述符，所以需要在字典中加入对应关系&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个字典，用于存放fd和套接字的对应关系，因为操作系统在事件通知的时候，使用的是fd，而不是套接字，我们需要使用fd来找到对应</span></span><br><span class="line">    <span class="comment"># 的套接字，从而可以调用accept和recv</span></span><br><span class="line">    fd_to_socket = &#123;&#125;</span><br><span class="line">    fd_to_addr = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环接收客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 使用一个列表来接受操作系统的事件通知，poll()是阻塞的，当有数据到达时，poll才会解开阻塞</span></span><br><span class="line">        epoll_list = epoll.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> epoll_list:</span><br><span class="line">            <span class="comment"># 首先判断事件通知中的fd是否对应监听套接字（监听套接字调用accept）</span></span><br><span class="line">            <span class="keyword">if</span> fd == server_socket.fileno():</span><br><span class="line"></span><br><span class="line">                conn, addr = server_socket.accept()</span><br><span class="line">                <span class="comment"># 监听到一个新的客户端连接，将conn也注册到epoll中</span></span><br><span class="line">                epoll.register(conn.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;有新的客户端到来%s&#x27;</span> % <span class="built_in">str</span>(addr))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将 conn 和 addr 信息分别保存起来</span></span><br><span class="line">                fd_to_socket[conn.fileno()] = conn</span><br><span class="line">                fd_to_addr[conn.fileno()] = addr</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 如果不是监听套接字，那么都是客户端对应的套接字</span></span><br><span class="line">                <span class="comment"># 接收数据</span></span><br><span class="line">                recvData = fd_to_socket[fd].recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> recvData:</span><br><span class="line">                    handle_request(fd_to_socket[fd], recvData)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果没有数据，则表示客户端断开连接</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 从 epoll 中移除该 连接 fd</span></span><br><span class="line">                    epoll.unregister(fd)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">#  关闭fd对应的socket</span></span><br><span class="line">                    fd_to_socket[fd].close()</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;%s---offline---&quot;</span> % <span class="built_in">str</span>(fd_to_addr[fd]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制工具Git</title>
    <url>/2021/06/12/BFXx59yyC/</url>
    <content><![CDATA[<p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，可以说是开发人员必备技能。</p>
<span id="more"></span>

<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul>
<li><p>windows：到git官网上下载, <a href="https://gitforwindows.org/">Download</a> git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
</li>
<li><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>  安装好后，用<code>git --version</code> 来查看一下版本</p>
</li>
</ul>
<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/Git%E6%93%8D%E4%BD%9C%20.jpg" alt="Git操作"></p>
<h1 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p><code>git init</code> 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。</p>
<p>运行 <code>git init</code> 命令会在你项目的根目录下创建一个新的 <code>.git</code> 目录，其中包含了你项目必需的所有元数据。除了 <code>.git</code> 目录之外，已经存在的项目不会被改变（Git 不强制每个子目录中都有一个 <code>.git</code> 目录）。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 <code>.git</code> 目录，于是就可以开始记录项目版本了。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 <code>directory</code>，只包含 <code>.git</code> 子目录的空目录。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git init --bare &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>初始化一个<strong>裸</strong>的 Git 仓库，但是忽略工作目录。共享的<strong>中心仓库</strong>应该总是用 <code>--bare</code> 标记创建。</p>
<p>一般来说，用 <code>—-bare</code> 标记初始化的仓库以 <code>.git</code> 结尾。比如，一个叫<code>repo</code>的仓库，它的空版本应该保存在 <code>repo.git</code> 目录下（这也是为什么我们从 GitHub clone 仓库的时候，地址都是 xxx.git 这样的形式的原因）。</p>
<p>并且这个仓库是可以被正常 <code>clone</code> 和 <code>push</code> 更新的， <strong>裸仓库</strong>不包含工作区，所以并不会存在在裸仓库上直接提交变更的情况。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/center_stroe.svg" alt="center_stroe"></p>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><code>git clone</code> 命令拷贝整个 Git 仓库。这个命令在本地创建一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。</p>
<p>为了方便起见，<code>clone</code> 自动创建了一个名为 <code>origin</code> 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure>

<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器上的 <code>&lt;directory&gt;</code> 目录。</p>
<h2 id="保存更改"><a href="#保存更改" class="headerlink" title="保存更改"></a>保存更改</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code> 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，<code>git add</code> 不会实质上地影响你的仓库——在你运行 <code>git commit</code> 前更改都还没有真正被记录。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;file&gt;</code> 中的更改加入下次提交的缓存。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git add &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;directory&gt;</code> 下的更改加入下次提交的缓存。</p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit</code>命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 <code>git add</code> 一样，这是最重要的 Git 命令之一。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p>提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;&lt;message&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>提交已经缓存的快照。但将 <code>&lt;message&gt;</code> 作为提交信息，而不是运行文本编辑器。</p>
<h2 id="查看查看状态"><a href="#查看查看状态" class="headerlink" title="查看查看状态"></a>查看查看状态</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p><code>git status</code> 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 <em>不会</em> 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 <code>git log</code> 命令。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><code>git status</code> 是一个相对简单的命令。 它告诉你 <code>git add</code> 和 <code>git commit</code> 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。</p>
<h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 <code>.pyc</code>、<code>.obj</code>、<code>.exe</code> 等编译后的二进制文件。显然前者应该出现在 <code>git status</code> 的输出中，而后者会让我们困惑究竟发生了什么。</p>
<p>因此，Git 允许完全忽略这些文件，只需要将路径放在一个特定的 <code>.gitignore</code> 文件中。所有想要忽略的文件应该分别写在单独一行，<code>*</code> 字符用作通配符。比如，将下面这行加入项目根目录的<code>.gitignore</code>文件可以避免编译后的Python模块出现在<code>git status</code>中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.pyc</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p><code>git log</code> 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。<code>git status</code> 允许你查看工作目录和缓存区，而 <code>git log</code> 只作用于提交的项目历史。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/2021_3_28.svg" alt="2021_3_28"></p>
<p>log 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 <code>git log</code> 配置如下所示。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 <code>空格键</code> 来滚动，按 <code>q</code> 退出。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -n &lt;<span class="built_in">limit</span>&gt;</span><br></pre></td></tr></table></figure>

<p>用 <code>&lt;limit&gt;</code> 限制提交的数量。比如 <code>git log -n 3</code> 只会显示 3 个提交。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>

<p>将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>

<p>除了 <code>git log</code> 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure>

<p>显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。</p>
<h2 id="回滚错误提交"><a href="#回滚错误提交" class="headerlink" title="回滚错误提交"></a>回滚错误提交</h2><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p><code>git revert</code> 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 <em>新</em> 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>生成一个撤消了 <code>&lt;commit&gt;</code> 引入的修改的新提交，然后应用到当前分支。</p>
<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>如果说 <code>git revert</code> 是一个撤销更改安全的方式，你可以将 <code>git reset</code> 看做一个 <em>危险</em> 的方式。当你用 <code>git reset</code> 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。</p>
<p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure>

<p>重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 <em>所有</em> 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<p>重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，<code>--hard</code> 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区重设到这个提交，但不改变工作目录。所有 <code>&lt;commit&gt;</code> 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 <code>&lt;commit&gt;</code> 之后的所有提交。</p>
<h3 id="revert-VS-reset"><a href="#revert-VS-reset" class="headerlink" title="revert VS reset"></a>revert VS reset</h3><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/reset.svg" alt="reset"></p>
<p>撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。</p>
<p>其次，<code>git revert</code> 可以针对历史中任何一个提交，而 <code>git reset</code>只能从当前提交向前回溯。比如，你想用 <code>git reset</code> 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。</p>
<h3 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h3><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 <code>git status</code> 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 <code>rm</code> 命令一样，<code>git clean</code> 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。</p>
<p><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure>

<p>执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git clean -f</span><br></pre></td></tr></table></figure>

<p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>移除未跟踪的文件，但限制在某个路径下。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git clean -df</span><br></pre></td></tr></table></figure>

<p>移除未跟踪的文件，以及目录。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git clean -xf</span><br></pre></td></tr></table></figure>

<p>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。</p>
<h2 id="代码同步"><a href="#代码同步" class="headerlink" title="代码同步"></a>代码同步</h2><p>Git 给予每个开发者一份自己的仓库拷贝，拥有自己完整的本地历史和分支结构。用户通常共享一系列的提交而不是单个变更集合。Git 允许你在仓库间共享整个分支，而不是从工作副本提交一个差异集合到中央仓库。</p>
<p>下面的命令让你管理仓库之间的连接，将分支「推送」到其他仓库来发布本地历史，或是将分支「拉取」到本地仓库来查看其它开发者的贡献。</p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p><code>git remote</code> 命令允许你创建、查看和删除和其它仓库之间的连接。远程连接更像是书签，而不是直接跳转到其他仓库的链接。它用方便记住的别名引用不那么方便记住的 URL，而不是提供其他仓库的实时连接。</p>
<p>例如，下图显示了你的仓库和中央仓库以及另一个开发者仓库之间的远程连接。你可以向 Git 命令传递 origin 和 john 的别名来引用这些仓库，替代完整的 URL。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/repo.svg" alt="repo"></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<p>列出你和其他仓库之间的远程连接。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>和上个命令相同，但同时显示每个连接的 URL。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p>创建一个新的远程仓库连接。在添加之后，你可以将 <code>&lt;name&gt;</code>作为 <code>&lt;url&gt;</code> 便捷的别名在其他 Git 命令中使用。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote rm &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>移除名为的远程仓库的连接。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure>

<p>将远程连接从 <code>&lt;old-name&gt;</code> 重命名为 <code>&lt;new-name&gt;</code>。</p>
<blockquote>
<p>  <strong>名为 origin 的远程连接</strong></p>
</blockquote>
<p>当你用 <code>git clone</code> 克隆仓库时，它自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。当开发者创建中央仓库的本地副本时非常有用，因为它提供了拉取上游更改和发布本地提交的快捷方式。这也是为什么大多数基于 Git 的项目将它们的中央仓库取名为 origin。</p>
<blockquote>
<p>  <strong>仓库的 URL</strong></p>
</blockquote>
<p>Git 支持多种方式来引用一个远程仓库。其中两种最简单的方式便是 HTTP 和 SSH 协议。HTTP 是允许匿名、只读访问仓库的简易方式。比如：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">http://host/path/to/repo.git</span><br></pre></td></tr></table></figure>

<p>但是，直接将提交推送到一个 HTTP 地址一般是不可行的（你不太可能希望匿名用户也能随意推送）。如果希望对仓库进行读写，你需要使用 SSH 协议：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">ssh://user@host/path/to/repo.git</span><br></pre></td></tr></table></figure>

<p>你需要在托管的服务器上有一个有效的 SSH 账户，但不用麻烦了，Git 支持开箱即用的 SSH 认证连接。</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p><code>git fetch</code> 命令将提交从远程仓库导入到你的本地仓库。拉取下来的提交储存为远程分支，而不是我们一直使用的普通的本地分支。你因此可以在整合进你的项目副本之前查看更改。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<p>拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>和上一个命令相同，但只拉取指定的分支。</p>
<p>当你希望查看其他人的工作进展时，你需要 fetch。fetch 下来的内容表示为一个远程分支，因此不会影响你的本地开发。这是一个安全的方式，在整合进你的本地仓库之前，检查那些提交。你可以看到中央仓库的历史进展如何，但它不会强制你将这些进展合并入你的仓库。</p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>在基于 Git 的协作工作流中，将上游更改合并到你的本地仓库是一个常见的工作。我们已经知道应该使用 <code>git fetch</code>，然后是 <code>git merge</code>，但是 <code>git pull</code> 将这两个命令合二为一。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<p>拉取当前分支对应的远程副本中的更改，并立即并入本地副本。效果和 <code>git fetch</code> 后接 <code>git merge origin/.</code> 一致。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<p>和上一个命令相同，但使用 <code>git rebase</code> 合并远程分支和本地分支，而不是使用 <code>git merge</code>。</p>
<p>下图揭示了 pull 过程中的每一步。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/gitpull.svg" alt="gitpull"></p>
<p>你认为你的仓库已经同步了，但 <code>git fetch</code> 发现 origin 中 <code>master</code> 的版本在上次检查后已经有了新进展。 接着 <code>git merge</code> 立即将 <code>remote master</code> 并入本地的分支。</p>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>Push 是你将本地仓库中的提交转移到远程仓库中时要做的事。它和 <code>git fetch</code> 正好相反，fetch 将提交导入到本地分支，而 push 将提交导出到远程分支。它可以覆盖已有的更改，所以你需要小心使用。这些情况请见下面的讨论。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>将指定的分支推送到 <code>&lt;remote&gt;</code> 上，包括所有需要的提交和提交对象。它会在目标仓库中创建一个本地分支。为了防止你覆盖已有的提交，如果会导致目标仓库非快速向前合并时，Git 不允许你 push。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; --force</span><br></pre></td></tr></table></figure>

<p>和上一个命令相同，但即使会导致非快速向前合并也强制推送。除非你确定你所做的事，否则不要使用 <code>--force</code> 标记。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; --all</span><br></pre></td></tr></table></figure>

<p>将所有本地分支推送到指定的远程仓库</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; --tags</span><br></pre></td></tr></table></figure>

<p>当你推送一个分支或是使用 <code>--all</code> 选项时，标签不会被自动推送上去。<code>--tags</code> 将你所有的本地标签推送到远程仓库中去。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/03/gitpush.svg" alt="gitpush"></p>
<p>上图显示了当你本地的 master 分支进展超过了中央仓库的 <code>master</code> 分支，当你运行 <code>git push origin master</code> 发布更改时发生的事情。注意，<code>git push</code> 和在远程仓库内部运行 <code>git merge master</code> 事实上是一样的。</p>
<h2 id="分支协同开发"><a href="#分支协同开发" class="headerlink" title="分支协同开发"></a>分支协同开发</h2><p>首先，简单讲解如何创建分支，就像请求一份新的项目历史一样。然后，我们会看到 git checkout 是如何切换分支的。最后，学习一下 git merge 是如何整合独立分支的历史。</p>
<p>我们已经知道，Git 分支和 SVN 分支不同。SVN 分支只被用来记录偶尔大规模的开发效果，而 Git 分支是你日常工作流中不可缺失的一部分。</p>
<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>分支代表了一条独立的开发流水线。分支是我们之前讨论过的「编辑/缓存/提交」流程的抽象。你可以把它看作请求全新「工作目录、缓存区、项目历史」的一种方式。新的提交被存放在当前分支的历史中，导致了项目历史被 fork 了一份。</p>
<p><code>git branch</code> 命令允许你创建、列出、重命名和删除分支。它不允许你切换分支或是将被 fork 的历史放回去。因此，<code>git branch</code> 和 <code>git checkout</code>、<code>git merge</code> 这两个命令通常紧密地结合在一起使用。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>列出仓库中所有分支。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>创建一个名为 <code>&lt;branch&gt;</code> 的分支。<em>不会</em> 自动切换到那个分支去。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>强制删除指定分支，即使包含未合并更改。如果你希望永远删除某条开发线的所有提交，你应该用这个命令。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>将当前分支命名为 <code>&lt;branch&gt;</code>。</p>
<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p><code>git checkout</code> 命令允许你切换用 <code>git branch</code> 创建的分支。查看一个分支会更新工作目录中的文件，以符合分支中的版本，它还告诉 Git 记录那个分支上的新提交。将它看作一个选中你正在进行的开发的一种方式。</p>
<p>在上一篇中，我们看到了如何用 <code>git checkout</code> 来查看旧的提交。「查看分支」和「将工作目录更新到选中的版本/修改」很类似；但是，新的更改 <em>会</em> 保存在项目历史中——这不是一个只读的操作。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;existing-branch&gt;</span><br></pre></td></tr></table></figure>

<p>查看特定分支，分支应该已经通过 <code>git branch</code> 创建。这使得 <code>&lt;existing-branch&gt;</code> 成为当前的分支，并更新工作目录的版本。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>

<p>创建并查看 <code>&lt;new-branch&gt;</code>，<code>-b</code> 选项是一个方便的标记，告诉Git在运行 <code>git checkout &lt;new-branch&gt;</code> 之前运行 <code>git branch &lt;new-branch&gt;</code>。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;new-branch&gt; &lt;existing-branch&gt;</span><br></pre></td></tr></table></figure>

<p>和上一条相同，但将 <code>&lt;existing-branch&gt;</code> 作为新分支的基，而不是当前分支。</p>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>合并是 Git 将被 fork 的历史放回到一起的方式。<code>git merge</code> 命令允许你将 <code>git branch</code> 创建的多条分支合并成一个。</p>
<p>注意，下面所有命令将更改 <em>并入</em> 当前分支。当前分支会被更新，以响应合并操作，但目标分支完全不受影响。也就是说 <code>git merge</code> 经常和 <code>git checkout</code> 一起使用，选择当前分支，然后用 <code>git branch -d</code> 删除废弃的目标分支。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>将指定分支并入当前分支。Git 会决定使用哪种合并算法（下文讨论）。</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git merge --no-ff &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p>将指定分支并入当前分支，但 <em>总是</em> 生成一个合并提交（即使是快速向前合并）。这可以用来记录仓库中发生的所有合并。</p>
<h4 id="合并算法"><a href="#合并算法" class="headerlink" title="合并算法"></a>合并算法</h4><p>一旦你在单独的分支上完成了功能的开发，重要的是将它放回主代码库。取决于你的仓库结构，Git 有几种不同的算法来完成合并：<strong>快速向前合并</strong>或者<strong>三路合并</strong>。</p>
<p>当当前分支顶端到目标分支路径是线性之时，我们可以采取 <strong>快速向前合并</strong> 。Git 只需要将当前分支顶端（快速向前地）移动到目标分支顶端，即可整合两个分支的历史，而不需要“真正”合并分支。它在效果上合并了历史，因为目标分支上的提交现在在当前分支可以访问到。比如，<code>some-feature</code> 到 <code>master</code> 分支的快速向前合并会是这样的：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/10/b31cec404eb42609abe8712064672714.svg" alt="b31cec404eb42609abe8712064672714"></p>
<p>但是，如果分支已经分叉了，那么就无法进行快速向前合并。当和目标分支之间的路径不是线性之时，Git 只能执行 <strong>三路合并</strong> 。三路合并使用一个专门的提交来合并两个分支的历史。这个术语取自这样一个事实，Git 使用 <em>三个</em> 提交来生成合并提交：两个分支顶端和它们共同的祖先。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2021/10/4b3d10b071e295b02fcb95215ebd5954.svg" alt="4b3d10b071e295b02fcb95215ebd5954"></p>
<p>但你可以选择使用哪一种合并策略时，很多开发者喜欢使用快速向前合并（搭配 rebase 使用）来合并微小的功能或者修复 bug，使用三路合并来整合长期运行的功能。后者导致的合并提交作为两个分支的连接标志。</p>
<h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>如果你尝试合并的两个分支同一个文件的同一个部分，Git 将无法决定使用哪个版本。当这种情况发生时，它会停在合并提交，让你手动解决这些冲突。</p>
<p>Git 的合并流程令人称赞的一点是，它使用我们熟悉的「编辑/缓存/提交」工作流来解决冲突。当你遇到合并冲突时，运行 <code>git status</code> 命令来查看哪些文件存在需要解决的冲突。比如，如果两个分支都修改了 <code>hello.py</code> 的同一处，你会看到下面的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Unmerged paths:</span></span><br><span class="line"><span class="comment"># (use &quot;git add/rm ...&quot; as appropriate to mark resolution)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># both modified: hello.py</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>接下来，你可以自己修复这个合并。当你准备结束合并时，你只需对冲突的文件运行 <code>git add</code> 告诉 Git 冲突已解决。然后，运行 <code>git commit</code> 生成一个合并提交。这和提交一个普通的快照有着完全相同的流程，也就是说，开发者能够轻而易举地管理他们的合并。</p>
<p>注意，提交冲突只会出现在三路合并中。在快速向前合并中，我们不可能出现冲突的更改。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-用户认证</title>
    <url>/2020/03/10/PMVipp31T/</url>
    <content><![CDATA[<p>django中的用户认证一系列机制，帮助开发者可以更快速的上手。以下demo简单对django的用户认证做一个演示。</p>
<span id="more"></span>

<h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><ol>
<li><p>项目结构</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── users</span><br><span class="line">│    ├── __init__.py</span><br><span class="line">│    ├── admin.py</span><br><span class="line">│    ├── apps.py</span><br><span class="line">│    ├── migrations</span><br><span class="line">│    │   └── __init__.py</span><br><span class="line">│    ├── models.py</span><br><span class="line">│    ├── tests.py</span><br><span class="line">│    ├── urls.py</span><br><span class="line">│    └── views.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── django_demo</span><br><span class="line">│    ├── __init__.py</span><br><span class="line">│    ├── settings.py</span><br><span class="line">│    ├── urls.py</span><br><span class="line">│    └── wsgi.py</span><br><span class="line">└── templates</span><br><span class="line">    ├── base.html</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── login.html</span><br><span class="line">    ├── register.html</span><br><span class="line">    └── user.html</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>通过终端命令,创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django_admin startproject django_demo</span><br></pre></td></tr></table></figure>

<h3 id="生成应用"><a href="#生成应用" class="headerlink" title="生成应用"></a>生成应用</h3><p>通过终端命令,生成users应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时在项目文件夹之下执行命令</span></span><br><span class="line">python manage.py startapp users</span><br></pre></td></tr></table></figure>

<h3 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h3><p>在<code>settings.py</code>修改配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;users.apps.UsersConfig&#x27;</span> <span class="comment"># 注册users应用</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置模板路径</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&quot;templates&quot;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言设置和时区设置</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展User模型类"><a href="#拓展User模型类" class="headerlink" title="拓展User模型类"></a>拓展User模型类</h2><p>Django 用户认证系统提供了一个内置的 User 对象，用于记录用户的用户名，密码等个人信息。对于 Django 内置的 <code>User</code> 模型， 仅包含以下一些主要的属性：</p>
<ul>
<li>  username，即用户名</li>
<li>  password，密码</li>
<li>  email，邮箱</li>
<li>  first_name，名</li>
<li>  last_name，姓</li>
</ul>
<p>对于一些网站来说，用户可能还包含有昵称、头像、个性签名等等其它属性，因此仅仅使用 Django 内置的 User 模型是不够。好在 Django 用户系统遵循可拓展的设计原则，我们可以方便地拓展 User 模型。</p>
<blockquote>
<p>  继承 AbstractUser 拓展用户模型</p>
</blockquote>
<p>这是推荐做法。事实上，查看 <code>User</code> 模型的源码就知道，User 也是继承自 <code>AbstractUser</code> 抽象基类，而且仅仅就是继承了 <code>AbstractUser</code>，没有对 <code>AbstractUser</code> 做任何的拓展。</p>
<p>所以，如果我们继承 <code>AbstractUser</code>，将获得 <code>User</code> 的全部特性，而且还可以根据自己的需求进行拓展。</p>
<p>我们之前新建了一个 users 应用，通常我们把和数据库模型相关的代码写在 models.py 文件里。打开 <code>users/models.py</code> 文件，写上我们自定义的用户模型代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&quot;手机号&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>(<span class="params">AbstractUser.Meta</span>):</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_users&#x27;</span>  <span class="comment"># 指定表名</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户&#x27;</span>  <span class="comment"># 后台显示表名</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure>

<p>我们给自定义的用户模型新增了一个 phone（手机号）属性，用来记录用户的联系方式，设置 <code>unique=True</code> 的目的是让用户在注册时，一个手机号只能注册一次。根据你的需求可以自己进一步拓展，例如增加用户头像、个性签名等等，添加多少属性字段没有任何限制。</p>
<p>同时，我们继承了 <code>AbstractUser</code> 的内部类属性 <code>Meta</code> 。在这里继承 <code>Meta</code> 的原因是在你的项目中可能需要设置一些 <code>Meta</code> 类的属性值，不要忘记继承 <code>AbstractUser.Meta</code> 中已有的属性。</p>
<p>此外，<code>AbstractUser</code> 类又继承自 <code>AbstractBaseUser</code>，前者在后者的基础上拓展了一套用户权限（Permission）系统。因此如非特殊需要，尽量不要从 <code>AbstractBaseUser</code> 拓展，否则你需要做更多的额外工作。</p>
<p>为了让 Django 用户认证系统使用我们自定义的用户模型，必须在 <code>settings.py</code> 里通过 <code>AUTH_USER_MODEL</code> 指定自定义用户模型所在的位置，即需要如下设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置规则：AUTH_USER_MODEL = &#x27;应用名.模型类名&#x27;</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;users.User&#x27;</span></span><br></pre></td></tr></table></figure>

<p>设置好自定义用户模型后，生成数据库迁移文件，并且迁移数据库以生成各个应用必要的数据库表。即运行如下两条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>OK，现在 Django 用户系统使用的用户模型就是自定义的 <code>User</code> 模型了。</p>
<p><strong>注意：</strong>一定要在设置好 <code>AUTH_USER_MODEL = &#39;users.User&#39;</code> 后在第一次迁移数据库，即指定好自定义的用户模型后再执行数据库迁移命令。</p>
<h2 id="创建基础模板"><a href="#创建基础模板" class="headerlink" title="创建基础模板"></a>创建基础模板</h2><p>在项目根路径下,创建<code>templates</code>,在目录下创建<code>base.html</code>文件,以便后面复用</p>
<p>对于一个网站来说，比较好的用户体验是登录、注册和注销后跳转回用户之前访问的页面。否则用户在你的网站东跳转西跳转好不容易找到了想看的内容，结果他已登录给他跳转回了首页，这会使用户非常愤怒。接下来我们看看如何让登录、注册和注销后跳转回用户之前访问的页面。</p>
<p>其实现的原理是，在登录和注销的流程中，始终传递一个 <code>next</code> 参数记录用户之前访问页面的 URL。因此，我们需要做的就是在用户访问登录或者注销的页面时，在 URL 中传递一个 <code>next</code> 参数给视图函数，具体做法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block nav %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            Hello, <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span>&gt;</span>&#123;&#123; user.username &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span> .</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;users:logout&#x27; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;users:register&#x27; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;users:login&#x27; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block err %&#125;</span><br><span class="line">    &#123;% if account_msg %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;account_msg&#125;&#125;. Please try again.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，我们在注册、登录和注销的 URL 后加了 <code>next</code> 参数，其值为 <code>&#123;&#123; request.path &#125;&#125;</code>。<code>request.path</code> 是用户当前访问页面的 URL。在 URL 中传递参数的方法就是在要传递的参数前加一个 ？然后写上传递的参数名和参数值，用等号链接。关于在 URL 中传递参数具体请 HTTP 的相关协议。</p>
<p>为了在整个登录流程中记录 next 的值，还需要在表单中增加一个表单控件，用于传递 next 值。</p>
<h2 id="自定义认证后台"><a href="#自定义认证后台" class="headerlink" title="自定义认证后台"></a>自定义认证后台</h2><p>Django auth 应用默认支持用户名（username）进行登录。但是在实践中，网站可能还需要邮箱、手机号、身份证号等进行登录，这就需要我们自己写一个认证后台，用于验证用户输入的用户信息是否正确，从而对拥有正确凭据的用户进行登录认证。</p>
<p>Django 对用户登录的验证工作均在一个被称作认证后台（Authentication Backend）的类中进行。这个类是一个普通的 Python 类，它有一个 <code>authenticate</code> 方法，接收登录用户提供的凭据（如用户名或者邮箱以及密码）作为参数，并根据这些凭据判断用户是否合法（即是否是已注册用户，密码是否正确等）。</p>
<p>可以定义多个认证后台，Django 内部会逐一调用这些后台的 <code>authenticate</code> 方法来验证用户提供登录凭据的合法性，一旦通过某个后台的验证，表明用户提供的凭据合法，从而允许登录该用户。</p>
<h3 id="自定义Backend"><a href="#自定义Backend" class="headerlink" title="自定义Backend"></a>自定义Backend</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserModel</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailBackend</span>(<span class="params">ModelBackend</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;user验证&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request, username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = UserModel.objects.get(email=username)</span><br><span class="line">        <span class="keyword">except</span> UserModel.DoesNotExist:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验用户密码，且用户为激活用户</span></span><br><span class="line">        <span class="keyword">if</span> user.check_password(password) <span class="keyword">and</span> self.user_can_authenticate(user):</span><br><span class="line">            <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<h3 id="配置-Backend"><a href="#配置-Backend" class="headerlink" title="配置 Backend"></a>配置 Backend</h3><p>接下来就要告诉 Django，需要使用哪些 Backends 对用户的凭据信息进行验证，这需要在 <code>settings.py</code> 中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;users.backends.EmailBackend&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 Backend 是 Django 内置的 Backend，当用户提供的是用户名和正确的密码时该 Backend 会通过验证；第二个 Backend 是刚刚自定义的 Backend，当用户提供的是 Email 和正确的密码时该 Backend 会通过验证。</p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>用户注册就是创建用户对象，将用户的个人信息保存到数据库里。回顾一下 Django 的 MVT 经典开发流程，对用户注册功能来说，首先创建用户模型（M），这一步我们已经完成了。编写注册视图函数（V），并将为视图函数绑定对应的 URL。编写注册模板（T），模板中提供一个注册表单给用户。Django 用户系统内置了登录、修改密码、找回密码等视图，但是唯独用户注册的视图函数没有提供，这一部分需要我们自己来写。</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>首先来分析一下注册函数的逻辑。</p>
<ul>
<li><p>  首先用户请求注册表单，然后服务器的视图函数给用户提供注册表单；</p>
</li>
<li><p>  用户在注册表单里填写注册信息，然后通过表单将这些信息提交给服务器。</p>
</li>
<li><p>  视图函数从用户提交的数据提取用户的注册信息，然后验证这些数据的合法性。</p>
</li>
<li><p>  如果数据合法，就新建一个用户对象，将用户的数据保存到数据库，否则就将错误信息返回给用户，提示用户对提交的信息进行修改。</p>
</li>
<li><p>  注册成功，跳转到登录页面</p>
</li>
</ul>
<p>过程就是这么简单，下面是对应的代码（视图函数的代码通常写在 <code>views.py</code> 文件里）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, reverse, redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">next</span> = request.GET.get(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断用户是否登录(属性) user.is_authenticated</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">next</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            	<span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;users:index&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 提供注册页面</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 2.1 获取用户的注册信息</span></span><br><span class="line">        username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        password2 = request.POST.get(<span class="string">&quot;password2&quot;</span>)</span><br><span class="line">        phone = request.POST.get(<span class="string">&quot;phone&quot;</span>)</span><br><span class="line">        <span class="built_in">next</span> = request.POST.get(<span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 2.2 验证数据的合法性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, password2, phone]):</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>,context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>, <span class="string">&#x27;err_msg&#x27;</span>: <span class="string">&#x27;缺少必要参数&#x27;</span>&#125;)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> password != password2:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>, <span class="string">&#x27;pwd_msg&#x27;</span>: <span class="string">&#x27;密码不一致&#x27;</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">&#x27;^(13\d|14[5|7]|15\d|166|17[3|6|7]|18\d)\d&#123;8&#125;$&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>, <span class="string">&#x27;phone_msg&#x27;</span>: <span class="string">&#x27;手机号不合法&#x27;</span>&#125;)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 2.3 新建用户对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 此时 手动加密密码</span></span><br><span class="line">        <span class="comment"># hash_password = make_password(password)</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment">#   user = User(username=username, password=hash_password, phone=phone)</span></span><br><span class="line">        <span class="comment">#   user.save()</span></span><br><span class="line">        <span class="comment"># except Exception as e:</span></span><br><span class="line">        <span class="comment">#     return HttpResponseForbidden(&quot;创建失败&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Django认证系统用户模型类提供的 create_user() 方法创建新的用户。</span></span><br><span class="line">            <span class="comment"># create_user() 方法中封装了 set_password() 方法加密密码</span></span><br><span class="line">            user = User.objects.create_user(username=username, password=password, phone=phone)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>, <span class="string">&#x27;err_msg&#x27;</span>: <span class="string">&#x27;创建失败&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.4 注册成功，跳转回注册前页面</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在表单中增加了一个隐藏的 <code>input</code> 控件，其值为 <code>&#123;&#123; next &#125;&#125;</code>，即之前通过 <code>URL</code> 参数传递给注册视图函数的，然后注册视图函数又将该值传递给了 <code>index.html</code> 模板。这样在整个注册流程中，始终有一个记录着用户在注册前页面 URL 的变量 <code>next</code> 在视图和模板间来回传递，知道用户注册成功后再跳转回 <code>next</code> 记录的页面 URL。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;users:register&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        确认密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password2&quot;</span>&gt;</span> &#123;&#123;pwd_msg&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        手机号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span>&gt;</span> &#123;&#123;phone_msg&#125;&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;next&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; next &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;err_msg&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">		<span class="built_in">next</span> = request.GET.get(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断用户是否登录(属性) user.is_authenticated</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">next</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            	<span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;users:login&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, context=&#123;<span class="string">&#x27;next&#x27;</span>: <span class="built_in">next</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        remembered = request.POST.get(<span class="string">&quot;remembered&quot;</span>)</span><br><span class="line">        <span class="built_in">next</span> = request.POST.get(<span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password]):</span><br><span class="line">            <span class="comment"># return JsonResponse(&#123;&quot;account_msg&quot;: &quot;缺少必要参数&quot;, &quot;code&quot;: 403&#125;)</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;account_msg&#x27;</span>: <span class="string">&#x27;缺少必要参数&#x27;</span>, <span class="string">&quot;next&quot;</span>: <span class="built_in">next</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验用户信息，成功返回user对象，否则为None</span></span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;account_msg&#x27;</span>: <span class="string">&#x27;用户名或密码错误&#x27;</span>, <span class="string">&quot;next&quot;</span>: <span class="built_in">next</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实现状态保持</span></span><br><span class="line">        login(request, user)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置状态保持的周期</span></span><br><span class="line">        <span class="keyword">if</span> remembered != <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            <span class="comment"># 没有记住用户：浏览器会话结束就过期</span></span><br><span class="line">            request.session.set_expiry(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 记住用户：None表示两周后过期</span></span><br><span class="line">            request.session.set_expiry(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应登录结果</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;users:index&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><p>类似注册流程中，有next变量始终保留跳转前的地址，在模板和视图之间传递</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;users:login&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        记住登录 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remembered&quot;</span> <span class="attr">value</span>=<span class="string">&#x27;on&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;next&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; next &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><h3 id="视图-2"><a href="#视图-2" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoutView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        index = reverse(<span class="string">&#x27;users:index&#x27;</span>)</span><br><span class="line">        <span class="built_in">next</span> = request.GET.get(<span class="string">&#x27;next&#x27;</span>, index)</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&quot;&quot;实现退出登录逻辑&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 清理session</span></span><br><span class="line">        logout(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 退出登录，重定向到首页</span></span><br><span class="line">        response = redirect(<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 退出登录时清除cookie中的username</span></span><br><span class="line">        response.delete_cookie(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><h3 id="视图-3"><a href="#视图-3" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, requset</span>):</span></span><br><span class="line">        <span class="comment"># 如果用户没有登陆就访问本应登陆才能访问的页面时会直接跳转到登陆页面</span></span><br><span class="line">        user = requset.user</span><br><span class="line">        <span class="keyword">if</span> user.is_authenticated:</span><br><span class="line">            <span class="keyword">return</span> render(requset, <span class="string">&#x27;user.html&#x27;</span>, context=&#123;<span class="string">&#x27;user&#x27;</span>: user&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;users:login&#x27;</span>, kwargs=&#123;<span class="string">&quot;next&quot;</span>: request.path&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user = requset.user</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user.is_authenticated:</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;users:login&#x27;</span>, kwargs=&#123;<span class="string">&quot;next&quot;</span>: request.path&#125;))</span><br><span class="line">        </span><br><span class="line">        old_password = request.POST.get(<span class="string">&quot;old_password&quot;</span>)</span><br><span class="line">        new_password = request.POST.get(<span class="string">&quot;new_password&quot;</span>)</span><br><span class="line">        conf_password = request.POST.get(<span class="string">&quot;conf_password&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([old_password, new_password, conf_password]):</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;user.html&#x27;</span>, &#123;<span class="string">&#x27;user&#x27;</span>: user, <span class="string">&#x27;account_msg&#x27;</span>: <span class="string">&#x27;缺少必要参数&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> new_password != conf_password:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;user.html&#x27;</span>, &#123;<span class="string">&#x27;user&#x27;</span>: user, <span class="string">&#x27;account_msg&#x27;</span>: <span class="string">&#x27;密码不一致&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验密码  check_password()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.check_password(old_password):</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;user.html&#x27;</span>, &#123;<span class="string">&#x27;user&#x27;</span>: user, <span class="string">&#x27;account_msg&#x27;</span>: <span class="string">&#x27;密码不正确&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        user = request.user</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改密码</span></span><br><span class="line">        user.set_password(new_password)</span><br><span class="line">        <span class="comment"># user.password = make_password(new_password)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存修改</span></span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 状态保持</span></span><br><span class="line">        login(request, user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(requset, <span class="string">&#x27;user.html&#x27;</span>, context=&#123;<span class="string">&#x27;user&#x27;</span>: user&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       用户名： &#123;&#123;user.username&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       邮箱： &#123;&#123;user.email&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       手机号： &#123;&#123;user.phone&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;users:user&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        旧密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old_password&quot;</span>&gt;</span></span><br><span class="line">        新密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new_password&quot;</span>&gt;</span></span><br><span class="line">        确认密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;conf_password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>确认修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;next&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;% url &#x27;users:index&#x27; %&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><h3 id="视图-4"><a href="#视图-4" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>django_demo\urls.py</code>中配置总路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, include(<span class="string">&quot;users.urls&quot;</span>,<span class="string">&quot;users&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><code>users\urls.py</code>中配置子路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> RegisterView, LoginView, IndexView, LogoutView, UserView</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;users&quot;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;register/&#x27;</span>, RegisterView.as_view(), name=<span class="string">&quot;register&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, LoginView.as_view(), name=<span class="string">&quot;login&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;logout/&#x27;</span>, LogoutView.as_view(), name=<span class="string">&quot;logout&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;user/&quot;</span>, UserView.as_view(), name=<span class="string">&#x27;user&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, IndexView.as_view(), name=<span class="string">&quot;index&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件间通信方式</title>
    <url>/2020/12/27/TYGKXh0R1/</url>
    <content><![CDATA[<p>组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。</p>
<span id="more"></span>

<p>一般来说，组件可以有以下几种关系：</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208629.png" alt="1460000019208629">  </p>
<p>如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。</p>
<p>针对不同的使用场景，如何选择行之有效的通信方式？这是我们所要探讨的主题。本文总结了 vue 组件间通信的几种方式，如 <code>props</code>/<code>$emit</code>、<code>$emit</code>/<code>$on</code>、<code>vuex</code>、<code>$parent</code> / <code>$children</code>、<code>$attrs</code>/<code>$listeners</code>和 <code>provide</code>/<code>inject</code>，以通俗易懂的实例讲述这其中的差别及使用场景，希望对小伙伴有些许帮助。</p>
<h2 id="props-emit"><a href="#props-emit" class="headerlink" title="props/$emit"></a><code>props</code>/<code>$emit</code></h2><p>父组件 A 通过 <code>props</code> 的方式向子组件 B 传递，B to A 通过在 B 组件中 <code>$emit</code>, A 组件中 <code>v-on</code> 的方式实现。</p>
<h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><p>接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件 <em>Users.vue</em> 中如何获取父组件 <em>App.vue</em> 中的数据 <code>users:[&quot;Henry&quot;,&quot;Bucky&quot;,&quot;Emily&quot;]</code></p>
<h4 id="App-vue父组件"><a href="#App-vue父组件" class="headerlink" title="App.vue父组件"></a><code>App.vue</code>父组件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 前者自定义名称便于子组件调用，后者要传递数据名 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">users</span> <span class="attr">v-bind:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">&quot;./components/Users&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">users</span>:[<span class="string">&quot;Henry&quot;</span>,<span class="string">&quot;Bucky&quot;</span>,<span class="string">&quot;Emily&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="string">&quot;users&quot;</span>:Users</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Users-vue子组件"><a href="#Users-vue子组件" class="headerlink" title="Users.vue子组件"></a><code>Users.vue</code>子组件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in users&quot;</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>//遍历传递过来的值，然后呈现到页面</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">users</span>:&#123;           <span class="comment">//这个就是父组件中子标签自定义名字</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>:<span class="built_in">Array</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">required</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结：父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：<code>data</code>、<code>props</code>、<code>computed</code></strong></p>
</blockquote>
<h3 id="子组件向父组件传值（通过事件形式）"><a href="#子组件向父组件传值（通过事件形式）" class="headerlink" title="子组件向父组件传值（通过事件形式）"></a>子组件向父组件传值（通过事件形式）</h3><p>接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击 “<em>Vue.js Demo</em>” 后，子组件向父组件传递值，文字由原来的 “传递的是一个值” 变成“子向父组件传值”，实现子组件向父组件值的传递。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208630.png" alt="1460000019208630"></p>
<h4 id="Header-vue-子组件"><a href="#Header-vue-子组件" class="headerlink" title="Header.vue 子组件"></a><code>Header.vue</code> 子组件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">&quot;changeTitle&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//绑定一个点击事件</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;app-header&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">title</span>:<span class="string">&quot;Vue.js Demo&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">changeTitle</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;titleChanged&quot;</span>,<span class="string">&quot;子向父组件传值&quot;</span>);<span class="comment">//自定义事件  传递值“子向父组件传值”</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="App-vue-父组件"><a href="#App-vue-父组件" class="headerlink" title="App.vue 父组件"></a><code>App.vue</code> 父组件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-on:titleChanged</span>=<span class="string">&quot;updateTitle&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 与子组件titleChanged自定义事件保持一致 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- updateTitle($event)接受传递过来的文字 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./components/Header&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">title</span>:<span class="string">&quot;传递的是一个值&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">updateTitle</span>(<span class="params">e</span>)</span>&#123;   <span class="comment">//声明这个函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.title = e;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="string">&quot;app-header&quot;</span>:Header,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>总结：子组件通过 <code>events</code> 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</strong></p>
</blockquote>
<h2 id="emit-on"><a href="#emit-on" class="headerlink" title="$emit/$on"></a><code>$emit</code>/<code>$on</code></h2><p><strong>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件, 巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级</strong>。当我们的项目比较大时，可以选择更好的状态管理解决方案 vuex。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Event=<span class="keyword">new</span> Vue();</span><br><span class="line">Event.$emit(事件名,数据);</span><br><span class="line">Event.$on(事件名,<span class="function"><span class="params">data</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>假设兄弟组件有三个，分别是 A、B、C 组件，C 组件如何获取 A 或者 B 组件的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;itany&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">my-a</span>&gt;</span><span class="tag">&lt;/<span class="name">my-a</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">my-b</span>&gt;</span><span class="tag">&lt;/<span class="name">my-b</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">my-c</span>&gt;</span><span class="tag">&lt;/<span class="name">my-c</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>A组件：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>将数据发送给C组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>B组件：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>将数组发送给C组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>C组件：&#123;&#123;name&#125;&#125;，&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> Event = <span class="keyword">new</span> Vue(); <span class="comment">//定义一个空的Vue实例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> A = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">template</span>: <span class="string">&#x27;#a&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">send</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        Event.$emit(<span class="string">&#x27;data-a&#x27;</span>, <span class="built_in">this</span>.name);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> B = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">template</span>: <span class="string">&#x27;#b&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">send</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        Event.$emit(<span class="string">&#x27;data-b&#x27;</span>, <span class="built_in">this</span>.age);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> C = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">template</span>: <span class="string">&#x27;#c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;<span class="comment">//在模板编译完成后执行</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     Event.$on(<span class="string">&#x27;data-a&#x27;</span>,<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">this</span>.name = name;<span class="comment">//箭头函数内部不会产生新的this，这边如果不用=&gt;,this指代Event</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     Event.$on(<span class="string">&#x27;data-b&#x27;</span>,<span class="function"><span class="params">age</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">this</span>.age = age;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">el</span>: <span class="string">&#x27;#itany&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;my-a&#x27;</span>: A,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;my-b&#x27;</span>: B,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;my-c&#x27;</span>: C</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);    </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208631.gif" alt="1460000019208631"><br><code>$on</code> 监听了自定义事件 data-a 和 data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。</p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a><code>vuex</code></h2><p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208632.png" alt="1460000019208632"></p>
<h3 id="Vuex-原理"><a href="#Vuex-原理" class="headerlink" title="Vuex 原理"></a>Vuex 原理</h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作 (常见于调用后端接口异步获取更新数据) 或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p>
<h3 id="各模块功能"><a href="#各模块功能" class="headerlink" title="各模块功能"></a>各模块功能</h3><ul>
<li>  Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</li>
<li>  dispatch：操作行为触发方法，是唯一能执行 action 的方法。</li>
<li>  actions：<strong>操作行为处理模块, 由组件中的<code>$store.dispatch(&#39;action 名称&#39;, data1)</code>来触发。然后由 commit() 来触发 mutation 的调用 , 间接更新 state</strong>。负责处理 Vue Components 接收到的所有交互行为。包含同步 / 异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API 请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持 action 的链式触发。</li>
<li>  commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</li>
<li>  mutations：<strong>状态改变操作方法，由 actions 中的<code>commit(&#39;mutation 名称&#39;)</code>来触发</strong>。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</li>
<li>  state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</li>
<li>  getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</li>
</ul>
<h3 id="Vuex-VS-localStorage"><a href="#Vuex-VS-localStorage" class="headerlink" title="Vuex VS localStorage"></a><code>Vuex</code> VS <code>localStorage</code></h3><p>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，<strong>具体做法应该在 vuex 里数据改变的时候把数据拷贝一份保存到 localStorage 里面，刷新之后，如果 localStorage 里有保存的数据，取出来再替换 store 里的 state。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">&quot;上海&quot;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 用户关闭了本地存储功能，此时在外层加个try...catch</span></span><br><span class="line">  <span class="keyword">if</span> (!defaultCity) &#123;</span><br><span class="line">    defaultCity = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;defaultCity&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: defaultCity</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeCity</span>(<span class="params">state, city</span>)</span> &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;defaultCity&#x27;</span>, <span class="built_in">JSON</span>.stringify(state.city));</span><br><span class="line">        <span class="comment">// 数据改变的时候把数据拷贝一份保存到localStorage里面</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是：由于 vuex 里，我们保存的状态，都是数组，而 localStorage 只支持字符串，所以需要用 JSON 转换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(state.subscribeList);   <span class="comment">// array -&gt; string</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;subscribeList&quot;</span>));    <span class="comment">// string -&gt; array</span></span><br></pre></td></tr></table></figure>

<h2 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs/$listeners"></a><code>$attrs</code>/<code>$listeners</code></h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法 —-<code>$attrs</code>/<code>$listeners</code></p>
<ul>
<li>  <code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 interitAttrs 选项一起使用。</li>
<li>  <code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</li>
</ul>
<p>接下来我们看个跨级通信的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>浪里行舟<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child-com1</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:foo</span>=<span class="string">&quot;foo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:boo</span>=<span class="string">&quot;boo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:coo</span>=<span class="string">&quot;coo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:doo</span>=<span class="string">&quot;doo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">title</span>=<span class="string">&quot;前端工匠&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span><span class="tag">&lt;/<span class="name">child-com1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> childCom1 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom1.vue&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123; childCom1 &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">foo</span>: <span class="string">&quot;Javascript&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">boo</span>: <span class="string">&quot;Html&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">coo</span>: <span class="string">&quot;CSS&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">doo</span>: <span class="string">&quot;Vue&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// childCom1.vue</span></span><br><span class="line">&lt;template <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;border&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo: &#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>childCom1的$attrs: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child-com2</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> childCom2 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom2.vue&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    childCom2</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>, <span class="comment">// 可以关闭自动挂载到组件根元素上的没有在props声明的属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">foo</span>: <span class="built_in">String</span> <span class="comment">// foo作为props属性绑定</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs); <span class="comment">// &#123; &quot;boo&quot;: &quot;Html&quot;, &quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// childCom2.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>boo: &#123;&#123; boo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>childCom2: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child-com3</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com3</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> childCom3 = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./childCom3.vue&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    childCom3</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">boo</span>: <span class="built_in">String</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs); <span class="comment">// &#123;&quot;coo&quot;: &quot;CSS&quot;, &quot;doo&quot;: &quot;Vue&quot;, &quot;title&quot;: &quot;前端工匠&quot; &#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// childCom3.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>childCom3: &#123;&#123; $attrs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">coo</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">title</span>: <span class="built_in">String</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208633.png"><br>如上图所示<code>$attrs</code>表示没有继承数据的对象，格式为 {属性名：属性值}。Vue2.4 提供了<code>$attrs</code> , <code>$listeners</code> 来传递数据与事件，跨级组件之间的通讯变得更简单。</p>
<p>简单来说：<code>$attrs</code>与<code>$listeners</code> 是两个对象，<code>$attrs</code> 里存放的是父组件中绑定的非 Props 属性，<code>$listeners</code>里存放的是父组件中绑定的非原生事件。</p>
<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a><code>provide</code>/<code>inject</code></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vue2.2.0 新增 API, 这对选项需要一起使用，<strong>以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</strong>。一言而蔽之：祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。  </p>
<p><strong>provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</strong>。</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;浪里行舟&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: \[<span class="string">&#x27;name&#x27;</span>\],</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);  <span class="comment">// 浪里行舟</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在 A.vue 里，我们设置了一个 <strong>provide: name</strong>，值为 浪里行舟，它的作用就是将 <strong>name</strong> 这个变量提供给它的所有子组件。而在 B.vue 中，通过 <code>inject</code> 注入了从 A 组件中提供的 <strong>name</strong> 变量，那么在组件 B 中，就可以直接通过 <strong>this.name</strong> 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。</p>
<p>需要注意的是：<strong>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</strong> —-vue 官方文档<br>所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。</p>
<h3 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h3><p><code>provide</code> 与 <code>inject</code> 怎么实现数据响应式?一般来说，有两种办法：</p>
<ul>
<li>  provide 祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如 props，methods</li>
<li>  使用 2.6 最新 API Vue.observable 优化响应式 provide(推荐)</li>
</ul>
<p>我们来看个例子：孙组件 D、E 和 F 获取 A 组件传递过来的 color 值，并能实现数据响应式变化，即 A 组件的 color 变化后，组件 D、E、F 会跟着变（核心代码如下：）</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020/12/1460000019208634.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A 组件 </span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>A 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;() =&gt; changeColor()&quot;</span>&gt;</span>改变color<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ChildrenB</span> /&gt;</span></span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ChildrenC</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">......</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// provide() &#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     theme: &#123;</span></span><br><span class="line">  <span class="comment">//       color: this.color //这种方式绑定的数据并不是可响应的</span></span><br><span class="line">  <span class="comment">//     &#125; // 即A组件的color变化后，组件D、E、F不会跟着变</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="built_in">this</span><span class="comment">//方法一：提供祖先组件的实例</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeColor</span>(<span class="params">color</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (color) &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="built_in">this</span>.color === <span class="string">&quot;blue&quot;</span> ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 方法二:使用2.6最新API Vue.observable 优化响应式 provide</span></span><br><span class="line">  <span class="comment">// provide() &#123;</span></span><br><span class="line">  <span class="comment">//   this.theme = Vue.observable(&#123;</span></span><br><span class="line">  <span class="comment">//     color: &quot;blue&quot;</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     theme: this.theme</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// methods: &#123;</span></span><br><span class="line">  <span class="comment">//   changeColor(color) &#123;</span></span><br><span class="line">  <span class="comment">//     if (color) &#123;</span></span><br><span class="line">  <span class="comment">//       this.theme.color = color;</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       this.theme.color = this.theme.color === &quot;blue&quot; ? &quot;red&quot; : &quot;blue&quot;;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// F 组件 </span></span><br><span class="line">&lt;template functional&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: injections.theme.color &#125;&quot;</span>&gt;</span>F 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">inject</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">theme</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//函数式组件取值不一样</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>虽说 provide 和 inject 主要为高阶插件 / 组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p>
<h2 id="parent-children与-ref"><a href="#parent-children与-ref" class="headerlink" title="$parent / $children与 ref"></a><code>$parent</code> / <code>$children</code>与 <code>ref</code></h2><ul>
<li>  <code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>
<li>  <code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>
</ul>
<p>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 <code>ref</code>来访问组件的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component-a 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      <span class="built_in">window</span>.alert(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">ref</span>=<span class="string">&quot;comA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    mounted () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> comA = <span class="built_in">this</span>.$refs.comA;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(comA.title);  <span class="comment">// Vue.js</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      comA.sayHello();  <span class="comment">// 弹窗</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>不过，<strong>这两种方法的弊端是，无法在跨级或兄弟间通信</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.vue</span></span><br><span class="line">&lt;component-a&gt;&lt;/component-a&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>常见使用场景可以分为三类：</p>
<ul>
<li>  父子通信：</li>
</ul>
<p>父向子传递数据是通过 props，子向父是通过 events（<code>$emit</code>）；通过父链 / 子链也可以通信（<code>$parent</code> / <code>$children</code>）；ref 也可以访问组件实例；provide / inject API；<code>$attrs/$listeners</code></p>
<ul>
<li>  兄弟通信：</li>
</ul>
<p>Bus；Vuex</p>
<ul>
<li>  跨级通信：</li>
</ul>
<p>Bus；Vuex；provide / inject API、<code>$attrs/$listeners</code></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li>  <a href="https://juejin.im/book/5bc844166fb9a05cd676ebca">Vue.js 组件精讲</a></li>
<li>  <a href="https://cn.vuejs.org/v2/api/#inheritAttrs">Vue.js 官方文档</a></li>
<li>  <a href="https://time.geekbang.org/course/detail/163-86419">Vue 开发实战</a></li>
<li>  <a href="https://webcache.googleusercontent.com/search?q=cache:GCLcuCsGrVIJ:https://bingzhe.github.io/2017/08/27/vuex%25E6%2595%25B0%25E6%258D%25AE%25E6%259C%25AC%25E5%259C%25B0%25E5%2582%25A8%25E5%25AD%2598/+&cd=12&hl=zh-CN&ct=clnk&gl=us">Vuex 数据本地储存</a></li>
<li>  <a href="https://tech.meituan.com/vuex_code_analysis.html">Vuex 框架原理与源码分析</a></li>
<li>  <a href="https://juejin.im/post/5c77c4ae518825407505e262">Vue 组件通信方式全面详解</a></li>
</ul>
]]></content>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>python面向对象</title>
    <url>/2019/11/04/fyjn92kth/</url>
    <content><![CDATA[<p>面向对象最重要的概念就是类（<code>Class</code>）和实例（<code>Instance</code>），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>
<span id="more"></span>

<p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p>
<p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过<code>类名+()</code>实现的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: s = Student()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: s</span><br><span class="line">Out[<span class="number">6</span>]: &lt;__main__.Student at <span class="number">0x107615860</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: Student</span><br><span class="line">Out[<span class="number">7</span>]: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Student</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，变量<code>s</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x107615860</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p>
<p>可以自由地给一个实例变量绑定属性，比如，给实例<code>s</code>绑定一个<code>name</code>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">9</span>]: s.name = <span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: s.name</span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure>

<p> 由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：特殊方法“__init__”前后分别有两个下划线！！！</p>
</blockquote>
<p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p>
<p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:         self.score = score</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: s = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: s.name</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: s.score</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">59</span></span><br></pre></td></tr></table></figure>

<p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">std</span>):</span></span><br><span class="line">    ...:     <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (std.name, std.score))</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: print_score(s)</span><br><span class="line">Bart Simpson: <span class="number">59</span></span><br></pre></td></tr></table></figure>

<p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">    ...:         self.name = name</span><br><span class="line">    ...:         self.score = score</span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">    ...:         <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.score))</span><br><span class="line">    ...:</span><br></pre></td></tr></table></figure>

<p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: s = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: s.print_score()</span><br><span class="line">Bart Simpson: <span class="number">59</span></span><br></pre></td></tr></table></figure>

<p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p>
<p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lisa = Student(<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">99</span>)</span><br><span class="line">bart = Student(<span class="string">&#x27;Bart&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="built_in">print</span>(lisa.name, lisa.get_grade())</span><br><span class="line"><span class="built_in">print</span>(bart.name, bart.get_grade())</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>在程序中，继承描述的是多个类之间的所属关系。</li>
<li>如果一个类A里面的属性和方法可以复用，则可以通过继承的方式，传递到类B里。那么类A就是基类，也叫做父类；类B就是派生类，也叫做子类。</li>
</ul>
<h3 id="1-单继承"><a href="#1-单继承" class="headerlink" title="1. 单继承"></a>1. 单继承</h3><blockquote>
<p>子类A只继承了一个父类B, 那么此时两者之间的关系就是单继承</p>
</blockquote>
<ul>
<li><p>单继承，子类直接继承父类的<code>__init__</code>方法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"><span class="built_in">object</span></span>):</span>  <span class="comment"># 创建用户类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  <span class="comment"># 给用户添加属性：name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span>(<span class="params">User</span>):</span></span><br><span class="line">    <span class="comment"># 子类继承父类的__init__方法，添加name属性</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">vip = VipUser(<span class="string">&quot;xw&quot;</span>)  <span class="comment"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span></span><br><span class="line"><span class="built_in">print</span>(vip.name)</span><br></pre></td></tr></table></figure></li>
<li><p>单继承，子类自己实现<code>__init__</code>方法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>():</span>  <span class="comment"># 创建用户类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  <span class="comment"># 给用户添加属性：name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span>(<span class="params">User</span>):</span></span><br><span class="line">    <span class="comment"># 子类自己实现__init__方法，并没有直接使用继承父类的__init__方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  <span class="comment"># 给vip用户添加属性：name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">vip = VipUser(<span class="string">&quot;xw&quot;</span>)  <span class="comment"># vip初始化时，自己本身没有实现__init__方法,而是直接调用继承自User的__init__方法，vip有name属性</span></span><br><span class="line"><span class="built_in">print</span>(vip.name)</span><br></pre></td></tr></table></figure></li>
<li><p>单继承，子类在自己实现的<code>__init__</code>方法中，还调用了父类的<code>__init__</code>方法</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象初始化，__init__方法只会执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>():</span>  <span class="comment"># 创建用户类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  <span class="comment"># 给用户添加属性：name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span>(<span class="params">User</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, money</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># User.__init__(self)   # 通过父类名直接调用父类的__init__方法实现name属性的添加</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)  <span class="comment"># 通过super()调用父类的__init__方法添加name属性</span></span><br><span class="line">        self.money = money  <span class="comment"># 自己添加money属性</span></span><br><span class="line"></span><br><span class="line">vip = VipUser(<span class="string">&quot;xw&quot;</span>, <span class="number">300</span>)  <span class="comment"># vip初始化时，__init__方法执行一次</span></span><br><span class="line"><span class="built_in">print</span>(vip.name, vip.money)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-多继承"><a href="#2-多继承" class="headerlink" title="2. 多继承"></a>2. 多继承</h3><blockquote>
<p>多继承可以继承多个父类，也继承了所有父类的属性和方法</p>
</blockquote>
<ul>
<li><p>如果多个父类中有同名的 属性和方法，则默认使用第一个父类的属性和方法（根据类的魔法属性<code>__mro__</code>的顺序来查找）</p>
</li>
<li><p>多个父类中，不重名的属性和方法，不会有任何影响。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;B&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"><span class="built_in">print</span>(C.mro())  <span class="comment"># [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="built_in">print</span>(c.name)  <span class="comment"># A</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-多层继承"><a href="#3-多层继承" class="headerlink" title="3. 多层继承"></a>3. 多层继承</h3><blockquote>
<p> 多层继承主要说的是<code>super</code>的搜索顺序,而搜索顺序主要是根据类的魔法属性<code>__mro__</code>的顺序来查找</p>
</blockquote>
<ul>
<li><p><code>super()</code>调用方法顺序示例</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;A&lt;&lt;&lt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;B1&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().run()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;B2&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().run()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">B1, B2</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;C&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().run()</span><br><span class="line">        </span><br><span class="line">c= C()</span><br><span class="line"><span class="built_in">print</span>(C.mro())</span><br><span class="line">c.run()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>程序运行结果：</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B1&#x27;&gt;, &lt;class &#x27;__main__.B2&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;C&lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;B1&lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;B2&lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;A&lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>参数传递示例</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;father&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span>(<span class="params">Father</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, *args</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1&#x27;</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>(<span class="params">Father</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, gender</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2&#x27;</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span>(<span class="params">Son1, Son2</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, gender</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Grandson&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age, gender)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Grandson.mro())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">grand_son = Grandson(<span class="string">&#x27;王明&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+&quot;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(grand_son.name, grand_son.age, grand_son.gender)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>程序运行结果：</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">++++++++++++++++++++++++++++++</span><br><span class="line">Grandson</span><br><span class="line">Son1</span><br><span class="line">Son2</span><br><span class="line">father</span><br><span class="line">++++++++++++++++++++++++++++++</span><br><span class="line">王明 14 男</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="1-多态"><a href="#1-多态" class="headerlink" title="1. 多态"></a>1. 多态</h3><p>所谓的多态就是同一类事物有不同的形态,(一个抽象类有多个子类，因而多态的概念依赖于继承)</p>
<ul>
<li>序列类型有多种形态：字符串，列表，元组</li>
<li>动物有多种形态：猫，狗</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, foods</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.foods = foods</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s的食物是%s&quot;</span> % (self.name, self.foods))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s跑的很快&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s:汪汪大叫&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s:喵喵大叫&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog = Dog(<span class="string">&quot;哈士奇&quot;</span>, <span class="string">&quot;狗粮&quot;</span>)</span><br><span class="line">dog.eat()</span><br><span class="line">dog.call()</span><br><span class="line"></span><br><span class="line">cat = Cat(<span class="string">&quot;九命妖猫&quot;</span>, <span class="string">&quot;仙露&quot;</span>)</span><br><span class="line">cat.eat()</span><br><span class="line">cat.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-多态性"><a href="#2-多态性" class="headerlink" title="2. 多态性"></a>2. 多态性</h3><blockquote>
<p>什么是多态性（注意：多态与多态性是两种概念）</p>
</blockquote>
<ul>
<li>多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。</li>
<li>在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。</li>
<li>也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多态性依赖于：继承</span></span><br><span class="line"><span class="comment">##多态性：定义统一的接口，</span></span><br><span class="line"><span class="comment">#多态性：一种调用方式，不同的执行效果（多态性）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">obj</span>):</span> <span class="comment"># obj这个参数没有类型限制，可以传入不同类型的值</span></span><br><span class="line">	obj.eat()  <span class="comment">#调用的逻辑都一样，执行的结果却不一样</span></span><br><span class="line"></span><br><span class="line">func(dog)</span><br><span class="line">func(cat)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要用多态性（多态性的好处）</p>
</blockquote>
<p>其实大家从上面多态性的例子可以看出，我们并没有增加上面新的知识，也就是说Python本身就是支持多态性的，这么做的好处是什么呢？</p>
<ul>
<li> 增加了程序的灵活性<br>以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如func(animal)</li>
<li> 增加了程序额可扩展性<br>通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用func(animal)去调用</li>
</ul>
<blockquote>
<ul>
<li>多态：同一种事物的多种形态，动物分为猫类，狗类（在定义角度） </li>
<li>多态性：一种调用方式，不同的执行效果（多态性）</li>
</ul>
</blockquote>
<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p>
<h3 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用type()</h3><p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p>
<p>基本类型都可以用<code>type()</code>判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">123</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params"><span class="string">&#x27;str&#x27;</span></span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params"><span class="literal">None</span></span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">type</span>(<span class="params"><span class="literal">None</span></span>) &#x27;<span class="title">NoneType</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">abs</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">builtin_function_or_method</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Animal</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的Class类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的type类型是否相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">123</span>)==<span class="built_in">type</span>(<span class="number">456</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">123</span>)==<span class="built_in">int</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;abc&#x27;</span>)==<span class="built_in">type</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;abc&#x27;</span>)==<span class="built_in">str</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;abc&#x27;</span>)==<span class="built_in">type</span>(<span class="number">123</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(fn)==types.FunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">abs</span>)==types.BuiltinFunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="keyword">lambda</span> x: x)==types.LambdaType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))==types.GeneratorType</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance()"></a>使用isinstance()</h3><p>对于class的继承关系来说，使用<code>type()</code>就很不方便。我们要判断class的类型，可以使用<code>isinstance()</code>函数。</p>
<p>我们回顾上次的例子，如果继承关系是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> -&gt; Animal -&gt; Dog -&gt; Husky</span><br></pre></td></tr></table></figure>

<p>那么，<code>isinstance()</code>就可以告诉我们，一个对象是否是某种类型。先创建3种类型的对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Animal()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = Husky()</span><br></pre></td></tr></table></figure>

<p>然后，判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(h, Husky)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>没有问题，因为<code>h</code>变量指向的就是Husky对象。</p>
<p>再判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(h, Dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><code>h</code>虽然自身是Husky类型，但由于Husky是从Dog继承下来的，所以，<code>h</code>也还是Dog类型。换句话说，<code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p>
<p>因此，我们可以确信，<code>h</code>还是Animal类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(h, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>同理，实际类型是Dog的<code>d</code>也是Animal类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(d, Dog) <span class="keyword">and</span> <span class="built_in">isinstance</span>(d, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>但是，<code>d</code>不是Husky类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(d, Husky)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">123</span>, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">b&#x27;a&#x27;</span>, <span class="built_in">bytes</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (<span class="built_in">list</span>, <span class="built_in">tuple</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="built_in">list</span>, <span class="built_in">tuple</span>))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p> 总是优先使用<code>isinstance()</code>判断类型，可以将指定类型及其子类“一网打尽”。</p>
<h3 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用dir()</h3><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>,..., <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>,..., <span class="string">&#x27;zfill&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>类似<code>__xxx__</code>的属性和方法在Python中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在Python中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyDog(object):</span><br><span class="line">...     def __len__(self):</span><br><span class="line">...         return 100</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; dog = MyDog()</span><br><span class="line">&gt;&gt;&gt; len(dog)</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<p>剩下的都是普通属性或方法，比如<code>lower()</code>返回小写的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.lower()</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>

<p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.x = <span class="number">9</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.x * self.x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = MyObject()</span><br></pre></td></tr></table></figure>

<p>紧接着，可以测试该对象的属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj, <span class="string">&#x27;x&#x27;</span>) <span class="comment"># 有属性&#x27;x&#x27;吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj, <span class="string">&#x27;y&#x27;</span>) <span class="comment"># 有属性&#x27;y&#x27;吗？</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">setattr</span>(obj, <span class="string">&#x27;y&#x27;</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性&#x27;y&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj, <span class="string">&#x27;y&#x27;</span>) <span class="comment"># 有属性&#x27;y&#x27;吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(obj, <span class="string">&#x27;y&#x27;</span>) <span class="comment"># 获取属性&#x27;y&#x27;</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y <span class="comment"># 获取属性&#x27;y&#x27;</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure>

<p>如果试图获取不存在的属性，会抛出AttributeError的错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(obj, <span class="string">&#x27;z&#x27;</span>) <span class="comment"># 获取属性&#x27;z&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;MyObject&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;z&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以传入一个default参数，如果属性不存在，就返回默认值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(obj, <span class="string">&#x27;z&#x27;</span>, <span class="number">404</span>) <span class="comment"># 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span></span><br><span class="line"><span class="number">404</span></span><br></pre></td></tr></table></figure>

<p>也可以获得对象的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hasattr</span>(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 有属性&#x27;power&#x27;吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 获取属性&#x27;power&#x27;</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject <span class="built_in">object</span> at <span class="number">0x10077a6a0</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn = <span class="built_in">getattr</span>(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 获取属性&#x27;power&#x27;并赋值到变量fn</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn <span class="comment"># fn指向obj.power</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject <span class="built_in">object</span> at <span class="number">0x10077a6a0</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>

<h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p>
<p>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score = <span class="number">99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure>

<p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure>

<p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;__name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p>
<p>但是如果外部代码要获取name和score怎么办？可以给Student类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br></pre></td></tr></table></figure>

<p>如果又要允许外部代码修改score怎么办？可以再给Student类增加<code>set_score</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self, score</span>):</span></span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure>

<p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self, score</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">            self.__score = score</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;bad score&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>
<p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p>
<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart._Student__name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>
<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>
<p>最后注意下面的这种<em>错误写法</em>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name()</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name = <span class="string">&#x27;New Name&#x27;</span> <span class="comment"># 设置__name变量！</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</span><br><span class="line"><span class="string">&#x27;New Name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="实例属性与类属性"><a href="#实例属性与类属性" class="headerlink" title="实例属性与类属性"></a>实例属性与类属性</h2><p>由于Python是动态语言，根据类创建的实例可以任意绑定属性。</p>
<p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br></pre></td></tr></table></figure>

<p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归<code>Student</code>类所有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    name = <span class="string">&#x27;Student&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建实例s</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Student.name) <span class="comment"># 打印类的name属性</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 给实例绑定name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s.name) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span><br><span class="line">Michael</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span><br><span class="line">Student</span><br></pre></td></tr></table></figure>

<p>从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>
<h2 id="实例方法、静态方法与类方法"><a href="#实例方法、静态方法与类方法" class="headerlink" title="实例方法、静态方法与类方法"></a>实例方法、静态方法与类方法</h2><h3 id="1-方法分类"><a href="#1-方法分类" class="headerlink" title="1. 方法分类"></a>1. 方法分类</h3><p>先看语法，<code>python</code> 类语法中有三种方法，实例方法，静态方法，类方法。</p>
<blockquote>
<p><code>python</code>中<code>self</code>，<code>cls</code>的区别:</p>
</blockquote>
<ul>
<li>普通实例方法，第一个参数需要是<code>self</code>，它表示一个具体的实例本身。</li>
<li>如果用了<code>staticmethod</code>，那么就可以无视这个<code>self</code>，而将这个方法当成一个普通的函数使用。</li>
<li>而对于<code>classmethod</code>，它的第一个参数不是<code>self</code>，是<code>cls</code>，它表示这个类本身。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;类三种方法语法形式&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是类&#123;&#125;的实例方法，只能被实例对象调用&quot;</span>.<span class="built_in">format</span>(Foo))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是静态方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是类方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">foo.instance_method()</span><br><span class="line">foo.static_method()</span><br><span class="line">foo.class_method()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line">Foo.static_method()</span><br><span class="line">Foo.class_method()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">是类&lt;class &#x27;__main__.Foo&#x27;&gt;的实例方法，只能被实例对象调用</span><br><span class="line">是静态方法</span><br><span class="line">是类方法</span><br><span class="line">----------------</span><br><span class="line">是静态方法</span><br><span class="line">是类方法</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>调用<ul>
<li>实例方法只能被实例对象调用</li>
<li>静态方法(由<code>@staticmethod</code>装饰的方法)、类方法(由<code>@classmethod</code>装饰的方法)，可以被类或类的实例对象调用。</li>
</ul>
</li>
<li>参数<ul>
<li>实例方法，第一个参数必须要默认传实例对象，一般习惯用<code>self</code>。</li>
<li>静态方法，参数没有要求。</li>
<li>类方法，第一个参数必须要默认传类，一般习惯用<code>cls</code>。</li>
</ul>
</li>
</ul>
<h3 id="2-方法调用"><a href="#2-方法调用" class="headerlink" title="2. 方法调用"></a>2. 方法调用</h3><blockquote>
<p>静态方法调用另一个静态方法，如果改用类方法调用静态方法，可以让<code>cls</code>代替类，让代码看起来精简一些。也防止类名修改了，不用在类定义中修改原来的类名。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    X = <span class="number">1</span></span><br><span class="line">    Y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averag</span>(<span class="params">*mixes</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(mixes) / <span class="built_in">len</span>(mixes)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span>  <span class="comment"># 在静态方法中调用静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在静态方法中调用静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> Foo.averag(Foo.X, Foo.Y)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span>  <span class="comment"># 在类方法中使用静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在类方法中使用静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls.averag(cls.X, cls.Y)</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line"><span class="built_in">print</span>(foo.static_method())</span><br><span class="line"><span class="built_in">print</span>(foo.class_method())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在静态方法中调用静态方法</span><br><span class="line">1.5</span><br><span class="line">在类方法中使用静态方法</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure>

<h3 id="3-继承类中的区别"><a href="#3-继承类中的区别" class="headerlink" title="3.继承类中的区别"></a>3.继承类中的区别</h3><p>从下面代码可以看出，如果子类继承父类的方法，子类覆盖了父类的静态方法:</p>
<ul>
<li>子类的实例继承了父类的<code>static_method</code>静态方法，调用该方法，还是调用的父类的方法和类属性。</li>
<li>子类的实例继承了父类的<code>class_method</code>类方法，调用该方法，调用的是子类的方法和子类的类属性。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    X = <span class="number">1</span></span><br><span class="line">    Y = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averag</span>(<span class="params">*mixes</span>):</span>  <span class="comment"># &quot;父类中的静态方法&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(mixes) / <span class="built_in">len</span>(mixes)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span>  <span class="comment"># &quot;父类中的静态方法&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类中的静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> Foo.averag(Foo.X, Foo.Y)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span>  <span class="comment"># 父类中的类方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类中的类方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls.averag(cls.X, cls.Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    X = <span class="number">3</span></span><br><span class="line">    Y = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averag</span>(<span class="params">*mixes</span>):</span>  <span class="comment"># &quot;子类中重载了父类的静态方法&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子类中重载了父类的静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(mixes) / <span class="built_in">len</span>(mixes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Son()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result of p.averag(1,5)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.averag(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result of p.static_method()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.static_method())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result of p.class_method()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.class_method())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result of p.averag(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">子类中重载了父类的静态方法</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">result of p.static_method()</span><br><span class="line">父类中的静态方法</span><br><span class="line"><span class="number">7.5</span></span><br><span class="line">result of p.class_method()</span><br><span class="line">父类中的类方法</span><br><span class="line">子类中重载了父类的静态方法</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python内置函数</title>
    <url>/2019/05/25/OxyPhv4sv/</url>
    <content><![CDATA[<blockquote>
<p>Python 内置函数就是 python 标准库里（语言自身携带的）函数（公共函数）。</p>
</blockquote>
<p>那么，接下来就来谈一谈 python 里的内置函数</p>
<span id="more"></span>

<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a><code>bin</code></h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>bin()</strong> 返回一个整数 int 或者长整数 long int 的二进制表示。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下是 bin() 方法的语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin(x)</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – int 或者 long int 数字</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>字符串。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 bin 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">10</span>))  <span class="comment">#0b1010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">20</span>))  <span class="comment">#0b10100</span></span><br></pre></td></tr></table></figure>

<h2 id="float"><a href="#float" class="headerlink" title="float"></a><code>float</code></h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>float() 函数用于将整数和字符串转换成浮点数。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>float()方法语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>([x])</span><br></pre></td></tr></table></figure>

<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 整数或字符串</li>
</ul>
<h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回浮点数。</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 float() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">float</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="number">112</span>)</span><br><span class="line"><span class="number">112.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(-<span class="number">123.6</span>)</span><br><span class="line">-<span class="number">123.6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;123&#x27;</span>)     <span class="comment"># 字符串</span></span><br><span class="line"><span class="number">123.0</span></span><br></pre></td></tr></table></figure>

<h2 id="hex"><a href="#hex" class="headerlink" title="hex"></a><code>hex</code></h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p><strong>hex()</strong> 函数用于将10进制整数转换成16进制，以字符串形式表示。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>hex 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hex</span>(x)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  x – 10进制整数</li>
</ul>
<h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>返回16进制数，以字符串形式表示。</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 hex 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">hex</span>(<span class="number">255</span>)</span><br><span class="line"><span class="string">&#x27;0xff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(-<span class="number">42</span>)</span><br><span class="line"><span class="string">&#x27;-0x2a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">12</span>)</span><br><span class="line"><span class="string">&#x27;0xc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">hex</span>(<span class="number">12</span>))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;      # 字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="oct"><a href="#oct" class="headerlink" title="oct"></a><code>oct</code></h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p><strong>oct()</strong> 函数将一个整数转换成 8 进制字符串。</p>
<ul>
<li>  Python2.x 版本的 8 进制以 <strong>0</strong> 作为前缀表示。</li>
<li>  Python3.x 版本的 8 进制以 <strong>0o</strong> 作为前缀表示。</li>
</ul>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>oct 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">oct</span>(x)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  x – 整数。</li>
</ul>
<h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><p>返回 8 进制字符串。</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 oct 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">10</span>)</span><br><span class="line"><span class="string">&#x27;0o12&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="int"><a href="#int" class="headerlink" title="int"></a><code>int</code></h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><p>int() 函数用于将一个字符串或数字转换为整型。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>以下是 int() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(x, base=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 字符串或数字。</li>
<li>  base – 进制数，默认十进制。</li>
</ul>
<h3 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h3><p>返回整型数据。</p>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 int() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>()               <span class="comment"># 不传入参数时，得到结果0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">3.6</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;12&#x27;</span>,<span class="number">16</span>)        <span class="comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;0xa&#x27;</span>,<span class="number">16</span>)  </span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;10&#x27;</span>,<span class="number">8</span>)  </span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<h1 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h1><h2 id="complex"><a href="#complex" class="headerlink" title="complex"></a><code>complex</code></h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p><strong>complex()</strong> 函数用于创建一个值为 <code>real + imag * j</code> 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>complex 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span>(<span class="params">[real[, imag]]</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  real – int, long, float或字符串；</li>
<li>  imag – int, long, float；</li>
</ul>
<h3 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个复数。</p>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 complex 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment">#(1 + 2j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">1</span>))  <span class="comment">#(1 + 0j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="string">&quot;3&quot;</span>)) <span class="comment">#(3+0j)</span></span><br></pre></td></tr></table></figure>

<h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a><code>operator</code></h2><h3 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h3><p>operator 模块提供了一套与<em>Python</em>的内置运算符对应的高效率函数</p>
<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>适合任何对象，包含的方法有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">operator.lt(a, b)</span><br><span class="line">operator.le(a, b)</span><br><span class="line">operator.eq(a, b)</span><br><span class="line">operator.ne(a, b)</span><br><span class="line">operator.ge(a, b)</span><br><span class="line">operator.gt(a, b)</span><br><span class="line">operator.__lt__(a, b)</span><br><span class="line">operator.__le__(a, b)</span><br><span class="line">operator.__eq__(a, b)</span><br><span class="line">operator.__ne__(a, b)</span><br><span class="line">operator.__ge__(a, b)</span><br><span class="line">operator.__gt__(a, b)</span><br></pre></td></tr></table></figure>

<h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  a – 任何对象。</li>
<li>  b – 任何对象。</li>
</ul>
<hr>
<h3 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h3><p>比较之后，返回 True 或False</p>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 operator模块的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>operator.eq(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>operator.eq(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a><code>abs</code></h2><h3 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h3><p>abs() 函数返回数字的绝对值。</p>
<h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p>以下是 abs() 方法的语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abs( x )</span><br></pre></td></tr></table></figure>

<h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 数值表达式。</li>
</ul>
<h3 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h3><p>函数返回x（数字）的绝对值。</p>
<h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 abs() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = -<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(a))  <span class="comment">#输出3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(b))  <span class="comment">#输出5</span></span><br></pre></td></tr></table></figure>

<h2 id="round"><a href="#round" class="headerlink" title="round"></a><code>round</code></h2><h3 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h3><p><strong>round()</strong> 方法返回浮点数 x 的四舍五入值。</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>以下是 round() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>( x [, n]  )</span><br></pre></td></tr></table></figure>

<h3 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 数字表达式。</li>
<li>  n – 表示保留小数位数，默认值为 0。</li>
</ul>
<h3 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h3><p>返回浮点数x的四舍五入值。</p>
<h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 round() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: <span class="built_in">round</span>(<span class="number">9.33333</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">round</span>(<span class="number">9.33333</span>, <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">9.33</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">round</span>(<span class="number">9.335</span>, <span class="number">2</span>)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">9.34</span></span><br></pre></td></tr></table></figure>

<h2 id="divmod"><a href="#divmod" class="headerlink" title="divmod"></a><code>divmod</code></h2><h3 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h3><p>python divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组。</p>
<h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><p>以下是 divmod() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">divmod</span>(a, b)</span><br></pre></td></tr></table></figure>

<h3 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  a: 数字</li>
<li>  b: 数字</li>
</ul>
<h3 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h3><p>返回 <code>(a // b, a % b)</code>元组对象。</p>
<h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 divmod() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">divmod</span>(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">1</span>+<span class="number">2j</span>,<span class="number">1</span>+<span class="number">0.5j</span>)</span><br><span class="line">((<span class="number">1</span>+<span class="number">0j</span>), <span class="number">1.5j</span>)</span><br></pre></td></tr></table></figure>

<h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a><code>pow</code></h2><h3 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h3><p><strong>pow()</strong> 方法返回 $$x^y$$（x 的 y 次方） 的值。</p>
<h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><p>以下是 math 模块 pow() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">math.<span class="built_in">pow</span>( x, y )</span><br></pre></td></tr></table></figure>

<p>内置的 pow() 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(x, y[, z])</span><br></pre></td></tr></table></figure>

<p>函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z。</p>
<p><strong>注意：</strong>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p>
<h3 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 数值表达式。</li>
<li>  y – 数值表达式。</li>
<li>  z – 数值表达式。</li>
</ul>
<h3 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h3><p>返回 $$x^y$$（x的y次方） 的值。</p>
<h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 pow() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h2><h3 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h3><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p>
<h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><p>以下是 eval() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(expression[, <span class="built_in">globals</span>[, <span class="built_in">locals</span>]])</span><br></pre></td></tr></table></figure>

<h3 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  expression – 表达式。</li>
<li>  globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li>
<li>  locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li>
</ul>
<h3 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h3><p>返回表达式计算结果。</p>
<h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 eval() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure>



<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h2><h3 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a>描述</h3><p>exec 执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p>
<blockquote>
<p>  需要说明的是在 Python2 中exec不是函数，而是一个内置语句(statement)，但是Python 2中有一个 execfile() 函数。可以理解为 Python 3 把 exec 这个 statement 和 execfile() 函数的功能够整合到一个新的 exec() 函数中去了。</p>
</blockquote>
<h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><p>以下是 exec 的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(obj)</span><br></pre></td></tr></table></figure>

<h3 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  obj – 要执行的表达式。</li>
</ul>
<h3 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h3><p>exec 返回值永远为 None。</p>
<h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 exec 的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;hello world&#x27;)&quot;</span>)</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;a = 1+2&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;print(a)&quot;</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a><code>compile</code></h2><h3 id="描述-13"><a href="#描述-13" class="headerlink" title="描述"></a>描述</h3><p>compile() 函数将一个字符串编译为字节代码。</p>
<h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><p>以下是 compile() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">compile</span>(source, filename, mode[, flags[, dont_inherit]])</span><br></pre></td></tr></table></figure>

<h3 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  source – 字符串或者AST（Abstract Syntax Trees）对象,代表了要编译的python 代码。</li>
<li>  filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值,虽然是必需的，但通常被置为空串。</li>
<li>mode – 指定编译代码的种类。可以指定为 exec, eval, single。<ul>
<li>  ‘eval’ 可求值的表达式[和eval()一起使用]</li>
<li>  ‘single’ 单一可执行语句[和exec或eval()一起使用]</li>
<li>  ‘exec’ 可执行语句组[和exec一起使用]</li>
</ul>
</li>
<li>  flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li>
<li>  flags和dont_inherit是用来控制编译源码时的标志</li>
</ul>
<h3 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h3><p>返回表达式执行结果。</p>
<h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 compile 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="string">&#x27;1+2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="string">&#x27;r = 1+2&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>



<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a><code>hash</code></h2><h3 id="描述-14"><a href="#描述-14" class="headerlink" title="描述"></a>描述</h3><p><strong>hash()</strong> 用于获取取一个对象（字符串或者数值等）的哈希值。</p>
<h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><p>hash 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  object – 对象；</li>
</ul>
<h3 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象的哈希值。</p>
<h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 hash 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">hash</span>(<span class="string">&#x27;test&#x27;</span>)            <span class="comment"># 字符串</span></span><br><span class="line"><span class="number">2314058222102390712</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">1</span>)                 <span class="comment"># 数字</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))      <span class="comment"># 集合</span></span><br><span class="line"><span class="number">1335416675971793195</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">sorted</span>(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>&#125;))) <span class="comment"># 字典</span></span><br><span class="line"><span class="number">7666464346782421378</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="len"><a href="#len" class="headerlink" title="len"></a><code>len</code></h2><h3 id="描述-15"><a href="#描述-15" class="headerlink" title="描述"></a>描述</h3><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p>
<h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><p>len()方法语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>( s )</span><br></pre></td></tr></table></figure>

<h3 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  s – 对象。</li>
</ul>
<h3 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象长度。</p>
<h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 len() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(b)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="max"><a href="#max" class="headerlink" title="max"></a><code>max</code></h2><h3 id="描述-16"><a href="#描述-16" class="headerlink" title="描述"></a>描述</h3><p>max() 方法返回给定参数的最大值，参数可以为序列。</p>
<h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><p>以下是 max() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>

<h3 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 数值表达式。</li>
<li>  y – 数值表达式。</li>
<li>  z – 数值表达式。</li>
</ul>
<h3 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h3><p>返回给定参数的最大值。</p>
<h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 max() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>], [<span class="number">2</span>])</span><br><span class="line">[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h2 id="min"><a href="#min" class="headerlink" title="min"></a><code>min</code></h2><h3 id="描述-17"><a href="#描述-17" class="headerlink" title="描述"></a>描述</h3><p>min() 方法返回给定参数的最小值，参数可以为序列。</p>
<h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><p>以下是 min() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure>

<h3 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 数值表达式。</li>
<li>  y – 数值表达式。</li>
<li>  z – 数值表达式。</li>
</ul>
<h3 id="返回值-17"><a href="#返回值-17" class="headerlink" title="返回值"></a>返回值</h3><p>返回给定参数的最小值。</p>
<h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 min() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(<span class="number">1</span>, <span class="number">23</span>, -<span class="number">43</span>)</span><br><span class="line">-<span class="number">43</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>([<span class="number">12</span>, <span class="number">0</span>, -<span class="number">12</span>])</span><br><span class="line">-<span class="number">12</span></span><br></pre></td></tr></table></figure>

<h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a><code>sum</code></h2><h3 id="描述-18"><a href="#描述-18" class="headerlink" title="描述"></a>描述</h3><p><strong>sum()</strong> 方法对序列进行求和计算。</p>
<h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><p>以下是 sum() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(iterable[, start])</span><br></pre></td></tr></table></figure>

<h3 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 可迭代对象，如：列表、元组、集合。</li>
<li>  start – 指定相加的参数，如果没有设置这个值，默认为0。</li>
</ul>
<h3 id="返回值-18"><a href="#返回值-18" class="headerlink" title="返回值"></a>返回值</h3><p>返回计算结果。</p>
<h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 sum 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">64</span>]: alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: <span class="built_in">sum</span>(alist)  <span class="comment"># 不支持单个元素相加</span></span><br><span class="line">Out[<span class="number">65</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: <span class="built_in">sum</span>(alist, <span class="number">2</span>)  <span class="comment"># 在列表求和基础上再加2</span></span><br><span class="line">Out[<span class="number">66</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure>



<h2 id="range"><a href="#range" class="headerlink" title="range"></a><code>range</code></h2><h3 id="描述-19"><a href="#描述-19" class="headerlink" title="描述"></a>描述</h3><p><strong>range()</strong> 返回的是一个可迭代对象（类型是对象），而不是列表类型。</p>
<h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop[, step])</span><br></pre></td></tr></table></figure>

<h3 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  start: 计数从 start 开始。默认是从 0 开始。例如<code>range(5)</code>等价于<code>range(0,5)</code>;</li>
<li>  stop: 计数到 stop 结束，<strong>但不包括 stop</strong>。例如：<code>range(0,5)</code> 是<code>[0, 1, 2, 3, 4]</code>没有5</li>
<li>  step：步长，默认为1。例如：<code>range(0,5)</code>等价于 <code>range(0,5,1)</code></li>
</ul>
<h3 id="返回值-19"><a href="#返回值-19" class="headerlink" title="返回值"></a>返回值</h3><p>可迭代对象。</p>
<h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 range 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">7</span>, -<span class="number">2</span>))</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="number">10</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="chr"><a href="#chr" class="headerlink" title="chr"></a><code>chr</code></h2><h3 id="描述-20"><a href="#描述-20" class="headerlink" title="描述"></a>描述</h3><p>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p>
<h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><p>以下是 chr() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  i – 可以是10进制也可以是16进制的形式的数字。</li>
</ul>
<h3 id="返回值-20"><a href="#返回值-20" class="headerlink" title="返回值"></a>返回值</h3><p>返回值是当前整数对应的 ASCII 字符。</p>
<h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 chr() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x30</span>), <span class="built_in">chr</span>(<span class="number">0x31</span>), <span class="built_in">chr</span>(<span class="number">0x61</span>))  <span class="comment"># 十六进制</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> a</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">48</span>), <span class="built_in">chr</span>(<span class="number">49</span>), <span class="built_in">chr</span>(<span class="number">97</span>))         <span class="comment"># 十进制</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> a</span><br></pre></td></tr></table></figure>



<h2 id="ord"><a href="#ord" class="headerlink" title="ord"></a><code>ord</code></h2><h3 id="描述-21"><a href="#描述-21" class="headerlink" title="描述"></a>描述</h3><p>ord() 函数是 chr() 函数的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，如果所给的字符超出了 Python 定义范围，则会引发一个 TypeError 的异常。</p>
<h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><p>以下是 ord() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(c)</span><br></pre></td></tr></table></figure>

<h3 id="参数-18"><a href="#参数-18" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  c – 字符。</li>
</ul>
<h3 id="返回值-21"><a href="#返回值-21" class="headerlink" title="返回值"></a>返回值</h3><p>返回值是对应的十进制整数。</p>
<h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 ord() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">97</span></span><br></pre></td></tr></table></figure>

<h2 id="str"><a href="#str" class="headerlink" title="str"></a><code>str</code></h2><h3 id="描述-22"><a href="#描述-22" class="headerlink" title="描述"></a>描述</h3><p>str() 函数将对象转化为字符串格式。</p>
<h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><p>以下是 str() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">object</span>=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="参数-19"><a href="#参数-19" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象。</li>
</ul>
<h3 id="返回值-22"><a href="#返回值-22" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个对象的string格式。</p>
<h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 str() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">31</span>]: <span class="built_in">str</span>()</span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: <span class="built_in">str</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a><code>tuple</code></h2><h3 id="描述-23"><a href="#描述-23" class="headerlink" title="描述"></a>描述</h3><p>tuple 函数将可迭代系列（如列表）转换为元组。</p>
<h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><p>以下是 tuple 的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>( iterable )</span><br></pre></td></tr></table></figure>

<h3 id="参数-20"><a href="#参数-20" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 要转换为元组的可迭代序列。</li>
</ul>
<h3 id="返回值-23"><a href="#返回值-23" class="headerlink" title="返回值"></a>返回值</h3><p>返回元组。</p>
<h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 tuple 的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">62</span>]: alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: <span class="built_in">tuple</span>(alist)</span><br><span class="line">Out[<span class="number">63</span>]: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a><code>bool</code></h2><h3 id="描述-24"><a href="#描述-24" class="headerlink" title="描述"></a>描述</h3><p>函数用于将给定参数转换为布尔类型，如果没有参数，返回 <code>False</code>。</p>
<ul>
<li>传入布尔类型时，按原值返回</li>
<li>参数如果缺省，则返回 <code>False</code></li>
<li>传入字符串时，空字符串返回 <code>False</code>，否则返回 <code>True</code></li>
<li>传入数值时，0 值返回 <code>False</code>，否则返回 <code>True</code></li>
<li>传入元组、列表、字典等对象时，元素个数为空返回 <code>False</code>，否则返回 <code>True</code></li>
</ul>
<p>bool 是 int 的子类。</p>
<h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><p>以下是 bool() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>([x])</span><br></pre></td></tr></table></figure>

<h3 id="参数-21"><a href="#参数-21" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  x – 要进行转换的参数。</li>
</ul>
<h3 id="返回值-24"><a href="#返回值-24" class="headerlink" title="返回值"></a>返回值</h3><p>返回 True 或 False。</p>
<h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 bool 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>())  <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">True</span>))  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))  <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;123&quot;</span>))  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))  <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([])) <span class="comment">#False  若元祖和字典为空时 也为False ，不为空 则为True</span></span><br></pre></td></tr></table></figure>

<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a><code>dict</code></h2><h3 id="描述-25"><a href="#描述-25" class="headerlink" title="描述"></a>描述</h3><p><strong>dict()</strong> 函数用于创建一个字典。</p>
<h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><p>dict 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dict</span>(<span class="params">**kwarg</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">dict</span>(<span class="params">mapping, **kwarg</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">dict</span>(<span class="params">iterable, **kwarg</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="参数-22"><a href="#参数-22" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  **kwargs – 关键字</li>
<li>  mapping – 元素的容器。</li>
<li>  iterable – 可迭代对象。</li>
</ul>
<h3 id="返回值-25"><a href="#返回值-25" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个字典。</p>
<h3 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 dict 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span>()                        <span class="comment"># 创建空字典</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(a=<span class="string">&#x27;a&#x27;</span>, b=<span class="string">&#x27;b&#x27;</span>, t=<span class="string">&#x27;t&#x27;</span>)     <span class="comment"># 传入关键字</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;t&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))   <span class="comment"># 映射函数方式来构造字典</span></span><br><span class="line">&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>&#125; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])    <span class="comment"># 可迭代对象方式来构造字典</span></span><br><span class="line">&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a><code>list</code></h2><h3 id="描述-26"><a href="#描述-26" class="headerlink" title="描述"></a>描述</h3><p>list() 方法用于将可迭代对象转换为列表。</p>
<h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><p>list()方法语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>( iterable )</span><br></pre></td></tr></table></figure>

<h3 id="参数-23"><a href="#参数-23" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 要转换为列表的可迭代对象。</li>
</ul>
<h3 id="返回值-26"><a href="#返回值-26" class="headerlink" title="返回值"></a>返回值</h3><p>返回列表。</p>
<h3 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 list() 函数的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;HELLO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a)</span><br><span class="line">[<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(c)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(d)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(d.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(d.items())</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h2><h3 id="描述-27"><a href="#描述-27" class="headerlink" title="描述"></a>描述</h3><p><strong>set()</strong> 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p>
<h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><p>set 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>([iterable])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  iterable – 可迭代对象对象；</li>
</ul>
<h3 id="返回值-27"><a href="#返回值-27" class="headerlink" title="返回值"></a>返回值</h3><p>返回新的集合对象。</p>
<h3 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 set 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: x = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: y = <span class="built_in">set</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: x  <span class="comment"># 删除重复元素</span></span><br><span class="line">Out[<span class="number">25</span>]: &#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: y</span><br><span class="line">Out[<span class="number">26</span>]: &#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;w&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: x &amp; y  <span class="comment"># 交集</span></span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: x | y  <span class="comment"># 并集</span></span><br><span class="line">Out[<span class="number">28</span>]: &#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;w&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: x - y  <span class="comment"># 差集</span></span><br><span class="line">Out[<span class="number">29</span>]: &#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;h&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: y - x</span><br><span class="line">Out[<span class="number">30</span>]: &#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;w&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset"></a><code>frozenset</code></h2><h3 id="描述-28"><a href="#描述-28" class="headerlink" title="描述"></a>描述</h3><p>frozenset() 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p>
<h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><p>frozenset() 函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>([iterable])</span><br></pre></td></tr></table></figure>

<h3 id="参数-24"><a href="#参数-24" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 可迭代的对象，比如列表、字典、元组等等。</li>
</ul>
<h3 id="返回值-28"><a href="#返回值-28" class="headerlink" title="返回值"></a>返回值</h3><p>返回新的 frozenset 对象，如果不提供任何参数，默认会生成空集合。</p>
<h3 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 frozenset() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">10</span>))     <span class="comment"># 生成一个新的不可变集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">frozenset</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">frozenset</span>(<span class="string">&#x27;runoob&#x27;</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="built_in">frozenset</span>([<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>])   <span class="comment"># 创建不可变集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">frozenset</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="built_in">frozenset</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(c)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h1 id="对象处理"><a href="#对象处理" class="headerlink" title="对象处理"></a>对象处理</h1><h2 id="id"><a href="#id" class="headerlink" title="id"></a><code>id</code></h2><h3 id="描述-29"><a href="#描述-29" class="headerlink" title="描述"></a>描述</h3><p><strong>id()</strong> 函数返回对象的唯一标识符，标识符是一个整数。</p>
<p>CPython 中 <strong>id()</strong> 函数用于获取对象的内存地址。</p>
<h3 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h3><p>id 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>([<span class="built_in">object</span>])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  object – 对象。</li>
</ul>
<h3 id="返回值-29"><a href="#返回值-29" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象的内存地址。</p>
<h3 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 id 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">4490924448</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;bookandmusic&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">4493910576</span></span><br></pre></td></tr></table></figure>

<h2 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h2><h3 id="描述-30"><a href="#描述-30" class="headerlink" title="描述"></a>描述</h3><p><strong>help()</strong> 函数用于查看函数或模块用途的详细说明。</p>
<h3 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h3><p>help 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>([<span class="built_in">object</span>])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  object – 对象；</li>
</ul>
<h3 id="返回值-30"><a href="#返回值-30" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象帮助信息。</p>
<h3 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 help 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;sys&#x27;</span>)             <span class="comment"># 查看 sys 模块的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;str&#x27;</span>)             <span class="comment"># 查看 str 数据类型的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a)                 <span class="comment"># 查看列表 list 帮助信息</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a.append)          <span class="comment"># 显示list的append方法的帮助</span></span><br><span class="line">……显示帮助信息……</span><br></pre></td></tr></table></figure>

<h2 id="print"><a href="#print" class="headerlink" title="print"></a><code>print</code></h2><h3 id="描述-31"><a href="#描述-31" class="headerlink" title="描述"></a>描述</h3><p><strong>print()</strong> 方法用于打印输出，最常见的一个函数。</p>
<p>在 Python3.3 版增加了 flush 关键字参数。</p>
<blockquote>
<p>  print 在 Python3.x 是一个函数，但在 Python2.x 版本不是一个函数，只是一个关键字。</p>
</blockquote>
<h3 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h3><p>以下是 print() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="参数-25"><a href="#参数-25" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</li>
<li>  sep – 用来间隔多个对象，默认值是一个空格。</li>
<li>  end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</li>
<li>  file – 要写入的文件对象。</li>
<li>  flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</li>
</ul>
<h3 id="返回值-31"><a href="#返回值-31" class="headerlink" title="返回值"></a>返回值</h3><p>无。</p>
<h3 id="实例-31"><a href="#实例-31" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 print 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: f = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: cat <span class="number">1.</span>txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, end=<span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">hello,world!</span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, end=<span class="string">&#x27;!&#x27;</span>, file=f)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: cat <span class="number">1.</span>txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, end=<span class="string">&#x27;!&#x27;</span>, file=f, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: cat <span class="number">1.</span>txt</span><br><span class="line">hello,world!hello,world!</span><br></pre></td></tr></table></figure>

<h2 id="type"><a href="#type" class="headerlink" title="type"></a><code>type</code></h2><h3 id="描述-32"><a href="#描述-32" class="headerlink" title="描述"></a>描述</h3><p>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p>
<h3 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h3><p>以下是 type() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">object</span>)</span><br><span class="line"><span class="built_in">type</span>(name, bases, <span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure>

<h3 id="参数-26"><a href="#参数-26" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  name – 类的名称。</li>
<li>  bases – 基类的元组。</li>
<li>  dict – 字典，类内定义的命名空间变量。</li>
</ul>
<h3 id="返回值-32"><a href="#返回值-32" class="headerlink" title="返回值"></a>返回值</h3><p>一个参数返回对象类型；三个参数，返回新的类型对象。</p>
<h3 id="实例-32"><a href="#实例-32" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 type 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">51</span>]: <span class="built_in">type</span>(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">1</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: B = <span class="built_in">type</span>(<span class="string">&#x27;B&#x27;</span>, (A,), &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)  <span class="comment"># 继承父类A，创建子类B</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: <span class="built_in">dir</span>(B)</span><br><span class="line">Out[<span class="number">54</span>]:[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="instance"><a href="#instance" class="headerlink" title="instance"></a><code>instance</code></h2><h3 id="描述-33"><a href="#描述-33" class="headerlink" title="描述"></a>描述</h3><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p>
<blockquote>
<p>  isinstance() 与 type() 区别：</p>
<ul>
<li>  type() 不会认为子类是一种父类类型，不考虑继承关系。</li>
<li>  isinstance() 会认为子类是一种父类类型，考虑继承关系。</li>
</ul>
<p>  如果要判断两个类型是否相同推荐使用 isinstance()。</p>
</blockquote>
<h3 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h3><p>以下是 isinstance() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">object</span>, classinfo)</span><br></pre></td></tr></table></figure>

<h3 id="参数-27"><a href="#参数-27" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 实例对象。</li>
<li>  classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li>
</ul>
<h3 id="返回值-33"><a href="#返回值-33" class="headerlink" title="返回值"></a>返回值</h3><p>如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False。。</p>
<h3 id="实例-33"><a href="#实例-33" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 isinstance 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,<span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,(<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">list</span>))    <span class="comment"># 是元组中的一个返回 True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <code>type()</code> 与 <code>isinstance()</code>区别：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">isinstance</span>(A(), A)    <span class="comment"># returns True</span></span><br><span class="line"><span class="built_in">type</span>(A()) == A        <span class="comment"># returns True</span></span><br><span class="line"><span class="built_in">isinstance</span>(B(), A)    <span class="comment"># returns True</span></span><br><span class="line"><span class="built_in">type</span>(B()) == A        <span class="comment"># returns False</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  对于基本类型来说 <strong>classinfo</strong> 可以是：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>，<span class="built_in">float</span>，<span class="built_in">bool</span>，<span class="built_in">complex</span>，<span class="built_in">str</span>(字符串)，<span class="built_in">list</span>，<span class="built_in">dict</span>(字典)，<span class="built_in">set</span>，<span class="built_in">tuple</span></span><br></pre></td></tr></table></figure>

<h2 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass"></a><code>issubclass</code></h2><h3 id="描述-34"><a href="#描述-34" class="headerlink" title="描述"></a>描述</h3><p><strong>issubclass()</strong> 方法用于判断参数 class 是否是类型参数 classinfo 的子类。</p>
<h3 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h3><p>以下是 issubclass() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="class"><span class="keyword">class</span>, <span class="title">classinfo</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="参数-28"><a href="#参数-28" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  class – 类。</li>
<li>  classinfo – 类。</li>
</ul>
<h3 id="返回值-34"><a href="#返回值-34" class="headerlink" title="返回值"></a>返回值</h3><p>如果 class 是 classinfo 的子类返回 True，否则返回 False。</p>
<h3 id="实例-34"><a href="#实例-34" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 issubclass 函数的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">148</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">     ...:     <span class="keyword">pass</span></span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: <span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">     ...:     <span class="keyword">pass</span></span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">150</span>]: <span class="built_in">issubclass</span>(B, A)</span><br><span class="line">Out[<span class="number">150</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: <span class="class"><span class="keyword">class</span> <span class="title">C</span>():</span></span><br><span class="line">     ...:     <span class="keyword">pass</span></span><br><span class="line">     ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: <span class="built_in">issubclass</span>(C, A)</span><br><span class="line">Out[<span class="number">152</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="all"><a href="#all" class="headerlink" title="all"></a><code>all</code></h2><h3 id="描述-35"><a href="#描述-35" class="headerlink" title="描述"></a>描述</h3><p>此函数用于判断给定的可迭代参数 <code>iterable</code> 中的所有元素是否都不为 <code>0</code>、都不为 <code>False</code> 或者 <code>iterable</code> 都 为空,如果是返回 <code>True</code>, 否则返回 <code>False</code>。</p>
<p>函数等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h3><p>以下是 all() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>(iterable)</span><br></pre></td></tr></table></figure>

<h3 id="参数-29"><a href="#参数-29" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 元组或列表。</li>
</ul>
<h3 id="返回值-35"><a href="#返回值-35" class="headerlink" title="返回值"></a>返回值</h3><p>如果iterable的所有元素不为0、’’、False或者iterable为空，all(iterable)返回True，否则返回False；</p>
<p><strong>注意：</strong>空元组、空列表返回值为True，这里要特别注意。</p>
<h3 id="实例-35"><a href="#实例-35" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 all() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="number">0</span>, <span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>]))          <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)))   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>((<span class="number">0</span>, <span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>)))          <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([]))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(()))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="any"><a href="#any" class="headerlink" title="any"></a><code>any</code></h2><h3 id="描述-36"><a href="#描述-36" class="headerlink" title="描述"></a>描述</h3><p>any() 函数用于判断给定的可迭代参数 <code>iterable</code> 是否全部为空对象,如果都为空、都为 0、或者都为 <code>false</code>，则返回 <code>False</code>,如果不都为空、不都为 <code>0</code>、不都为 <code>false</code>，则返回 <code>True</code>。</p>
<p>函数等价于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h3><p>以下是 any() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>(iterable)</span><br></pre></td></tr></table></figure>

<h3 id="参数-30"><a href="#参数-30" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  iterable – 元组或列表。</li>
</ul>
<h3 id="返回值-36"><a href="#返回值-36" class="headerlink" title="返回值"></a>返回值</h3><p>如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。</p>
<h3 id="实例-36"><a href="#实例-36" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 any() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="number">0</span>, <span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>]))          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>((<span class="number">0</span>, <span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>)))          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([]))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(()))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h2 id="dir"><a href="#dir" class="headerlink" title="dir   "></a><code>dir   </code></h2><h3 id="描述-37"><a href="#描述-37" class="headerlink" title="描述"></a>描述</h3><p>dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；</p>
<p>带参数时，返回参数的属性、方法列表。</p>
<p>如果参数包含方法<code>__dir__()</code>，该方法将被调用。</p>
<p>如果参数不包含<code>__dir__()</code>，该方法将最大限度地收集参数信息。</p>
<h3 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h3><p>以下是 dir() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>([<span class="built_in">object</span>])</span><br></pre></td></tr></table></figure>

<h3 id="参数-31"><a href="#参数-31" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象、变量、类型。</li>
</ul>
<h3 id="返回值-37"><a href="#返回值-37" class="headerlink" title="返回值"></a>返回值</h3><p>返回模块的属性列表。</p>
<h3 id="实例-37"><a href="#实例-37" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 dir() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>()   <span class="comment">#  获得当前模块的属性列表</span></span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;arr&#x27;</span>, <span class="string">&#x27;myslice&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>([ ])    <span class="comment"># 查看列表的方法</span></span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__delslice__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getslice__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__iadd__&#x27;</span>, <span class="string">&#x27;__imul__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__setslice__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;extend&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="locals"><a href="#locals" class="headerlink" title="locals"></a><code>locals</code></h2><h3 id="描述-38"><a href="#描述-38" class="headerlink" title="描述"></a>描述</h3><p><strong>locals()</strong> 函数会以字典类型返回当前位置的全部局部变量。</p>
<p>对于函数, 方法, lambda 函式, 类, 以及实现了 <strong>call</strong> 方法的类实例, 它都返回 True。</p>
<h3 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h3><p>locals() 函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">locals</span>()</span><br></pre></td></tr></table></figure>

<h3 id="参数-32"><a href="#参数-32" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  无</li>
</ul>
<h3 id="返回值-38"><a href="#返回值-38" class="headerlink" title="返回值"></a>返回值</h3><p>返回字典类型的局部变量。</p>
<h3 id="实例-38"><a href="#实例-38" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 locals() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    b = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="built_in">locals</span>()  <span class="comment"># 返回一个名字/值对的字典</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test()  </span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vars"><a href="#vars" class="headerlink" title="vars"></a><code>vars</code></h2><h3 id="描述-39"><a href="#描述-39" class="headerlink" title="描述"></a>描述</h3><p><strong>vars()</strong> 函数返回对象object的属性和属性值的字典对象。</p>
<h3 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h3><p>vars() 函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vars</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>

<h3 id="参数-33"><a href="#参数-33" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 参数可以是模块、类、类实例，或者定义了__dict__属性的对象。</li>
</ul>
<h3 id="返回值-39"><a href="#返回值-39" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象object的属性和属性值的字典对象，如果没有参数，就打印当前调用位置的属性和属性值 类似 locals()。</p>
<h3 id="实例-39"><a href="#实例-39" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 vars() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">35</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">1</span></span><br><span class="line">    ...:     b = <span class="number">2</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: <span class="built_in">vars</span>(A)</span><br><span class="line">Out[<span class="number">36</span>]:</span><br><span class="line">mappingproxy(&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;,</span><br><span class="line">              <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;,</span><br><span class="line">              <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: <span class="function"><span class="keyword">def</span> <span class="title">text</span>():</span></span><br><span class="line">    ...:     a = <span class="number">1</span></span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">vars</span>()</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: text()</span><br><span class="line">Out[<span class="number">38</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="globals"><a href="#globals" class="headerlink" title="globals"></a><code>globals</code></h2><h3 id="描述-40"><a href="#描述-40" class="headerlink" title="描述"></a>描述</h3><p><strong>globals()</strong> 函数会以字典类型返回当前位置的全部全局变量。</p>
<h3 id="语法-40"><a href="#语法-40" class="headerlink" title="语法"></a>语法</h3><p>globals() 函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">globals</span>()</span><br></pre></td></tr></table></figure>

<h3 id="参数-34"><a href="#参数-34" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  无</li>
</ul>
<h3 id="返回值-40"><a href="#返回值-40" class="headerlink" title="返回值"></a>返回值</h3><p>返回全局变量的字典。</p>
<h3 id="实例-40"><a href="#实例-40" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 globals() 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">text</span>():</span></span><br><span class="line"><span class="meta">... </span>    b = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text()</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>: &lt;function text at <span class="number">0x10d454050</span>&gt;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a><code>getattr</code></h2><h3 id="描述-41"><a href="#描述-41" class="headerlink" title="描述"></a>描述</h3><p><strong>getattr()</strong> 函数用于返回一个对象属性值。</p>
<h3 id="语法-41"><a href="#语法-41" class="headerlink" title="语法"></a>语法</h3><p>getattr 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">object</span>, name[, default])</span><br></pre></td></tr></table></figure>

<h3 id="参数-35"><a href="#参数-35" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象。</li>
<li>  name – 字符串，对象属性。</li>
<li>  default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>
</ul>
<h3 id="返回值-41"><a href="#返回值-41" class="headerlink" title="返回值"></a>返回值</h3><p>返回对象属性值。</p>
<h3 id="实例-41"><a href="#实例-41" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 getattr 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a, <span class="string">&#x27;bar&#x27;</span>)        <span class="comment"># 获取属性 bar 值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a, <span class="string">&#x27;bar2&#x27;</span>)       <span class="comment"># 属性 bar2 不存在，触发异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;bar2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a, <span class="string">&#x27;bar2&#x27;</span>, <span class="number">3</span>)    <span class="comment"># 属性 bar2 不存在，但设置了默认值</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="setattr"><a href="#setattr" class="headerlink" title="setattr"></a><code>setattr</code></h2><h3 id="描述-42"><a href="#描述-42" class="headerlink" title="描述"></a>描述</h3><p><strong>setattr()</strong> 函数用于设置属性值，该属性不一定是存在的。</p>
<h3 id="语法-42"><a href="#语法-42" class="headerlink" title="语法"></a>语法</h3><p>setattr() 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(<span class="built_in">object</span>, name, value)</span><br></pre></td></tr></table></figure>

<h3 id="参数-36"><a href="#参数-36" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象。</li>
<li>  name – 字符串，对象属性。</li>
<li>  value – 属性值。</li>
</ul>
<h3 id="返回值-42"><a href="#返回值-42" class="headerlink" title="返回值"></a>返回值</h3><p>无。</p>
<h3 id="实例-42"><a href="#实例-42" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 setattr() 函数的使用方法：</p>
<p>对已存在的属性进行赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">74</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">2</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: <span class="built_in">getattr</span>(A, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Out[<span class="number">75</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: <span class="built_in">setattr</span>(A, <span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: <span class="built_in">getattr</span>(A, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Out[<span class="number">77</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>如果属性不存在会创建一个新的对象属性，并对属性赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">81</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">2</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: <span class="built_in">setattr</span>(A, <span class="string">&#x27;b&#x27;</span>, <span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: <span class="built_in">getattr</span>(A, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">Out[<span class="number">82</span>]: <span class="number">55</span></span><br></pre></td></tr></table></figure>

<h2 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr"></a><code>hasattr</code></h2><h3 id="描述-43"><a href="#描述-43" class="headerlink" title="描述"></a>描述</h3><p><strong>hasattr()</strong> 函数用于判断对象是否包含对应的属性。</p>
<h3 id="语法-43"><a href="#语法-43" class="headerlink" title="语法"></a>语法</h3><p>hasattr 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(<span class="built_in">object</span>, name)</span><br></pre></td></tr></table></figure>

<h3 id="参数-37"><a href="#参数-37" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象。</li>
<li>  name – 字符串，属性名。</li>
</ul>
<h3 id="返回值-43"><a href="#返回值-43" class="headerlink" title="返回值"></a>返回值</h3><p>如果对象有该属性返回 True，否则返回 False。</p>
<h3 id="实例-43"><a href="#实例-43" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 hasattr 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">88</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">2</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: <span class="built_in">hasattr</span>(A, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Out[<span class="number">89</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: <span class="built_in">hasattr</span>(A, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">Out[<span class="number">90</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="delattr"><a href="#delattr" class="headerlink" title="delattr"></a><code>delattr</code></h2><h3 id="描述-44"><a href="#描述-44" class="headerlink" title="描述"></a>描述</h3><p><strong>delattr</strong> 函数用于删除属性。</p>
<p><strong><code>delattr(x, &#39;foobar&#39;)</code></strong> 相等于 **<code>del x.foobar</code>**。</p>
<h3 id="语法-44"><a href="#语法-44" class="headerlink" title="语法"></a>语法</h3><p>delattr 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delattr</span>(<span class="built_in">object</span>, name)</span><br></pre></td></tr></table></figure>

<h3 id="参数-38"><a href="#参数-38" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  object – 对象。</li>
<li>  name – 必须是对象的属性。</li>
</ul>
<h3 id="返回值-44"><a href="#返回值-44" class="headerlink" title="返回值"></a>返回值</h3><p>无。</p>
<h3 id="实例-44"><a href="#实例-44" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 delattr 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">85</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    ...:     a = <span class="number">2</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: <span class="built_in">delattr</span>(A, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">87</span>]: <span class="built_in">hasattr</span>(A, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Out[<span class="number">87</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a><code>reversed</code></h2><h3 id="描述-45"><a href="#描述-45" class="headerlink" title="描述"></a>描述</h3><p>reversed 函数返回一个反转的迭代器。</p>
<h3 id="语法-45"><a href="#语法-45" class="headerlink" title="语法"></a>语法</h3><p>以下是 reversed 的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reversed</span>(seq)</span><br></pre></td></tr></table></figure>

<h3 id="参数-39"><a href="#参数-39" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  seq – 要转换的序列，可以是 tuple, string, list 或 range。</li>
</ul>
<h3 id="返回值-45"><a href="#返回值-45" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个反转的迭代器。</p>
<h3 id="实例-45"><a href="#实例-45" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 reversed 的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">Out[<span class="number">14</span>]: &lt;list_reverseiterator at <span class="number">0x10fa35850</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">list</span>(<span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]))</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate "></a><code>enumerate </code></h2><h3 id="描述-46"><a href="#描述-46" class="headerlink" title="描述"></a>描述</h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>
<h3 id="语法-46"><a href="#语法-46" class="headerlink" title="语法"></a>语法</h3><p>以下是 enumerate() 方法的语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h3 id="参数-40"><a href="#参数-40" class="headerlink" title="参数"></a>参数</h3><ul>
<li>  sequence – 一个序列、迭代器或其他支持迭代对象。</li>
<li>  start – 下标起始位置。</li>
</ul>
<h3 id="返回值-46"><a href="#返回值-46" class="headerlink" title="返回值"></a>返回值</h3><p>返回 enumerate(枚举) 对象。</p>
<h3 id="实例-46"><a href="#实例-46" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 enumerate() 方法的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, start=<span class="number">1</span>))       <span class="comment"># 下标从 1 开始</span></span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h2><h3 id="描述-47"><a href="#描述-47" class="headerlink" title="描述"></a>描述</h3><p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p>
<p>我们可以使用 list() 转换来输出列表。</p>
<p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 ***** 号操作符，可以将元组解压为列表。</p>
<h3 id="语法-47"><a href="#语法-47" class="headerlink" title="语法"></a>语法</h3><p>zip 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span>([iterable, ...])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>  iterabl – 一个或多个迭代器;</li>
</ul>
<h2 id="返回值-47"><a href="#返回值-47" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个对象。</p>
<h2 id="实例-47"><a href="#实例-47" class="headerlink" title="实例"></a>实例</h2><p>以下实例展示了 zip 的使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">103</span>]: a  = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: <span class="built_in">zip</span>(a, b)</span><br><span class="line">Out[<span class="number">105</span>]: &lt;<span class="built_in">zip</span> at <span class="number">0x10f32f870</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: <span class="built_in">list</span>(<span class="built_in">zip</span>(a, b))</span><br><span class="line">Out[<span class="number">106</span>]: [(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">125</span>]: d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: <span class="built_in">list</span>(<span class="built_in">zip</span>(*d.items()))</span><br><span class="line">Out[<span class="number">127</span>]: [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基础-ORM模型类</title>
    <url>/2020/05/24/qkL5QC5Ly/</url>
    <content><![CDATA[<p><strong><code>ORM</code></strong> 全拼<code>Object-Relation Mapping</code>，中文意为 **<code>对象-关系映射</code>**。在<code>MVC</code>/<code>MVT</code>设计模式中的<code>Model</code>模块中都包括<code>ORM</code>。</p>
<span id="more"></span>
<h2 id="ORM介绍"><a href="#ORM介绍" class="headerlink" title="ORM介绍"></a>ORM介绍</h2><h3 id="ORM-优势"><a href="#ORM-优势" class="headerlink" title="ORM 优势"></a>ORM 优势</h3><p>（1）只需要面向对象编程, 不需要面向数据库编写代码.</p>
<ul>
<li>对数据库的操作都转化成对类属性和方法的操作.</li>
<li>不用编写各种数据库的 sql 语句.</li>
</ul>
<p>（2）实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.</p>
<ul>
<li>不在关注用的是<code>mysql</code>、<code>oracle</code>… 等.</li>
<li>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</li>
</ul>
<h3 id="ORM-劣势"><a href="#ORM-劣势" class="headerlink" title="ORM 劣势"></a>ORM 劣势</h3><ul>
<li>相比较直接使用 SQL 语句操作数据库, 有性能损失.</li>
<li>根据对象的操作转换成 SQL 语句, 根据查询的结果转化成对象, 在映射过程中有性能损失.</li>
</ul>
<h3 id="ORM-和数据库关系："><a href="#ORM-和数据库关系：" class="headerlink" title="ORM 和数据库关系："></a>ORM 和数据库关系：</h3><p>在 Django 中 model 是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.</p>
<p>基本情况：</p>
<p>每个模型都是一个 Python 类，它是 django.db.models.Model 的子类。</p>
<p>模型的每个属性都代表一个数据库字段。</p>
<p>综上所述，Django 为您提供了一个自动生成的数据库访问 API。</p>
<p><img src="https://gitee.com/bookandmusic/imgs/raw/master/uPic/2020%2005/ORM%E7%A4%BA%E6%84%8F%E5%9B%BE%20.png" alt="ORM示意图"></p>
<h2 id="Django配置使用mysql数据库"><a href="#Django配置使用mysql数据库" class="headerlink" title="Django配置使用mysql数据库"></a>Django配置使用mysql数据库</h2><h3 id="settings-py配置DATABASES"><a href="#settings-py配置DATABASES" class="headerlink" title="settings.py配置DATABASES"></a><code>settings.py</code>配置<code>DATABASES</code></h3><p>默认:<code>&#123;&#125;</code>(空字典)</p>
<p>一个字典，包含Django使用的所有数据库的设置。它是一个嵌套的字典，其内容将数据库别名映射到包含单个数据库选项的字典。</p>
<p>数据库设置必须配置一个默认数据库;还可以指定任意数量的其他数据库。</p>
<p>最简单的设置文件是针对使用SQLite的单数据库设置的。这可以配置使用以下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当连接到其他数据库后端(如<code>MySQL</code>、<code>Oracle</code>或<code>PostgreSQL</code>)时，需要额外的连接参数。有关如何指定其他数据库类型，请参阅下面的引擎设置。这个例子是为<code>MySQL</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;mysqlroot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MySQL连接工具"><a href="#MySQL连接工具" class="headerlink" title="MySQL连接工具"></a><code>MySQL</code>连接工具</h3><ol>
<li><p>需要安装<code>pymysql</code>模块</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></li>
<li><p>在项目的<code>__init__.py</code>初始化文件,添加如下信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li>
<li><p>在django最新版本中，提示”Django需要mysqlclient 1.3.13或更高版本”。要么在报错时，将抛出版本异常的代码注释掉,仍然使用<code>pymysql</code>；要么直接使用<code>mysqlclient</code>,不建议直接<code>pip</code>命令安装，可以使用<code>conda</code>创建虚拟环境，使用<code>conda</code>安装<code>mysqlclient</code>。</p>
</li>
</ol>
<h2 id="字段属性和选项"><a href="#字段属性和选项" class="headerlink" title="字段属性和选项"></a>字段属性和选项</h2><h3 id="模型类属性命名限制"><a href="#模型类属性命名限制" class="headerlink" title="模型类属性命名限制"></a>模型类属性命名限制</h3><ul>
<li><p>不能是python的保留关键字。</p>
</li>
<li><p><strong>不允许使用连续的下划线，这是由django的查询方式决定的。</strong></p>
</li>
<li><p>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">属性名=models.字段类型(选项)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><h5 id="AutoField"><a href="#AutoField" class="headerlink" title="AutoField"></a><code>AutoField</code></h5><p>根据可用id自动递增的一个32位(<code>4 byte</code>)的整数(<code>Integer</code>)字段,它的适用范围为:<code>1</code>到<code>2147483647</code>之间。</p>
<p>你通常不需要直接使用它;如果不进行其他指定，主键字段将自动添加到模型中。</p>
<p>默认情况下， Django 会给每一个模型添加下面的字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>这是一个自增的主键。</p>
<p>如果你想自己指定主键， 在你想要设置为主键的字段上设置参数 <code>primary_key=True</code>。如果 Django 看到你显式地设置了 <code>Field.primary_key</code>，将不会自动在表（模型）中添加 <code>id</code> 列。</p>
<p>每个模型都需要拥有一个设置了 <code>primary_key=True</code> 的字段（无论是显式的设置还是 Django 自动设置）</p>
<h5 id="BigAutoField"><a href="#BigAutoField" class="headerlink" title="BigAutoField"></a><code>BigAutoField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>AutoField</code>，除了它的适用范围为:<code>1</code>到<code>9223372036854775807</code>之间。</p>
<h5 id="IntegerField"><a href="#IntegerField" class="headerlink" title="IntegerField"></a><code>IntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数。在Django支持的所有数据库中，<code>-2147483648</code>到<code>2147483647</code>之间的值都是安全的。</p>
<h5 id="BigIntegerField"><a href="#BigIntegerField" class="headerlink" title="BigIntegerField"></a><code>BigIntegerField</code></h5><p>一个64位(<code>8 byte</code>)的整数，类似于<code>IntegerField</code>，除了它保证适合从<code>-9223372036854775808</code>到<code>9223372036854775807</code>的数字。</p>
<h5 id="SmallIntegerField"><a href="#SmallIntegerField" class="headerlink" title="SmallIntegerField"></a><code>SmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>IntegerField</code>,在Django支持的所有数据库中，<code>-32768</code>到<code>32767</code>之间的值都是安全的。</p>
<h5 id="PositiveIntegerField"><a href="#PositiveIntegerField" class="headerlink" title="PositiveIntegerField"></a><code>PositiveIntegerField</code></h5><p>一个32位(<code>4 byte</code>)的整数，类似于<code>IntegerField</code>，但必须是正数或零(0)。在Django支持的所有数据库中，<code>0</code>到<code>2147483647</code>之间的值都是安全的。由于向后兼容的原因，接受值<code>0</code>。</p>
<h5 id="PositiveSmallIntegerField"><a href="#PositiveSmallIntegerField" class="headerlink" title="PositiveSmallIntegerField"></a><code>PositiveSmallIntegerField</code></h5><p>一个8位(<code>2 byte</code>)的整数，类似于<code>PositiveIntegerField</code>，在Django支持的所有数据库中，<code>0</code>到<code>32767</code>之间的值都是安全的</p>
<h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><h5 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField"></a><code>FloatField</code></h5><p>在Python中由 <code>float</code> 实例表示的浮点数。</p>
<h5 id="DecimalField"><a href="#DecimalField" class="headerlink" title="DecimalField"></a><code>DecimalField</code></h5><p>一种固定精度的十进制数，在Python中用<code> Decimal</code>实例表示。它使用<code>DecimalValidator</code>验证输入。</p>
<p>有两个必要的参数:</p>
<h6 id="DecimalField-max-digits"><a href="#DecimalField-max-digits" class="headerlink" title="DecimalField.max_digits"></a><code>DecimalField.max_digits</code></h6><p>数字中允许的最大位数。注意，这个数字必须大于或等于<code>decimal_places</code>。</p>
<h6 id="DecimalField-decimal-places"><a href="#DecimalField-decimal-places" class="headerlink" title="DecimalField.decimal_places"></a><code>DecimalField.decimal_places</code></h6><p>要与该数字一起存储的小数位数。</p>
<p>例如，要存储分辨率为两位小数的999以内的数字，需要使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.DecimalField(..., max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<blockquote>
<p><code>FloatField</code> <strong>vs.</strong> <code>DecimalField</code></p>
<p><code>FloatField</code>类有时会与<code>DecimalField</code>类混在一起。虽然它们都表示实数，但它们表示的是不同的数。<code>FloatField</code>在内部使用Python的<code>float</code>类型，而<code>DecimalField</code>使用Python的<code>Decimal</code>类型。有关两者之间差异的信息，请参阅Python的 <a href="https://docs.python.org/3/library/decimal.html#module-decimal"><code>decimal</code></a> 模块文档。</p>
</blockquote>
<h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><h5 id="BooleanField"><a href="#BooleanField" class="headerlink" title="BooleanField"></a><code>BooleanField</code></h5><p>一个<code>true</code>/<code>false</code>字段。</p>
<p>当<code>Field.default</code>未定义时，<code>BooleanField</code>的默认值为<code>None</code></p>
<blockquote>
<p>Django 2.1:<br>在旧版本中，这个字段不允许<code>null=True</code>，因此必须使用<code>NullBooleanField</code>。现在不建议使用后者，因为在Django的未来版本中可能会弃用它。</p>
<p>在较早的版本中，该字段隐式地具有<code>blank=True</code>。您可以通过设置blank=True来恢复前面的行为。</p>
</blockquote>
<h5 id="NullBooleanField"><a href="#NullBooleanField" class="headerlink" title="NullBooleanField"></a><code>NullBooleanField</code></h5><p>类似<code>BooleanField</code>的<code>null=True</code>。使用<code>BooleanField</code>这个字段而不是<code>NullBooleanField</code>这个字段，因为在Django的未来版本中<code>NullBooleanField</code>可能会被弃用</p>
<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><h5 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a><code>CharField</code></h5><p>字符串字段，用于小型到大型字符串。<code>CharField</code>有一个额外的必要参数:</p>
<h6 id="CharField-max-length"><a href="#CharField-max-length" class="headerlink" title="CharField.max_length"></a><code>CharField.max_length</code></h6><p>字段的最大长度(以字符为单位)。<code>max_length</code>在数据库标准和Django的验证中使用<code>MaxLengthValidator</code>执行。</p>
<p>对于大量文本，使用<code>TextField</code>。</p>
<h5 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a><code>TextField</code></h5><p>一个大的文本字段。这个字段的默认表单小部件是一个<code>Textarea</code>。</p>
<p>如果指定max_length属性，它将反映在自动生成表单字段的<code>Textarea</code>小部件中。然而，它并没有在模型或数据库级别强制执行。</p>
<h5 id="URLField"><a href="#URLField" class="headerlink" title="URLField"></a><code>URLField</code></h5><p>一个有关<code>URL</code>的<code>CharField</code>，由<code>URLValidator</code>验证该值是否为有效的<code>URL</code>地址。</p>
<p>与所有<code>CharField</code>子类一样，<code>URLField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值200。</p>
<h5 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField"></a><code>EmailField</code></h5><p>一个有关<code>Email</code>的<code>CharField</code>,由<code>EmailValidator</code>验证该值是否为有效的电子邮件地址。</p>
<p>与所有<code>CharField</code>子类一样，<code>EmailField</code>接受可选的<code>max_length</code>参数。如果不指定<code>max_length</code>，则使用默认值254。</p>
<h5 id="UUIDField"><a href="#UUIDField" class="headerlink" title="UUIDField"></a><code>UUIDField</code></h5><p>用于存储通用唯一标识符的字段。使用Python的<code>UUID</code>类。当在<code>PostgreSQL</code>上使用时，它以<code>uuid</code>数据类型存储，否则以<code>char(32)</code>存储。</p>
<p>全局惟一标识符是<code>primary_key</code>的<code>AutoField</code>的一个很好的替代方案。数据库不会为你生成<strong>UUID</strong>，建议使用默认:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUUIDModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.UUIDField(primary_key=<span class="literal">True</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># other fields</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，一个回调函数(省略括号)被传递到<code>default</code>，而不是<strong>UUID</strong>的一个实例。</p>
</blockquote>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h5 id="FileField"><a href="#FileField" class="headerlink" title="FileField"></a><code>FileField</code></h5><p>一个文件上传字段。有两个可选参数:</p>
<h6 id="FileField-upload-to"><a href="#FileField-upload-to" class="headerlink" title="FileField.upload_to"></a><code>FileField.upload_to</code></h6><p>这个属性提供了一种设置上传目录和文件名的方法，可以通过两种方式进行设置。在这两种情况下，值都被传递到<code>Storage.save()</code>方法。</p>
<p>如果您指定一个字符串值，它可能包含<code>strftime()</code>格式，它将被文件上传的日期/时间所取代(这样上传的文件就不会填满给定的目录)。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 文件将被上传至 MEDIA_ROOT/uploads</span></span><br><span class="line">    upload = models.FileField(upload_to=<span class="string">&#x27;uploads/&#x27;</span>)</span><br><span class="line">    <span class="comment"># or...</span></span><br><span class="line">    <span class="comment"># 文件将被上传至 MEDIA_ROOT/uploads/2015/01/30</span></span><br><span class="line">    upload = models.FileField(upload_to=<span class="string">&#x27;uploads/%Y/%m/%d/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果使用默认的<code>FileSystemStorage</code>，字符串值将追加到<code>MEDIA_ROOT</code>路径，以形成本地文件系统上的位置，上传的文件将存储在此位置。如果使用不同的存储，请检查该存储的文档，以了解它如何处理<code>upload_to</code>。</p>
<p><code>upload_to</code>也可以是一个可调用的函数。这个函数将被调用以获得上传路径，包括文件名。这个可调用函数必须接受两个参数，并返回一个<code>unix</code>风格的路径(带有斜杠)，以便传递给存储系统。这两个参数是:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>instance</code></td>
<td>定义FileField的模型的一个实例。更具体地说，这是附加当前文件的特定实例。<br/>在大多数情况下，这个对象还没有保存到数据库中，所以如果它使用默认的<code>AutoField</code>，那么它的主键字段可能还没有值。</td>
</tr>
<tr>
<td><code>filename</code></td>
<td>原给定给该文件的文件名。在确定最终目的地路径时，可能会考虑这一点，也可能不考虑这一点。</td>
</tr>
</tbody></table>
<p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_directory_path</span>(<span class="params">instance, filename</span>):</span></span><br><span class="line">    <span class="comment"># file will be uploaded to MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_&#123;0&#125;/&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(instance.user.<span class="built_in">id</span>, filename)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    upload = models.FileField(upload_to=user_directory_path)</span><br></pre></td></tr></table></figure>

<h6 id="FileField-storage"><a href="#FileField-storage" class="headerlink" title="FileField.storage"></a><code>FileField.storage</code></h6><p>一个存储对象，它处理文件的存储和检索。有关如何提供此对象的详细信息，请参见 <a href="https://docs.djangoproject.com/en/2.2/topics/files/">管理文件</a> 。</p>
<p>在模型中使用<code>FileField</code>或<code>ImageField</code>需要几个步骤:</p>
<ol>
<li>在设置文件中，需要将<code>MEDIA_ROOT</code>定义为一个目录的完整路径，您希望<code>Django</code>在这个目录中存储上传的文件。(为了提高性能，这些文件不存储在数据库中。)将<code>MEDIA_URL</code>定义为该目录的基本公共<code>URL</code>。确保此目录可由<code>Web</code>服务器的用户帐户写入。</li>
<li>将<code>FileField</code>或<code>ImageField</code>添加到模型中，定义<code>upload_to</code>选项，以指定<code>MEDIA_ROOT</code>的子目录，用于上传文件。</li>
<li>所有将存储在数据库中的内容都是文件的路径(相对于<code>MEDIA_ROOT</code>)。您很可能希望使用Django提供的便利url属性。例如，如果 <code>ImageField</code>被称为 <code>mug_shot</code> ，可以获取模板中图像的绝对路径 <code>&#123;&#123; object.mug_shot.url &#125;&#125;</code> </li>
</ol>
<p>例如，假设<code>MEDIA_ROOT</code>设置为<code>&#39;/home/media&#39;</code>， <code>upload_to</code>设置为<code>&#39;photos/%Y/%m/%d&#39;</code>。<code>upload_to</code>的<code>&#39;%Y/%m/%d&#39;</code>部分是<code>strftime()</code>格式;<code>&#39;%Y&#39;</code>是四位数的年份，<code>&#39;%m&#39;是</code>两位数的月份，<code>&#39;%d&#39;</code>是两位数的日期。如果你在2007年1月15日上传了一个文件，它将被保存在<code>/home/media/photos/2007/01/15</code>目录下。</p>
<p>如果要检索上传文件的磁盘上文件名或文件大小，可以分别使用<a href="https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.name"><code>名称</code></a> 和<a href="https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File.size"><code>大小</code></a> 属性;有关可用属性和方法的更多信息，请参见 <a href="https://docs.djangoproject.com/en/2.2/ref/files/file/#django.core.files.File"><code>文件</code></a>类引用和 <a href="https://docs.djangoproject.com/en/2.2/topics/files/">管理文件</a>主题指南。</p>
<blockquote>
<p>文件作为模型保存在数据库中的一部分保存，因此在保存模型之前，不能依赖于磁盘上使用的实际文件名。</p>
</blockquote>
<p>请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传一个<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的<strong>URL</strong>来执行该脚本。不要允许这样的操作。</p>
<p>还要注意，即使是上传的<strong>HTML</strong>文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或请注意，无论何时处理上传的文件，都应该密切注意上传文件的位置和文件类型，以避免安全漏洞。验证所有上传的文件，以确保这些文件是您所认为的。例如，如果您盲目地让某人在未经验证的情况下将文件上传到Web服务器的文档根目录中，那么某人就可以上传到<strong>CGI</strong>或<strong>PHP</strong>脚本，并通过访问该脚本在您的站点上的URL来执行该脚本。不要允许这样的操作。</p>
<p>还要注意，即使是上传的HTML文件，由于它可以由浏览器执行(但不能由服务器执行)，也会造成相当于<strong>XSS</strong>或<strong>CSRF</strong>攻击的安全威胁。攻击的安全威胁。</p>
<blockquote>
<p><code>FileField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>
</blockquote>
<h5 id="ImageField"><a href="#ImageField" class="headerlink" title="ImageField"></a><code>ImageField</code></h5><p>从<code>FileField</code>继承所有属性和方法，但也验证上传的对象是有效的图像。</p>
<p>除了可用于<code>FileField</code>的特殊属性之外，<code>ImageField</code>还具有高度和宽度属性。</p>
<p>为了方便查询这些属性，<code>ImageField</code>有两个额外的可选参数:</p>
<h6 id="ImageField-height-field"><a href="#ImageField-height-field" class="headerlink" title="ImageField.height_field"></a><code>ImageField.height_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充映像的高度。</p>
<h6 id="ImageField-width-field"><a href="#ImageField-width-field" class="headerlink" title="ImageField.width_field"></a><code>ImageField.width_field</code></h6><p>一个模型字段的名称，该字段将在每次保存模型实例时自动填充图像的宽度。</p>
<p>需要 <a href="https://pillow.readthedocs.io/en/latest/">Pillow</a> 库。</p>
<blockquote>
<p><code>ImageField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>
</blockquote>
<h5 id="FilePathField"><a href="#FilePathField" class="headerlink" title="FilePathField"></a><code>FilePathField</code></h5><p>一个<code>CharField</code>，它的选择仅限于文件系统上某个目录中的文件名。有三个特殊的参数，其中第一个是必需的:</p>
<h6 id="FilePathField-path"><a href="#FilePathField-path" class="headerlink" title="FilePathField.path"></a><code>FilePathField.path</code></h6><p>必需的。这个<code>FilePathField</code>应该从中获得其选择的目录的绝对文件系统路径。例如:<code>&quot;/ home /images&quot;</code>。</p>
<h6 id="FilePathField-match"><a href="#FilePathField-match" class="headerlink" title="FilePathField.match"></a><code>FilePathField.match</code></h6><p>可选的。一个正则表达式，作为一个字符串，<code>FilePathField</code>将使用它来过滤文件名。注意，正则表达式将应用于基本文件名，而不是完整路径。示例:**<code>foo.*\.txt$</code>**。它将匹配一个名为<code>foo23.txt</code>的文件，但不匹配<code>bar.txt</code>或<code>foo23.png</code>。</p>
<h6 id="FilePathField-recursive"><a href="#FilePathField-recursive" class="headerlink" title="FilePathField.recursive"></a><code>FilePathField.recursive</code></h6><p>可选的。非真即假。默认是假的。指定是否应该包括<code>path</code>的所有子目录</p>
<h6 id="FilePathField-allow-files"><a href="#FilePathField-allow-files" class="headerlink" title="FilePathField.allow_files"></a><code>FilePathField.allow_files</code></h6><p>可选的。非真即假。默认是正确的。指定是否应包括位于指定位置的文件。这个或<code>allow_folders</code>必须为真。</p>
<h6 id="FilePathField-allow-folders"><a href="#FilePathField-allow-folders" class="headerlink" title="FilePathField.allow_folders"></a><code>FilePathField.allow_folders</code></h6><p>可选的。非真即假。默认是假的。指定是否应包括指定位置的文件夹。这个或allow_files必须为真。</p>
<p>当然，这些参数可以一起使用。</p>
<p>一个潜在的问题是，match应用于基本文件名，而不是完整路径。所以,这个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FilePathField(path=<span class="string">&quot;/home/images&quot;</span>, match=<span class="string">&quot;foo.*&quot;</span>, recursive=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>将匹配<code>/home/images/foo.png</code>，但不匹配<code>/home/images/foo/bar.png</code>，因为匹配应用于基本文件名(<code>foo.png</code>和<code>bar.png</code>)。</p>
<blockquote>
<p><code>FilePathField</code>实例在数据库中创建为<code>varchar</code>列，默认最大长度为100个字符。与其他字段一样，可以使用<code>max_length</code>参数更改最大长度。</p>
</blockquote>
<h5 id="BinaryField"><a href="#BinaryField" class="headerlink" title="BinaryField"></a><code>BinaryField</code></h5><p>存储原始二进制数据的字段。可以为它分配字节、字节数组或内存视图。</p>
<p>默认情况下，<code>BinaryField</code>将<code>editable</code>设置为<code>False</code>，在这种情况下，它不能包含在ModelForm中。</p>
<p><code>BinaryField</code>有一个额外的可选参数:</p>
<h6 id="BinaryField-max-length"><a href="#BinaryField-max-length" class="headerlink" title="BinaryField.max_length"></a><code>BinaryField.max_length</code></h6><p>字段的最大长度(以字符为单位)。最大长度在Django的验证中使用MaxLengthValidator实现。</p>
<blockquote>
<p>Django 2.1:<br>旧版本不允许将editable设置为True。</p>
</blockquote>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><h5 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a><code>DateField</code></h5><p>日期，在Python中用<code>datetime.date</code>实例表示。有一些额外的，可选的参数:</p>
<h6 id="DateField-auto-now"><a href="#DateField-auto-now" class="headerlink" title="DateField.auto_now"></a><code>DateField.auto_now</code></h6><p>每次保存对象时自动将字段值设置为当前时间，用于“最后修改”时间戳。</p>
<p>该字段只在调用<code>Model.save()</code>时自动更新。当以其他方式(如<code>QuerySet.update()</code>)更新其他字段时，该字段不会更新，不过可以在这样的更新中为该字段指定自定义值。</p>
<h6 id="DateField-auto-now-add"><a href="#DateField-auto-now-add" class="headerlink" title="DateField.auto_now_add"></a><code>DateField.auto_now_add</code></h6><p>在第一次创建对象时自动将字段设置为当前时间。用于创建时间戳。</p>
<p>即使在创建对象时为这个字段设置了值，它也会被忽略。如果您希望能够修改该字段，请将<code>auto_now_add=True</code>设置为以下内容:</p>
<ul>
<li>For <code>DateField</code>: <code>default=date.today</code> - from <code>datetime.date.today()</code></li>
<li>For <code>DateTimeField</code>: <code>default=timezone.now</code> - from <code>django.utils.timezone.now()</code></li>
</ul>
<p><code>auto_now_add</code>、<code>auto_now</code>和<code>default</code>选项是互斥的。这些选项的任何组合都将导致错误。</p>
<h5 id="DateTimeField"><a href="#DateTimeField" class="headerlink" title="DateTimeField"></a><code>DateTimeField</code></h5><p>日期和时间，在Python中用<code>datetime.datetime</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>
<h5 id="TimeField"><a href="#TimeField" class="headerlink" title="TimeField"></a><code>TimeField</code></h5><p>时间，在Python中用<code>datetime.time</code>实例表示。接受与<code>DateField</code>相同的额外参数。</p>
<h3 id="字段选项"><a href="#字段选项" class="headerlink" title="字段选项"></a>字段选项</h3><blockquote>
<p>以下参数对所有字段类型均有效，且是可选的。</p>
</blockquote>
<h4 id="null"><a href="#null" class="headerlink" title="null"></a><code>null</code></h4><p>如果设置为 <code>True</code>， 当该字段为空时，Django 会将数据库中该字段设置为 <code>NULL</code>，默认为 <code>False</code>。</p>
<p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和空字符串。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>
<p>对于基于字符串和非基于字符串的字段，如果希望在表单中允许空值，还需要设置<code>blank=True</code>，因为<code>null</code>参数只影响数据库存储(参见<code>blank</code>)。</p>
<h4 id="blank"><a href="#blank" class="headerlink" title="blank"></a><code>blank</code></h4><p>如果设置为 <code>True</code> ，该字段允许为空。默认为 <code>False</code> 。</p>
<p>注意，这与<code>null</code>不同。<code>null</code>纯粹是与数据库相关的，而<code>blank</code>则是与验证相关的。如果字段为<code>blank=True</code>，表单验证将允许输入空值。</p>
<blockquote>
<p>blank和null的用法区别</p>
</blockquote>
<ul>
<li><p>null纯粹是与数据库相关的，而blank则是与表单验证相关的。</p>
</li>
<li><p>避免在基于字符串的字段（例如 <code>CharField</code>和 <code>TextField</code>）上使用 <code>null</code>。如果字符串字段的 <code>null=True</code>，那意味着对于“无数据”有两个可能的值：<code>NULL</code> 和<code>空字符串</code>。在大多数情况下，对于“无数据”声明两个值是赘余的，Django 的惯例是使用空字符串而不是 <code>NULL</code>。 一个例外是当 <code>CharField</code>同时具有 <code>unique=True</code> 和 <code>blank=True</code> 时。 在这种情况下，需要设置 <code>null=True</code>，以便在使用空白值保存多个对象时避免唯一的约束违规。</p>
</li>
<li><p>当存在两个参数时，总共会有四种设定组合</p>
<ul>
<li><code>blank=True</code>、<code>null=True</code>。统一的表明了该字段（列）是可以为空的。</li>
<li><code>blank=False</code>、<code>null=False</code>。统一的表面了该字段（列）不可以为空。</li>
<li><code>blank=True</code>、<code>null=False</code>。这个设定的意义在于，某些字段并不希望用户在表单中创建，而是通过在<code>save</code>方法中根据其他字段生成。</li>
<li><code>blank=False</code>、<code>null=True</code>。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。</li>
</ul>
</li>
</ul>
<blockquote>
<p>只设定了<code>blank=True</code>而没有设定<code>null=True</code>的时候，通过<code>Admin</code>站点表单创建模型实例并且表单在该字段上没有值时数据库不报错呢？？？</p>
</blockquote>
<ul>
<li>当没有设定<code>null=True</code>时，该列在数据库中就存在<code>NOT NULL</code>的约束，如果插入数据时这一列没有值，按理说数据库应该会报错才对</li>
<li>出现这种情况的原因在于，<code>django</code>在处理某些在数据库中实际的存储值为字符串的<code>Field</code>时（如<code>CharField</code>, <code>TextField</code>, <code>ImageField</code>（图片文件的路径）），永远不会向数据库中填入空值。如果表单中某个<code>CharField</code>或者<code>TextField</code>字段为空，那么<code>django</code>会在数据库中填入<code>&quot;&quot;</code>，而不是<code>null</code>. </li>
</ul>
<h4 id="choices"><a href="#choices" class="headerlink" title="choices"></a><code>choices</code></h4><p>一个序列，它由两个元素(例如[(A, B)， (A, B)…])的迭代组成，作为这个字段的选择。如果提供了选择，则通过模型验证强制执行，默认的表单小部件将是一个包含这些选择的选择框，而不是标准的文本字段。</p>
<p>每个元组中的第一个元素是要在模型上设置的实际值，第二个元素是人类可读的名称。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">    (<span class="string">&#x27;FR&#x27;</span>, <span class="string">&#x27;Freshman&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;SO&#x27;</span>, <span class="string">&#x27;Sophomore&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;JR&#x27;</span>, <span class="string">&#x27;Junior&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;SR&#x27;</span>, <span class="string">&#x27;Senior&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>通常，最好在模型类中定义选项，并为每个值定义一个适当命名的常量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    FRESHMAN = <span class="string">&#x27;FR&#x27;</span></span><br><span class="line">    SOPHOMORE = <span class="string">&#x27;SO&#x27;</span></span><br><span class="line">    JUNIOR = <span class="string">&#x27;JR&#x27;</span></span><br><span class="line">    SENIOR = <span class="string">&#x27;SR&#x27;</span></span><br><span class="line">    YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">        (FRESHMAN, <span class="string">&#x27;Freshman&#x27;</span>),</span><br><span class="line">        (SOPHOMORE, <span class="string">&#x27;Sophomore&#x27;</span>),</span><br><span class="line">        (JUNIOR, <span class="string">&#x27;Junior&#x27;</span>),</span><br><span class="line">        (SENIOR, <span class="string">&#x27;Senior&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line">    year_in_school = models.CharField(</span><br><span class="line">        max_length=<span class="number">2</span>,</span><br><span class="line">        choices=YEAR_IN_SCHOOL_CHOICES,</span><br><span class="line">        default=FRESHMAN,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_upperclass</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.year_in_school <span class="keyword">in</span> (self.JUNIOR, self.SENIOR)</span><br></pre></td></tr></table></figure>

<p>虽然您可以在模型类的外部定义一个选择列表，然后引用它，但是在模型类内部定义每个选择的选择和名称，可以将所有信息与使用它的类一起保存，并使选择易于引用(例如：<strong>Student.SOPHOMORE</strong> 可以在导入<strong>Student</strong>模型类的任何地方使用)。</p>
<p>您还可以将可用的选项收集到指定的组中，这些组可用于组织目的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Media</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    MEDIA_CHOICES = [</span><br><span class="line">        (<span class="string">&#x27;Audio&#x27;</span>, (</span><br><span class="line">            (<span class="string">&#x27;vinyl&#x27;</span>, <span class="string">&#x27;Vinyl&#x27;</span>),</span><br><span class="line">            (<span class="string">&#x27;cd&#x27;</span>, <span class="string">&#x27;CD&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">         ),</span><br><span class="line">        (<span class="string">&#x27;Video&#x27;</span>, (</span><br><span class="line">            (<span class="string">&#x27;vhs&#x27;</span>, <span class="string">&#x27;VHS Tape&#x27;</span>),</span><br><span class="line">            (<span class="string">&#x27;dvd&#x27;</span>, <span class="string">&#x27;DVD&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">         ),</span><br><span class="line">        (<span class="string">&#x27;unknown&#x27;</span>, <span class="string">&#x27;Unknown&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    media = models.CharField(</span><br><span class="line">        max_length=<span class="number">10</span>,</span><br><span class="line">        choices=MEDIA_CHOICES,</span><br><span class="line">        default=<span class="string">&#x27;cd&#x27;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>每个元组中的第一个元素是应用于组的名称。第二个元素是二元组的迭代，每个二元组包含一个值和一个可读的选项名。分组选项可以与单个列表中的未分组选项组合在一起(例如本例中的未知选项)。</p>
<p>注意，选择可以是任何序列对象–不一定是列表或元组。这允许您动态地构造选择。但是，如果您发现自己的选择是动态的，那么最好使用一个带有 <code>ForeignKey</code>的数据库表。但是静态数据不会有太大的变化。</p>
<p>对于每个设置了选项的字段，对象都有一个<code>get_FOO_display()</code>方法，其中<code>FOO</code>是字段的名称。该方法返回字段的”人易读”值。</p>
<p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">        (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Small&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;Medium&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;Large&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">2</span>, choices=SHIRT_SIZES)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; p = Person(name=<span class="string">&quot;Fred Flintstone&quot;</span>, shirt_size=<span class="string">&quot;L&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; p.save()</span><br><span class="line">&gt;&gt;&gt; p.shirt_size</span><br><span class="line"><span class="string">&#x27;L&#x27;</span></span><br><span class="line">&gt;&gt;&gt; p.get_shirt_size_display()</span><br><span class="line"><span class="string">&#x27;Large&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="db-column"><a href="#db-column" class="headerlink" title="db_column"></a><code>db_column</code></h4><p>要用于此字段的数据库列的名称。如果没有给出，Django将使用字段的名称。</p>
<h4 id="db-index"><a href="#db-index" class="headerlink" title="db_index"></a><code>db_index</code></h4><p>如果为真，将为此字段创建一个数据库索引。</p>
<h4 id="default"><a href="#default" class="headerlink" title="default"></a><code>default</code></h4><p>该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实例化模型时都会调用该对象。</p>
<p>默认值不能是一个可变的对象(模型实例、列表、集合等)，因为对该对象的同一个实例的引用将被用作所有模型实例的默认值。反而，可以在回调函数中打包处理所需的默认值。例如，如果要为<code>JSONField</code>指定默认<code>dict</code>，可以使用一个函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contact_default</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;to1@example.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">contact_info = JSONField(<span class="string">&quot;ContactInfo&quot;</span>, default=contact_default)</span><br></pre></td></tr></table></figure>

<p><strong>lambda</strong>表达式不能用于像<strong>default</strong>这样的字段选项，因为它们不能被迁移序列化。</p>
<p>对于像映射模型实例的<code>ForeignKey</code>这样的字段，默认值应该是它们引用的字段的值(<code>pk</code>，除非设置<code>to_field</code>)，而不是模型实例。</p>
<p>当创建新的模型实例并且没有为字段提供值时，将使用默认值。当字段是主键时，当字段设置为<code>None</code>时也会使用默认值。</p>
<h4 id="help-text"><a href="#help-text" class="headerlink" title="help_text"></a><code>help_text</code></h4><p>额外的“帮助”文本，随表单控件一同显示。即便你的字段未用于表单，它对于生成文档也是很有用的。</p>
<p>注意，这个值不会在自动生成的表单中进行<code>html</code>转义的。如果您愿意，可以在<code>help_text</code>中包含<strong>HTML</strong>。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help_text=<span class="string">&quot;Please use the following format: &lt;em&gt;YYYY-MM-DD&lt;/em&gt;.&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者，您可以使用纯文本和<code>django.utils.html.escape()</code>来转义任何<strong>HTML</strong>特殊字符。确保转义任何来自不可信用户的帮助文本，以避免跨站点脚本攻击。</p>
<h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a><code>primary_key</code></h4><p>如果设置为 <code>True</code> ，将该字段设置为该模型的主键。</p>
<p>如果您没有为模型中的任何字段指定<code>primary_key=True</code>, <strong>Django</strong>将自动添加一个<code>AutoField</code>来保存主键，所以您不需要在任何字段上设置<code>primary_key=True</code>，除非您想覆盖默认的主键行为。</p>
<p><code>primary_key=True</code>意味着<code>null=False</code>和<code>unique=True</code>。对象上只允许有一个主键。</p>
<p>主键字段是只读的。如果更改现有对象上的主键值并保存它，则将在旧对象旁边创建一个新对象。</p>
<h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a><code>unique</code></h4><p>如果设置为 <code>True</code>，这个字段必须在整个表中保持值唯一。</p>
<p>这是在数据库级和通过模型验证实现的。如果试图在惟一字段中保存具有重复值的模型，则模型的<code>save()</code>方法会产生一个<code>django.db.IntegrityError</code>。</p>
<p>这个选项对除了<code>ManyToManyField</code>和<code>OneToOneField</code>以外的所有字段类型都有效。</p>
<p>注意，当<code>unique</code>为真时，不需要指定<code>db_index</code>，因为<code>unique</code>意味着创建索引。</p>
<h4 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose_name"></a><code>verbose_name</code></h4><p>字段的可读名称。如果没有给出详细的名称，Django将使用字段的属性名自动创建它，将下划线转换为空格。</p>
<p>除了 <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>，任何字段类型都接收一个可选位置的参数 <code>verbose_name</code>，如果未指定该参数值， Django 会自动使用字段的属性名作为该参数值，并且把下划线转换为空格。</p>
<p>在该例中：备注名为 <code>&quot;person&#39;s first name&quot;</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = models.CharField(<span class="string">&quot;person&#x27;s first name&quot;</span>, max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>在该例中：备注名为 <code>&quot;first name&quot;</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p> <code>ForeignKey</code>， <code>ManyToManyField</code> 和 <code>OneToOneField</code>接收的第一个参数为模型的类名，后面可以添加一个 <code>verbose_name</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poll = models.ForeignKey(</span><br><span class="line">    Poll,</span><br><span class="line">    on_delete=models.CASCADE,</span><br><span class="line">    verbose_name=<span class="string">&quot;the related poll&quot;</span>,</span><br><span class="line">)</span><br><span class="line">sites = models.ManyToManyField(Site, verbose_name=<span class="string">&quot;list of sites&quot;</span>)</span><br><span class="line">place = models.OneToOneField(</span><br><span class="line">    Place,</span><br><span class="line">    on_delete=models.CASCADE,</span><br><span class="line">    verbose_name=<span class="string">&quot;related place&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>惯例是不将<code>verbose_name</code> 的首字母大写，必要时 <strong>Djanog</strong> 会自动把首字母转换为大写。</p>
<h4 id="validators"><a href="#validators" class="headerlink" title="validators"></a><code>validators</code></h4><p>要为此字段运行的验证器列表。</p>
<h5 id="编写验证器"><a href="#编写验证器" class="headerlink" title="编写验证器"></a>编写验证器</h5><p><code>validator</code>是一个可调用的函数，它接受一个值，如果它不满足某些条件，就会引发<code>ValidationError</code>。验证器对于在不同类型的字段之间重用验证逻辑非常有用。</p>
<p>例如，这里有一个验证器，它只允许偶数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_even</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> value % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(</span><br><span class="line">            _(<span class="string">&#x27;%(value)s is not an even number&#x27;</span>),</span><br><span class="line">            params=&#123;<span class="string">&#x27;value&#x27;</span>: value&#125;,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>您可以通过字段的<code>validators</code>参数将其添加到模型字段:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    even_field = models.IntegerField(validators=[validate_even])</span><br></pre></td></tr></table></figure>

<p>因为值在运行验证器之前就转换成了Python，你甚至可以对表单使用相同的验证器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    even_field = forms.IntegerField(validators=[validate_even])</span><br></pre></td></tr></table></figure>

<p>对于更复杂或可配置的验证器，您还可以使用带有<code>__call__()</code>方法的类。例如， <code>RegexValidator</code>这类验证器。如果在<code>validators</code> <code>model</code>字段选项中使用基于类的验证器,应该添加<code>deconstruct()</code>装饰器和 <code>__eq__()</code> 方法让它可以被迁移框架序列化。</p>
<p> <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/validators/#built-in-validators"><code>django.core.validators</code></a>模块包含一组可调用的验证器，用于模型和表单字段，可以在内部使用它们。</p>
<h3 id="Meta-选项"><a href="#Meta-选项" class="headerlink" title="Meta 选项"></a><code>Meta</code> 选项</h3><p>使用内部 <code>Meta类</code> 来给模型赋予元数据，就像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ox</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    horn_length = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">&quot;horn_length&quot;</span>]</span><br><span class="line">        verbose_name_plural = <span class="string">&quot;oxen&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a><code>abstract</code></h4><p>抽象基类在你要将公共信息放入很多模型时会很有用。编写你的基类，并在 <strong>Meta</strong> 类中填入 <code>abstract=True</code>。该模型将不会创建任何数据表。当其用作其它模型类的基类时，它的字段会自动添加至子类。</p>
<p>一个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">CommonInfo</span>):</span></span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><code>Student</code> 模型拥有3个字段： <code>name</code>， <code>age</code> 和 <code>home_group</code>。 <code>CommonInfo</code> 模型不能用作普通的 Django 模型，因为它是一个抽象基类。它不会生成数据表，也没有管理器，也不能被实例化和保存。</p>
<p>从抽象基类继承来的字段可被其它字段或值重写，或用 <code>None</code> 删除。</p>
<p>对很多用户来说，这种继承可能就是你想要的。它提供了一种在 Python 级抽出公共信息的方法，但仍会在子类模型中创建数据表。</p>
<h4 id="app-label"><a href="#app-label" class="headerlink" title="app_label"></a><code>app_label</code></h4><p>如果一个模型是在<code>INSTALLED_APPS</code>中注册的<strong>APP</strong>外部定义的，它必须声明它属于哪个应用程序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_label = <span class="string">&#x27;myapp&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="db-table"><a href="#db-table" class="headerlink" title="db_table"></a><code>db_table</code></h4><p>要用于模型的数据库表的名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db_table = <span class="string">&#x27;music_album&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为了节省时间，Django自动从模型类和包含它的应用程序的名称派生数据库表的名称。模型的数据库表名是通过将模型的**”app label”**(您在<code>manage.py startapp</code>中使用的名称)与模型的类名连接在一起，并在它们之间加一个下划线来构造的。</p>
<p>例如，如果您有一个应用<strong>bookstore</strong>(由 <code>manage.py startapp bookstore</code>创建)，定义为<strong>Book</strong>的模型类将有一个名为<code>bookstore_book</code>的数据库表。</p>
<p>要覆盖数据库表名，请使用类元中的db_table参数。</p>
<blockquote>
<p>强烈建议在通过db_table覆盖表名时使用小写的表名，特别是在使用MySQL后端时。</p>
</blockquote>
<h4 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a><code>ordering</code></h4><p>对象的默认顺序，用于获取对象列表:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;-order_date&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>这是一个 包含由字符串和/或构成的查询表达式的元组或列表。每个字符串都是一个带有可选<code>&quot;-&quot;</code>前缀的字段名，表示按降序排列。没有前缀<code>&quot;-&quot;</code>的字段将按升序排列。使用字符串<code>&quot;?&quot;</code>随机排序。</p>
<p>例如，要按<code>pub_date</code>字段升序排序，可以使用以下命令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;pub_date&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>要按pub_date降序排列，请使用以下命令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;-pub_date&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>按pub_date降序排列，然后按author升序排列，使用以下命令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;-pub_date&#x27;</span>, <span class="string">&#x27;author&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>您还可以使用查询表达式。要按作者升序排序并使空值排序持续，请使用以下命令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line">ordering = [F(<span class="string">&#x27;author&#x27;</span>).asc(nulls_last=<span class="literal">True</span>)]</span><br></pre></td></tr></table></figure>

<h4 id="permissions"><a href="#permissions" class="headerlink" title="permissions"></a><code>permissions</code></h4><p>创建此对象时进入权限表的额外权限。为每个模型自动创建添加、更改、删除和视图权限。这个例子指定了一个额外的权限<code>can_deliver_pizzas</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permissions = [(<span class="string">&#x27;can_deliver_pizzas&#x27;</span>, <span class="string">&#x27;Can deliver pizzas&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<p>这是一个格式为**(permission_code,** **human_readable_permission_name)**的二元列表或元组。</p>
<h4 id="indexes"><a href="#indexes" class="headerlink" title="indexes"></a><code>indexes</code></h4><p>要在模型上定义的索引列表:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        indexes = [</span><br><span class="line">            models.Index(fields=[<span class="string">&#x27;last_name&#x27;</span>, <span class="string">&#x27;first_name&#x27;</span>]),</span><br><span class="line">            models.Index(fields=[<span class="string">&#x27;first_name&#x27;</span>], name=<span class="string">&#x27;first_name_idx&#x27;</span>),</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<h4 id="verbose-name-1"><a href="#verbose-name-1" class="headerlink" title="verbose_name"></a><code>verbose_name</code></h4><p>模型对象的人类可读的单数名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">verbose_name = <span class="string">&quot;pizza&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果没有给出这个值，Django将使用类名的一个简化版本:<code>CamelCase</code>变成<code>camel case</code>。</p>
<h4 id="verbose-name-plural"><a href="#verbose-name-plural" class="headerlink" title="verbose_name_plural"></a><code>verbose_name_plural</code></h4><p>对象的复数名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">verbose_name_plural = <span class="string">&quot;stories&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果没有给出，Django将使用 <code>verbose_name</code>+ <code>&quot;s&quot;</code></p>
<h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最常见的数据库关联关系的方法：多对一，多对多，一对一。                                                                </p>
<h4 id="ForeignKey-多对一"><a href="#ForeignKey-多对一" class="headerlink" title="ForeignKey(多对一)"></a>ForeignKey(多对一)</h4><p>定义一个多对一的关联关系，使用 <code>django.db.models.ForeignKey</code> 类。就和其它 <code>Field</code>字段类型一样，只需要在你模型中添加一个值为该类的属性。</p>
<p><code>ForeignKey</code> 类需要添加一个位置参数，即你想要关联的模型类名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字ForeignKey</span></span><br><span class="line">publish = models.ForeignKey(to=<span class="string">&#x27;Publish&#x27;</span>)  <span class="comment"># to用来指代跟哪张表有关系 默认关联的就是表的主键字段</span></span><br><span class="line"><span class="comment"># 外键字段名在创建时会自动加上_id后缀</span></span><br></pre></td></tr></table></figure>

<h5 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h5><ol>
<li><p><code>to</code>:设置要关联的表</p>
</li>
<li><p><code>to_field</code>:设置要关联的表的字段(一般不设置，默认使用主键id关联)</p>
</li>
<li><p><code>related_name</code>:反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code></p>
</li>
<li><p><code>related_query_name</code>:反向查询操作时，使用的连接前缀，用于替换表名</p>
</li>
<li><p><code>db_constraint</code>:是否在数据库中创建外键约束，默认为True。</p>
</li>
<li><p><code>on_delete</code>:当删除关联表中的数据时，当前表与其关联的行的行为。</p>
<ol>
<li><p><code>models.CASCADE</code>:删除关联数据，与之关联的数据也删联(<code>on_delete=models.CASCADE</code>)</p>
</li>
<li><p>抛出异常(错误)</p>
<ol>
<li><code>models.DO_NOTHING</code>:删除关联数据，引发错误<code>IntegrityError</code>       </li>
<li><code>models.PROTECT</code><br>删除关联数据，引发错误<code>ProtectedError </code></li>
</ol>
</li>
<li><p><code>models.SET_NULL</code>:删除关联数据，与之关联的值设置为<code>null</code>（前提FK字段需要设置为可空）</p>
</li>
<li><p><code>models.SET_DEFAULT</code>:删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）</p>
</li>
<li><p><code>models.SET</code>:删除关联数据</p>
<ol>
<li>与之关联的值设置为指定值，设置：<code>models.SET(值)</code></li>
<li>与之关联的值设置为可执行对象的返回值，设置：<code>models.SET(可执行对象)</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="OneToOneField-一对一"><a href="#OneToOneField-一对一" class="headerlink" title="OneToOneField(一对一)"></a>OneToOneField(一对一)</h4><blockquote>
<p>外键字段创建在任意一张表都可以，建议外键添加在查询频率较高的一方</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字OneToOneField</span></span><br><span class="line">author_detail = models.OneToOneField(to=<span class="string">&#x27;Author_detail&#x27;</span>)  <span class="comment"># 外键本质fk + unique</span></span><br></pre></td></tr></table></figure>

<h5 id="字段参数-1"><a href="#字段参数-1" class="headerlink" title="字段参数"></a>字段参数</h5><ol>
<li><p><code>to</code> :设置要关联的表。</p>
</li>
<li><p><code>to_field</code>:设置要关联的字段。</p>
</li>
<li><p><code>on_delete</code>:同ForeignKey字段。</p>
</li>
</ol>
<h4 id="ManyToManyField-多对多"><a href="#ManyToManyField-多对多" class="headerlink" title="ManyToManyField(多对多)"></a>ManyToManyField(多对多)</h4><blockquote>
<p>用于表示多对多的关联关系。在数据库中通过第三张表来建立关联关系。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字ManyToManyField</span></span><br><span class="line">author = models.ManyToManyField(to=<span class="string">&#x27;Author&#x27;</span>)  </span><br><span class="line"><span class="comment"># django orm会自动帮你创建第三张关系表，表名为两个关联的表名用_连接</span></span><br></pre></td></tr></table></figure>

<h5 id="字段参数-2"><a href="#字段参数-2" class="headerlink" title="字段参数"></a>字段参数</h5><ol>
<li><p><code>to</code>:设置要关联的表</p>
</li>
<li><p><code>related_name</code>:同<code>ForeignKey</code>字段(反向操作时，使用的字段名，用于代替原反向查询时的<code>&#39;表名_set&#39;</code>)</p>
</li>
<li><p><code>related_query_name</code>:同<code>ForeignKey</code>字段(反向查询操作时，使用的连接前缀，用于替换表名)</p>
</li>
<li><p><code>symmetric</code>:仅用于多对多自关联时，指定内部是否创建反向操作的字段。默认为<code>True</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    friends = models.ManyToManyField(<span class="string">&quot;self&quot;</span>)</span><br><span class="line">    <span class="comment"># 此时，person对象就没有person_set属性。</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    friends = models.ManyToManyField(<span class="string">&quot;self&quot;</span>,symmetrical=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 此时，person对象现在就可以使用person_set属性进行反向查询。</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>through</code>:在使用<code>ManyToManyField</code>字段时，<code>Django</code>将自动生成一张表        来管理多对多的关联关系。但我们也可以手动创建第三张表来管理多对多关系，此时就需要通过<code>through</code>来指定第三张表的表名。</p>
</li>
<li><p><code>through_fields</code>:设置关联的字段。</p>
</li>
<li><p><code>db_table</code>:默认创建第三张表时，数据库中表的名称。</p>
</li>
</ol>
<h5 id="多对多的三种创建方式"><a href="#多对多的三种创建方式" class="headerlink" title="多对多的三种创建方式"></a>多对多的三种创建方式</h5><ol>
<li><p>自己建立第三张关系表，外键分别关联两个表</p>
<ul>
<li><p>优点:可以扩充第三张关系标的字段</p>
</li>
<li><p>缺点:自己做连表查询</p>
</li>
<li><p>建表例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     name = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 1. 多对多第一种创建方式：自己创建第三张关系表</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Author2Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">     author_id = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">     book_id = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">     price = models.IntegerField()  <span class="comment"># 可以自己扩充需要的字段</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>通过ORM内置的ManyToManyField，自动创建第三张关系表</p>
<ul>
<li><p>优点:提供了很多连表操作的快捷方法,<code>all()</code>, <code>add()</code>, <code>set()</code>, <code>clear()</code>, <code>remove()</code></p>
</li>
<li><p>缺点:无法扩展第三张关系表</p>
</li>
<li><p>建表例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     name = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">     books = models.ManyToManyField(to=<span class="string">&#x27;Book&#x27;</span>)  <span class="comment"># 字段就这些，无法扩充其他字段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>自己创建第三张关系表，通过ManyToManyField关联</p>
<ul>
<li><p>优点：</p>
<ul>
<li>既能够使用多对多查询的快捷方法all()(只能用all，不能使用add,set等)</li>
<li>还能够自己扩展第三张关系表的字段</li>
</ul>
</li>
<li><p>建表例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     name = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">     <span class="comment"># 告诉ManyToManyField通过(through)Author2Book这张表进行关联，不使用ORM自动创建的第三张表，而是使用我自己创建的表</span></span><br><span class="line">     <span class="comment"># through_fields告诉ORM通过哪几个字段进行多对多关联</span></span><br><span class="line">     books = models.ManyToManyField(to=<span class="string">&#x27;Book&#x27;</span>, through=<span class="string">&#x27;Author2Book&#x27;</span>, through_fields=(<span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;book&#x27;</span>))</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 1. 多对多第三种创建方式：自己创建第三张关系表，此时外键不需要添加_id了，因为ORM会默认帮你在外键后面加_id</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Author2Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">     <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">     author = models.ForeignKey(to=<span class="string">&#x27;Author&#x27;</span>)</span><br><span class="line">     book = models.ForeignKey(to=<span class="string">&#x27;Book&#x27;</span>)</span><br><span class="line">     price = models.IntegerField(null=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="comment"># author_id和book_id要联合唯一</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">         unique_together = ((<span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;book&#x27;</span>),)</span><br></pre></td></tr></table></figure></li>
<li><p>操作例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对多的第三张方式也支持all查询</span></span><br><span class="line">author_obj = Author.objects.first()</span><br><span class="line"><span class="comment"># 第一个作者的所有书籍</span></span><br><span class="line">ret = author_obj.books.<span class="built_in">all</span>()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 给第一个作者添加一本书</span></span><br><span class="line"><span class="comment"># author_obj.books.add(4) # 报错</span></span><br><span class="line">Author2Book.objects.create(author_id=<span class="number">1</span>, book_id=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python多任务机制</title>
    <url>/2019/05/17/yFD_0DCBA/</url>
    <content><![CDATA[<p>我们都知道计算机是由<strong>硬件</strong>和<strong>软件</strong>组成的。</p>
<ul>
<li>硬件中的 CPU 是计算机的核心，它承担计算机的所有任务。</li>
<li>操作系统是运行在硬件之上的软件，是计算机的管理者，它负责资源的管理和分配、任务的调度。</li>
<li>程序是运行在系统上的具有某种功能的软件，比如说浏览器，音乐播放器等。</li>
</ul>
<span id="more"></span>

<p>每次执行程序的时候，都会完成一定的功能，比如说浏览器帮我们打开网页，为了保证其独立性，就需要一个专门的管理和控制执行程序的数据结构——<strong>进程控制块</strong>。</p>
<p>进程就是一个程序在一个数据集上的一次动态执行过程。</p>
<ul>
<li>进程一般由程序、数据集、进程控制块三部分组成。<ul>
<li>我们编写的程序用来描述进程要完成哪些功能以及如何完成；</li>
<li>数据集则是程序在执行过程中所需要使用的资源；</li>
<li>进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志</li>
</ul>
</li>
</ul>
<h2 id="进程和线程的介绍"><a href="#进程和线程的介绍" class="headerlink" title="进程和线程的介绍"></a>进程和线程的介绍</h2><h3 id="进程与线程的历史"><a href="#进程与线程的历史" class="headerlink" title="进程与线程的历史"></a>进程与线程的历史</h3><ul>
<li>在早期的操作系统里，计算机只有一个核心，进程是执行程序的最小单位，任务调度采用时间片轮转的抢占式方式进行进程调度。</li>
<li>每个进程都有各自的一块独立的内存，保证进程彼此间的内存地址空间的隔离。</li>
</ul>
<p>随着计算机技术的发展，进程出现了很多弊端：</p>
<ul>
<li>一是进程的创建、撤销和切换的开销比较大</li>
<li>二是由于对称多处理机（对称多处理机（SymmetricalMulti-Processing）又叫 SMP，是指在一个计算机上汇集了一组处理器 (多 CPU)，各 CPU 之间共享内存子系统以及总线结构）的出现，可以满足多个运行单位，而多进程并行开销过大。</li>
</ul>
<p>这个时候就引入了线程的概念。</p>
<ul>
<li>线程也叫轻量级进程，它是一个基本的 CPU 执行单元，也是程序执行过程中的最小单元，由线程 ID、程序计数器、寄存器集合 和堆栈共同组成。</li>
<li>线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。</li>
<li>线程没有自己的系统资源，只拥有在运行时必不可少的资源。</li>
<li>但线程可以与同属与同一进程的其他线程共享进程所拥有的其他资源。</li>
</ul>
<h3 id="进程与线程之间的关系"><a href="#进程与线程之间的关系" class="headerlink" title="进程与线程之间的关系"></a>进程与线程之间的关系</h3><ul>
<li>线程是属于进程的，线程运行在进程空间内，同一进程所产生的线程共享同一内存空间，当进程退出时该进程所产生的线程都会被强制退出并清除。</li>
<li>线程可与属于同一进程的其它线程共享进程所拥有的全部资源，但是其本身基本上不拥有系统资源，只拥有一点在运行中必不可少的信息 (如程序计数器、一组寄存器和栈)。</li>
</ul>
<h3 id="守护线程与守护进程的区别"><a href="#守护线程与守护进程的区别" class="headerlink" title="守护线程与守护进程的区别"></a>守护线程与守护进程的区别</h3><blockquote>
<p>强调：运行完毕，并非是终止</p>
</blockquote>
<ul>
<li><p>线程与进程运行完毕的区别：</p>
<ul>
<li><p>主进程运行完毕指的是主进程代码运行完毕</p>
</li>
<li><p>主线程运行完毕指的是所在的进程内的所有非守护线程运行完毕后，主线程才算运行完毕</p>
</li>
</ul>
</li>
<li><p>守护进程：主进程代码运行完毕，守护进程也就结束 <strong>(守护的是主进程)</strong></p>
<ul>
<li><p>主进程要等非守护进程都运行完毕后再回收子进程的资源（否则会产生僵尸进程）才结束</p>
</li>
<li><p>主进程等子进程是因为主进程要给子进程收尸（代用wait方法向操作系统发起回收资源信号（pid号，状态信息））</p>
</li>
</ul>
</li>
<li><p>守护线程：非守护线程代码运行完毕，守护线程也就结束 <strong>(守护的是非守护线程)</strong></p>
<ul>
<li><p>主线程在其他非守护线程运行完毕后才算结束（守护线程在此时就会被回收）</p>
</li>
<li><p>强调：主线程也是非守护线程（进程包含了线程）</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>总结:主线程的结束意味着进程结束，进程整体的资源都会被回收，而进程必须保证非守护线程都运行完毕后才能结束</p>
</blockquote>
<ul>
<li>守护进程：主进程代码运行完毕，守护进程也就结束</li>
<li>守护线程：非守护线程运行完毕，守护线程结束</li>
</ul>
<h2 id="python-线程"><a href="#python-线程" class="headerlink" title="python 线程"></a>python 线程</h2><p>Threading 用于提供线程相关的操作，线程是应用程序中工作的最小单元。</p>
<h3 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h3><p>threading 模块建立在 _thread 模块之上。thread 模块以低级、原始的方式来处理和控制线程，而 threading 模块通过对 thread 进行二次封装，提供了更方便的 api 来处理线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    thread worker function</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The num is  %d&quot;</span> % num)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=worker, args=(i,), name=<span class="string">&quot;t.%d&quot;</span> % i)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码创建了5个”前台”线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。</p>
<blockquote>
<p>Thread参数介绍：</p>
</blockquote>
<ul>
<li><p>group：参数未使用，默认值为None。</p>
</li>
<li><p>target：表示调用对象，即子线程要执行的任务。</p>
</li>
<li><p>args：表示调用的位置参数元组。</p>
</li>
<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>
</li>
<li><p>name：子进程名称。</p>
</li>
<li><p>daemon：设置为守护线程(True)或非守护线程(默认：False)</p>
</li>
</ul>
<blockquote>
<p>Thread属性方法说明</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法/属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">start()</td>
<td align="left">激活线程。使用该方法启动一个子线程，线程名就是我们定义的name，想启动多线程，就必须使用此方法</td>
</tr>
<tr>
<td align="center">run()</td>
<td align="left">线程被cpu调度后自动执行线程对象的run方法,直接使用该方法并不启动一个新线程，就是在主线程中调用了一个普通函数而已</td>
</tr>
<tr>
<td align="center">ident</td>
<td align="left">获取线程的标识符。线程标识符是一个非零整数，只有在调用了start()方法之后该属性才有效，否则它只返回None。</td>
</tr>
<tr>
<td align="center">name</td>
<td align="left">获取或设置线程的名称</td>
</tr>
<tr>
<td align="center">getName()</td>
<td align="left">获取线程的名称</td>
</tr>
<tr>
<td align="center">setName()</td>
<td align="left">设置线程的名称</td>
</tr>
<tr>
<td align="center">is_alive()</td>
<td align="left">判断线程是否为激活状态</td>
</tr>
<tr>
<td align="center">isAlive()</td>
<td align="left">判断线程是否为激活状态</td>
</tr>
<tr>
<td align="center">setDaemon()</td>
<td align="left">设置为守护线程或非守护线程；默认值为False，如果设置为True，代表该进程为后台守护线程；当非守护线程(不只是主线程)终止时，该线程也随之终止；并且设置为True后，该线程不能创建子线程，设置该属性设置必须在start()之前</td>
</tr>
<tr>
<td align="center">isDaemon()</td>
<td align="left">判断是否为守护线程</td>
</tr>
<tr>
<td align="center">join()</td>
<td align="left">阻塞等待该线程执行完毕，该方法主要让主线程阻塞等待所有子线程执行完毕</td>
</tr>
</tbody></table>
<h3 id="线程锁threading-RLock和threading-Lock"><a href="#线程锁threading-RLock和threading-Lock" class="headerlink" title="线程锁threading.RLock和threading.Lock"></a>线程锁threading.RLock和threading.Lock</h3><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。为了保证数据的准确性，引入了锁的概念。所以，可能出现如下问题：</p>
<p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加1000000次，g_num的最终的结果应该为2000000。</p>
<p>但是由于是多线程同时操作，有可能出现下面情况：</p>
<p>在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0<br>然后t2对得到的值进行加1并赋给g_num，使得g_num=1<br>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。<br>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1<br><strong>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确，锁的出现解决了这个问题。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line">lock = threading.Lock() <span class="comment">#创建锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        lock.acquire() <span class="comment"># 加锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        lock.release() <span class="comment"># 解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work1, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work2, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---线程创建之前g_num is %d---&quot;</span> % g_num)</span><br><span class="line">    t1 = threading.Thread(target=work1, args=(<span class="number">1000000</span>,))</span><br><span class="line">    t2 = threading.Thread(target=work2, args=(<span class="number">1000000</span>,))</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)</span><br></pre></td></tr></table></figure>

<h3 id="threading-RLock和threading-Lock-的区别"><a href="#threading-RLock和threading-Lock-的区别" class="headerlink" title="threading.RLock和threading.Lock 的区别"></a>threading.RLock和threading.Lock 的区别</h3><p>  RLock允许在同一线程中被多次acquire。而Lock却不允许这种情况。 </p>
<p>  如果使用RLock，那么acquire和release必须成对出现，即调用了n次acquire，必须调用n次的release才能真正释放所占用的锁。</p>
<ul>
<li>Lock多次加锁演示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock()    <span class="comment">#Lock对象</span></span><br><span class="line">lock.acquire()</span><br><span class="line">lock.acquire()  <span class="comment">#产生了死锁。</span></span><br><span class="line">lock.release()</span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure>

<ul>
<li>RLock多次加锁演示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">rLock = threading.RLock()  <span class="comment">#RLock对象</span></span><br><span class="line">rLock.acquire()</span><br><span class="line">rLock.acquire()    <span class="comment">#在同一线程内，程序不会堵塞。</span></span><br><span class="line">rLock.release()</span><br><span class="line">rLock.release()</span><br></pre></td></tr></table></figure>

<h3 id="threading-Event"><a href="#threading-Event" class="headerlink" title="threading.Event"></a>threading.Event</h3><p>通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False，event对象主要有四种方法可以调用：</p>
<ul>
<li>event.wait(timeout=None)：调用该方法的线程会被阻塞，如果设置了timeout参数，超时后，线程会停止阻塞继续执行；</li>
<li>event.set()：将event的标志设置为True，调用wait方法的所有线程将被唤醒；</li>
<li>event.clear()：将event的标志设置为False，调用wait方法的所有线程将被阻塞；</li>
<li>event.isSet()：判断event的标志是否为True。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span>(<span class="params">event</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    event.wait()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;execute&#x27;</span>)</span><br><span class="line"></span><br><span class="line">event_obj = threading.Event()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=do, args=(event_obj,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">event_obj.clear()</span><br><span class="line">inp = <span class="built_in">input</span>(<span class="string">&#x27;input:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> inp == <span class="string">&#x27;true&#x27;</span>:</span><br><span class="line">    event_obj.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<h3 id="threading-Condition"><a href="#threading-Condition" class="headerlink" title="threading.Condition"></a>threading.Condition</h3><p>Python提供的Condition对象提供了对复杂线程同步问题的支持。</p>
<ul>
<li>Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。</li>
</ul>
<h4 id="Condition的处理流程如下："><a href="#Condition的处理流程如下：" class="headerlink" title="Condition的处理流程如下："></a>Condition的处理流程如下：</h4><ul>
<li>首先acquire一个条件变量，然后判断一些条件。</li>
<li>如果条件不满足则wait；</li>
<li>如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。</li>
<li>不断的重复这一过程，从而解决复杂的同步问题。</li>
</ul>
<h4 id="Condition的基本原理如下："><a href="#Condition的基本原理如下：" class="headerlink" title="Condition的基本原理如下："></a>Condition的基本原理如下：</h4><p>可以认为<strong>Condition对象</strong>维护了一个<strong>锁（Lock/RLock)<strong>和一个</strong>waiting池</strong>。线程通过acquire获得Condition对象，当调用wait方法时，线程会释放Condition内部的锁并进入blocked状态，同时在waiting池中记录这个线程。当调用notify方法时，Condition对象会从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁。</p>
<p>Condition对象的构造函数可以接受一个Lock/RLock对象作为参数，如果没有指定，则Condition对象会在内部自行创建一个RLock。</p>
<p>除了notify方法外，Condition对象还提供了notifyAll方法，可以通知waiting池中的所有线程尝试acquire内部锁。由于上述机制，<strong>处于waiting状态的线程只能通过notify方法唤醒，所以notifyAll的作用在于防止有的线程永远处于沉默状态。</strong></p>
<h4 id="Condition的案例演示如下："><a href="#Condition的案例演示如下：" class="headerlink" title="Condition的案例演示如下："></a>Condition的案例演示如下：</h4><p>演示条件变量同步的经典问题是生产者与消费者问题：假设有一群生产者(Producer)和一群消费者（Consumer）通过一个市场来交互产品。生产者的”策略“是如果市场上剩余的产品少于1000个，那么就生产100个产品放到市场上；而消费者的”策略“是如果市场上剩余产品的数量多余100个，那么就消费3个产品。</p>
<p>用Condition解决生产者与消费者问题的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Wed Nov 28 17:15:29 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: 18665</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="comment"># 生产者函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> count</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> con.acquire():</span><br><span class="line">                <span class="comment"># 当count 小于等于1000 的时候进行生产</span></span><br><span class="line">                <span class="keyword">if</span> count &gt; <span class="number">1000</span>:</span><br><span class="line">                    con.wait()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    count = count+<span class="number">100</span></span><br><span class="line">                    msg = self.name+<span class="string">&#x27; produce 100, count=&#x27;</span> + <span class="built_in">str</span>(count)</span><br><span class="line">                    <span class="built_in">print</span>(msg)</span><br><span class="line">                    <span class="comment"># 完成生成后唤醒waiting状态的线程，</span></span><br><span class="line">                    <span class="comment"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span></span><br><span class="line">                    con.notify()</span><br><span class="line">                con.release()</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="comment"># 消费者函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> count</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 当count 大于等于100的时候进行消费</span></span><br><span class="line">            <span class="keyword">if</span> con.acquire():</span><br><span class="line">                <span class="keyword">if</span> count &lt; <span class="number">100</span>:</span><br><span class="line">                    con.wait()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    count = count-<span class="number">5</span></span><br><span class="line">                    msg = self.name+<span class="string">&#x27; consume 5, count=&#x27;</span>+<span class="built_in">str</span>(count)</span><br><span class="line">                    <span class="built_in">print</span>(msg)</span><br><span class="line">                    con.notify()</span><br><span class="line">                    <span class="comment"># 完成生成后唤醒waiting状态的线程，</span></span><br><span class="line">                    <span class="comment"># 从waiting池中挑选一个线程，通知其调用acquire方法尝试取到锁</span></span><br><span class="line">                con.release()</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">count = <span class="number">500</span></span><br><span class="line">con = threading.Condition()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        p = Producer()</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        c = Consumer()</span><br><span class="line">        c.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<h3 id="queue模块"><a href="#queue模块" class="headerlink" title="queue模块"></a>queue模块</h3><p>queue.Queue 就是消息队列，可以利用它实现线程间的安全通信。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q = queue.Queue(maxsize=<span class="number">0</span>)  <span class="comment"># 构造一个先进显出队列，maxsize指定队列长度，为0 时，表示队列长度无限制。</span></span><br><span class="line"></span><br><span class="line">q.join()    <span class="comment"># 等到队列为kong的时候，在执行别的操作</span></span><br><span class="line">q.qsize()   <span class="comment"># 返回队列的大小 （不可靠）</span></span><br><span class="line">q.empty()   <span class="comment"># 当队列为空的时候，返回True 否则返回False （不可靠）</span></span><br><span class="line">q.full()    <span class="comment"># 当队列满的时候，返回True，否则返回False （不可靠）</span></span><br><span class="line">q.put(item, block=<span class="literal">True</span>, timeout=<span class="literal">None</span>) <span class="comment">#  将item放入Queue尾部，item必须存在，可以参数block默认为True,表示当队列满时，会等待队列给出可用位置，为False时为非阻塞，此时如果队列已满，会引发queue.Full 异常。 可选参数timeout，表示 会阻塞设置的时间，过后，如果队列无法给出放入item的位置，则引发 queue.Full 异常</span></span><br><span class="line">q.get(block=<span class="literal">True</span>, timeout=<span class="literal">None</span>) <span class="comment">#   移除并返回队列头部的一个值，可选参数block默认为True，表示获取值的时候，如果队列为空，则阻塞，为False时，不阻塞，若此时队列为空，则引发 queue.Empty异常。 可选参数timeout，表示会阻塞设置的时候，过后，如果队列为空，则引发Empty异常。</span></span><br><span class="line">q.put_nowait(item) <span class="comment">#   等效于 put(item,block=False)</span></span><br><span class="line">q.get_nowait() <span class="comment">#    等效于 get(item,block=False)</span></span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">message = queue.Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        message.put(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PUT&gt;&gt;&gt;%d&quot;</span> % i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        msg = message.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;GET&gt;&gt;&gt;%d&quot;</span> % msg)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = threading.Thread(target=producer)</span><br><span class="line">    t2 = threading.Thread(target=consumer)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure>

<h2 id="Python-进程"><a href="#Python-进程" class="headerlink" title="Python 进程"></a>Python 进程</h2><h3 id="multiprocess模块"><a href="#multiprocess模块" class="headerlink" title="multiprocess模块"></a>multiprocess模块</h3><p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：Process([group [, target [, name [, args [, kwargs]]]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    process worker function</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The num is  %d&quot;</span> % num)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = multiprocessing.Process(target=worker, args=(i,), name=<span class="string">&quot;t.%d&quot;</span> % i)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Process参数介绍：</p>
</blockquote>
<ul>
<li><p>group：参数未使用，默认值为None。</p>
</li>
<li><p>target：表示调用对象，即子进程要执行的任务。</p>
</li>
<li><p>args：表示调用的位置参数元组。</p>
</li>
<li><p>kwargs：表示调用对象的字典。如kwargs = {‘name’:Jack, ‘age’:18}。</p>
</li>
<li><p>name：子进程名称。</p>
</li>
<li><p>daemon：设置为守护进程(True)或非守护进程(默认：False)</p>
</li>
</ul>
<blockquote>
<p>Process属性方法介绍</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法/属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">start()</td>
<td align="left">启动进程，调用进程中的run()方法。</td>
</tr>
<tr>
<td align="center">run()</td>
<td align="left">进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法 。</td>
</tr>
<tr>
<td align="center">terminate()</td>
<td align="left">强制终止进程，不会进行任何清理操作。如果该进程终止前，创建了子进程，那么该子进程在其强制结束后变为僵尸进程；如果该进程还保存了一个锁那么也将不会被释放，进而导致死锁。使用时，要注意。</td>
</tr>
<tr>
<td align="center">is_alive()</td>
<td align="left">判断某进程是否存活，存活返回True，否则False。</td>
</tr>
<tr>
<td align="center">join([timeout])</td>
<td align="left">主线程等待子线程终止。timeout为可选择超时时间；需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 。</td>
</tr>
<tr>
<td align="center">daemon</td>
<td align="left">默认值为False，如果设置为True，代表该进程为后台守护进程；当该进程的父进程终止时，该进程也随之终止；并且设置为True后，该进程不能创建子进程，设置该属性必须在start()之前</td>
</tr>
<tr>
<td align="center">name</td>
<td align="left">进程名称。</td>
</tr>
<tr>
<td align="center">pid</td>
<td align="left">进程pid</td>
</tr>
<tr>
<td align="center">exitcode</td>
<td align="left">进程运行时为None，如果为-N，表示被信号N结束了。</td>
</tr>
<tr>
<td align="center">authkey</td>
<td align="left">进程身份验证，默认是由os.urandom()随机生成32字符的字符串。这个键的用途是设计涉及网络连接的底层进程间的通信提供安全性，这类连接只有在具有相同身份验证才能成功。</td>
</tr>
</tbody></table>
<blockquote>
<p>注意:</p>
</blockquote>
<ul>
<li><strong>在进程python的设计里面只有主进程可以接收input()的输入，子进程没有输入模式，运行直接报错</strong></li>
<li><strong>更坑的是进程池，表面上不会出错，但是input()函数一旦进入无法退出，一直在接收输入的数据</strong></li>
</ul>
<h3 id="消息队列multiprocess-Queue"><a href="#消息队列multiprocess-Queue" class="headerlink" title="消息队列multiprocess.Queue"></a>消息队列multiprocess.Queue</h3><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序</p>
<blockquote>
<p>Queue属性方法说明</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法/属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">get( [ block [ ,timeout ] ] )</td>
<td align="left">返回q中的一个元素。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。</td>
</tr>
<tr>
<td align="center">get_nowait( )</td>
<td align="left">同q.get(False)方法。</td>
</tr>
<tr>
<td align="center">put(item [, block [,timeout ] ] )</td>
<td align="left">将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。</td>
</tr>
<tr>
<td align="center">q.qsize()</td>
<td align="left">返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。</td>
</tr>
<tr>
<td align="center">q.empty()</td>
<td align="left">如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。</td>
</tr>
<tr>
<td align="center">q.full()</td>
<td align="left">如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。。</td>
</tr>
<tr>
<td align="center">其他方法(了解)</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">q.close()</td>
<td align="left">关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。</td>
</tr>
<tr>
<td align="center">q.cancel_join_thread()</td>
<td align="left">不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。</td>
</tr>
<tr>
<td align="center">q.join_thread()</td>
<td align="left">连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。</td>
</tr>
</tbody></table>
<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>为什么要有进程池?进程池的概念。</p>
<p>在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？</p>
<p>在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。</p>
<h4 id="multiprocess-Pool模块"><a href="#multiprocess-Pool模块" class="headerlink" title="multiprocess.Pool模块"></a>multiprocess.Pool模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：Pool([numprocess  [,initializer [, initargs]]])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Pool参数介绍</p>
</blockquote>
<ul>
<li><p>numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</p>
</li>
<li><p>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</p>
</li>
<li><p>initargs：是要传给initializer（可迭代）的参数组</p>
</li>
</ul>
<blockquote>
<p>Pool主要方法介绍</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法/属性</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">apply(func [, args [, kwargs]])</td>
<td align="left">在一个池工作进程中执行func(*args,**kwargs),然后返回结果。’需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用apply()函数或者使用p.apply_async()</td>
</tr>
<tr>
<td align="center">apply_async(func [, args [, kwargs]])</td>
<td align="left">在一个池工作进程中执行func(*args,**kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</td>
</tr>
<tr>
<td align="center">close()</td>
<td align="left">关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</td>
</tr>
<tr>
<td align="center">terminate()</td>
<td align="left">不管任务是否完成，立即停止工作进程。在对pool对象进程垃圾回收的时候，会立即调用terminate()</td>
</tr>
<tr>
<td align="center">jion()</td>
<td align="left">等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</td>
</tr>
<tr>
<td align="center">其他方法(了解）</td>
<td align="left">方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</td>
</tr>
<tr>
<td align="center">obj.get()</td>
<td align="left">返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</td>
</tr>
<tr>
<td align="center">obj.ready()</td>
<td align="left">如果调用完成，返回True</td>
</tr>
<tr>
<td align="center">obj.successful()</td>
<td align="left">如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</td>
</tr>
<tr>
<td align="center">obj.wait([timeout])</td>
<td align="left">等待结果变为可用。</td>
</tr>
<tr>
<td align="center">obj.terminate()</td>
<td align="left">立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</td>
</tr>
</tbody></table>
<h4 id="进程池中的Queue"><a href="#进程池中的Queue" class="headerlink" title="进程池中的Queue"></a>进程池中的Queue</h4><p>如果要使用Pool创建进程，就需要使用<code>multiprocessing.Manager()</code>中的<code>Queue()</code>，而不是<code>multiprocessing.Queue()</code></p>
<h2 id="Python-协程"><a href="#Python-协程" class="headerlink" title="Python 协程"></a>Python 协程</h2><p>协程，又称微线程，纤程。英文名Coroutine。协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p>
<p>通俗的理解：<strong>在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</strong></p>
<h3 id="协程-VS-线程"><a href="#协程-VS-线程" class="headerlink" title="协程 VS 线程"></a>协程 VS 线程</h3><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work1---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work2---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(w1)</span><br><span class="line">        <span class="built_in">next</span>(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p>
<p><strong>安装方式</strong><br>使用如下命令安装greenlet模块:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip3 install greenlet</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;---A--&quot;</span></span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;---B--&quot;</span></span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到gr1中运行</span></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure>

<h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块gevent</p>
<p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p>
<p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p>
<p><strong>安装方式</strong><br>使用如下命令安装gevent模块:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install gevent</span><br></pre></td></tr></table></figure>

<p>在gevent中不能直接使用time.sleep类似的方法，要么使用gevent.sleep，要么利用gevent.monkey打补丁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span>(<span class="params">coroutine_name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进程和线程信息"><a href="#进程和线程信息" class="headerlink" title="进程和线程信息"></a>进程和线程信息</h2><p>想要获取线程和进程相关信息，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">获得线程, 进程 ID,NAME</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 获取线程ID,NAME</span></span><br><span class="line">t = threading.currentThread()</span><br><span class="line"><span class="comment"># 线程ID</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Thread id : %d&#x27;</span> % t.ident)</span><br><span class="line"><span class="comment"># 线程NAME</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Thread name : %s&#x27;</span> % t.getName())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 获取线程ID,NAME</span></span><br><span class="line">pid = os.getpid()</span><br><span class="line">p = psutil.Process(pid)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 进程ID</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process id : %d&#x27;</span> % pid)</span><br><span class="line"><span class="comment"># 进程NAME</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process name : %s&#x27;</span> % p.name())</span><br><span class="line"><span class="comment"># 获取进程bin路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process bin  path : %s&#x27;</span> % p.exe())</span><br><span class="line"><span class="comment"># 获取pid对应的路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process path : %s&#x27;</span> % p.cwd())</span><br><span class="line"><span class="comment"># 进程状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process status : %s&#x27;</span> % p.status())</span><br><span class="line"><span class="comment"># 进程运行时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process creation time : %s&#x27;</span> % datetime.datetime.fromtimestamp(p.create_time()).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line"><span class="comment"># CPU使用情况</span></span><br><span class="line"><span class="built_in">print</span>(p.cpu_times())</span><br><span class="line"><span class="comment"># 内存使用情况</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Memory usage : %s%%&#x27;</span> % p.memory_percent())</span><br><span class="line"><span class="comment"># 硬盘读取信息</span></span><br><span class="line"><span class="built_in">print</span>(p.io_counters())</span><br><span class="line"><span class="comment"># 打开进程socket的namedutples列表</span></span><br><span class="line"><span class="built_in">print</span>(p.connections())</span><br><span class="line"><span class="comment"># 此进程的线程数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process number of threads : %s&#x27;</span> % p.num_threads())</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础教程</title>
    <url>/2019/05/27/bjym70Ac6/</url>
    <content><![CDATA[<p>学习数据库安装后，最重要的就是学习SQL语句。</p>
<h2 id="数据语句操作类型"><a href="#数据语句操作类型" class="headerlink" title="数据语句操作类型"></a>数据语句操作类型</h2><p>SQL是操作数据库的核心，</p>
<p>结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。</p>
<p>SQL是最重要的关系数据库操作语言，并且它的影响已经超出数据库领域，得到其他领域的重视和采用，如人工智能领域的数据检索等。</p>
<p>SQL是关系模型的数据库应用语言，由IBM在20世纪70年代为其关系型数据库 System R 所开发。</p>
<p>SQL 是1986年10 月由美国国家标准局（ANSI）通过的数据库语言美国标准，接着，国际标准化组织（ISO）颁布了SQL正式国际标准。1989年4月，ISO提出了具有完整性特征的SQL89标准，1992年11月又公布了SQL92标准。</p>
<p>虽然各个数据库系统略有不同，但是他们基本均遵循SQL 92标准。或者在SQL 92上做了一些简单的扩展和变化。</p>
<p>学好了MySQL 的SQL 语法，其他的SQL语法学习起来均是万变不离其中。</p>
<p>SQL语句按照其功能范围不同可分为3个类别：</p>
<ol>
<li><strong>数据定义语言</strong>(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。</li>
<li><strong>数据操作语言</strong>(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。</li>
<li><strong>数据控制语言</strong>(DCL， Data Control Language)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。</li>
</ol>
<h2 id="管理数据库命令"><a href="#管理数据库命令" class="headerlink" title="管理数据库命令"></a>管理数据库命令</h2><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>以下命令语句可以在 MySQL 的命令提示符使用，获取服务器元数据</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">select version( )</td>
<td align="left">服务器版本信息</td>
</tr>
<tr>
<td align="center">select database( )</td>
<td align="left">当前数据库名 (或者返回空)</td>
</tr>
<tr>
<td align="center">select user( )</td>
<td align="left">当前用户名</td>
</tr>
<tr>
<td align="center">show status</td>
<td align="left">服务器状态</td>
</tr>
<tr>
<td align="center">show variables</td>
<td align="left">服务器配置变量</td>
</tr>
</tbody></table>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>create database 数据库名:<br>创建数据库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database data_test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul>
<li>drop database 数据库名:<br>删除数据库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database data_test;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="展示所有数据库"><a href="#展示所有数据库" class="headerlink" title="展示所有数据库"></a>展示所有数据库</h3><ul>
<li>show databases:<br>列出 MySQL 数据库管理系统的数据库列表。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| data_test          |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="改变数据库"><a href="#改变数据库" class="headerlink" title="改变数据库"></a>改变数据库</h3><ul>
<li>use 数据库名 :<br>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use data_test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<h3 id="展示当前数据库中所有的表"><a href="#展示当前数据库中所有的表" class="headerlink" title="展示当前数据库中所有的表"></a>展示当前数据库中所有的表</h3><ul>
<li>show tables:<br>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------+</span><br><span class="line">| Tables_in_data_test |</span><br><span class="line">+---------------------+</span><br><span class="line">| customers           |</span><br><span class="line">| orderitems          |</span><br><span class="line">| orders              |</span><br><span class="line">| productnotes        |</span><br><span class="line">| products            |</span><br><span class="line">| vendors             |</span><br><span class="line">+---------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="展示特定表中每列的信息"><a href="#展示特定表中每列的信息" class="headerlink" title="展示特定表中每列的信息"></a>展示特定表中每列的信息</h3><ul>
<li>show columns from 数据表(desc 数据表):<br>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show columns from customers;</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type      | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">| cust_id      | int(11)   | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| cust_name    | char(50)  | NO   |     | NULL    |                |</span><br><span class="line">| cust_address | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_city    | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_state   | char(5)   | YES  |     | NULL    |                |</span><br><span class="line">| cust_zip     | char(10)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_country | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_contact | char(50)  | YES  |     | NULL    |                |</span><br><span class="line">| cust_email   | char(255) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-----------+------+-----+---------+----------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="展示数据表的详细索引信息"><a href="#展示数据表的详细索引信息" class="headerlink" title="展示数据表的详细索引信息"></a>展示数据表的详细索引信息</h3><ul>
<li>show index from 数据表:<br>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show index from customers;</span><br><span class="line">+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |</span><br><span class="line">+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| customers |          0 | PRIMARY  |            1 | cust_id     | A         |           5 |  NULL    |   NULL |      | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="展示数据库的性能及统计信息"><a href="#展示数据库的性能及统计信息" class="headerlink" title="展示数据库的性能及统计信息"></a>展示数据库的性能及统计信息</h3><ul>
<li>show table status [from db_name] [like ‘pattern’] \G:<br>该命令将输出Mysql数据库管理系统的性能及统计信息。</li>
</ul>
<blockquote>
<p>显示数据库 data_test 中所有表的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show table status from data_test;</span><br><span class="line">+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| Name         | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |</span><br><span class="line">+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| customers    | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| orderitems   | InnoDB |      10 | Dynamic    |   11 |           1489 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| orders       | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |        16384 |         0 |          20010 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| productnotes | MyISAM |      10 | Dynamic    |   14 |            135 |        1892 | 281474976710655 |         6144 |         0 |            115 | 2019-05-26 10:15:02 | 2019-05-26 10:15:26 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| products     | InnoDB |      10 | Dynamic    |   14 |           1170 |       16384 |               0 |        16384 |         0 |           NULL | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">| vendors      | InnoDB |      10 | Dynamic    |    6 |           2730 |       16384 |               0 |            0 |         0 |           1007 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">+--------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>表名以cus开头的表的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show table status from data_test like <span class="string">&quot;cus%&quot;</span>;</span><br><span class="line">+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| Name      | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time         | Check_time | Collation       | Checksum | Create_options | Comment |</span><br><span class="line">+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">| customers | InnoDB |      10 | Dynamic    |    5 |           3276 |       16384 |               0 |            0 |         0 |          10006 | 2019-05-26 10:15:02 | 2019-05-26 10:15:25 | NULL       | utf8_general_ci |     NULL |                |         |</span><br><span class="line">+-----------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+-----------------+----------+----------------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>表名以cus开头的表的信息;<br>加上 \G，查询结果按列打印;\G后面不能再加分号;<br>因为\G在功能上等同于;<br>如果加了分号，那么就是;;(2个分号)，SQL语法错误<code>ERROR:No query specified</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show table status from data_test like <span class="string">&quot;cus%&quot;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: customers</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Dynamic</span><br><span class="line">           Rows: 5</span><br><span class="line"> Avg_row_length: 3276</span><br><span class="line">    Data_length: 16384</span><br><span class="line">Max_data_length: 0</span><br><span class="line">   Index_length: 0</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: 10006</span><br><span class="line">    Create_time: 2019-05-26 10:15:02</span><br><span class="line">    Update_time: 2019-05-26 10:15:25</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_general_ci</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>mysql支持所有标准sql数值数据类型。</p>
<p>这些类型包括严格数值数据类型（integer、smallint、decimal和numeric），以及近似数值数据类型（float、real和double precisi键字int是integer的同义词，关键字dec是decimal的同义词。</p>
<p>bit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。</p>
<p>作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">大小</th>
<th align="left">范围（有符号）</th>
<th align="left">范围（无符号）</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>tinyint</strong></td>
<td align="center">1 字节</td>
<td align="left">(-128，127)</td>
<td align="left">(0，255)</td>
<td align="center">小整数值</td>
</tr>
<tr>
<td align="center">smallint</td>
<td align="center">2 字节</td>
<td align="left">(-32 768，32 767)</td>
<td align="left">(0，65 535)</td>
<td align="center">大整数值</td>
</tr>
<tr>
<td align="center">mediumint</td>
<td align="center">3 字节</td>
<td align="left">(-8 388 608，8 388 607)</td>
<td align="left">(0，16 777 215)</td>
<td align="center">大整数值</td>
</tr>
<tr>
<td align="center"><strong>int</strong> 或 <strong>integer</strong></td>
<td align="center">4 字节</td>
<td align="left">(-2 147 483 648，2 147 483 647)</td>
<td align="left">(0，4 294 967 295)</td>
<td align="center">大整数值</td>
</tr>
<tr>
<td align="center">bigint</td>
<td align="center">8 字节</td>
<td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td align="left">(0，18 446 744 073 709 551 615)</td>
<td align="center">极大整数值</td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center">4 字节</td>
<td align="left">(-3.402 823 466 e+38，-1.175 494 351 e-38)，0，(1.175 494 351 e-38，3.402 823 466 351 e+38)</td>
<td align="left">0，(1.175 494 351 e-38，3.402 823 466 e+38)</td>
<td align="center">单精度<br/>浮点数值</td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center">8 字节</td>
<td align="left">(-1.797 693 134 862 315 7 e+308，-2.225 073 858 507 201 4 e-308)，0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>
<td align="left">0，(2.225 073 858 507 201 4 e-308，1.797 693 134 862 315 7 e+308)</td>
<td align="center">双精度<br/> 浮点数值</td>
</tr>
<tr>
<td align="center"><strong>decimal</strong></td>
<td align="center">decimal(m,d)</td>
<td align="left">依赖于 m 和 d 的值</td>
<td align="left">依赖于 m 和 d 的值</td>
<td align="center">小数值</td>
</tr>
</tbody></table>
<hr>
<h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为 datetime、date、timestamp、time 和 year。</p>
<p>每个时间类型有一个有效值范围和一个 “零” 值，当指定不合法的 mysql 不能表示的值时使用 “零” 值。</p>
<p>timestamp 类型有专有的自动更新特性，将在后面描述。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">大小(字节)</th>
<th align="left">范围</th>
<th align="center">格式</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>date</strong></td>
<td align="center">3</td>
<td align="left">1000-01-01/9999-12-31</td>
<td align="center">yyyy-mm-dd</td>
<td align="center">日期值</td>
</tr>
<tr>
<td align="center"><strong>time</strong></td>
<td align="center">3</td>
<td align="left">‘-838:59:59’/‘838:59:59’</td>
<td align="center">hh:mm:ss</td>
<td align="center">时间值或持续时间</td>
</tr>
<tr>
<td align="center">year</td>
<td align="center">1</td>
<td align="left">1901/2155</td>
<td align="center">yyyy</td>
<td align="center">年份值</td>
</tr>
<tr>
<td align="center"><strong>datetime</strong></td>
<td align="center">8</td>
<td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td align="center">yyyy-mm-dd hh:mm:ss</td>
<td align="center">混合日期和时间值</td>
</tr>
<tr>
<td align="center"><strong>timestamp</strong></td>
<td align="center">4</td>
<td align="left">1970-01-01 00:00:00/2038<br/>结束时间是第 <strong>2147483647</strong> 秒<br/>北京时间 <strong>2038-1-19 11:14:07</strong><br/>格林尼治时间<strong>2038-1-19 03:14:07</strong></td>
<td align="center">yyyymmdd hhmmss</td>
<td align="center">混合日期和时间值，时间戳</td>
</tr>
</tbody></table>
<hr>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指 char、varchar、binary、varbinary、blob、text、enum 和 set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>char</strong></td>
<td align="left">0-255 字节</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left"><strong>varchar</strong></td>
<td align="left">0-65535 字节</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">tinyblob</td>
<td align="left">0-255 字节</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">tinytext</td>
<td align="left">0-255 字节</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left"><strong>blob</strong></td>
<td align="left">0-65 535 字节</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left"><strong>text</strong></td>
<td align="left">0-65 535 字节</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">mediumblob</td>
<td align="left">0-16 777 215 字节</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">mediumtext</td>
<td align="left">0-16 777 215 字节</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">longblob</td>
<td align="left">0-4 294 967 295 字节</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">longtext</td>
<td align="left">0-4 294 967 295 字节</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<p>char 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>binary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>blob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<blockquote>
<p>注意：</p>
</blockquote>
<p>1、一个汉字占多少长度与编码有关：</p>
<p>UTF－8：一个汉字＝3个字节</p>
<p>GBK：一个汉字＝2个字节</p>
<p>2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别</p>
<p>3、MySQL 检查长度，可用 SQL 语言来查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select length(fieldname) from table_name</span><br></pre></td></tr></table></figure>

<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>创建MySQL数据表需要以下信息：</p>
<ul>
<li>表名</li>
<li>表字段名</li>
<li>定义每个表字段</li>
</ul>
<p><strong>语法</strong><br>以下为创建MySQL数据表的SQL通用语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create table table_name (column_name column_type);</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong><br>以下例子中我们将在 my_data 数据库中创建数据表students：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table <span class="keyword">if</span> not exists students(id int unsigned auto_increment, name varchar(40) not null, adress varchar(100) , birthday date not null, primary key(id)) engine=innodb default charset=utf8mb4;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show columns from students;</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field    | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name     | varchar(40)      | NO   |     | NULL    |                |</span><br><span class="line">| adress   | varchar(100)     | YES  |     | NULL    |                |</span><br><span class="line">| birthday | date             | NO   |     | NULL    |                |</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>实例解析：</p>
<ul>
<li>如果你不想字段为 null 可以设置字段的属性为 not null， 在操作数据库时如果输入该字段的数据为null ，就会报错。</li>
<li>auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。</li>
<li>primary key关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>
<li>engine 设置存储引擎，charset 设置编码。</li>
</ul>
<h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p>MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。</p>
<p><strong>语法</strong><br>以下为删除MySQL数据表的通用语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drop table table_name;</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong><br>以下实例中我们将删除 students 表:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table students;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>MySQL 表中使用 insert into SQL语句来插入数据。</p>
<p><strong>语法</strong><br>以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insert into table_name ( field1, field2,...fieldN ) values ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<p>insert 插入多条数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insert into table_name  (field1, field2,...fieldn)  values  (valuea1,valuea2,...valuean),(valueb1,valueb2,...valuebn),(valuec1,valuec2,...valuecn)......;</span><br></pre></td></tr></table></figure>

<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
<p><strong>实例</strong><br>以下实例中我们将向 students 表插入数据:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主键默认从1开始</span></span><br><span class="line">mysql&gt; insert into students (name,birthday) values(<span class="string">&quot;丽丽&quot;</span>,<span class="string">&quot;1996-05-06&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主键设为0，即从最后一个id值自动增长</span></span><br><span class="line">mysql&gt; insert into students values(0,<span class="string">&quot;李明&quot;</span>,null,<span class="string">&quot;1993-12-16&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into students values(10,<span class="string">&quot;张磊&quot;</span>,<span class="string">&#x27;北京市海淀区&#x27;</span>,<span class="string">&quot;1995-04-12&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主键不设置，从最后一个id值自动增长</span></span><br><span class="line">mysql&gt; insert into students <span class="built_in">set</span> name=<span class="string">&quot;孙雨&quot;</span>,adress=<span class="string">&#x27;河北省石家庄市&#x27;</span>,birthday=<span class="string">&quot;1989-07-18&quot;</span>;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果添加过主键自增（PRINARY KEY AUTO_INCREMENT）第一列在增加数据的时候，可以写为0或者null，这样添加数据可以自增</p>
</blockquote>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用where语句来设定查询条件。</li>
<li>where 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>
<li>以下为操作符列表，可用于 where 子句中。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 and 或者 or 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 delete 或者 update 命令。</li>
</ul>
<blockquote>
<p>下表中实例假定 A 为 10, B 为 20</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="left">等号，检测两个值是否相等，如果相等返回true</td>
<td align="left">(A = B) 返回false。</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="left">不等于，检测两个值是否相等，如果不相等返回true</td>
<td align="left">(A != B) 返回 true。</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td>
<td align="left">(A &gt; B) 返回false。</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td>
<td align="left">(A &lt; B) 返回 true。</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td>
<td align="left">(A &gt;= B) 返回false。</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="left">小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td>
<td align="left">(A &lt;= B) 返回 true。</td>
</tr>
</tbody></table>
<p>如果我们想在 MySQL 数据表中读取指定的数据，where 子句是非常有用的。</p>
<p>使用主键来作为 where 子句的条件查询是非常快速的。</p>
<p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>MySQL 数据库使用SQL select语句来查询数据。</p>
<p><strong>语法</strong><br>以下为在MySQL数据库中查询数据通用的 select 语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select column_name,column_name</span><br><span class="line">from table_name</span><br><span class="line">[<span class="built_in">where</span> Clause]</span><br><span class="line">[<span class="built_in">limit</span> N][ offset M]</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用where语句来设定查询条件。</li>
<li>select 命令可以读取一条或者多条记录。</li>
<li>你可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据</li>
<li>你可以使用 limit 属性来设定返回的记录数。</li>
<li>你可以通过offset指定select语句开始查询的数据偏移量。默认情况下偏移量为0。</li>
</ul>
<p><strong>实例</strong><br>以下实例我们将通过 SQL select 命令来获取 MySQL 数据表 students 的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| id | name | adress         | birthday   |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">|  1 | 丽丽 | NULL           | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | NULL           | 1993-12-16 |</span><br><span class="line">| 10 | 张磊 | 北京市海淀区    | 1995-04-12 |</span><br><span class="line">| 11 | 孙雨 | 河北省石家庄市  | 1989-07-18 |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name from students <span class="built_in">limit</span> 2 offset 1;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  2 | 李明 |</span><br><span class="line">| 10 | 张磊 |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students <span class="built_in">where</span> id&gt;=10;</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| id | name | adress         | birthday   |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |</span><br><span class="line">| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students <span class="built_in">where</span> id&gt;=10 <span class="built_in">limit</span> 1 offset 1;</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| id | name | adress         | birthday   |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students <span class="built_in">where</span> name=<span class="string">&quot;李明&quot;</span>;</span><br><span class="line">+----+------+--------+------------+</span><br><span class="line">| id | name | adress | birthday   |</span><br><span class="line">+----+------+--------+------------+</span><br><span class="line">|  2 | 李明 | NULL   | 1993-12-16 |</span><br><span class="line">+----+------+--------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL update 命令来操作。</p>
<p><strong>语法</strong><br>以下是 update 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update table_name <span class="built_in">set</span> field1=new-value1, field2=new-value2 [<span class="built_in">where</span> clause]</span><br></pre></td></tr></table></figure>

<p>当我们需要将字段中的特定字符串批量修改为其他字符串时，可已使用以下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update table_name <span class="built_in">set</span> field=replace(field, <span class="string">&#x27;old-string&#x27;</span>, <span class="string">&#x27;new-string&#x27;</span>) [<span class="built_in">where</span> clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。<br>当你需要更新数据表中指定行的数据时 where 子句是非常有用的。</li>
</ul>
<p><strong>实例</strong><br>以下我们将在 SQL update 命令使用 where 子句来更新 students 表中指定的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; update students <span class="built_in">set</span> adress=<span class="string">&quot;北京市昌平区&quot;</span> <span class="built_in">where</span> adress is null;</span><br><span class="line">Query OK, 2 rows affected (0.01 sec)</span><br><span class="line">Rows matched: 2  Changed: 2  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">| id | name | adress         | birthday   |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区   | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区   | 1993-12-16 |</span><br><span class="line">| 10 | 张磊 | 北京市海淀区   | 1995-04-12 |</span><br><span class="line">| 11 | 孙雨 | 河北省石家庄市 | 1989-07-18 |</span><br><span class="line">+----+------+----------------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update students <span class="built_in">set</span> adress=replace(adress, <span class="string">&quot;河北省石家庄&quot;</span>,<span class="string">&quot;湖北省武汉&quot;</span>) wh</span><br><span class="line">ere id=11;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">| 10 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update students <span class="built_in">set</span> id=id-7 <span class="built_in">where</span> id=10;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">| 11 | 孙雨 | 湖北省武汉市 | 1989-07-18 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>你可以使用 sql 的 delete from 命令来删除 mysql 数据表中的记录。</p>
<p><strong>语法</strong><br>以下是 sql delete 语句从 mysql 数据表中删除数据的通用语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete from table_name [<span class="built_in">where</span> clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定 where 子句，mysql 表中的所有记录将被删除。</li>
<li>你可以在 where 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。<br>当你想删除数据表中指定的记录时 where 子句是非常有用的。</li>
</ul>
<p><strong>实例</strong><br>这里我们将在 sql delete 命令中使用 where 子句来删除 mysql 数据表 students 所选的数据:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; delete from students <span class="built_in">where</span> id=11;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>delete，drop，truncate 都有删除表的作用，区别在于：</p>
</blockquote>
<p>1、drop table table_name : 删除表全部数据和表结构，立刻释放磁盘空间，不管是 Innodb 和 MyISAM;</p>
<p>实例，删除学生表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drop table students;</span><br></pre></td></tr></table></figure>

<p>2、truncate table table_name : 删除表全部数据，保留表结构，立刻释放磁盘空间 ，不管是 Innodb 和 MyISAM;</p>
<p>实例，删除学生表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">truncate table students;</span><br></pre></td></tr></table></figure>

<p>3、delete from table_name : 删除表全部数据，表结构不变，对于 MyISAM 会立刻释放磁盘空间，InnoDB 不会释放磁盘空间;</p>
<p>实例，删除学生表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete from students;</span><br></pre></td></tr></table></figure>

<p>4、delete from table_name where xxx : 带条件的删除，表结构不变，不管是 innodb 还是 MyISAM 都不会释放磁盘空间;</p>
<p>实例，删除学生表中姓名为 “张三” 的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete from student <span class="built_in">where</span> name = <span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>5、delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;</p>
<p>实例，删除学生表中姓名为 “张三” 的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete from student <span class="built_in">where</span> name = <span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>实例，释放学生表的表空间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">optimize table students;</span><br></pre></td></tr></table></figure>

<p>6、delete from 表以后虽然未释放磁盘空间，但是下次插入数据的时候，仍然可以使用这部分空间。</p>
<h2 id="包含条件"><a href="#包含条件" class="headerlink" title="包含条件"></a>包含条件</h2><p>我们知道在 mysql 中使用 sql select 命令来读取数据， 同时我们可以在 select 语句中使用 where 子句来获取指定的记录。</p>
<p>where 子句中可以使用等号 = 来设定获取数据的条件，如 “adress = ‘北京市昌平区’”。</p>
<p>但是有时候我们需要获取 adress 字段含有 “北京市” 字符的所有记录，这时我们就需要在 where 子句中使用 sql like 子句。</p>
<p><strong>语法</strong><br>以下是 sql select 语句使用 like 子句从数据表中读取数据的通用语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select field1, field2,...fieldn from table_name <span class="built_in">where</span> field1 like condition1 [and [or]] filed2 = <span class="string">&#x27;somevalue&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sql like 子句中使用百分号 %字符来表示任意字符，类似于unix或正则表达式中的星号 *。</li>
<li>如果没有使用百分号 %, like 子句与等号 = 的效果是一样的。</li>
<li>like 通常与 % 一同使用，类似于一个元字符的搜索。</li>
<li>可以使用 and 或者 or 指定一个或多个条件。</li>
<li>可以在 delete、select或 update 命令中使用 where…like 子句来指定条件。</li>
</ul>
<p><strong>实例</strong><br>以下我们将在 sql select 命令中使用 where…like 子句来从mysql数据表 students 中读取数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from students <span class="built_in">where</span> adress like <span class="string">&quot;北京市%&quot;</span>;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 where like 的条件查询中，SQL 提供了四种匹配方式。</p>
</blockquote>
<ul>
<li><code>%</code>：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。</li>
<li><code>_</code>：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。</li>
<li><code>[]</code>：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</li>
<li><code>[^]</code>：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。</li>
<li>查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。</li>
</ul>
<blockquote>
<p>like 匹配/模糊匹配，会与 % 和 _ 结合使用。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%a&#x27;</span>     //以a结尾的数据</span><br><span class="line"><span class="string">&#x27;a%&#x27;</span>     //以a开头的数据</span><br><span class="line"><span class="string">&#x27;%a%&#x27;</span>    //含有a的数据</span><br><span class="line"><span class="string">&#x27;_a_&#x27;</span>    //三位且中间字母是a的</span><br><span class="line"><span class="string">&#x27;_a&#x27;</span>     //两位且结尾字母是a的</span><br><span class="line"><span class="string">&#x27;a_&#x27;</span>     //两位且开头字母是a的</span><br></pre></td></tr></table></figure>

<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p>
<p><strong>语法</strong><br>mysql union 操作符语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select expression1, expression2, ... expression_n</span><br><span class="line">from tables</span><br><span class="line">[<span class="built_in">where</span> conditions]</span><br><span class="line">union [all | distinct]</span><br><span class="line">select expression1, expression2, ... expression_n</span><br><span class="line">from tables</span><br><span class="line">[<span class="built_in">where</span> conditions];</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><p>expression1, expression2, … expression_n: 要检索的列。</p>
</li>
<li><p>tables: 要检索的数据表。</p>
</li>
<li><p>where conditions: 可选， 检索条件。</p>
</li>
<li><p>distinct: 可选，删除结果集中重复的数据。默认情况下 union 操作符已经删除了重复数据，所以 distinct 修饰符对结果没啥影响。</p>
</li>
<li><p>all: 可选，返回所有结果集，包含重复数据。</p>
</li>
</ul>
<p><strong>实例</strong><br>下面的 SQL 语句从 “students” 和 “teachers” 表中选取所有不同的adress（只有不同的值）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from students;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from teachers;</span><br><span class="line">+----+--------+--------------+----------+</span><br><span class="line">| id | name   | adress       | birthday |</span><br><span class="line">+----+--------+--------------+----------+</span><br><span class="line">|  1 | 刘老师 | 北京市海淀区 | NULL     |</span><br><span class="line">|  2 | 孙老师 | 北京市朝阳区 | NULL     |</span><br><span class="line">|  3 | 常老师 | 北京市昌平区 | NULL     |</span><br><span class="line">+----+--------+--------------+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select adress from students union select adress from teachers ;</span><br><span class="line">+--------------+</span><br><span class="line">| adress       |</span><br><span class="line">+--------------+</span><br><span class="line">| 北京市昌平区 |</span><br><span class="line">| 北京市海淀区 |</span><br><span class="line">| 北京市朝阳区 |</span><br><span class="line">+--------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select name from students <span class="built_in">where</span> adress like <span class="string">&quot;%昌平区&quot;</span> union select name from teachers <span class="built_in">where</span> adress like <span class="string">&quot;%昌平区&quot;</span> ;</span><br><span class="line">+--------+</span><br><span class="line">| name   |</span><br><span class="line">+--------+</span><br><span class="line">| 丽丽   |</span><br><span class="line">| 李明   |</span><br><span class="line">| 常老师 |</span><br><span class="line">+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）<br>UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p>
</blockquote>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>我们知道从 mysql 表中使用 sql select 语句来读取数据。</p>
<p>如果我们需要对读取的数据进行排序，我们就可以使用 mysql 的 order by 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p>
<p><strong>语法</strong><br>以下是 sql select 语句使用 order by 子句将查询数据排序后再返回数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select field1, field2,...fieldn table_name1, table_name2... order by field1 [asc [desc][默认 asc]], [field2...] [asc [desc][默认 asc]]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>你可以设定多个字段来排序。</li>
<li>你可以使用 asc 或 desc 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li>
<li>你可以添加 where…like 子句来设置条件。</li>
</ul>
<p><strong>实例</strong><br>尝试以下实例，结果将按升序及降序排列。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from students <span class="built_in">where</span> adress like <span class="string">&quot;北京市%&quot;</span> order by birthday;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students <span class="built_in">where</span> adress like <span class="string">&quot;北京市%&quot;</span> order by birthday desc;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from students <span class="built_in">where</span> adress like <span class="string">&quot;北京市%&quot;</span> order by birthday asc;</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">| id | name | adress       | birthday   |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">|  2 | 李明 | 北京市昌平区 | 1993-12-16 |</span><br><span class="line">|  3 | 张磊 | 北京市海淀区 | 1995-04-12 |</span><br><span class="line">|  1 | 丽丽 | 北京市昌平区 | 1996-05-06 |</span><br><span class="line">+----+------+--------------+------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>group by 语句根据一个或多个列对结果集进行分组。<br>在分组的列上我们可以使用 count, sum, avg等函数。</p>
<p><strong>语法</strong><br>以下是gruop by语句的语法示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select column_name, <span class="keyword">function</span>(column_name) from table_name <span class="built_in">where</span> column_name operator value group by column_name;</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong><br>接下来我们使用 group by 语句 将数据表按名字进行分组，并统计每个商品有多少条记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from goods;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| id | name   | nums |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 西瓜   |   50 |</span><br><span class="line">|  2 | 甜瓜   |   15 |</span><br><span class="line">|  3 | 甜瓜   |   15 |</span><br><span class="line">|  4 | 苹果   |   25 |</span><br><span class="line">|  5 | 西瓜   |   25 |</span><br><span class="line">|  6 | 西瓜   |   63 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select name, count(name) from goods group by name;</span><br><span class="line">+--------+-------------+</span><br><span class="line">| name   | count(name) |</span><br><span class="line">+--------+-------------+</span><br><span class="line">| 甜瓜   |           2 |</span><br><span class="line">| 苹果   |           1 |</span><br><span class="line">| 西瓜   |           3 |</span><br><span class="line">+--------+-------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>with rollup 可以实现在分组统计数据基础上再进行相同的统计（sum,avg,count…）。</p>
<p>例如我们将以上的数据表按商品名称进行分组，再统计每类商品的总数量，或者求其均值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, sum(nums) as count_num from goods group by name;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| name   | count_num |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| 甜瓜   |        30 |</span><br><span class="line">| 苹果   |        25 |</span><br><span class="line">| 西瓜   |       138 |</span><br><span class="line">+--------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select name, avg(nums) as avg_num from goods group by name with rollup;</span><br><span class="line">+--------+---------+</span><br><span class="line">| name   | avg_num |</span><br><span class="line">+--------+---------+</span><br><span class="line">| 甜瓜   | 15.0000 |</span><br><span class="line">| 苹果   | 25.0000 |</span><br><span class="line">| 西瓜   | 46.0000 |</span><br><span class="line">| NULL   | 32.1667 |</span><br><span class="line">+--------+---------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select coalesce(a,b,c);</span><br></pre></td></tr></table></figure>

<p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p>
<p>以下实例中如果名字为空我们使用总数代替：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select coalesce(name, <span class="string">&#x27;总计&#x27;</span>) as 名称, sum(nums) as 数量 from goods group by name with rollup;</span><br><span class="line">+--------+--------+</span><br><span class="line">| 名称   | 数量   |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 甜瓜   |     30 |</span><br><span class="line">| 苹果   |     25 |</span><br><span class="line">| 西瓜   |    138 |</span><br><span class="line">| 总计   |    193 |</span><br><span class="line">+--------+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>在前面的章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。</p>
<p>本章节我们将向大家介绍如何使用 mysql 的 join 在两个或多个表中查询数据。</p>
<p>你可以在 select, update 和 delete 语句中使用 mysql 的 join 来联合多表查询。</p>
<p>join 按照功能大致分为如下三类：</p>
<ul>
<li>inner join（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>
<li>left join（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li>right join（右连接）： 与 left join 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>
</ul>
<p><strong>实例</strong><br>首先创建表，并添加测试数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table web_counts(id int unsigned auto_increment primary key, web_name varchar(20) not null, nums int unsigned default 0) default charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table web_info(id int unsigned auto_increment primary key, web_name varchar(20) not null, web_info varchar(50), create_time date not null) default charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc web_info;</span><br><span class="line">+-------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field       | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id          | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| web_name    | varchar(20)      | NO   |     | NULL    |                |</span><br><span class="line">| web_info    | varchar(50)      | YES  |     | NULL    |                |</span><br><span class="line">| create_time | date             | NO   |     | NULL    |                |</span><br><span class="line">+-------------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc web_counts;</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field    | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| web_name | varchar(20)      | NO   |     | NULL    |                |</span><br><span class="line">| nums     | int(10) unsigned | YES  |     | 0       |                |</span><br><span class="line">+----------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_counts values(0, <span class="string">&quot; 淘宝&quot;</span>,1000);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_counts values(0, <span class="string">&quot;百度&quot;</span>, 3000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_counts values(0, <span class="string">&quot;腾讯&quot;</span>, 2000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_counts values(0, <span class="string">&quot;网易&quot;</span>, 900);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from web_counts;</span><br><span class="line">+----+----------+------+</span><br><span class="line">| id | web_name | nums |</span><br><span class="line">+----+----------+------+</span><br><span class="line">|  1 | 淘宝     | 1000 |</span><br><span class="line">|  2 | 百度     | 3000 |</span><br><span class="line">|  3 | 腾讯     | 2000 |</span><br><span class="line">|  4 | 网易     |  900 |</span><br><span class="line">+----+----------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_info values(0, <span class="string">&quot;百度&quot;</span>, <span class="string">&quot;搜索网站&quot;</span>,<span class="string">&quot;1989-9-01&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_info values(0, <span class="string">&quot;腾讯&quot;</span>, <span class="string">&quot;社交网站&quot;</span>,<span class="string">&quot;1991-02-05&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_info values(0, <span class="string">&quot;网易&quot;</span>, <span class="string">&quot;门户网站&quot;</span>,<span class="string">&quot;1990-08-09&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into web_info values(0, <span class="string">&quot;新浪&quot;</span>, <span class="string">&quot;社交网站&quot;</span>,<span class="string">&quot;1993-05-12&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from web_info;</span><br><span class="line">+----+----------+--------------+-------------+</span><br><span class="line">| id | web_name | web_info     | create_time |</span><br><span class="line">+----+----------+--------------+-------------+</span><br><span class="line">|  1 | 百度     | 搜索网站     | 1989-09-01  |</span><br><span class="line">|  2 | 腾讯     | 社交网站     | 1991-02-05  |</span><br><span class="line">|  3 | 网易     | 门户网站     | 1990-08-09  |</span><br><span class="line">|  4 | 新浪     | 社交网站     | 1993-05-12  |</span><br><span class="line">+----+----------+--------------+-------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>接下来我们就使用mysql的inner join(也可以省略 inner 使用 join，效果一样)来连接以上两张表来读取web_counts表中所有web_name字段在web_info表对应的字段值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a inner join web_info b on a.web_name=b.web_name;</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">| id | web_name | nums | web_info     | create_time |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |</span><br><span class="line">|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |</span><br><span class="line">|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以上 SQL 语句等价于：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select b.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a, web_info b <span class="built_in">where</span> a.web_name=b.web_name;</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">| id | web_name | nums | web_info     | create_time |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |</span><br><span class="line">|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |</span><br><span class="line">|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>mysql left join 与 join 有所不同。 mysql left join 会读取左边数据表的全部数据，即便右边表无对应数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select a.id, a.web_name, a.nums,b.web_info, b.create_time from web_counts a left join web_info b on a.web_name=b.web_name order by a.id;</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">| id | web_name | nums | web_info     | create_time |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">|  1 | 淘宝     | 1000 | NULL         | NULL        |</span><br><span class="line">|  2 | 百度     | 3000 | 搜索网站     | 1989-09-01  |</span><br><span class="line">|  3 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |</span><br><span class="line">|  4 | 网易     |  900 | 门户网站     | 1990-08-09  |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>mysql right join 会读取右边数据表的全部数据，即便左边边表无对应数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select b.id, b.web_name, a.nums,b.web_info, b.create_time from web_counts a right join web_info b on a.web_name=b.web_name order by b.id;</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">| id | web_name | nums | web_info     | create_time |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">|  1 | 百度     | 3000 | 搜索网站     | 1989-09-01  |</span><br><span class="line">|  2 | 腾讯     | 2000 | 社交网站     | 1991-02-05  |</span><br><span class="line">|  3 | 网易     |  900 | 门户网站     | 1990-08-09  |</span><br><span class="line">|  4 | 新浪     | NULL | 社交网站     | 1993-05-12  |</span><br><span class="line">+----+----------+------+--------------+-------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>mysql 正则表达式<br>在前面的章节我们已经了解到mysql可以通过 <code>like ...%</code> 来进行模糊匹配。</p>
<p>mysql 同样也支持其他正则表达式的匹配， mysql中使用 regexp 操作符来进行正则表达式匹配。</p>
<p>下表中的正则模式可应用于 <code>regexp</code> 操作符中。</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>^</code></td>
<td align="left">匹配输入字符串的开始位置。如果设置了 regexp 对象的 multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="left">匹配输入字符串的结束位置。如果设置了regexp 对象的 multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td align="center"><code>.</code></td>
<td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td>
</tr>
<tr>
<td align="center"><code>[...]</code></td>
<td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td align="center"><code>[^...]</code></td>
<td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td>
</tr>
<tr>
<td align="center">`p1</td>
<td align="left">p2`</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>
</tr>
</tbody></table>
<p><strong>实例</strong><br>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的sql语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：</p>
<ul>
<li>查找name字段中以’st’为开头的所有数据：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from person_tbl <span class="built_in">where</span> name regexp <span class="string">&#x27;^st&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中以’ok’为结尾的所有数据：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from person_tbl <span class="built_in">where</span> name regexp <span class="string">&#x27;ok$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中包含’mar’字符串的所有数据：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from person_tbl <span class="built_in">where</span> name regexp <span class="string">&#x27;mar&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name from person_tbl <span class="built_in">where</span> name regexp <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h2><p>为了处理这种情况，mysql提供了三大运算符:</p>
<ul>
<li>is null: 当列的值是 null,此运算符返回 true。</li>
<li>is not null: 当列的值不为 null, 运算符返回 true。</li>
<li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 null 时返回 true。</li>
</ul>
<blockquote>
<p>关于 null 的条件比较运算是比较特殊的。你不能使用 = null 或 != null 在列中查找 null 值 。</p>
</blockquote>
<blockquote>
<p>在 mysql 中，null 值与任何其它值的比较（即使是 null）永远返回 false，即 null = null 返回false 。</p>
</blockquote>
<p>mysql 中处理 null 使用 is null 和 is not null 运算符。</p>
<p><strong>实例</strong><br>在数据库my_data中创建student表，并插入相应数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student(ID int unsigned auto_increment primary key,name varchar(10) not null,age int unsigned) default charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.25 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0, <span class="string">&quot;李华&quot;</span>,25);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0, <span class="string">&quot;敏柔&quot;</span>,null);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0, <span class="string">&quot;赵强&quot;</span>,null);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0, <span class="string">&quot;罗晴&quot;</span>,23);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以下实例中你可以看到 = 和 != 运算符是不起作用的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,name,age=null from student;</span><br><span class="line">+----+--------+----------+</span><br><span class="line">| id | name   | age=null |</span><br><span class="line">+----+--------+----------+</span><br><span class="line">|  1 | 李华   |     NULL |</span><br><span class="line">|  2 | 敏柔   |     NULL |</span><br><span class="line">|  3 | 赵强   |     NULL |</span><br><span class="line">|  4 | 罗晴   |     NULL |</span><br><span class="line">+----+--------+----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name,age!=null from student;</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">| id | name   | age!=null |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">|  1 | 李华   |      NULL |</span><br><span class="line">|  2 | 敏柔   |      NULL |</span><br><span class="line">|  3 | 赵强   |      NULL |</span><br><span class="line">|  4 | 罗晴   |      NULL |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查找数据表中 age 列是否为 null，必须使用 &lt;=&gt; 、is null 和 is not null，如下实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id,name,age is null from student;</span><br><span class="line">+----+--------+-------------+</span><br><span class="line">| id | name   | age is null |</span><br><span class="line">+----+--------+-------------+</span><br><span class="line">|  1 | 李华   |           0 |</span><br><span class="line">|  2 | 敏柔   |           1 |</span><br><span class="line">|  3 | 赵强   |           1 |</span><br><span class="line">|  4 | 罗晴   |           0 |</span><br><span class="line">+----+--------+-------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select id,name,age&lt;=&gt;null from student;</span><br><span class="line">+----+--------+------------+</span><br><span class="line">| id | name   | age&lt;=&gt;null |</span><br><span class="line">+----+--------+------------+</span><br><span class="line">|  1 | 李华   |          0 |</span><br><span class="line">|  2 | 敏柔   |          1 |</span><br><span class="line">|  3 | 赵强   |          1 |</span><br><span class="line">|  4 | 罗晴   |          0 |</span><br><span class="line">+----+--------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>mysql 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 mysql 中只有使用了 innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 sql 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（acid）：：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p>
<ul>
<li><p><strong>原子性</strong>：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
</li>
<li><p><strong>一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
</li>
<li><p><strong>隔离性</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable）。</p>
</li>
<li><p><strong>持久性</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</li>
</ul>
<blockquote>
<p>在 mysql 命令行的默认设置下，事务都是自动提交的，即执行 sql 语句后就会马上执行 commit 操作。因此要显式地开启一个事务务须使用命令 begin 或 start transaction，或者执行命令 set autocommit=0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<h3 id="事务控制语句："><a href="#事务控制语句：" class="headerlink" title="事务控制语句："></a>事务控制语句：</h3><ul>
<li><p>begin 或 start transaction 显式地开启一个事务；</p>
</li>
<li><p>commit 也可以使用 commit work，不过二者是等价的。commit 会提交事务，并使已对数据库进行的所有修改成为永久性的；</p>
</li>
<li><p>rollback 也可以使用 rollback work，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p>
</li>
<li><p>savepoint identifier，savepoint 允许在事务中创建一个保存点，一个事务中可以有多个 savepoint；</p>
</li>
<li><p>release savepoint identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p>
</li>
<li><p>rollback to identifier 把事务回滚到标记点；</p>
</li>
<li><p>set transaction 用来设置事务的隔离级别。innodb 存储引擎提供事务的隔离级别有read uncommitted、read committed、repeatable read 和 serializable。</p>
</li>
</ul>
<h3 id="mysql-事务处理主要有两种方法："><a href="#mysql-事务处理主要有两种方法：" class="headerlink" title="mysql 事务处理主要有两种方法："></a>mysql 事务处理主要有两种方法：</h3><p>1、用 begin, rollback, commit来实现</p>
<ul>
<li>begin 开始一个事务</li>
<li>rollback 事务回滚</li>
<li>commit 事务确认</li>
</ul>
<p>2、直接用 set 来改变 mysql 的自动提交模式:</p>
<ul>
<li>set autocommit=0 禁止自动提交</li>
<li>set autocommit=1 开启自动提交</li>
</ul>
<p><strong>实例</strong><br>下面具体演示MySQL事务的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin; <span class="comment"># 开启事务</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0,<span class="string">&quot;寒梅&quot;</span>,28); <span class="comment"># 插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  5 | 寒梅   |   28 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback; <span class="comment"># 回滚</span></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0,<span class="string">&quot;寒梅&quot;</span>,28); <span class="comment"># 插入数据</span></span><br><span class="line">Query OK, 1 row affected (0.15 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  6 | 寒梅   |   28 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(5,<span class="string">&quot;李磊&quot;</span>,26);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0,<span class="string">&quot;张雷&quot;</span>,20);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> autocommit=0; <span class="comment"># 禁止自动提交</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(0,<span class="string">&quot;韩美美&quot;</span>,20);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+-----------+------+</span><br><span class="line">| ID | name      | age  |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">|  1 | 李华      |   25 |</span><br><span class="line">|  2 | 敏柔      | NULL |</span><br><span class="line">|  3 | 赵强      | NULL |</span><br><span class="line">|  4 | 罗晴      |   23 |</span><br><span class="line">|  5 | 李磊      |   26 |</span><br><span class="line">|  6 | 寒梅      |   28 |</span><br><span class="line">|  7 | 张雷      |   20 |</span><br><span class="line">|  8 | 莉莉      |   20 |</span><br><span class="line">|  9 | 韩美美    |   20 |</span><br><span class="line">+----+-----------+------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback; <span class="comment"># 回滚</span></span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   | NULL |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  5 | 李磊   |   26 |</span><br><span class="line">|  6 | 寒梅   |   28 |</span><br><span class="line">|  7 | 张雷   |   20 |</span><br><span class="line">|  8 | 莉莉   |   20 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update student <span class="built_in">set</span> age=23 <span class="built_in">where</span> name=<span class="string">&quot;敏柔&quot;</span>; <span class="comment"># 修改数据</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   |   23 |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  5 | 李磊   |   26 |</span><br><span class="line">|  6 | 寒梅   |   28 |</span><br><span class="line">|  7 | 张雷   |   20 |</span><br><span class="line">|  8 | 莉莉   |   20 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint point1; <span class="comment"># 创建保存点</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update student <span class="built_in">set</span> age=22 <span class="built_in">where</span> name=<span class="string">&quot;赵强&quot;</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   |   23 |</span><br><span class="line">|  3 | 赵强   |   22 |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  5 | 李磊   |   26 |</span><br><span class="line">|  6 | 寒梅   |   28 |</span><br><span class="line">|  7 | 张雷   |   20 |</span><br><span class="line">|  8 | 莉莉   |   20 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback to point1; <span class="comment"># 回滚到保存点</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------+</span><br><span class="line">| ID | name   | age  |</span><br><span class="line">+----+--------+------+</span><br><span class="line">|  1 | 李华   |   25 |</span><br><span class="line">|  2 | 敏柔   |   23 |</span><br><span class="line">|  3 | 赵强   | NULL |</span><br><span class="line">|  4 | 罗晴   |   23 |</span><br><span class="line">|  5 | 李磊   |   26 |</span><br><span class="line">|  6 | 寒梅   |   28 |</span><br><span class="line">|  7 | 张雷   |   20 |</span><br><span class="line">|  8 | 莉莉   |   20 |</span><br><span class="line">+----+--------+------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit; <span class="comment"># 事务提交</span></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<h2 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL alter命令。</p>
<h3 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h3><p>如下命令使用了 alter 命令及 drop 子句来删除以上创建表的 age 字段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | YES  |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table table_name  drop field_name;</span><br><span class="line">Query OK, 0 rows affected (0.92 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果数据表中只剩余一个字段则无法使用drop来删除字段。</p>
<h3 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h3><p>mysql 中使用 add 子句来向数据表中添加列，如下实例在表 student 中添加 age 字段，并定义数据类型:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student add age int unsigned not null;</span><br><span class="line">Query OK, 0 rows affected (0.53 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| ID    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>执行以上命令后，field_name 字段会自动添加到数据表字段的末尾。</p>
<p>如果你需要指定新增字段的位置，可以使用mysql提供的关键字 first (设定位第一列)， after 字段名（设定位于某个字段之后）。</p>
<p>尝试以下 alter table 语句, 在执行成功后，使用 show columns 查看表结构的变化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------------+------+-----+---------+-------+</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |       |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |       |</span><br><span class="line">+-------+------------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student add id int unsigned auto_increment primary key first;</span><br><span class="line">Query OK, 0 rows affected (0.56 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student add class int unsigned after id;</span><br><span class="line">Query OK, 0 rows affected (0.54 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class | int(10) unsigned | YES  |     | NULL    |                |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>first 和 after 关键字可用于 add 与 modify 子句，所以如果你想重置数据表字段的位置就需要先使用 drop 删除字段然后使用 add 来添加字段并设置位置。</p>
<h3 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h3><p>如果需要修改字段类型及名称, 你可以在alter命令中使用 modify 或 change 子句 。</p>
<p>例如，把字段 class 的类型从 int unsigned 改为 varchar(10)，可以执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class | int(10) unsigned | YES  |     | NULL    |                |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student modify class varchar(10);</span><br><span class="line">Query OK, 8 rows affected (0.69 sec)</span><br><span class="line">Records: 8  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class | varchar(10)      | YES  |     | NULL    |                |</span><br><span class="line">| name  | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age   | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>使用 change 子句, 语法有很大的不同。 在 change 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</p>
<p>当你修改字段时，你可以指定是否包含值或者是否设置默认值。</p>
<p>如果你不设置默认值，mysql会自动设置该字段默认为 null。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student change class class_room varchar(20) default <span class="string">&quot;203&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class_room | varchar(20)      | YES  |     | 203     |                |</span><br><span class="line">| name       | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age        | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>你可以使用 alter 来修改字段的默认值，尝试以下实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student alter class_room <span class="built_in">set</span> default <span class="string">&quot;205&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class_room | varchar(20)      | YES  |     | 205     |                |</span><br><span class="line">| name       | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age        | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>你也可以使用 alter 命令及 drop子句来删除字段的默认值，如下实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student alter class_room drop default;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc student;</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class_room | varchar(20)      | YES  |     | NULL    |                |</span><br><span class="line">| name       | varchar(10)      | NO   |     | NULL    |                |</span><br><span class="line">| age        | int(10) unsigned | NO   |     | NULL    |                |</span><br><span class="line">+------------+------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><p>修改数据表类型，可以使用 alter table 命令来完成。</p>
<p>尝试以下实例，我们将表 student 的类型修改为 MyISAM ，然后再修改为 InnoDB：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student engine=myisam;</span><br><span class="line">Query OK, 8 rows affected (0.28 sec)</span><br><span class="line">Records: 8  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show table status like <span class="string">&quot;student&quot;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: student</span><br><span class="line">         Engine: MyISAM</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Dynamic</span><br><span class="line">           Rows: 8</span><br><span class="line"> Avg_row_length: 20</span><br><span class="line">    Data_length: 160</span><br><span class="line">Max_data_length: 281474976710655</span><br><span class="line">   Index_length: 2048</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: 9</span><br><span class="line">    Create_time: 2019-06-09 17:47:23</span><br><span class="line">    Update_time: 2019-06-09 17:47:23</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_general_ci</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table students engine=innodb;</span><br><span class="line">Query OK, 8 rows affected (0.76 sec)</span><br><span class="line">Records: 8  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show table status <span class="built_in">where</span> name=<span class="string">&quot;students&quot;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           Name: students</span><br><span class="line">         Engine: InnoDB</span><br><span class="line">        Version: 10</span><br><span class="line">     Row_format: Dynamic</span><br><span class="line">           Rows: 8</span><br><span class="line"> Avg_row_length: 2048</span><br><span class="line">    Data_length: 16384</span><br><span class="line">Max_data_length: 0</span><br><span class="line">   Index_length: 0</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: 9</span><br><span class="line">    Create_time: 2019-06-09 17:54:53</span><br><span class="line">    Update_time: 2019-06-09 17:54:53</span><br><span class="line">     Check_time: NULL</span><br><span class="line">      Collation: utf8_general_ci</span><br><span class="line">       Checksum: NULL</span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果需要修改数据表的名称，可以在 alter table 语句中使用 rename 子句来实现。</p>
<p>尝试以下实例将数据表 student 重命名为 students：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student rename to students;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_my_data |</span><br><span class="line">+-------------------+</span><br><span class="line">| students          |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>
<p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>
<h3 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h3><p>使用temporary关键字创建临时表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create temporary table class_room(room_id int unsigned primary key, class varchar(20) ) default charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into class_room values(205,<span class="string">&quot;九年级一班&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from class_room;</span><br><span class="line">+---------+-----------------+</span><br><span class="line">| room_id | class           |</span><br><span class="line">+---------+-----------------+</span><br><span class="line">|     205 | 九年级一班      |</span><br><span class="line">+---------+-----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc class_room;</span><br><span class="line">+---------+------------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type             | Null | Key | Default | Extra |</span><br><span class="line">+---------+------------------+------+-----+---------+-------+</span><br><span class="line">| room_id | int(10) unsigned | NO   | PRI | NULL    |       |</span><br><span class="line">| class   | varchar(20)      | YES  |     | NULL    |       |</span><br><span class="line">+---------+------------------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_my_data |</span><br><span class="line">+-------------------+</span><br><span class="line">| students          |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>当你使用 show tables命令显示数据表列表时，你将无法看到 class_room表。</p>
<p>如果你退出当前mysql会话，再使用 select命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p>
<h3 id="删除临时表"><a href="#删除临时表" class="headerlink" title="删除临时表"></a>删除临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。</p>
<p>以下是手动删除临时表的实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table class_room;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from class_room;</span><br><span class="line">ERROR 1146 (42S02): Table <span class="string">&#x27;my_data.class_room&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br></pre></td></tr></table></figure>

<h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用create table … select 命令，是无法实现的。</p>
<p><strong>实例</strong><br>尝试以下实例来复制表 runoob_tbl 。</p>
<p>步骤一：</p>
<p>获取数据表的完整结构。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table students\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: students</span><br><span class="line">Create Table: CREATE TABLE `students` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10) NOT NULL,</span><br><span class="line">  `class_room` varchar(20) DEFAULT <span class="string">&#x27;205&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>步骤二：</p>
<p>修改SQL语句的数据表名，并执行SQL语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table `student` (`id` int(10) unsigned not null auto_increment,`name` varchar(10) not null,`class_room` varchar(20) default <span class="string">&#x27;205&#x27;</span>, primary key (`id`)) engine=innodb auto_increment=9 default charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.59 sec)</span><br></pre></td></tr></table></figure>

<p>步骤三：</p>
<p>执行完第二步骤后，你将在数据库中创建新的克隆表 student。 如果你想拷贝数据表的数据你可以使用 insert into… select 语句来实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student(id,name,class_room) select * from students;</span><br><span class="line">Query OK, 8 rows affected (0.00 sec)</span><br><span class="line">Records: 8  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+----+--------+------------+</span><br><span class="line">| id | name   | class_room |</span><br><span class="line">+----+--------+------------+</span><br><span class="line">|  1 | 李华   | 205        |</span><br><span class="line">|  2 | 敏柔   | 205        |</span><br><span class="line">|  3 | 赵强   | 205        |</span><br><span class="line">|  4 | 罗晴   | 205        |</span><br><span class="line">|  5 | 李磊   | 205        |</span><br><span class="line">|  6 | 寒梅   | 205        |</span><br><span class="line">|  7 | 张雷   | 205        |</span><br><span class="line">|  8 | 莉莉   | 205        |</span><br><span class="line">+----+--------+------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h3><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p>
<h3 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h3><p>你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</p>
<p>如果你想设置表中字段 id，name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table teachers(id int unsigned auto_increment, name varchar(10), gender varchar(5), primary key(id,name));</span><br><span class="line">Query OK, 0 rows affected (0.26 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc teachers;</span><br><span class="line">+--------+------------------+------+-----+---------+----------------+</span><br><span class="line">| Field  | Type             | Null | Key | Default | Extra          |</span><br><span class="line">+--------+------------------+------+-----+---------+----------------+</span><br><span class="line">| id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name   | varchar(10)      | NO   | PRI | NULL    |                |</span><br><span class="line">| gender | varchar(5)       | YES  |     | NULL    |                |</span><br><span class="line">+--------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p>
<p>insert ignore into 与 insert into 的区别就是 insert ignore 会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into teachers values(1, <span class="string">&quot;李磊&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into teachers values(1, <span class="string">&quot;李磊&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry <span class="string">&#x27;1-李磊&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into teachers values(1, <span class="string">&quot;李磊&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>INSERT IGNORE INTO 当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而 REPLACE INTO 如果存在 primary 或 unique 相同的记录，则先删除掉。再插入新记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; replace into teachers values(1, <span class="string">&quot;李磊&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from teachers;</span><br><span class="line">+----+--------+--------+</span><br><span class="line">| id | name   | gender |</span><br><span class="line">+----+--------+--------+</span><br><span class="line">|  1 | 李磊   | 女     |</span><br><span class="line">+----+--------+--------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table person(first_name char(20) not null, last_name char(20) not null, gender char(10),unique (last_name, first_name)) charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.25 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person values(<span class="string">&quot;李&quot;</span>, <span class="string">&quot;雷&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person values(<span class="string">&quot;李&quot;</span>, <span class="string">&quot;雷&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person values(<span class="string">&quot;李&quot;</span>, <span class="string">&quot;丽&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from person;</span><br><span class="line">+------------+-----------+--------+</span><br><span class="line">| first_name | last_name | gender |</span><br><span class="line">+------------+-----------+--------+</span><br><span class="line">| 李         | 丽        | 女     |</span><br><span class="line">| 李         | 雷        | 男     |</span><br><span class="line">+------------+-----------+--------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><p>以下我们将统计表中 first_name 和 last_name的重复记录数：</p>
<ul>
<li>创建person_info表，并插入3条重复数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table person_info(id int unsigned primary key auto_increment,first_name char(20) not null, last_name char(20) not null, gender char(10)) charset=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.29 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person_info values(0,<span class="string">&quot;李&quot;</span>, <span class="string">&quot;丽&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person_info values(0,<span class="string">&quot;李&quot;</span>, <span class="string">&quot;丽&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert ignore into person_info values(0,<span class="string">&quot;李&quot;</span>, <span class="string">&quot;丽&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from person_info;</span><br><span class="line">+----+------------+-----------+--------+</span><br><span class="line">| id | first_name | last_name | gender |</span><br><span class="line">+----+------------+-----------+--------+</span><br><span class="line">|  1 | 李         | 丽        | 女     |</span><br><span class="line">|  2 | 李         | 丽        | 女     |</span><br><span class="line">|  3 | 李         | 丽        | 女     |</span><br><span class="line">+----+------------+-----------+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>查询重复数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) as repetitions,last_name,first_name from person_info group by last_name, first_name having repetitions &gt; 1;</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">| repetitions | last_name | first_name |</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">|           3 | 丽        | 李         |</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>以上查询将返回 person_info 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p>
<ul>
<li>确定哪一列包含的值可能会重复。</li>
<li>在列选择列表使用count(*)列出的那些列。</li>
<li>在group by子句中列出的列。</li>
<li>having子句设置重复数大于1。</li>
</ul>
<h3 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h3><p>如果你需要读取不重复的数据可以在 select 语句中使用 distinct 关键字来过滤重复数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select distinct first_name,last_name from person_info;</span><br><span class="line">+------------+-----------+</span><br><span class="line">| first_name | last_name |</span><br><span class="line">+------------+-----------+</span><br><span class="line">| 李         | 丽        |</span><br><span class="line">+------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>你也可以使用 group by 来读取数据表中不重复的数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select first_name, last_name  from person_info group by last_name, first_name;</span><br><span class="line">+------------+-----------+</span><br><span class="line">| first_name | last_name |</span><br><span class="line">+------------+-----------+</span><br><span class="line">| 李         | 丽        |</span><br><span class="line">+------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p>
<p>先创建临时表tab,新表tab中的数据时从person_info表中分组查询出来的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table tmp select last_name, first_name, gender from person_info  group by last_name, first_name, gender;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>在表的第一位添加主键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table tmp add column `id` bigint(20) primary key not null auto_increment comment <span class="string">&#x27;id&#x27;</span> first;</span><br></pre></td></tr></table></figure>

<p>删除原表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table person_info;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>重命名为person_info</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table tmp rename to person_info;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
</search>
